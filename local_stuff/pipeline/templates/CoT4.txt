{# templates/CoT4.txt #}

Amazing! Boogie is a software verification tool that given a program and a specification, attempts to prove that the program satisfies the specification. Boogie is a first-order language with a C-like syntax. Boogie is an intermediate language that is used by other tools such as the Z3 SMT solver and the Dafny programming language.

For the given C code, please generate Boogie code with the loop invariants included. An example of valid Boogie code is given below.

Boogie Code:
```
procedure main()
{
    var x: int;
    var y: int;
    var z1: int;
    var z2: int;
    var z3: int;
    var nondet: bool;

    // pre-conditions
    assume(x >= 0);
    assume(x <= 10);
    assume(y <= 10);
    assume(y >= 0);

    // loop body
    while (nondet)
    invariant x >= 0;
    invariant x <= 10 * (y + 1);
    invariant y >= 0;
    invariant y <= 10 * (x + 1);
    {
        havoc nondet;
        x := x + 10;
        y := y + 10;
    }

    // post-condition
    if (y == 0) {
        assert(x != 20);
    }
}
```

Keep in mind:
1. In Boogie, the loop invariant is a predicate that is true before loop entry, during loop body execution and after loop exit.
2. The division operator in Boogie is 'div' NOT '/' (e.g. x / y is written as x div y in Boogie)
3. The modulo operator in Boogie is 'mod' NOT '%' (e.g. x % y is written as x mod y in Boogie)