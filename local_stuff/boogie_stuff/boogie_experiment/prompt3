#Note: The openai-python library support for Azure OpenAI is in preview.
import os
import openai
openai.api_type = "azure"
openai.api_base = "https://gcrgpt4aoai9.openai.azure.com/"
openai.api_version = "2023-03-15-preview"
openai.api_key = os.getenv("OPENAI_API_KEY")


template = [{"role":"system","content":"You are a synthesis engine for loop invariants. Given a C file with a single loop and preconditions and postconditions, you first translate C code to Boogie. Then, you add loop invariants to the Boogie code so that Boogie code is verified. For each invariant added, add reasoning in comments for how,\n1) precondition implies the invariant holds before the loop is executed,\n2) loop condition and invariant at beginning of loop body implies invariant holds after loop body is executed\n\nYou are not allowed to assume or assert anything besides those already present in the code."},{"role":"user","content":"int main()  \n{  \n    int z1,z2,z3;  \n    int x = 0;  \n    int m = 0;  \n    int n;  \n  \n    while (x < n) {  \n        if (unknown()) {  \n            m = x;  \n        }  \n        x = x + 1;  \n    }  \n  \n    if(n > 0) {  \n       //assert (m < n);  \n       assert (m >= 0);  \n    }  \n}"},{"role":"assistant","content":"```\nprocedure main()  \n    {  \n        var z1: int;  \n        var z2: int;  \n        var z3: int;  \n        var x: int;  \n        var m: int;  \n        var n: int;  \n        var nondet: bool;  \n\n        // pre-condition\n        x := 0;\n        m := 0;  \n  \n        // loop body  \n        while (x < n)  \n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >=0\n        invariant 0 <= m && m <= x;  // 1) x = 0, m = 0 => 0 <= m && m <= x, 2) 0 <= m && m <= x && (m' = m || m' = x) && x' = x + 1 => 0 <= m' && m' <= x'\n        {  \n            havoc nondet;  \n            if (nondet) {  \n                m := x;  \n            }  \n            x := x + 1;  \n        }  \n  \n        // post-condition  \n        if (n > 0) {  \n            assert(m >= 0);  \n        }  \n    }  \n```"},{"role":"user","content":"int main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    assert (z >= y);\n}"},{"role":"assistant","content":"```\nprocedure main()\n    {\n        var x: int;\n        var y: int;\n        var z: int;\n\n        // pre-condition\n        x := 0;\n\n        // loop body\n        while (x < 500)\n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >= 0\n        invariant (x == 0 || z >= y); 1) x = 0 => (x==0 || z>=y), 2) x >=0 && (x==0 || z>=y) && x' = x + 1 && ((z <= y => y' = z) || (!(z <= y) => y' = y)) && z' = z =>  (x'==0 || z' >= y')\n        {\n            x := x + 1;\n            if (z <= y) {\n                y := z;\n            }\n        }\n\n        // post-condition\n        assert (z >= y);\n    }\n```"},{"role":"user","content":"int main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       assert (z >= y);\n    }\n}"},{"role":"assistant","content":"```\nprocedure main()\n    {\n        var x: int;\n        var size: int;\n        var y: int;\n        var z: int;\n\n        // pre-condition\n        x := 0;\n\n        // loop body\n        while (x < size)\n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >= 0\n        invariant x <= size; // 1) x = 0 => x <= size, 2) x <= size && x' = x + 1 => x' <= size\n        invariant (x == 0 || z >= y); // 1) x = 0 => (x==0 || z>=y), 2) x >=0 && (x==0 || z>=y) && x' = x + 1 && ((z <= y => y' = z) || (!(z <= y) => y' = y)) && z' = z =>  (x'==0 || z' >= y')\n        {\n            x := x + 1;\n            if (z <= y) {\n                y := z;\n            }\n        }\n\n        // post-condition\n        if (size > 0) {\n            assert (z >= y);\n        }\n    }\n```"}]

import pprint
pp = pprint.PrettyPrinter(indent=4)
for x in template:
  print(x['content'])

# response = openai.ChatCompletion.create(
#   engine="gpt-4",
#   messages = [{"role":"system","content":"You are a synthesis engine for loop invariants. Given a C file with a single loop and preconditions and postconditions, you first translate C code to Boogie. Then, you add loop invariants to the Boogie code so that Boogie code is verified. For each invariant added, add reasoning in comments for how,\n1) precondition implies the invariant holds before the loop is executed,\n2) loop condition and invariant at beginning of loop body implies invariant holds after loop body is executed\n\nYou are not allowed to assume or assert anything besides those already present in the code."},{"role":"user","content":"int main()  \n{  \n    int z1,z2,z3;  \n    int x = 0;  \n    int m = 0;  \n    int n;  \n  \n    while (x < n) {  \n        if (unknown()) {  \n            m = x;  \n        }  \n        x = x + 1;  \n    }  \n  \n    if(n > 0) {  \n       //assert (m < n);  \n       assert (m >= 0);  \n    }  \n}"},{"role":"assistant","content":"```\nprocedure main()  \n    {  \n        var z1: int;  \n        var z2: int;  \n        var z3: int;  \n        var x: int;  \n        var m: int;  \n        var n: int;  \n        var nondet: bool;  \n\n        // pre-condition\n        x := 0;\n        m := 0;  \n  \n        // loop body  \n        while (x < n)  \n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >=0\n        invariant 0 <= m && m <= x;  // 1) x = 0, m = 0 => 0 <= m && m <= x, 2) 0 <= m && m <= x && (m' = m || m' = x) && x' = x + 1 => 0 <= m' && m' <= x'\n        {  \n            havoc nondet;  \n            if (nondet) {  \n                m := x;  \n            }  \n            x := x + 1;  \n        }  \n  \n        // post-condition  \n        if (n > 0) {  \n            assert(m >= 0);  \n        }  \n    }  \n```"},{"role":"user","content":"int main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    assert (z >= y);\n}"},{"role":"assistant","content":"```\nprocedure main()\n    {\n        var x: int;\n        var y: int;\n        var z: int;\n\n        // pre-condition\n        x := 0;\n\n        // loop body\n        while (x < 500)\n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >= 0\n        invariant (x == 0 || z >= y); 1) x = 0 => (x==0 || z>=y), 2) x >=0 && (x==0 || z>=y) && x' = x + 1 && ((z <= y => y' = z) || (!(z <= y) => y' = y)) && z' = z =>  (x'==0 || z' >= y')\n        {\n            x := x + 1;\n            if (z <= y) {\n                y := z;\n            }\n        }\n\n        // post-condition\n        assert (z >= y);\n    }\n```"},{"role":"user","content":"int main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       assert (z >= y);\n    }\n}"},{"role":"assistant","content":"```\nprocedure main()\n    {\n        var x: int;\n        var size: int;\n        var y: int;\n        var z: int;\n\n        // pre-condition\n        x := 0;\n\n        // loop body\n        while (x < size)\n        invariant x >= 0; // 1) x = 0 => x >= 0, 2) x >=0 && x' = x + 1 => x' >= 0\n        invariant x <= size; // 1) x = 0 => x <= size, 2) x <= size && x' = x + 1 => x' <= size\n        invariant (x == 0 || z >= y); // 1) x = 0 => (x==0 || z>=y), 2) x >=0 && (x==0 || z>=y) && x' = x + 1 && ((z <= y => y' = z) || (!(z <= y) => y' = y)) && z' = z =>  (x'==0 || z' >= y')\n        {\n            x := x + 1;\n            if (z <= y) {\n                y := z;\n            }\n        }\n\n        // post-condition\n        if (size > 0) {\n            assert (z >= y);\n        }\n    }\n```"}],
#   temperature=0.2,
#   max_tokens=1000,
#   top_p=0.95,
#   frequency_penalty=0,
#   presence_penalty=0,
#   stop=None)
