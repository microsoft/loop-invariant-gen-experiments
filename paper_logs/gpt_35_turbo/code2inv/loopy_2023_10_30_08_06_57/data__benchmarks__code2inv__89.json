{
    "logs": {
        "file": "../data/benchmarks/code2inv/89.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `int lock`: initialized to 1.\n- `int v1`, `int v2`, `int v3`: not used in the program.\n- `int x`, `int y`: uninitialized.\n\nLoop Condition:\n- `(x != y)`\n\nLoop Invariants:\n- `lock == 1`\n- `x == y ==> lock == 1`\n- `x <= y`\n- `y <= \\max_int`\n\nExplanation:\n- `lock == 1`: Since `lock` is initialized to 1 and is not modified anywhere outside the loop, it will always be 1 inside the loop.\n- `x == y ==> lock == 1`: If `x` is ever equal to `y`, then the loop will terminate and the assertion will be checked. The assertion requires `lock` to be equal to 1 at that point. Therefore, if `x` ever becomes equal to `y`, `lock` must be equal to 1.\n- `x <= y`: Inside the loop, `x` is always set to the value of `y`. Therefore, `x` can never be greater than `y`.\n- `y <= \\max_int`: Since `y` is incremented by 1 inside the loop and there are no other constraints on its value, its maximum possible value is the maximum integer value that can be represented in the system. \n\nPutting it all together:\n```\n/*@ \n  loop invariant lock == 1;\n  loop invariant x == y ==> lock == 1;\n  loop invariant x <= y;\n  loop invariant y <= \\max_int;\n*/\n```",
            "Pre-conditions:\n- The function `unknown()` returns a Boolean value.\n- All variables are uninitialized and have garbage values.\n\nVariable assignments:\n- `x` is assigned the value of `y`.\n- `lock` is assigned the value of `1`.\n\nLoop condition:\n- The loop continues while `x` is not equal to `y`.\n\nLoop body:\n- If `unknown()` returns true, `lock` is assigned the value of `1` and `x` is assigned the value of `y`.\n- If `unknown()` returns false, `lock` is assigned the value of `0`, `x` is assigned the value of `y`, and `y` is incremented by `1`.\n\nPost-condition:\n- `lock` is equal to `1`.\n\nLoop Invariants:\n- `x` is always equal to or smaller than `y`.\n- `lock` is either `0` or `1`.\n- If `unknown()` returns true, then `lock` is equal to `1` and `x` is equal to `y`.\n- If `unknown()` returns false, then `y` is incremented by `1`.\n- If `lock` is equal to `1`, then `x` is equal to `y`.\n- If `lock` is equal to `0`, then `x` is not equal to `y`.\n- If `lock` is equal to `0`, then `y` is greater than `x`.\n- `lock` is equal to `1` at the end of the loop.\n- `(x == y) ==> (lock == 1)` (Implication of the post-condition)\n\nPutting all of the loop invariants together, we have:\n\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (unknown() ==> (lock == 1 && x == y));\n    loop invariant (!unknown() ==> y == \\old(y) + \\at(1, Post) && x == y);\n    loop invariant (lock == 1 ==> x == y);\n    loop invariant (lock == 0 ==> x != y);\n    loop invariant (lock == 0 ==> y > x);\n    loop invariant lock == 1;\n    loop invariant (x == y) ==> (lock == 1);\n*/\n```",
            "Pre-conditions:\n\n- All variables have garbage values.\n\nVariable assignments:\n\n- `x` is assigned the value of `y`.\n- `lock` is assigned the value 1.\n\nLoop condition:\n\n- The loop executes while `x` is not equal to `y`.\n\nPost-condition:\n\n- At the end of the loop, `lock` must be equal to 1.\n\nLoop invariants:\n\n- Before the loop execution:\n  - `lock == 1`\n  - `x == y`\n  - `v1 <= x <= v2` (where `v1` and `v2` are the minimum and maximum values that `x` can take)\n  - `v3 <= y <= v4` (where `v3` and `v4` are the minimum and maximum values that `y` can take)\n  \n- In every iteration of the loop:\n  - `(x == y) ==> (lock == 1)`\n  - `(x != y) ==> (lock == 0)`\n  - `v1 <= x <= v2`\n  - `v3 <= y <= v4`\n  - `v5 <= y - x <= v6` (where `v5` and `v6` are the minimum and maximum possible values of `y - x`)\n  \n- After the loop termination:\n  - `(x == y) ==> (lock == 1)`\n\nNote: Since the values of `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are not given in the program, we cannot determine them. However, we can assume that they exist and add them as necessary loop invariants.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume(e)` that returns 0 if the expression `e` is false.\n- The program declares an external function `unknown()` that returns an integer value.\n- The program declares and initializes the following integer variables:\n  - `lock` with value 1\n  - `v1`, `v2`, and `v3` with no initial value\n  - `x` and `y` with no initial value\n- The program assigns the value of `y` to `x`, and the value of `1` to `lock`.\n\nLoop condition:\n- The while loop continues as long as `x` is not equal to `y`.\n\nLoop invariants:\n- `x == y ==> lock == 1` (Implication that covers the assertion in the program)\n- `lock == 0 || lock == 1` (Bounds for the variable `lock`)\n- `y >= 0` (Lower bound for the variable `y`)\n- `x >= y` (Relation between `x` and `y`)\n- `v1`, `v2`, and `v3` do not affect the loop and can be omitted from the loop invariants.\n- Since `unknown()` is non-deterministic, it can be used in an implication to make the invariant trivially true at the beginning or end of the loop. However, it is not necessary in this case since `unknown()` does not affect any variables used in the loop condition or the loop body. Therefore, it can be omitted from the loop invariants.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x == y ==> lock == 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n*/\nwhile (x != y) {\n    ...\n}\n/*@ \n    assert x == y ==> lock == 1;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `lock` is assigned the value of 1\n- `x` is assigned the value of `y`\n\nLoop condition:\n- The loop continues while `x` is not equal to `y`\n\nPossible loop invariants:\n- `lock` is either 0 or 1 at all times: `lock == 0 || lock == 1`\n- `x` is always equal to `y` at the beginning of the loop: `x == y ==> true`\n- `y` is always greater than or equal to its initial value at the beginning of each iteration of the loop: `y >= \\old(y)`\n- `x` is always less than or equal to its initial value at the beginning of each iteration of the loop: `x <= \\old(x)`\n- If `lock` is 0, then `y` is greater than its initial value at the end of the loop: `lock == 0 ==> y > \\old(y)`\n- If `lock` is 1, then `y` is equal to its initial value at the end of the loop: `lock == 1 ==> y == \\old(y)`\n- If `lock` is 1, then `x` is equal to its initial value at the end of the loop: `lock == 1 ==> x == \\old(y)`\n\nPutting all the loop invariants together, we get:\n```\n/*@ \nloop invariant lock == 0 || lock == 1;\nloop invariant x == y ==> true;\nloop invariant y >= \\old(y);\nloop invariant x <= \\old(x);\nloop invariant lock == 0 ==> y > \\old(y);\nloop invariant lock == 1 ==> y == \\old(y);\nloop invariant lock == 1 ==> x == \\old(y);\n*/\n```\nThese loop invariants are true before the loop execution, in every iteration of the loop and after the loop termination, and they imply the post-condition."
        ],
        "annotation_blocks": [
            "/*@ \n  loop invariant lock == 1;\n  loop invariant x == y ==> lock == 1;\n  loop invariant x <= y;\n  loop invariant y <= \\max_int;\n*/",
            "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (unknown() ==> (lock == 1 && x == y));\n    loop invariant (!unknown() ==> y == \\old(y) + \\at(1, Post) && x == y);\n    loop invariant (lock == 1 ==> x == y);\n    loop invariant (lock == 0 ==> x != y);\n    loop invariant (lock == 0 ==> y > x);\n    loop invariant lock == 1;\n    loop invariant (x == y) ==> (lock == 1);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n\n- All variables have garbage values.\n\nVariable assignments:\n\n- `x` is assigned the value of `y`.\n- `lock` is assigned the value 1.\n\nLoop condition:\n\n- The loop executes while `x` is not equal to `y`.\n\nPost-condition:\n\n- At the end of the loop, `lock` must be equal to 1.\n\nLoop invariants:\n\n- Before the loop execution:\n  - `lock == 1`\n  - `x == y`\n  - `v1 <= x <= v2` (where `v1` and `v2` are the minimum and maximum values that `x` can take)\n  - `v3 <= y <= v4` (where `v3` and `v4` are the minimum and maximum values that `y` can take)\n  \n- In every iteration of the loop:\n  - `(x == y) ==> (lock == 1)`\n  - `(x != y) ==> (lock == 0)`\n  - `v1 <= x <= v2`\n  - `v3 <= y <= v4`\n  - `v5 <= y - x <= v6` (where `v5` and `v6` are the minimum and maximum possible values of `y - x`)\n  \n- After the loop termination:\n  - `(x == y) ==> (lock == 1)`\n\nNote: Since the values of `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are not given in the program, we cannot determine them. However, we can assume that they exist and add them as necessary loop invariants."
            ],
            "/*@ \n    loop invariant x == y ==> lock == 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n*/\nwhile (x != y) {\n    ...\n}\n/*@ \n    assert x == y ==> lock == 1;\n*/",
            "/*@ \nloop invariant lock == 0 || lock == 1;\nloop invariant x == y ==> true;\nloop invariant y >= \\old(y);\nloop invariant x <= \\old(x);\nloop invariant lock == 0 ==> y > \\old(y);\nloop invariant lock == 1 ==> y == \\old(y);\nloop invariant lock == 1 ==> x == \\old(y);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant lock == 1;\n  loop invariant x == y ==> lock == 1;\n  loop invariant x <= y;\n  loop invariant y <= \\max_int;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unbound logic variable \\max_int. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\n\nloop invariant i2: x == y ==> lock == 1;\nloop invariant i3: x <= y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (unknown() ==> (lock == 1 && x == y));\n    loop invariant (!unknown() ==> y == \\old(y) + \\at(1, Post) && x == y);\n    loop invariant (lock == 1 ==> x == y);\n    loop invariant (lock == 0 ==> x != y);\n    loop invariant (lock == 0 ==> y > x);\n    loop invariant lock == 1;\n    loop invariant (x == y) ==> (lock == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: x <= y;\nloop invariant i2: lock == 0 || lock == 1;\n\n\nloop invariant i5: (lock == 1 ==> x == y);\nloop invariant i6: (lock == 0 ==> x != y);\nloop invariant i7: (lock == 0 ==> y > x);\nloop invariant i8: lock == 1;\nloop invariant i9: (x == y) ==> (lock == 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n\n- All variables have garbage values.\n\nVariable assignments:\n\n- `x` is assigned the value of `y`.\n- `lock` is assigned the value 1.\n\nLoop condition:\n\n- The loop executes while `x` is not equal to `y`.\n\nPost-condition:\n\n- At the end of the loop, `lock` must be equal to 1.\n\nLoop invariants:\n\n- Before the loop execution:\n  - `lock == 1`\n  - `x == y`\n  - `v1 <= x <= v2` (where `v1` and `v2` are the minimum and maximum values that `x` can take)\n  - `v3 <= y <= v4` (where `v3` and `v4` are the minimum and maximum values that `y` can take)\n  \n- In every iteration of the loop:\n  - `(x == y) ==> (lock == 1)`\n  - `(x != y) ==> (lock == 0)`\n  - `v1 <= x <= v2`\n  - `v3 <= y <= v4`\n  - `v5 <= y - x <= v6` (where `v5` and `v6` are the minimum and maximum possible values of `y - x`)\n  \n- After the loop termination:\n  - `(x == y) ==> (lock == 1)`\n\nNote: Since the values of `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are not given in the program, we cannot determine them. However, we can assume that they exist and add them as necessary loop invariants.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x == y ==> lock == 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n*/\nwhile (x != y) {\n    ...\n}\n/*@ \n    assert x == y ==> lock == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y ==> lock == 1 is partially proven to be inductive.\nloop invariant lock == 0 || lock == 1 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant x >= y is established but not preserved.\nAssertion lock == 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: x == y ==> lock == 1;\nloop invariant i2: lock == 0 || lock == 1;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 8,
                "annotations": "/*@ \nloop invariant lock == 0 || lock == 1;\nloop invariant x == y ==> true;\nloop invariant y >= \\old(y);\nloop invariant x <= \\old(x);\nloop invariant lock == 0 ==> y > \\old(y);\nloop invariant lock == 1 ==> y == \\old(y);\nloop invariant lock == 1 ==> x == \\old(y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unbound logic variable true. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 0 || lock == 1;\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1;\nloop invariant i2: x == y ==> lock == 1;\nloop invariant i3: x <= y;\nloop invariant i4: y <= \\max_int;\nloop invariant i5: lock == 0 || lock == 1;\nloop invariant i6: (unknown() ==> (lock == 1 && x == y));\nloop invariant i7: (!unknown() ==> y == \\old(y) + \\at(1, Post) && x == y);\nloop invariant i8: (lock == 1 ==> x == y);\nloop invariant i9: (lock == 0 ==> x != y);\nloop invariant i10: (lock == 0 ==> y > x);\nloop invariant i11: (x == y) ==> (lock == 1);\nloop invariant i12: y >= 0;\nloop invariant i13: x >= y;\nloop invariant i14: x == y ==> true;\nloop invariant i15: y >= \\old(y);\nloop invariant i16: x <= \\old(x);\nloop invariant i17: lock == 0 ==> y > \\old(y);\nloop invariant i18: lock == 1 ==> y == \\old(y);\nloop invariant i19: lock == 1 ==> x == \\old(y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  /*@\nloop invariant i1: lock == 1;\nloop invariant i2: x == y ==> lock == 1;\nloop invariant i3: x <= y;\n\nloop invariant i5: lock == 0 || lock == 1;\n\n\nloop invariant i8: (lock == 1 ==> x == y);\nloop invariant i9: (lock == 0 ==> x != y);\nloop invariant i10: (lock == 0 ==> y > x);\nloop invariant i11: (x == y) ==> (lock == 1);\n\nloop invariant i13: x >= y;\n\n\n\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 80,
        "success_count": 53,
        "failure_count": 27,
        "success_rate": 0.6625
    }
}