{
    "logs": {
        "file": "../data/benchmarks/code2inv/80.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's analyze the loop body. The loop body only updates the value of i if the condition `(i < y)` holds. Therefore, we can infer that the loop will run at most `y` times. \n\nNext, let's consider the pre-conditions and variable assignments. We know that `x` and `y` are both non-negative, and `x` is greater than or equal to `y`. We also know that `i` is assigned the value 0 initially.\n\nNow, let's come up with loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop, we can state the following loop invariants:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n    loop invariant x >= y;\n*/\n```\nThe first invariant ensures that `i` is non-negative before the loop starts. The second and third invariants ensure that `x` and `y` are non-negative before the loop starts. The fourth invariant ensures that `i` is initialized to 0 before the loop starts. The fifth invariant ensures that `x` is greater than or equal to `y` before the loop starts.\n\nIn every iteration of the loop, we can state the following loop invariants:\n```\n/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n*/\n```\nThe first invariant ensures that `i` is less than or equal to `y` in every iteration of the loop. The second invariant ensures that `i` remains non-negative in every iteration of the loop. The third and fourth invariants ensure that `x` and `y` remain non-negative in every iteration of the loop. The fifth invariant ensures that `x` is greater than or equal to `y` in every iteration of the loop.\n\nAfter the loop, we can state the following loop invariants:\n```\n/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i < x);\n*/\n```\nThe first five invariants are the same as before. The last invariant states that if `i` is less than `y` at the end of the loop, then `i` must also be less than `x`. We use implication here to take care of the conditional nature of the code.\n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i < x);\n*/\n``` \nNote that we do not need to add any loop invariants to handle non-deterministic values at the beginning or end of the loop because all variables are explicitly initialized in this program.",
            "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nVariable assignments:\n- `i = 0`\n\nLoop condition:\n- `unknown()`\n\nPost-condition:\n- `(i < y) ==> (i < x)`\n\nLoop invariants:\n- Before the loop: `i == 0`\n- In every iteration of the loop: \n    - `i <= y`\n    - `i <= x`\n- After the loop:\n    - `(i >= y) ==> (i < x)` (using implication because of the conditional assertion)\n\nVariable bounds:\n- `0 <= i`\n- `0 <= x`\n- `0 <= y`\n\nVariable relations:\n- `x >= y`\n\nAdding all the loop invariants together:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i >= y) ==> (i < x);\n*/\n```",
            "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nVariable assignments:\n- `i = 0`\n\nLoop condition:\n- `unknown()`\n\nPost-condition:\n- `i < x` if `i < y`\n\nLoop invariants:\n- `x >= 0 && y >= 0 && x >= y && i >= 0` (true before the loop execution)\n- `i <= y && x >= 0 && y >= 0 && x >= y` (true in every iteration of the loop)\n- `(i >= y ==> i < x) && (i < y ==> true)` (true after the loop termination)\n\nExplanation:\n- The first loop invariant ensures that `x`, `y`, and `i` are non-negative, and `x >= y`.\n- The second loop invariant states that `i` is always less than or equal to `y` since `i` is incremented only when `i < y`. It also ensures that `x` and `y` are non-negative and `x >= y`.\n- The third loop invariant is an implication that uses the guard condition of the assertion. If `i >= y`, then the assertion `i < x` must hold. Otherwise, when `i < y`, the assertion is trivially true. \n\nNote:\n- There are no deterministic bounds for the variables `x`, `y`, and `i`. Therefore, we cannot add any conjunctions bounding their maximum or minimum values. \n- The variables `z1`, `z2`, and `z3` are not used in the program, so we do not need to include them in the loop invariants.",
            "The pre-conditions and variable assignments in the program are:\n- `x` and `y` are non-negative integers.\n- `x` is greater than or equal to `y`.\n- `i` is initialized to `0`.\n\nThe loop condition is `unknown()`, which means that we do not know when the loop will terminate. \n\nWe need to find loop invariants that are true:\n- before the loop execution,\n- in every iteration of the loop, and\n- after the loop termination,\n\nsuch that the loop invariants imply the post-condition `i < x` (under the condition `i < y`).\n\nLet's start by analyzing the loop body. The loop body contains only one conditional statement, which increments `i` if `i` is less than `y`. Therefore, we can conclude that `i` is always less than or equal to `y` inside the loop.\n\nBased on the program, we can infer the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i < y ==> i < x;\n*/\n```\nExplanation of the loop invariants:\n- `0 <= i <= y` - `i` is always between `0` and `y` (inclusive) inside the loop.\n- `x >= 0` - `x` is non-negative.\n- `y >= 0` - `y` is non-negative.\n- `x >= y` - `x` is greater than or equal to `y`.\n- `i < y ==> i < x` - If `i` is less than `y`, then `i` is less than `x`. This implication is required to handle the conditional assertion at the end of the loop.\n\nNote that we do not need to add any invariants for `z1`, `z2`, and `z3` because they are not used in the program.",
            "Pre-conditions:\n- `x` is a non-negative integer.\n- `y` is a non-negative integer.\n- `x` is greater than or equal to `y`.\n\nLoop condition:\n- The loop runs while the return value of `unknown()` is non-zero.\n\nPost-condition:\n- If `i` is less than `y` after the loop, then `i` must be less than `x`.\n\nLoop invariants:\n- Before the loop execution:\n    - `i` is equal to 0.\n    - `x` is a non-negative integer.\n    - `y` is a non-negative integer.\n    - `x` is greater than or equal to `y`.\n    - `i` is less than or equal to `y`.\n    - `i` is less than or equal to `x`.\n- In every iteration of the loop:\n    - The value of `i` increases by 1 if it is less than `y`.\n    - `i` is less than or equal to `y`.\n    - `i` is less than or equal to `x`.\n- After the loop termination:\n    - If `i` is less than `y`, then `i` is less than `x`.\n\nPutting all the loop invariants together:\n\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i < y ==> i < x);\n*/\n``` \n\nNote that we used the implication operator `==>` to take care of the conditional post-condition."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n    loop invariant x >= y;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i >= y) ==> (i < x);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nVariable assignments:\n- `i = 0`\n\nLoop condition:\n- `unknown()`\n\nPost-condition:\n- `i < x` if `i < y`\n\nLoop invariants:\n- `x >= 0 && y >= 0 && x >= y && i >= 0` (true before the loop execution)\n- `i <= y && x >= 0 && y >= 0 && x >= y` (true in every iteration of the loop)\n- `(i >= y ==> i < x) && (i < y ==> true)` (true after the loop termination)\n\nExplanation:\n- The first loop invariant ensures that `x`, `y`, and `i` are non-negative, and `x >= y`.\n- The second loop invariant states that `i` is always less than or equal to `y` since `i` is incremented only when `i < y`. It also ensures that `x` and `y` are non-negative and `x >= y`.\n- The third loop invariant is an implication that uses the guard condition of the assertion. If `i >= y`, then the assertion `i < x` must hold. Otherwise, when `i < y`, the assertion is trivially true. \n\nNote:\n- There are no deterministic bounds for the variables `x`, `y`, and `i`. Therefore, we cannot add any conjunctions bounding their maximum or minimum values. \n- The variables `z1`, `z2`, and `z3` are not used in the program, so we do not need to include them in the loop invariants."
            ],
            "/*@ \n    loop invariant 0 <= i <= y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i < y ==> i < x;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i < y ==> i < x);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i == 0;\n    loop invariant x >= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nloop invariant x >= y is partially proven to be inductive.\nAssertion i < x: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\nloop invariant i5: x >= y;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i >= y) ==> (i < x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant (i >= y) ==> (i < x) is preserved but not established.\nAssertion i < x: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: 0 <= i;\nloop invariant i3: 0 <= x;\nloop invariant i4: 0 <= y;\nloop invariant i5: i <= y;\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nVariable assignments:\n- `i = 0`\n\nLoop condition:\n- `unknown()`\n\nPost-condition:\n- `i < x` if `i < y`\n\nLoop invariants:\n- `x >= 0 && y >= 0 && x >= y && i >= 0` (true before the loop execution)\n- `i <= y && x >= 0 && y >= 0 && x >= y` (true in every iteration of the loop)\n- `(i >= y ==> i < x) && (i < y ==> true)` (true after the loop termination)\n\nExplanation:\n- The first loop invariant ensures that `x`, `y`, and `i` are non-negative, and `x >= y`.\n- The second loop invariant states that `i` is always less than or equal to `y` since `i` is incremented only when `i < y`. It also ensures that `x` and `y` are non-negative and `x >= y`.\n- The third loop invariant is an implication that uses the guard condition of the assertion. If `i >= y`, then the assertion `i < x` must hold. Otherwise, when `i < y`, the assertion is trivially true. \n\nNote:\n- There are no deterministic bounds for the variables `x`, `y`, and `i`. Therefore, we cannot add any conjunctions bounding their maximum or minimum values. \n- The variables `z1`, `z2`, and `z3` are not used in the program, so we do not need to include them in the loop invariants.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i < y ==> i < x;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= y is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x >= y is inductive.\nloop invariant i < y ==> i < x is inductive.\nAssertion i < x: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant i <= x;\n    loop invariant (i < y ==> i < x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant (i < y ==> i < x) is partially proven to be inductive.\nAssertion i < x: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: i <= y;\nloop invariant i6: i <= x;\nloop invariant i7: (i < y ==> i < x);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant i == 0 is established but not preserved.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant i <= y is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant (i >= y) ==> (i < x) is preserved but not established.\nloop invariant 0 <= i <= y is partially proven to be inductive.\nloop invariant i < y ==> i < x is partially proven to be inductive.\nloop invariant (i < y ==> i < x) is partially proven to be inductive.\nAssertion i < x: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: i == 0;\nloop invariant i5: x >= y;\nloop invariant i6: 0 <= i;\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= y;\nloop invariant i9: i <= y;\nloop invariant i10: i <= x;\nloop invariant i11: (i >= y) ==> (i < x);\nloop invariant i12: 0 <= i <= y;\nloop invariant i13: i < y ==> i < x;\nloop invariant i14: (i < y ==> i < x);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n\nloop invariant i5: x >= y;\nloop invariant i6: 0 <= i;\nloop invariant i7: 0 <= x;\nloop invariant i8: 0 <= y;\nloop invariant i9: i <= y;\nloop invariant i10: i <= x;\n\nloop invariant i12: 0 <= i <= y;\nloop invariant i13: i < y ==> i < x;\nloop invariant i14: (i < y ==> i < x);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 71,
        "success_count": 45,
        "failure_count": 26,
        "success_rate": 0.6338028169014085
    }
}