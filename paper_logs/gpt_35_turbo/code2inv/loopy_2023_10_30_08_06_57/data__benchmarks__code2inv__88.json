{
    "logs": {
        "file": "../data/benchmarks/code2inv/88.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `lock` is assigned 0\n- `y` is assigned the value of `x+1`\n\nLoop Condition:\n- The loop continues as long as `x` is not equal to `y`\n\nLoop Invariants:\n- `x` is always less than or equal to `y`\n- `lock` is always either 0 or 1\n- If `lock` is 1, then `x` is equal to `y`\n- If `lock` is 0, then `y` is greater than `x`\n\nPutting it all together, the loop invariants can be expressed as:\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 0 ==> y > x;\n*/\n```",
            "Pre-conditions: None\n\nVariable Assignments:\n- `lock` is assigned the value 0.\n- `y` is assigned the value `x+1`.\n\nLoop Condition: `(x != y)`\n\nLoop Invariants:\n- `0 <= lock <= 1` (lock can only take the values 0 or 1)\n- `y = x + 1`\n- `x <= y`\n- `x >= y - 1`\n- If `lock == 1`, then `x == y`\n- If `lock == 0`, then `y > x`\n- If `lock == 0`, then `y` is greater than any previous value of `y` in the loop.\n\nPutting it all together:\n\n```\n/*@\nloop invariant 0 <= lock <= 1;\nloop invariant y == x + 1;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (y > x);\nloop invariant (lock == 0) ==> (\\forall integer i; i >= 0 && i < \\at(y, LoopEntry) - y; unknown());\nloop variant \\at(y, LoopEntry) - x;\n*/\n```\n\nExplanation:\n\nThe loop invariant `0 <= lock <= 1` ensures that `lock` can only take the values 0 or 1. \n\nThe loop invariant `y = x + 1` ensures that `y` is always one more than `x`. \n\nThe loop invariant `x <= y` ensures that `x` is always less than or equal to `y`.\n\nThe loop invariant `x >= y - 1` ensures that `x` is always greater than or equal to `y-1`.\n\nThe loop invariant `(lock == 1) ==> (x == y)` ensures that if `lock` is 1, then `x` must be equal to `y`.\n\nThe loop invariant `(lock == 0) ==> (y > x)` ensures that if `lock` is 0, then `y` must be greater than `x`.\n\nThe loop invariant `(lock == 0) ==> (\\forall integer i; i >= 0 && i < \\at(y, LoopEntry) - y; unknown())` ensures that if `lock` is 0, then `y` is greater than any previous value of `y` in the loop. This is because the loop can only terminate when `x` is equal to `y`, and if `y` is not increasing, then the loop will not terminate.\n\nThe loop variant `\\at(y, LoopEntry) - x` ensures that the value of `y` is strictly increasing in each iteration of the loop.",
            "Before analyzing the loop, let's note down the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- None\n\nVariable assignments:\n- `y` is assigned the value of `x + 1`\n- `lock` is assigned the value of 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `(x != y)`\n\nTo find the necessary loop invariants, we need to consider the code inside the loop body and the post-condition. \n\nCode inside the loop body:\n- The code inside the loop body is a conditional statement with two branches:\n  - If `unknown()` returns true, `lock` is assigned the value of 1 and `x` is assigned the value of `y`.\n  - If `unknown()` returns false, `lock` is assigned the value of 0, `x` is assigned the value of `y`, and `y` is incremented by 1.\n\nPost-condition:\n- The post-condition is `lock == 1`\n\nNow, let's find the necessary loop invariants that imply the post-condition:\n- `(lock == 1)` (this is the post-condition itself)\n- `x <= y` (since `y` is always incremented by 1 in the false branch, `x` should always be less than or equal to `y`)\n- `lock == 0 ==> x == \\old(x)` (if `lock` is 0, then `x` should remain the same as its old value)\n- `lock == 0 ==> y == \\old(y)` (if `lock` is 0, then `y` should remain the same as its old value)\n- `lock == 1 ==> x == y` (if `lock` is 1, then `x` should be equal to `y`)\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 ==> x == \\old(x);\n    loop invariant lock == 0 ==> y == \\old(y);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 1;\n*/\n```",
            "Pre-conditions and variable assignments:\n- `lock`, `x`, and `y` are uninitialized integers.\n\nLoop condition:\n- The loop runs while `x` is not equal to `y`.\n\nLoop invariants:\n- Before the loop execution:\n    - Since `lock` is uninitialized, it can take any value. Therefore, we add the following conjunction: `lock >= INT_MIN && lock <= INT_MAX`.\n    - Since `x` and `y` are uninitialized, they can take any value. Therefore, we add the following conjunctions: `x >= INT_MIN && x <= INT_MAX` and `y >= INT_MIN && y <= INT_MAX`.\n- In every iteration of the loop:\n    - Since `x` is updated to be equal to `y` in both cases, we add the following conjunction: `x == y || x == y - 1`.\n    - Since `y` is updated to be incremented by 1 in the else case, we add the following conjunction: `y >= x`.\n    - Since `lock` is updated to 1 in the if case, we add the following conjunction: `(x == y) ==> (lock == 1)`.\n- After the loop termination:\n    - Since the loop terminates when `x` is equal to `y`, we add the following conjunction: `x == y`.\n    - Since the assertion is guarded by `lock == 1`, we add the following implication: `(lock == 1) ==> (x == y)`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant lock >= INT_MIN && lock <= INT_MAX;\n    loop invariant x >= INT_MIN && x <= INT_MAX;\n    loop invariant y >= INT_MIN && y <= INT_MAX;\n    loop invariant x == y || x == y - 1;\n    loop invariant y >= x;\n    loop invariant (x == y) ==> (lock == 1);\n*/\n\nwhile ((x != y)) {\n    {\n        if ( unknown() ) {\n            {\n                (lock  = 1);\n                (x  = y);\n            }\n        } else {\n            {\n                (lock  = 0);\n                (x  = y);\n                (y  = (y + 1));\n            }\n        }\n    }\n}\n\n//@ assert ( (lock == 1) ==> (x == y) );\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `lock` is assigned the value 0.\n- `x` is assigned a non-deterministic value.\n- `y` is assigned the value `x + 1`.\n\nLoop condition:\n- The loop continues while `x` is not equal to `y`.\n\nLoop invariants:\n- `x` and `y` are always non-negative integers.\n- `y` is greater than `x`.\n- If `lock` is 0, then `y` is equal to the original value of `y` plus the number of times the loop has iterated.\n- If `lock` is 1, then `x` and `y` are equal.\n- The loop terminates in a finite number of iterations.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y > x;\n    loop invariant lock == 0 ==> y == \\at(y, Pre) + \\at(\\at(__fc_s_success_cnt, LoopEntry), Pre);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant unknown() || lock == 0;\n    loop invariant x != y ==> lock == 0;\n    loop invariant x == y || lock == 1;\n    loop invariant \\at(__fc_s_iteration, LoopCurrent) <= x - \\at(x, LoopEntry) + 1;\n*/\n```\nNote that the last invariant ensures that the loop terminates in a finite number of iterations. This is because `x` and `y` are both non-negative integers, and `y` is always greater than `x`. Therefore, the difference `y - x` is a non-negative integer, and the loop can iterate at most `y - x + 1` times before `x` becomes equal to `y`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 0 ==> y > x;\n*/",
            "/*@\nloop invariant 0 <= lock <= 1;\nloop invariant y == x + 1;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (y > x);\nloop invariant (lock == 0) ==> (\\forall integer i; i >= 0 && i < \\at(y, LoopEntry) - y; unknown());\nloop variant \\at(y, LoopEntry) - x;\n*/",
            "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 ==> x == \\old(x);\n    loop invariant lock == 0 ==> y == \\old(y);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 1;\n*/",
            "/*@ \n    loop invariant lock >= INT_MIN && lock <= INT_MAX;\n    loop invariant x >= INT_MIN && x <= INT_MAX;\n    loop invariant y >= INT_MIN && y <= INT_MAX;\n    loop invariant x == y || x == y - 1;\n    loop invariant y >= x;\n    loop invariant (x == y) ==> (lock == 1);\n*/\n\nwhile ((x != y)) {\n    {\n        if ( unknown() ) {\n            {\n                (lock  = 1);\n                (x  = y);\n            }\n        } else {\n            {\n                (lock  = 0);\n                (x  = y);\n                (y  = (y + 1));\n            }\n        }\n    }\n}\n\n//@ assert ( (lock == 1) ==> (x == y) );",
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y > x;\n    loop invariant lock == 0 ==> y == \\at(y, Pre) + \\at(\\at(__fc_s_success_cnt, LoopEntry), Pre);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant unknown() || lock == 0;\n    loop invariant x != y ==> lock == 0;\n    loop invariant x == y || lock == 1;\n    loop invariant \\at(__fc_s_iteration, LoopCurrent) <= x - \\at(x, LoopEntry) + 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 0 ==> y > x;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x <= y is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant lock == 1 ==> x == y is inductive.\nloop invariant lock == 0 ==> y > x is inductive.\nAssertion lock == 1: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= lock <= 1;\nloop invariant y == x + 1;\nloop invariant x <= y;\nloop invariant x >= y - 1;\nloop invariant (lock == 1) ==> (x == y);\nloop invariant (lock == 0) ==> (y > x);\nloop invariant (lock == 0) ==> (\\forall integer i; i >= 0 && i < \\at(y, LoopEntry) - y; unknown());\nloop variant \\at(y, LoopEntry) - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token ';'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: 0 <= lock <= 1;\n\nloop invariant i3: x <= y;\nloop invariant i4: x >= y - 1;\nloop invariant i5: (lock == 1) ==> (x == y);\nloop invariant i6: (lock == 0) ==> (y > x);\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x <= y;\n    loop invariant lock == 0 ==> x == \\old(x);\n    loop invariant lock == 0 ==> y == \\old(y);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant lock == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: x <= y;\n\n\nloop invariant i4: lock == 1 ==> x == y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant lock >= INT_MIN && lock <= INT_MAX;\n    loop invariant x >= INT_MIN && x <= INT_MAX;\n    loop invariant y >= INT_MIN && y <= INT_MAX;\n    loop invariant x == y || x == y - 1;\n    loop invariant y >= x;\n    loop invariant (x == y) ==> (lock == 1);\n*/\n\nwhile ((x != y)) {\n    {\n        if ( unknown() ) {\n            {\n                (lock  = 1);\n                (x  = y);\n            }\n        } else {\n            {\n                (lock  = 0);\n                (x  = y);\n                (y  = (y + 1));\n            }\n        }\n    }\n}\n\n//@ assert ( (lock == 1) ==> (x == y) );",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable INT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\nloop invariant i4: x == y || x == y - 1;\nloop invariant i5: y >= x;\nloop invariant i6: (x == y) ==> (lock == 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y > x;\n    loop invariant lock == 0 ==> y == \\at(y, Pre) + \\at(\\at(__fc_s_success_cnt, LoopEntry), Pre);\n    loop invariant lock == 1 ==> x == y;\n    loop invariant unknown() || lock == 0;\n    loop invariant x != y ==> lock == 0;\n    loop invariant x == y || lock == 1;\n    loop invariant \\at(__fc_s_iteration, LoopCurrent) <= x - \\at(x, LoopEntry) + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\n\n\nloop invariant i4: lock == 1 ==> x == y;\n\nloop invariant i6: x != y ==> lock == 0;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token ';'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: x <= y;\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: lock == 1 ==> x == y;\nloop invariant i4: lock == 0 ==> y > x;\nloop invariant i5: 0 <= lock <= 1;\nloop invariant i6: y == x + 1;\nloop invariant i7: x >= y - 1;\nloop invariant i8: (lock == 1) ==> (x == y);\nloop invariant i9: (lock == 0) ==> (y > x);\nloop invariant i10: (lock == 0) ==> (\\forall integer i; i >= 0 && i < \\at(y, LoopEntry) - y; unknown());\nloop invariant i11: lock == 0 ==> x == \\old(x);\nloop invariant i12: lock == 0 ==> y == \\old(y);\nloop invariant i13: lock == 1;\nloop invariant i14: lock >= INT_MIN && lock <= INT_MAX;\nloop invariant i15: x >= INT_MIN && x <= INT_MAX;\nloop invariant i16: y >= INT_MIN && y <= INT_MAX;\nloop invariant i17: x == y || x == y - 1;\nloop invariant i18: y >= x;\nloop invariant i19: (x == y) ==> (lock == 1);\nloop invariant i20: x >= 0 && y >= 0;\nloop invariant i21: y > x;\nloop invariant i22: lock == 0 ==> y == \\at(y, Pre) + \\at(\\at(__fc_s_success_cnt, LoopEntry), Pre);\nloop invariant i23: unknown() || lock == 0;\nloop invariant i24: x != y ==> lock == 0;\nloop invariant i25: x == y || lock == 1;\nloop invariant i26: \\at(__fc_s_iteration, LoopCurrent) <= x - \\at(x, LoopEntry) + 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: x <= y;\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: lock == 1 ==> x == y;\nloop invariant i4: lock == 0 ==> y > x;\nloop invariant i5: 0 <= lock <= 1;\n\nloop invariant i7: x >= y - 1;\nloop invariant i8: (lock == 1) ==> (x == y);\nloop invariant i9: (lock == 0) ==> (y > x);\n\n\n\n\n\n\n\nloop invariant i17: x == y || x == y - 1;\nloop invariant i18: y >= x;\nloop invariant i19: (x == y) ==> (lock == 1);\n\n\n\n\nloop invariant i24: x != y ==> lock == 0;\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 79,
        "success_count": 52,
        "failure_count": 27,
        "success_rate": 0.6582278481012658
    }
}