{
    "logs": {
        "file": "../data/benchmarks/code2inv/119.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions/Variable Assignments:\n- `size` is an integer variable that is not initialized.\n- `i` is an integer variable that is initialized to 1.\n- `sn` is an integer variable that is initialized to 0.\n\nLoop Condition:\n- The loop condition is `(i <= size)`.\n\nLoop Invariants:\n- `i >= 1`\n- `sn >= 0`\n- `i <= size + 1`\n- `sn <= i - 1`\n- `(i <= size) ==> (sn == i - 1)`\n- `(sn != 0) ==> (sn == size)`\n\nLet's go through each of these loop invariants:\n- `i >= 1`: This invariant is true before the loop execution because `i` is initialized to 1.\n- `sn >= 0`: This invariant is true before the loop execution because `sn` is initialized to 0.\n- `i <= size + 1`: This invariant is true before the loop execution because `i` is initialized to 1 and `size` is non-negative.\n- `sn <= i - 1`: This invariant is true before the loop execution because `sn` is initialized to 0 and `i` is initialized to 1.\n- `(i <= size) ==> (sn == i - 1)`: This invariant is true in every iteration of the loop because when `i <= size`, `i` is incremented by 1 and `sn` is incremented by 1, so `sn == i - 1`.\n- `(sn != 0) ==> (sn == size)`: This invariant is true after the loop termination because if `sn` is not equal to 0, then it means that the loop has executed at least once, which implies that `i` has been incremented at least once. Therefore, at the end of the loop, `i` is equal to `size + 1` and `sn` is equal to `i - 1`, which implies that `sn` is equal to `size`. \n\nWe can combine all these loop invariants into one code block as follows:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn == i - 1);\n    loop invariant (sn != 0) ==> (sn == size);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn` is assigned 0\n- `i` is assigned 1\n\nLoop condition:\n- `i <= size`\n\nPost-condition:\n- `sn == size` if `sn` is not equal to 0\n\nLoop invariants:\n```\n/*@\nloop invariant 1 <= i <= size+1;\nloop invariant 0 <= sn <= i-1;\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn != 0) ==> (sn == i-1);\nloop assigns i, sn;\n*/\n```\n\nExplanation:\n- The first loop invariant `1 <= i <= size+1` ensures that `i` is always within the bounds of the loop. It also ensures that the loop runs at least once since `i` starts from 1.\n- The second loop invariant `0 <= sn <= i-1` ensures that `sn` is always non-negative and less than or equal to `i-1`.\n- The third loop invariant `(sn == 0) ==> (i == 1)` ensures that if `sn` is 0, then `i` must be 1. This handles the case where the loop is not executed at all.\n- The fourth loop invariant `(sn != 0) ==> (sn == i-1)` ensures that if `sn` is not 0, then it must be equal to `i-1`. This ensures that `sn` counts the number of times the loop is executed.\n- The loop assigns `i` and `sn` because they are the only variables that are modified within the loop.\n\nThe loop invariants imply the post-condition because:\n- If `sn` is not equal to 0, then by the fourth loop invariant, `sn` is equal to `i-1`. By the first loop invariant, `i` is less than or equal to `size+1`. Therefore, `sn` is less than or equal to `size`. Since `sn` is also greater than or equal to 0 by the second loop invariant, we have `0 <= sn <= size`. Combining this with the post-condition `sn == size`, we get `0 <= sn == size <= size`, which is true.\n- If `sn` is equal to 0, then by the third loop invariant, `i` is equal to 1. Therefore, the loop is not executed at all and `sn` is equal to 0, which satisfies the post-condition.",
            "Pre-conditions: None\n\nVariable Assignments: \n- `sn` is assigned the value 0\n- `i` is assigned the value 1\n\nLoop Condition: `i <= size`\n\nPost-condition: `sn == size`\n\nLoop Invariants:\n- Before the loop execution: None\n- In every iteration of the loop: \n    - `1 <= i <= size+1`\n    - `0 <= sn <= i-1`\n- After the loop termination: \n    - `sn == i-1`\n    - `i == size+1 ==> sn == size`\n\nExplanation: \n- Before the loop, there are no specific invariants to be checked.\n- In every iteration of the loop, `i` is incremented by 1 and `sn` is incremented by 1. Hence, `i` starts from 1 and goes up to `size+1` (inclusive), while `sn` starts from 0 and goes up to `i-1` (inclusive). \n- After the loop, `sn` should be equal to `i-1` since `sn` is incremented by 1 in each iteration and the loop runs `i` times. Also, if `i` is equal to `size+1`, then `sn` should be equal to `size` because the loop has run `size` times and `sn` has been incremented by 1 in each iteration.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- sn = 0\n- i = 1\n\nLoop Condition:\n- i <= size\n\nPost-condition:\n- if sn != 0, then sn == size\n\nLoop Invariants:\n- i >= 1\n- i <= size+1\n- sn >= 0\n- sn <= i-1\n- (sn != 0) ==> (i <= size+1)\n- if sn == 0, then (i == 1)\n- if sn != 0, then (sn <= size) and (i == sn+1)\n\nExplanation:\n- The first two invariants follow directly from the variable assignments.\n- The next two invariants follow from the fact that i and sn are incremented by 1 in each iteration of the loop.\n- The fifth invariant is a combination of the loop condition and the previous invariants. It ensures that the loop terminates when i becomes greater than size+1 or when sn becomes equal to size (whichever happens first).\n- The sixth invariant ensures that i is reset to 1 when sn becomes 0.\n- The last invariant ensures that the post-condition holds. If sn is not 0, then i must be equal to sn+1 (because i was incremented by 1 in each iteration and sn is the number of iterations completed). Therefore, sn must be less than or equal to size, because otherwise i would become greater than size+1.",
            "First, let's analyze the program and make a note of the pre-conditions or variable assignments in the program:\n\n- The program declares three integer variables i, size and sn.\n- The macro assume(e) is defined to take an expression e and return 0 if the expression is not true.\n- The value of sn is set to 0.\n- The value of i is set to 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop continues while the value of i is less than or equal to size.\n- In each iteration of the loop, i is incremented by 1 and sn is incremented by 1.\n\nNext, let's output the necessary loop invariants:\n\n/*@ \n    loop invariant 1 <= i <= size+1;\n    loop invariant 0 <= sn <= size;\n    loop invariant \\forall integer j; 1 <= j < i ==> sn >= j-1;\n    loop invariant (i > size) ==> (sn == size);\n*/\nThe first loop invariant ensures that i is always between 1 and size+1, which is the range of values that i can take in the loop.\nThe second loop invariant ensures that sn is always between 0 and size, which is the range of values that sn can take in the loop.\nThe third loop invariant ensures that for all values of j between 1 and i-1, sn is greater than or equal to j-1. This is because sn is incremented by 1 in each iteration of the loop, so it must be greater than or equal to all previous values of j-1.\nThe fourth loop invariant ensures that if the loop terminates (i.e., i > size), then sn must be equal to size. This is because sn is incremented by 1 in each iteration of the loop, so if the loop runs size times, then sn must be equal to size.\n\nFinally, we need to use implication to take care of the conditional nature of the code and use the guard condition in an implication:\n\n/*@ \n    loop invariant 1 <= i <= size+1;\n    loop invariant 0 <= sn <= size;\n    loop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\n    loop invariant (i > size) ==> (sn == size);\n*/\n\nWe use implication to make the loop invariant (iii) true for the first iteration of the loop, when j is equal to 1. The implication ensures that the loop invariant is true for all values of j between 1 and i-1, including the first iteration of the loop. \n\nAlso, we use the guard condition (i <= size) in an implication to ensure that the loop invariant (iii) is only checked if the loop has not terminated yet.\n\nTherefore, the final loop invariants for the given program are as follows:\n```\n/*@ \n    loop invariant 1 <= i <= size+1;\n    loop invariant 0 <= sn <= size;\n    loop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\n    loop invariant (i > size) ==> (sn == size);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn == i - 1);\n    loop invariant (sn != 0) ==> (sn == size);\n*/",
            "/*@\nloop invariant 1 <= i <= size+1;\nloop invariant 0 <= sn <= i-1;\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn != 0) ==> (sn == i-1);\nloop assigns i, sn;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable Assignments: \n- `sn` is assigned the value 0\n- `i` is assigned the value 1\n\nLoop Condition: `i <= size`\n\nPost-condition: `sn == size`\n\nLoop Invariants:\n- Before the loop execution: None\n- In every iteration of the loop: \n    - `1 <= i <= size+1`\n    - `0 <= sn <= i-1`\n- After the loop termination: \n    - `sn == i-1`\n    - `i == size+1 ==> sn == size`\n\nExplanation: \n- Before the loop, there are no specific invariants to be checked.\n- In every iteration of the loop, `i` is incremented by 1 and `sn` is incremented by 1. Hence, `i` starts from 1 and goes up to `size+1` (inclusive), while `sn` starts from 0 and goes up to `i-1` (inclusive). \n- After the loop, `sn` should be equal to `i-1` since `sn` is incremented by 1 in each iteration and the loop runs `i` times. Also, if `i` is equal to `size+1`, then `sn` should be equal to `size` because the loop has run `size` times and `sn` has been incremented by 1 in each iteration."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- sn = 0\n- i = 1\n\nLoop Condition:\n- i <= size\n\nPost-condition:\n- if sn != 0, then sn == size\n\nLoop Invariants:\n- i >= 1\n- i <= size+1\n- sn >= 0\n- sn <= i-1\n- (sn != 0) ==> (i <= size+1)\n- if sn == 0, then (i == 1)\n- if sn != 0, then (sn <= size) and (i == sn+1)\n\nExplanation:\n- The first two invariants follow directly from the variable assignments.\n- The next two invariants follow from the fact that i and sn are incremented by 1 in each iteration of the loop.\n- The fifth invariant is a combination of the loop condition and the previous invariants. It ensures that the loop terminates when i becomes greater than size+1 or when sn becomes equal to size (whichever happens first).\n- The sixth invariant ensures that i is reset to 1 when sn becomes 0.\n- The last invariant ensures that the post-condition holds. If sn is not 0, then i must be equal to sn+1 (because i was incremented by 1 in each iteration and sn is the number of iterations completed). Therefore, sn must be less than or equal to size, because otherwise i would become greater than size+1."
            ],
            "/*@ \n    loop invariant 1 <= i <= size+1;\n    loop invariant 0 <= sn <= size;\n    loop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\n    loop invariant (i > size) ==> (sn == size);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn == i - 1);\n    loop invariant (sn != 0) ==> (sn == size);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is preserved but not established.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == size) is established but not preserved.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i - 1;\nloop invariant i5: (i <= size) ==> (sn == i - 1);\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 1 <= i <= size+1;\nloop invariant 0 <= sn <= i-1;\nloop invariant (sn == 0) ==> (i == 1);\nloop invariant (sn != 0) ==> (sn == i-1);\nloop assigns i, sn;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size+1 is preserved but not established.\nloop invariant 0 <= sn <= i-1 is partially proven to be inductive.\nloop invariant (sn == 0) ==> (i == 1) is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == i-1) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: 0 <= sn <= i-1;\nloop invariant i3: (sn == 0) ==> (i == 1);\nloop invariant i4: (sn != 0) ==> (sn == i-1);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable Assignments: \n- `sn` is assigned the value 0\n- `i` is assigned the value 1\n\nLoop Condition: `i <= size`\n\nPost-condition: `sn == size`\n\nLoop Invariants:\n- Before the loop execution: None\n- In every iteration of the loop: \n    - `1 <= i <= size+1`\n    - `0 <= sn <= i-1`\n- After the loop termination: \n    - `sn == i-1`\n    - `i == size+1 ==> sn == size`\n\nExplanation: \n- Before the loop, there are no specific invariants to be checked.\n- In every iteration of the loop, `i` is incremented by 1 and `sn` is incremented by 1. Hence, `i` starts from 1 and goes up to `size+1` (inclusive), while `sn` starts from 0 and goes up to `i-1` (inclusive). \n- After the loop, `sn` should be equal to `i-1` since `sn` is incremented by 1 in each iteration and the loop runs `i` times. Also, if `i` is equal to `size+1`, then `sn` should be equal to `size` because the loop has run `size` times and `sn` has been incremented by 1 in each iteration.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- sn = 0\n- i = 1\n\nLoop Condition:\n- i <= size\n\nPost-condition:\n- if sn != 0, then sn == size\n\nLoop Invariants:\n- i >= 1\n- i <= size+1\n- sn >= 0\n- sn <= i-1\n- (sn != 0) ==> (i <= size+1)\n- if sn == 0, then (i == 1)\n- if sn != 0, then (sn <= size) and (i == sn+1)\n\nExplanation:\n- The first two invariants follow directly from the variable assignments.\n- The next two invariants follow from the fact that i and sn are incremented by 1 in each iteration of the loop.\n- The fifth invariant is a combination of the loop condition and the previous invariants. It ensures that the loop terminates when i becomes greater than size+1 or when sn becomes equal to size (whichever happens first).\n- The sixth invariant ensures that i is reset to 1 when sn becomes 0.\n- The last invariant ensures that the post-condition holds. If sn is not 0, then i must be equal to sn+1 (because i was incremented by 1 in each iteration and sn is the number of iterations completed). Therefore, sn must be less than or equal to size, because otherwise i would become greater than size+1.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= i <= size+1;\n    loop invariant 0 <= sn <= size;\n    loop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\n    loop invariant (i > size) ==> (sn == size);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size+1 is preserved but not established.\nloop invariant 0 <= sn <= size is established but not preserved.\nloop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1) is partially proven to be inductive.\nloop invariant (i > size) ==> (sn == size) is established but not preserved.\nAssertion sn == size: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= size + 1 is preserved but not established.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == size) is established but not preserved.\nloop invariant 1 <= i <= size+1 is partially proven to be inductive.\nloop invariant 0 <= sn <= i-1 is partially proven to be inductive.\nloop invariant (sn == 0) ==> (i == 1) is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == i-1) is partially proven to be inductive.\nloop invariant 0 <= sn <= size is partially proven to be inductive.\nloop invariant (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1) is partially proven to be inductive.\nloop invariant (i > size) ==> (sn == size) is partially proven to be inductive.\nAssertion sn == size: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: i <= size + 1;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: (i <= size) ==> (sn == i - 1);\nloop invariant i6: (sn != 0) ==> (sn == size);\nloop invariant i7: 1 <= i <= size+1;\nloop invariant i8: 0 <= sn <= i-1;\nloop invariant i9: (sn == 0) ==> (i == 1);\nloop invariant i10: (sn != 0) ==> (sn == i-1);\nloop invariant i11: 0 <= sn <= size;\nloop invariant i12: (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\nloop invariant i13: (i > size) ==> (sn == size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn <= i - 1;\nloop invariant i5: (i <= size) ==> (sn == i - 1);\n\n\nloop invariant i8: 0 <= sn <= i-1;\nloop invariant i9: (sn == 0) ==> (i == 1);\nloop invariant i10: (sn != 0) ==> (sn == i-1);\n\nloop invariant i12: (i <= size) ==> (\\forall integer j; 1 <= j < i ==> sn >= j-1);\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 102,
        "success_count": 68,
        "failure_count": 34,
        "success_rate": 0.6666666666666666
    }
}