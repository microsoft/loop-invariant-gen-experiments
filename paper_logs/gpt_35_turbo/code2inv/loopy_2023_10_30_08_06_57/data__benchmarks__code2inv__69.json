{
    "logs": {
        "file": "../data/benchmarks/code2inv/69.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `n`, `v1`, `v2`, and `v3` are uninitialized and contain garbage values.\n- `x` is initialized to `1`.\n- `y` is uninitialized and contains a garbage value.\n\nLoop Condition:\n- The loop continues as long as `x` is less than or equal to `n`.\n\nLoop Body:\n- `y` is assigned the value of `n - x`.\n- `x` is incremented by `1`.\n\nPost-condition:\n- If `n` is greater than `0`, then `y` must be greater than or equal to `0`.\n\nLoop Invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n    - `1 <= x <= n+1`: `x` is always greater than or equal to `1` and less than or equal to `n+1` at the beginning of each iteration because of the loop condition and the fact that `x` is incremented by `1` at the end of each iteration.\n    - `0 <= y <= n`: `y` is always greater than or equal to `0` and less than or equal to `n` at the beginning of each iteration because of the assignment `y = n - x`.\n- After the loop termination:\n    - `x == n+1`: The loop terminates when `x` becomes greater than `n` and at that point, `x` is equal to `n+1`.\n    - `0 <= y <= n`: `y` is always greater than or equal to `0` and less than or equal to `n` at the end of the loop because of the loop invariant that holds in every iteration.\n    - `(n > 0) ==> (y >= 0)`: If `n` is greater than `0`, then `y` must be greater than or equal to `0` because of the post-condition. Therefore, we can use an implication here. \n\nPutting it all together:\n```\n/*@ \n    loop invariant 1 <= x <= n+1;\n    loop invariant 0 <= y <= n;\n\n    loop assigns x, y;\n\n    loop variant n-x;\n*/\nwhile (x <= n) {\n    y = n - x;\n    x = x + 1;\n}\n\n/*@ \n    loop invariant x == n+1;\n    loop invariant 0 <= y <= n;\n    loop invariant (n > 0) ==> (y >= 0);\n*/\nif (n > 0) {\n    assume(y >= 0);\n}\n```",
            "Pre-conditions: None\n\nVariable Assignments:\n- `int n, v1, v2, v3;`\n- `int x = 1;`\n- `int y;` (y is undefined at the beginning of the loop)\n\nLoop Condition: `x <= n`\n\nLoop Invariants:\n- `x >= 1`\n- `x <= n+1`\n- `y >= 0` (implied by the assertion after the loop)\n- `y <= n`\n\nExplanation:\n- `x >= 1` and `x <= n+1` together imply that `x` takes all values from 1 to `n+1` inclusive. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `x` is incremented by 1 in every iteration), and after the loop termination (since `x=n+1` after the loop).\n- `y >= 0` is implied by the assertion after the loop. However, since `y` is undefined before the loop, we need to use an implication to make the invariant trivially true at the beginning of the loop: `(x==1) ==> (y >= 0)`. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=0`), and after the loop termination (since `y` is not modified after the loop).\n- `y <= n` is true before the loop execution (since `y` is not assigned a value before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=y`), and after the loop termination (since `y=n-x` and `x=n+1` after the loop).",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `n`, `v1`, `v2`, `v3` are uninitialized.\n- `x` is initialized to 1.\n\nLoop Condition:\n- `x <= n`\n\nLoop Body:\n- `y = n - x`\n- `x = x + 1`\n\nPost-condition:\n- `y >= 0` if `n > 0`\n\nLoop Invariants:\n- Before loop execution, since `n` is uninitialized, we cannot make any assumptions about it. However, we know that `x` is initialized to 1, so we can add the following loop invariant:\n```\n/*@ loop invariant x >= 1; */\n```\n- In every iteration of the loop, `x` is incremented by 1 and is bounded above by `n` (if `n` is not uninitialized). So we can add the following loop invariant:\n```\n/*@ loop invariant 1 <= x <= n+1; */\n```\n- In every iteration of the loop, `y` is equal to `n - x`. Since we know that `x` is bounded above by `n+1`, we can add the following loop invariant:\n```\n/*@ loop invariant y == (n - x) || (n < 0); */\n```\nThis invariant is trivially true if `n < 0`, which is possible since `n` is uninitialized.\n\n- After the loop termination, if `n > 0`, we know that `x` has been incremented `n` times and is equal to `n+1`. Therefore, `y` is equal to `n-x` which is `-1`. Since `y` should be non-negative, we can add the following loop invariant:\n```\n/*@ loop invariant (n > 0 && y >= 0) ==> x == n+1; */\n```\n- Finally, we can use implication to guard the post-condition by the condition `n > 0`. Therefore, we can add the following loop invariant:\n```\n/*@ loop invariant ((n > 0 && y >= 0) ==> x == n+1) ==> (n > 0 ==> y >= 0); */\n```\n\nPutting it all together, the complete set of loop invariants is:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant 1 <= x <= n+1;\n    loop invariant y == (n - x) || (n < 0);\n    loop invariant (n > 0 && y >= 0) ==> x == n+1;\n    loop invariant ((n > 0 && y >= 0) ==> x == n+1) ==> (n > 0 ==> y >= 0);\n*/\n```",
            "Let's first analyze the program and make a note of pre-conditions and variable assignments:\n\n- Pre-condition: None\n- Variable assignments: \n  - x is assigned the value 1\n  - y is declared but not initialized, so it has a garbage value\n  - n, v1, v2, and v3 are declared but not initialized, so they have garbage values\n\nNow let's analyze the loop body:\n\n```\ny = n - x;\nx = x +1;\n```\n\nThe loop condition is `while (x <= n)`, which implies that `n` must be greater than or equal to `x` at the start of each iteration.\n\nNow let's find the necessary loop invariants:\n\n- Before the loop execution:\n  - x is initialized to 1: `x == 1`\n  - y has a garbage value: `true`\n  - n, v1, v2, and v3 have garbage values: `true`\n- In every iteration of the loop:\n  - `x <= n`\n  - `y == n - x`\n  - `x' == x + 1` (where `x'` is the value of `x` in the next iteration)\n  - `n' == n` (since `n` is not modified in the loop body)\n  - `v1' == v1` (since `v1` is not modified in the loop body)\n  - `v2' == v2` (since `v2` is not modified in the loop body)\n  - `v3' == v3` (since `v3` is not modified in the loop body)\n- After the loop termination:\n  - `x > n ==> y == n - x + 1`\n  - `n > 0 ==> y >= 0`\n\nWe can also add some additional loop invariants based on the program logic:\n\n- `1 <= x <= n + 1`\n- `y <= n`\n- `x <= n + 1`\n- `y >= 0`\n\nPutting it all together, the loop invariants are:\n\n```\n/*@ \n    loop invariant x >= 1 && x <= n + 1;\n    loop invariant y <= n && y >= 0;\n    loop invariant x <= n + 1;\n    loop invariant x <= n ==> y == n - x;\n    loop invariant n > 0 ==> y >= 0;\n    loop invariant x > n ==> y == n - x + 1;\n    loop invariant x' == x + 1;\n    loop invariant n' == n;\n    loop invariant v1' == v1;\n    loop invariant v2' == v2;\n    loop invariant v3' == v3;\n*/\n```",
            "Pre-conditions/Variable assignments:\n- `n`, `v1`, `v2`, and `v3` are uninitialized integer variables.\n- `x` is initialized to `1`.\n- `y` is uninitialized.\n\nLoop Condition:\n- The while loop executes as long as `x` is less than or equal to `n`.\n\nTo prove the post-condition `y >= 0`, we need to find loop invariants that are true:\n1. Before the loop execution\n2. In every iteration of the loop\n3. After the loop termination\n\nLoop Invariants:\n1. Before the loop execution:\n   - `x == 1`\n   - `y` is uninitialized, so we add `y >= 0` as a trivially true invariant.\n\n2. In every iteration of the loop:\n   - `x` is incremented by `1`, so `x > 1`.\n   - `y = n - (x-1)`, so `y <= n`.\n   - `x <= n+1` (since the loop terminates when `x` exceeds `n`).\n   - `x > 1 ==> y >= 0` (since `y` is initialized to `n - (x-1)` and `x > 1` in every iteration).\n\n3. After the loop termination:\n   - `x > n` (since the loop terminates when `x` exceeds `n`).\n   - `y = n - x + 1`, so `y >= 0`.\n   - `n > 0 ==> y >= 0` (since the assertion is guarded by `n > 0`).\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x == 1;\n    loop invariant y >= 0;\n    loop invariant x > 1;\n    loop invariant y <= n;\n    loop invariant x <= n+1;\n    loop invariant x > 1 ==> y >= 0;\n    loop invariant x > n;\n    loop invariant y = n - x + 1;\n    loop invariant n > 0 ==> y >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 1 <= x <= n+1;\n    loop invariant 0 <= y <= n;\n\n    loop assigns x, y;\n\n    loop variant n-x;\n*/\nwhile (x <= n) {\n    y = n - x;\n    x = x + 1;\n}\n\n/*@ \n    loop invariant x == n+1;\n    loop invariant 0 <= y <= n;\n    loop invariant (n > 0) ==> (y >= 0);\n*/\nif (n > 0) {\n    assume(y >= 0);\n}",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None\n\nVariable Assignments:\n- `int n, v1, v2, v3;`\n- `int x = 1;`\n- `int y;` (y is undefined at the beginning of the loop)\n\nLoop Condition: `x <= n`\n\nLoop Invariants:\n- `x >= 1`\n- `x <= n+1`\n- `y >= 0` (implied by the assertion after the loop)\n- `y <= n`\n\nExplanation:\n- `x >= 1` and `x <= n+1` together imply that `x` takes all values from 1 to `n+1` inclusive. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `x` is incremented by 1 in every iteration), and after the loop termination (since `x=n+1` after the loop).\n- `y >= 0` is implied by the assertion after the loop. However, since `y` is undefined before the loop, we need to use an implication to make the invariant trivially true at the beginning of the loop: `(x==1) ==> (y >= 0)`. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=0`), and after the loop termination (since `y` is not modified after the loop).\n- `y <= n` is true before the loop execution (since `y` is not assigned a value before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=y`), and after the loop termination (since `y=n-x` and `x=n+1` after the loop)."
            ],
            "/*@ loop invariant x >= 1; */",
            "/*@ \n    loop invariant x >= 1 && x <= n + 1;\n    loop invariant y <= n && y >= 0;\n    loop invariant x <= n + 1;\n    loop invariant x <= n ==> y == n - x;\n    loop invariant n > 0 ==> y >= 0;\n    loop invariant x > n ==> y == n - x + 1;\n    loop invariant x' == x + 1;\n    loop invariant n' == n;\n    loop invariant v1' == v1;\n    loop invariant v2' == v2;\n    loop invariant v3' == v3;\n*/",
            "/*@ \n    loop invariant x == 1;\n    loop invariant y >= 0;\n    loop invariant x > 1;\n    loop invariant y <= n;\n    loop invariant x <= n+1;\n    loop invariant x > 1 ==> y >= 0;\n    loop invariant x > n;\n    loop invariant y = n - x + 1;\n    loop invariant n > 0 ==> y >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= x <= n+1;\n    loop invariant 0 <= y <= n;\n\n    loop assigns x, y;\n\n    loop variant n-x;\n*/\nwhile (x <= n) {\n    y = n - x;\n    x = x + 1;\n}\n\n/*@ \n    loop invariant x == n+1;\n    loop invariant 0 <= y <= n;\n    loop invariant (n > 0) ==> (y >= 0);\n*/\nif (n > 0) {\n    assume(y >= 0);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= n+1 is preserved but not established.\nloop invariant 0 <= y <= n is preserved but not established.\nloop invariant x == n+1 is preserved but not established.\nloop invariant (n > 0) ==> (y >= 0) is partially proven to be inductive.\nAssertion y >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None\n\nVariable Assignments:\n- `int n, v1, v2, v3;`\n- `int x = 1;`\n- `int y;` (y is undefined at the beginning of the loop)\n\nLoop Condition: `x <= n`\n\nLoop Invariants:\n- `x >= 1`\n- `x <= n+1`\n- `y >= 0` (implied by the assertion after the loop)\n- `y <= n`\n\nExplanation:\n- `x >= 1` and `x <= n+1` together imply that `x` takes all values from 1 to `n+1` inclusive. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `x` is incremented by 1 in every iteration), and after the loop termination (since `x=n+1` after the loop).\n- `y >= 0` is implied by the assertion after the loop. However, since `y` is undefined before the loop, we need to use an implication to make the invariant trivially true at the beginning of the loop: `(x==1) ==> (y >= 0)`. This is true before the loop execution (since `x=1` before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=0`), and after the loop termination (since `y` is not modified after the loop).\n- `y <= n` is true before the loop execution (since `y` is not assigned a value before the loop), in every iteration of the loop (since `y` is assigned `n-x` in every iteration and `n>=y`), and after the loop termination (since `y=n-x` and `x=n+1` after the loop).",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant x >= 1; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is inductive.\nAssertion y >= 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 1 && x <= n + 1;\n    loop invariant y <= n && y >= 0;\n    loop invariant x <= n + 1;\n    loop invariant x <= n ==> y == n - x;\n    loop invariant n > 0 ==> y >= 0;\n    loop invariant x > n ==> y == n - x + 1;\n    loop invariant x' == x + 1;\n    loop invariant n' == n;\n    loop invariant v1' == v1;\n    loop invariant v2' == v2;\n    loop invariant v3' == v3;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No JSON report found",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1 && x <= n + 1;\nloop invariant i2: y <= n && y >= 0;\nloop invariant i3: x <= n + 1;\nloop invariant i4: x <= n ==> y == n - x;\nloop invariant i5: n > 0 ==> y >= 0;\nloop invariant i6: x > n ==> y == n - x + 1;\nloop invariant i7: x' == x + 1;\nloop invariant i8: n' == n;\nloop invariant i9: v1' == v1;\nloop invariant i10: v2' == v2;\nloop invariant i11: v3' == v3;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x == 1;\n    loop invariant y >= 0;\n    loop invariant x > 1;\n    loop invariant y <= n;\n    loop invariant x <= n+1;\n    loop invariant x > 1 ==> y >= 0;\n    loop invariant x > n;\n    loop invariant y = n - x + 1;\n    loop invariant n > 0 ==> y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: Assignment operators not allowed in annotations.",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\n\n\n\n\n\nloop invariant i6: x > 1 ==> y >= 0;\n\n\n\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No JSON report found",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= n+1;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x == n+1;\nloop invariant i4: (n > 0) ==> (y >= 0);\nloop invariant i5: x >= 1;\nloop invariant i6: x >= 1 && x <= n + 1;\nloop invariant i7: y <= n && y >= 0;\nloop invariant i8: x <= n + 1;\nloop invariant i9: x <= n ==> y == n - x;\nloop invariant i10: n > 0 ==> y >= 0;\nloop invariant i11: x > n ==> y == n - x + 1;\nloop invariant i12: x' == x + 1;\nloop invariant i13: n' == n;\nloop invariant i14: v1' == v1;\nloop invariant i15: v2' == v2;\nloop invariant i16: v3' == v3;\nloop invariant i17: x == 1;\nloop invariant i18: y >= 0;\nloop invariant i19: x > 1;\nloop invariant i20: y <= n;\nloop invariant i21: x <= n+1;\nloop invariant i22: x > 1 ==> y >= 0;\nloop invariant i23: x > n;\nloop invariant i24: y = n - x + 1;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= n+1;\nloop invariant i2: 0 <= y <= n;\nloop invariant i3: x == n+1;\nloop invariant i4: (n > 0) ==> (y >= 0);\nloop invariant i5: x >= 1;\nloop invariant i6: x >= 1 && x <= n + 1;\nloop invariant i7: y <= n && y >= 0;\nloop invariant i8: x <= n + 1;\nloop invariant i9: x <= n ==> y == n - x;\nloop invariant i10: n > 0 ==> y >= 0;\nloop invariant i11: x > n ==> y == n - x + 1;\nloop invariant i12: x' == x + 1;\nloop invariant i13: n' == n;\nloop invariant i14: v1' == v1;\nloop invariant i15: v2' == v2;\nloop invariant i16: v3' == v3;\nloop invariant i17: x == 1;\nloop invariant i18: y >= 0;\nloop invariant i19: x > 1;\nloop invariant i20: y <= n;\nloop invariant i21: x <= n+1;\nloop invariant i22: x > 1 ==> y >= 0;\nloop invariant i23: x > n;\nloop invariant i24: y = n - x + 1;\n*/\nwhile (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c"
        ],
        "total": 61,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 0.6229508196721312
    }
}