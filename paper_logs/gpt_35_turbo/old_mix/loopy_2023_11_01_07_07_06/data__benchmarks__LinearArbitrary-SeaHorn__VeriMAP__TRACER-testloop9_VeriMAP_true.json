{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- i is assigned 0.\n- x is assigned 1.\n\nLoop Condition:\n- The loop executes while i < 10.\n\nLoop Invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1;\n*/\n```\nExplanation: \n- The first loop invariant states that i is always between 0 and 10 inclusive.\n- The second loop invariant states that x is always equal to 1 before the loop starts.\n\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant 1 <= x <= 4 || x == 5;\n    loop invariant i >= 0 && i <= 10;\n    loop invariant (x == 2 ==> y == 3) && (x == 3 ==> y == 4) && (x == 1 ==> y == 5) && (x == 4 ==> y == 6);\n*/\n```\nExplanation:\n- The first loop invariant states that x is either between 1 and 4 inclusive or equal to 5.\n- The second loop invariant states that i is always between 0 and 10 inclusive.\n- The third loop invariant uses implication to express the relation between x and y based on the conditions inside the loop. For example, if x is equal to 2, then y must be equal to 3.\n\n- After the loop termination:\n```\n/*@ \n    loop invariant 1 <= x <= 4 || x == 5;\n    loop invariant i == 10;\n    loop invariant (x == 2 ==> y == 3) && (x == 3 ==> y == 4) && (x == 1 ==> y == 5) && (x == 4 ==> y == 6);\n    loop invariant !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/\n```\nExplanation:\n- The first loop invariant is the same as the one used inside the loop.\n- The second loop invariant states that i is always equal to 10 after the loop terminates.\n- The third loop invariant is the same as the one used inside the loop.\n- The fourth loop invariant uses implication to express that if y is not equal to 6, then x must be equal to 1, 2, or 3. This is needed to take into account the guard condition of the assertion.",
            "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- i is assigned 0\n- x is assigned 1\n\nLoop Condition:\n- The loop continues as long as i is less than 10\n\nLoop Invariants:\n- `0 <= i <= 10`: the value of i is always between 0 and 10, inclusive.\n- `x == 1 || x == 2 || x == 3 || x == 4`: the value of x is always one of these four values.\n- `y == 3 || y == 4 || y == 5 || y == 6`: the value of y is always one of these four values.\n- `i <= 10`: the value of i is always less than or equal to 10.\n- `!(x == 4 && y == 6)`: if x is equal to 4, then y is not equal to 6.\n- `(i == 0 ==> (x == 1 && y == 3))`: if this is the first iteration of the loop, then x is 1 and y is 3.\n\nAll of these loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. \n\nUsing these loop invariants, we can verify that the post-condition `!( y==6 )` is true at the end of the program.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i = 0\n- x = 1\n\nLoop condition:\n- i<10\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n    loop invariant (x == 1 ==> y == 3) && (x == 2 ==> y == 4) && (x == 3 ==> y == 5) && (x == 4 ==> y == 6);\n    loop invariant (i == 0 ==> x == 1) && (i > 0 ==> (old(x) == 1 && x == 2) || (old(x) == 2 && x == 3) || (old(x) == 3 && x == 1) || (old(x) == 4 && x == 1));\n    loop invariant (i == 0 ==> y > 0) && (i > 0 ==> (old(x) == 1 && (y == 3 || y == old(y))) || (old(x) == 2 && (y == 4 || y == old(y))) || (old(x) == 3 && (y == 5 || y == old(y))) || (old(x) == 4 && (y == 6 || y == old(y))));\n    loop invariant (!(i==10) ==> ((x == 1 && y != 6) || (x == 2 && y != 6) || (x == 3 && y != 6) || x == 4));\n    loop invariant (i==10 ==> (x == 1 && y != 6));\n*/\n```\n\nExplanation:\n- The first loop invariant specifies that the variable `i` lies between 0 and 10.\n- The second loop invariant specifies that the variable `x` can take only one of the four values: 1, 2, 3, or 4.\n- The third loop invariant is a conjunction of four implications. Each implication specifies the value of `y` corresponding to the value of `x` in that iteration. For example, if `x` is 1 in an iteration, then `y` must be 3 in that iteration.\n- The fourth loop invariant is also a conjunction of two implications. The first implication specifies that if `i` is 0, then `x` must be 1. The second implication specifies that if `i` is greater than 0, then `x` must be one of the four values based on the previous value of `x`. For example, if the previous value of `x` was 1, then the current value of `x` must be 2.\n- The fifth loop invariant is also a conjunction of two implications. The first implication specifies that if `i` is 0, then `y` must be greater than 0. The second implication specifies that if `i` is greater than 0, then `y` must be the same as the previous value of `y` if the value of `x` remains the same as the previous iteration. For example, if the previous value of `x` was 1 and the previous value of `y` was 3, then the current value of `y` can be either 3 or some other value depending on the current value of `x`.\n- The sixth loop invariant specifies that if `i` is not equal to 10, then `y` must not be 6 if `x` takes one of the first three values (1, 2, or 3), and `x` must be 4 if it takes the value 4. This invariant implies the assertion `(y != 6)` in the loop post-condition, which is guarded by the condition `(!(i==10))`.\n- The seventh loop invariant specifies that if `i` is equal to 10, then `x` must be 1 and `y` must not be 6. This invariant implies the assertion `(y != 6)` in the loop post-condition, which is guarded by the condition `(i==10)`.",
            "Step 1: Pre-conditions and variable assignments\n```\nPre-conditions:\nNone.\n\nVariable Assignments:\ni = 0\nx = 1\n```\n\nStep 2: Loop condition\n```\nwhile (i<10)\n```\n\nStep 3: Loop invariants\n```\n/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n  loop invariant y == 3 ==> x == 2;\n  loop invariant y == 4 ==> x == 3;\n  loop invariant y == 5 ==> x == 1;\n  loop invariant !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/\n```\n\nExplanation:\n- The first loop invariant states that `i` is always between 0 and 10.\n- The second loop invariant states that `x` can only take the values 1, 2, 3 or 4.\n- The third loop invariant states that if `y` is 3, then `x` must be 2.\n- The fourth loop invariant states that if `y` is 4, then `x` must be 3.\n- The fifth loop invariant states that if `y` is 5, then `x` must be 1.\n- The sixth loop invariant states that if `y` is not equal to 6, then `x` can only take the values 1, 2 or 3.\n\nWe can use these loop invariants to verify the post-condition. Note that the post-condition is guarded by `{;}` which means that it always holds. So, we don't need to use any guard condition.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- x = 1\n\nLoop Condition:\n- i<10\n\nLoop Body:\n- If x == 1, then x becomes 2 and y becomes 3\n- Else if x == 2, then x becomes 3 and y becomes 4\n- Else if x == 3, then x becomes 1 and y becomes 5\n- Else if x == 4, then x becomes 1 and y becomes 6\n- Else x becomes 2\n\nPost-condition:\n- !(y == 6)\n\nLoop Invariants:\n- Before the loop execution, y can take any value.\n- Before the loop execution, x can take values in {1}.\n- Before the loop execution, i equals 0.\n- In every iteration of the loop, i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}.\n- In every iteration of the loop, if x == 1, then y can take values in {3}.\n- In every iteration of the loop, if x == 2, then y can take values in {4}.\n- In every iteration of the loop, if x == 3, then y can take values in {5}.\n- In every iteration of the loop, if x == 4, then y can take values in {6}.\n- After the loop termination, !(y == 6) holds.\n\nExplanation:\n- Before the loop execution, the value of y can be anything. Since there are no assignments to y before the loop, there are no restrictions on its value.\n- Before the loop execution, x is assigned the value 1. Therefore, x can only take values in {1}.\n- Before the loop execution, i is assigned the value 0.\n- In every iteration of the loop, i is incremented by 1, so i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}, since it is assigned one of these values in the loop body.\n- If x == 1, then y is assigned the value 3. Therefore, y can take values in {3}.\n- If x == 2, then y is assigned the value 4. Therefore, y can take values in {4}.\n- If x == 3, then y is assigned the value 5. Therefore, y can take values in {5}.\n- If x == 4, then y is assigned the value 6. Therefore, y can take values in {6}.\n- After the loop termination, y cannot be equal to 6 because there is no assignment to y after the loop that sets it to any value other than {3, 4, 5}. Therefore, !(y == 6) holds."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- i is assigned 0\n- x is assigned 1\n\nLoop Condition:\n- The loop continues as long as i is less than 10\n\nLoop Invariants:\n- `0 <= i <= 10`: the value of i is always between 0 and 10, inclusive.\n- `x == 1 || x == 2 || x == 3 || x == 4`: the value of x is always one of these four values.\n- `y == 3 || y == 4 || y == 5 || y == 6`: the value of y is always one of these four values.\n- `i <= 10`: the value of i is always less than or equal to 10.\n- `!(x == 4 && y == 6)`: if x is equal to 4, then y is not equal to 6.\n- `(i == 0 ==> (x == 1 && y == 3))`: if this is the first iteration of the loop, then x is 1 and y is 3.\n\nAll of these loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. \n\nUsing these loop invariants, we can verify that the post-condition `!( y==6 )` is true at the end of the program."
            ],
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n    loop invariant (x == 1 ==> y == 3) && (x == 2 ==> y == 4) && (x == 3 ==> y == 5) && (x == 4 ==> y == 6);\n    loop invariant (i == 0 ==> x == 1) && (i > 0 ==> (old(x) == 1 && x == 2) || (old(x) == 2 && x == 3) || (old(x) == 3 && x == 1) || (old(x) == 4 && x == 1));\n    loop invariant (i == 0 ==> y > 0) && (i > 0 ==> (old(x) == 1 && (y == 3 || y == old(y))) || (old(x) == 2 && (y == 4 || y == old(y))) || (old(x) == 3 && (y == 5 || y == old(y))) || (old(x) == 4 && (y == 6 || y == old(y))));\n    loop invariant (!(i==10) ==> ((x == 1 && y != 6) || (x == 2 && y != 6) || (x == 3 && y != 6) || x == 4));\n    loop invariant (i==10 ==> (x == 1 && y != 6));\n*/",
            "/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n  loop invariant y == 3 ==> x == 2;\n  loop invariant y == 4 ==> x == 3;\n  loop invariant y == 5 ==> x == 1;\n  loop invariant !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- x = 1\n\nLoop Condition:\n- i<10\n\nLoop Body:\n- If x == 1, then x becomes 2 and y becomes 3\n- Else if x == 2, then x becomes 3 and y becomes 4\n- Else if x == 3, then x becomes 1 and y becomes 5\n- Else if x == 4, then x becomes 1 and y becomes 6\n- Else x becomes 2\n\nPost-condition:\n- !(y == 6)\n\nLoop Invariants:\n- Before the loop execution, y can take any value.\n- Before the loop execution, x can take values in {1}.\n- Before the loop execution, i equals 0.\n- In every iteration of the loop, i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}.\n- In every iteration of the loop, if x == 1, then y can take values in {3}.\n- In every iteration of the loop, if x == 2, then y can take values in {4}.\n- In every iteration of the loop, if x == 3, then y can take values in {5}.\n- In every iteration of the loop, if x == 4, then y can take values in {6}.\n- After the loop termination, !(y == 6) holds.\n\nExplanation:\n- Before the loop execution, the value of y can be anything. Since there are no assignments to y before the loop, there are no restrictions on its value.\n- Before the loop execution, x is assigned the value 1. Therefore, x can only take values in {1}.\n- Before the loop execution, i is assigned the value 0.\n- In every iteration of the loop, i is incremented by 1, so i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}, since it is assigned one of these values in the loop body.\n- If x == 1, then y is assigned the value 3. Therefore, y can take values in {3}.\n- If x == 2, then y is assigned the value 4. Therefore, y can take values in {4}.\n- If x == 3, then y is assigned the value 5. Therefore, y can take values in {5}.\n- If x == 4, then y is assigned the value 6. Therefore, y can take values in {6}.\n- After the loop termination, y cannot be equal to 6 because there is no assignment to y after the loop that sets it to any value other than {3, 4, 5}. Therefore, !(y == 6) holds."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 is established but not preserved.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has no pre-conditions.\n\nVariable Assignments:\n- i is assigned 0\n- x is assigned 1\n\nLoop Condition:\n- The loop continues as long as i is less than 10\n\nLoop Invariants:\n- `0 <= i <= 10`: the value of i is always between 0 and 10, inclusive.\n- `x == 1 || x == 2 || x == 3 || x == 4`: the value of x is always one of these four values.\n- `y == 3 || y == 4 || y == 5 || y == 6`: the value of y is always one of these four values.\n- `i <= 10`: the value of i is always less than or equal to 10.\n- `!(x == 4 && y == 6)`: if x is equal to 4, then y is not equal to 6.\n- `(i == 0 ==> (x == 1 && y == 3))`: if this is the first iteration of the loop, then x is 1 and y is 3.\n\nAll of these loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. \n\nUsing these loop invariants, we can verify that the post-condition `!( y==6 )` is true at the end of the program.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n    loop invariant (x == 1 ==> y == 3) && (x == 2 ==> y == 4) && (x == 3 ==> y == 5) && (x == 4 ==> y == 6);\n    loop invariant (i == 0 ==> x == 1) && (i > 0 ==> (old(x) == 1 && x == 2) || (old(x) == 2 && x == 3) || (old(x) == 3 && x == 1) || (old(x) == 4 && x == 1));\n    loop invariant (i == 0 ==> y > 0) && (i > 0 ==> (old(x) == 1 && (y == 3 || y == old(y))) || (old(x) == 2 && (y == 4 || y == old(y))) || (old(x) == 3 && (y == 5 || y == old(y))) || (old(x) == 4 && (y == 6 || y == old(y))));\n    loop invariant (!(i==10) ==> ((x == 1 && y != 6) || (x == 2 && y != 6) || (x == 3 && y != 6) || x == 4));\n    loop invariant (i==10 ==> (x == 1 && y != 6));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic function old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x == 1 || x == 2 || x == 3 || x == 4;\n  loop invariant y == 3 ==> x == 2;\n  loop invariant y == 4 ==> x == 3;\n  loop invariant y == 5 ==> x == 1;\n  loop invariant !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= 10 is partially proven to be inductive.\nloop invariant x == 1 || x == 2 || x == 3 || x == 4 is partially proven to be inductive.\nloop invariant y == 3 ==> x == 2 is preserved but not established.\nloop invariant y == 4 ==> x == 3 is preserved but not established.\nloop invariant y == 5 ==> x == 1 is partially proven to be inductive.\nloop invariant !(y == 6) ==> (x == 1 || x == 2 || x == 3) is partially proven to be inductive.\nAssertion !(y == 6): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x == 1 || x == 2 || x == 3 || x == 4;\n\n\nloop invariant i5: y == 5 ==> x == 1;\nloop invariant i6: !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- i = 0\n- x = 1\n\nLoop Condition:\n- i<10\n\nLoop Body:\n- If x == 1, then x becomes 2 and y becomes 3\n- Else if x == 2, then x becomes 3 and y becomes 4\n- Else if x == 3, then x becomes 1 and y becomes 5\n- Else if x == 4, then x becomes 1 and y becomes 6\n- Else x becomes 2\n\nPost-condition:\n- !(y == 6)\n\nLoop Invariants:\n- Before the loop execution, y can take any value.\n- Before the loop execution, x can take values in {1}.\n- Before the loop execution, i equals 0.\n- In every iteration of the loop, i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}.\n- In every iteration of the loop, if x == 1, then y can take values in {3}.\n- In every iteration of the loop, if x == 2, then y can take values in {4}.\n- In every iteration of the loop, if x == 3, then y can take values in {5}.\n- In every iteration of the loop, if x == 4, then y can take values in {6}.\n- After the loop termination, !(y == 6) holds.\n\nExplanation:\n- Before the loop execution, the value of y can be anything. Since there are no assignments to y before the loop, there are no restrictions on its value.\n- Before the loop execution, x is assigned the value 1. Therefore, x can only take values in {1}.\n- Before the loop execution, i is assigned the value 0.\n- In every iteration of the loop, i is incremented by 1, so i is less than or equal to 10.\n- In every iteration of the loop, x can take values in {1, 2, 3, 4}, since it is assigned one of these values in the loop body.\n- If x == 1, then y is assigned the value 3. Therefore, y can take values in {3}.\n- If x == 2, then y is assigned the value 4. Therefore, y can take values in {4}.\n- If x == 3, then y is assigned the value 5. Therefore, y can take values in {5}.\n- If x == 4, then y is assigned the value 6. Therefore, y can take values in {6}.\n- After the loop termination, y cannot be equal to 6 because there is no assignment to y after the loop that sets it to any value other than {3, 4, 5}. Therefore, !(y == 6) holds.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unbound logic function old. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\nloop invariant i2: x == 1;\nloop invariant i3: x == 1 || x == 2 || x == 3 || x == 4;\nloop invariant i4: (x == 1 ==> y == 3) && (x == 2 ==> y == 4) && (x == 3 ==> y == 5) && (x == 4 ==> y == 6);\nloop invariant i5: (i == 0 ==> x == 1) && (i > 0 ==> (old(x) == 1 && x == 2) || (old(x) == 2 && x == 3) || (old(x) == 3 && x == 1) || (old(x) == 4 && x == 1));\nloop invariant i6: (i == 0 ==> y > 0) && (i > 0 ==> (old(x) == 1 && (y == 3 || y == old(y))) || (old(x) == 2 && (y == 4 || y == old(y))) || (old(x) == 3 && (y == 5 || y == old(y))) || (old(x) == 4 && (y == 6 || y == old(y))));\nloop invariant i7: (!(i==10) ==> ((x == 1 && y != 6) || (x == 2 && y != 6) || (x == 3 && y != 6) || x == 4));\nloop invariant i8: (i==10 ==> (x == 1 && y != 6));\nloop invariant i9: y == 3 ==> x == 2;\nloop invariant i10: y == 4 ==> x == 3;\nloop invariant i11: y == 5 ==> x == 1;\nloop invariant i12: !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  /*@\nloop invariant i1: 0 <= i <= 10;\n\nloop invariant i3: x == 1 || x == 2 || x == 3 || x == 4;\n\n\n\n\n\n\n\nloop invariant i11: y == 5 ==> x == 1;\nloop invariant i12: !(y == 6) ==> (x == 1 || x == 2 || x == 3);\n*/\nwhile (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 248,
        "success_count": 120,
        "failure_count": 128,
        "success_rate": 0.4838709677419355
    }
}