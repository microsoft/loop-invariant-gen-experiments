{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions: \n- None\n\nVariable assignments:\n- `SIZE` is assigned the value 20000001.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nLoop invariants:\n- Before the loop: None\n- In every iteration of the loop:\n  - `i` is equal to `3 *` the number of completed iterations.\n  - `j` is equal to `3 *` the number of completed iterations.\n  - `k` is equal to `3 *` the number of completed iterations.\n- After the loop:\n  - If `n` is greater than 0, then\n    - `i` is equal to `j`.\n    - `j` is equal to `k`.\n    - `i` is divisible by `(SIZE + 2)`.\n  - `i`, `j`, and `k` are all less than or equal to `3 * (n/3 + 1)`.\n  - `i`, `j`, and `k` are all greater than or equal to 0.\n  - If `n` is greater than 0, then `n <= SIZE`.\n  - If `n` is less than or equal to 0, then `i = j = k = 0`.\n\nUsing implication, the loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant 0 <= i <= 3 * (n/3 + 1);\n    loop invariant 0 <= j <= 3 * (n/3 + 1);\n    loop invariant 0 <= k <= 3 * (n/3 + 1);\n    loop invariant i == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant j == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant k == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant (n > 0 && n <= SIZE) ==> (i == j && j == k && (i % (SIZE + 2) == 0));\n    loop invariant (n <= 0) ==> (i == j && j == k && i == 0);\n*/\n```\n\nNote: We have added the conjunctions to bound the maximum and minimum values that `i`, `j`, and `k` can take. We have also used implications to handle the conditional nature of the program and the non-deterministic value of `n`.",
            "Pre-conditions:\n- The macro `assume(e)` can be interpreted as a pre-condition that checks if the expression `e` is true. If it is not true, the function returns 0.\n- The function `unknown_uint()` returns an unsigned integer value that is not known at the beginning of the execution.\n\nVariable assignments:\n- The variable `SIZE` is assigned the value `20000001`.\n- The variable `n` is assigned the value returned by the function `unknown_uint()`.\n- The variables `i`, `j`, and `k` are assigned the value `0`.\n\nLoop condition:\n- The while loop executes while the value of `i` is less than `n`.\n\nLoop invariants:\n- `0 <= i <= n`\n- `0 <= j <= n`\n- `0 <= k <= n`\n- `i = 3 * j`\n- `j = 3 * k`\n- `i%(SIZE+2) = j%(SIZE+2) = k%(SIZE+2)`\n- `(i%(SIZE+2)) ==> (n > 0)`\n\nExplanation:\n- The first three invariants bound the maximum and minimum values that `i`, `j`, and `k` can take. Since they are initialized to `0` and incremented by `3` in each iteration, their values will always be a multiple of `3` and less than or equal to `n`.\n- The next two invariants show that `i`, `j`, and `k` are related by a multiple of `3`. This relationship holds true because they are incremented by `3` in each iteration.\n- The last invariant shows that the values of `i`, `j`, and `k` are always congruent modulo `(SIZE+2)`. This is because the loop increment is always `3`, and `(SIZE+2)` is a multiple of `3`, so every third value of `i`, `j`, and `k` will be congruent modulo `(SIZE+2)`.\n- The implication `(i%(SIZE+2)) ==> (n > 0)` is used to take care of the case when `n` is `0`. In that case, all the loop invariants are trivially true, because `i`, `j`, and `k` will be equal to `0` after the first iteration. Therefore, the assertion is only checked if `n` is greater than `0`.",
            "Pre-conditions:\n- The macro assume(e) checks if the expression e is true, and if not, it immediately returns 0, terminating the program.\n- The function unknown_uint() returns an unsigned integer value that is not known at the time of code analysis.\n- The variable SIZE is set to 20000001.\n\nVariable Assignments:\n- The variable n is assigned the value returned by the function unknown_uint().\n- The variables i, j, and k are assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as i is less than n.\n\nLoop Invariants:\n- Before the loop execution:\n    - n <= SIZE\n    - i == 0\n    - j == 0\n    - k == 0\n- In every iteration of the loop:\n    - i == 3 * (number of iterations)\n    - j == 3 * (number of iterations)\n    - k == 3 * (number of iterations)\n    - n <= SIZE\n- After the loop termination:\n    - i == j\n    - j == k\n    - i % (SIZE + 2) == 0 ==> n == 0\n\nExplanation:\n- Before the loop starts, the value of i, j, and k is 0, and n is assumed to be less than or equal to SIZE. This means that the loop invariant is true before the loop execution.\n- In each iteration of the loop, i, j, and k are incremented by 3. This means that after \"number of iterations\" iterations, i, j, and k will be equal to 3 * (number of iterations). Since n is not changed inside the loop, the invariant n <= SIZE will hold in every iteration of the loop.\n- After the loop terminates, i, j, and k will be equal to 3 * (number of iterations), where \"number of iterations\" is equal to ceil(n/3). Since i == j and j == k, we can conclude that i == k == 3 * ceil(n/3). Also, i % (SIZE + 2) == 0 implies that i is divisible by (SIZE + 2). Therefore, n must be equal to 0 for the assertion to hold. Note that if n is 0, the loop will not execute, and the assertion will trivially hold. Therefore, we can add the implication i % (SIZE + 2) == 0 ==> n == 0 to the invariant after the loop termination.",
            "Pre-conditions:\n- The macro `assume(e)` takes an expression `e` and returns 0 if `e` is false.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n- The variable `SIZE` is assigned the value of 20000001.\n- The variable `n` is assigned the value returned by `unknown_uint()`.\n- The value of `n` is not greater than `SIZE`.\n\nLoop condition:\n- The loop continues as long as the value of `i` is less than `n`.\n\nPost-condition:\n- If `n` is greater than 0, then `i` is equal to `j`, `j` is equal to `k`, and `i` is divisible by `SIZE + 2`.\n\nLoop invariants:\n```\n/*@ \nloop invariant 0 <= i <= SIZE+1 && i%3==0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant 0 <= j <= SIZE+1;\nloop invariant 0 <= k <= SIZE+1;\nloop invariant n%3 == 0 ==> i <= n;\nloop invariant n%3 == 1 ==> i <= n-1;\nloop invariant n%3 == 2 ==> i <= n-2;\n*/\n``` \nExplanation:\n- The first invariant ensures that `i` is always a multiple of 3 and is within the bounds of 0 and `SIZE+1`.\n- The second and third invariants ensure that `j` and `k` are always equal to `i`.\n- The fourth and fifth invariants ensure that `j` and `k` are within the bounds of 0 and `SIZE+1`.\n- The sixth invariant uses implication to handle the non-deterministic value of `n`. If `n` is a multiple of 3, then `i` cannot be greater than `n`. If `n` is 1 more than a multiple of 3, then `i` cannot be greater than `n-1`. If `n` is 2 more than a multiple of 3, then `i` cannot be greater than `n-2`. These invariants ensure that `i` never exceeds `n`.\n- All the loop invariants hold true before the loop execution, and they hold true in every iteration of the loop.\n- After the loop termination, `i`, `j`, and `k` are equal and are all multiples of 3. The last invariant ensures that `i` is divisible by `SIZE+2`, which implies that the post-condition holds true.",
            "Pre-conditions: The function `unknown_uint()` returns a non-deterministic value, which we assume to be less than or equal to `SIZE`.\n\nVariable assignments: `n`, `i`, `j`, and `k` are assigned the values of `unknown_uint()`, `0`, `0`, and `0` respectively.\n\nLoop condition: `i < n`\n\nPost-condition: `i==j && j==k && (i%(SIZE+2))`\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop:\n    - `i` is a multiple of 3.\n    - `j` is equal to `i`.\n    - `k` is equal to `i`.\n    - `i` is less than or equal to `n`.\n    - `j` is less than or equal to `n`.\n    - `k` is less than or equal to `n`.\n- After the loop termination:\n    - `i` is a multiple of 3.\n    - `j` is equal to `i`.\n    - `k` is equal to `i`.\n    - `i` is greater than or equal to `n`.\n    - `j` is greater than or equal to `n`.\n    - `k` is greater than or equal to `n`.\n    - If `n` is greater than 0, then `i` modulo `(SIZE+2)` is equal to 0.\n\nWe can express these loop invariants as follows:\n```\n/*@ loop invariant i%3==0;\n    loop invariant j==i;\n    loop invariant k==i;\n    loop invariant i<=n;\n    loop invariant j<=n;\n    loop invariant k<=n;\n    loop invariant (n>0 ==> (i%(SIZE+2))==0);\n*/\n``` \n\nNote that since `unknown_uint()` is non-deterministic, we cannot make any assumptions about the initial value of `n`. Therefore, we cannot add any loop invariants that bound the maximum or minimum value that `n` can take. Similarly, since `SIZE` is declared as an external variable, we cannot make any assumptions about its value, and therefore we cannot add any loop invariants that bound the maximum or minimum value that `SIZE` can take."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= 3 * (n/3 + 1);\n    loop invariant 0 <= j <= 3 * (n/3 + 1);\n    loop invariant 0 <= k <= 3 * (n/3 + 1);\n    loop invariant i == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant j == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant k == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant (n > 0 && n <= SIZE) ==> (i == j && j == k && (i % (SIZE + 2) == 0));\n    loop invariant (n <= 0) ==> (i == j && j == k && i == 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro `assume(e)` can be interpreted as a pre-condition that checks if the expression `e` is true. If it is not true, the function returns 0.\n- The function `unknown_uint()` returns an unsigned integer value that is not known at the beginning of the execution.\n\nVariable assignments:\n- The variable `SIZE` is assigned the value `20000001`.\n- The variable `n` is assigned the value returned by the function `unknown_uint()`.\n- The variables `i`, `j`, and `k` are assigned the value `0`.\n\nLoop condition:\n- The while loop executes while the value of `i` is less than `n`.\n\nLoop invariants:\n- `0 <= i <= n`\n- `0 <= j <= n`\n- `0 <= k <= n`\n- `i = 3 * j`\n- `j = 3 * k`\n- `i%(SIZE+2) = j%(SIZE+2) = k%(SIZE+2)`\n- `(i%(SIZE+2)) ==> (n > 0)`\n\nExplanation:\n- The first three invariants bound the maximum and minimum values that `i`, `j`, and `k` can take. Since they are initialized to `0` and incremented by `3` in each iteration, their values will always be a multiple of `3` and less than or equal to `n`.\n- The next two invariants show that `i`, `j`, and `k` are related by a multiple of `3`. This relationship holds true because they are incremented by `3` in each iteration.\n- The last invariant shows that the values of `i`, `j`, and `k` are always congruent modulo `(SIZE+2)`. This is because the loop increment is always `3`, and `(SIZE+2)` is a multiple of `3`, so every third value of `i`, `j`, and `k` will be congruent modulo `(SIZE+2)`.\n- The implication `(i%(SIZE+2)) ==> (n > 0)` is used to take care of the case when `n` is `0`. In that case, all the loop invariants are trivially true, because `i`, `j`, and `k` will be equal to `0` after the first iteration. Therefore, the assertion is only checked if `n` is greater than `0`."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The macro assume(e) checks if the expression e is true, and if not, it immediately returns 0, terminating the program.\n- The function unknown_uint() returns an unsigned integer value that is not known at the time of code analysis.\n- The variable SIZE is set to 20000001.\n\nVariable Assignments:\n- The variable n is assigned the value returned by the function unknown_uint().\n- The variables i, j, and k are assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as i is less than n.\n\nLoop Invariants:\n- Before the loop execution:\n    - n <= SIZE\n    - i == 0\n    - j == 0\n    - k == 0\n- In every iteration of the loop:\n    - i == 3 * (number of iterations)\n    - j == 3 * (number of iterations)\n    - k == 3 * (number of iterations)\n    - n <= SIZE\n- After the loop termination:\n    - i == j\n    - j == k\n    - i % (SIZE + 2) == 0 ==> n == 0\n\nExplanation:\n- Before the loop starts, the value of i, j, and k is 0, and n is assumed to be less than or equal to SIZE. This means that the loop invariant is true before the loop execution.\n- In each iteration of the loop, i, j, and k are incremented by 3. This means that after \"number of iterations\" iterations, i, j, and k will be equal to 3 * (number of iterations). Since n is not changed inside the loop, the invariant n <= SIZE will hold in every iteration of the loop.\n- After the loop terminates, i, j, and k will be equal to 3 * (number of iterations), where \"number of iterations\" is equal to ceil(n/3). Since i == j and j == k, we can conclude that i == k == 3 * ceil(n/3). Also, i % (SIZE + 2) == 0 implies that i is divisible by (SIZE + 2). Therefore, n must be equal to 0 for the assertion to hold. Note that if n is 0, the loop will not execute, and the assertion will trivially hold. Therefore, we can add the implication i % (SIZE + 2) == 0 ==> n == 0 to the invariant after the loop termination."
            ],
            "/*@ \nloop invariant 0 <= i <= SIZE+1 && i%3==0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant 0 <= j <= SIZE+1;\nloop invariant 0 <= k <= SIZE+1;\nloop invariant n%3 == 0 ==> i <= n;\nloop invariant n%3 == 1 ==> i <= n-1;\nloop invariant n%3 == 2 ==> i <= n-2;\n*/",
            "/*@ loop invariant i%3==0;\n    loop invariant j==i;\n    loop invariant k==i;\n    loop invariant i<=n;\n    loop invariant j<=n;\n    loop invariant k<=n;\n    loop invariant (n>0 ==> (i%(SIZE+2))==0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= i <= 3 * (n/3 + 1);\n    loop invariant 0 <= j <= 3 * (n/3 + 1);\n    loop invariant 0 <= k <= 3 * (n/3 + 1);\n    loop invariant i == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant j == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant k == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\n    loop invariant (n > 0 && n <= SIZE) ==> (i == j && j == k && (i % (SIZE + 2) == 0));\n    loop invariant (n <= 0) ==> (i == j && j == k && i == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n\nloop invariant i8: (n <= 0) ==> (i == j && j == k && i == 0);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro `assume(e)` can be interpreted as a pre-condition that checks if the expression `e` is true. If it is not true, the function returns 0.\n- The function `unknown_uint()` returns an unsigned integer value that is not known at the beginning of the execution.\n\nVariable assignments:\n- The variable `SIZE` is assigned the value `20000001`.\n- The variable `n` is assigned the value returned by the function `unknown_uint()`.\n- The variables `i`, `j`, and `k` are assigned the value `0`.\n\nLoop condition:\n- The while loop executes while the value of `i` is less than `n`.\n\nLoop invariants:\n- `0 <= i <= n`\n- `0 <= j <= n`\n- `0 <= k <= n`\n- `i = 3 * j`\n- `j = 3 * k`\n- `i%(SIZE+2) = j%(SIZE+2) = k%(SIZE+2)`\n- `(i%(SIZE+2)) ==> (n > 0)`\n\nExplanation:\n- The first three invariants bound the maximum and minimum values that `i`, `j`, and `k` can take. Since they are initialized to `0` and incremented by `3` in each iteration, their values will always be a multiple of `3` and less than or equal to `n`.\n- The next two invariants show that `i`, `j`, and `k` are related by a multiple of `3`. This relationship holds true because they are incremented by `3` in each iteration.\n- The last invariant shows that the values of `i`, `j`, and `k` are always congruent modulo `(SIZE+2)`. This is because the loop increment is always `3`, and `(SIZE+2)` is a multiple of `3`, so every third value of `i`, `j`, and `k` will be congruent modulo `(SIZE+2)`.\n- The implication `(i%(SIZE+2)) ==> (n > 0)` is used to take care of the case when `n` is `0`. In that case, all the loop invariants are trivially true, because `i`, `j`, and `k` will be equal to `0` after the first iteration. Therefore, the assertion is only checked if `n` is greater than `0`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The macro assume(e) checks if the expression e is true, and if not, it immediately returns 0, terminating the program.\n- The function unknown_uint() returns an unsigned integer value that is not known at the time of code analysis.\n- The variable SIZE is set to 20000001.\n\nVariable Assignments:\n- The variable n is assigned the value returned by the function unknown_uint().\n- The variables i, j, and k are assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as i is less than n.\n\nLoop Invariants:\n- Before the loop execution:\n    - n <= SIZE\n    - i == 0\n    - j == 0\n    - k == 0\n- In every iteration of the loop:\n    - i == 3 * (number of iterations)\n    - j == 3 * (number of iterations)\n    - k == 3 * (number of iterations)\n    - n <= SIZE\n- After the loop termination:\n    - i == j\n    - j == k\n    - i % (SIZE + 2) == 0 ==> n == 0\n\nExplanation:\n- Before the loop starts, the value of i, j, and k is 0, and n is assumed to be less than or equal to SIZE. This means that the loop invariant is true before the loop execution.\n- In each iteration of the loop, i, j, and k are incremented by 3. This means that after \"number of iterations\" iterations, i, j, and k will be equal to 3 * (number of iterations). Since n is not changed inside the loop, the invariant n <= SIZE will hold in every iteration of the loop.\n- After the loop terminates, i, j, and k will be equal to 3 * (number of iterations), where \"number of iterations\" is equal to ceil(n/3). Since i == j and j == k, we can conclude that i == k == 3 * ceil(n/3). Also, i % (SIZE + 2) == 0 implies that i is divisible by (SIZE + 2). Therefore, n must be equal to 0 for the assertion to hold. Note that if n is 0, the loop will not execute, and the assertion will trivially hold. Therefore, we can add the implication i % (SIZE + 2) == 0 ==> n == 0 to the invariant after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \nloop invariant 0 <= i <= SIZE+1 && i%3==0;\nloop invariant j == i;\nloop invariant k == i;\nloop invariant 0 <= j <= SIZE+1;\nloop invariant 0 <= k <= SIZE+1;\nloop invariant n%3 == 0 ==> i <= n;\nloop invariant n%3 == 1 ==> i <= n-1;\nloop invariant n%3 == 2 ==> i <= n-2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= SIZE+1 && i%3==0 is established but not preserved.\nloop invariant j == i is partially proven to be inductive.\nloop invariant k == i is partially proven to be inductive.\nloop invariant 0 <= j <= SIZE+1 is partially proven to be inductive.\nloop invariant 0 <= k <= SIZE+1 is partially proven to be inductive.\nloop invariant n%3 == 0 ==> i <= n is partially proven to be inductive.\nloop invariant n%3 == 1 ==> i <= n-1 is established but not preserved.\nloop invariant n%3 == 2 ==> i <= n-2 is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: j == i;\nloop invariant i3: k == i;\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ loop invariant i%3==0;\n    loop invariant j==i;\n    loop invariant k==i;\n    loop invariant i<=n;\n    loop invariant j<=n;\n    loop invariant k<=n;\n    loop invariant (n>0 ==> (i%(SIZE+2))==0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i%3==0 is partially proven to be inductive.\nloop invariant j==i is partially proven to be inductive.\nloop invariant k==i is partially proven to be inductive.\nloop invariant i<=n is established but not preserved.\nloop invariant j<=n is partially proven to be inductive.\nloop invariant k<=n is partially proven to be inductive.\nloop invariant (n>0 ==> (i%(SIZE+2))==0) is established but not preserved.\nAssertion i == j == k && i % (SIZE + 2) != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i%3==0;\nloop invariant i2: j==i;\nloop invariant i3: k==i;\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unbound logic variable i. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= 3 * (n/3 + 1);\nloop invariant i2: 0 <= j <= 3 * (n/3 + 1);\nloop invariant i3: 0 <= k <= 3 * (n/3 + 1);\nloop invariant i4: i == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\nloop invariant i5: j == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\nloop invariant i6: k == 3 * (\\at(i, Pre) / 3) + 3 * (\\at(j, Pre) / 3) + 3 * (\\at(k, Pre) / 3);\nloop invariant i7: (n > 0 && n <= SIZE) ==> (i == j && j == k && (i % (SIZE + 2) == 0));\nloop invariant i8: (n <= 0) ==> (i == j && j == k && i == 0);\nloop invariant i9: 0 <= i <= SIZE+1 && i%3==0;\nloop invariant i10: j == i;\nloop invariant i11: k == i;\nloop invariant i12: 0 <= j <= SIZE+1;\nloop invariant i13: 0 <= k <= SIZE+1;\nloop invariant i14: n%3 == 0 ==> i <= n;\nloop invariant i15: n%3 == 1 ==> i <= n-1;\nloop invariant i16: n%3 == 2 ==> i <= n-2;\nloop invariant i17: i%3==0;\nloop invariant i18: j==i;\nloop invariant i19: k==i;\nloop invariant i20: i<=n;\nloop invariant i21: j<=n;\nloop invariant i22: k<=n;\nloop invariant i23: (n>0 ==> (i%(SIZE+2))==0);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= 3 * (n/3 + 1);\nloop invariant i2: 0 <= j <= 3 * (n/3 + 1);\nloop invariant i3: 0 <= k <= 3 * (n/3 + 1);\n\n\n\n\nloop invariant i8: (n <= 0) ==> (i == j && j == k && i == 0);\n\nloop invariant i10: j == i;\nloop invariant i11: k == i;\n\n\nloop invariant i14: n%3 == 0 ==> i <= n;\n\n\nloop invariant i17: i%3==0;\nloop invariant i18: j==i;\nloop invariant i19: k==i;\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sum_natnum.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c"
        ],
        "skipped": [],
        "total": 402,
        "success_count": 206,
        "failure_count": 196,
        "success_rate": 0.5124378109452736
    }
}