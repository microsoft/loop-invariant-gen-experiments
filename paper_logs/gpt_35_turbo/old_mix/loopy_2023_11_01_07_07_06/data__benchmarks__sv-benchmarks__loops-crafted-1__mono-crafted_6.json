{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0 and 500000, and 0, respectively.\n\nLoop condition:\n- The loop continues while x < 1000000.\n\nLoop invariants:\n- Before the loop execution: x == 0 && y == 500000 && z == 0\n- In every iteration of the loop:\n  - if (x < 500000), then (x' == x + 1 && y' == y && z' == z)\n  - else if (x < 750000), then (x' == x + 1 && y' == y + 1 && z' == z)\n  - else (x' == x + 2 && y' == y + 1 && z' == z)\n  - where x', y', and z' are the updated values of x, y, and z after the execution of the loop body.\n- After the loop termination: x == 1000000 && y == 750000 && z == 0\n\nExplanation:\n- Before the loop execution, x is 0, so the first conjunct is true. Similarly, y is 500000 and z is 0, so the second and third conjuncts are true.\n- In every iteration of the loop, the value of x is either incremented by 1 or 2, depending on its current value. If it is less than 500000, then it is incremented by 1. Otherwise, if it is less than 750000, then it is again incremented by 1. Otherwise, it is incremented by 2. The value of y is incremented by 1 if x is greater than or equal to 500000. The value of z remains unchanged in every iteration. Therefore, the loop invariants are as given above.\n- After the loop termination, x is 1000000, which satisfies the post-condition. The value of y is incremented by 1 in every iteration where x is greater than or equal to 500000. Therefore, y is equal to 750000 at the end of the loop. The value of z remains unchanged in every iteration, so it is still 0. Hence, the loop invariants are satisfied.",
            "Pre-conditions and Variable Assignments:\n- The program defines a macro `assume` that takes a boolean expression as input. If the expression is false, the macro immediately returns 0 from the current function.\n- The `main` function initializes three integer variables `x`, `y`, and `z` with values 0, 500000, and 0, respectively.\n\nLoop Invariants:\n- Before the loop execution, the following loop invariants are true:\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n*/\n```\n- In every iteration of the loop, the following loop invariants are true:\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n*/\n```\n- After the loop termination, the following loop invariants are true:\n```\n/*@ \n    loop invariant 1000000 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000500;\n    loop invariant z == 0;\n*/\n```\nExplanation:\n- The loop starts with `x=0` and increments `x` by 1 or 2 in each iteration, until `x` reaches 1000000. Hence, `0 <= x <= 1000000` is a loop invariant that holds before and during the loop execution. \n- The loop also increments `y` by 1 in each iteration after `x` crosses 500000. Hence, `500000 <= y <= 1000000` is a loop invariant that holds before and during the loop execution. \n- `z` is not modified inside the loop, hence `z==0` is a loop invariant that holds before, during, and after the loop execution.\n- The post-condition is `x==1000000`. Since `x` is incremented by 1 or 2 in each iteration, it will eventually reach 1000000 and stay there until the loop terminates. Hence, `1000000 <= x <= 1000000` is a loop invariant that holds after the loop termination.\n- Since `y` is incremented by 1 in each iteration after `x` crosses 500000, `y` will be at least 500000 at the end of the loop. However, `y` may also be incremented by 1 before `x` crosses 500000, hence we cannot bound its maximum value. Hence, `500000 <= y <= 1000500` is a loop invariant that holds after the loop termination.\n- `z` is not modified inside the loop, hence `z==0` is a loop invariant that holds after the loop termination.",
            "Pre-conditions:\n- The variables x, y, and z are integers.\n\nVariable assignments:\n- x is assigned the value 0.\n- y is assigned the value 500000.\n- z is assigned the value 0.\n\nLoop condition:\n- The loop continues as long as x is less than 1000000.\n\nLoop body:\n- If x is less than 500000, then increment x by 1.\n- Otherwise, if x is less than 750000, increment x by 1.\n- Otherwise, increment x by 2, and increment y by 1.\n\nPost-condition:\n- x should be equal to 1000000.\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + x - 500000/2;\nloop invariant (x < 500000) ==> (y == 500000);\nloop invariant (500000 <= x < 750000) ==> (y == x + 500000 - 500000/2);\nloop invariant (750000 <= x < 1000000) ==> (y == x + 500001 - 500000/2);\nloop invariant (x == 1000000) ==> (\\at(y, Pre) == 1000000 + 500000 - 500000/2);\n*/\n```\n\nExplanation of loop invariants:\n- The first loop invariant ensures that x is always between 0 and 1000000, inclusive.\n- The second loop invariant ensures that y is always between 500000 and 500000 + x - 500000/2, inclusive. The term \"500000/2\" is used to account for the two different ways in which x is incremented in the loop.\n- The third loop invariant states that if x is less than 500000, then y must be equal to 500000. This is true because y is only incremented once x is greater than or equal to 500000.\n- The fourth loop invariant states that if x is between 500000 and 750000 (exclusive), then y must be equal to x + 500000 - 500000/2. This is true because y is incremented once x is greater than or equal to 500000, and then incremented again once x is greater than or equal to 750000.\n- The fifth loop invariant states that if x is between 750000 and 1000000 (exclusive), then y must be equal to x + 500001 - 500000/2. This is true because y is incremented twice once x is greater than or equal to 750000.\n- The sixth loop invariant states that if x is equal to 1000000, then y must be equal to its value before the loop execution plus the number of times y was incremented in the loop. This is true because y is incremented once each time x is greater than or equal to 500000, and then incremented again each time x is greater than or equal to 750000. Since x is always incremented by at least 1 in each iteration of the loop, the number of times y was incremented is at least 500000/2 + (750000 - 500000)/2 = 125000. Adding this to the initial value of y (500000) gives 625000, which is equal to \\at(y, Pre) + 1000000 + 500000 - 500000/2.",
            "We first note the pre-conditions and variable assignments in the program:\n- The program initializes `x` to `0`, `y` to `500000`, and `z` to `0`.\n- The program has a while loop that executes as long as `x` is less than `1000000`.\n\nWe now analyze the loop body and make a note of the loop condition:\n- If `x` is less than `500000`, then `x` is incremented by `1`.\n- If `x` is between `500000` and `750000`, then `x` is incremented by `1`, and `y` is incremented by `1`.\n- If `x` is greater than or equal to `750000`, then `x` is incremented by `2`, and `y` is incremented by `1`.\n\nWe can now output the necessary loop invariants. We will add the invariants inside the while loop:\n```\nwhile(x<1000000){\n    // loop invariant 1: x is always non-negative\n    //@ loop invariant x >= 0;\n\n    // loop invariant 2: y is always greater than or equal to 500000\n    //@ loop invariant y >= 500000;\n\n    // loop invariant 3: y is always less than or equal to x-500000\n    //@ loop invariant y <= x-500000;\n\n    // loop invariant 4: x is always less than or equal to 1000000\n    //@ loop invariant x <= 1000000;\n\n    // loop invariant 5: if x is less than 500000, y does not change\n    //@ loop invariant x<500000 ==> y==500000;\n\n    // loop invariant 6: if x is between 500000 and 750000, y is incremented by 1\n    //@ loop invariant (x>=500000 && x<750000) ==> y==500001+\\at(x,Pre);\n\n    // loop invariant 7: if x is greater than or equal to 750000, y is incremented by 1\n    //@ loop invariant x>=750000 ==> y==x-499999;\n\n    // loop invariant 8: if the loop terminates, x is equal to 1000000\n    //@ loop invariant x>=1000000 ==> \\at(x,Here)==1000000;\n\n    if(x<500000)\n        x++;\n    else{\n        if(x<750000){\n            x++;\n        }\n        else{\n            x=x+2;\n        }\n        y++;\n    }\n}\n```\n\nWe have added eight loop invariants:\n- Loop invariant 1: `x` is always non-negative.\n- Loop invariant 2: `y` is always greater than or equal to `500000`.\n- Loop invariant 3: `y` is always less than or equal to `x-500000`.\n- Loop invariant 4: `x` is always less than or equal to `1000000`.\n- Loop invariant 5: If `x` is less than `500000`, `y` does not change.\n- Loop invariant 6: If `x` is between `500000` and `750000`, `y` is incremented by `1`.\n- Loop invariant 7: If `x` is greater than or equal to `750000`, `y` is incremented by `1`.\n- Loop invariant 8: If the loop terminates, `x` is equal to `1000000`.\n\nThese loop invariants should help Frama-C verify the post-condition that `x` is equal to `1000000` at the end of the loop.",
            "First, let's consider the pre-conditions and variable assignments in the program:\n\nPre-conditions: None.\n\nVariable assignments: \n- x is initialized to 0\n- y is initialized to 500000\n- z is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: x < 1000000\n\nNow, we can output the necessary loop invariants:\n\n```\n/*@\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y;\n    loop invariant (x < 500000) ==> (y == 500000);\n    loop invariant (500000 <= x < 750000) ==> (y == x+500000);\n    loop invariant (750000 <= x < 1000000) ==> (y == x+250001);\n    loop invariant ((x < 500000) && (y == 500000)) || ((500000 <= x < 750000) && (y == x+500000)) || ((750000 <= x < 1000000) && (y == x+250001));\n    loop invariant (x == 1000000) ==> (y == 750000);\n*/\n```\n\nExplanation:\n- The first loop invariant ensures that x is between 0 and 1000000.\n- The second loop invariant ensures that y is between 500000 and 1000000.\n- The third loop invariant ensures that x is always less than or equal to y.\n- The fourth loop invariant states that if x is less than 500000, then y is 500000.\n- The fifth loop invariant states that if x is between 500000 and 750000, then y is x+500000.\n- The sixth loop invariant states that if x is between 750000 and 1000000, then y is x+250001.\n- The seventh loop invariant combines the previous three invariants.\n- The eighth loop invariant states that if x is 1000000, then y is 750000. This is needed because the assertion is guarded by the loop condition, and thus we need to ensure that the post-condition holds for all possible values of x and y that satisfy the loop invariants."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0 and 500000, and 0, respectively.\n\nLoop condition:\n- The loop continues while x < 1000000.\n\nLoop invariants:\n- Before the loop execution: x == 0 && y == 500000 && z == 0\n- In every iteration of the loop:\n  - if (x < 500000), then (x' == x + 1 && y' == y && z' == z)\n  - else if (x < 750000), then (x' == x + 1 && y' == y + 1 && z' == z)\n  - else (x' == x + 2 && y' == y + 1 && z' == z)\n  - where x', y', and z' are the updated values of x, y, and z after the execution of the loop body.\n- After the loop termination: x == 1000000 && y == 750000 && z == 0\n\nExplanation:\n- Before the loop execution, x is 0, so the first conjunct is true. Similarly, y is 500000 and z is 0, so the second and third conjuncts are true.\n- In every iteration of the loop, the value of x is either incremented by 1 or 2, depending on its current value. If it is less than 500000, then it is incremented by 1. Otherwise, if it is less than 750000, then it is again incremented by 1. Otherwise, it is incremented by 2. The value of y is incremented by 1 if x is greater than or equal to 500000. The value of z remains unchanged in every iteration. Therefore, the loop invariants are as given above.\n- After the loop termination, x is 1000000, which satisfies the post-condition. The value of y is incremented by 1 in every iteration where x is greater than or equal to 500000. Therefore, y is equal to 750000 at the end of the loop. The value of z remains unchanged in every iteration, so it is still 0. Hence, the loop invariants are satisfied."
            ],
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n*/",
            "/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + x - 500000/2;\nloop invariant (x < 500000) ==> (y == 500000);\nloop invariant (500000 <= x < 750000) ==> (y == x + 500000 - 500000/2);\nloop invariant (750000 <= x < 1000000) ==> (y == x + 500001 - 500000/2);\nloop invariant (x == 1000000) ==> (\\at(y, Pre) == 1000000 + 500000 - 500000/2);\n*/",
            "while(x<1000000){\n    // loop invariant 1: x is always non-negative\n    //@ loop invariant x >= 0;\n\n    // loop invariant 2: y is always greater than or equal to 500000\n    //@ loop invariant y >= 500000;\n\n    // loop invariant 3: y is always less than or equal to x-500000\n    //@ loop invariant y <= x-500000;\n\n    // loop invariant 4: x is always less than or equal to 1000000\n    //@ loop invariant x <= 1000000;\n\n    // loop invariant 5: if x is less than 500000, y does not change\n    //@ loop invariant x<500000 ==> y==500000;\n\n    // loop invariant 6: if x is between 500000 and 750000, y is incremented by 1\n    //@ loop invariant (x>=500000 && x<750000) ==> y==500001+\\at(x,Pre);\n\n    // loop invariant 7: if x is greater than or equal to 750000, y is incremented by 1\n    //@ loop invariant x>=750000 ==> y==x-499999;\n\n    // loop invariant 8: if the loop terminates, x is equal to 1000000\n    //@ loop invariant x>=1000000 ==> \\at(x,Here)==1000000;\n\n    if(x<500000)\n        x++;\n    else{\n        if(x<750000){\n            x++;\n        }\n        else{\n            x=x+2;\n        }\n        y++;\n    }\n}",
            "/*@\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y;\n    loop invariant (x < 500000) ==> (y == 500000);\n    loop invariant (500000 <= x < 750000) ==> (y == x+500000);\n    loop invariant (750000 <= x < 1000000) ==> (y == x+250001);\n    loop invariant ((x < 500000) && (y == 500000)) || ((500000 <= x < 750000) && (y == x+500000)) || ((750000 <= x < 1000000) && (y == x+250001));\n    loop invariant (x == 1000000) ==> (y == 750000);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments:\n- The variables x, y, and z are initialized to 0 and 500000, and 0, respectively.\n\nLoop condition:\n- The loop continues while x < 1000000.\n\nLoop invariants:\n- Before the loop execution: x == 0 && y == 500000 && z == 0\n- In every iteration of the loop:\n  - if (x < 500000), then (x' == x + 1 && y' == y && z' == z)\n  - else if (x < 750000), then (x' == x + 1 && y' == y + 1 && z' == z)\n  - else (x' == x + 2 && y' == y + 1 && z' == z)\n  - where x', y', and z' are the updated values of x, y, and z after the execution of the loop body.\n- After the loop termination: x == 1000000 && y == 750000 && z == 0\n\nExplanation:\n- Before the loop execution, x is 0, so the first conjunct is true. Similarly, y is 500000 and z is 0, so the second and third conjuncts are true.\n- In every iteration of the loop, the value of x is either incremented by 1 or 2, depending on its current value. If it is less than 500000, then it is incremented by 1. Otherwise, if it is less than 750000, then it is again incremented by 1. Otherwise, it is incremented by 2. The value of y is incremented by 1 if x is greater than or equal to 500000. The value of z remains unchanged in every iteration. Therefore, the loop invariants are as given above.\n- After the loop termination, x is 1000000, which satisfies the post-condition. The value of y is incremented by 1 in every iteration where x is greater than or equal to 500000. Therefore, y is equal to 750000 at the end of the loop. The value of z remains unchanged in every iteration, so it is still 0. Hence, the loop invariants are satisfied.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant z == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is established but not preserved.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant z == 0 is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\nloop invariant 0 <= x <= 1000000;\nloop invariant 500000 <= y <= 500000 + x - 500000/2;\nloop invariant (x < 500000) ==> (y == 500000);\nloop invariant (500000 <= x < 750000) ==> (y == x + 500000 - 500000/2);\nloop invariant (750000 <= x < 1000000) ==> (y == x + 500001 - 500000/2);\nloop invariant (x == 1000000) ==> (\\at(y, Pre) == 1000000 + 500000 - 500000/2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: (x < 500000) ==> (y == 500000);\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "while(x<1000000){\n    // loop invariant 1: x is always non-negative\n    //@ loop invariant x >= 0;\n\n    // loop invariant 2: y is always greater than or equal to 500000\n    //@ loop invariant y >= 500000;\n\n    // loop invariant 3: y is always less than or equal to x-500000\n    //@ loop invariant y <= x-500000;\n\n    // loop invariant 4: x is always less than or equal to 1000000\n    //@ loop invariant x <= 1000000;\n\n    // loop invariant 5: if x is less than 500000, y does not change\n    //@ loop invariant x<500000 ==> y==500000;\n\n    // loop invariant 6: if x is between 500000 and 750000, y is incremented by 1\n    //@ loop invariant (x>=500000 && x<750000) ==> y==500001+\\at(x,Pre);\n\n    // loop invariant 7: if x is greater than or equal to 750000, y is incremented by 1\n    //@ loop invariant x>=750000 ==> y==x-499999;\n\n    // loop invariant 8: if the loop terminates, x is equal to 1000000\n    //@ loop invariant x>=1000000 ==> \\at(x,Here)==1000000;\n\n    if(x<500000)\n        x++;\n    else{\n        if(x<750000){\n            x++;\n        }\n        else{\n            x=x+2;\n        }\n        y++;\n    }\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 500000;\n\n\nloop invariant i5: x<500000 ==> y==500000;\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 500000 <= y <= 1000000;\n    loop invariant x <= y;\n    loop invariant (x < 500000) ==> (y == 500000);\n    loop invariant (500000 <= x < 750000) ==> (y == x+500000);\n    loop invariant (750000 <= x < 1000000) ==> (y == x+250001);\n    loop invariant ((x < 500000) && (y == 500000)) || ((500000 <= x < 750000) && (y == x+500000)) || ((750000 <= x < 1000000) && (y == x+250001));\n    loop invariant (x == 1000000) ==> (y == 750000);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is partially proven to be inductive.\nloop invariant 500000 <= y <= 1000000 is established but not preserved.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant (x < 500000) ==> (y == 500000) is partially proven to be inductive.\nloop invariant (500000 <= x < 750000) ==> (y == x+500000) is established but not preserved.\nloop invariant (750000 <= x < 1000000) ==> (y == x+250001) is partially proven to be inductive.\nloop invariant ((x < 500000) && (y == 500000)) || ((500000 <= x < 750000) && (y == x+500000)) || ((750000 <= x < 1000000) && (y == x+250001)) is partially proven to be inductive.\nloop invariant (x == 1000000) ==> (y == 750000) is partially proven to be inductive.\nAssertion x == 1000000: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\n\nloop invariant i4: (x < 500000) ==> (y == 500000);\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unbound logic variable y. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 500000 <= y <= 1000000;\nloop invariant i3: z == 0;\nloop invariant i4: 500000 <= y <= 500000 + x - 500000/2;\nloop invariant i5: (x < 500000) ==> (y == 500000);\nloop invariant i6: (500000 <= x < 750000) ==> (y == x + 500000 - 500000/2);\nloop invariant i7: (750000 <= x < 1000000) ==> (y == x + 500001 - 500000/2);\nloop invariant i8: (x == 1000000) ==> (\\at(y, Pre) == 1000000 + 500000 - 500000/2);\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 500000;\nloop invariant i11: y <= x-500000;\nloop invariant i12: x <= 1000000;\nloop invariant i13: x<500000 ==> y==500000;\nloop invariant i14: (x>=500000 && x<750000) ==> y==500001+\\at(x,Pre);\nloop invariant i15: x>=750000 ==> y==x-499999;\nloop invariant i16: x>=1000000 ==> \\at(x,Here)==1000000;\nloop invariant i17: x <= y;\nloop invariant i18: (500000 <= x < 750000) ==> (y == x+500000);\nloop invariant i19: (750000 <= x < 1000000) ==> (y == x+250001);\nloop invariant i20: ((x < 500000) && (y == 500000)) || ((500000 <= x < 750000) && (y == x+500000)) || ((750000 <= x < 1000000) && (y == x+250001));\nloop invariant i21: (x == 1000000) ==> (y == 750000);\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\t/*@\n\n\nloop invariant i3: z == 0;\n\nloop invariant i5: (x < 500000) ==> (y == 500000);\n\n\n\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 500000;\n\n\nloop invariant i13: x<500000 ==> y==500000;\n\n\n\n\n\n\n\n\n*/\nwhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c"
        ],
        "skipped": [],
        "total": 387,
        "success_count": 200,
        "failure_count": 187,
        "success_rate": 0.5167958656330749
    }
}