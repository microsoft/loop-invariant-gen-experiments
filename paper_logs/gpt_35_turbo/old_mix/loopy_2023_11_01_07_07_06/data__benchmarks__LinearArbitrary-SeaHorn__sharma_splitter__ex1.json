{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nPost-conditions:\n- y == -2\n- x == 99\n\nLoop Invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1\n    - (y >= 0) ==> (x <= 49)\n    - (y < 0) ==> (flag == 1)\n    - (x >= 50) ==> (y <= -2)\n    - (x < 50) ==> (y >= 0)\n- After the loop termination:\n    - flag == 1\n    - y <= -2\n    - x == 99\n\nExplanation:\n- Before the loop execution:\n    - This is true because these are the initial assignments to the variables.\n- In every iteration of the loop:\n    - flag < 1: This is the loop condition.\n    - (y >= 0) ==> (x <= 49): This is true because as long as y is non-negative, x can be at most 49 because of the else branch in the loop.\n    - (y < 0) ==> (flag == 1): This is true because if y becomes negative, the flag is set to 1 and the loop terminates.\n    - (x >= 50) ==> (y <= -2): This is true because if x becomes greater than or equal to 50, then y starts decreasing by 1 in each iteration of the loop, so it must eventually become less than or equal to -2.\n    - (x < 50) ==> (y >= 0): This is true because if x is less than 50, then y starts increasing by 1 in each iteration of the loop, so it must always be non-negative.\n- After the loop termination:\n    - flag == 1: This is true because the loop terminates only when flag becomes 1.\n    - y <= -2: This is true because of the last else branch in the loop, which decreases y by 1 in each iteration when x is greater than or equal to 50.\n    - x == 99: This is true because of the loop condition and the fact that x starts at 0 and increases by 1 in each iteration of the loop until it reaches 99.",
            "Pre-conditions or variable assignments:\n- Three integer variables `x`, `y`, and `flag` are declared and initialized to 0.\n\nLoop condition:\n- The loop continues as long as `flag < 1`.\n\nLoop Invariants:\n- Before the loop execution, `x == 0`, `y == 0`, and `flag == 0`.\n- In every iteration of the loop, the following conditions hold:\n    - `x >= 0`\n    - `y >= -x`\n    - `y <= -x + 2`\n- After the loop termination, `y == -2` and `x == 99`.\n- Implication: `flag >= 1 ==> y == -2 && x == 99`.\n\nExplanation:\n- Before the loop execution, the variables are initialized as `x=0`, `y=0`, and `flag=0`.\n- In every iteration of the loop, `x` is incremented by 1 if `flag < 1`. If `x < 50`, `y` is incremented by 1, otherwise `y` is decremented by 1.\n- Since `x` is always incremented by 1 and initialized to 0, it is always greater than or equal to 0.\n- `y` can be incremented by 1 or decremented by 1 in each iteration, hence `y >= -x` and `y <= -x + 2`.\n- When the loop terminates, `flag` must be greater than or equal to 1 for the loop to exit. Hence, if the loop exited, then `flag >= 1`. If `flag >= 1`, then the loop invariant `y == -2 && x == 99` holds due to the last two lines of the loop. \n- Therefore, the final loop invariant is:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant y <= -x + 2;\n    loop invariant flag >= 1 ==> y == -2 && x == 99;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop Condition:\n- flag < 1\n\nLoop Invariants:\n- x is always non-negative: x >= 0\n- y is always non-negative: y >= 0\n- y is always greater than or equal to -2: y >= -2\n- x is always less than or equal to 99: x <= 99\n- If flag < 1, then x is incremented by 1: (flag < 1) ==> (x' == x + 1)\n- If flag >= 1, then x remains the same: (flag >= 1) ==> (x' == x)\n- If x < 50, then y is incremented by 1: (x < 50) ==> (y' == y + 1)\n- If x >= 50, then y is decremented by 1: (x >= 50) ==> (y' == y - 1)\n- If y < 0, then flag is set to 1: (y < 0) ==> (flag' == 1)\n- If flag >= 1, then the loop terminates: (flag >= 1) ==> (\\old(x) == x && \\old(y) == y)\n\nPost-conditions:\n- y == -2\n- x == 99\n\nFinal Loop Invariants:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= -2;\n    loop invariant x <= 99;\n    loop invariant (flag < 1) ==> (x' == x + 1);\n    loop invariant (flag >= 1) ==> (x' == x);\n    loop invariant (x < 50) ==> (y' == y + 1);\n    loop invariant (x >= 50) ==> (y' == y - 1);\n    loop invariant (y < 0) ==> (flag' == 1);\n    loop invariant (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- x is assigned 0.\n- y is assigned 0.\n- flag is assigned 0.\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n    \n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - y <= x + 2\n    - flag <= 1\n    - (x >= 50 ==> y == -x + 100)\n    - (x < 50 ==> y == x)\n    \n- After the loop termination:\n    - flag == 1\n    - x == 99\n    - y == -2\n    \nExplanation of loop invariants:\n- Before the loop execution:\n    - The values of x, y, and flag are initialized to 0 as per the program.\n    \n- In every iteration of the loop:\n    - Since x is incremented by 1 in each iteration, it can never be negative. Hence, x >= 0 is a loop invariant.\n    - Similarly, y is incremented by 1 if x < 50, and decremented by 1 if x >= 50. Therefore, y >= 0 and y <= x + 2.\n    - The flag variable can only take the values 0 and 1. Hence, flag <= 1 is a loop invariant.\n    - If x >= 50, then y is decremented by 1 in each iteration until it reaches -2. Hence, y == -x + 100 is true for all x >= 50. If x < 50, then y is incremented by 1 in each iteration until it reaches x. Hence, y == x is true for all x < 50.\n    \n- After the loop termination:\n    - The loop terminates only when flag is set to 1. Hence, flag == 1 is true after the loop terminates.\n    - When the loop terminates, x has been incremented 100 times. Hence, x == 99.\n    - Since y is decremented by 1 in each iteration until it reaches -2, y == -2 after the loop terminates.",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x is assigned the value 0.\n- y is assigned the value 0.\n- flag is assigned the value 0.\n\nLoop Condition:\n- The loop executes while the value of flag is less than 1.\n\nLoop Body:\n- If y is less than 0, then flag is assigned the value 1.\n- If flag is less than 1, then x is incremented by 1.\n- If x is less than 50, then y is incremented by 1.\n- Otherwise, y is decremented by 1.\n\nPost-conditions:\n- The value of y is -2.\n- The value of x is 99.\n\nLoop Invariants:\n```\n/*@\n    loop invariant -2 <= y <= 50;\n    loop invariant 0 <= x <= 99;\n    loop invariant (flag < 1) ==> (x <= 49);\n    loop invariant (flag < 1) ==> (y >= 0);\n    loop invariant (flag == 1) ==> (y < 0);\n*/\n```\nExplanation:\n- The first loop invariant ensures that y remains between -2 and 50 throughout the loop execution.\n- The second loop invariant ensures that x remains between 0 and 99 throughout the loop execution.\n- The third loop invariant ensures that if flag is less than 1, then x must be less than or equal to 49. This is because once x reaches 50, it will always be decremented and never incremented, due to the else condition in the loop body.\n- The fourth loop invariant ensures that if flag is less than 1, then y must be greater than or equal to 0. This is because y is only incremented when x is less than 50, and x is only incremented when flag is less than 1.\n- The fifth loop invariant ensures that if flag is equal to 1, then y must be less than 0. This is because once flag is set to 1, the loop will terminate only when y is less than 0."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nPost-conditions:\n- y == -2\n- x == 99\n\nLoop Invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1\n    - (y >= 0) ==> (x <= 49)\n    - (y < 0) ==> (flag == 1)\n    - (x >= 50) ==> (y <= -2)\n    - (x < 50) ==> (y >= 0)\n- After the loop termination:\n    - flag == 1\n    - y <= -2\n    - x == 99\n\nExplanation:\n- Before the loop execution:\n    - This is true because these are the initial assignments to the variables.\n- In every iteration of the loop:\n    - flag < 1: This is the loop condition.\n    - (y >= 0) ==> (x <= 49): This is true because as long as y is non-negative, x can be at most 49 because of the else branch in the loop.\n    - (y < 0) ==> (flag == 1): This is true because if y becomes negative, the flag is set to 1 and the loop terminates.\n    - (x >= 50) ==> (y <= -2): This is true because if x becomes greater than or equal to 50, then y starts decreasing by 1 in each iteration of the loop, so it must eventually become less than or equal to -2.\n    - (x < 50) ==> (y >= 0): This is true because if x is less than 50, then y starts increasing by 1 in each iteration of the loop, so it must always be non-negative.\n- After the loop termination:\n    - flag == 1: This is true because the loop terminates only when flag becomes 1.\n    - y <= -2: This is true because of the last else branch in the loop, which decreases y by 1 in each iteration when x is greater than or equal to 50.\n    - x == 99: This is true because of the loop condition and the fact that x starts at 0 and increases by 1 in each iteration of the loop until it reaches 99."
            ],
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant y <= -x + 2;\n    loop invariant flag >= 1 ==> y == -2 && x == 99;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= -2;\n    loop invariant x <= 99;\n    loop invariant (flag < 1) ==> (x' == x + 1);\n    loop invariant (flag >= 1) ==> (x' == x);\n    loop invariant (x < 50) ==> (y' == y + 1);\n    loop invariant (x >= 50) ==> (y' == y - 1);\n    loop invariant (y < 0) ==> (flag' == 1);\n    loop invariant (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None.\n\nVariable assignments:\n- x is assigned 0.\n- y is assigned 0.\n- flag is assigned 0.\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n    \n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - y <= x + 2\n    - flag <= 1\n    - (x >= 50 ==> y == -x + 100)\n    - (x < 50 ==> y == x)\n    \n- After the loop termination:\n    - flag == 1\n    - x == 99\n    - y == -2\n    \nExplanation of loop invariants:\n- Before the loop execution:\n    - The values of x, y, and flag are initialized to 0 as per the program.\n    \n- In every iteration of the loop:\n    - Since x is incremented by 1 in each iteration, it can never be negative. Hence, x >= 0 is a loop invariant.\n    - Similarly, y is incremented by 1 if x < 50, and decremented by 1 if x >= 50. Therefore, y >= 0 and y <= x + 2.\n    - The flag variable can only take the values 0 and 1. Hence, flag <= 1 is a loop invariant.\n    - If x >= 50, then y is decremented by 1 in each iteration until it reaches -2. Hence, y == -x + 100 is true for all x >= 50. If x < 50, then y is incremented by 1 in each iteration until it reaches x. Hence, y == x is true for all x < 50.\n    \n- After the loop termination:\n    - The loop terminates only when flag is set to 1. Hence, flag == 1 is true after the loop terminates.\n    - When the loop terminates, x has been incremented 100 times. Hence, x == 99.\n    - Since y is decremented by 1 in each iteration until it reaches -2, y == -2 after the loop terminates."
            ],
            "/*@\n    loop invariant -2 <= y <= 50;\n    loop invariant 0 <= x <= 99;\n    loop invariant (flag < 1) ==> (x <= 49);\n    loop invariant (flag < 1) ==> (y >= 0);\n    loop invariant (flag == 1) ==> (y < 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- x = 0\n- y = 0\n- flag = 0\n\nLoop condition:\n- flag < 1\n\nPost-conditions:\n- y == -2\n- x == 99\n\nLoop Invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n- In every iteration of the loop:\n    - flag < 1\n    - (y >= 0) ==> (x <= 49)\n    - (y < 0) ==> (flag == 1)\n    - (x >= 50) ==> (y <= -2)\n    - (x < 50) ==> (y >= 0)\n- After the loop termination:\n    - flag == 1\n    - y <= -2\n    - x == 99\n\nExplanation:\n- Before the loop execution:\n    - This is true because these are the initial assignments to the variables.\n- In every iteration of the loop:\n    - flag < 1: This is the loop condition.\n    - (y >= 0) ==> (x <= 49): This is true because as long as y is non-negative, x can be at most 49 because of the else branch in the loop.\n    - (y < 0) ==> (flag == 1): This is true because if y becomes negative, the flag is set to 1 and the loop terminates.\n    - (x >= 50) ==> (y <= -2): This is true because if x becomes greater than or equal to 50, then y starts decreasing by 1 in each iteration of the loop, so it must eventually become less than or equal to -2.\n    - (x < 50) ==> (y >= 0): This is true because if x is less than 50, then y starts increasing by 1 in each iteration of the loop, so it must always be non-negative.\n- After the loop termination:\n    - flag == 1: This is true because the loop terminates only when flag becomes 1.\n    - y <= -2: This is true because of the last else branch in the loop, which decreases y by 1 in each iteration when x is greater than or equal to 50.\n    - x == 99: This is true because of the loop condition and the fact that x starts at 0 and increases by 1 in each iteration of the loop until it reaches 99.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant y <= -x + 2;\n    loop invariant flag >= 1 ==> y == -2 && x == 99;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= -x is established but not preserved.\nloop invariant y <= -x + 2 is established but not preserved.\nloop invariant flag >= 1 ==> y == -2 && x == 99 is established but not preserved.\nAssertion y == -2: Partially proven\nAssertion x == 99: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= -2;\n    loop invariant x <= 99;\n    loop invariant (flag < 1) ==> (x' == x + 1);\n    loop invariant (flag >= 1) ==> (x' == x);\n    loop invariant (x < 50) ==> (y' == y + 1);\n    loop invariant (x >= 50) ==> (y' == y - 1);\n    loop invariant (y < 0) ==> (flag' == 1);\n    loop invariant (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No JSON report found",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= -2;\nloop invariant i4: x <= 99;\nloop invariant i5: (flag < 1) ==> (x' == x + 1);\nloop invariant i6: (flag >= 1) ==> (x' == x);\nloop invariant i7: (x < 50) ==> (y' == y + 1);\nloop invariant i8: (x >= 50) ==> (y' == y - 1);\nloop invariant i9: (y < 0) ==> (flag' == 1);\nloop invariant i10: (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None.\n\nVariable assignments:\n- x is assigned 0.\n- y is assigned 0.\n- flag is assigned 0.\n\nLoop condition:\n- flag < 1\n\nLoop invariants:\n- Before the loop execution:\n    - x == 0\n    - y == 0\n    - flag == 0\n    \n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - y <= x + 2\n    - flag <= 1\n    - (x >= 50 ==> y == -x + 100)\n    - (x < 50 ==> y == x)\n    \n- After the loop termination:\n    - flag == 1\n    - x == 99\n    - y == -2\n    \nExplanation of loop invariants:\n- Before the loop execution:\n    - The values of x, y, and flag are initialized to 0 as per the program.\n    \n- In every iteration of the loop:\n    - Since x is incremented by 1 in each iteration, it can never be negative. Hence, x >= 0 is a loop invariant.\n    - Similarly, y is incremented by 1 if x < 50, and decremented by 1 if x >= 50. Therefore, y >= 0 and y <= x + 2.\n    - The flag variable can only take the values 0 and 1. Hence, flag <= 1 is a loop invariant.\n    - If x >= 50, then y is decremented by 1 in each iteration until it reaches -2. Hence, y == -x + 100 is true for all x >= 50. If x < 50, then y is incremented by 1 in each iteration until it reaches x. Hence, y == x is true for all x < 50.\n    \n- After the loop termination:\n    - The loop terminates only when flag is set to 1. Hence, flag == 1 is true after the loop terminates.\n    - When the loop terminates, x has been incremented 100 times. Hence, x == 99.\n    - Since y is decremented by 1 in each iteration until it reaches -2, y == -2 after the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant -2 <= y <= 50;\n    loop invariant 0 <= x <= 99;\n    loop invariant (flag < 1) ==> (x <= 49);\n    loop invariant (flag < 1) ==> (y >= 0);\n    loop invariant (flag == 1) ==> (y < 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant -2 <= y <= 50 is established but not preserved.\nloop invariant 0 <= x <= 99 is partially proven to be inductive.\nloop invariant (flag < 1) ==> (x <= 49) is established but not preserved.\nloop invariant (flag < 1) ==> (y >= 0) is partially proven to be inductive.\nloop invariant (flag == 1) ==> (y < 0) is partially proven to be inductive.\nAssertion y == -2: Unproven\nAssertion x == 99: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No JSON report found",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= -x;\nloop invariant i3: y <= -x + 2;\nloop invariant i4: flag >= 1 ==> y == -2 && x == 99;\nloop invariant i5: y >= 0;\nloop invariant i6: y >= -2;\nloop invariant i7: x <= 99;\nloop invariant i8: (flag < 1) ==> (x' == x + 1);\nloop invariant i9: (flag >= 1) ==> (x' == x);\nloop invariant i10: (x < 50) ==> (y' == y + 1);\nloop invariant i11: (x >= 50) ==> (y' == y - 1);\nloop invariant i12: (y < 0) ==> (flag' == 1);\nloop invariant i13: (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\nloop invariant i14: -2 <= y <= 50;\nloop invariant i15: 0 <= x <= 99;\nloop invariant i16: (flag < 1) ==> (x <= 49);\nloop invariant i17: (flag < 1) ==> (y >= 0);\nloop invariant i18: (flag == 1) ==> (y < 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= -x;\nloop invariant i3: y <= -x + 2;\nloop invariant i4: flag >= 1 ==> y == -2 && x == 99;\nloop invariant i5: y >= 0;\nloop invariant i6: y >= -2;\nloop invariant i7: x <= 99;\nloop invariant i8: (flag < 1) ==> (x' == x + 1);\nloop invariant i9: (flag >= 1) ==> (x' == x);\nloop invariant i10: (x < 50) ==> (y' == y + 1);\nloop invariant i11: (x >= 50) ==> (y' == y - 1);\nloop invariant i12: (y < 0) ==> (flag' == 1);\nloop invariant i13: (flag >= 1) ==> (\\old(x) == x && \\old(y) == y);\nloop invariant i14: -2 <= y <= 50;\nloop invariant i15: 0 <= x <= 99;\nloop invariant i16: (flag < 1) ==> (x <= 49);\nloop invariant i17: (flag < 1) ==> (y >= 0);\nloop invariant i18: (flag == 1) ==> (y < 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\n\t{;\n//@ assert(x==99);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c"
        ],
        "skipped": [],
        "total": 224,
        "success_count": 104,
        "failure_count": 120,
        "success_rate": 0.4642857142857143
    }
}