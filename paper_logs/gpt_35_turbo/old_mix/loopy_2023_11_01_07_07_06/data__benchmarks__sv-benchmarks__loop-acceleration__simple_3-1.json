{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variable `N` is non-deterministic and its value is assigned by a function call `unknown_ushort()` which returns an unsigned short integer.\n- The variable `x` is assigned 0 at the beginning.\n\nLoop condition:\n- The loop executes as long as the value of `x` is less than `N`.\n\nPost-condition:\n- The assertion states that the value of `x` is odd.\n\nLoop invariants:\n- Since `N` is non-deterministic, we cannot bound its maximum or minimum values. But we can use an implication to make the invariant trivially true at the end of the loop. Thus, we can say that if the loop terminates, then `x >= N`.\n- At the beginning of the loop, `x` is 0 and `N` is non-negative. Thus, `x <= N`. Combining this with the previous invariant, we get `0 <= x <= N` at the beginning of the loop.\n- In every iteration of the loop, `x` is incremented by 2. Thus, `x` is always even. Combining this with the previous invariant, we get `0 <= x <= N` and `x % 2 == 0` in every iteration of the loop.\n- At the end of the loop, the loop condition is false. Thus, `x >= N`. Combining this with the previous invariant, we get `x % 2 == 0 ==> x >= N`.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> x >= N;\n*/\n```",
            "Let's first analyze the program and make notes of the pre-conditions and the loop condition:\n\n- Pre-condition: `x` is initialized to 0 and `N` is assigned the value returned by the function `unknown_ushort()`.\n- Loop condition: `x < N`\n- Loop body: `x += 2`\n\nTo find the necessary loop invariants, we need to analyze the loop body and see how it affects the variables. In this case, we see that the loop adds 2 to `x` in each iteration. \n\nWe also need to analyze the post-condition and see how it relates to the loop variables. In this case, the post-condition is `x % 2`, which means that `x` should be odd.\n\nBased on this analysis, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0 ==> x < N;\n    loop invariant x % 2 == 1 ==> x <= N;\n*/\n```\n\nExplanation:\n- The first loop invariant states that `x` is always between 0 and `N`.\n- The second loop invariant states that if `x` is even, then it should be strictly less than `N` to satisfy the post-condition.\n- The third loop invariant states that if `x` is odd, then it should be less than or equal to `N` to satisfy the post-condition.\n\nNote that since `N` is non-deterministic, we cannot come up with any bounds for it. However, we can use the fact that `N` is always greater than or equal to `x` to come up with the above loop invariants.\n\nAlso note that since `unknown_ushort()` is non-deterministic, we cannot make any assumptions about the initial value of `N`. However, we can use the loop invariants to prove that the post-condition holds for all possible values of `N`.",
            "First, let's analyze the program and note down the pre-conditions and variable assignments:\n\nPre-conditions:\n- None\n\nVariable assignments:\n- x is initialized to 0\n- N is assigned the value returned by the function unknown_ushort()\n\nNow, let's analyze the loop body and note down the loop condition:\n- The loop continues as long as x is less than N.\n\nBased on this analysis, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;  // x is always between 0 and N, inclusive\n    loop invariant x % 2 == 0;   // x is always even\n*/\n```\nThe first invariant ensures that x is always between 0 and N, inclusive, and the second invariant ensures that x is always even. \n\nSince the post-condition is guarded by a condition, we need to use implication to take care of the conditional nature of the code. We can use the guard condition in an implication as follows:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant (x >= N) ==> (x % 2);\n*/\n```\n\nThis states that if the loop terminates with x >= N, then x must be odd. This is because the assertion is guarded by the condition x % 2, so if x >= N, then x % 2 must be true in order for the assertion to be verified.\n\nFinally, we note that the value of N is non-deterministic, so we need to use an implication to make the invariant trivially true at the beginning of the loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant (N < 2) ==> (x % 2); // Trivially true when N < 2\n    loop invariant (x >= N) ==> (x % 2);\n*/\n```\n\nThis ensures that the loop invariants are true even if N is less than 2.\n\nTherefore, the final set of loop invariants for the program is:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant (N < 2) ==> (x % 2); // Trivially true when N < 2\n    loop invariant (x >= N) ==> (x % 2);\n*/\n```",
            "Pre-conditions:\n- The function main takes no arguments and returns an integer value.\n- The function assume is defined as a macro. It takes a boolean expression as input and returns 0 if the expression is false.\n- The function unknown_ushort is declared but not defined. It returns an unsigned short value.\n- The variable x is declared as an unsigned integer and initialized to 0.\n- The variable N is declared as an unsigned short and initialized to the return value of the function unknown_ushort().\n\nLoop condition:\n- The while loop executes as long as the value of x is less than N.\n\nPost-condition:\n- The assertion inside the block following the loop checks whether the value of x is odd.\n\nLoop invariants:\n- Before the loop execution: \n    - x is initialized to 0, so x is greater than or equal to 0. (x >= 0)\n    - N is assigned the return value of the function unknown_ushort(), so N is greater than or equal to 0. (N >= 0)\n- In every iteration of the loop:\n    - The loop body increments the value of x by 2, so after each iteration, the value of x is greater than or equal to 2. (x >= 2 * i), where i is the number of iterations.\n    - The loop condition is x < N, so after each iteration, the value of x is less than or equal to N. (x <= N)\n- After the loop termination:\n    - The loop terminates when x is greater than or equal to N. So, after the loop, x is greater than or equal to N. (x >= N)\n    - Since x is incremented by 2 in each iteration, if x is greater than or equal to N, then the difference between x and N is less than or equal to 1. (x - N <= 1)\n    - From the post-condition, we know that x is odd. Therefore, if x is greater than or equal to N, then N is even. (N % 2 == 0 ==> x % 2 == 1)\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant x >= 2 * i;\n    loop invariant x - N <= 1;\n    loop invariant N % 2 == 0 ==> x % 2 == 1;\n*/\n```",
            "Pre-conditions:\n- The `main` function takes no arguments and returns an integer.\n- The `assume` macro takes a boolean expression as an argument and returns 0 if the expression is false.\n\nVariable assignments:\n- `x` is an unsigned integer initialized to 0.\n- `N` is an unsigned short initialized to the result of the `unknown_ushort` function call.\n\nLoop condition:\n- The loop continues as long as `x` is less than `N`.\n\nLoop body:\n- In each iteration, `x` is incremented by 2.\n\nPost-condition:\n- The assertion checks if `x` is odd.\n\nLoop invariants:\n- Before the loop execution, `x` is less than or equal to `N`.\n- In every iteration of the loop, `x` is even.\n- After the loop termination, if `x` is odd, then `x` is greater than or equal to `N`.\n\nReasoning:\n- Before the loop starts, `x` is 0 and `N` is non-negative, so `x` is less than or equal to `N`.\n- In each iteration, `x` is incremented by 2, so `x` is always even.\n- After the loop terminates, `x` is greater than or equal to `N` because `x` is incremented by at least 2 in each iteration, and the loop terminates when `x` is greater than or equal to `N`. If `x` is odd, then it must be equal to `N+1`, which is greater than or equal to `N`.\n- The post-condition checks if `x` is odd, so we need to add an implication that if `x` is odd, then `x` is greater than or equal to `N`. This implication holds because of the previous loop invariant. Thus, the loop invariants are:\n```\n/*@ \n    loop invariant x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant !(x % 2) ==> x >= N;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> x >= N;\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0 ==> x < N;\n    loop invariant x % 2 == 1 ==> x <= N;\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;  // x is always between 0 and N, inclusive\n    loop invariant x % 2 == 0;   // x is always even\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant x >= 2 * i;\n    loop invariant x - N <= 1;\n    loop invariant N % 2 == 0 ==> x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant !(x % 2) ==> x >= N;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant x % 2 == 0 ==> x >= N;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= N is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant x % 2 == 0 ==> x >= N is preserved but not established.\nAssertion x % 2 != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant x % 2 == 0 ==> x < N;\n    loop invariant x % 2 == 1 ==> x <= N;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= N is established but not preserved.\nloop invariant x % 2 == 0 ==> x < N is neither established nor preserved.\nloop invariant x % 2 == 1 ==> x <= N is partially proven to be inductive.\nAssertion x % 2 != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\n\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;  // x is always between 0 and N, inclusive\n    loop invariant x % 2 == 0;   // x is always even\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= N is established but not preserved.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nAssertion x % 2 != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant N >= 0;\n    loop invariant x <= N;\n    loop invariant x >= 2 * i;\n    loop invariant x - N <= 1;\n    loop invariant N % 2 == 0 ==> x % 2 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: N >= 0;\n\n\nloop invariant i5: x - N <= 1;\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x <= N;\n    loop invariant x % 2 == 0;\n    loop invariant !(x % 2) ==> x >= N;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= N is partially proven to be inductive.\nloop invariant x % 2 == 0 is partially proven to be inductive.\nloop invariant !(x % 2) ==> x >= N is preserved but not established.\nAssertion x % 2 != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unbound logic variable i. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: x % 2 == 0;\nloop invariant i3: x % 2 == 0 ==> x >= N;\nloop invariant i4: x % 2 == 0 ==> x < N;\nloop invariant i5: x % 2 == 1 ==> x <= N;\nloop invariant i6: x >= 0;\nloop invariant i7: N >= 0;\nloop invariant i8: x <= N;\nloop invariant i9: x >= 2 * i;\nloop invariant i10: x - N <= 1;\nloop invariant i11: N % 2 == 0 ==> x % 2 == 1;\nloop invariant i12: !(x % 2) ==> x >= N;\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned short unknown_ushort(void);\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  /*@\n\nloop invariant i2: x % 2 == 0;\n\n\nloop invariant i5: x % 2 == 1 ==> x <= N;\nloop invariant i6: x >= 0;\nloop invariant i7: N >= 0;\n\n\nloop invariant i10: x - N <= 1;\n\n\n*/\nwhile (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c"
        ],
        "skipped": [],
        "total": 265,
        "success_count": 126,
        "failure_count": 139,
        "success_rate": 0.47547169811320755
    }
}