{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program assumes the existence of an external function `unknown_int()` which returns an integer value.\n- The macro `assume(e)` checks if the expression `e` is true. If it is false, the function returns 0.\n\nVariable assignments:\n- `SIZE` is assigned the value returned by the function `unknown_int()`.\n- `i` is initialized to 1.\n- `sn`, `v1`, `v2`, and `v3` are uninitialized.\n\nLoop condition:\n- The loop executes while `i` is less than or equal to `SIZE`.\n\nLoop body:\n- `sn` is incremented by the value of `a`.\n- `v1`, `v2`, and `v3` are assigned the values returned by the function `unknown_int()`.\n\nPost-condition:\n- The assertion checks if `sn` is equal to `SIZE*a` or 0.\n\nLoop invariants:\n- Before the loop execution, `sn` is equal to 0.\n```\n/*@ \n    loop invariant sn == 0;\n*/\n```\n- In every iteration of the loop, `sn` is less than or equal to `i*a`.\n```\n/*@ \n    loop invariant 0 <= i <= SIZE ==> sn <= i*a;\n*/\n```\n- In every iteration of the loop, `sn` is greater than or equal to `0`.\n```\n/*@ \n    loop invariant 0 <= sn;\n*/\n```\n- After the loop termination, `sn` is equal to `SIZE*a` or 0.\n```\n/*@ \n    loop invariant 0 <= i <= SIZE ==> sn == i*a;\n    loop invariant i > SIZE ==> (sn==SIZE*a || sn==0);\n*/\n```\n- Since `v1`, `v2`, and `v3` are non-deterministic variables, they can take any value at the beginning and end of the loop. Therefore, we can use an implication to make the loop invariant trivially true at those locations.\n```\n/*@ \n    loop invariant 0 <= i <= SIZE ==> (v1 >= INT_MIN && v1 <= INT_MAX && v2 >= INT_MIN && v2 <= INT_MAX && v3 >= INT_MIN && v3 <= INT_MAX);\n    loop invariant i > SIZE ==> (v1 >= INT_MIN && v1 <= INT_MAX && v2 >= INT_MIN && v2 <= INT_MAX && v3 >= INT_MIN && v3 <= INT_MAX);\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean condition `e` and returns 0 if the condition is false. Otherwise, it continues with the execution of the program.\n- The function `unknown_int()` returns an integer value that is not known at compile-time.\n\nVariable assignments:\n- `a` is assigned the value 1.\n\nLoop condition:\n- The loop iterates while `i` is less than or equal to `SIZE`.\n\nLoop invariants:\n- Before the loop: None needed.\n- In every iteration: `sn` is the sum of the first `i-1` values of `a`, i.e., `sn == (i-1) * a`. Also, `i` is less than or equal to `SIZE`, i.e., `i <= SIZE`.\n- After the loop: `sn` is the sum of the first `SIZE` values of `a`, i.e., `sn == SIZE * a`. Also, `i` is equal to `SIZE + 1`, i.e., `i == SIZE + 1`.\n\nAdditional notes:\n- Since the values of `v1`, `v2`, and `v3` are not used in the loop body or assertion, we do not need to add any invariants for them.\n- Since the assertion is not guarded by any condition, we can use a conjunction to combine the two possible outcomes: `sn == SIZE * a` or `sn == 0`. Thus, the loop invariant after the loop termination is:\n```\n/*@ \n  loop invariant sn == (i-1) * a;\n  loop invariant i <= SIZE;\n  loop invariant sn == SIZE * a ==> i == SIZE + 1;\n  loop invariant sn != SIZE * a ==> i <= SIZE + 1;\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` checks if the condition `e` is true, otherwise it returns 0. \n\nVariable Assignments:\n- `int i, sn=0;`: Initializes `i` and `sn` to 0.\n- `int SIZE = unknown_int();`: Initializes `SIZE` to a non-deterministic value returned by `unknown_int()`.\n- `int v1, v2, v3;`: Initializes `v1`, `v2`, and `v3` to non-deterministic values returned by `unknown_int()`.\n\nLoop Condition:\n- `i<=SIZE`\n\nLoop Invariants:\n- `sn >= 0`\n- `sn <= i*a`\n- `i <= SIZE`\n- `v1` is non-deterministic at the start of the loop, so `v1 >= INT_MIN`\n- `v2` is non-deterministic at the start of the loop, so `v2 >= INT_MIN`\n- `v3` is non-deterministic at the start of the loop, so `v3 >= INT_MIN`\n- `v1` is non-deterministic at the end of the loop, so `v1 >= INT_MIN`\n- `v2` is non-deterministic at the end of the loop, so `v2 >= INT_MIN`\n- `v3` is non-deterministic at the end of the loop, so `v3 >= INT_MIN`\n- `(i < SIZE) ==> (sn + a <= SIZE*a)`\n- `(i == SIZE) ==> (sn == SIZE*a || sn == 0)`\n- `i <= SIZE ==> sn <= SIZE*a`\n- `i > SIZE ==> sn == SIZE*a`\n\nCombined Loop Invariants:\n```\n/*@\nloop invariant sn >= 0;\nloop invariant sn <= i*a;\nloop invariant i <= SIZE;\nloop invariant v1 >= INT_MIN;\nloop invariant v2 >= INT_MIN;\nloop invariant v3 >= INT_MIN;\nloop invariant v1 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v2 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v3 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant (i < SIZE) ==> (sn + a <= SIZE*a);\nloop invariant (i == SIZE) ==> (sn == SIZE*a || sn == 0);\nloop invariant i <= SIZE ==> sn <= SIZE*a;\nloop invariant i > SIZE ==> sn == SIZE*a;\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int i` is assigned the value `1`.\n- `int sn` is assigned the value `0`.\n- `int SIZE` is assigned the value returned by the function `unknown_int()`.\n- `int v1`, `int v2`, and `int v3` are assigned the values returned by the function `unknown_int()`.\n\nLoop condition:\n- The loop will execute as long as the value of `i` is less than or equal to `SIZE`.\n\nLoop invariants:\n- Before the loop execution:\n    - `sn == 0 ==> i == 1` (if `sn` is 0, then this is the first iteration of the loop)\n    - `sn == 0 ==> SIZE >= 1` (if `sn` is 0, then the loop must execute at least once)\n    - `sn == 0 ==> v1 = v2 = v3 = 0` (if `sn` is 0, then `v1`, `v2`, and `v3` are non-deterministic and can be assigned 0)\n    - `sn == 0 ==> sn <= SIZE*a` (if `sn` is 0, then it is less than or equal to the maximum possible value of `sn`)\n    - `i >= 1`\n    - `SIZE >= 1`\n    - `v1`, `v2`, and `v3` are non-deterministic and can take any value.\n- In every iteration of the loop:\n    - `sn == \\sum_{k=1}^{i-1} a`\n    - `i >= 1`\n    - `SIZE >= 1`\n    - `v1`, `v2`, and `v3` are non-deterministic and can take any value.\n- After the loop termination:\n    - `sn == \\sum_{k=1}^{SIZE} a`\n    - `sn == SIZE*a || sn == 0`\n\nWe can combine all these loop invariants in one block as follows:\n```\n/*@ \n  loop invariant sn == 0 ==> i == 1;\n  loop invariant sn == 0 ==> SIZE >= 1;\n  loop invariant sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0;\n  loop invariant sn == 0 ==> sn <= SIZE*a;\n  loop invariant i >= 1;\n  loop invariant SIZE >= 1;\n  loop invariant sn == \\sum_{k=1}^{i-1} a;\n  loop invariant sn == SIZE*a || sn == 0;\n*/\n```",
            "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- The function `unknown_int` returns an unknown integer value.\n\nVariable assignments:\n- `sn` is initialized to 0.\n- `SIZE` is assigned the value returned by the function `unknown_int`.\n- `v1`, `v2`, and `v3` are assigned the values returned by the function `unknown_int`.\n\nLoop condition:\n- The loop executes as long as the variable `i` is less than or equal to `SIZE`.\n\nLoop body:\n- Adds the value of `a` to `sn`.\n- Assigns unknown values to `v1`, `v2`, and `v3`.\n\nPost-condition:\n- The value of `sn` is either `SIZE * a` or 0.\n\nLoop invariants:\n1. Before the loop: `sn == 0`. This is true because `sn` is initialized to 0 before the loop executes.\n2. In each iteration of the loop: `sn <= i * a`. This is true because the value of `sn` is incremented by `a` in each iteration of the loop.\n3. After the loop: `sn == SIZE * a || SIZE == 0`. This is true because the loop executes `SIZE` times and adds `a` to `sn` in each iteration. Thus, if `SIZE` is not 0, `sn` will be equal to `SIZE * a` after the loop. If `SIZE` is 0, then `sn` will remain 0 after the loop. We use the implication `SIZE == 0 ==> sn == 0` to take care of the case when `SIZE` is 0.\n\nPutting it all together:\n```\n/*@ \n  loop invariant sn == 0;\n  loop invariant \\forall integer i; 1 <= i <= SIZE ==> sn <= i * a;\n  loop invariant SIZE == 0 ==> sn == 0;\n  loop invariant sn == SIZE * a || SIZE == 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant sn == 0;\n*/",
            "/*@ \n  loop invariant sn == (i-1) * a;\n  loop invariant i <= SIZE;\n  loop invariant sn == SIZE * a ==> i == SIZE + 1;\n  loop invariant sn != SIZE * a ==> i <= SIZE + 1;\n*/",
            "/*@\nloop invariant sn >= 0;\nloop invariant sn <= i*a;\nloop invariant i <= SIZE;\nloop invariant v1 >= INT_MIN;\nloop invariant v2 >= INT_MIN;\nloop invariant v3 >= INT_MIN;\nloop invariant v1 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v2 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v3 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant (i < SIZE) ==> (sn + a <= SIZE*a);\nloop invariant (i == SIZE) ==> (sn == SIZE*a || sn == 0);\nloop invariant i <= SIZE ==> sn <= SIZE*a;\nloop invariant i > SIZE ==> sn == SIZE*a;\n*/",
            "/*@ \n  loop invariant sn == 0 ==> i == 1;\n  loop invariant sn == 0 ==> SIZE >= 1;\n  loop invariant sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0;\n  loop invariant sn == 0 ==> sn <= SIZE*a;\n  loop invariant i >= 1;\n  loop invariant SIZE >= 1;\n  loop invariant sn == \\sum_{k=1}^{i-1} a;\n  loop invariant sn == SIZE*a || sn == 0;\n*/",
            "/*@ \n  loop invariant sn == 0;\n  loop invariant \\forall integer i; 1 <= i <= SIZE ==> sn <= i * a;\n  loop invariant SIZE == 0 ==> sn == 0;\n  loop invariant sn == SIZE * a || SIZE == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant sn == (i-1) * a;\n  loop invariant i <= SIZE;\n  loop invariant sn == SIZE * a ==> i == SIZE + 1;\n  loop invariant sn != SIZE * a ==> i <= SIZE + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == (i-1) * a is partially proven to be inductive.\nloop invariant i <= SIZE is neither established nor preserved.\nloop invariant sn == SIZE * a ==> i == SIZE + 1 is partially proven to be inductive.\nloop invariant sn != SIZE * a ==> i <= SIZE + 1 is partially proven to be inductive.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: sn == (i-1) * a;\n\nloop invariant i3: sn == SIZE * a ==> i == SIZE + 1;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 10,
                "annotations": "/*@\nloop invariant sn >= 0;\nloop invariant sn <= i*a;\nloop invariant i <= SIZE;\nloop invariant v1 >= INT_MIN;\nloop invariant v2 >= INT_MIN;\nloop invariant v3 >= INT_MIN;\nloop invariant v1 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v2 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant v3 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant (i < SIZE) ==> (sn + a <= SIZE*a);\nloop invariant (i == SIZE) ==> (sn == SIZE*a || sn == 0);\nloop invariant i <= SIZE ==> sn <= SIZE*a;\nloop invariant i > SIZE ==> sn == SIZE*a;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable INT_MIN. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: sn <= i*a;\n\n\n\n\n\n\n\nloop invariant i10: (i < SIZE) ==> (sn + a <= SIZE*a);\n\nloop invariant i12: i <= SIZE ==> sn <= SIZE*a;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n  loop invariant sn == 0 ==> i == 1;\n  loop invariant sn == 0 ==> SIZE >= 1;\n  loop invariant sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0;\n  loop invariant sn == 0 ==> sn <= SIZE*a;\n  loop invariant i >= 1;\n  loop invariant SIZE >= 1;\n  loop invariant sn == \\sum_{k=1}^{i-1} a;\n  loop invariant sn == SIZE*a || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token '='",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\nloop invariant i5: i >= 1;\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant sn == 0;\n  loop invariant \\forall integer i; 1 <= i <= SIZE ==> sn <= i * a;\n  loop invariant SIZE == 0 ==> sn == 0;\n  loop invariant sn == SIZE * a || SIZE == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nloop invariant \\forall integer i; 1 <= i <= SIZE ==> sn <= i * a is partially proven to be inductive.\nloop invariant SIZE == 0 ==> sn == 0 is partially proven to be inductive.\nloop invariant sn == SIZE * a || SIZE == 0 is preserved but not established.\nAssertion sn == SIZE * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 34: unexpected token '='",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == (i-1) * a;\nloop invariant i3: i <= SIZE;\nloop invariant i4: sn == SIZE * a ==> i == SIZE + 1;\nloop invariant i5: sn != SIZE * a ==> i <= SIZE + 1;\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i*a;\nloop invariant i8: v1 >= INT_MIN;\nloop invariant i9: v2 >= INT_MIN;\nloop invariant i10: v3 >= INT_MIN;\nloop invariant i11: v1 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant i12: v2 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant i13: v3 >= INT_MIN ==> sn + a <= SIZE*a;\nloop invariant i14: (i < SIZE) ==> (sn + a <= SIZE*a);\nloop invariant i15: (i == SIZE) ==> (sn == SIZE*a || sn == 0);\nloop invariant i16: i <= SIZE ==> sn <= SIZE*a;\nloop invariant i17: i > SIZE ==> sn == SIZE*a;\nloop invariant i18: sn == 0 ==> i == 1;\nloop invariant i19: sn == 0 ==> SIZE >= 1;\nloop invariant i20: sn == 0 ==> v1 == 0 && v2 == 0 && v3 == 0;\nloop invariant i21: sn == 0 ==> sn <= SIZE*a;\nloop invariant i22: i >= 1;\nloop invariant i23: SIZE >= 1;\nloop invariant i24: sn == \\sum_{k=1}^{i-1} a;\nloop invariant i25: sn == SIZE*a || sn == 0;\nloop invariant i26: \\forall integer i; 1 <= i <= SIZE ==> sn <= i * a;\nloop invariant i27: SIZE == 0 ==> sn == 0;\nloop invariant i28: sn == SIZE * a || SIZE == 0;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}\n",
        "combined_annotation_num_solver_calls": 13,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  /*@\n\nloop invariant i2: sn == (i-1) * a;\n\nloop invariant i4: sn == SIZE * a ==> i == SIZE + 1;\n\nloop invariant i6: sn >= 0;\nloop invariant i7: sn <= i*a;\n\n\n\n\n\n\nloop invariant i14: (i < SIZE) ==> (sn + a <= SIZE*a);\n\nloop invariant i16: i <= SIZE ==> sn <= SIZE*a;\n\nloop invariant i18: sn == 0 ==> i == 1;\n\n\n\nloop invariant i22: i >= 1;\n\n\n\n\nloop invariant i27: SIZE == 0 ==> sn == 0;\n\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c"
        ],
        "skipped": [],
        "total": 215,
        "success_count": 99,
        "failure_count": 116,
        "success_rate": 0.4604651162790698
    }
}