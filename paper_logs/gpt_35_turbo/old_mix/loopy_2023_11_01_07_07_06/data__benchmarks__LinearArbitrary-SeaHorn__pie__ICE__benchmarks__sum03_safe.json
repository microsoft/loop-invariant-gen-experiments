{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "The pre-conditions or variable assignments in the program are:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` evaluates to false.\n- The function `unknown_uint()` returns an unsigned integer with an unknown value.\n- The variable `sn` is initialized to 0.\n- The variables `loop1` and `n1` are non-deterministic unsigned integers.\n- The variable `x` is initialized to 0.\n\nThe loop condition is `while(1)`, which means that the loop will run indefinitely.\n\nWe want to find the necessary loop invariants to help Frama-C verify the post-condition. The post-condition is:\n```\nsn == x*1 || sn == 0\n```\n\nOur loop invariant should imply this post-condition. Let's analyze the loop body to see what we can infer.\n\nIn each iteration of the loop, the following happens:\n- `sn` is incremented by 1.\n- `x` is incremented by 1.\n- The assertion `sn==x*1 || sn == 0` is checked.\n\nFrom the program, we know that `x` starts at 0 and is incremented by 1 in every iteration. Therefore, we can infer that `x` is always greater than or equal to 0.\n\nTo find a loop invariant, we need to find a property that holds true both before the loop execution and after every iteration of the loop. We can use the following loop invariants:\n```\n/*@ \n  loop invariant 1: x >= 0;\n  loop invariant 2: sn == x*1 || sn == 0;\n*/\n```\nThe first loop invariant is true before the loop execution because `x` is initialized to 0, which is greater than or equal to 0. The first loop invariant is also true after every iteration of the loop because `x` is incremented by 1 in every iteration, and we know that `x` is always greater than or equal to 0.\n\nThe second loop invariant is true before the loop execution because `sn` is initialized to 0, which satisfies the post-condition. The second loop invariant is also true after every iteration of the loop because `sn` is incremented by 1 in every iteration, and we know that `sn == x*1 || sn == 0` holds true before the loop execution and is checked in every iteration.\n\nTherefore, the loop invariants `x >= 0` and `sn == x*1 || sn == 0` hold true both before the loop execution and after every iteration of the loop, and they imply the post-condition.",
            "Pre-conditions:\n- The program takes no input.\n- The macro `assume` takes a boolean expression as input and returns 0 if the expression is false.\n\nVariable assignments:\n- `sn` is initialized to 0.\n- `loop1` is assigned the value returned by `unknown_uint()`.\n- `n1` is assigned the value returned by `unknown_uint()`.\n- `x` is initialized to 0.\n\nLoop condition:\n- The loop is an infinite loop, so the condition is always true.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop:\n    - `sn >= 0`\n    - `x >= 0`\n    - `sn == x*1 || sn == 0`\n    - `sn <= x`\n    - `n1 >= loop1`\n- After the loop termination:\n    - `sn == x`\n    - `n1 >= loop1`\n\nExplanation:\n- `sn >= 0` and `x >= 0` are true because `sn` and `x` are initialized to non-negative values and only increment in the loop.\n- `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration and `x` is also incremented by 1 in every iteration. Therefore, `sn` is always equal to `x` or `0`.\n- `sn <= x` is true because `sn` is incremented by 1 in every iteration and `x` is also incremented by 1 in every iteration. Therefore, `sn` is always less than or equal to `x`.\n- `n1 >= loop1` is true because `n1` is assigned the value returned by `unknown_uint()` and `loop1` is assigned the value returned by `unknown_uint()`. Therefore, `n1` is greater than or equal to `loop1`.\n- `sn == x` is true because the loop condition is always true and `sn` and `x` are incremented by 1 in every iteration. Therefore, `sn` is equal to `x` after the loop terminates.\n- `n1 >= loop1` is true because `n1` is assigned the value returned by `unknown_uint()` and `loop1` is assigned the value returned by `unknown_uint()`. Therefore, `n1` is greater than or equal to `loop1` after the loop terminates.\n\nPutting it all together:\n```\n/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x*1 || sn == 0;\n    loop invariant sn <= x;\n    loop invariant n1 >= loop1;\n    loop invariant \\forall integer k; 0 <= k < sn ==> (k == x*1 || k == 0);\n    loop invariant sn == x ==> (n1 >= loop1);\n    loop invariant sn == x;\n    loop invariant n1 >= loop1;\n*/\n```",
            "Pre-conditions and variable assignments:\n- The macro `assume(e)` checks if the condition `e` is false. If it is false, the program returns 0. Otherwise, it continues execution.\n- The `extern` keyword is used to declare that the function `unknown_uint` is defined in another file.\n- The variable `sn` is initialized to 0.\n- The variables `loop1` and `n1` are assigned non-deterministic unsigned integer values.\n- The variable `x` is initialized to 0.\n\nLoop condition:\n- The while loop is an infinite loop and will continue executing until it is interrupted or the program terminates.\n\nLoop invariants:\n- Before the loop execution:\n  - `sn >= 0`\n  - `x >= 0`\n  - `sn == 0 ==> x == 0`\n  - `loop1` and `n1` are non-negative\n- In every iteration of the loop:\n  - `sn >= 1`\n  - `x >= 1`\n  - `sn <= x`\n  - `sn == x*1 || sn == 0`\n- After the loop termination:\n  - `sn >= 1`\n  - `x >= sn`\n  - `sn == x*1 || sn == 0`\n\nExplanation:\n- Before the loop execution:\n  - `sn >= 0` is true because `sn` is initialized to 0.\n  - `x >= 0` is true because `x` is initialized to 0.\n  - `sn == 0 ==> x == 0` is true because if `sn` is 0, then `x` must also be 0 since `x` is incremented in every iteration of the loop.\n  - `loop1` and `n1` are non-negative because they are declared as unsigned integers.\n- In every iteration of the loop:\n  - `sn >= 1` is true because `sn` is incremented by 1 in every iteration of the loop.\n  - `x >= 1` is true because `x` is incremented by 1 in every iteration of the loop.\n  - `sn <= x` is true because `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0.\n- After the loop termination:\n  - `sn >= 1` is true because the loop executes at least once and increments `sn` by 1 in every iteration.\n  - `x >= sn` is true because `x` is incremented by 1 in every iteration of the loop and `sn` is incremented by 1 in every iteration of the loop. Therefore, `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0.",
            "Pre-conditions:\n\nNone.\n\nVariable assignments:\n\n- `sn` is initialized to 0.\n- `loop1` and `n1` are assigned non-deterministic values using the `unknown_uint()` function.\n- `x` is initialized to 0.\n\nLoop condition:\n\nThe loop condition is `while(1)`, which means that the loop will execute indefinitely.\n\nLoop body:\n\n- `sn` is incremented by 1.\n- `x` is incremented by 1.\n- The assertion `sn==x*1 || sn == 0` is checked.\n\nLoop invariants:\n\n(i) Before the loop execution:\n\nNone.\n\n(ii) In every iteration of the loop:\n\n- `sn >= 0` (since `sn` is initialized to 0 and only incremented by 1).\n- `x >= 0` (since `x` is initialized to 0 and only incremented by 1).\n- `sn == x + 0` (since `sn` is incremented by 1 each time and `x` is incremented by 1 each time, starting from 0).\n- `(sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0)` (since the assertion has a guard condition of `sn == x*1 || sn == 0`, we can use implication to incorporate the above two invariants).\n\n(iii) After the loop termination:\n\n- `sn >= 0` (same as above).\n- `x >= sn` (since `x` is incremented by 1 each time and `sn` is incremented by 1 each time, starting from 0).\n- `sn == x + 1` (since the loop terminates only when `sn` overflows, which means that `sn` is equal to the maximum value of an `int` and `x` is equal to `INT_MAX - 1`, and `x` is incremented one last time before the loop terminates).\n- `(sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn)` (same as above).\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n  loop invariant sn >= 0;\n  loop invariant x >= 0;\n  loop invariant sn == x + 0;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\n\n  loop invariant x >= sn;\n  loop invariant sn == x + 1;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` evaluates to false.\n- The function `unknown_uint` returns an unsigned integer with an unknown value.\n\nVariable assignments:\n- `sn` is initialized to 0.\n- `loop1` is assigned the result of `unknown_uint`.\n- `n1` is assigned the result of `unknown_uint`.\n- `x` is initialized to 0.\n\nLoop condition:\n- The while loop runs indefinitely.\n\nTo prove the assertion `sn==x*1 || sn == 0`, we can use the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= sn <= x;\n    loop invariant x >= 0;\n    loop invariant sn == 0 ==> x == 0;\n    loop invariant (sn != 0 && x != 0) ==> sn == x*1;\n*/\n```\n\nExplanation:\n- The first loop invariant ensures that `sn` is always less than or equal to `x`.\n- The second loop invariant ensures that `x` is always greater than or equal to 0.\n- The third loop invariant ensures that if `sn` is 0, then `x` must also be 0.\n- The fourth loop invariant ensures that if both `sn` and `x` are non-zero, then `sn` must be equal to `x*1` (which is the same as `x`). \n\nThese loop invariants are true:\n- Before the loop starts, since `sn` is initialized to 0 and `x` is initialized to 0.\n- After each iteration of the loop, since `sn` is incremented by 1 and `x` is incremented by 1, so `sn` will always be less than or equal to `x`. Also, if `sn` is 0, then `x` must also be 0, otherwise `sn` will be equal to `x*1`.\n- After the loop terminates, the loop condition is always true, so the loop will never terminate. Therefore, the loop invariants hold indefinitely.\n\nThese loop invariants imply the post-condition `sn==x*1 || sn == 0`, since the fourth loop invariant states that if both `sn` and `x` are non-zero, then `sn` must be equal to `x*1` (which is the same as `x`). Therefore, either `sn` is 0, or `sn` is equal to `x*1`."
        ],
        "annotation_blocks": [
            "/*@ \n  loop invariant 1: x >= 0;\n  loop invariant 2: sn == x*1 || sn == 0;\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x*1 || sn == 0;\n    loop invariant sn <= x;\n    loop invariant n1 >= loop1;\n    loop invariant \\forall integer k; 0 <= k < sn ==> (k == x*1 || k == 0);\n    loop invariant sn == x ==> (n1 >= loop1);\n    loop invariant sn == x;\n    loop invariant n1 >= loop1;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The macro `assume(e)` checks if the condition `e` is false. If it is false, the program returns 0. Otherwise, it continues execution.\n- The `extern` keyword is used to declare that the function `unknown_uint` is defined in another file.\n- The variable `sn` is initialized to 0.\n- The variables `loop1` and `n1` are assigned non-deterministic unsigned integer values.\n- The variable `x` is initialized to 0.\n\nLoop condition:\n- The while loop is an infinite loop and will continue executing until it is interrupted or the program terminates.\n\nLoop invariants:\n- Before the loop execution:\n  - `sn >= 0`\n  - `x >= 0`\n  - `sn == 0 ==> x == 0`\n  - `loop1` and `n1` are non-negative\n- In every iteration of the loop:\n  - `sn >= 1`\n  - `x >= 1`\n  - `sn <= x`\n  - `sn == x*1 || sn == 0`\n- After the loop termination:\n  - `sn >= 1`\n  - `x >= sn`\n  - `sn == x*1 || sn == 0`\n\nExplanation:\n- Before the loop execution:\n  - `sn >= 0` is true because `sn` is initialized to 0.\n  - `x >= 0` is true because `x` is initialized to 0.\n  - `sn == 0 ==> x == 0` is true because if `sn` is 0, then `x` must also be 0 since `x` is incremented in every iteration of the loop.\n  - `loop1` and `n1` are non-negative because they are declared as unsigned integers.\n- In every iteration of the loop:\n  - `sn >= 1` is true because `sn` is incremented by 1 in every iteration of the loop.\n  - `x >= 1` is true because `x` is incremented by 1 in every iteration of the loop.\n  - `sn <= x` is true because `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0.\n- After the loop termination:\n  - `sn >= 1` is true because the loop executes at least once and increments `sn` by 1 in every iteration.\n  - `x >= sn` is true because `x` is incremented by 1 in every iteration of the loop and `sn` is incremented by 1 in every iteration of the loop. Therefore, `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0."
            ],
            "/*@ \n  loop invariant sn >= 0;\n  loop invariant x >= 0;\n  loop invariant sn == x + 0;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\n\n  loop invariant x >= sn;\n  loop invariant sn == x + 1;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\n*/",
            "/*@ \n    loop invariant 0 <= sn <= x;\n    loop invariant x >= 0;\n    loop invariant sn == 0 ==> x == 0;\n    loop invariant (sn != 0 && x != 0) ==> sn == x*1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 1: x >= 0;\n  loop invariant 2: sn == x*1 || sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 10: unexpected token ':'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x*1 || sn == 0;\n    loop invariant sn <= x;\n    loop invariant n1 >= loop1;\n    loop invariant \\forall integer k; 0 <= k < sn ==> (k == x*1 || k == 0);\n    loop invariant sn == x ==> (n1 >= loop1);\n    loop invariant sn == x;\n    loop invariant n1 >= loop1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn == x*1 || sn == 0 is partially proven to be inductive.\nloop invariant sn <= x is partially proven to be inductive.\nloop invariant n1 >= loop1 is preserved but not established.\nloop invariant \\forall integer k; 0 <= k < sn ==> (k == x*1 || k == 0) is established but not preserved.\nloop invariant sn == x ==> (n1 >= loop1) is partially proven to be inductive.\nloop invariant sn == x is partially proven to be inductive.\nAssertion sn == x * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x*1 || sn == 0;\nloop invariant i4: sn <= x;\n\n\n\nloop invariant i8: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The macro `assume(e)` checks if the condition `e` is false. If it is false, the program returns 0. Otherwise, it continues execution.\n- The `extern` keyword is used to declare that the function `unknown_uint` is defined in another file.\n- The variable `sn` is initialized to 0.\n- The variables `loop1` and `n1` are assigned non-deterministic unsigned integer values.\n- The variable `x` is initialized to 0.\n\nLoop condition:\n- The while loop is an infinite loop and will continue executing until it is interrupted or the program terminates.\n\nLoop invariants:\n- Before the loop execution:\n  - `sn >= 0`\n  - `x >= 0`\n  - `sn == 0 ==> x == 0`\n  - `loop1` and `n1` are non-negative\n- In every iteration of the loop:\n  - `sn >= 1`\n  - `x >= 1`\n  - `sn <= x`\n  - `sn == x*1 || sn == 0`\n- After the loop termination:\n  - `sn >= 1`\n  - `x >= sn`\n  - `sn == x*1 || sn == 0`\n\nExplanation:\n- Before the loop execution:\n  - `sn >= 0` is true because `sn` is initialized to 0.\n  - `x >= 0` is true because `x` is initialized to 0.\n  - `sn == 0 ==> x == 0` is true because if `sn` is 0, then `x` must also be 0 since `x` is incremented in every iteration of the loop.\n  - `loop1` and `n1` are non-negative because they are declared as unsigned integers.\n- In every iteration of the loop:\n  - `sn >= 1` is true because `sn` is incremented by 1 in every iteration of the loop.\n  - `x >= 1` is true because `x` is incremented by 1 in every iteration of the loop.\n  - `sn <= x` is true because `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0.\n- After the loop termination:\n  - `sn >= 1` is true because the loop executes at least once and increments `sn` by 1 in every iteration.\n  - `x >= sn` is true because `x` is incremented by 1 in every iteration of the loop and `sn` is incremented by 1 in every iteration of the loop. Therefore, `x` is always greater than or equal to `sn`.\n  - `sn == x*1 || sn == 0` is true because `sn` is incremented by 1 in every iteration of the loop and `x` is incremented by 1 in every iteration of the loop. Therefore, `sn` is always equal to `x` or 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant sn >= 0;\n  loop invariant x >= 0;\n  loop invariant sn == x + 0;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\n\n  loop invariant x >= sn;\n  loop invariant sn == x + 1;\n  loop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant sn == x + 0 is partially proven to be inductive.\nloop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0) is partially proven to be inductive.\nloop invariant x >= sn is partially proven to be inductive.\nloop invariant sn == x + 1 is preserved but not established.\nloop invariant (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn) is partially proven to be inductive.\nAssertion sn == x * 1 || sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x + 0;\nloop invariant i4: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\nloop invariant i5: x >= sn;\n\nloop invariant i7: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= sn <= x;\n    loop invariant x >= 0;\n    loop invariant sn == 0 ==> x == 0;\n    loop invariant (sn != 0 && x != 0) ==> sn == x*1;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= sn <= x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant sn == 0 ==> x == 0 is inductive.\nloop invariant (sn != 0 && x != 0) ==> sn == x*1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 10: unexpected token ':'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: 1: x >= 0;\nloop invariant i2: 2: sn == x*1 || sn == 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: sn == x*1 || sn == 0;\nloop invariant i6: sn <= x;\nloop invariant i7: n1 >= loop1;\nloop invariant i8: \\forall integer k; 0 <= k < sn ==> (k == x*1 || k == 0);\nloop invariant i9: sn == x ==> (n1 >= loop1);\nloop invariant i10: sn == x;\nloop invariant i11: sn == x + 0;\nloop invariant i12: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\nloop invariant i13: x >= sn;\nloop invariant i14: sn == x + 1;\nloop invariant i15: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\nloop invariant i16: 0 <= sn <= x;\nloop invariant i17: sn == 0 ==> x == 0;\nloop invariant i18: (sn != 0 && x != 0) ==> sn == x*1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}\n",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\n\n\nloop invariant i3: sn >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: sn == x*1 || sn == 0;\nloop invariant i6: sn <= x;\n\n\n\nloop invariant i10: sn == x;\nloop invariant i11: sn == x + 0;\nloop invariant i12: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= 0);\nloop invariant i13: x >= sn;\n\nloop invariant i15: (sn == x*1 || sn == 0) ==> (sn >= 0 && x >= sn);\nloop invariant i16: 0 <= sn <= x;\nloop invariant i17: sn == 0 ==> x == 0;\nloop invariant i18: (sn != 0 && x != 0) ==> sn == x*1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n\n  }\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c"
        ],
        "skipped": [],
        "total": 211,
        "success_count": 98,
        "failure_count": 113,
        "success_rate": 0.46445497630331756
    }
}