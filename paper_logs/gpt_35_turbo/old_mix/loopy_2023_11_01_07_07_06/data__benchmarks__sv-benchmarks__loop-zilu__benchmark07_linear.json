{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variables i, n, k contain non-deterministic values.\n- The variable flag contains a non-deterministic Boolean value.\n\nLoop condition:\n- The loop continues as long as i is less than n.\n\nPost-condition:\n- The variable k is greater than n.\n\nLoop invariants:\n- Before the loop execution:\n  - The value of i is at least 0.\n  - The value of n is at least 1 and at most 9.\n  - The value of k is non-negative.\n- In every iteration of the loop:\n  - The value of i is at least 1 and at most n.\n  - If flag is true, then the value of k is at least 4000 * (i-1).\n  - If flag is false, then the value of k is at least 2000 * (i-1).\n- After the loop termination:\n  - The value of i is equal to n.\n  - The value of k is at least 2000 * (n-1) if flag is false, and at least 4000 * (n-1) if flag is true.\n  - The value of k is greater than n.\n\nPutting everything together:\n```\n/*@\n  loop invariant 0 <= i <= n;\n  loop invariant 1 <= n <= 9;\n  loop invariant k >= 0;\n  loop invariant (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1));\n  loop assigns i, k;\n  loop variant n-i;\n*/\nwhile (i<n) {\n  i++;\n  if(flag) k+=4000;\n  else k+=2000;\n}\n/*@\n  assert i == n;\n  assert (flag ==> k >= 4000 * (n-1)) && (!flag ==> k >= 2000 * (n-1));\n  assert k > n;\n*/\n```\n\nNote that we did not need to use any implications in this case since all the variables were deterministic. However, we did add upper and lower bounds on the variables where possible.",
            "First, let's analyze the program and make a note of the pre-conditions and variable assignments:\n```\nint i = unknown_int();\nint n = unknown_int();\nint k = unknown_int();\n_Bool flag = unknown_bool();\ni=0;\nif (!(n>0 && n<10)) return 0;\n```\nThe program initializes variables `i`, `n`, `k`, and `flag` with non-deterministic values. The program also sets `i` to 0 and checks that `n` is between 0 and 10. \n\nNext, let's analyze the loop body and make a note of the loop condition:\n```\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n}\n```\nThe loop body increments `i` and conditionally increments `k` based on the value of `flag`. The loop continues while `i` is less than `n`.\n\nNow, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition. \n\nLet's start by analyzing the loop invariants at the beginning of the loop execution. Since `i` is initialized to 0, we can start with the following loop invariant:\n```\n/*@ loop invariant 0 <= i <= n; */\n```\nThis invariant ensures that `i` is always between 0 and `n` inclusive.\n\nNext, we need to analyze the loop invariants that hold in every iteration of the loop. We can start with the following loop invariant:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant (flag ==> k >= 2000*i) && (!flag ==> k >= 4000*i); */\n```\nThis invariant ensures that `i` is always between 0 and `n` inclusive and that the value of `k` is updated correctly in each iteration based on the value of `flag`. \n\nFinally, we need to analyze the loop invariants that hold after the loop termination. Since the loop adds `2000` or `4000` to `k` in each iteration, we can use this information to derive the following loop invariant:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant (flag ==> k >= 2000*i) && (!flag ==> k >= 4000*i);\n    loop invariant k >= 2000*i; */\n```\nThis invariant ensures that `i` is always between 0 and `n` inclusive, that the value of `k` is updated correctly in each iteration based on the value of `flag`, and that the final value of `k` is greater than or equal to `2000*i`.\n\nFinally, we need to use implication to take care of the conditional nature of the code. We can use the following loop invariant for the guarded assertion:\n```\n/*@ loop invariant 0 <= i <= n;\n    loop invariant (flag ==> k >= 2000*i) && (!flag ==> k >= 4000*i);\n    loop invariant k >= 2000*i;\n    loop invariant !(i == n) ==> (k > n);\n*/\n```\nThis invariant ensures that `i` is always between 0 and `n` inclusive, that the value of `k` is updated correctly in each iteration based on the value of `flag`, that the final value of `k` is greater than or equal to `2000*i`, and that the assertion holds when `i` is not equal to `n`.\n\nFinally, let's add conjunctions that bound the maximum and minimum values that variables can take:\n```\nint i = unknown_int();\nint n = unknown_int();\nint k = unknown_int();\n_Bool flag = unknown_bool();\nassume(n>0 && n<10);\ni=0;\n/*@ loop invariant 0 <= i <= n;\n    loop invariant (flag ==> k >= 2000*i) && (!flag ==> k >= 4000*i);\n    loop invariant k >= 2000*i;\n    loop invariant !(i == n) ==> (k > n);\n    loop assigns i,k;\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n}\nassert(k>n);\n```\nHere, we have added an assumption for `n`, which bounds it between 0 and 10. We have also added a loop assigns clause to indicate that `i` and `k` are modified inside the loop. \n\nThis completes our analysis of the loop invariants for the given program.",
            "Let's analyze the program step by step:\n\n1. Pre-conditions:\n```\nif (!(n>0 && n<10)) return 0;\n```\nHere, we assume that `n` is a positive integer less than 10.\n\n2. Variable assignments:\n```\nint i = unknown_int();\nint n = unknown_int();\nint k = unknown_int();\n_Bool flag = unknown_bool();\n```\nHere, `i`, `n`, `k` are initialized with non-deterministic integer values, and `flag` is initialized with a non-deterministic boolean value.\n\n3. Loop condition:\n```\nwhile (i<n) {\n```\nHere, the loop executes as long as `i` is less than `n`.\n\n4. Loop body:\n```\ni++;\nif(flag) k+=4000;\nelse k+=2000;\n```\nHere, `i` is incremented by 1, and depending on the value of `flag`, `k` is incremented by either 4000 or 2000.\n\n5. Post-condition:\n```\n//@ assert(k>n);\n```\nHere, we want to verify that `k` is greater than `n` after the loop execution.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n```\n//@ assert(n > 0 && n < 10);\n```\nThis is the pre-condition that ensures that `n` is a positive integer less than 10.\n\n- In every iteration of the loop:\n```\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n```\nHere, we have the following loop invariants:\n   - `i` is non-negative.\n   - `k` is greater than or equal to `n` at the beginning of the loop iteration.\n   - `k` is less than or equal to `n + i * 4000` after the execution of the `if` block.\n   - `k` is greater than or equal to `n + i * 2000` after the execution of the `else` block.\n\n   We can derive these invariants using the following reasoning:\n   - `i` is incremented by 1 in each iteration, so it is non-negative.\n   - `k` is initialized with a non-deterministic value, but we know that it is greater than or equal to `n` initially, since `i=0` at the beginning.\n   - In the `if` block, if `flag` is true, `k` is incremented by 4000, so its maximum value is `n + i * 4000`.\n   - In the `else` block, if `flag` is false, `k` is incremented by 2000, so its minimum value is `n + i * 2000`.\n\n- After the loop termination:\n```\n//@ assert(i >= n);\n```\nHere, we want to assert that `i` is greater than or equal to `n` after the loop execution. This is necessary to ensure that the loop condition is false at the end of the loop, and the loop terminates.\n\nPutting all the loop invariants together:\n```\n//@ assert(n > 0 && n < 10);\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n//@ assert(i >= n);\n```\n\nNote that we do not need to use any implication in this case, since the loop body does not modify the loop condition or any other loop variable.",
            "First, let's analyze the program and note down the pre-conditions and variable assignments:\n\nPre-conditions:\n- `n` is greater than 0 and less than 10.\n\nVariable Assignments:\n- `i` is assigned an unknown integer value.\n- `n` is assigned an unknown integer value.\n- `k` is assigned an unknown integer value.\n- `flag` is assigned an unknown Boolean value.\n\nNow let's look at the while loop and note down the loop condition:\n- `i` is less than `n`\n\nTo find the necessary loop invariants, we need to ensure that the loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution:\n- `k` is either equal to or greater than `0`.\n\nIn every iteration of the loop:\n- `i` is greater than or equal to `1`.\n- `i` is less than or equal to `n`.\n- `k` is either equal to `2000*i` or `4000*i`, depending on the value of `flag`.\n\nAfter the loop termination:\n- `i` is greater than or equal to `n`.\n- `k` is either equal to `2000*n` or `4000*n`, depending on the value of `flag`.\n- `k` is greater than `n`.\n\nUsing the above loop invariants, we can prove the post-condition `k>n`.\n\nSo, the loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant k >= 0;\n    loop invariant i >= 1;\n    loop invariant i <= n;\n    loop invariant (flag ==> k == 4000*i) && (!flag ==> k == 2000*i);\n    loop invariant (!flag ==> k >= 2000*i);\n    loop invariant flag ==> k > n;\n    loop invariant !flag ==> k > n;\n*/\n```",
            "First, let's analyze the program:\n\nPre-conditions/Variable Assignments:\n- Variables i, n and k are initialized with non-deterministic values.\n- Variable flag is initialized with a non-deterministic boolean value.\n\nLoop Condition:\n- The loop runs while i < n.\n\nPost-condition:\n- k > n.\n\nLoop Invariants:\n- i >= 0 && i <= n\n- k >= 2000*i && k <= 4000*i + 2000*(n-i)\n- flag == 0 || flag == 1\n\nExplanation:\n- Since i is initialized to 0 and incremented by 1 in each iteration, i >= 0 is always true. Also, i <= n is true because the loop runs while i < n. Therefore, the first invariant i >= 0 && i <= n is true before and during the loop execution.\n- k is initialized with a non-deterministic value, and it is updated in each iteration of the loop. We can derive the maximum and minimum values of k using the updated value of i and the non-deterministic flag value. If flag is true, k is incremented by 4000, otherwise it is incremented by 2000. So, the minimum value of k is 2000*i, and the maximum value of k is 4000*i + 2000*(n-i). Therefore, the second invariant k >= 2000*i && k <= 4000*i + 2000*(n-i) is true before and during the loop execution.\n- The value of flag is non-deterministic, and it is not updated inside the loop. Therefore, flag == 0 || flag == 1 is true before and during the loop execution.\n- Finally, using the implication (i >= n) ==> (k > n), we can show that the post-condition k > n is true after the loop termination.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant k >= 2000*i && k <= 4000*i + 2000*(n-i);\n    loop invariant flag == 0 || flag == 1;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\n  loop invariant 0 <= i <= n;\n  loop invariant 1 <= n <= 9;\n  loop invariant k >= 0;\n  loop invariant (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1));\n  loop assigns i, k;\n  loop variant n-i;\n*/\nwhile (i<n) {\n  i++;\n  if(flag) k+=4000;\n  else k+=2000;\n}\n/*@\n  assert i == n;\n  assert (flag ==> k >= 4000 * (n-1)) && (!flag ==> k >= 2000 * (n-1));\n  assert k > n;\n*/",
            "/*@ loop invariant 0 <= i <= n; */",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Let's analyze the program step by step:\n\n1. Pre-conditions:\n```\nif (!(n>0 && n<10)) return 0;\n```\nHere, we assume that `n` is a positive integer less than 10.\n\n2. Variable assignments:\n```\nint i = unknown_int();\nint n = unknown_int();\nint k = unknown_int();\n_Bool flag = unknown_bool();\n```\nHere, `i`, `n`, `k` are initialized with non-deterministic integer values, and `flag` is initialized with a non-deterministic boolean value.\n\n3. Loop condition:\n```\nwhile (i<n) {\n```\nHere, the loop executes as long as `i` is less than `n`.\n\n4. Loop body:\n```\ni++;\nif(flag) k+=4000;\nelse k+=2000;\n```\nHere, `i` is incremented by 1, and depending on the value of `flag`, `k` is incremented by either 4000 or 2000.\n\n5. Post-condition:\n```\n//@ assert(k>n);\n```\nHere, we want to verify that `k` is greater than `n` after the loop execution.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n```\n//@ assert(n > 0 && n < 10);\n```\nThis is the pre-condition that ensures that `n` is a positive integer less than 10.\n\n- In every iteration of the loop:\n```\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n```\nHere, we have the following loop invariants:\n   - `i` is non-negative.\n   - `k` is greater than or equal to `n` at the beginning of the loop iteration.\n   - `k` is less than or equal to `n + i * 4000` after the execution of the `if` block.\n   - `k` is greater than or equal to `n + i * 2000` after the execution of the `else` block.\n\n   We can derive these invariants using the following reasoning:\n   - `i` is incremented by 1 in each iteration, so it is non-negative.\n   - `k` is initialized with a non-deterministic value, but we know that it is greater than or equal to `n` initially, since `i=0` at the beginning.\n   - In the `if` block, if `flag` is true, `k` is incremented by 4000, so its maximum value is `n + i * 4000`.\n   - In the `else` block, if `flag` is false, `k` is incremented by 2000, so its minimum value is `n + i * 2000`.\n\n- After the loop termination:\n```\n//@ assert(i >= n);\n```\nHere, we want to assert that `i` is greater than or equal to `n` after the loop execution. This is necessary to ensure that the loop condition is false at the end of the loop, and the loop terminates.\n\nPutting all the loop invariants together:\n```\n//@ assert(n > 0 && n < 10);\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n//@ assert(i >= n);\n```\n\nNote that we do not need to use any implication in this case, since the loop body does not modify the loop condition or any other loop variable."
            ],
            "/*@ \n    loop invariant k >= 0;\n    loop invariant i >= 1;\n    loop invariant i <= n;\n    loop invariant (flag ==> k == 4000*i) && (!flag ==> k == 2000*i);\n    loop invariant (!flag ==> k >= 2000*i);\n    loop invariant flag ==> k > n;\n    loop invariant !flag ==> k > n;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant k >= 2000*i && k <= 4000*i + 2000*(n-i);\n    loop invariant flag == 0 || flag == 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n  loop invariant 0 <= i <= n;\n  loop invariant 1 <= n <= 9;\n  loop invariant k >= 0;\n  loop invariant (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1));\n  loop assigns i, k;\n  loop variant n-i;\n*/\nwhile (i<n) {\n  i++;\n  if(flag) k+=4000;\n  else k+=2000;\n}\n/*@\n  assert i == n;\n  assert (flag ==> k >= 4000 * (n-1)) && (!flag ==> k >= 2000 * (n-1));\n  assert k > n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 1 <= n <= 9 is partially proven to be inductive.\nloop invariant k >= 0 is preserved but not established.\nloop invariant (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1)) is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 1 <= n <= 9;\n\n\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant 0 <= i <= n; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Let's analyze the program step by step:\n\n1. Pre-conditions:\n```\nif (!(n>0 && n<10)) return 0;\n```\nHere, we assume that `n` is a positive integer less than 10.\n\n2. Variable assignments:\n```\nint i = unknown_int();\nint n = unknown_int();\nint k = unknown_int();\n_Bool flag = unknown_bool();\n```\nHere, `i`, `n`, `k` are initialized with non-deterministic integer values, and `flag` is initialized with a non-deterministic boolean value.\n\n3. Loop condition:\n```\nwhile (i<n) {\n```\nHere, the loop executes as long as `i` is less than `n`.\n\n4. Loop body:\n```\ni++;\nif(flag) k+=4000;\nelse k+=2000;\n```\nHere, `i` is incremented by 1, and depending on the value of `flag`, `k` is incremented by either 4000 or 2000.\n\n5. Post-condition:\n```\n//@ assert(k>n);\n```\nHere, we want to verify that `k` is greater than `n` after the loop execution.\n\nNow, let's find the necessary loop invariants:\n\n- Before the loop execution:\n```\n//@ assert(n > 0 && n < 10);\n```\nThis is the pre-condition that ensures that `n` is a positive integer less than 10.\n\n- In every iteration of the loop:\n```\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n```\nHere, we have the following loop invariants:\n   - `i` is non-negative.\n   - `k` is greater than or equal to `n` at the beginning of the loop iteration.\n   - `k` is less than or equal to `n + i * 4000` after the execution of the `if` block.\n   - `k` is greater than or equal to `n + i * 2000` after the execution of the `else` block.\n\n   We can derive these invariants using the following reasoning:\n   - `i` is incremented by 1 in each iteration, so it is non-negative.\n   - `k` is initialized with a non-deterministic value, but we know that it is greater than or equal to `n` initially, since `i=0` at the beginning.\n   - In the `if` block, if `flag` is true, `k` is incremented by 4000, so its maximum value is `n + i * 4000`.\n   - In the `else` block, if `flag` is false, `k` is incremented by 2000, so its minimum value is `n + i * 2000`.\n\n- After the loop termination:\n```\n//@ assert(i >= n);\n```\nHere, we want to assert that `i` is greater than or equal to `n` after the loop execution. This is necessary to ensure that the loop condition is false at the end of the loop, and the loop terminates.\n\nPutting all the loop invariants together:\n```\n//@ assert(n > 0 && n < 10);\n//@ assert(i >= 0);\n//@ assert(k >= n);\n//@ assert(k <= n + i * 4000);\n//@ assert(k >= n + i * 2000);\n//@ assert(i >= n);\n```\n\nNote that we do not need to use any implication in this case, since the loop body does not modify the loop condition or any other loop variable.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant k >= 0;\n    loop invariant i >= 1;\n    loop invariant i <= n;\n    loop invariant (flag ==> k == 4000*i) && (!flag ==> k == 2000*i);\n    loop invariant (!flag ==> k >= 2000*i);\n    loop invariant flag ==> k > n;\n    loop invariant !flag ==> k > n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k >= 0 is preserved but not established.\nloop invariant i >= 1 is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant (flag ==> k == 4000*i) && (!flag ==> k == 2000*i) is partially proven to be inductive.\nloop invariant (!flag ==> k >= 2000*i) is partially proven to be inductive.\nloop invariant flag ==> k > n is partially proven to be inductive.\nloop invariant !flag ==> k > n is partially proven to be inductive.\nAssertion k > n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\n\n\nloop invariant i3: i <= n;\n\n\n\n\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= n;\n    loop invariant k >= 2000*i && k <= 4000*i + 2000*(n-i);\n    loop invariant flag == 0 || flag == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant k >= 2000*i && k <= 4000*i + 2000*(n-i) is neither established nor preserved.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nAssertion k > n: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\nloop invariant i1: i >= 0 && i <= n;\n\nloop invariant i3: flag == 0 || flag == 1;\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant 1 <= n <= 9 is partially proven to be inductive.\nloop invariant k >= 0 is preserved but not established.\nloop invariant (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1)) is partially proven to be inductive.\nloop invariant i >= 1 is preserved but not established.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant (flag ==> k == 4000*i) && (!flag ==> k == 2000*i) is partially proven to be inductive.\nloop invariant (!flag ==> k >= 2000*i) is partially proven to be inductive.\nloop invariant flag ==> k > n is partially proven to be inductive.\nloop invariant !flag ==> k > n is partially proven to be inductive.\nloop invariant i >= 0 && i <= n is partially proven to be inductive.\nloop invariant k >= 2000*i && k <= 4000*i + 2000*(n-i) is partially proven to be inductive.\nloop invariant flag == 0 || flag == 1 is partially proven to be inductive.\nAssertion k > n: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 1 <= n <= 9;\nloop invariant i3: k >= 0;\nloop invariant i4: (flag ==> k >= 4000 * (i-1)) && (!flag ==> k >= 2000 * (i-1));\nloop invariant i5: i >= 1;\nloop invariant i6: i <= n;\nloop invariant i7: (flag ==> k == 4000*i) && (!flag ==> k == 2000*i);\nloop invariant i8: (!flag ==> k >= 2000*i);\nloop invariant i9: flag ==> k > n;\nloop invariant i10: !flag ==> k > n;\nloop invariant i11: i >= 0 && i <= n;\nloop invariant i12: k >= 2000*i && k <= 4000*i + 2000*(n-i);\nloop invariant i13: flag == 0 || flag == 1;\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 1 <= n <= 9;\n\n\n\nloop invariant i6: i <= n;\n\n\n\n\nloop invariant i11: i >= 0 && i <= n;\n\nloop invariant i13: flag == 0 || flag == 1;\n*/\nwhile (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c"
        ],
        "skipped": [],
        "total": 314,
        "success_count": 151,
        "failure_count": 163,
        "success_rate": 0.48089171974522293
    }
}