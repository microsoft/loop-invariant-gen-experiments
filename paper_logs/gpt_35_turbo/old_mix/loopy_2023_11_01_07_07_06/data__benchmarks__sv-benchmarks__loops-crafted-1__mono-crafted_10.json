{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x is initialized to 0.\n- y is initialized to 10,000,000.\n- z is initialized to 5,000,000.\n\nLoop condition:\n- x is less than y.\n\nPost-condition:\n- z is equal to x.\n\nLoop invariants:\n- Before the loop execution:\n    - z is equal to 5,000,000.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- In every iteration of the loop:\n    - z is equal to 5,000,000 if x is less than 5,000,000, otherwise z is equal to x - 5,000,000 + 1.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- After the loop termination:\n    - z is equal to x.",
            "Pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is initialized to 10000000.\n- z is initialized to 5000000.\n\nLoop condition:\n- The loop continues as long as x is less than y.\n\nLoop invariants:\n- Before the loop execution:\n    - x is at most y.\n    - z is at least 5000000.\n- In every iteration of the loop:\n    - x is less than or equal to y.\n    - z is less than or equal to x.\n- After the loop termination:\n    - z is equal to x.\n\nExplanation:\n- Before the loop execution:\n    - Since x is initialized to 0 and y is initialized to 10000000, x is at most y.\n    - Since z is initialized to 5000000, z is at least 5000000.\n- In every iteration of the loop:\n    - The loop condition states that x is less than y, so x is less than or equal to y.\n    - If x is greater than or equal to 5000000, z is incremented by 1. Therefore, z is less than or equal to x.\n- After the loop termination:\n    - The loop terminates when x is equal to y. Since z is incremented by 1 whenever x is greater than or equal to 5000000, z is equal to x. Therefore, z is equal to x.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant z >= 5000000;\n    loop invariant x <= y;\n    loop invariant z <= x;\n    loop invariant z == x;\n*/\n```",
            "We first note the pre-conditions and variable assignments:\n```\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z = 5000000;\n```\nNote that `x`, `y`, and `z` are all non-negative integers. We can use this to bound the possible values they can take.\n\nNext, we analyze the loop body and make a note of the loop condition `x<y`. \n\nTo find the loop invariants, we can start from the post-condition: `z==x`.\n\nWe want to find loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition.\n\n(i) Before the loop, we have `x == 0` and `z == 5000000`. Therefore, the following loop invariants are true before the loop execution:\n```\n/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 5000000 && z <= 10000000;\n*/\n```\n(ii) In every iteration of the loop, `x` is incremented by 1. Therefore, `x <= y` is a loop invariant. Additionally, we note that if `x >= 5000000`, then `z` is incremented by 1. Therefore, we can add the following invariant:\n```\n/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 5000000 && z <= 10000000;\n    loop invariant x <= y;\n    loop invariant (x < 5000000 || z == x) && (x >= 5000000 ==> z == x + 1);\n*/\n```\n(iii) After the loop termination, we have `x >= y`. Therefore, we can add the following loop invariant:\n```\n/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 5000000 && z <= 10000000;\n    loop invariant x >= y;\n    loop invariant (x < 5000000 || z == x) && (x >= 5000000 ==> z == x + 1);\n    loop invariant z == x;\n*/\n``` \nNote that we used an implication to take care of the conditional nature of the code and added conjunctions to bound the maximum and minimum values that variables can take. Additionally, we added a conjunction to relate the values of `z` and `x` when `x` is greater than or equal to 5000000.",
            "Pre-conditions:\n- The variables `x`, `y` and `z` are initialized to `0`, `10000000` and `5000000` respectively.\n\nLoop condition:\n- `x<y`\n\nLoop invariants:\n- `0 <= x <= 10000000`\n- `0 <= y <= 10000000`\n- `5000000 <= z <= 10000000`\n- `z = 5000000 + \\floor((x-5000000)/y)`\n- `x <= y`\n- `z >= \\ceil(x/y)`\n- `z == x` (guarded by `x >= 5000000`)\n\nExplanation:\n- The first three invariants bound the maximum and minimum values of the variables `x`, `y` and `z`.\n- The fourth invariant is derived from the fact that `z` starts from `5000000` and increments by `1` every time `x` reaches `5000000` and then starts counting again from `5000000`.\n- The fifth invariant is simply the loop condition `x<y`.\n- The sixth invariant is derived from the fact that `z` increments by at least `1` for every increment of `y` and `x`. This means that `z` is always greater than or equal to the ratio of `x` and `y`, which is equivalent to `z >= \\ceil(x/y)`.\n- The seventh invariant is the post-condition of the program. Since `z` is incremented only when `x` is greater than or equal to `5000000`, we need to guard the assertion by this condition. The invariant states that if `x` is greater than or equal to `5000000`, then `z` must be equal to `x`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant 0 <= y <= 10000000;\n    loop invariant 5000000 <= z <= 10000000;\n    loop invariant z == 5000000 + \\floor((x-5000000)/y);\n    loop invariant x <= y;\n    loop invariant z >= \\ceil(x/y);\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z == x);\n*/\n```",
            "Pre-conditions:\n- `x` is initialized to 0.\n- `y` is initialized to 10000000.\n- `z` is initialized to 5000000.\n\nLoop condition: `x<y`\n\nLoop invariants:\n- `0 <= x <= y`\n- `5000000 <= z <= y+1`\n- `(x<5000000) ==> (z==5000000)`\n- `(x>=5000000) ==> (z==x+1)`\n\nExplanation:\n- The first loop invariant is true before the loop execution because `x` is initialized to 0 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `x` is incremented by 1 in each iteration and the loop condition is `x<y`. It is also true after the loop termination because the loop terminates when `x` becomes equal to or greater than `y`, so we have `x>=y` and `0<=x<=y`, which implies `x==y`.\n- The second loop invariant is true before the loop execution because `z` is initialized to 5000000 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `z` is incremented by 1 in each iteration when `x>=5000000`, so `z` can take values from 5000000 to `y+1`. It is also true after the loop termination because `z` can only be incremented when `x>=5000000`, so we have `z==x+1` when the loop terminates, which implies `z==x` because `x>=y`.\n- The third loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x<5000000` because `z` is not incremented in those iterations, so `z` remains equal to 5000000. It is also true after the loop termination because if `x<5000000`, then `z` must be equal to 5000000 because it was not incremented in those iterations, and if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`.\n- The fourth loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x>=5000000` because `z` is incremented by 1 in those iterations. It is also true after the loop termination because if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- x is initialized to 0.\n- y is initialized to 10,000,000.\n- z is initialized to 5,000,000.\n\nLoop condition:\n- x is less than y.\n\nPost-condition:\n- z is equal to x.\n\nLoop invariants:\n- Before the loop execution:\n    - z is equal to 5,000,000.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- In every iteration of the loop:\n    - z is equal to 5,000,000 if x is less than 5,000,000, otherwise z is equal to x - 5,000,000 + 1.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- After the loop termination:\n    - z is equal to x."
            ],
            "/*@ \n    loop invariant x <= y;\n    loop invariant z >= 5000000;\n    loop invariant x <= y;\n    loop invariant z <= x;\n    loop invariant z == x;\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 5000000 && z <= 10000000;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant 0 <= y <= 10000000;\n    loop invariant 5000000 <= z <= 10000000;\n    loop invariant z == 5000000 + \\floor((x-5000000)/y);\n    loop invariant x <= y;\n    loop invariant z >= \\ceil(x/y);\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z == x);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x` is initialized to 0.\n- `y` is initialized to 10000000.\n- `z` is initialized to 5000000.\n\nLoop condition: `x<y`\n\nLoop invariants:\n- `0 <= x <= y`\n- `5000000 <= z <= y+1`\n- `(x<5000000) ==> (z==5000000)`\n- `(x>=5000000) ==> (z==x+1)`\n\nExplanation:\n- The first loop invariant is true before the loop execution because `x` is initialized to 0 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `x` is incremented by 1 in each iteration and the loop condition is `x<y`. It is also true after the loop termination because the loop terminates when `x` becomes equal to or greater than `y`, so we have `x>=y` and `0<=x<=y`, which implies `x==y`.\n- The second loop invariant is true before the loop execution because `z` is initialized to 5000000 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `z` is incremented by 1 in each iteration when `x>=5000000`, so `z` can take values from 5000000 to `y+1`. It is also true after the loop termination because `z` can only be incremented when `x>=5000000`, so we have `z==x+1` when the loop terminates, which implies `z==x` because `x>=y`.\n- The third loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x<5000000` because `z` is not incremented in those iterations, so `z` remains equal to 5000000. It is also true after the loop termination because if `x<5000000`, then `z` must be equal to 5000000 because it was not incremented in those iterations, and if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`.\n- The fourth loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x>=5000000` because `z` is incremented by 1 in those iterations. It is also true after the loop termination because if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- x is initialized to 0.\n- y is initialized to 10,000,000.\n- z is initialized to 5,000,000.\n\nLoop condition:\n- x is less than y.\n\nPost-condition:\n- z is equal to x.\n\nLoop invariants:\n- Before the loop execution:\n    - z is equal to 5,000,000.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- In every iteration of the loop:\n    - z is equal to 5,000,000 if x is less than 5,000,000, otherwise z is equal to x - 5,000,000 + 1.\n    - x is greater than or equal to 0.\n    - x is less than or equal to y.\n    - y is greater than or equal to 0.\n    - y is less than or equal to 10,000,000.\n- After the loop termination:\n    - z is equal to x.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x <= y;\n    loop invariant z >= 5000000;\n    loop invariant x <= y;\n    loop invariant z <= x;\n    loop invariant z == x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= y is partially proven to be inductive.\nloop invariant z >= 5000000 is partially proven to be inductive.\nloop invariant z <= x is preserved but not established.\nloop invariant z == x is partially proven to be inductive.\nAssertion z == x: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x <= y;\n\n\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 10000000;\n    loop invariant y >= 0 && y <= 10000000;\n    loop invariant z >= 5000000 && z <= 10000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 10000000 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 10000000 is partially proven to be inductive.\nloop invariant z >= 5000000 && z <= 10000000 is established but not preserved.\nAssertion z == x: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x >= 0 && x <= 10000000;\nloop invariant i2: y >= 0 && y <= 10000000;\n\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 10000000;\n    loop invariant 0 <= y <= 10000000;\n    loop invariant 5000000 <= z <= 10000000;\n    loop invariant z == 5000000 + \\floor((x-5000000)/y);\n    loop invariant x <= y;\n    loop invariant z >= \\ceil(x/y);\n    loop invariant (x < 5000000) ==> (z == 5000000);\n    loop invariant (x >= 5000000) ==> (z == x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 10000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 10000000 is partially proven to be inductive.\nloop invariant 5000000 <= z <= 10000000 is partially proven to be inductive.\nloop invariant z == 5000000 + \\floor((x-5000000)/y) is established but not preserved.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant z >= \\ceil(x/y) is partially proven to be inductive.\nloop invariant (x < 5000000) ==> (z == 5000000) is partially proven to be inductive.\nloop invariant (x >= 5000000) ==> (z == x) is partially proven to be inductive.\nAssertion z == x: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: 0 <= x <= 10000000;\nloop invariant i2: 0 <= y <= 10000000;\nloop invariant i3: 5000000 <= z <= 10000000;\n\nloop invariant i5: x <= y;\nloop invariant i6: z >= \\ceil(x/y);\nloop invariant i7: (x < 5000000) ==> (z == 5000000);\nloop invariant i8: (x >= 5000000) ==> (z == x);\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x` is initialized to 0.\n- `y` is initialized to 10000000.\n- `z` is initialized to 5000000.\n\nLoop condition: `x<y`\n\nLoop invariants:\n- `0 <= x <= y`\n- `5000000 <= z <= y+1`\n- `(x<5000000) ==> (z==5000000)`\n- `(x>=5000000) ==> (z==x+1)`\n\nExplanation:\n- The first loop invariant is true before the loop execution because `x` is initialized to 0 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `x` is incremented by 1 in each iteration and the loop condition is `x<y`. It is also true after the loop termination because the loop terminates when `x` becomes equal to or greater than `y`, so we have `x>=y` and `0<=x<=y`, which implies `x==y`.\n- The second loop invariant is true before the loop execution because `z` is initialized to 5000000 and `y` is initialized to 10000000. It is also true in every iteration of the loop because `z` is incremented by 1 in each iteration when `x>=5000000`, so `z` can take values from 5000000 to `y+1`. It is also true after the loop termination because `z` can only be incremented when `x>=5000000`, so we have `z==x+1` when the loop terminates, which implies `z==x` because `x>=y`.\n- The third loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x<5000000` because `z` is not incremented in those iterations, so `z` remains equal to 5000000. It is also true after the loop termination because if `x<5000000`, then `z` must be equal to 5000000 because it was not incremented in those iterations, and if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`.\n- The fourth loop invariant is true before the loop execution because `x` is initialized to 0 and `z` is initialized to 5000000. It is also true in every iteration of the loop when `x>=5000000` because `z` is incremented by 1 in those iterations. It is also true after the loop termination because if `x>=5000000`, then `z` must be equal to `x+1` because it was incremented in every iteration when `x>=5000000`.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x <= y is partially proven to be inductive.\nloop invariant z >= 5000000 is partially proven to be inductive.\nloop invariant z <= x is preserved but not established.\nloop invariant z == x is partially proven to be inductive.\nloop invariant x >= 0 && x <= 10000000 is partially proven to be inductive.\nloop invariant y >= 0 && y <= 10000000 is partially proven to be inductive.\nloop invariant z >= 5000000 && z <= 10000000 is partially proven to be inductive.\nloop invariant 0 <= x <= 10000000 is partially proven to be inductive.\nloop invariant 0 <= y <= 10000000 is partially proven to be inductive.\nloop invariant 5000000 <= z <= 10000000 is partially proven to be inductive.\nloop invariant z == 5000000 + \\floor((x-5000000)/y) is partially proven to be inductive.\nloop invariant z >= \\ceil(x/y) is partially proven to be inductive.\nloop invariant (x < 5000000) ==> (z == 5000000) is partially proven to be inductive.\nloop invariant (x >= 5000000) ==> (z == x) is partially proven to be inductive.\nAssertion z == x: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x <= y;\nloop invariant i2: z >= 5000000;\nloop invariant i3: z <= x;\nloop invariant i4: z == x;\nloop invariant i5: x >= 0 && x <= 10000000;\nloop invariant i6: y >= 0 && y <= 10000000;\nloop invariant i7: z >= 5000000 && z <= 10000000;\nloop invariant i8: 0 <= x <= 10000000;\nloop invariant i9: 0 <= y <= 10000000;\nloop invariant i10: 5000000 <= z <= 10000000;\nloop invariant i11: z == 5000000 + \\floor((x-5000000)/y);\nloop invariant i12: z >= \\ceil(x/y);\nloop invariant i13: (x < 5000000) ==> (z == 5000000);\nloop invariant i14: (x >= 5000000) ==> (z == x);\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\t/*@\nloop invariant i1: x <= y;\nloop invariant i2: z >= 5000000;\n\n\nloop invariant i5: x >= 0 && x <= 10000000;\nloop invariant i6: y >= 0 && y <= 10000000;\nloop invariant i7: z >= 5000000 && z <= 10000000;\nloop invariant i8: 0 <= x <= 10000000;\nloop invariant i9: 0 <= y <= 10000000;\nloop invariant i10: 5000000 <= z <= 10000000;\n\nloop invariant i12: z >= \\ceil(x/y);\nloop invariant i13: (x < 5000000) ==> (z == 5000000);\nloop invariant i14: (x >= 5000000) ==> (z == x);\n*/\nwhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c"
        ],
        "skipped": [],
        "total": 385,
        "success_count": 200,
        "failure_count": 185,
        "success_rate": 0.5194805194805194
    }
}