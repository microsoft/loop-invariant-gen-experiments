{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or Variable Assignments:\n- The program takes an integer input `N` through the command line argument.\n- Two integer variables `i` and `x` are declared and initialized with `i=0` and `x=1`.\n\nLoop Condition:\n- The loop continues as long as the value of `i` is less than `N`.\n\nLoop Invariants:\n- `0 <= i <= N` (Bounds of `i`)\n- `x == 1 || x == 2` (Possible values of `x`)\n- `i <= N` (follows from loop condition and `0 <= i <= N`)\n- `x <= 2` (follows from `x == 1 || x == 2`)\n- `i < N ==> (x == 2) ==> (x <= 2)` (When `i < N` and `x == 2`, then `x` must be less than or equal to 2. This uses implication to take care of the conditional nature of the code.)\n- `!(i < N) ==> (x <= 2)` (When `i >= N`, then `x` must be less than or equal to 2. This uses implication to make the invariant trivially true at the end of the loop.)\n- `!(x > 2)` (This is the post-condition that we want to prove. This is guarded by the loop guard condition and can be added using implication.)\n\nPutting all the loop invariants together:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant i <= N;\n    loop invariant x <= 2;\n    loop invariant i < N ==> (x == 2) ==> (x <= 2);\n    loop invariant !(i < N) ==> (x <= 2);\n    loop invariant !(x > 2) ==> !(i < N);\n*/\n```",
            "Pre-conditions:\n- The function `errorFn` does not affect program behavior.\n- The input parameter `N` is an integer.\n\nVariable assignments:\n- `x` is assigned the value 1.\n- `i` is assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as `i<N`.\n\nLoop Invariants:\n- Before the loop execution, `x` is either 1 or 2, and `i` is greater than or equal to 0.\n```\n/*@ loop invariant (x == 1 || x == 2);\n    loop invariant i >= 0;\n*/\n```\n- In every iteration of the loop, `x` is either 1 or 2, and `i` is less than `N`.\n```\n/*@ loop invariant (x == 1 || x == 2);\n    loop invariant i < N;\n*/\n```\n- After the loop termination, `i` is greater than or equal to `N`, and `x` is either 1 or 2. The assertion that `x` is not greater than 2 is implied by the loop invariants, because if `x` were greater than 2, it would violate the first loop invariant.\n```\n/*@ loop invariant (x == 1 || x == 2);\n    loop invariant i >= N;\n    loop invariant (x <= 2) ==> !( x > 2 );\n*/\n```",
            "Pre-conditions:\n- The program takes an integer argument N as input.\n\nVariable Assignments:\n- The variable x is assigned the value 1.\n- The variable i is assigned the value 0.\n\nLoop Condition:\n- The loop continues as long as i<N.\n\nLoop Invariants:\n- Before the loop execution: \n    - None required.\n\n- In every iteration of the loop:\n    - i is greater than or equal to 0.\n    - i is less than or equal to N.\n    - x is either 1 or 2.\n    - If i is even, then x is 2.\n    - If i is odd, then x is 1.\n\n- After the loop termination:\n    - x is either 1 or 2.\n    - x is not greater than 2.\n    - i is greater than or equal to N.\n\nPutting all the loop invariants together:\n\n```\n/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (i % 2 == 0) ==> (x == 2);\nloop invariant (i % 2 == 1) ==> (x == 1);\nloop variant N-i;\n*/\n\nwhile (i<N) {\n  if (x==1) {\n    x=2;\n  } else {\n    x=1;\n  }\n  i++;\n}\n\n{;\n//@ assert x <= 2;\n}\n```\n\nNote that the loop variant is also required to ensure that the loop eventually terminates. It is the expression `N-i`, which is strictly decreasing in each iteration of the loop and is a natural number.",
            "We start by analyzing the program and making notes:\n\n**Pre-conditions/Variable Assignments:** \n- The program takes an integer input N.\n- Variables i and x are initialized to 0 and 1 respectively.\n\n**Loop Condition:**\n- The loop executes while i < N.\n\nNext, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply the post-condition:\n```\n//@ assert(!( x>2 ));\n```\n\n**Before Loop Execution:**\n- x = 1\n- i = 0\n- N >= 0 (pre-condition)\n- N <= INT_MAX (N is an integer)\n\n**In Every Iteration:**\n- 0 <= i <= N\n- x = 1 or x = 2 (as x is assigned either 1 or 2 in the loop)\n\n**After Loop Termination:**\n- i = N\n- x = 1 or x = 2 (as x is assigned either 1 or 2 in the loop)\n- x <= 2 (since x can only be assigned 1 or 2 in the loop)\n\nUsing these observations, we can write the loop invariants as follows:\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant x <= 2;\n*/\n```\nNote that we do not need to use any implication since there is no conditional statement inside the loop. Also, we do not need to bound the values of i and x since they are already bounded by the loop conditions and the assignments inside the loop. Finally, we do not need to use any non-deterministic variables in the loop invariants since all variables are initialized before the loop and assigned deterministic values inside the loop.",
            "Pre-conditions:\n- The program takes an integer input N.\n\nVariable Assignments:\n- The variable x is assigned the value 1.\n- The variable i is assigned the value 0.\n\nLoop Invariants:\n- Before the loop execution: x is either 1 or 2.\n```\n//@ assert (x==1 || x==2);\n```\n- In every iteration of the loop: x is either 1 or 2.\n```\n//@ assert (x==1 || x==2);\n```\n- After the loop termination: x cannot be greater than 2.\n```\n//@ assert (x<=2);\n```\nCombining the loop invariants, we get:\n```\n/*@ \n  loop invariant x==1 || x==2;\n  loop invariant x<=2;\n*/\n``` \nThe assertion is guarded by no condition, so we don't need to use implication for the assertion. Also, there are no non-deterministic variables in the loop, so we don't need to use implication for any variable."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant i <= N;\n    loop invariant x <= 2;\n    loop invariant i < N ==> (x == 2) ==> (x <= 2);\n    loop invariant !(i < N) ==> (x <= 2);\n    loop invariant !(x > 2) ==> !(i < N);\n*/",
            "/*@ loop invariant (x == 1 || x == 2);\n    loop invariant i >= 0;\n*/",
            "/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (i % 2 == 0) ==> (x == 2);\nloop invariant (i % 2 == 1) ==> (x == 1);\nloop variant N-i;\n*/\n\nwhile (i<N) {\n  if (x==1) {\n    x=2;\n  } else {\n    x=1;\n  }\n  i++;\n}\n\n{;\n//@ assert x <= 2;\n}",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant x <= 2;\n*/",
            "/*@ \n  loop invariant x==1 || x==2;\n  loop invariant x<=2;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant i <= N;\n    loop invariant x <= 2;\n    loop invariant i < N ==> (x == 2) ==> (x <= 2);\n    loop invariant !(i < N) ==> (x <= 2);\n    loop invariant !(x > 2) ==> !(i < N);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant x == 1 || x == 2 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant i < N ==> (x == 2) ==> (x <= 2) is partially proven to be inductive.\nloop invariant !(i < N) ==> (x <= 2) is partially proven to be inductive.\nloop invariant !(x > 2) ==> !(i < N) is preserved but not established.\nAssertion !(x > 2): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n\nloop invariant i4: x <= 2;\nloop invariant i5: i < N ==> (x == 2) ==> (x <= 2);\nloop invariant i6: !(i < N) ==> (x <= 2);\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ loop invariant (x == 1 || x == 2);\n    loop invariant i >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant (x == 1 || x == 2) is inductive.\nloop invariant i >= 0 is inductive.\nAssertion !(x > 2): Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= i <= N;\nloop invariant x == 1 || x == 2;\nloop invariant (i % 2 == 0) ==> (x == 2);\nloop invariant (i % 2 == 1) ==> (x == 1);\nloop variant N-i;\n*/\n\nwhile (i<N) {\n  if (x==1) {\n    x=2;\n  } else {\n    x=1;\n  }\n  i++;\n}\n\n{;\n//@ assert x <= 2;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant x == 1 || x == 2 is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> (x == 2) is preserved but not established.\nloop invariant (i % 2 == 1) ==> (x == 1) is partially proven to be inductive.\nAssertion !(x > 2): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n\n\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x == 1 || x == 2;\n    loop invariant x <= 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant x == 1 || x == 2 is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nAssertion !(x > 2): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: x <= 2;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n  loop invariant x==1 || x==2;\n  loop invariant x<=2;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x==1 || x==2 is inductive.\nloop invariant x<=2 is inductive.\nAssertion !(x > 2): Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= N is preserved but not established.\nloop invariant x == 1 || x == 2 is partially proven to be inductive.\nloop invariant i <= N is partially proven to be inductive.\nloop invariant x <= 2 is partially proven to be inductive.\nloop invariant i < N ==> (x == 2) ==> (x <= 2) is partially proven to be inductive.\nloop invariant !(i < N) ==> (x <= 2) is partially proven to be inductive.\nloop invariant !(x > 2) ==> !(i < N) is preserved but not established.\nloop invariant (x == 1 || x == 2) is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant (i % 2 == 0) ==> (x == 2) is preserved but not established.\nloop invariant (i % 2 == 1) ==> (x == 1) is partially proven to be inductive.\nloop invariant x==1 || x==2 is partially proven to be inductive.\nloop invariant x<=2 is partially proven to be inductive.\nAssertion !(x > 2): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: x == 1 || x == 2;\nloop invariant i3: i <= N;\nloop invariant i4: x <= 2;\nloop invariant i5: i < N ==> (x == 2) ==> (x <= 2);\nloop invariant i6: !(i < N) ==> (x <= 2);\nloop invariant i7: !(x > 2) ==> !(i < N);\nloop invariant i8: (x == 1 || x == 2);\nloop invariant i9: i >= 0;\nloop invariant i10: (i % 2 == 0) ==> (x == 2);\nloop invariant i11: (i % 2 == 1) ==> (x == 1);\nloop invariant i12: x==1 || x==2;\nloop invariant i13: x<=2;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n\nloop invariant i4: x <= 2;\nloop invariant i5: i < N ==> (x == 2) ==> (x <= 2);\nloop invariant i6: !(i < N) ==> (x <= 2);\n\nloop invariant i8: (x == 1 || x == 2);\nloop invariant i9: i >= 0;\n\n\nloop invariant i12: x==1 || x==2;\nloop invariant i13: x<=2;\n*/\nwhile (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\nreturn;\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 237,
        "success_count": 115,
        "failure_count": 122,
        "success_rate": 0.48523206751054854
    }
}