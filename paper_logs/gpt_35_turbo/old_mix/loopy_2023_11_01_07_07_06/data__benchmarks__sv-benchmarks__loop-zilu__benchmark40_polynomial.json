{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Let's analyze the program and find the necessary loop invariants. \n\n**Pre-conditions/Variable Assignments:**\n\n- `x` is assigned a value from `unknown_int()`.\n- `y` is assigned a value from `unknown_int()`.\n\n**Loop condition:**\n- `unknown_bool()` returns a boolean value.\n\n**Post-condition:**\n- `x*y>=0`.\n\n**Loop Invariants:**\n- `x*y>=0` (since the post-condition is `x*y>=0`).\n- `x*y<=|x*y|` (since the absolute value of `x*y` is always greater than or equal to `x*y`).\n- `x>=-|y|` (since `x` can be decremented by at most `1` in each iteration of the loop and `y` can be incremented by at most `1` in each iteration of the loop, so `x` can be made greater than or equal to `-|y|`).\n- `x<=|y|` (similar to the previous invariant, `x` can be made smaller than or equal to `|y|`).\n- `x>=0 ==> y>=0` (if `x` is non-negative, then `y` is non-negative as well, since `y` can only be incremented in this case).\n- `y>=0 ==> x>=-y` (if `y` is non-negative, then `x` is greater than or equal to `-y`, since `x` can be decremented by at most `1` in each iteration of the loop).\n- `y<=0 ==> x<=-y` (if `y` is non-positive, then `x` is smaller than or equal to `-y`, since `x` can be decremented by at most `1` in each iteration of the loop).\n\nWe can combine all the loop invariants into one code block as follows:\n```\n/*@ \n    loop invariant x*y>=0;\n    loop invariant x*y<=|x*y|;\n    loop invariant x>=-|y|;\n    loop invariant x<=|y|;\n    loop invariant x>=0 ==> y>=0;\n    loop invariant y>=0 ==> x>=-y;\n    loop invariant y<=0 ==> x<=-y;\n*/\n```\nNote that we did not use any non-deterministic function calls or variables with garbage values in our loop invariants.",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The program uses two external functions `unknown_int()` and `unknown_bool()` which return non-deterministic values. Therefore, we cannot make any assumptions about the initial values of `x` and `y` and the loop condition.\n\nLoop condition:\n- The loop condition is `unknown_bool()` which is a non-deterministic boolean value. Therefore, we cannot make any assumptions about the number of iterations or when the loop terminates.\n\nLoop invariants:\n- Since `x` and `y` are initially non-deterministic, we cannot make any assumptions about their initial values. Therefore, we cannot have any loop invariants that involve the initial values of `x` and `y`.\n- The loop modifies `x` and `y` in a non-trivial way. Therefore, we need to find loop invariants that hold before and after each iteration of the loop.\n- From the loop body, we can see that `x` and `y` satisfy the following two conditions:\n    - If `x == 0`, then `y >= 0`.\n    - If `x != 0`, then `x*y >= 0`.\n- We can also see that `x` and `y` are modified in the following way:\n    - If `x == 0` and `y > 0`, then `x` is incremented by 1.\n    - If `x == 0` and `y <= 0`, then `x` is decremented by 1.\n    - If `x > 0`, then `y` is incremented by 1.\n    - If `x <= 0`, then `x` is decremented by 1.\n- Using the above conditions, we can come up with the following loop invariants:\n```\n/*@ \n    loop invariant (x == 0 ==> y >= 0) && (x != 0 ==> x*y >= 0);\n    loop invariant (x > 0 ==> y - \\at(y, Pre) >= 1) && (x <= 0 ==> \\at(x, Pre) - x >= 1);\n    loop invariant (y > 0 ==> x - \\at(x, Pre) >= 1) && (y <= 0 ==> \\at(y, Pre) - y >= 1);\n*/\n```\n- The first loop invariant is a conjunction of two implications. The first implication states that if `x` is 0, then `y` is non-negative. The second implication states that if `x` is non-zero, then `x*y` is non-negative.\n- The second loop invariant is a conjunction of two implications. The first implication states that if `x` is positive, then `y` is incremented by 1 in each iteration. The second implication states that if `x` is non-positive, then `x` is decremented by 1 in each iteration. We use the `\\at` notation to refer to the value of `y` and `x` in the previous iteration (i.e., before the loop body is executed).\n- The third loop invariant is similar to the second one but for `y` instead of `x`.",
            "Pre-conditions:\n- The program does not have any explicit pre-conditions.\n- The variables `x` and `y` are initialized with non-deterministic values.\n\nLoop Condition:\n```\nunknown_bool()\n```\n\nWe can start by analyzing the loop body and identify the necessary loop invariants.\n\nLoop Invariants:\n1. `x*y >= 0`: This is the post-condition that we want to prove. So, we can add this as a loop invariant.\n```\n/*@ \n    loop invariant x*y >= 0;\n*/\n```\n\n2. `x > 0 ==> y >= 0`: If `x` is positive, then `y` must be non-negative.\n```\n/*@ \n    loop invariant x > 0 ==> y >= 0;\n*/\n```\n\n3. `x < 0 ==> y <= 0`: If `x` is negative, then `y` must be non-positive.\n```\n/*@ \n    loop invariant x < 0 ==> y <= 0;\n*/\n```\n\n4. `x != 0 ==> x*y > 0`: If `x` is non-zero, then `x*y` must have the same sign as `x`.\n```\n/*@ \n    loop invariant x != 0 ==> x*y > 0;\n*/\n```\n\n5. `x == 0 ==> y >= 0`: If `x` is zero, then `y` must be non-negative.\n```\n/*@ \n    loop invariant x == 0 ==> y >= 0;\n*/\n```\n\n6. `x > 0 ==> x <= y`: If `x` is positive, then `x` must be less than or equal to `y`.\n```\n/*@ \n    loop invariant x > 0 ==> x <= y;\n*/\n```\n\n7. `x < 0 ==> x >= y`: If `x` is negative, then `x` must be greater than or equal to `y`.\n```\n/*@ \n    loop invariant x < 0 ==> x >= y;\n*/\n```\n\n8. `x == 0 ==> y >= -1`: If `x` is zero, then `y` must be greater than or equal to `-1`.\n```\n/*@ \n    loop invariant x == 0 ==> y >= -1;\n*/\n```\n\n9. `x == 0 ==> y <= 1`: If `x` is zero, then `y` must be less than or equal to `1`.\n```\n/*@ \n    loop invariant x == 0 ==> y <= 1;\n*/\n```\n\n10. `x > 0 ==> x+y >= 1`: If `x` is positive, then `x+y` must be greater than or equal to `1`.\n```\n/*@ \n    loop invariant x > 0 ==> x+y >= 1;\n*/\n```\n\n11. `x < 0 ==> x+y <= -1`: If `x` is negative, then `x+y` must be less than or equal to `-1`.\n```\n/*@ \n    loop invariant x < 0 ==> x+y <= -1;\n*/\n```\n\n12. `x > 0 ==> y <= x+1`: If `x` is positive, then `y` must be less than or equal to `x+1`.\n```\n/*@ \n    loop invariant x > 0 ==> y <= x+1;\n*/\n```\n\n13. `x < 0 ==> y >= x-1`: If `x` is negative, then `y` must be greater than or equal to `x-1`.\n```\n/*@ \n    loop invariant x < 0 ==> y >= x-1;\n*/\n```\n\nNote that since `unknown_int()` and `unknown_bool()` are non-deterministic functions, we cannot make any assumptions about the initial or final values of `x` and `y`. However, this is not a problem because our loop invariants do not depend on the initial or final values of the variables.",
            "Pre-conditions:\n- The program has two integer variables, `x` and `y`, whose initial values are unknown.\n- The product of `x` and `y` is non-negative.\n\nLoop condition:\n- The loop executes while `unknown_bool()` returns true.\n\nPost-condition:\n- The product of `x` and `y` is non-negative.\n\nLoop invariants:\n- Before the loop execution, `x*y>=0`.\n- In each iteration of the loop:\n    - `x*y>=0`\n    - Either `x>0` or `y>=0`, but not both.\n    - If `x==0` and `y>0`, then `x` is incremented by 1.\n    - If `x==0` and `y<=0`, then `x` is decremented by 1.\n    - If `x>0`, then `y` is incremented by 1.\n    - If `x<=0`, then `x` is decremented by 1.\n- After the loop termination, `x*y>=0`. \n\nExplanation:\n\nBefore the loop execution, the product of `x` and `y` is non-negative, which satisfies the given pre-condition.\n\nIn each iteration of the loop, `x*y>=0` holds true because the loop invariant implies that `x` and `y` are either both positive or both negative, and their product is non-negative. \n\nThe loop invariant also implies that either `x>0` or `y>=0`, but not both. This is because if both `x<=0` and `y<0`, then `x*y>0`, which contradicts the loop invariant. \n\nIf `x==0` and `y>0`, then `x` is incremented by 1, which makes `x` positive and satisfies the loop invariant. Similarly, if `x==0` and `y<=0`, then `x` is decremented by 1, which makes `x` negative and satisfies the loop invariant.\n\nIf `x>0`, then `y` is incremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant. Similarly, if `x<=0`, then `x` is decremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant.\n\nAfter the loop termination, the product of `x` and `y` is non-negative because the loop invariant holds true in every iteration of the loop.",
            "Step 1: Pre-conditions or variable assignments\n\nThe program declares and initializes two integer variables `x` and `y` with non-deterministic values.\n\nStep 2: Loop condition\n\nThe while loop continues while `unknown_bool()` returns true. The function `unknown_bool()` returns a non-deterministic boolean value.\n\nStep 3: Loop invariants\n\nWe need to find loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution:\n- Since `x` and `y` are non-deterministic, we can't make any assumptions about their initial values.\n\nDuring the loop iteration:\n- `x*y>=0` holds true from the if-condition before the loop.\n- `x>0 ==> y>=0` holds true because if `x` is positive, then `y` can't be negative because `x*y>=0`.\n- `x<0 ==> y<=0` holds true because if `x` is negative, then `y` can't be positive because `x*y>=0`.\n- `x==0 ==> y>=0` holds true because if `x` is zero, then `y` can't be negative because `x*y>=0`.\n- `x==0 ==> y<=0` holds true because if `x` is zero, then `y` can't be positive because `x*y>=0`.\n- `x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0)` holds true because if `x*y>=0`, then either `x` and `y` are both positive, or they are both negative, or one of them is zero and the other is non-negative or zero and non-positive.\n\nAfter the loop termination:\n- The loop terminates when `unknown_bool()` returns false, so we can't make any assumptions about the final values of `x` and `y`.\n- Since the assertion `x*y>=0` is not guarded by any condition, we can simply add it as the final loop invariant.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n  loop invariant x*y>=0;\n  loop invariant x>0 ==> y>=0;\n  loop invariant x<0 ==> y<=0;\n  loop invariant x==0 ==> y>=0;\n  loop invariant x==0 ==> y<=0;\n  loop invariant x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x*y>=0;\n    loop invariant x*y<=|x*y|;\n    loop invariant x>=-|y|;\n    loop invariant x<=|y|;\n    loop invariant x>=0 ==> y>=0;\n    loop invariant y>=0 ==> x>=-y;\n    loop invariant y<=0 ==> x<=-y;\n*/",
            "/*@ \n    loop invariant (x == 0 ==> y >= 0) && (x != 0 ==> x*y >= 0);\n    loop invariant (x > 0 ==> y - \\at(y, Pre) >= 1) && (x <= 0 ==> \\at(x, Pre) - x >= 1);\n    loop invariant (y > 0 ==> x - \\at(x, Pre) >= 1) && (y <= 0 ==> \\at(y, Pre) - y >= 1);\n*/",
            "/*@ \n    loop invariant x*y >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The program has two integer variables, `x` and `y`, whose initial values are unknown.\n- The product of `x` and `y` is non-negative.\n\nLoop condition:\n- The loop executes while `unknown_bool()` returns true.\n\nPost-condition:\n- The product of `x` and `y` is non-negative.\n\nLoop invariants:\n- Before the loop execution, `x*y>=0`.\n- In each iteration of the loop:\n    - `x*y>=0`\n    - Either `x>0` or `y>=0`, but not both.\n    - If `x==0` and `y>0`, then `x` is incremented by 1.\n    - If `x==0` and `y<=0`, then `x` is decremented by 1.\n    - If `x>0`, then `y` is incremented by 1.\n    - If `x<=0`, then `x` is decremented by 1.\n- After the loop termination, `x*y>=0`. \n\nExplanation:\n\nBefore the loop execution, the product of `x` and `y` is non-negative, which satisfies the given pre-condition.\n\nIn each iteration of the loop, `x*y>=0` holds true because the loop invariant implies that `x` and `y` are either both positive or both negative, and their product is non-negative. \n\nThe loop invariant also implies that either `x>0` or `y>=0`, but not both. This is because if both `x<=0` and `y<0`, then `x*y>0`, which contradicts the loop invariant. \n\nIf `x==0` and `y>0`, then `x` is incremented by 1, which makes `x` positive and satisfies the loop invariant. Similarly, if `x==0` and `y<=0`, then `x` is decremented by 1, which makes `x` negative and satisfies the loop invariant.\n\nIf `x>0`, then `y` is incremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant. Similarly, if `x<=0`, then `x` is decremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant.\n\nAfter the loop termination, the product of `x` and `y` is non-negative because the loop invariant holds true in every iteration of the loop."
            ],
            "/*@ \n  loop invariant x*y>=0;\n  loop invariant x>0 ==> y>=0;\n  loop invariant x<0 ==> y<=0;\n  loop invariant x==0 ==> y>=0;\n  loop invariant x==0 ==> y<=0;\n  loop invariant x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x*y>=0;\n    loop invariant x*y<=|x*y|;\n    loop invariant x>=-|y|;\n    loop invariant x<=|y|;\n    loop invariant x>=0 ==> y>=0;\n    loop invariant y>=0 ==> x>=-y;\n    loop invariant y<=0 ==> x<=-y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token '|'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: x*y>=0;\n\n\n\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant (x == 0 ==> y >= 0) && (x != 0 ==> x*y >= 0);\n    loop invariant (x > 0 ==> y - \\at(y, Pre) >= 1) && (x <= 0 ==> \\at(x, Pre) - x >= 1);\n    loop invariant (y > 0 ==> x - \\at(x, Pre) >= 1) && (y <= 0 ==> \\at(y, Pre) - y >= 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x*y >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x*y >= 0 is inductive.\nAssertion x * y >= 0: Valid"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The program has two integer variables, `x` and `y`, whose initial values are unknown.\n- The product of `x` and `y` is non-negative.\n\nLoop condition:\n- The loop executes while `unknown_bool()` returns true.\n\nPost-condition:\n- The product of `x` and `y` is non-negative.\n\nLoop invariants:\n- Before the loop execution, `x*y>=0`.\n- In each iteration of the loop:\n    - `x*y>=0`\n    - Either `x>0` or `y>=0`, but not both.\n    - If `x==0` and `y>0`, then `x` is incremented by 1.\n    - If `x==0` and `y<=0`, then `x` is decremented by 1.\n    - If `x>0`, then `y` is incremented by 1.\n    - If `x<=0`, then `x` is decremented by 1.\n- After the loop termination, `x*y>=0`. \n\nExplanation:\n\nBefore the loop execution, the product of `x` and `y` is non-negative, which satisfies the given pre-condition.\n\nIn each iteration of the loop, `x*y>=0` holds true because the loop invariant implies that `x` and `y` are either both positive or both negative, and their product is non-negative. \n\nThe loop invariant also implies that either `x>0` or `y>=0`, but not both. This is because if both `x<=0` and `y<0`, then `x*y>0`, which contradicts the loop invariant. \n\nIf `x==0` and `y>0`, then `x` is incremented by 1, which makes `x` positive and satisfies the loop invariant. Similarly, if `x==0` and `y<=0`, then `x` is decremented by 1, which makes `x` negative and satisfies the loop invariant.\n\nIf `x>0`, then `y` is incremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant. Similarly, if `x<=0`, then `x` is decremented by 1, which makes the product of `x` and `y` non-negative and satisfies the loop invariant.\n\nAfter the loop termination, the product of `x` and `y` is non-negative because the loop invariant holds true in every iteration of the loop.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant x*y>=0;\n  loop invariant x>0 ==> y>=0;\n  loop invariant x<0 ==> y<=0;\n  loop invariant x==0 ==> y>=0;\n  loop invariant x==0 ==> y<=0;\n  loop invariant x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x*y>=0 is partially proven to be inductive.\nloop invariant x>0 ==> y>=0 is partially proven to be inductive.\nloop invariant x<0 ==> y<=0 is partially proven to be inductive.\nloop invariant x==0 ==> y>=0 is preserved but not established.\nloop invariant x==0 ==> y<=0 is preserved but not established.\nloop invariant x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0) is partially proven to be inductive.\nAssertion x * y >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: x*y>=0;\nloop invariant i2: x>0 ==> y>=0;\nloop invariant i3: x<0 ==> y<=0;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: unexpected token '|'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: x*y>=0;\nloop invariant i2: x*y<=|x*y|;\nloop invariant i3: x>=-|y|;\nloop invariant i4: x<=|y|;\nloop invariant i5: x>=0 ==> y>=0;\nloop invariant i6: y>=0 ==> x>=-y;\nloop invariant i7: y<=0 ==> x<=-y;\nloop invariant i8: (x == 0 ==> y >= 0) && (x != 0 ==> x*y >= 0);\nloop invariant i9: (x > 0 ==> y - \\at(y, Pre) >= 1) && (x <= 0 ==> \\at(x, Pre) - x >= 1);\nloop invariant i10: (y > 0 ==> x - \\at(x, Pre) >= 1) && (y <= 0 ==> \\at(y, Pre) - y >= 1);\nloop invariant i11: x*y >= 0;\nloop invariant i12: x>0 ==> y>=0;\nloop invariant i13: x<0 ==> y<=0;\nloop invariant i14: x==0 ==> y>=0;\nloop invariant i15: x==0 ==> y<=0;\nloop invariant i16: x*y>=0 ==> (x>0 ==> y>=0) && (x<0 ==> y<=0) && (x==0 ==> y>=0) && (x==0 ==> y<=0);\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  /*@\nloop invariant i1: x*y>=0;\n\n\n\n\n\n\n\n\n\nloop invariant i11: x*y >= 0;\nloop invariant i12: x>0 ==> y>=0;\nloop invariant i13: x<0 ==> y<=0;\n\n\n\n*/\nwhile (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c"
        ],
        "skipped": [],
        "total": 347,
        "success_count": 179,
        "failure_count": 168,
        "success_rate": 0.515850144092219
    }
}