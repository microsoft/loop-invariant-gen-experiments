{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `errorFn` is defined.\n- The macro `assume` is defined.\n- The function `main` takes an integer argument `n`.\n- The variable `i` is declared as an integer.\n\nVariable assignments:\n- `i` is assigned a value of 0.\n- `n` is assigned a value of 10.\n\nLoop condition:\n- The loop executes while `i` is less than `n`.\n\nPost-condition:\n- Assert that `i` is not greater than 10 after the loop terminates.\n\nLoop invariants:\n- Before the loop execution, `i` is greater than or equal to 0.\n- Before the loop execution, `n` is greater than or equal to 0.\n- Before the loop execution, `n` is greater than or equal to `i`.\n- In every iteration of the loop, `i` is less than or equal to `n`.\n- After the loop termination, `i` is greater than or equal to 0.\n- After the loop termination, `n` is greater than or equal to 0.\n- After the loop termination, `i` is greater than or equal to 10 implies that `i` is greater than or equal to `n`.\n\nPutting it all together, the loop invariants are:\n```\n/*@\n  loop invariant i >= 0;\n  loop invariant n >= 0;\n  loop invariant n >= i;\n  loop invariant i <= n;\n  loop invariant i > 10 ==> i >= n;\n*/\n```",
            "Pre-conditions and variable assignments:\n- The program takes an integer argument 'n' in the main function.\n- The macro 'assume(e)' is defined, which returns 0 if the expression 'e' is false.\n- The function 'errorFn()' is defined, which contains an infinite loop.\n\nLoop condition:\n- The while loop condition is 'i < n'.\n\nLoop invariants:\n- Before loop execution: \n    - '0 <= i <= n'\n- In every iteration of the loop:\n    - '0 <= i <= n'\n- After loop termination:\n    - 'i == n'\n    - '!(i > 10)' (this is the post-condition, guarded by the previous while loop)\n\nExplanation:\n- Before the loop, 'i' is initialized to 0 and 'n' is set to 10. Therefore, the range of values for 'i' is from 0 to 10.\n- During each iteration of the loop, 'i' is incremented by 1, so it still remains within the range of 0 to 10.\n- After the loop, 'i' should be equal to 'n', which is 10.\n- The post-condition asserts that 'i' should not be greater than 10. This is already true, since 'i' is equal to 'n' (which is 10) after the loop. Therefore, we don't need to add any additional loop invariant for the post-condition.\n- Since there are no non-deterministic variables in the program, we don't need to add any additional loop invariants to handle them.",
            "Pre-conditions/Variable Assignments:\n- The function `errorFn()` does not affect the program.\n- The program takes an integer input `n` in the `main` function.\n- The program initializes an integer variable `i` to 0.\n\nLoop Invariants:\n- Before the loop execution: `i == 0 && n >= 0`\n  - `i` should be equal to the initial value of 0 and `n` should be greater than or equal to 0 to ensure that the loop executes at least once.\n- In every iteration of the loop: `0 <= i <= n && n >= 0`\n  - `i` should always be between 0 and `n` to ensure that the loop executes `n` times.\n  - `n` should be greater than or equal to 0 to ensure that the loop executes at least once.\n- After the loop termination: `i == n && n >= 0`\n  - `i` should be equal to `n` to ensure that the loop executed `n` times.\n  - `n` should be greater than or equal to 0 to ensure that the loop executes at least once.\n\nImplications:\n- There are no implications required for this program as the assertion is not guarded by any condition and there are no non-deterministic variables.\n\nPutting it all together, the loop invariants for the given program are:\n```\n/*@ \n    loop invariant i >= 0 && i <= n && n >= 0;\n    loop invariant i <= n && n >= 0;\n    loop invariant i == n && n >= 0;\n*/\n```",
            "Pre-conditions:\n- The function `errorFn()` is defined.\n- The macro `assume(e)` is defined.\n- The function `main()` takes an integer argument `n`.\n- There are two integer variables `i` and `n` declared in `main()`.\n\nVariable assignments:\n- The variable `i` is initialized to 0.\n- The variable `n` is assigned the value 10.\n\nLoop condition:\n- The loop continues as long as `i` is less than `n`.\n\nPost-condition:\n- The assertion checks that `i` is not greater than 10.\n\nLoop invariants:\n- Before the loop execution, `i` is non-negative and `n` is positive.\n```\n/*@ loop invariant i >= 0;\n    loop invariant n > 0;\n*/\n```\n- In every iteration of the loop, `i` is less than or equal to `n`.\n```\n/*@ loop invariant i <= n;\n*/\n```\n- After the loop termination, `i` is greater than or equal to `n`.\n```\n/*@ loop invariant i >= n;\n*/\n```\n- Since there are no non-deterministic variables, there is no need for additional implications to make the invariants trivially true. \n\nNow, we can use these loop invariants to prove the post-condition:\n- Before the loop, the first invariant (`i >= 0`) implies that `i` is not greater than 10, since `i` is non-negative.\n- In each iteration of the loop, the second invariant (`i <= n`) implies that `i` is not greater than 10, since `n` is 10 and `i` is always less than or equal to `n`.\n- After the loop, the third invariant (`i >= n`) implies that `i` is not greater than 10, since `n` is 10 and `i` is greater than or equal to `n`.\n\nTherefore, the loop invariants are sufficient to prove the post-condition.",
            "The pre-conditions and variable assignments in the program are:\n- The `assume` macro defines a function to return 0 if the given expression is false.\n- The `errorFn` function is defined, but not used in this program.\n- The `main` function takes an integer argument `n`.\n- Two integer variables `i` and `n` are declared and initialized with 0 and 10, respectively.\n\nLoop condition: The while loop runs while `i` is less than `n`. \n\nLoop invariants:\n- The loop invariant that holds before the loop execution is: `i >= 0 && n == 10`.\n- The loop invariant that holds in every iteration is: `0 <= i <= n`.\n- The loop invariant that holds after the loop termination is: `i == n`.\n\nReasoning:\n- Before the loop starts, `i` is initialized with 0 and `n` is assigned 10. Therefore, `i` is greater than or equal to 0 and `n` is equal to 10. Hence, the first loop invariant `i >= 0 && n == 10` is true before the loop execution.\n- In every iteration of the loop, `i` is incremented by 1 until it becomes equal to `n`. Therefore, `i` is always greater than or equal to 0 and less than or equal to `n`. Hence, the second loop invariant `0 <= i <= n` is true in every iteration of the loop.\n- After the loop terminates, `i` becomes equal to `n`. Therefore, the third loop invariant `i == n` is true after the loop termination.\n\nFinally, the post-condition is `!(i > 10)`. Since the loop invariant `i == n` holds after the loop termination, and `n` is assigned the value of 10 before the loop starts, we can substitute `n` with 10 in the post-condition. Therefore, the post-condition becomes `!(i > 10)` which is equivalent to `i <= 10`. Since the second loop invariant `0 <= i <= n` holds in every iteration of the loop, we can use implication to show that `i <= 10` holds after the loop termination. Therefore, the loop invariants imply the post-condition. \n\nPutting everything together, the loop invariants for the given program are:\n```\n/*@ \n    loop invariant i >= 0 && n == 10;\n    loop invariant 0 <= i <= n;\n    loop invariant i == n;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@\n  loop invariant i >= 0;\n  loop invariant n >= 0;\n  loop invariant n >= i;\n  loop invariant i <= n;\n  loop invariant i > 10 ==> i >= n;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- The program takes an integer argument 'n' in the main function.\n- The macro 'assume(e)' is defined, which returns 0 if the expression 'e' is false.\n- The function 'errorFn()' is defined, which contains an infinite loop.\n\nLoop condition:\n- The while loop condition is 'i < n'.\n\nLoop invariants:\n- Before loop execution: \n    - '0 <= i <= n'\n- In every iteration of the loop:\n    - '0 <= i <= n'\n- After loop termination:\n    - 'i == n'\n    - '!(i > 10)' (this is the post-condition, guarded by the previous while loop)\n\nExplanation:\n- Before the loop, 'i' is initialized to 0 and 'n' is set to 10. Therefore, the range of values for 'i' is from 0 to 10.\n- During each iteration of the loop, 'i' is incremented by 1, so it still remains within the range of 0 to 10.\n- After the loop, 'i' should be equal to 'n', which is 10.\n- The post-condition asserts that 'i' should not be greater than 10. This is already true, since 'i' is equal to 'n' (which is 10) after the loop. Therefore, we don't need to add any additional loop invariant for the post-condition.\n- Since there are no non-deterministic variables in the program, we don't need to add any additional loop invariants to handle them."
            ],
            "/*@ \n    loop invariant i >= 0 && i <= n && n >= 0;\n    loop invariant i <= n && n >= 0;\n    loop invariant i == n && n >= 0;\n*/",
            "/*@ loop invariant i >= 0;\n    loop invariant n > 0;\n*/",
            "/*@ \n    loop invariant i >= 0 && n == 10;\n    loop invariant 0 <= i <= n;\n    loop invariant i == n;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n  loop invariant i >= 0;\n  loop invariant n >= 0;\n  loop invariant n >= i;\n  loop invariant i <= n;\n  loop invariant i > 10 ==> i >= n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n >= i is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i > 10 ==> i >= n is established but not preserved.\nAssertion !(i > 10): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: n >= i;\nloop invariant i4: i <= n;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- The program takes an integer argument 'n' in the main function.\n- The macro 'assume(e)' is defined, which returns 0 if the expression 'e' is false.\n- The function 'errorFn()' is defined, which contains an infinite loop.\n\nLoop condition:\n- The while loop condition is 'i < n'.\n\nLoop invariants:\n- Before loop execution: \n    - '0 <= i <= n'\n- In every iteration of the loop:\n    - '0 <= i <= n'\n- After loop termination:\n    - 'i == n'\n    - '!(i > 10)' (this is the post-condition, guarded by the previous while loop)\n\nExplanation:\n- Before the loop, 'i' is initialized to 0 and 'n' is set to 10. Therefore, the range of values for 'i' is from 0 to 10.\n- During each iteration of the loop, 'i' is incremented by 1, so it still remains within the range of 0 to 10.\n- After the loop, 'i' should be equal to 'n', which is 10.\n- The post-condition asserts that 'i' should not be greater than 10. This is already true, since 'i' is equal to 'n' (which is 10) after the loop. Therefore, we don't need to add any additional loop invariant for the post-condition.\n- Since there are no non-deterministic variables in the program, we don't need to add any additional loop invariants to handle them.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0 && i <= n && n >= 0;\n    loop invariant i <= n && n >= 0;\n    loop invariant i == n && n >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && i <= n && n >= 0 is partially proven to be inductive.\nloop invariant i <= n && n >= 0 is partially proven to be inductive.\nloop invariant i == n && n >= 0 is preserved but not established.\nAssertion !(i > 10): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0 && i <= n && n >= 0;\nloop invariant i2: i <= n && n >= 0;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant i >= 0;\n    loop invariant n > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant n > 0 is inductive.\nAssertion !(i > 10): Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n > 0;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0 && n == 10;\n    loop invariant 0 <= i <= n;\n    loop invariant i == n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 && n == 10 is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i == n is preserved but not established.\nAssertion !(i > 10): Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0 && n == 10;\nloop invariant i2: 0 <= i <= n;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant n >= i is partially proven to be inductive.\nloop invariant i <= n is partially proven to be inductive.\nloop invariant i > 10 ==> i >= n is partially proven to be inductive.\nloop invariant i >= 0 && i <= n && n >= 0 is partially proven to be inductive.\nloop invariant i <= n && n >= 0 is partially proven to be inductive.\nloop invariant i == n && n >= 0 is preserved but not established.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant i >= 0 && n == 10 is partially proven to be inductive.\nloop invariant 0 <= i <= n is partially proven to be inductive.\nloop invariant i == n is partially proven to be inductive.\nAssertion !(i > 10): Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: n >= i;\nloop invariant i4: i <= n;\nloop invariant i5: i > 10 ==> i >= n;\nloop invariant i6: i >= 0 && i <= n && n >= 0;\nloop invariant i7: i <= n && n >= 0;\nloop invariant i8: i == n && n >= 0;\nloop invariant i9: n > 0;\nloop invariant i10: i >= 0 && n == 10;\nloop invariant i11: 0 <= i <= n;\nloop invariant i12: i == n;\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: n >= i;\nloop invariant i4: i <= n;\nloop invariant i5: i > 10 ==> i >= n;\nloop invariant i6: i >= 0 && i <= n && n >= 0;\nloop invariant i7: i <= n && n >= 0;\n\nloop invariant i9: n > 0;\nloop invariant i10: i >= 0 && n == 10;\nloop invariant i11: 0 <= i <= n;\n\n*/\nwhile (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 228,
        "success_count": 107,
        "failure_count": 121,
        "success_rate": 0.4692982456140351
    }
}