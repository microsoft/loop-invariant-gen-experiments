{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input.\n- The program calls two external functions `unknown_int()` and `unknown_bool()` which have no side effects and return arbitrary values.\n- The program initializes two variables `i` and `k` with the values returned by `unknown_int()`.\n- The program checks that `k` is either 0 or 1, and `i` is 1.\n\n```\nif (!(0 <= k && k <= 1 && i == 1)) return 0;\n```\n\nLoop condition:\n- The loop condition is the call to the `unknown_bool()` function, which returns a boolean value.\n\n```\nwhile (unknown_bool()) {\n```\n\nPost-condition:\n- After the loop, the sum of `i` and `k` is between 1 and 2, and `i` is greater than or equal to 1.\n\n```\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n```\n\nLoop invariants:\n- Before the loop, `i` is greater than or equal to 1, and `k` is either 0 or 1.\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n*/\n```\n\n- In every iteration of the loop, `i` is greater than or equal to 1, and `k` is either 0 or 1.\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n*/\n```\n\n- After the loop termination, `i` is greater than or equal to 1, and `k` is either -1 or 0.\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant -1 <= k <= 0;\n*/\n```\n\n- The loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n    loop invariant i + k >= 1 ==> i + k <= 2;\n    loop invariant i + k <= 2 ==> i >= 1;\n*/\n``` \n\nNote:\n- Since the loop condition is non-deterministic, it is not possible to find a loop invariant that implies the post-condition directly. Instead, we use implication to relate the loop invariants to the post-condition.",
            "Pre-conditions or variable assignments:\n- Variables i and k are initialized with non-deterministic values.\n- The values of k are bounded between 0 and 1 (inclusive).\n- The value of i is 1.\n\nLoop condition:\n- The loop executes as long as the value returned by unknown_bool() is true.\n\nPost-condition:\n- The sum of i and k is between 1 and 2 (inclusive).\n- The value of i is greater than or equal to 1.\n\nLoop Invariants:\n- Before the loop execution:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n- In every iteration of the loop:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The value of i increases by 1 in each iteration.\n    - The value of k decreases by 1 in each iteration.\n- After the loop termination:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The loop termination implies that the loop condition is false, i.e., unknown_bool() is false. This means that the loop body did not execute for the final value of i and k. Therefore, the final values of i and k satisfy the post-condition.",
            "Pre-conditions:\n- The values of i and k are non-deterministic and could contain any value.\n- The value of k must be between 0 and 1 (inclusive) and the value of i must be 1.\n\nLoop Condition:\n- The loop will continue as long as the value of unknown_bool() is true, which means it could execute any number of times.\n\nPost-condition:\n- The sum of i and k must be between 1 and 2 (inclusive) and the value of i must be at least 1.\n\nLoop Invariants:\n- Before the loop execution, the sum of i and k must be between 1 and 2 (inclusive) and the value of i must be at least 1, because these are the pre-conditions required for the loop to start. Therefore, we can write:\n```\n/*@ \n    loop invariant 1 <= i + k <= 2;\n    loop invariant i >= 1;\n*/\n```\n\n- In every iteration of the loop, the values of i and k change as i is incremented and k is decremented. Therefore, we need to adjust the loop invariants to take this into account. The loop body does not place any constraints on the values of i and k, so we can only use their pre-existing bounds. However, we can add a new invariant that relates the values of i and k before and after each iteration:\n```\n/*@ \n    loop invariant 1 <= i + k <= 2;\n    loop invariant i >= 1;\n    loop invariant i - \\old(i) == \\old(k) - k;\n*/\n```\n\n- After the loop termination, we need to show that the post-condition is satisfied. Since we know that the loop terminates when unknown_bool() returns false, we can use an implication to relate the loop invariants to the post-condition:\n```\n/*@ \n    loop invariant 1 <= i + k <= 2;\n    loop invariant i >= 1;\n    loop invariant i - \\old(i) == \\old(k) - k;\n    loop variant unknown_bool();\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n}\nassume(!(unknown_bool()));\n{;\n    //@ assert 1 <= i + k && i + k <= 2 && i >= 1;\n}\n```\n\nNote that we have added a loop variant for unknown_bool() to satisfy the requirements of Frama-C. Since unknown_bool() is non-deterministic, we cannot make any assumptions about its value, so we use it as the loop variant to indicate that the loop will eventually terminate.",
            "Pre-conditions: The program does not have any explicit pre-conditions. However, the program has an if statement that checks if k is between 0 and 1 (inclusive) and if i is equal to 1. So, we can assume that the pre-conditions are 0 <= k <= 1 and i == 1.\n\nLoop condition: The loop executes as long as the boolean expression \"unknown_bool()\" is true. Since we do not know the behavior of the function \"unknown_bool()\", we cannot make any assumptions about the loop condition.\n\nLoop invariants:\n- Since i is initialized to 1, we can add an invariant that i is always greater than or equal to 1. \n- Similarly, since k is initialized to a non-negative integer and is decremented in every iteration of the loop, we can add an invariant that k is always greater than or equal to 0.\n- Since the loop executes as long as the boolean expression \"unknown_bool()\" is true, we cannot make any assumptions about the number of iterations. Therefore, we cannot add any invariants related to the number of iterations.\n- The loop body increments i and decrements k in every iteration. We can add an invariant that i + k remains constant throughout the loop execution. Thus, we can add the invariant i + k == \\at(i + k, Pre) before the loop execution and i + k == \\at(i + k, LoopEntry) in every iteration of the loop.\n- Finally, we can use implication to take care of the assertion. Since the assertion is guarded by the condition that the loop has terminated, we can use an implication to state that if the loop has terminated, then the assertion must hold. Thus, we can add the invariant (i + k == 2 ==> i == 1) && (i + k == 1 ==> i >= 1) after the loop termination.\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant k >= 0;\n    loop invariant i + k == \\at(i + k, Pre);\n    loop invariant i + k == \\at(i + k, LoopEntry);\n    loop invariant (i + k == 2 ==> i == 1) && (i + k == 1 ==> i >= 1);\n*/\n```",
            "Pre-conditions:\n- The values of variables `i` and `k` are non-deterministic.\n\nVariable bounds:\n- `0 <= k <= 1`\n- No bound can be established for `i` as it is non-deterministic.\n\nLoop condition:\n- `unknown_bool()`\n\nPost-condition:\n- `1 <= i + k <= 2` and `i >= 1`\n\nLoop invariants:\n- Before the loop execution: `0 <= k <= 1 && i == 1`\n- In every iteration of the loop: `i >= 1 && k >= 0`\n- After the loop termination: `1 <= i + k <= 2`\n\nExplanation:\n- Before the loop execution, the value of `k` is between 0 and 1, and the value of `i` is 1.\n- In every iteration of the loop, the value of `i` is always greater than or equal to 1, and the value of `k` is always greater than or equal to 0.\n- After the loop termination, the sum of `i` and `k` is between 1 and 2.\n\nPutting it all together:\n```\n/*@ \n  loop invariant 0 <= k <= 1 && i == 1;\n  loop invariant i >= 1 && k >= 0;\n  loop invariant 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n}\n{;\n  //@ assert (1 <= i + k && i + k <= 2 && i >= 1);\n}\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments:\n- Variables i and k are initialized with non-deterministic values.\n- The values of k are bounded between 0 and 1 (inclusive).\n- The value of i is 1.\n\nLoop condition:\n- The loop executes as long as the value returned by unknown_bool() is true.\n\nPost-condition:\n- The sum of i and k is between 1 and 2 (inclusive).\n- The value of i is greater than or equal to 1.\n\nLoop Invariants:\n- Before the loop execution:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n- In every iteration of the loop:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The value of i increases by 1 in each iteration.\n    - The value of k decreases by 1 in each iteration.\n- After the loop termination:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The loop termination implies that the loop condition is false, i.e., unknown_bool() is false. This means that the loop body did not execute for the final value of i and k. Therefore, the final values of i and k satisfy the post-condition."
            ],
            "/*@ \n    loop invariant 1 <= i + k <= 2;\n    loop invariant i >= 1;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant k >= 0;\n    loop invariant i + k == \\at(i + k, Pre);\n    loop invariant i + k == \\at(i + k, LoopEntry);\n    loop invariant (i + k == 2 ==> i == 1) && (i + k == 1 ==> i >= 1);\n*/",
            "/*@ \n  loop invariant 0 <= k <= 1 && i == 1;\n  loop invariant i >= 1 && k >= 0;\n  loop invariant 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n}\n{;\n  //@ assert (1 <= i + k && i + k <= 2 && i >= 1);\n}"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant 0 <= k <= 1 is established but not preserved.\nAssertion 1 <= i + k <= 2 && i >= 1: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments:\n- Variables i and k are initialized with non-deterministic values.\n- The values of k are bounded between 0 and 1 (inclusive).\n- The value of i is 1.\n\nLoop condition:\n- The loop executes as long as the value returned by unknown_bool() is true.\n\nPost-condition:\n- The sum of i and k is between 1 and 2 (inclusive).\n- The value of i is greater than or equal to 1.\n\nLoop Invariants:\n- Before the loop execution:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n- In every iteration of the loop:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The value of i increases by 1 in each iteration.\n    - The value of k decreases by 1 in each iteration.\n- After the loop termination:\n    - The sum of i and k is between 1 and 2 (inclusive). (i.e., 1 <= i + k <= 2)\n    - The value of i is greater than or equal to 1. (i.e., i >= 1)\n    - The value of k is between 0 and 1 (inclusive). (i.e., 0 <= k <= 1)\n    - The loop termination implies that the loop condition is false, i.e., unknown_bool() is false. This means that the loop body did not execute for the final value of i and k. Therefore, the final values of i and k satisfy the post-condition.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 1 <= i + k <= 2;\n    loop invariant i >= 1;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i + k <= 2 is inductive.\nloop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant k >= 0;\n    loop invariant i + k == \\at(i + k, Pre);\n    loop invariant i + k == \\at(i + k, LoopEntry);\n    loop invariant (i + k == 2 ==> i == 1) && (i + k == 1 ==> i >= 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\n\n\nloop invariant i4: i + k == \\at(i + k, LoopEntry);\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant 0 <= k <= 1 && i == 1;\n  loop invariant i >= 1 && k >= 0;\n  loop invariant 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n}\n{;\n  //@ assert (1 <= i + k && i + k <= 2 && i >= 1);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= 1 && i == 1 is established but not preserved.\nloop invariant i >= 1 && k >= 0 is partially proven to be inductive.\nloop invariant 1 <= i + k <= 2 is partially proven to be inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: 1 <= i + k <= 2;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 16: unbound logic variable i. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: 0 <= k <= 1;\nloop invariant i3: 1 <= i + k <= 2;\nloop invariant i4: k >= 0;\nloop invariant i5: i + k == \\at(i + k, Pre);\nloop invariant i6: i + k == \\at(i + k, LoopEntry);\nloop invariant i7: (i + k == 2 ==> i == 1) && (i + k == 1 ==> i >= 1);\nloop invariant i8: 0 <= k <= 1 && i == 1;\nloop invariant i9: i >= 1 && k >= 0;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: 1 <= i + k <= 2;\n\n\nloop invariant i6: i + k == \\at(i + k, LoopEntry);\n\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c"
        ],
        "skipped": [],
        "total": 323,
        "success_count": 158,
        "failure_count": 165,
        "success_rate": 0.4891640866873065
    }
}