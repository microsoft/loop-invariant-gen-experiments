{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- N is assigned the value returned by unknown_int().\n- x is assigned the value 0.\n- m is assigned the value 0.\n- input is declared but not explicitly initialized.\n\nLoop condition:\n- x < N\n\nLoop invariants:\n- Since N is assigned the value returned by unknown_int(), we do not know its value. Hence, we cannot bound the maximum or minimum values that N can take.\n- x is initially assigned the value 0, so 0 <= x.\n- m is initially assigned the value 0, so 0 <= m.\n- Since input is not initialized, we cannot bound the maximum or minimum values that input can take.\n- Let's analyze the loop body:\n    - If input is true, then m is assigned the current value of x, otherwise m remains unchanged.\n    - x is incremented by 1 in every iteration.\n- Therefore, we can add the following loop invariants:\n    - 0 <= x <= N\n    - 0 <= m <= x\n    - If input is true, then m == x-1, otherwise m == \\old(m)\n- After the loop terminates, we know that x >= N, because the loop condition x < N is no longer true. Therefore, we can add the following post-condition:\n    - N > 0 ==> (0 <= m) && (m < N)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant ((input && m == x-1) || (!input && m == \\at(m, Pre)));\n*/\n```",
            "Pre-conditions:\n- The variable N is initialized to a non-negative integer value.\n- All other variables are initialized to 0.\n\nLoop condition:\n- The loop executes as long as the value of x is less than N.\n\nLoop invariants:\n- Before the loop execution: \n    - The value of m is non-negative and no greater than the value of x. (0 <= m <= x)\n    - The value of x is non-negative and no greater than N. (0 <= x <= N)\n    - The value of input is either 0 or 1.\n- In every iteration of the loop:\n    - The value of m is non-negative and no greater than the value of x. (0 <= m <= x)\n    - The value of x is non-negative and no greater than N. (0 <= x <= N)\n    - If input is 1, then m is updated to the current value of x. Otherwise, m remains unchanged.\n- After the loop termination:\n    - The value of m is non-negative and no greater than N. (0 <= m <= N)\n    - If N is greater than 0, then the assertion (0 <= m) && (m < N) holds.\n    \nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= m <= x;\n    loop invariant 0 <= x <= N;\n    loop invariant input == 0 || input == 1;\n    loop invariant (input == 0 ==> \\old(m) == m);\n    loop invariant (input == 1 ==> m == x);\n    loop variant N-x;\n*/\n```\nNote that the loop variant is also required to ensure that the loop eventually terminates. The loop variant is N-x, which decreases by at least 1 in every iteration of the loop.",
            "Pre-conditions and variable assignments:\n- The program takes no input.\n- The program calls an external function `unknown_int()` which returns an integer value.\n- The program initializes four integer variables `N`, `x`, `m`, and `input` to `0`.\n\nLoop condition:\n- The loop iterates while `x` is less than `N`.\n\nLoop invariants:\n- `0 <= x <= N` (bounds `x` to be within `0` and `N`, inclusive)\n- `0 <= m <= x` (bounds `m` to be within `0` and `x`, inclusive)\n- `m = 0 ==> forall integer k; 0 <= k < x ==> unknown_int() = 0` (if `m` is `0`, then all previous values of `unknown_int()` before the current iteration are `0`)\n- `x < N ==> forall integer k; 0 <= k < N && k > x ==> unknown_int() = 0` (if `x` is less than `N`, then all future values of `unknown_int()` after the current iteration and before the termination of the loop are `0`)\n- `(m > 0 && x = N) ==> input = 1` (if `m` is greater than `0` and `x` is equal to `N` at the end of the loop, then the final value of `input` is `1`)\n- `(N > 0) ==> (0 <= m) && (m < N)` (if `N` is greater than `0`, then the assertion is true if `m` is within `0` and `N-1`)\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant m = 0 ==> forall integer k; 0 <= k < x ==> unknown_int() == 0;\n    loop invariant x < N ==> forall integer k; 0 <= k < N && k > x ==> unknown_int() == 0;\n    loop invariant (m > 0 && x == N) ==> input == 1;\n    loop invariant (N > 0) ==> (0 <= m) && (m < N);\n*/\n```",
            "Pre-conditions:\n- The function `unknown_int()` returns an integer value.\n- The value returned by `unknown_int()` is assigned to the variable `N`.\n- All other variables are initialized to 0.\n\nLoop condition: `x < N`\n\nLoop invariants:\n- `0 <= x <= N`\n- `0 <= m <= N`\n- If `input` is 1, then `m = max{j | 0 <= j < x and input_j = 1}`, where `input_j` is the value of `input` in the j-th iteration of the loop.\n- If `input` is 0, then `m = max{j | 0 <= j < x-1 and input_j = 1}`, where `input_j` is the value of `input` in the j-th iteration of the loop.\n- If `N <= 0`, then the assertion trivially holds.\n- If `N > 0` and `x = N`, then `m` is the index of the last occurrence of `1` in the input sequence.\n- If `N > 0` and `x < N`, then `m` is the index of the last occurrence of `1` in the input sequence up to the `x-1`-th position.\n\nPutting it all together:\n\n```\n/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= N;\n    loop invariant (input == 1) ==> (m == \\max int j; 0 <= j < x && input_j == 1);\n    loop invariant (input == 0) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n    loop invariant (N <= 0) || ((N > 0 && x = N) ==> (m == \\max int j; 0 <= j < N && input_j == 1));\n    loop invariant (N > 0 && x < N) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n*/\n```",
            "Pre-conditions:\n- The variable N is an integer, the value of which is obtained from the function unknown_int().\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than N.\n\nLoop invariants:\n- Before the loop execution: \n    - N is a non-negative integer.\n    - x is a non-negative integer.\n    - m is a non-negative integer.\n- In every iteration of the loop:\n    - 0 <= x <= N\n    - If m < x, then input is always 0.\n- After the loop termination:\n    - 0 <= x <= N\n    - If m < N, then the input is always 0.\n    - If N > 0, then (0 <= m) && (m < N) ==> ((0 <= m) && (m < N)) is true.\n\nExplanation:\n- Before the loop execution, we know that all the variables must be non-negative integers, since they are indices or counters in the loop.\n- In every iteration of the loop, the value of x starts from 0 and increases by 1 in each iteration, until it reaches N. Therefore, we know that 0 <= x <= N holds in every iteration.\n- If m < x, then it means that we have encountered a non-zero input after the last time we updated m. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < x, then input is always 0.\n- After the loop termination, we know that the value of x is between 0 and N, since the loop terminates when x becomes equal to N. If m < N, then it means that we have encountered a non-zero input after the last time we updated m, but we have not updated m again before the loop terminated. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < N, then the input is always 0.\n- Finally, we know that if N > 0, then the assertion should hold. Therefore, we use an implication to make sure that the assertion is only checked when N > 0."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant ((input && m == x-1) || (!input && m == \\at(m, Pre)));\n*/",
            "/*@ \n    loop invariant 0 <= m <= x;\n    loop invariant 0 <= x <= N;\n    loop invariant input == 0 || input == 1;\n    loop invariant (input == 0 ==> \\old(m) == m);\n    loop invariant (input == 1 ==> m == x);\n    loop variant N-x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant m = 0 ==> forall integer k; 0 <= k < x ==> unknown_int() == 0;\n    loop invariant x < N ==> forall integer k; 0 <= k < N && k > x ==> unknown_int() == 0;\n    loop invariant (m > 0 && x == N) ==> input == 1;\n    loop invariant (N > 0) ==> (0 <= m) && (m < N);\n*/",
            "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= N;\n    loop invariant (input == 1) ==> (m == \\max int j; 0 <= j < x && input_j == 1);\n    loop invariant (input == 0) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n    loop invariant (N <= 0) || ((N > 0 && x = N) ==> (m == \\max int j; 0 <= j < N && input_j == 1));\n    loop invariant (N > 0 && x < N) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The variable N is an integer, the value of which is obtained from the function unknown_int().\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than N.\n\nLoop invariants:\n- Before the loop execution: \n    - N is a non-negative integer.\n    - x is a non-negative integer.\n    - m is a non-negative integer.\n- In every iteration of the loop:\n    - 0 <= x <= N\n    - If m < x, then input is always 0.\n- After the loop termination:\n    - 0 <= x <= N\n    - If m < N, then the input is always 0.\n    - If N > 0, then (0 <= m) && (m < N) ==> ((0 <= m) && (m < N)) is true.\n\nExplanation:\n- Before the loop execution, we know that all the variables must be non-negative integers, since they are indices or counters in the loop.\n- In every iteration of the loop, the value of x starts from 0 and increases by 1 in each iteration, until it reaches N. Therefore, we know that 0 <= x <= N holds in every iteration.\n- If m < x, then it means that we have encountered a non-zero input after the last time we updated m. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < x, then input is always 0.\n- After the loop termination, we know that the value of x is between 0 and N, since the loop terminates when x becomes equal to N. If m < N, then it means that we have encountered a non-zero input after the last time we updated m, but we have not updated m again before the loop terminated. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < N, then the input is always 0.\n- Finally, we know that if N > 0, then the assertion should hold. Therefore, we use an implication to make sure that the assertion is only checked when N > 0."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant ((input && m == x-1) || (!input && m == \\at(m, Pre)));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable m. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= m <= x;\n    loop invariant 0 <= x <= N;\n    loop invariant input == 0 || input == 1;\n    loop invariant (input == 0 ==> \\old(m) == m);\n    loop invariant (input == 1 ==> m == x);\n    loop variant N-x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: 0 <= m <= x;\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= x;\n    loop invariant m = 0 ==> forall integer k; 0 <= k < x ==> unknown_int() == 0;\n    loop invariant x < N ==> forall integer k; 0 <= k < N && k > x ==> unknown_int() == 0;\n    loop invariant (m > 0 && x == N) ==> input == 1;\n    loop invariant (N > 0) ==> (0 <= m) && (m < N);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: Assignment operators not allowed in annotations.",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\nloop invariant i6: (N > 0) ==> (0 <= m) && (m < N);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant 0 <= x <= N;\n    loop invariant 0 <= m <= N;\n    loop invariant (input == 1) ==> (m == \\max int j; 0 <= j < x && input_j == 1);\n    loop invariant (input == 0) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n    loop invariant (N <= 0) || ((N > 0 && x = N) ==> (m == \\max int j; 0 <= j < N && input_j == 1));\n    loop invariant (N > 0 && x < N) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'int'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The variable N is an integer, the value of which is obtained from the function unknown_int().\n- The variable x is initialized to 0.\n- The variable m is initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of x is less than N.\n\nLoop invariants:\n- Before the loop execution: \n    - N is a non-negative integer.\n    - x is a non-negative integer.\n    - m is a non-negative integer.\n- In every iteration of the loop:\n    - 0 <= x <= N\n    - If m < x, then input is always 0.\n- After the loop termination:\n    - 0 <= x <= N\n    - If m < N, then the input is always 0.\n    - If N > 0, then (0 <= m) && (m < N) ==> ((0 <= m) && (m < N)) is true.\n\nExplanation:\n- Before the loop execution, we know that all the variables must be non-negative integers, since they are indices or counters in the loop.\n- In every iteration of the loop, the value of x starts from 0 and increases by 1 in each iteration, until it reaches N. Therefore, we know that 0 <= x <= N holds in every iteration.\n- If m < x, then it means that we have encountered a non-zero input after the last time we updated m. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < x, then input is always 0.\n- After the loop termination, we know that the value of x is between 0 and N, since the loop terminates when x becomes equal to N. If m < N, then it means that we have encountered a non-zero input after the last time we updated m, but we have not updated m again before the loop terminated. Therefore, we know that input must be 0 in all subsequent iterations until we update m again. This implies that if m < N, then the input is always 0.\n- Finally, we know that if N > 0, then the assertion should hold. Therefore, we use an implication to make sure that the assertion is only checked when N > 0.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: Assignment operators not allowed in annotations.",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\nloop invariant i1: 0 <= x <= N;\nloop invariant i2: 0 <= m <= x;\nloop invariant i3: ((input && m == x-1) || (!input && m == \\at(m, Pre)));\nloop invariant i4: input == 0 || input == 1;\nloop invariant i5: (input == 0 ==> \\old(m) == m);\nloop invariant i6: (input == 1 ==> m == x);\nloop invariant i7: m = 0 ==> forall integer k; 0 <= k < x ==> unknown_int() == 0;\nloop invariant i8: x < N ==> forall integer k; 0 <= k < N && k > x ==> unknown_int() == 0;\nloop invariant i9: (m > 0 && x == N) ==> input == 1;\nloop invariant i10: (N > 0) ==> (0 <= m) && (m < N);\nloop invariant i11: 0 <= m <= N;\nloop invariant i12: (input == 1) ==> (m == \\max int j; 0 <= j < x && input_j == 1);\nloop invariant i13: (input == 0) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\nloop invariant i14: (N <= 0) || ((N > 0 && x = N) ==> (m == \\max int j; 0 <= j < N && input_j == 1));\nloop invariant i15: (N > 0 && x < N) ==> (m == \\max int j; 0 <= j < x-1 && input_j == 1);\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \t/*@\n\nloop invariant i2: 0 <= m <= x;\n\n\n\n\n\n\n\nloop invariant i10: (N > 0) ==> (0 <= m) && (m < N);\n\n\n\n\n\n*/\nwhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\n\t}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c"
        ],
        "skipped": [],
        "total": 187,
        "success_count": 80,
        "failure_count": 107,
        "success_rate": 0.42780748663101603
    }
}