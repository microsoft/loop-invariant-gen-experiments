{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  while(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}\n",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  while(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The macro `assume` takes a boolean expression and returns 0 if the expression is false.\n- There is an external function `unknown_int` which returns an integer value whose value is not known.\n\nLoop condition:\n- The loop continues to execute as long as the value of `x` is less than 100.\n\nPost-condition:\n- The value of `x` should be 100 after the loop terminates.\n\nLoop Invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant x >= 0 && x <= 100; \n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer i; 0 <= i < x ==> 0 <= m <= INT_MAX;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant x == 100 ==> \\true;\n    loop invariant x != 100 ==> \\false;\n*/\n```\nExplanation:\n- Before the loop execution, the value of `x` is 0, and it can take any value between 0 and 100, inclusive. Therefore, the first loop invariant is true.\n- In every iteration of the loop, the value of `x` is increased by 1, so it will always be between 0 and 100, inclusive. Additionally, the value of `m` is non-deterministic, so we cannot make any assumptions about its value. Therefore, we use a universal quantification to state that for all integers `i` between 0 and `x-1`, the value of `m` is between 0 and `INT_MAX`. This is because we assume that the external function `unknown_int` returns an integer value whose value is not known, but we know that it cannot exceed `INT_MAX`. Hence, the second loop invariant is true.\n- After the loop termination, the value of `x` can either be 100 or not. If the value of `x` is 100, then the loop has executed 100 times, and the post-condition is true. Therefore, we use an implication to state that if `x` is 100, then the invariant is true. Otherwise, if `x` is not 100, then the loop has not executed 100 times, and the post-condition is false. Therefore, we use another implication to state that if `x` is not 100, then the invariant is false.",
            "Pre-conditions:\n- The program takes no input.\n- The `unknown_int()` function returns an integer value with unknown value.\n\nVariable assignments:\n- `int x, m;`\n- `x = 0;`\n\nLoop condition:\n- `x < 100`\n\nPost-condition:\n- `x == 100`\n\nLoop invariants:\n- `0 <= x <= 100`\n- `m` is an integer with unknown value at the beginning of each iteration of the loop.\n- `x <= 100` (to show that the loop terminates)\n- `x == i ==> 0 <= i <= 100` (to show that `x` is always bounded by `0` and `100`)\n- `m == j ==> true` (since `m` is non-deterministic, we can use an implication to make the invariant trivially true at that location)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant m; // m is an integer with unknown value at the beginning of each iteration of the loop\n    loop invariant x <= 100;\n    loop invariant x == i ==> 0 <= i <= 100;\n    loop invariant m == j ==> true; // since m is non-deterministic, we can use an implication to make the invariant trivially true at that location\n*/\n```",
            "First, we note that the pre-condition is empty, and the program initializes `x` to `0`. \n\nThe loop condition is `x < 100`.\n\nNow, we can try to find some loop invariants. \n\nBefore the loop execution, we can note that `x` is equal to `0`, so we can have the invariant:\n```\n/*@ \n    loop invariant x >= 0;\n*/\n```\nIn every iteration of the loop, `x` is incremented by `1`, so we can add:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n*/\n```\nAlso, `m` is assigned a non-deterministic value in each iteration of the loop. Therefore, we can add the following invariant:\n```\n/*@ \n    loop invariant \\forall integer i; 0 <= i < x ==> \\valid(&m);\n*/\n```\nThis invariant states that `m` is a valid memory location in each iteration of the loop.\n\nFinally, after the loop termination, `x` is equal to `100`. If the assertion is not guarded by any condition, we can add the invariant:\n```\n/*@ \n    loop invariant x == 100;\n*/\n```\nHowever, in this case, the assertion is guarded by the condition that the loop has terminated, so we need to use implication:\n```\n/*@ \n    loop invariant (x == 100) ==> (unknown_int() == 0);\n*/\n```\nThis invariant states that if the loop has terminated (`x` is equal to `100`), then `unknown_int()` should return `0` for the assertion to hold.\n\nPutting everything together, we get the following loop invariants:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer i; 0 <= i < x ==> \\valid(&m);\n    loop invariant (x == 100) ==> (unknown_int() == 0);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x is assigned 0.\n\nLoop Condition:\n- x < 100\n\nLoop Invariants:\n- Before Loop Execution:\n    - x == 0\n- In Every Iteration:\n    - x <= 100\n    - m is a non-deterministic integer with no bounds.\n- After Loop Termination:\n    - x == 100\n    \nExplanation:\n\nBefore Loop Execution:\n- The variable x is assigned 0. Thus, the first loop invariant is x == 0.\n\nIn Every Iteration:\n- The loop condition is x < 100. Since x is incremented by 1 in each iteration, we can safely say that x <= 100.\n- The variable m is assigned the value of an unknown integer. Since we have no bounds on the value of m, we can say that m is a non-deterministic integer with no bounds.\n\nAfter Loop Termination:\n- The loop continues until x reaches 100. Hence, the final loop invariant is x == 100. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer m; // m is a non-deterministic integer with no bounds\n    loop invariant x == 100 ==> x == 100; \n*/\n``` \nNote that the final loop invariant uses an implication to ensure that the invariant is trivially true when x is not equal to 100.",
            "Pre-conditions: None.\n\nVariable assignments: \n- int x is assigned the value 0.\n\nLoop condition: x < 100.\n\nPost-condition: x == 100.\n\nLoop invariants:\n- Before loop execution: None.\n- In every iteration of the loop:\n    - x is greater than or equal to 0 and less than or equal to 100.\n    - m is a non-deterministic integer.\n- After loop termination: x == 100.\n\nExplanation:\n- Before loop execution, there are no loop invariants to state as there are no values assigned to x or m yet.\n- In every iteration of the loop, x is incremented by 1 and the maximum value it can take is 100. Therefore, x is always less than or equal to 100. Also, x starts from 0, so it is greater than or equal to 0.\n- The variable m is assigned a non-deterministic integer value, so its value can be anything and we cannot make any assumptions about it.\n- After loop termination, x should be equal to 100. This is the post-condition of the program.\n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer i; 0 <= i < x ==> m == unknown_int();\n*/\n```\nThe loop invariants state that x is always between 0 and 100, and that m is assigned a non-deterministic integer value in every iteration of the loop. These loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0 && x <= 100; \n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant m; // m is an integer with unknown value at the beginning of each iteration of the loop\n    loop invariant x <= 100;\n    loop invariant x == i ==> 0 <= i <= 100;\n    loop invariant m == j ==> true; // since m is non-deterministic, we can use an implication to make the invariant trivially true at that location\n*/",
            "/*@ \n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer m; // m is a non-deterministic integer with no bounds\n    loop invariant x == 100 ==> x == 100; \n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer i; 0 <= i < x ==> m == unknown_int();\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100; \n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100 is inductive.\nAssertion x == 100: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant m; // m is an integer with unknown value at the beginning of each iteration of the loop\n    loop invariant x <= 100;\n    loop invariant x == i ==> 0 <= i <= 100;\n    loop invariant m == j ==> true; // since m is non-deterministic, we can use an implication to make the invariant trivially true at that location\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= 100;\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nAssertion x == 100: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: x >= 0;\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1001,
                "annotations": "/*@ \n    loop invariant x == 0;\n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer m; // m is a non-deterministic integer with no bounds\n    loop invariant x == 100 ==> x == 100; \n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token 'invariant'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: 0 <= x <= 100;\nloop invariant i3: \\forall integer m;\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant \\forall integer i; 0 <= i < x ==> m == unknown_int();\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 10: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unexpected token 'invariant'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: 0 <= x <= 100;\nloop invariant i3: m;\nloop invariant i4: x <= 100;\nloop invariant i5: x == i ==> 0 <= i <= 100;\nloop invariant i6: m == j ==> true;\nloop invariant i7: x >= 0;\nloop invariant i8: x == 0;\nloop invariant i9: \\forall integer m;\nloop invariant i10: x == 100 ==> x == 100;\nloop invariant i11: \\forall integer i; 0 <= i < x ==> m == unknown_int();\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}\n",
        "combined_annotation_num_solver_calls": 1001,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: 0 <= x <= 100;\nloop invariant i3: m;\nloop invariant i4: x <= 100;\nloop invariant i5: x == i ==> 0 <= i <= 100;\nloop invariant i6: m == j ==> true;\nloop invariant i7: x >= 0;\nloop invariant i8: x == 0;\nloop invariant i9: \\forall integer m;\n\n\n*/\nwhile(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}\n    \n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c"
        ],
        "skipped": [],
        "total": 202,
        "success_count": 92,
        "failure_count": 110,
        "success_rate": 0.45544554455445546
    }
}