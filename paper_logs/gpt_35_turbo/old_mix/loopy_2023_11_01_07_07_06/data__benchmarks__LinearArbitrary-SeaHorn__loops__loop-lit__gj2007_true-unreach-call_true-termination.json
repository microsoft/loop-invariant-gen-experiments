{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `int x = 0`: initializes variable `x` to 0.\n- `int y = 50`: initializes variable `y` to 50.\n\nLoop condition:\n- `x < 100`: the loop will continue as long as `x` is less than 100.\n\nLoop invariants:\n- `0 <= x <= 100`: variable `x` is always between 0 and 100.\n- `50 <= y <= 100`: variable `y` is always between 50 and 100.\n- `x <= 50 ==> y == 50`: if `x` is less than or equal to 50, then `y` is equal to 50.\n- `y == x + 50`: `y` is always equal to `x` + 50.\n- `x >= 50 ==> y == x + 50`: if `x` is greater than or equal to 50, then `y` is equal to `x` + 50.\n\nPost-condition:\n- `y == 100`: `y` is equal to 100 after the loop terminates.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n    loop invariant x >= 100 ==> y == 100;\n*/\n{;\n    //@ assert y == 100;\n}\n```\nNote that we added an additional loop invariant `x >= 100 ==> y == 100` to ensure that `y` is equal to 100 after the loop terminates. We also used the implication `x >= 50 ==> y == x + 50` instead of an if-then statement. Finally, we used the guard condition `x >= 100` in an implication to ensure that the post-condition holds.",
            "Pre-conditions/Variable assignments:\n- Two integer variables x and y are declared and initialized to 0 and 50 respectively.\n\nLoop condition:\n- The loop continues as long as x is less than 100.\n\nLoop invariants:\n- Before the loop execution, x is less than or equal to 100 and y is equal to 50. (x <= 100) && (y == 50)\n- In every iteration of the loop, x is greater than or equal to 0 and less than or equal to 100, and y is greater than or equal to 50 and less than or equal to 100. \n    (0 <= x <= 100) && (50 <= y <= 100)\n- In every iteration of the loop, if x is less than 50, then y is always equal to 50. (x < 50) ==> (y == 50)\n- In every iteration of the loop, if x is greater than or equal to 50, then y is always equal to x + 50. (x >= 50) ==> (y == x + 50)\n- After the loop termination, y is equal to 100. y == 100\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant (x <= 100) && (y == 50);\n    loop invariant (0 <= x <= 100) && (50 <= y <= 100);\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n{;\n    //@ assert(y == 100);\n}\n``` \n\nNote that we did not need to use any non-deterministic function calls or make any assumptions about variables that have garbage values since all the variables are explicitly initialized.",
            "Step 1: Pre-conditions and variable assignments\n```\nPre-conditions: None\n\nVariable assignments:\n    x = 0;\n    y = 50;\n```\n\nStep 2: Loop condition\n```\nLoop condition: x < 100\n```\n\nStep 3: Loop invariants\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x+50);\n*/\n```\nExplanation:\n- The first loop invariant ensures that `x` is always between 0 and 100.\n- The second loop invariant ensures that `y` is always between 50 and 100.\n- The third loop invariant states that if `x` is less than 50, then `y` must be equal to 50.\n- The fourth loop invariant states that if `x` is greater than or equal to 50, then `y` must be equal to `x+50`.\n- The combination of these loop invariants implies that `y` will be equal to 100 when the loop terminates.\n- Note that since `x` and `y` are initialized at the beginning of the program, we do not need to add any additional implications to handle non-deterministic values.",
            "Pre-conditions or variable assignments: \n- `x` is assigned the value `0`.\n- `y` is assigned the value `50`.\n\nLoop condition: \n- The loop continues as long as `x` is less than `100`.\n\nLoop invariants:\n- Before the loop: `x >= 0 && x <= 100 && y >= 50 && y <= 100`\n- In every iteration: \n    - if `x < 50`, then `y == 50`\n    - if `x >= 50`, then `y == x + 50`\n- After the loop: `x == 100 && y == 100`\n\nExplanation:\n- Before the loop, we know that `x` is between 0 and 100, inclusive, and `y` is between 50 and 100, inclusive.\n- In every iteration, if `x` is less than 50, then we know that `y` has not been updated yet and remains equal to 50. If `x` is greater than or equal to 50, then we know that `y` has been updated to equal `x + 50`.\n- After the loop, we know that `x` is equal to 100, since the loop will terminate when `x` is no longer less than 100. We also know that `y` is equal to `x + 50`, which is 150, but the assertion only checks that `y` is equal to 100 when the loop terminates.",
            "Pre-conditions or variable assignments:\n- Two integer variables `x` and `y` are initialized to `0` and `50` respectively.\n\nLoop condition:\n- The loop executes while `x` is less than `100`.\n\nLoop invariants:\n- Before the loop execution: `x >= 0 && x <= 100 && y >= 50 && y <= 100`\n- In every iteration of the loop: \n\t- if `(x < 50)` then `(x < 100)`\n\t- if `(x >= 50)` then `(y == x + 50)`\n- After the loop termination: `x == 100 && y == 100`\n\nExplanation:\n- `x >= 0 && x <= 100 && y >= 50 && y <= 100` is true before the loop execution as `x` and `y` are initialized to values within the bounds specified.\n- In every iteration of the loop, `x` is incremented by 1. Therefore, if `x < 50` initially, then `x` will eventually become equal to `50`, after which `y` will be incremented by 1 in every iteration. Hence, if `(x < 50)` then `(x < 100)` is true in every iteration. If `x >= 50` initially, then `y` will be equal to `x + 50` in every iteration as `y` is incremented by 1 for every increment of `x`. Hence, if `(x >= 50)` then `(y == x + 50)` is true in every iteration.\n- After the loop termination, `x` will be equal to `100` as it is incremented in every iteration of the loop until it reaches `100`. Also, since `y` is incremented by 1 whenever `x` is greater than or equal to `50`, it will eventually become equal to `100` when `x` is equal to `100`. Hence, `x == 100 && y == 100` is true after the loop termination.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 0 && x <= 100 && y >= 50 && y <= 100;\n    loop invariant (x < 50) ==> (x < 100);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\n\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n}\n\n/*@ \n    assert y == 100;\n    requires x == 100;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n    loop invariant x >= 100 ==> y == 100;\n*/\n{;\n    //@ assert y == 100;\n}",
            "/*@ \n    loop invariant (x <= 100) && (y == 50);\n    loop invariant (0 <= x <= 100) && (50 <= y <= 100);\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n{;\n    //@ assert(y == 100);\n}",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x+50);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions or variable assignments: \n- `x` is assigned the value `0`.\n- `y` is assigned the value `50`.\n\nLoop condition: \n- The loop continues as long as `x` is less than `100`.\n\nLoop invariants:\n- Before the loop: `x >= 0 && x <= 100 && y >= 50 && y <= 100`\n- In every iteration: \n    - if `x < 50`, then `y == 50`\n    - if `x >= 50`, then `y == x + 50`\n- After the loop: `x == 100 && y == 100`\n\nExplanation:\n- Before the loop, we know that `x` is between 0 and 100, inclusive, and `y` is between 50 and 100, inclusive.\n- In every iteration, if `x` is less than 50, then we know that `y` has not been updated yet and remains equal to 50. If `x` is greater than or equal to 50, then we know that `y` has been updated to equal `x + 50`.\n- After the loop, we know that `x` is equal to 100, since the loop will terminate when `x` is no longer less than 100. We also know that `y` is equal to `x + 50`, which is 150, but the assertion only checks that `y` is equal to 100 when the loop terminates."
            ],
            "/*@ \n    loop invariant x >= 0 && x <= 100 && y >= 50 && y <= 100;\n    loop invariant (x < 50) ==> (x < 100);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\n\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n}\n\n/*@ \n    assert y == 100;\n    requires x == 100;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 50 ==> y == 50;\n    loop invariant y == x + 50;\n    loop invariant x >= 50 ==> y == x + 50;\n    loop invariant x >= 100 ==> y == 100;\n*/\n{;\n    //@ assert y == 100;\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == 50 is partially proven to be inductive.\nloop invariant y == x + 50 is established but not preserved.\nloop invariant x >= 50 ==> y == x + 50 is partially proven to be inductive.\nloop invariant x >= 100 ==> y == 100 is partially proven to be inductive.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= 50 ==> y == 50;\n\n\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant (x <= 100) && (y == 50);\n    loop invariant (0 <= x <= 100) && (50 <= y <= 100);\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\nwhile(x < 100) {\n    if (x < 50) {\n        x = x + 1;\n    } else {\n        x = x + 1;\n        y = y + 1;\n    }\n}\n{;\n    //@ assert(y == 100);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (x <= 100) && (y == 50) is partially proven to be inductive.\nloop invariant (0 <= x <= 100) && (50 <= y <= 100) is partially proven to be inductive.\nloop invariant (x < 50) ==> (y == 50) is partially proven to be inductive.\nloop invariant (x >= 50) ==> (y == x + 50) is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\n\n\nloop invariant i3: (x < 50) ==> (y == 50);\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x < 50) ==> (y == 50);\n    loop invariant (x >= 50) ==> (y == x+50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is established but not preserved.\nloop invariant (x < 50) ==> (y == 50) is partially proven to be inductive.\nloop invariant (x >= 50) ==> (y == x+50) is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: (x < 50) ==> (y == 50);\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions or variable assignments: \n- `x` is assigned the value `0`.\n- `y` is assigned the value `50`.\n\nLoop condition: \n- The loop continues as long as `x` is less than `100`.\n\nLoop invariants:\n- Before the loop: `x >= 0 && x <= 100 && y >= 50 && y <= 100`\n- In every iteration: \n    - if `x < 50`, then `y == 50`\n    - if `x >= 50`, then `y == x + 50`\n- After the loop: `x == 100 && y == 100`\n\nExplanation:\n- Before the loop, we know that `x` is between 0 and 100, inclusive, and `y` is between 50 and 100, inclusive.\n- In every iteration, if `x` is less than 50, then we know that `y` has not been updated yet and remains equal to 50. If `x` is greater than or equal to 50, then we know that `y` has been updated to equal `x + 50`.\n- After the loop, we know that `x` is equal to 100, since the loop will terminate when `x` is no longer less than 100. We also know that `y` is equal to `x + 50`, which is 150, but the assertion only checks that `y` is equal to 100 when the loop terminates.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100 && y >= 50 && y <= 100;\n    loop invariant (x < 50) ==> (x < 100);\n    loop invariant (x >= 50) ==> (y == x + 50);\n*/\n\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n}\n\n/*@ \n    assert y == 100;\n    requires x == 100;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100 && y >= 50 && y <= 100 is established but not preserved.\nloop invariant (x < 50) ==> (x < 100) is partially proven to be inductive.\nloop invariant (x >= 50) ==> (y == x + 50) is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\n\nloop invariant i2: (x < 50) ==> (x < 100);\n\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is partially proven to be inductive.\nloop invariant x <= 50 ==> y == 50 is partially proven to be inductive.\nloop invariant y == x + 50 is established but not preserved.\nloop invariant x >= 50 ==> y == x + 50 is partially proven to be inductive.\nloop invariant x >= 100 ==> y == 100 is partially proven to be inductive.\nloop invariant (x <= 100) && (y == 50) is partially proven to be inductive.\nloop invariant (0 <= x <= 100) && (50 <= y <= 100) is partially proven to be inductive.\nloop invariant (x < 50) ==> (y == 50) is partially proven to be inductive.\nloop invariant (x >= 50) ==> (y == x + 50) is partially proven to be inductive.\nloop invariant (x >= 50) ==> (y == x+50) is partially proven to be inductive.\nloop invariant x >= 0 && x <= 100 && y >= 50 && y <= 100 is partially proven to be inductive.\nloop invariant (x < 50) ==> (x < 100) is partially proven to be inductive.\nAssertion y == 100: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 50 <= y <= 100;\nloop invariant i3: x <= 50 ==> y == 50;\nloop invariant i4: y == x + 50;\nloop invariant i5: x >= 50 ==> y == x + 50;\nloop invariant i6: x >= 100 ==> y == 100;\nloop invariant i7: (x <= 100) && (y == 50);\nloop invariant i8: (0 <= x <= 100) && (50 <= y <= 100);\nloop invariant i9: (x < 50) ==> (y == 50);\nloop invariant i10: (x >= 50) ==> (y == x + 50);\nloop invariant i11: (x >= 50) ==> (y == x+50);\nloop invariant i12: x >= 0 && x <= 100 && y >= 50 && y <= 100;\nloop invariant i13: (x < 50) ==> (x < 100);\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= 50 ==> y == 50;\n\n\n\n\n\nloop invariant i9: (x < 50) ==> (y == 50);\n\n\n\nloop invariant i13: (x < 50) ==> (x < 100);\n*/\nwhile(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n\n    return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c"
        ],
        "skipped": [],
        "total": 123,
        "success_count": 51,
        "failure_count": 72,
        "success_rate": 0.4146341463414634
    }
}