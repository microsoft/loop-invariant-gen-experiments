{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- x is an integer variable that can have any value.\n- y is an integer variable that can have any value.\n\nLoop Condition:\n- The loop executes as long as the value returned by unknown() function is non-zero. The value returned by the unknown() function is non-deterministic.\n\nPost-condition:\n- If x is greater than or equal to 4, then y must be strictly greater than 0.\n\nLoop Invariants:\n- Before the loop execution:\n    - `0 <= x <= 2`\n    - `0 <= y <= 2`\n- In every iteration of the loop:\n    - `x >= x_old`\n    - `y >= y_old`\n    - where x_old and y_old are the values of x and y before the execution of the loop body.\n- After the loop termination:\n    - if `y <= 0`, then `x < 4`\n        - `(y <= 0) ==> (x < 4)`\n    - if `y > 0`, then the assertion must hold true:\n        - `(y > 0) ==> (x >= 4)`\n    - `0 <= x <= 2`\n    - `0 <= y <= 2`\n\nPutting all the loop invariants together:\n\n```\n/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= x_old;\nloop invariant y >= y_old;\nloop invariant (y <= 0) ==> (x < 4);\nloop invariant (y > 0) ==> (x >= 4);\n*/\n\nwhile(unknown()) {\n    x += 2;\n    y += 2;\n}\n\nif( y >= 0 ) \n    if( y <= 0 ) \n        if( 4 <= x ) \n        {\n            ;\n            //@ assert( x < 4 );\n        }\n```\n\nNote: Since the value returned by the unknown() function is non-deterministic, we cannot make any assumptions about the values of x and y after the loop termination. Therefore, we only add the minimum and maximum bounds for x and y before the loop execution.",
            "Pre-conditions:\n- x is an integer variable initialized with an unknown value.\n- y is an integer variable initialized with an unknown value.\n\nVariable bounds:\n- 0 <= x <= 2\n- 0 <= y <= 2\n\nLoop invariant(s):\n- x is always even\n- y is always even\n- if y >= 0, then x < 4\n\nExplanation:\n- We can see that the loop iterates indefinitely until the condition `unknown()` evaluates to false. Therefore, we don't have a loop termination condition to use in the loop invariant.\n- We know that within the loop, x and y are incremented by 2 in each iteration. Therefore, x and y are always even.\n- The post-condition states that if y >= 0, then x < 4. We can use this to form a loop invariant by adding an implication: if y >= 0, then x < 4 is true after each iteration of the loop. Since x and y are incremented by 2 in each iteration, we can also say that if y >= 0, then (x+2) < 4 after each iteration of the loop. We can combine these two implications to form the final loop invariant:\n```\n/*@ \n   loop invariant 0 <= x <= 2 && 0 <= y <= 2 && (y >= 0 ==> x < 4);\n   loop invariant x % 2 == 0 && y % 2 == 0;\n*/\n``` \nNote that we've included the variable bounds as well as the loop invariant we derived from the post-condition. We've also added a loop invariant to ensure that x and y are always even.",
            "Pre-conditions:\n- The variables x and y are initialized with non-deterministic values.\n- The values of x and y are assumed to be between 0 and 2 (inclusive).\n\nLoop condition:\n- The loop continues as long as the return value of unknown() is non-zero.\n\nPost-condition:\n- If the loop terminates, the assertion x < 4 holds if y <= 0 and 4 <= x.\n\nLoop invariants:\n- Before the loop execution: x and y are between 0 and 2 (inclusive).\n```\n/*@ \n    loop invariant 0 <= x <= 2;\n    loop invariant 0 <= y <= 2;\n*/\n```\n- In every iteration of the loop: x and y increase by 2.\n```\n/*@ \n    loop invariant (x % 2 == 0);\n    loop invariant (y % 2 == 0);\n*/\n```\n- After the loop termination:\n    - If the loop terminates, then y is non-negative.\n    ```\n    /*@\n        loop invariant (y >= 0);\n    */\n    ```\n    - If the loop terminates and y <= 0, then x < 4.\n    ```\n    /*@\n        loop invariant (y <= 0 ==> x < 4);\n    */\n    ```\n    - If the loop terminates and 4 <= x, then y <= 0.\n    ```\n    /*@\n        loop invariant (x >= 4 ==> y <= 0);\n    */\n    ```\n    - If the loop terminates and x < 4, then the post-condition holds.\n    ```\n    /*@\n        loop invariant (x < 4 ==> (y <= 0 ==> \\at(1, unknown) && 4 <= x ==> \\at(1, unknown)));\n    */\n    ```\nNote that we use the \\at(1, unknown) notation to indicate that the value of unknown() is nondeterministic at the end of the loop. We use implications to take care of the conditional nature of the code and to make the loop invariant trivially true for non-deterministic variables.",
            "Pre-conditions:\n- `x` is an integer variable with a value between 0 and 2 (inclusive).\n- `y` is an integer variable with a value between 0 and 2 (inclusive).\n\nLoop condition:\n- The loop executes while the value returned by `unknown()` is non-zero.\n\nPost-condition:\n- If `y` is greater than or equal to 0, and `y` is less than or equal to 0, and `x` is greater than or equal to 4, then `x` must be less than 4.\n\nLoop invariants:\n- `0 <= x <= 6`\n- `0 <= y <= 6`\n- `x - y <= 4`\n- `y - x <= 4`\n- If the loop has not yet started executing, then the above invariants are true trivially.\n- If the loop has already terminated, then the above invariants are true trivially.\n- In every iteration of the loop, the value of `x` increases by 2 and the value of `y` increases by 2.\n- If `y >= 0` and `y <= 0` and `x >= 4`, then `x < 4`.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant 0 <= y <= 6;\n    loop invariant x - y <= 4;\n    loop invariant y - x <= 4;\n    loop invariant (unknown() != 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop invariant (unknown() == 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop assigns x, y;\n    loop variant 1;\n*/\n```\nNote that we use the loop variant `1` because we don't have any information about the number of iterations of the loop.",
            "We start by analyzing the program and making a note of the pre-conditions or variable assignments in the program. \n\nPre-conditions:\n- `x` and `y` are initialized with non-deterministic values.\n- `x` and `y` are bounded between 0 and 2 (inclusive).\n\nNext, we analyze the loop body and make a note of the loop condition. \n\nLoop condition:\n- `unknown()`\n\nSince `unknown()` is a non-deterministic function, we cannot make any assumptions about the loop condition. Therefore, we cannot use the loop condition as an invariant.\n\nNow, we output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= 4;\n    loop invariant 0 <= y <= 4;\n    loop invariant x == \\old(x) + 2*n;\n    loop invariant y == \\old(y) + 2*n;\n    loop invariant y <= 0 ==> x < 4;\n*/\n```\nExplanation of loop invariants:\n- `0 <= x <= 4` and `0 <= y <= 4` are the bounds on the variables `x` and `y`, respectively.\n- `x == \\old(x) + 2*n` and `y == \\old(y) + 2*n` are the relations between the variables `x` and `y` in every iteration of the loop, where `n` is the number of iterations.\n- `y <= 0 ==> x < 4` is the implication that takes care of the conditional nature of the assertion. If `y` is less than or equal to 0, then `x` must be less than 4 for the assertion to be true.\n\nNote that since `unknown()` is non-deterministic, we cannot make any assumptions about the values of `x` and `y` after the loop terminates. Therefore, we do not need to add any post-loop invariants.\n\nLastly, we add conjunctions that bound the maximum and minimum values that variables can take, if such bounds exist. In this program, we have already added the bounds as loop invariants."
        ],
        "annotation_blocks": [
            "/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= x_old;\nloop invariant y >= y_old;\nloop invariant (y <= 0) ==> (x < 4);\nloop invariant (y > 0) ==> (x >= 4);\n*/\n\nwhile(unknown()) {\n    x += 2;\n    y += 2;\n}\n\nif( y >= 0 ) \n    if( y <= 0 ) \n        if( 4 <= x ) \n        {\n            ;\n            //@ assert( x < 4 );\n        }",
            "/*@ \n   loop invariant 0 <= x <= 2 && 0 <= y <= 2 && (y >= 0 ==> x < 4);\n   loop invariant x % 2 == 0 && y % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2;\n    loop invariant 0 <= y <= 2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant 0 <= y <= 6;\n    loop invariant x - y <= 4;\n    loop invariant y - x <= 4;\n    loop invariant (unknown() != 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop invariant (unknown() == 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop assigns x, y;\n    loop variant 1;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 4;\n    loop invariant 0 <= y <= 4;\n    loop invariant x == \\old(x) + 2*n;\n    loop invariant y == \\old(y) + 2*n;\n    loop invariant y <= 0 ==> x < 4;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 6,
                "annotations": "/*@\nloop invariant 0 <= x <= 2;\nloop invariant 0 <= y <= 2;\nloop invariant x >= x_old;\nloop invariant y >= y_old;\nloop invariant (y <= 0) ==> (x < 4);\nloop invariant (y > 0) ==> (x >= 4);\n*/\n\nwhile(unknown()) {\n    x += 2;\n    y += 2;\n}\n\nif( y >= 0 ) \n    if( y <= 0 ) \n        if( 4 <= x ) \n        {\n            ;\n            //@ assert( x < 4 );\n        }",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable x_old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n   loop invariant 0 <= x <= 2 && 0 <= y <= 2 && (y >= 0 ==> x < 4);\n   loop invariant x % 2 == 0 && y % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 && 0 <= y <= 2 && (y >= 0 ==> x < 4) is established but not preserved.\nloop invariant x % 2 == 0 && y % 2 == 0 is preserved but not established.\nAssertion x < 4: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2;\n    loop invariant 0 <= y <= 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 is established but not preserved.\nloop invariant 0 <= y <= 2 is established but not preserved.\nAssertion x < 4: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant 0 <= y <= 6;\n    loop invariant x - y <= 4;\n    loop invariant y - x <= 4;\n    loop invariant (unknown() != 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop invariant (unknown() == 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\n    loop assigns x, y;\n    loop variant 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\nloop invariant i3: x - y <= 4;\nloop invariant i4: y - x <= 4;\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 4;\n    loop invariant 0 <= y <= 4;\n    loop invariant x == \\old(x) + 2*n;\n    loop invariant y == \\old(y) + 2*n;\n    loop invariant y <= 0 ==> x < 4;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 27: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\nloop invariant i1: 0 <= x <= 2;\nloop invariant i2: 0 <= y <= 2;\nloop invariant i3: x >= x_old;\nloop invariant i4: y >= y_old;\nloop invariant i5: (y <= 0) ==> (x < 4);\nloop invariant i6: (y > 0) ==> (x >= 4);\nloop invariant i7: 0 <= x <= 2 && 0 <= y <= 2 && (y >= 0 ==> x < 4);\nloop invariant i8: x % 2 == 0 && y % 2 == 0;\nloop invariant i9: 0 <= x <= 6;\nloop invariant i10: 0 <= y <= 6;\nloop invariant i11: x - y <= 4;\nloop invariant i12: y - x <= 4;\nloop invariant i13: (unknown() != 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\nloop invariant i14: (unknown() == 0) ==> (0 <= x <= 6 && 0 <= y <= 6 && x - y <= 4 && y - x <= 4);\nloop invariant i15: 0 <= x <= 4;\nloop invariant i16: 0 <= y <= 4;\nloop invariant i17: x == \\old(x) + 2*n;\nloop invariant i18: y == \\old(y) + 2*n;\nloop invariant i19: y <= 0 ==> x < 4;\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "combined_annotation_num_solver_calls": 14,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  /*@\n\n\n\n\n\n\n\n\n\n\nloop invariant i11: x - y <= 4;\nloop invariant i12: y - x <= 4;\n\n\n\n\n\n\n\n*/\nwhile( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n\n  }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c"
        ],
        "skipped": [],
        "total": 90,
        "success_count": 40,
        "failure_count": 50,
        "success_rate": 0.4444444444444444
    }
}