{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       while(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       while(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's note the pre-conditions or variable assignments in the program:\n- `x` is initialized to 0\n- `y` is initialized to 50\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop runs as long as `x` is less than 100\n\nNext, let's find loop invariants that are true:\n- Before the loop execution:\n    - `x >= 0`\n    - `y >= 50`\n- In every iteration of the loop:\n    - `0 <= x <= 100`\n    - `50 <= y <= 100`\n    - If `x > 50`, then `y > 50`\n- After the loop termination:\n    - `x == 100`\n    - `y == 100`\n\nTo see why these loop invariants hold, let's examine each one in more detail:\n- Before the loop execution:\n    - `x >= 0`: `x` is initialized to 0, so this is true\n    - `y >= 50`: `y` is initialized to 50, so this is true\n- In every iteration of the loop:\n    - `0 <= x <= 100`: `x` is incremented by 1 in each iteration and the loop continues as long as `x` is less than 100, so this is true\n    - `50 <= y <= 100`: `y` is incremented by 1 if `x` is greater than 50, so `y` is always at least 50 and at most 100, so this is true\n    - If `x > 50`, then `y > 50`: this is true because of the previous invariant and the fact that `y` is incremented only when `x` is greater than 50\n- After the loop termination:\n    - `x == 100`: the loop terminates when `x` is no longer less than 100, and the only way to exit the loop is by incrementing `x`, so this is true\n    - `y == 100`: `y` is incremented by 1 in each iteration of the loop where `x` is greater than 50, so `y` is incremented 50 times, making its final value 100, so this is true\n\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 100;\n    loop invariant y <= 100;\n    loop invariant (x <= 50) ==> (y <= 50);\n    loop invariant (x > 50) ==> (y > 50);\n*/\n```\nNote that we do not need to include the pre-conditions as loop invariants, since they hold before the loop execution. Similarly, the assertion `y == 100` is already implied by the loop invariants and the fact that the loop terminates when `x` is equal to 100. Therefore, we do not need to include it as a loop invariant.",
            "Pre-conditions:\n- The program assumes the existence of a macro `assume(e)` that returns 0 if the condition e is not satisfied. \n\nVariable Assignments:\n- `x` is initialized to 0\n- `y` is initialized to 50\n\nLoop Condition:\n- `x<100`\n\nLoop Body:\n- `x=x+1`\n- `if (x>50) { y=y+1; }`\n\nPost-condition:\n- `y==100`\n\nLoop Invariants:\n1. `0 <= x <= 100`  (since `x` is initialized to 0 and increments by 1 in each iteration of the loop, `x` will always be between 0 and 100)\n2. `50 <= y <= 100`  (since `y` is initialized to 50 and increments by 1 only when `x > 50`, `y` will always be between 50 and 100)\n3. `(x > 50) ==> (y > 50)`  (if `x` is greater than 50, `y` must also be greater than 50 since it is only incremented when `x > 50`)\n4. `(x <= 50) ==> (y = 50)`  (if `x` is less than or equal to 50, `y` must be equal to 50 since it is not incremented in that case)\n5. `(x = 100) ==> (y = 100)`  (when the loop terminates, `x` must be equal to 100, and therefore `y` must also be equal to 100 since it is incremented only when `x > 50`)\n\nThe loop invariants can be written as follows:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x > 50) ==> (y > 50);\n    loop invariant (x <= 50) ==> (y == 50);\n    loop invariant (x == 100) ==> (y == 100);\n*/\n```",
            "Pre-conditions and variable assignments:\n- x and y are integer variables.\n- x is assigned the value 0.\n- y is assigned the value 50.\n\nLoop condition:\n- The loop will continue as long as x is less than 100.\n\nLoop body:\n- x is incremented by 1 in each iteration.\n- If x is greater than 50, then y is incremented by 1.\n\nPost-condition:\n- y is equal to 100.\n\nLoop Invariants:\n- Before the loop execution, y is assigned a value of 50. Therefore, y is greater than or equal to 50. This can be expressed as: `/*@ loop invariant y >= 50; */`\n- In each iteration of the loop, x is incremented by 1. Therefore, x is always less than or equal to 100. This can be expressed as: `/*@ loop invariant x <= 100; */`\n- In each iteration of the loop, if x is greater than 50, then y is incremented by 1. Therefore, y is greater than or equal to the number of times the loop has executed the statement `y = y + 1;`. This can be expressed as: `/*@ loop invariant y >= 50 + (x - 50)/2; */`\n- After the loop execution, x is greater than or equal to 100. Therefore, the implication `x >= 100 ==> y == 100` holds. This can be expressed as: `/*@ loop invariant x >= 100 ==> y == 100; */`\n\nPutting everything together, the loop invariants for the given while loop are:\n```\n/*@ \n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y >= 50 + (x - 50)/2;\n    loop invariant x >= 100 ==> y == 100;\n*/\n```",
            "Pre-conditions:\n- The program takes no input.\n- The variables x and y are declared and initialized to 0 and 50 respectively.\n\nLoop condition:\n- The loop continues as long as x is less than 100.\n\nLoop invariants:\n- Before the loop execution: \n    - x >= 0 && x <= 100\n    - y >= 50 && y <= 100\n- In every iteration of the loop:\n    - 0 <= x <= 100\n    - 50 <= y <= 100\n    - If x > 50, then y = x\n- After the loop termination:\n    - y = 100\n\nExplanation:\n- Before the loop, x is in the range 0 to 100 because it was initialized to 0 and the loop continues as long as x is less than 100.\n- Similarly, y is in the range 50 to 100 because it was initialized to 50 and the loop only increments y if x is greater than 50.\n- In every iteration of the loop, x is in the range 0 to 100 because it is incremented by 1 each time. Similarly, y is in the range 50 to 100 because it is either incremented by 1 or set equal to x, which is in the range 0 to 100.\n- The condition \"If x > 50, then y = x\" is an implication that holds true because if x is greater than 50, then y is incremented by 1 in the loop, which means that it becomes equal to x.\n- After the loop termination, y must be equal to 100 because it is incremented by 1 for each of the 50 values of x greater than 50. Therefore, y must be 100. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= y;\n    loop invariant (x > 50) ==> (y == x);\n*/\n```",
            "Pre-conditions:\n- `x` and `y` are integer variables with garbage values.\n\nVariable assignments:\n- `x` is assigned 0.\n- `y` is assigned 50.\n\nLoop condition:\n- `x < 100`\n\nLoop body:\n- `x = x + 1`\n- `if (x > 50) { y = y + 1; }`\n\nPost-condition:\n- `y == 100`\n\nLoop invariants:\n- `0 <= x <= 100`\n- `50 <= y <= 100`\n- `y - 50 <= x <= 100 ==> y == x + 50`\n\nExplanation of the loop invariants:\n- The first invariant ensures that `x` stays within the bounds of 0 and 100, which are the minimum and maximum values that `x` can take in the loop.\n- The second invariant ensures that `y` stays within the bounds of 50 and 100, which are the minimum and maximum values that `y` can take in the loop.\n- The third invariant relates `x` and `y` with an implication. If `y - 50 <= x <= 100` holds, then `x` has to be greater than or equal to 50. This means that if `x` is greater than 50, then `y` must have been incremented by 1 in the current iteration. Therefore, `y` must be equal to `x + 50`. This invariant holds for all iterations of the loop.\n- Since there are no non-deterministic variables in the program, no additional implications are needed to make the invariants trivially true."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 100;\n    loop invariant y <= 100;\n    loop invariant (x <= 50) ==> (y <= 50);\n    loop invariant (x > 50) ==> (y > 50);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x > 50) ==> (y > 50);\n    loop invariant (x <= 50) ==> (y == 50);\n    loop invariant (x == 100) ==> (y == 100);\n*/",
            "/*@ \n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y >= 50 + (x - 50)/2;\n    loop invariant x >= 100 ==> y == 100;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= y;\n    loop invariant (x > 50) ==> (y == x);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x` and `y` are integer variables with garbage values.\n\nVariable assignments:\n- `x` is assigned 0.\n- `y` is assigned 50.\n\nLoop condition:\n- `x < 100`\n\nLoop body:\n- `x = x + 1`\n- `if (x > 50) { y = y + 1; }`\n\nPost-condition:\n- `y == 100`\n\nLoop invariants:\n- `0 <= x <= 100`\n- `50 <= y <= 100`\n- `y - 50 <= x <= 100 ==> y == x + 50`\n\nExplanation of the loop invariants:\n- The first invariant ensures that `x` stays within the bounds of 0 and 100, which are the minimum and maximum values that `x` can take in the loop.\n- The second invariant ensures that `y` stays within the bounds of 50 and 100, which are the minimum and maximum values that `y` can take in the loop.\n- The third invariant relates `x` and `y` with an implication. If `y - 50 <= x <= 100` holds, then `x` has to be greater than or equal to 50. This means that if `x` is greater than 50, then `y` must have been incremented by 1 in the current iteration. Therefore, `y` must be equal to `x + 50`. This invariant holds for all iterations of the loop.\n- Since there are no non-deterministic variables in the program, no additional implications are needed to make the invariants trivially true."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= 100;\n    loop invariant y <= 100;\n    loop invariant (x <= 50) ==> (y <= 50);\n    loop invariant (x > 50) ==> (y > 50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is established but not preserved.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y <= 100 is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y <= 50) is partially proven to be inductive.\nloop invariant (x > 50) ==> (y > 50) is partially proven to be inductive.\nAssertion y == 100: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: x <= 100;\n\nloop invariant i5: (x <= 50) ==> (y <= 50);\n\n*/\nwhile(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant (x > 50) ==> (y > 50);\n    loop invariant (x <= 50) ==> (y == 50);\n    loop invariant (x == 100) ==> (y == 100);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is established but not preserved.\nloop invariant (x > 50) ==> (y > 50) is partially proven to be inductive.\nloop invariant (x <= 50) ==> (y == 50) is partially proven to be inductive.\nloop invariant (x == 100) ==> (y == 100) is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       /*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: (x > 50) ==> (y > 50);\nloop invariant i4: (x <= 50) ==> (y == 50);\n\n*/\nwhile(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y >= 50 + (x - 50)/2;\n    loop invariant x >= 100 ==> y == 100;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 50 is partially proven to be inductive.\nloop invariant x <= 100 is partially proven to be inductive.\nloop invariant y >= 50 + (x - 50)/2 is partially proven to be inductive.\nloop invariant x >= 100 ==> y == 100 is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       /*@\nloop invariant i1: y >= 50;\nloop invariant i2: x <= 100;\nloop invariant i3: y >= 50 + (x - 50)/2;\n\n*/\nwhile(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 50 <= y <= 100;\n    loop invariant x <= y;\n    loop invariant (x > 50) ==> (y == x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is partially proven to be inductive.\nloop invariant 50 <= y <= 100 is established but not preserved.\nloop invariant x <= y is partially proven to be inductive.\nloop invariant (x > 50) ==> (y == x) is established but not preserved.\nAssertion y == 100: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       /*@\nloop invariant i1: 0 <= x <= 100;\n\n\n\n*/\nwhile(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x` and `y` are integer variables with garbage values.\n\nVariable assignments:\n- `x` is assigned 0.\n- `y` is assigned 50.\n\nLoop condition:\n- `x < 100`\n\nLoop body:\n- `x = x + 1`\n- `if (x > 50) { y = y + 1; }`\n\nPost-condition:\n- `y == 100`\n\nLoop invariants:\n- `0 <= x <= 100`\n- `50 <= y <= 100`\n- `y - 50 <= x <= 100 ==> y == x + 50`\n\nExplanation of the loop invariants:\n- The first invariant ensures that `x` stays within the bounds of 0 and 100, which are the minimum and maximum values that `x` can take in the loop.\n- The second invariant ensures that `y` stays within the bounds of 50 and 100, which are the minimum and maximum values that `y` can take in the loop.\n- The third invariant relates `x` and `y` with an implication. If `y - 50 <= x <= 100` holds, then `x` has to be greater than or equal to 50. This means that if `x` is greater than 50, then `y` must have been incremented by 1 in the current iteration. Therefore, `y` must be equal to `x + 50`. This invariant holds for all iterations of the loop.\n- Since there are no non-deterministic variables in the program, no additional implications are needed to make the invariants trivially true.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": true,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant 50 <= y <= 100 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 100 is inductive.\nloop invariant (x <= 50) ==> (y <= 50) is inductive.\nloop invariant (x > 50) ==> (y > 50) is inductive.\nloop invariant (x <= 50) ==> (y == 50) is inductive.\nloop invariant (x == 100) ==> (y == 100) is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant y >= 50 + (x - 50)/2 is inductive.\nloop invariant x >= 100 ==> y == 100 is inductive.\nloop invariant x <= y is inductive.\nloop invariant (x > 50) ==> (y == x) is inductive.\nAssertion y == 100: Valid",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       /*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: 50 <= y <= 100;\nloop invariant i3: x <= 100;\nloop invariant i4: y <= 100;\nloop invariant i5: (x <= 50) ==> (y <= 50);\nloop invariant i6: (x > 50) ==> (y > 50);\nloop invariant i7: (x <= 50) ==> (y == 50);\nloop invariant i8: (x == 100) ==> (y == 100);\nloop invariant i9: y >= 50;\nloop invariant i10: y >= 50 + (x - 50)/2;\nloop invariant i11: x >= 100 ==> y == 100;\nloop invariant i12: x <= y;\nloop invariant i13: (x > 50) ==> (y == x);\n*/\nwhile(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\n\treturn 0;\n}"
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c"
        ],
        "skipped": [],
        "total": 226,
        "success_count": 105,
        "failure_count": 121,
        "success_rate": 0.4646017699115044
    }
}