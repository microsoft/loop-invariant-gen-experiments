{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}\n",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's consider the preconditions and variable assignments in the program:\n\nPrecondition: \n- `n` is an unsigned integer that is initialized to the result of the `unknown_int()` function. We don't know anything about the value of `n`, except that it is less than or equal to `SIZE`.\n\nVariable Assignments:\n- `i`, `j`, `k`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are all initialized to `0`.\n- `SIZE` is initialized to `20000001`.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- `l < n`\n\nNow, let's output the necessary loop invariants:\n\n/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant 0 <= v5 <= l;\n    loop invariant 0 <= v6 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4+v5+v6) == l;\n    loop invariant (l <= n);\n*/\n\nExplanation:\n\n- The loop invariants for all the variables ensure that their values are always non-negative and do not exceed the value of `l`, which is the loop counter.\n- The loop invariant `(i+j+k+v1+v2+v3+v4+v5+v6) == l` ensures that the sum of all the variables is equal to `l`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination.\n- The loop invariant `(l <= n)` ensures that `l` never exceeds the value of `n`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination.",
            "First, let's analyze the pre-conditions and variable assignments in the program.\n\nPre-conditions:\n- The program assumes the existence of a function `unknown_int()` that returns an integer value.\n- The program assumes that `n` is an unsigned integer value less than or equal to `SIZE`.\n\nVariable assignments:\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are initialized to 0.\n- `SIZE` is assigned the value 20000001.\n\nNext, let's analyze the loop body and the loop condition.\n\nLoop condition:\n- The loop executes while `l` is less than `n`.\n\nLoop body:\n- Depending on the value of `l` modulo various numbers, different variables are incremented.\n- `l` is incremented by 1.\n\nTo verify the post-condition of the program, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nLoop invariants:\n- Before the loop execution, the values of all variables are 0.\n- In every iteration of the loop, `l` is incremented by 1 and the values of `i`, `j`, `k`, `v1`, `v2`, `v3`, `v4`, `v5`, or `v6` are incremented based on the value of `l` modulo various numbers.\n- After the loop termination, the sum of the values of `i`, `j`, `k`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` is equal to the final value of `l`.\n\nLet's express these loop invariants in ACSL annotations:\n\n```\n/*@ \n  loop invariant 0 <= n <= SIZE;\n  loop invariant v1+v2+v3+v4+v5+v6+i+j+k+l == (\\at(l, Pre) + (\\at(l, Here) - \\at(l, Pre)));\n  loop invariant 0 <= v1 <= l/7+1;\n  loop invariant 0 <= v2 <= l/6+1;\n  loop invariant 0 <= v3 <= l/5+1;\n  loop invariant 0 <= v4 <= l/4+1;\n  loop invariant 0 <= v5 <= l/8+1;\n  loop invariant 0 <= v6 <= l/9+1;\n  loop invariant 0 <= i <= l/3+1;\n  loop invariant 0 <= j <= l/2+1;\n  loop invariant 0 <= k <= l;\n  loop invariant l <= n; \n  loop assigns l, i, j, k, v1, v2, v3, v4, v5, v6;\n*/\n```\nLet's explain each loop invariant:\n- The first loop invariant specifies that `n` is between 0 and `SIZE`.\n- The second loop invariant specifies that the sum of all variables is equal to the initial value of `l` plus the number of iterations of the loop.\n- The third loop invariant specifies that `v1` is between 0 and the quotient of `l` divided by 7 plus 1.\n- The fourth loop invariant specifies that `v2` is between 0 and the quotient of `l` divided by 6 plus 1.\n- The fifth loop invariant specifies that `v3` is between 0 and the quotient of `l` divided by 5 plus 1.\n- The sixth loop invariant specifies that `v4` is between 0 and the quotient of `l` divided by 4 plus 1.\n- The seventh loop invariant specifies that `v5` is between 0 and the quotient of `l` divided by 8 plus 1.\n- The eighth loop invariant specifies that `v6` is between 0 and the quotient of `l` divided by 9 plus 1.\n- The ninth loop invariant specifies that `i` is between 0 and the quotient of `l` divided by 3 plus 1.\n- The tenth loop invariant specifies that `j` is between 0 and the quotient of `l` divided by 2 plus 1.\n- The eleventh loop invariant specifies that `k` is between 0 and `l`.\n- The twelfth loop invariant specifies that `l` is less than or equal to `n`.\n- The loop assigns clause specifies which variables are modified in the loop. Here, `l`, `i`, `j`, `k`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are modified in the loop",
            "Pre-conditions:\n- The macro `assume(e)` checks whether the expression `e` is true or not. If `e` is false, the function returns 0 and the program terminates.\n- The function `unknown_int()` returns an integer value that is not known at the beginning of the program. We do not know the range of the integer value returned by the function.\n- The variable `SIZE` is assigned the value 20000001.\n- The variable `n` is initialized to 0.\n- The variables `i`, `j`, `k`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are initialized to 0.\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than the value of `n`.\n\nLoop invariants:\n- Before the loop execution, the following loop invariants are true:\n```\n/*@ \n    loop invariant 0 <= l <= n; \n    loop invariant v1 >= 0; \n    loop invariant v2 >= 0; \n    loop invariant v3 >= 0; \n    loop invariant v4 >= 0; \n    loop invariant v5 >= 0; \n    loop invariant v6 >= 0; \n    loop invariant i >= 0; \n    loop invariant j >= 0; \n    loop invariant k >= 0; \n*/\n```\n- In every iteration of the loop, the following loop invariants are true:\n```\n/*@ \n    loop invariant 0 <= l <= n; \n    loop invariant v1 >= 0; \n    loop invariant v2 >= 0; \n    loop invariant v3 >= 0; \n    loop invariant v4 >= 0; \n    loop invariant v5 >= 0; \n    loop invariant v6 >= 0; \n    loop invariant i >= 0; \n    loop invariant j >= 0; \n    loop invariant k >= 0; \n    loop invariant (l%2 == 0 ==> j+1 == \\old(j+1)); \n    loop invariant (l%3 == 0 ==> i+1 == \\old(i+1)); \n    loop invariant (l%4 == 0 ==> v4+1 == \\old(v4+1)); \n    loop invariant (l%5 == 0 ==> v3+1 == \\old(v3+1)); \n    loop invariant (l%6 == 0 ==> v2+1 == \\old(v2+1)); \n    loop invariant (l%7 == 0 ==> v1+1 == \\old(v1+1)); \n    loop invariant (l%8 == 0 ==> v5+1 == \\old(v5+1)); \n    loop invariant (l%9 == 0 ==> v6+1 == \\old(v6+1)); \n*/\n```\n- After the loop termination, the following loop invariants are true:\n```\n/*@ \n    loop invariant 0 <= l <= n; \n    loop invariant v1 >= 0; \n    loop invariant v2 >= 0; \n    loop invariant v3 >= 0; \n    loop invariant v4 >= 0; \n    loop invariant v5 >= 0; \n    loop invariant v6 >= 0; \n    loop invariant i >= 0; \n    loop invariant j >= 0; \n    loop invariant k >= 0; \n    loop invariant (i+j+k+v1+v2+v3+v4+v5+v6 == l); \n*/\n```\nExplanation:\n- The loop invariant `0 <= l <= n` ensures that the value of `l` is always between 0 and `n`, inclusive.\n- The loop invariants `v1 >= 0`, `v2 >= 0`, `v3 >= 0`, `v4 >= 0`, `v5 >= 0`, and `v6 >= 0` ensure that the values of variables `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are always non-negative.\n- The loop invariants `i >= 0`, `j >= 0`, and `k >= 0` ensure that the values of variables `i`, `j`, and `k` are always non-negative.\n- The loop invariants `l%2 == 0 ==> j+1 == \\old(j+1)`, `l%3 == 0 ==> i+1 == \\old(i+1)`, `l%4 == 0 ==> v4+1 == \\old(v4+1)`, `l%5 == 0 ==> v3+1 == \\old(v3+1)`, `l%6 ==",
            "Pre-conditions: \n- The macro `assume(e)` returns 0 if `e` is false.\n- The function `unknown_int()` returns an integer value that is unknown.\n\nVariable Assignments: \n- `SIZE` is assigned the value 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned the value 0.\n\nLoop Condition: \n- The loop continues as long as `l<n`.\n\nLoop Invariants:\n- `0 <= l <= n`\n- `0 <= i <= l/3`\n- `0 <= j <= l/2`\n- `0 <= k <= l`\n- `0 <= v1 <= l/7`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= v5 <= l/8`\n- `0 <= v6 <= l/9`\n- `(i+j+k+v1+v2+v3+v4+v5+v6) == l`\n- `l<=SIZE`\n- `(v1+v2+v3+v4+v5+v6)<=l`\n\nExplanation:\n- The first invariant ensures that `l` is always between 0 and `n`, inclusive.\n- The second invariant ensures that `i` is always between 0 and `l/3`, inclusive. This is because `i` is incremented only when `l` is a multiple of 3.\n- The third invariant ensures that `j` is always between 0 and `l/2`, inclusive. This is because `j` is incremented only when `l` is a multiple of 2.\n- The fourth invariant ensures that `k` is always between 0 and `l`, inclusive.\n- The next four invariants ensure that each `v` variable is always between 0 and `l` divided by their respective multiples, inclusive.\n- The seventh invariant ensures that the sum of all `v` variables and `i`, `j`, and `k` is always equal to `l`.\n- The eighth invariant ensures that `l` is less than or equal to `SIZE`.\n- The last invariant ensures that the sum of `v1` through `v6` is always less than or equal to `l`. This is because if `l` is a multiple of 9, `v6` is incremented and no other `v` variable is incremented, and similarly for other multiples.\n\nNote that we don't need to add any invariants to handle non-deterministic variables at the beginning or end of the loop because all variables are initialized to 0 at the beginning of the program.",
            "Before the loop, we have the following pre-conditions or variable assignments:\n- `SIZE` is assigned a constant value of 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned 0.\n- `n` is assigned a non-deterministic value using the `unknown_int()` function.\n- It is assumed that `n` is less than or equal to `SIZE`.\n\nLoop condition:\n- The loop continues as long as `l` is less than `n`.\n\nLoop invariants:\n1. `0 <= l <= n`\n    - `l` is always non-negative and less than or equal to `n`.\n2. `0 <= i+j+k+v1+v2+v3+v4+v5+v6 <= l`\n    - The sum of all variables assigned within the loop is always less than or equal to `l`, and greater than or equal to 0.\n3. `i+j+k+v1+v2+v3+v4+v5+v6 = v1+v2+v3+v4+v5+v6+v7`\n    - The sum of all variables assigned within the loop is equal to the sum of `v1` to `v6`.\n4. `(l+1)%9 == 0 ==> v6' == v6 + 1 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%9 == 0`, then `v6` is incremented by 1 and all other variables are unchanged.\n5. `(l+1)%8 == 0 ==> v6' == v6 && v5' == v5 + 1 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%8 == 0`, then `v5` is incremented by 1 and all other variables are unchanged.\n6. `(l+1)%7 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 + 1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%7 == 0`, then `v1` is incremented by 1 and all other variables are unchanged.\n7. `(l+1)%6 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 + 1 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%6 == 0`, then `v2` is incremented by 1 and all other variables are unchanged.\n8. `(l+1)%5 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 + 1 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%5 == 0`, then `v3` is incremented by 1 and all other variables are unchanged.\n9. `(l+1)%4 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 + 1 && i' == i && j' == j && k' == k`\n    - If `(l+1)%4 == 0`, then `v4` is incremented by 1 and all other variables are unchanged.\n10. `(l+1)%3 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i + 1 && j' == j && k' == k`\n    - If `(l+1)%3 == 0`, then `i` is incremented by 1 and all other variables are unchanged.\n11. `(l+1)%2 == 0"
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "First, let's consider the preconditions and variable assignments in the program:\n\nPrecondition: \n- `n` is an unsigned integer that is initialized to the result of the `unknown_int()` function. We don't know anything about the value of `n`, except that it is less than or equal to `SIZE`.\n\nVariable Assignments:\n- `i`, `j`, `k`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are all initialized to `0`.\n- `SIZE` is initialized to `20000001`.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- `l < n`\n\nNow, let's output the necessary loop invariants:\n\n/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant 0 <= v5 <= l;\n    loop invariant 0 <= v6 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4+v5+v6) == l;\n    loop invariant (l <= n);\n*/\n\nExplanation:\n\n- The loop invariants for all the variables ensure that their values are always non-negative and do not exceed the value of `l`, which is the loop counter.\n- The loop invariant `(i+j+k+v1+v2+v3+v4+v5+v6) == l` ensures that the sum of all the variables is equal to `l`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination.\n- The loop invariant `(l <= n)` ensures that `l` never exceeds the value of `n`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination."
            ],
            "/*@ \n  loop invariant 0 <= n <= SIZE;\n  loop invariant v1+v2+v3+v4+v5+v6+i+j+k+l == (\\at(l, Pre) + (\\at(l, Here) - \\at(l, Pre)));\n  loop invariant 0 <= v1 <= l/7+1;\n  loop invariant 0 <= v2 <= l/6+1;\n  loop invariant 0 <= v3 <= l/5+1;\n  loop invariant 0 <= v4 <= l/4+1;\n  loop invariant 0 <= v5 <= l/8+1;\n  loop invariant 0 <= v6 <= l/9+1;\n  loop invariant 0 <= i <= l/3+1;\n  loop invariant 0 <= j <= l/2+1;\n  loop invariant 0 <= k <= l;\n  loop invariant l <= n; \n  loop assigns l, i, j, k, v1, v2, v3, v4, v5, v6;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n; \n    loop invariant v1 >= 0; \n    loop invariant v2 >= 0; \n    loop invariant v3 >= 0; \n    loop invariant v4 >= 0; \n    loop invariant v5 >= 0; \n    loop invariant v6 >= 0; \n    loop invariant i >= 0; \n    loop invariant j >= 0; \n    loop invariant k >= 0; \n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: \n- The macro `assume(e)` returns 0 if `e` is false.\n- The function `unknown_int()` returns an integer value that is unknown.\n\nVariable Assignments: \n- `SIZE` is assigned the value 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned the value 0.\n\nLoop Condition: \n- The loop continues as long as `l<n`.\n\nLoop Invariants:\n- `0 <= l <= n`\n- `0 <= i <= l/3`\n- `0 <= j <= l/2`\n- `0 <= k <= l`\n- `0 <= v1 <= l/7`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= v5 <= l/8`\n- `0 <= v6 <= l/9`\n- `(i+j+k+v1+v2+v3+v4+v5+v6) == l`\n- `l<=SIZE`\n- `(v1+v2+v3+v4+v5+v6)<=l`\n\nExplanation:\n- The first invariant ensures that `l` is always between 0 and `n`, inclusive.\n- The second invariant ensures that `i` is always between 0 and `l/3`, inclusive. This is because `i` is incremented only when `l` is a multiple of 3.\n- The third invariant ensures that `j` is always between 0 and `l/2`, inclusive. This is because `j` is incremented only when `l` is a multiple of 2.\n- The fourth invariant ensures that `k` is always between 0 and `l`, inclusive.\n- The next four invariants ensure that each `v` variable is always between 0 and `l` divided by their respective multiples, inclusive.\n- The seventh invariant ensures that the sum of all `v` variables and `i`, `j`, and `k` is always equal to `l`.\n- The eighth invariant ensures that `l` is less than or equal to `SIZE`.\n- The last invariant ensures that the sum of `v1` through `v6` is always less than or equal to `l`. This is because if `l` is a multiple of 9, `v6` is incremented and no other `v` variable is incremented, and similarly for other multiples.\n\nNote that we don't need to add any invariants to handle non-deterministic variables at the beginning or end of the loop because all variables are initialized to 0 at the beginning of the program."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Before the loop, we have the following pre-conditions or variable assignments:\n- `SIZE` is assigned a constant value of 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned 0.\n- `n` is assigned a non-deterministic value using the `unknown_int()` function.\n- It is assumed that `n` is less than or equal to `SIZE`.\n\nLoop condition:\n- The loop continues as long as `l` is less than `n`.\n\nLoop invariants:\n1. `0 <= l <= n`\n    - `l` is always non-negative and less than or equal to `n`.\n2. `0 <= i+j+k+v1+v2+v3+v4+v5+v6 <= l`\n    - The sum of all variables assigned within the loop is always less than or equal to `l`, and greater than or equal to 0.\n3. `i+j+k+v1+v2+v3+v4+v5+v6 = v1+v2+v3+v4+v5+v6+v7`\n    - The sum of all variables assigned within the loop is equal to the sum of `v1` to `v6`.\n4. `(l+1)%9 == 0 ==> v6' == v6 + 1 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%9 == 0`, then `v6` is incremented by 1 and all other variables are unchanged.\n5. `(l+1)%8 == 0 ==> v6' == v6 && v5' == v5 + 1 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%8 == 0`, then `v5` is incremented by 1 and all other variables are unchanged.\n6. `(l+1)%7 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 + 1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%7 == 0`, then `v1` is incremented by 1 and all other variables are unchanged.\n7. `(l+1)%6 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 + 1 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%6 == 0`, then `v2` is incremented by 1 and all other variables are unchanged.\n8. `(l+1)%5 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 + 1 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%5 == 0`, then `v3` is incremented by 1 and all other variables are unchanged.\n9. `(l+1)%4 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 + 1 && i' == i && j' == j && k' == k`\n    - If `(l+1)%4 == 0`, then `v4` is incremented by 1 and all other variables are unchanged.\n10. `(l+1)%3 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i + 1 && j' == j && k' == k`\n    - If `(l+1)%3 == 0`, then `i` is incremented by 1 and all other variables are unchanged.\n11. `(l+1)%2 == 0"
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "First, let's consider the preconditions and variable assignments in the program:\n\nPrecondition: \n- `n` is an unsigned integer that is initialized to the result of the `unknown_int()` function. We don't know anything about the value of `n`, except that it is less than or equal to `SIZE`.\n\nVariable Assignments:\n- `i`, `j`, `k`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are all initialized to `0`.\n- `SIZE` is initialized to `20000001`.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- `l < n`\n\nNow, let's output the necessary loop invariants:\n\n/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant 0 <= v5 <= l;\n    loop invariant 0 <= v6 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4+v5+v6) == l;\n    loop invariant (l <= n);\n*/\n\nExplanation:\n\n- The loop invariants for all the variables ensure that their values are always non-negative and do not exceed the value of `l`, which is the loop counter.\n- The loop invariant `(i+j+k+v1+v2+v3+v4+v5+v6) == l` ensures that the sum of all the variables is equal to `l`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination.\n- The loop invariant `(l <= n)` ensures that `l` never exceeds the value of `n`. This invariant holds true before the loop execution, in every iteration of the loop and after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant 0 <= n <= SIZE;\n  loop invariant v1+v2+v3+v4+v5+v6+i+j+k+l == (\\at(l, Pre) + (\\at(l, Here) - \\at(l, Pre)));\n  loop invariant 0 <= v1 <= l/7+1;\n  loop invariant 0 <= v2 <= l/6+1;\n  loop invariant 0 <= v3 <= l/5+1;\n  loop invariant 0 <= v4 <= l/4+1;\n  loop invariant 0 <= v5 <= l/8+1;\n  loop invariant 0 <= v6 <= l/9+1;\n  loop invariant 0 <= i <= l/3+1;\n  loop invariant 0 <= j <= l/2+1;\n  loop invariant 0 <= k <= l;\n  loop invariant l <= n; \n  loop assigns l, i, j, k, v1, v2, v3, v4, v5, v6;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable l. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\n\n\n\n\n\n\n\n\n\nloop invariant i11: 0 <= k <= l;\nloop invariant i12: l <= n;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= l <= n; \n    loop invariant v1 >= 0; \n    loop invariant v2 >= 0; \n    loop invariant v3 >= 0; \n    loop invariant v4 >= 0; \n    loop invariant v5 >= 0; \n    loop invariant v6 >= 0; \n    loop invariant i >= 0; \n    loop invariant j >= 0; \n    loop invariant k >= 0; \n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= l <= n is partially proven to be inductive.\nloop invariant v1 >= 0 is partially proven to be inductive.\nloop invariant v2 >= 0 is partially proven to be inductive.\nloop invariant v3 >= 0 is partially proven to be inductive.\nloop invariant v4 >= 0 is partially proven to be inductive.\nloop invariant v5 >= 0 is partially proven to be inductive.\nloop invariant v6 >= 0 is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant k >= 0 is partially proven to be inductive.\nAssertion (((((((i + j) + k) + v1) + v2) + v3) + v4) + v5) + v6 == l: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: v1 >= 0;\nloop invariant i3: v2 >= 0;\nloop invariant i4: v3 >= 0;\nloop invariant i5: v4 >= 0;\nloop invariant i6: v5 >= 0;\nloop invariant i7: v6 >= 0;\nloop invariant i8: i >= 0;\nloop invariant i9: j >= 0;\nloop invariant i10: k >= 0;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}\n",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: \n- The macro `assume(e)` returns 0 if `e` is false.\n- The function `unknown_int()` returns an integer value that is unknown.\n\nVariable Assignments: \n- `SIZE` is assigned the value 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned the value 0.\n\nLoop Condition: \n- The loop continues as long as `l<n`.\n\nLoop Invariants:\n- `0 <= l <= n`\n- `0 <= i <= l/3`\n- `0 <= j <= l/2`\n- `0 <= k <= l`\n- `0 <= v1 <= l/7`\n- `0 <= v2 <= l/6`\n- `0 <= v3 <= l/5`\n- `0 <= v4 <= l/4`\n- `0 <= v5 <= l/8`\n- `0 <= v6 <= l/9`\n- `(i+j+k+v1+v2+v3+v4+v5+v6) == l`\n- `l<=SIZE`\n- `(v1+v2+v3+v4+v5+v6)<=l`\n\nExplanation:\n- The first invariant ensures that `l` is always between 0 and `n`, inclusive.\n- The second invariant ensures that `i` is always between 0 and `l/3`, inclusive. This is because `i` is incremented only when `l` is a multiple of 3.\n- The third invariant ensures that `j` is always between 0 and `l/2`, inclusive. This is because `j` is incremented only when `l` is a multiple of 2.\n- The fourth invariant ensures that `k` is always between 0 and `l`, inclusive.\n- The next four invariants ensure that each `v` variable is always between 0 and `l` divided by their respective multiples, inclusive.\n- The seventh invariant ensures that the sum of all `v` variables and `i`, `j`, and `k` is always equal to `l`.\n- The eighth invariant ensures that `l` is less than or equal to `SIZE`.\n- The last invariant ensures that the sum of `v1` through `v6` is always less than or equal to `l`. This is because if `l` is a multiple of 9, `v6` is incremented and no other `v` variable is incremented, and similarly for other multiples.\n\nNote that we don't need to add any invariants to handle non-deterministic variables at the beginning or end of the loop because all variables are initialized to 0 at the beginning of the program.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Before the loop, we have the following pre-conditions or variable assignments:\n- `SIZE` is assigned a constant value of 20000001.\n- `n`, `i`, `k`, `j`, `l`, `v1`, `v2`, `v3`, `v4`, `v5`, and `v6` are assigned 0.\n- `n` is assigned a non-deterministic value using the `unknown_int()` function.\n- It is assumed that `n` is less than or equal to `SIZE`.\n\nLoop condition:\n- The loop continues as long as `l` is less than `n`.\n\nLoop invariants:\n1. `0 <= l <= n`\n    - `l` is always non-negative and less than or equal to `n`.\n2. `0 <= i+j+k+v1+v2+v3+v4+v5+v6 <= l`\n    - The sum of all variables assigned within the loop is always less than or equal to `l`, and greater than or equal to 0.\n3. `i+j+k+v1+v2+v3+v4+v5+v6 = v1+v2+v3+v4+v5+v6+v7`\n    - The sum of all variables assigned within the loop is equal to the sum of `v1` to `v6`.\n4. `(l+1)%9 == 0 ==> v6' == v6 + 1 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%9 == 0`, then `v6` is incremented by 1 and all other variables are unchanged.\n5. `(l+1)%8 == 0 ==> v6' == v6 && v5' == v5 + 1 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%8 == 0`, then `v5` is incremented by 1 and all other variables are unchanged.\n6. `(l+1)%7 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 + 1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%7 == 0`, then `v1` is incremented by 1 and all other variables are unchanged.\n7. `(l+1)%6 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 + 1 && v3' == v3 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%6 == 0`, then `v2` is incremented by 1 and all other variables are unchanged.\n8. `(l+1)%5 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 + 1 && v4' == v4 && i' == i && j' == j && k' == k`\n    - If `(l+1)%5 == 0`, then `v3` is incremented by 1 and all other variables are unchanged.\n9. `(l+1)%4 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 + 1 && i' == i && j' == j && k' == k`\n    - If `(l+1)%4 == 0`, then `v4` is incremented by 1 and all other variables are unchanged.\n10. `(l+1)%3 == 0 ==> v6' == v6 && v5' == v5 && v1' == v1 && v2' == v2 && v3' == v3 && v4' == v4 && i' == i + 1 && j' == j && k' == k`\n    - If `(l+1)%3 == 0`, then `i` is incremented by 1 and all other variables are unchanged.\n11. `(l+1)%2 == 0",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 13: unbound logic variable l. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\nloop invariant i2: v1+v2+v3+v4+v5+v6+i+j+k+l == (\\at(l, Pre) + (\\at(l, Here) - \\at(l, Pre)));\nloop invariant i3: 0 <= v1 <= l/7+1;\nloop invariant i4: 0 <= v2 <= l/6+1;\nloop invariant i5: 0 <= v3 <= l/5+1;\nloop invariant i6: 0 <= v4 <= l/4+1;\nloop invariant i7: 0 <= v5 <= l/8+1;\nloop invariant i8: 0 <= v6 <= l/9+1;\nloop invariant i9: 0 <= i <= l/3+1;\nloop invariant i10: 0 <= j <= l/2+1;\nloop invariant i11: 0 <= k <= l;\nloop invariant i12: l <= n;\nloop invariant i13: 0 <= l <= n;\nloop invariant i14: v1 >= 0;\nloop invariant i15: v2 >= 0;\nloop invariant i16: v3 >= 0;\nloop invariant i17: v4 >= 0;\nloop invariant i18: v5 >= 0;\nloop invariant i19: v6 >= 0;\nloop invariant i20: i >= 0;\nloop invariant i21: j >= 0;\nloop invariant i22: k >= 0;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}\n",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= n <= SIZE;\n\n\n\n\n\n\n\n\n\nloop invariant i11: 0 <= k <= l;\nloop invariant i12: l <= n;\nloop invariant i13: 0 <= l <= n;\nloop invariant i14: v1 >= 0;\nloop invariant i15: v2 >= 0;\nloop invariant i16: v3 >= 0;\nloop invariant i17: v4 >= 0;\nloop invariant i18: v5 >= 0;\nloop invariant i19: v6 >= 0;\nloop invariant i20: i >= 0;\nloop invariant i21: j >= 0;\nloop invariant i22: k >= 0;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n\n  }\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/accelerating_invariant_generation/cav/07.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/19.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/20.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/39.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/const.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/eq2.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/css2003.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "../data/benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "../data/benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt8.c"
        ],
        "failure": [
            "../data/benchmarks/accelerating_invariant_generation/cav/05.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/35.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/37.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../data/benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../data/benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
            "../data/benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
            "../data/benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/even.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/mod4.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/odd.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
            "../data/benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
            "../data/benchmarks/sv-benchmarks/loop-lit/jm2006.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "../data/benchmarks/sv-benchmarks/loop-new/half.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
            "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c"
        ],
        "skipped": [],
        "total": 400,
        "success_count": 205,
        "failure_count": 195,
        "success_rate": 0.5125
    }
}