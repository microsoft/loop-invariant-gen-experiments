{
    "logs": {
        "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k;\n    loop invariant l <= n;\n    loop invariant v4 + i + j + k == l;\n    loop invariant (l < n ==> (l+1 <= n && (l+1)%4==0 ==> v4+1 == \\old(v4) + 1 && i == \\old(i) && j == \\old(j) && k == \\old(k))) && \n                  (l < n ==> (l+1 <= n && (l+1)%3==0 ==> i+1 == \\old(i) + 1 && j == \\old(j) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2==0 ==> j+1 == \\old(j) + 1 && i == \\old(i) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2!=0 && (l+1)%3!=0 && (l+1)%4!=0 ==> k+1 == \\old(k) + 1 && i == \\old(i) && j == \\old(j) && v4 == \\old(v4)));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\nloop invariant i5: i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k;\nloop invariant i6: l <= n;\nloop invariant i7: v4 + i + j + k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant 0 <= i <= l is inductive.\nloop invariant 0 <= j <= l is inductive.\nloop invariant 0 <= k <= l is inductive.\nloop invariant 0 <= v4 <= l is inductive.\nloop invariant i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k is established but not preserved.\nloop invariant l <= n is inductive.\nloop invariant v4 + i + j + k == l is inductive.\nAssertion ((i + j) + k) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\n\nloop invariant i6: l <= n;\nloop invariant i7: v4 + i + j + k == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 0 <= i <= l is inductive.\nloop invariant 0 <= j <= l is inductive.\nloop invariant 0 <= k <= l is inductive.\nloop invariant 0 <= v4 <= l is inductive.\nloop invariant l <= n is inductive.\nloop invariant v4 + i + j + k == l is inductive.\nAssertion ((i + j) + k) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \nloop invariant 0 <= l <= n;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant 0 <= v4;\nloop invariant i + j + k + v4 == l;\nloop invariant (l%4 == 0) ==> (v4 <= l/4);\nloop invariant (l%3 == 0) ==> (i <= l/3);\nloop invariant (l%2 == 0) ==> (j <= l/2);\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i;\nloop invariant i3: 0 <= j;\nloop invariant i4: 0 <= k;\nloop invariant i5: 0 <= v4;\nloop invariant i6: i + j + k + v4 == l;\nloop invariant i7: (l%4 == 0) ==> (v4 <= l/4);\nloop invariant i8: (l%3 == 0) ==> (i <= l/3);\nloop invariant i9: (l%2 == 0) ==> (j <= l/2);\nloop invariant i10: !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant 0 <= l <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant 0 <= v4 is inductive.\nloop invariant i + j + k + v4 == l is inductive.\nloop invariant (l%4 == 0) ==> (v4 <= l/4) is established but not preserved.\nloop invariant (l%3 == 0) ==> (i <= l/3) is established but not preserved.\nloop invariant (l%2 == 0) ==> (j <= l/2) is established but not preserved.\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2) is inductive.\nAssertion ((i + j) + k) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i;\nloop invariant i3: 0 <= j;\nloop invariant i4: 0 <= k;\nloop invariant i5: 0 <= v4;\nloop invariant i6: i + j + k + v4 == l;\n\n\n\nloop invariant i10: !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 0 <= l <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant 0 <= v4 is inductive.\nloop invariant i + j + k + v4 == l is inductive.\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2) is inductive.\nAssertion ((i + j) + k) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\n    loop invariant i+j+k+v4 <= l;\n    loop invariant l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k;\n    loop invariant l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k;\n    loop invariant l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k;\n    loop invariant l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l;\n    loop invariant l ==> (i+j+k+v4) == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\nloop invariant i2: i+j+k+v4 <= l;\nloop invariant i3: l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k;\nloop invariant i4: l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k;\nloop invariant i5: l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k;\nloop invariant i6: l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l;\nloop invariant i7: l ==> (i+j+k+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0 is inductive.\nloop invariant i+j+k+v4 <= l is inductive.\nloop invariant l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k is established but not preserved.\nloop invariant l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k is established but not preserved.\nloop invariant l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k is established but not preserved.\nloop invariant l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l is established but not preserved.\nloop invariant l ==> (i+j+k+v4) == l is inductive.\nAssertion ((i + j) + k) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\nloop invariant i2: i+j+k+v4 <= l;\n\n\n\n\nloop invariant i7: l ==> (i+j+k+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0 is inductive.\nloop invariant i+j+k+v4 <= l is inductive.\nloop invariant l ==> (i+j+k+v4) == l is inductive.\nAssertion ((i + j) + k) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant 0 <= v4;\n    loop invariant 0 <= l <= n;\n    loop invariant l%1 == 0;\n    loop invariant (l%4 == 0) ==> (v4 == (\\at(v4, Pre) + (l/4)));\n    loop invariant (l%3 == 0) ==> (i == (\\at(i, Pre) + (l/3)));\n    loop invariant (l%2 == 0) ==> (j == (\\at(j, Pre) + (l/2)));\n    loop invariant ((l%4 != 0) && (l%3 != 0) && (l%2 != 0)) ==> (k == (\\at(k, Pre) + 1));\n    loop invariant ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\nloop invariant i4: 0 <= v4;\nloop invariant i5: 0 <= l <= n;\nloop invariant i6: l%1 == 0;\nloop invariant i7: (l%4 == 0) ==> (v4 == (\\at(v4, Pre) + (l/4)));\nloop invariant i8: (l%3 == 0) ==> (i == (\\at(i, Pre) + (l/3)));\nloop invariant i9: (l%2 == 0) ==> (j == (\\at(j, Pre) + (l/2)));\nloop invariant i10: ((l%4 != 0) && (l%3 != 0) && (l%2 != 0)) ==> (k == (\\at(k, Pre) + 1));\nloop invariant i11: ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 27: unbound logic variable v4. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\nloop invariant i4: 0 <= v4;\nloop invariant i5: 0 <= l <= n;\nloop invariant i6: l%1 == 0;\n\n\n\n\nloop invariant i11: ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant 0 <= v4 is inductive.\nloop invariant 0 <= l <= n is inductive.\nloop invariant l%1 == 0 is inductive.\nloop invariant ((n > SIZE) ==> ((i+j+k+v4) == l)) is inductive.\nAssertion ((i + j) + k) + v4 == l: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v4 <= l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant 0 <= i <= l is inductive.\nloop invariant 0 <= j <= l is inductive.\nloop invariant 0 <= k <= l is inductive.\nloop invariant 0 <= v4 <= l is inductive.\nAssertion ((i + j) + k) + v4 == l: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 0 <= i <= l is inductive.\nloop invariant 0 <= j <= l is inductive.\nloop invariant 0 <= k <= l is inductive.\nloop invariant 0 <= v4 <= l is inductive.\nAssertion ((i + j) + k) + v4 == l: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The value of variable `n` should be less than or equal to `SIZE`.\n\nLoop Condition:\n- The loop executes while `l` is less than `n`.\n\nLoop Invariants:\n- `0 <= i <= l`\n- `0 <= j <= l`\n- `0 <= k <= l`\n- `0 <= v4 <= l`\n- `i + j + k + v4 = 4 * v4 + 3 * i + 2 * j + k`\n- `l <= n`\n- `v4 + i + j + k = l`\n- For all values of `l` before the loop: \n    - if `l` is divisible by `4`, then `v4` is increased by 1 and all other variables remain the same.\n    - else if `l` is divisible by `3`, then `i` is increased by 1 and all other variables remain the same.\n    - else if `l` is divisible by `2`, then `j` is increased by 1 and all other variables remain the same.\n    - else `k` is increased by 1 and all other variables remain the same.\n- If `n` is greater than `SIZE`, the loop is not executed and the post-condition trivially holds.\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k;\n    loop invariant l <= n;\n    loop invariant v4 + i + j + k == l;\n    loop invariant (l < n ==> (l+1 <= n && (l+1)%4==0 ==> v4+1 == \\old(v4) + 1 && i == \\old(i) && j == \\old(j) && k == \\old(k))) && \n                  (l < n ==> (l+1 <= n && (l+1)%3==0 ==> i+1 == \\old(i) + 1 && j == \\old(j) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2==0 ==> j+1 == \\old(j) + 1 && i == \\old(i) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2!=0 && (l+1)%3!=0 && (l+1)%4!=0 ==> k+1 == \\old(k) + 1 && i == \\old(i) && j == \\old(j) && v4 == \\old(v4)));\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program assumes the existence of two external functions `unknown` and `unknown_uint`.\n- The program assumes the existence of two external functions `abort` and `__assert_fail`.\n\nVariable Assignments:\n- `SIZE` is assigned the value 20000001.\n\nLoop Condition:\n- The loop continues as long as `l` is less than `n`.\n\nLoop Invariants:\n- `0 <= l <= n`\n- `0 <= i, j, k, v4`\n- `i + j + k + v4 = l`\n- `(l%4 == 0) ==> (v4 <= l/4)`\n- `(l%3 == 0) ==> (i <= l/3)`\n- `(l%2 == 0) ==> (j <= l/2)`\n- `!(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2)`\n\nExplanation:\n- `0 <= l <= n` ensures that `l` remains within the bounds of the loop condition.\n- `0 <= i, j, k, v4` ensures that the count variables are non-negative.\n- `i + j + k + v4 = l` ensures that the total count equals the number of iterations of the loop.\n- `(l%4 == 0) ==> (v4 <= l/4)` ensures that `v4` is always less than or equal to the number of iterations that are divisible by 4.\n- `(l%3 == 0) ==> (i <= l/3)` ensures that `i` is always less than or equal to the number of iterations that are divisible by 3.\n- `(l%2 == 0) ==> (j <= l/2)` ensures that `j` is always less than or equal to the number of iterations that are divisible by 2.\n- `!(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2)` ensures that `l` is counted exactly once in one of the four count variables. \n\nSince there are no non-deterministic variables, there is no need for additional implications in the loop invariants.\n\nFinally, the assertion is already guarded by the loop condition, so no additional implication is needed there. \n\nPutting it all together:\n```\n/*@ \nloop invariant 0 <= l <= n;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant 0 <= v4;\nloop invariant i + j + k + v4 == l;\nloop invariant (l%4 == 0) ==> (v4 <= l/4);\nloop invariant (l%3 == 0) ==> (i <= l/3);\nloop invariant (l%2 == 0) ==> (j <= l/2);\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The value of `n` should be less than or equal to `SIZE`.\n\nVariable Assignments:\n- `n`, `i`, `k`, `j`, `l`, and `v4` are initialized to 0.\n- `SIZE` is assigned the value 20000001.\n\nLoop Condition:\n- The loop will continue to execute as long as `l < n`.\n\nLoop Invariants:\n1. Before the loop execution: `n <= SIZE`\n2. In every iteration of the loop:\n   - `i + j + k + v4 + l = \\old(i) + \\old(j) + \\old(k) + \\old(v4) + \\old(l)`\n   - `0 <= i <= \\old(i) + 1`\n   - `0 <= j <= \\old(j) + 1`\n   - `0 <= k <= \\old(k) + 1`\n   - `0 <= v4 <= \\old(v4) + 1`\n   - `0 <= l <= n`\n3. After the loop termination: `(i+j+k+v4) == l`\n\nExplanation:\n1. The precondition ensures that the loop will not execute indefinitely. \n2. \n   - The first invariant states that the sum of all the variables inside the loop is equal to their initial values plus the number of iterations of the loop. \n   - The next four invariants bound the maximum and minimum values of `i`, `j`, `k`, and `v4`. Since the loop increments these variables by at most 1 in each iteration, we can conclude that their maximum value is their initial value plus the number of iterations of the loop, and their minimum value is their initial value. \n   - The last invariant bounds the value of `l` between 0 and `n`.\n3. The postcondition asserts that the sum of `i`, `j`, `k`, and `v4` is equal to the final value of `l`. This is true because the loop increments exactly one of `i`, `j`, `k`, or `v4` in each iteration, and `l` is incremented in every iteration. So, their sum will be equal to the final value of `l`."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program assumes the existence of two external functions `unknown()` and `unknown_uint()` which are not defined in the program.\n- The program defines a `SIZE` variable and initializes it to 20000001.\n- The program initializes `n`, `i`, `j`, `k`, and `l` to 0.\n- The program initializes `v4` to 0.\n\nLoop Condition:\n- The while loop condition is `l < n`.\n\nLoop Invariants:\n- Before the loop: None.\n- In every iteration of the loop:\n  - `0 <= l <= n`.\n  - `0 <= i+j+k+v4 <= l`.\n  - `0 <= i <= l/3`.\n  - `0 <= j <= l/2`.\n  - `0 <= k <= l/2`.\n  - `0 <= v4 <= l/4`.\n  - `l%4 == 0 ==> v4 == (l/4)`.\n  - `l%4 != 0 ==> v4 == (l/4) + 1`.\n  - `l%3 == 0 ==> i == l/3`.\n  - `l%3 != 0 ==> i == l/3 + 1`.\n  - `l%2 == 0 ==> j == l/2`.\n  - `l%2 != 0 ==> j == l/2 + 1`.\n  - `k == l - i - j - v4`.\n- After the loop:\n  - `i+j+k+v4 == n`."
                },
                {
                    "role": "assistant",
                    "content": "Preconditions:\n- The program assumes the existence of external functions `unknown` and `unknown_uint`, but we do not know anything about their behavior.\n- The program assumes the existence of external functions `abort` and `__assert_fail`, but we do not use them in our code.\n- The `assume_abort_if_not` function is used to check a condition and abort if it is not satisfied.\n- The variable `SIZE` is set to a constant value of 20000001.\n- The variable `n` is assigned a non-deterministic value using the `unknown_uint` function.\n- The program checks if `n` is less than or equal to `SIZE`. If not, it returns 0 and terminates.\n\nLoop condition:\n- The loop continues while `l` is less than `n`.\n\nLoop invariants:\n- The values of `i`, `j`, `k`, and `v4` are non-negative integers.\n- The sum of `i`, `j`, `k`, and `v4` is less than or equal to `l`.\n- If `l` is divisible by 4, then `v4` is incremented by 1. Otherwise, if `l` is divisible by 3, then `i` is incremented by 1. Otherwise, if `l` is divisible by 2, then `j` is incremented by 1. Otherwise, `k` is incremented by 1.\n- If `l` is divisible by 4, then `v4` is equal to `(l/4) - (i/3) - (j/2) - k`. Otherwise, if `l` is divisible by 3, then `i` is equal to `(l/3) - (j/2) - k`. Otherwise, if `l` is divisible by 2, then `j` is equal to `(l/2) - k`. Otherwise, `k` is equal to `l`.\n- The assertion `(i+j+k+v4) == l` holds at the end of the loop. We can write this as `l ==> (i+j+k+v4) == l`. Here, we use the implication `l ==>` to account for the possibility that the loop may not execute at all if `l` is initially less than or equal to 0.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\n    loop invariant i+j+k+v4 <= l;\n    loop invariant l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k;\n    loop invariant l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k;\n    loop invariant l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k;\n    loop invariant l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l;\n    loop invariant l ==> (i+j+k+v4) == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the preconditions and variable assignments in the program:\n\nPreconditions:\n- `n` is an unsigned int with an unknown value, but it is bounded by `SIZE`.\n\nVariable Assignments:\n- `i`, `j`, `k`, `v4`, and `l` are initialized to 0.\n- `n` is assigned an unknown value.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- `l < n`\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\nLoop Invariants:\n- `0 <= i`\n- `0 <= j`\n- `0 <= k`\n- `0 <= v4`\n- `0 <= l`\n- `l <= n`\n- `(l%4 == 0 && v4 == (l/4)) || (l%4 == 1 && v4 == ((l-1)/4)) || (l%4 == 2 && v4 == ((l-2)/4)) || (l%4 == 3 && v4 == ((l-3)/4))`\n- `(l%3 == 0 && i == (l/3)) || (l%3 == 1 && i == ((l-1)/3)) || (l%3 == 2 && i == ((l-2)/3))`\n- `(l%2 == 0 && j == (l/2)) || (l%2 == 1 && j == ((l-1)/2))`\n- `((l%4 == 0 || l%4 == 1) ==> (i+j+k+v4 == (l/4)+i+j+k))`\n- `((l%4 == 2 || l%4 == 3) ==> (i+j+k+v4 == ((l-2)/4)+i+j+k+1))`\n- `(!(l < n) ==> (i+j+k+v4 == n))`\n\nExplanation of Loop Invariants:\n\n- `0 <= i`, `0 <= j`, `0 <= k`, `0 <= v4`, `0 <= l`: These invariants ensure that the loop variables are non-negative.\n- `l <= n`: This invariant ensures that `l` never exceeds `n`, which is a precondition of the program.\n- `(l%4 == 0 && v4 == (l/4)) || (l%4 == 1 && v4 == ((l-1)/4)) || (l%4 == 2 && v4 == ((l-2)/4)) || (l%4 == 3 && v4 == ((l-3)/4))`: This invariant ensures that `v4` is incremented by 1 every time `l` is a multiple of 4.\n- `(l%3 == 0 && i == (l/3)) || (l%3 == 1 && i == ((l-1)/3)) || (l%3 == 2 && i == ((l-2)/3))`: This invariant ensures that `i` is incremented by 1 every time `l` is a multiple of 3.\n- `(l%2 == 0 && j == (l/2)) || (l%2 == 1 && j == ((l-1)/2))`: This invariant ensures that `j` is incremented by 1 every time `l` is a multiple of 2.\n- `((l%4 == 0 || l%4 == 1) ==> (i+j+k+v4 == (l/4)+i+j+k))`: This invariant ensures that `i+j+k+v4` equals `(l/4)+i+j+k` every time `l` is a multiple of 4 or 1.\n- `((l%4 == 2 || l%4 == 3) ==> (i+j+k+v4 == ((l-2)/4)+i+j+k+1))`: This invariant ensures that `i+j+k+v4` equals `((l-2)/4)+i+j+k+1` every time `l` is a multiple of 2 or 3.\n- `(!(l < n) ==> (i+j+k+v4 == n))`: This invariant ensures that `i+j+k+v4` equals `n` when the loop terminates.\n\nPutting it all together, the loop invariants for the loop in the program above are:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant 0 <= v4;\n    loop invariant 0 <= l;\n    loop invariant l <= n;\n    loop invariant (l%4 == 0 && v4 == ("
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The SIZE variable is initialized to 20000001.\n- The function assume_abort_if_not is defined to abort the program if its argument is false.\n- The function unknown returns an integer value that is not defined.\n- The function unknown_uint returns an unsigned integer value that is not defined.\n\nLoop condition:\n- The loop continues while the value of variable l is less than n.\n\nLoop invariants:\n- Before the loop execution:\n    - n <= SIZE\n    - i == 0\n    - j == 0\n    - k == 0\n    - v4 == 0\n- In every iteration of the loop:\n    - l <= n\n    - i + j + k + v4 == l\n    - v4 <= l / 4\n    - i <= l / 3\n    - j <= l / 2\n    - k <= (l + 1) / 2\n- After the loop termination:\n    - i + j + k + v4 == n\n\nExplanation:\n- Before the loop execution, we know that n should be less than or equal to the maximum allowed value SIZE. Also, all the counters i, j, k, and v4 are initialized to 0.\n- In every iteration of the loop, we know that the value of l is less than or equal to n. We also know that the sum of all counters i, j, k, and v4 should be equal to the value of l. Furthermore, we can bound the maximum value of each counter based on the value of l. For example, if l is divisible by 4, then v4 should be less than or equal to l / 4. Similarly, if l is divisible by 3, then i should be less than or equal to l / 3. If l is not divisible by 2 or 3 or 4, then k should be less than or equal to (l + 1) / 2.\n- After the loop termination, we know that the sum of all counters i, j, k, and v4 should be equal to n. This is the same as the assertion in the program, but with the guard condition removed.\n\nNote:\n- The variables i, j, k, and v4 are always non-negative, so we do not need to add any lower bounds for them.\n- We cannot bound the maximum value of the variable l, as it is non-deterministic. However, we know that its value is always less than or equal to n, which is a known upper bound."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program assumes the existence of two external functions: `unknown()` and `unknown_uint()`. We do not know anything about the behavior of these functions, except that they return an integer and an unsigned integer, respectively.\n- The variable `SIZE` is assigned the value `20000001`.\n- The program initializes variables `n`, `i`, `k`, `j`, and `l` to `0`.\n- The program checks if the value returned by `unknown_uint()` is less than or equal to `SIZE`. If this condition is not satisfied, the program returns `0` (exits).\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than `n`.\n\nLoop invariants:\n- Before the loop execution, `i=j=k=v4=0` and `l=0`.\n- In every iteration of the loop, `0<=l<=n`, `0<=i,j,k,v4<=l`, and `l%2==0 ==> j<=k` (since `j` is incremented only if `l` is not divisible by 2, while `k` is incremented only if `l` is divisible by 2).\n- After the loop termination, `i+j+k+v4=l` and `0<=i,j,k,v4<=n`.\n- The assertion `i+j+k+v4==l` is true whenever the loop terminates, since `i+j+k+v4` is incremented by 1 in every iteration of the loop. Therefore, we can use the guard condition `l<n` in an implication to make the invariant trivially true at the end of the loop.\n- Since we do not know anything about the behavior of `unknown()` and `unknown_uint()`, we can use an implication to make the loop invariants true at the beginning of the loop. For example, we can add the following implication before the loop: `n<=SIZE ==> 0<=n<=SIZE && 0<=i=j=k=v4<=n`. This implication ensures that the loop invariants are true if `n` is less than or equal to `SIZE`. If `n` is greater than `SIZE`, the implication is vacuously true, since the antecedent is false."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- The variable `SIZE` is assigned the value 20000001.\n- The variable `n` is assigned a non-deterministic unsigned integer value.\n- The variables `i`, `j`, `k`, `l`, and `v4` are all initialized to 0.\n\nNow, let's analyze the loop body:\n- If `l` is divisible by 4, `v4` is incremented by 1.\n- If `l` is divisible by 3, `i` is incremented by 1.\n- If `l` is divisible by 2, `j` is incremented by 1.\n- Otherwise, `k` is incremented by 1.\n- `l` is incremented by 1.\n\nFrom the loop body, we can see that the loop invariants should include the following:\n- `0 <= i`\n- `0 <= j`\n- `0 <= k`\n- `0 <= v4`\n- `0 <= l <= n`\n- `l` is divisible by 1\n- If `l` is divisible by 4, then `v4` is incremented by 1.\n- If `l` is divisible by 3, then `i` is incremented by 1.\n- If `l` is divisible by 2, then `j` is incremented by 1.\n- Otherwise, `k` is incremented by 1.\n\nNow, let's use implication to take care of the conditional nature of the code and add the loop invariants in one code block:\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant 0 <= v4;\n    loop invariant 0 <= l <= n;\n    loop invariant l%1 == 0;\n    loop invariant (l%4 == 0) ==> (v4 == (\\at(v4, Pre) + (l/4)));\n    loop invariant (l%3 == 0) ==> (i == (\\at(i, Pre) + (l/3)));\n    loop invariant (l%2 == 0) ==> (j == (\\at(j, Pre) + (l/2)));\n    loop invariant ((l%4 != 0) && (l%3 != 0) && (l%2 != 0)) ==> (k == (\\at(k, Pre) + 1));\n    loop invariant ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/\n```\n\nNote that we also added an implication to take care of the assertion at the end of the program, which is guarded by the condition `n <= SIZE`. If `n > SIZE`, the implication is trivially true and does not affect the correctness of the loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments in the program:\n- The SIZE variable is assigned the value 20000001.\n- The variable n is assigned a non-deterministic unsigned integer value.\n- The variables i, j, k, and l are assigned the value 0.\n- The variable v4 is assigned the value 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is \"l < n\".\n\nNext, let's output the loop invariants that are true:\n- Before the loop execution, we have:\n```\n/*@ \n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v4 <= l;\n*/\n```\n- In every iteration of the loop, we have:\n```\n/*@ \n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v4 <= l;\n  loop invariant (l%4 == 0) ==> (v4 == \\at(v4, Pre) + 1);\n  loop invariant (l%4 != 0 && l%3 == 0) ==> (i == \\at(i, Pre) + 1);\n  loop invariant (l%4 != 0 && l%3 != 0 && l%2 == 0) ==> (j == \\at(j, Pre) + 1);\n  loop invariant (l%4 != 0 && l%3 != 0 && l%2 != 0) ==> (k == \\at(k, Pre) + 1);\n*/\n```\n- After the loop termination, we have:\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= j <= n;\n  loop invariant 0 <= k <= n;\n  loop invariant 0 <= v4 <= n;\n  loop invariant (i+j+k+v4) == l;\n*/\n```\nNote that we added a conjunction to bound the maximum value of the loop variables i, j, k, and v4 to n because they are incremented by 1 in each iteration of the loop. \n\nWe also added implications to take care of the conditional nature of the code. For example, the loop invariant `(l%4 == 0) ==> (v4 == \\at(v4, Pre) + 1)` states that if l is divisible by 4, then v4 is incremented by 1 in the current iteration of the loop, which is equivalent to saying that v4 is equal to its previous value plus 1. If l is not divisible by 4, then v4 remains the same as its previous value. Similarly, we added implications for the other conditions in the loop body. \n\nFinally, we added a loop invariant to ensure that the sum of i, j, k, and v4 is equal to l after the loop termination. This is equivalent to the post-condition of the program."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k;\n    loop invariant l <= n;\n    loop invariant v4 + i + j + k == l;\n    loop invariant (l < n ==> (l+1 <= n && (l+1)%4==0 ==> v4+1 == \\old(v4) + 1 && i == \\old(i) && j == \\old(j) && k == \\old(k))) && \n                  (l < n ==> (l+1 <= n && (l+1)%3==0 ==> i+1 == \\old(i) + 1 && j == \\old(j) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2==0 ==> j+1 == \\old(j) + 1 && i == \\old(i) && k == \\old(k) && v4 == \\old(v4))) && \n                  (l < n ==> (l+1 <= n && (l+1)%2!=0 && (l+1)%3!=0 && (l+1)%4!=0 ==> k+1 == \\old(k) + 1 && i == \\old(i) && j == \\old(j) && v4 == \\old(v4)));\n*/",
            "/*@ \nloop invariant 0 <= l <= n;\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= k;\nloop invariant 0 <= v4;\nloop invariant i + j + k + v4 == l;\nloop invariant (l%4 == 0) ==> (v4 <= l/4);\nloop invariant (l%3 == 0) ==> (i <= l/3);\nloop invariant (l%2 == 0) ==> (j <= l/2);\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions:\n- The value of `n` should be less than or equal to `SIZE`.\n\nVariable Assignments:\n- `n`, `i`, `k`, `j`, `l`, and `v4` are initialized to 0.\n- `SIZE` is assigned the value 20000001.\n\nLoop Condition:\n- The loop will continue to execute as long as `l < n`.\n\nLoop Invariants:\n1. Before the loop execution: `n <= SIZE`\n2. In every iteration of the loop:\n   - `i + j + k + v4 + l = \\old(i) + \\old(j) + \\old(k) + \\old(v4) + \\old(l)`\n   - `0 <= i <= \\old(i) + 1`\n   - `0 <= j <= \\old(j) + 1`\n   - `0 <= k <= \\old(k) + 1`\n   - `0 <= v4 <= \\old(v4) + 1`\n   - `0 <= l <= n`\n3. After the loop termination: `(i+j+k+v4) == l`\n\nExplanation:\n1. The precondition ensures that the loop will not execute indefinitely. \n2. \n   - The first invariant states that the sum of all the variables inside the loop is equal to their initial values plus the number of iterations of the loop. \n   - The next four invariants bound the maximum and minimum values of `i`, `j`, `k`, and `v4`. Since the loop increments these variables by at most 1 in each iteration, we can conclude that their maximum value is their initial value plus the number of iterations of the loop, and their minimum value is their initial value. \n   - The last invariant bounds the value of `l` between 0 and `n`.\n3. The postcondition asserts that the sum of `i`, `j`, `k`, and `v4` is equal to the final value of `l`. This is true because the loop increments exactly one of `i`, `j`, `k`, or `v4` in each iteration, and `l` is incremented in every iteration. So, their sum will be equal to the final value of `l`.",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions:\n- The program assumes the existence of two external functions `unknown()` and `unknown_uint()` which are not defined in the program.\n- The program defines a `SIZE` variable and initializes it to 20000001.\n- The program initializes `n`, `i`, `j`, `k`, and `l` to 0.\n- The program initializes `v4` to 0.\n\nLoop Condition:\n- The while loop condition is `l < n`.\n\nLoop Invariants:\n- Before the loop: None.\n- In every iteration of the loop:\n  - `0 <= l <= n`.\n  - `0 <= i+j+k+v4 <= l`.\n  - `0 <= i <= l/3`.\n  - `0 <= j <= l/2`.\n  - `0 <= k <= l/2`.\n  - `0 <= v4 <= l/4`.\n  - `l%4 == 0 ==> v4 == (l/4)`.\n  - `l%4 != 0 ==> v4 == (l/4) + 1`.\n  - `l%3 == 0 ==> i == l/3`.\n  - `l%3 != 0 ==> i == l/3 + 1`.\n  - `l%2 == 0 ==> j == l/2`.\n  - `l%2 != 0 ==> j == l/2 + 1`.\n  - `k == l - i - j - v4`.\n- After the loop:\n  - `i+j+k+v4 == n`.",
            "/*@ \n    loop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\n    loop invariant i+j+k+v4 <= l;\n    loop invariant l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k;\n    loop invariant l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k;\n    loop invariant l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k;\n    loop invariant l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l;\n    loop invariant l ==> (i+j+k+v4) == l;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's identify the preconditions and variable assignments in the program:\n\nPreconditions:\n- `n` is an unsigned int with an unknown value, but it is bounded by `SIZE`.\n\nVariable Assignments:\n- `i`, `j`, `k`, `v4`, and `l` are initialized to 0.\n- `n` is assigned an unknown value.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- `l < n`\n\nNow, let's find the necessary loop invariants to help Frama-C verify the post-condition:\n\nLoop Invariants:\n- `0 <= i`\n- `0 <= j`\n- `0 <= k`\n- `0 <= v4`\n- `0 <= l`\n- `l <= n`\n- `(l%4 == 0 && v4 == (l/4)) || (l%4 == 1 && v4 == ((l-1)/4)) || (l%4 == 2 && v4 == ((l-2)/4)) || (l%4 == 3 && v4 == ((l-3)/4))`\n- `(l%3 == 0 && i == (l/3)) || (l%3 == 1 && i == ((l-1)/3)) || (l%3 == 2 && i == ((l-2)/3))`\n- `(l%2 == 0 && j == (l/2)) || (l%2 == 1 && j == ((l-1)/2))`\n- `((l%4 == 0 || l%4 == 1) ==> (i+j+k+v4 == (l/4)+i+j+k))`\n- `((l%4 == 2 || l%4 == 3) ==> (i+j+k+v4 == ((l-2)/4)+i+j+k+1))`\n- `(!(l < n) ==> (i+j+k+v4 == n))`\n\nExplanation of Loop Invariants:\n\n- `0 <= i`, `0 <= j`, `0 <= k`, `0 <= v4`, `0 <= l`: These invariants ensure that the loop variables are non-negative.\n- `l <= n`: This invariant ensures that `l` never exceeds `n`, which is a precondition of the program.\n- `(l%4 == 0 && v4 == (l/4)) || (l%4 == 1 && v4 == ((l-1)/4)) || (l%4 == 2 && v4 == ((l-2)/4)) || (l%4 == 3 && v4 == ((l-3)/4))`: This invariant ensures that `v4` is incremented by 1 every time `l` is a multiple of 4.\n- `(l%3 == 0 && i == (l/3)) || (l%3 == 1 && i == ((l-1)/3)) || (l%3 == 2 && i == ((l-2)/3))`: This invariant ensures that `i` is incremented by 1 every time `l` is a multiple of 3.\n- `(l%2 == 0 && j == (l/2)) || (l%2 == 1 && j == ((l-1)/2))`: This invariant ensures that `j` is incremented by 1 every time `l` is a multiple of 2.\n- `((l%4 == 0 || l%4 == 1) ==> (i+j+k+v4 == (l/4)+i+j+k))`: This invariant ensures that `i+j+k+v4` equals `(l/4)+i+j+k` every time `l` is a multiple of 4 or 1.\n- `((l%4 == 2 || l%4 == 3) ==> (i+j+k+v4 == ((l-2)/4)+i+j+k+1))`: This invariant ensures that `i+j+k+v4` equals `((l-2)/4)+i+j+k+1` every time `l` is a multiple of 2 or 3.\n- `(!(l < n) ==> (i+j+k+v4 == n))`: This invariant ensures that `i+j+k+v4` equals `n` when the loop terminates.\n\nPutting it all together, the loop invariants for the loop in the program above are:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant 0 <= v4;\n    loop invariant 0 <= l;\n    loop invariant l <= n;\n    loop invariant (l%4 == 0 && v4 == (",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions:\n- The SIZE variable is initialized to 20000001.\n- The function assume_abort_if_not is defined to abort the program if its argument is false.\n- The function unknown returns an integer value that is not defined.\n- The function unknown_uint returns an unsigned integer value that is not defined.\n\nLoop condition:\n- The loop continues while the value of variable l is less than n.\n\nLoop invariants:\n- Before the loop execution:\n    - n <= SIZE\n    - i == 0\n    - j == 0\n    - k == 0\n    - v4 == 0\n- In every iteration of the loop:\n    - l <= n\n    - i + j + k + v4 == l\n    - v4 <= l / 4\n    - i <= l / 3\n    - j <= l / 2\n    - k <= (l + 1) / 2\n- After the loop termination:\n    - i + j + k + v4 == n\n\nExplanation:\n- Before the loop execution, we know that n should be less than or equal to the maximum allowed value SIZE. Also, all the counters i, j, k, and v4 are initialized to 0.\n- In every iteration of the loop, we know that the value of l is less than or equal to n. We also know that the sum of all counters i, j, k, and v4 should be equal to the value of l. Furthermore, we can bound the maximum value of each counter based on the value of l. For example, if l is divisible by 4, then v4 should be less than or equal to l / 4. Similarly, if l is divisible by 3, then i should be less than or equal to l / 3. If l is not divisible by 2 or 3 or 4, then k should be less than or equal to (l + 1) / 2.\n- After the loop termination, we know that the sum of all counters i, j, k, and v4 should be equal to n. This is the same as the assertion in the program, but with the guard condition removed.\n\nNote:\n- The variables i, j, k, and v4 are always non-negative, so we do not need to add any lower bounds for them.\n- We cannot bound the maximum value of the variable l, as it is non-deterministic. However, we know that its value is always less than or equal to n, which is a known upper bound.",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions:\n- The program assumes the existence of two external functions: `unknown()` and `unknown_uint()`. We do not know anything about the behavior of these functions, except that they return an integer and an unsigned integer, respectively.\n- The variable `SIZE` is assigned the value `20000001`.\n- The program initializes variables `n`, `i`, `k`, `j`, and `l` to `0`.\n- The program checks if the value returned by `unknown_uint()` is less than or equal to `SIZE`. If this condition is not satisfied, the program returns `0` (exits).\n\nLoop condition:\n- The loop continues as long as the value of `l` is less than `n`.\n\nLoop invariants:\n- Before the loop execution, `i=j=k=v4=0` and `l=0`.\n- In every iteration of the loop, `0<=l<=n`, `0<=i,j,k,v4<=l`, and `l%2==0 ==> j<=k` (since `j` is incremented only if `l` is not divisible by 2, while `k` is incremented only if `l` is divisible by 2).\n- After the loop termination, `i+j+k+v4=l` and `0<=i,j,k,v4<=n`.\n- The assertion `i+j+k+v4==l` is true whenever the loop terminates, since `i+j+k+v4` is incremented by 1 in every iteration of the loop. Therefore, we can use the guard condition `l<n` in an implication to make the invariant trivially true at the end of the loop.\n- Since we do not know anything about the behavior of `unknown()` and `unknown_uint()`, we can use an implication to make the loop invariants true at the beginning of the loop. For example, we can add the following implication before the loop: `n<=SIZE ==> 0<=n<=SIZE && 0<=i=j=k=v4<=n`. This implication ensures that the loop invariants are true if `n` is less than or equal to `SIZE`. If `n` is greater than `SIZE`, the implication is vacuously true, since the antecedent is false.",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant 0 <= v4;\n    loop invariant 0 <= l <= n;\n    loop invariant l%1 == 0;\n    loop invariant (l%4 == 0) ==> (v4 == (\\at(v4, Pre) + (l/4)));\n    loop invariant (l%3 == 0) ==> (i == (\\at(i, Pre) + (l/3)));\n    loop invariant (l%2 == 0) ==> (j == (\\at(j, Pre) + (l/2)));\n    loop invariant ((l%4 != 0) && (l%3 != 0) && (l%2 != 0)) ==> (k == (\\at(k, Pre) + 1));\n    loop invariant ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/",
            "/*@ \n  loop invariant 0 <= i <= l;\n  loop invariant 0 <= j <= l;\n  loop invariant 0 <= k <= l;\n  loop invariant 0 <= v4 <= l;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\nloop invariant i5: i + j + k + v4 == 4 * v4 + 3 * i + 2 * j + k;\nloop invariant i6: l <= n;\nloop invariant i7: v4 + i + j + k == l;\nloop invariant i8: 0 <= l <= n;\nloop invariant i9: 0 <= i;\nloop invariant i10: 0 <= j;\nloop invariant i11: 0 <= k;\nloop invariant i12: 0 <= v4;\nloop invariant i13: i + j + k + v4 == l;\nloop invariant i14: (l%4 == 0) ==> (v4 <= l/4);\nloop invariant i15: (l%3 == 0) ==> (i <= l/3);\nloop invariant i16: (l%2 == 0) ==> (j <= l/2);\nloop invariant i17: !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\nloop invariant i18: i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\nloop invariant i19: i+j+k+v4 <= l;\nloop invariant i20: l%4 == 0 ==> v4 == (l/4) - (i/3) - (j/2) - k;\nloop invariant i21: l%3 == 0 && l%4 != 0 ==> i == (l/3) - (j/2) - k;\nloop invariant i22: l%2 == 0 && l%3 != 0 && l%4 != 0 ==> j == (l/2) - k;\nloop invariant i23: l%2 != 0 && l%3 != 0 && l%4 != 0 ==> k == l;\nloop invariant i24: l ==> (i+j+k+v4) == l;\nloop invariant i25: 0 <= i;\nloop invariant i26: 0 <= j;\nloop invariant i27: 0 <= k;\nloop invariant i28: 0 <= v4;\nloop invariant i29: 0 <= l <= n;\nloop invariant i30: l%1 == 0;\nloop invariant i31: (l%4 == 0) ==> (v4 == (\\at(v4, Pre) + (l/4)));\nloop invariant i32: (l%3 == 0) ==> (i == (\\at(i, Pre) + (l/3)));\nloop invariant i33: (l%2 == 0) ==> (j == (\\at(j, Pre) + (l/2)));\nloop invariant i34: ((l%4 != 0) && (l%3 != 0) && (l%2 != 0)) ==> (k == (\\at(k, Pre) + 1));\nloop invariant i35: ((n > SIZE) ==> ((i+j+k+v4) == l));\nloop invariant i36: 0 <= i <= l;\nloop invariant i37: 0 <= j <= l;\nloop invariant i38: 0 <= k <= l;\nloop invariant i39: 0 <= v4 <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
        "checker_output": false,
        "checker_message": "Annotation error on line 51: unbound logic variable v4. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= l;\nloop invariant i2: 0 <= j <= l;\nloop invariant i3: 0 <= k <= l;\nloop invariant i4: 0 <= v4 <= l;\n\nloop invariant i6: l <= n;\nloop invariant i7: v4 + i + j + k == l;\nloop invariant i8: 0 <= l <= n;\nloop invariant i9: 0 <= i;\nloop invariant i10: 0 <= j;\nloop invariant i11: 0 <= k;\nloop invariant i12: 0 <= v4;\nloop invariant i13: i + j + k + v4 == l;\n\n\n\nloop invariant i17: !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2);\nloop invariant i18: i >= 0 && j >= 0 && k >= 0 && v4 >= 0;\nloop invariant i19: i+j+k+v4 <= l;\n\n\n\n\nloop invariant i24: l ==> (i+j+k+v4) == l;\nloop invariant i30: l%1 == 0;\n\n\n\n\nloop invariant i35: ((n > SIZE) ==> ((i+j+k+v4) == l));\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant 0 <= i <= l is inductive.\nloop invariant 0 <= j <= l is inductive.\nloop invariant 0 <= k <= l is inductive.\nloop invariant 0 <= v4 <= l is inductive.\nloop invariant l <= n is inductive.\nloop invariant v4 + i + j + k == l is inductive.\nloop invariant 0 <= l <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= k is inductive.\nloop invariant 0 <= v4 is inductive.\nloop invariant i + j + k + v4 == l is inductive.\nloop invariant !(l%4) || !(l%3) || !(l%2) || (l%4 && l%3 && l%2) is inductive.\nloop invariant i >= 0 && j >= 0 && k >= 0 && v4 >= 0 is inductive.\nloop invariant i+j+k+v4 <= l is inductive.\nloop invariant l ==> (i+j+k+v4) == l is inductive.\nloop invariant l%1 == 0 is inductive.\nloop invariant ((n > SIZE) ==> ((i+j+k+v4) == l)) is inductive.\nAssertion ((i + j) + k) + v4 == l: Valid\n"
    },
    "stats": {
        "success": [
            1,
            2,
            3,
            4,
            5,
            6,
            9,
            11,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            35,
            37,
            38,
            39,
            42,
            43,
            45,
            47,
            48,
            49,
            52,
            53,
            54,
            56,
            58,
            59,
            60,
            61,
            63,
            64,
            65,
            66,
            68,
            70,
            72,
            73,
            77,
            79,
            81,
            83,
            85,
            86,
            87,
            88,
            89,
            95,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            114,
            115,
            118,
            121,
            126,
            128,
            129,
            130,
            132,
            133,
            135,
            137,
            138,
            146,
            148,
            152,
            153,
            154,
            157,
            162,
            169,
            171,
            172,
            173,
            174,
            176,
            177,
            178,
            179,
            180,
            182,
            183,
            185,
            186,
            187,
            189,
            190,
            191,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            208,
            209,
            210,
            212,
            215,
            216,
            217,
            218,
            219,
            220,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            234,
            235,
            236,
            237,
            238,
            242,
            244,
            245,
            246,
            250,
            253,
            259,
            261,
            262,
            265,
            267,
            269,
            271,
            272,
            273,
            274,
            276,
            278,
            284,
            285,
            286,
            287,
            290,
            294,
            297,
            298,
            300,
            301,
            302,
            303,
            304,
            307,
            308,
            309,
            311,
            312,
            314,
            315,
            316,
            318,
            319,
            320,
            321,
            322,
            324,
            326,
            328,
            329,
            331,
            333,
            335,
            339,
            340,
            341,
            342,
            343,
            344,
            345,
            346,
            348,
            349,
            351,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            363,
            364,
            372,
            374,
            376,
            378,
            379,
            380,
            381,
            382,
            383,
            392,
            393,
            394
        ],
        "failure": [
            0,
            7,
            8,
            10,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            36,
            40,
            41,
            44,
            46,
            50,
            51,
            55,
            57,
            62,
            67,
            69,
            71,
            74,
            75,
            76,
            78,
            80,
            82,
            84,
            90,
            91,
            92,
            93,
            94,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            116,
            117,
            119,
            120,
            122,
            123,
            124,
            125,
            127,
            131,
            134,
            136,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            147,
            149,
            150,
            151,
            155,
            156,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            167,
            168,
            170,
            175,
            181,
            184,
            188,
            192,
            193,
            194,
            195,
            203,
            204,
            205,
            206,
            207,
            211,
            213,
            214,
            221,
            222,
            223,
            224,
            233,
            239,
            240,
            241,
            243,
            247,
            248,
            249,
            251,
            252,
            254,
            255,
            256,
            257,
            258,
            260,
            263,
            264,
            266,
            268,
            270,
            275,
            277,
            279,
            280,
            281,
            282,
            283,
            288,
            289,
            291,
            292,
            293,
            295,
            296,
            299,
            305,
            306,
            310,
            313,
            317,
            323,
            325,
            327,
            330,
            332,
            334,
            336,
            337,
            338,
            347,
            350,
            352,
            353,
            361,
            362,
            365,
            366,
            367,
            368,
            369,
            370,
            371,
            373,
            375,
            377,
            384,
            385,
            386,
            387,
            388,
            389,
            390,
            391
        ],
        "skipped": [],
        "total": 395,
        "success_rate": 0.529113924050633
    }
}