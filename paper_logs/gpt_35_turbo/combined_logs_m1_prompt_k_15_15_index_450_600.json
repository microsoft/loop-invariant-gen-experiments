{
    "logs": [
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_k.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.6
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/half.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x==1 && y==1)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y=x;\n  }\n  {;\n//@ assert(y>=1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  while (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  while (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  while (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  while (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  while (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  while (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  while (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x==0 && n>0)) return 0;\n  while (x<n) {\n    x++;\n  }\n  {;\n//@ assert(x==n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  while (i>0) {\n    i--;\n  }\n  {;\n//@ assert(i>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((i==0) && (k==0) && (n>0))) return 0;\n  while (i < n) {\n    i++;k++;\n  }\n  {;\n//@ assert((i == k) && (k == n));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (1) {\n    if (x+y>-2) {\n      break;\n    }\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;\n//@ assert(j==200);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x<0)) return 0;\n  while (x<10) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k>i-j)) return 0;\n  while (i<j) {\n    k=k+1;\n    i=i+1;\n  }\n  {;\n//@ assert(k > 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  if (!(i * i < j * j)) return 0;\n  while (i < j) {\n    j = j - i;\n    if (j < i) {j = j + i;\n    i = j - i;\n    j = j - i;}\n  }\n  {;\n//@ assert(j == i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+100;\n  }\n  {;\n//@ assert(x >= y && x <= y + 99);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  while (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x>=0)) return 0;\n  while (x<100 && x>=0) {\n    x++;\n  }\n  {;\n//@ assert(x>=100);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  while (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;\n  }\n  {;\n//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;\n//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == 4*y && x >= 0)) return 0;\n  while (x > 0) {\n    x-=4;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && x >= 0 && x+y+z==0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n    z++;\n    z++;\n  }\n  {;\n//@ assert(z<=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 100 && y < 100)) return 0;\n  while (x < 100 && y < 100) {\n    x=x+1;\n    y=y+1;\n  }\n  {;\n//@ assert(x == 100 || y == 100);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if ((x<0 && y<0)) {\n      x=x+7; y=y-10;\n    }\n    if ((x<0 && y>=0)) {\n      x=x+7; y=y+3;\n    } else {\n      x=x+10; y=y+3;\n    }\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if (x < 0) x = x + 7;\n    else x = x + 10;\n    if (y < 0) y = y - 10;\n    else y = y + 3;\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  while (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int r = unknown_int();\n  if (!(r > i + j)) return 0;\n  while (i > 0) {\n    i = i - 1;\n    j = j + 1;\n  }\n  {;\n//@ assert(r > i + j);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  while (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/count_up_down-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/count_up_down-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    if (!(y!=0)) return 0;\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum03-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n      if (x<10) {\n          sn = sn + a;\n      }\n      x++;\n      {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum03-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum04-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum04-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_02-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_02-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    while(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_03-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\n#define LIMIT 1000000\n\nint main() {\n    int x=unknown_int();\n    int y=unknown_int();\n    if (!(y <= LIMIT)) return 0;\n\n    if (y>0) {\n        while(x<100) {\n            x=x+y;\n        }\n    }\n\n    {;\n//@ assert(y<=0 || (y>0 && x>=100));\n}\n\n    return 0;\n}\n",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/trex03-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/trex03-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;\n//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i,j;\n  i = 0; j=0;\n  while(i<SIZE){ \n\n    if(unknown_int())\t  \n      i = i + 8; \n    else\n     i = i + 4;    \n\t  \n  }\n  j = i/4 ;\n    {;\n//@ assert( (j * 4) == i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=0;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz=z+2;\n\t\tx++;\n\t}\n  {;\n//@ assert(!(z%2));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x = 0;\n\tint y = 500000;\n\twhile(x < 1000000) {\n\t\tif (x < 500000) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\t{;\n//@ assert(y==x);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n    int x = 0;\n    int y = 500000;\n    while(x < 1000000) {\n\tif (x < 500000) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y!=x);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt8.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sum_natnum.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  while(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        }
    ]
}