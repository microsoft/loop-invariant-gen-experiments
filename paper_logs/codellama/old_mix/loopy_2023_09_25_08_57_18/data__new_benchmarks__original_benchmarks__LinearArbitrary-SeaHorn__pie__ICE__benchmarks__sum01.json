{
    "logs": {
        "file": [
            "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
            },
            {
                "role": "user",
                "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
            },
            {
                "role": "assistant",
                "content": " The loop in the program above is:\n```\nfor(i=1; i<=n; i++) {\n  sn = sn + a;\n}\n```\nTo find the loop invariants, we need to analyze the loop body and the loop condition.\n\n1. Loop condition: The loop condition is `i<=n`. This means that the loop will execute at most `n` times.\n2. Loop body: The loop body is `sn = sn + a;`. This increments the value of `sn` by `a` in each iteration.\n\nBased on the loop condition and body, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is initialized to 0.\n2. In every iteration of the loop, `sn` is incremented by `a`.\n3. After the loop termination, `sn` is equal to `n*a` or 0.\n\nThese loop invariants can be used to verify the post-condition of the loop, which is `sn==n*a || sn == 0`.\n\nHere are the loop invariants in ACSL notation:\n```\n/*@ \n  loop invariant sn == 0 || sn == n*a;\n  loop invariant i <= n;\n*/\n```\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. Additionally, we have not used any non-deterministic function calls or the `@at(x, Pre)` notation."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program above, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of a single statement: `sn = sn + a;`. This statement increments the variable `sn` by the value of `a` in each iteration of the loop.\n\nThe loop condition is `i<=n`. This condition checks whether the variable `i` is less than or equal to the variable `n`.\n\nTo find the loop invariants, we need to identify the values of the variables that remain constant or unchanged during the loop execution. In this case, the only variable that remains constant is `a`, whose value is set to `1` at the beginning of the program.\n\nThe loop invariants for the loop in the program above are:\n\n* `a` is equal to `1`\n* `sn` is equal to `0` or `n*a`\n\nThese loop invariants imply that the loop will terminate when `i` is greater than `n`, and the value of `sn` will be equal to `n*a` or `0`.\n\nHere is the code block with the loop invariants:\n```\n/*@\n  loop invariant a == 1;\n  loop invariant sn == 0 || sn == n*a;\n*/\n```"
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program, we need to analyze the loop body and the loop condition.\n\n1. The loop body is `sn = sn + a;`, which updates the value of `sn` by adding `a` to it.\n2. The loop condition is `i <= n`, which checks whether `i` is less than or equal to `n`.\n\nBased on the loop body and the loop condition, we can infer the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to `0`.\n2. In every iteration of the loop, `sn` is equal to `a * i`.\n3. After the loop termination, `sn` is equal to `n * a` if `n` is non-zero, or `0` otherwise.\n\nHere are the loop invariants in ACSL notation:\n```\n/*@\n    loop invariant sn == 0;\n    loop invariant sn == a * i;\n    loop invariant sn == n * a || sn == 0;\n*/\n```\nNote that we have split the last loop invariant into two parts: `sn == n * a` and `sn == 0`. This is because the post-condition is a disjunction (a logical OR) of two possible outcomes."
            },
            {
                "role": "assistant",
                "content": " The given C program has a loop that iterates from 1 to n, where n is an unknown integer. The loop body adds the value of a to the variable sn in each iteration. The program also has a post-condition that asserts the value of sn to be equal to n\\*a or 0.\n\nTo find the loop invariants for this program, we need to analyze the loop body and the post-condition. We can start by identifying the loop condition, which is i <= n.\n\nBefore the loop execution, we can assume that sn = 0, since it is not initialized. This is a loop invariant because sn is not modified before the loop starts.\n\nIn every iteration of the loop, we can assume that sn = sn + a, which is true by definition. This is also a loop invariant because sn is not modified in the loop body.\n\nAfter the loop termination, we can assume that sn = n\\*a, since the loop body adds the value of a to sn in each iteration. This is a loop invariant because sn is not modified after the loop terminates.\n\nTherefore, the necessary loop invariants for this program are:\n\n* sn = 0\n* sn = sn + a\n* sn = n\\*a\n\nWe can output these loop invariants in ACSL notation as follows:\n```\n/*@\n    loop invariant sn == 0;\n    loop invariant sn == sn + a;\n    loop invariant sn == n * a;\n*/\n```\nNote that we have used the \\at(x, Pre) notation to denote the value of x before the loop starts, and the \\at(x, Post) notation to denote the value of x after the loop terminates."
            },
            {
                "role": "assistant",
                "content": " The loop in the program above is:\n```\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n}\n```\nTo find the loop invariants, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body is:\n```\nsn = sn + a;\n```\nThis statement updates the value of `sn` by adding `a` to its previous value.\n\nLoop Condition:\nThe loop condition is:\n```\ni<=n\n```\nThis condition checks whether `i` is less than or equal to `n`.\n\nLoop Invariants:\nBased on the analysis of the loop body and the loop condition, we can identify the following loop invariants:\n\n1. `sn` is initialized to 0 before the loop starts.\n2. `sn` is updated by adding `a` to its previous value in each iteration of the loop.\n3. The loop continues until `i` is greater than `n`.\n\nTherefore, the loop invariants for the loop in the program above are:\n```\n/*@ \n    loop invariant sn == 0 || sn == n*a;\n    loop invariant i <= n;\n*/\n```\nNote that we have used the `sn == 0 || sn == n*a` invariant to imply the post-condition `sn == n*a || sn == 0`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program above, we need to analyze the loop body and the loop condition.\n\n1. The loop body consists of a single statement: `sn = sn + a;`. This statement increments `sn` by `a` in each iteration of the loop.\n2. The loop condition is `i <= n`. This condition checks whether `i` is less than or equal to `n`.\n\nBased on the loop body and the loop condition, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to `0`.\n2. In every iteration of the loop, `sn` is equal to `a` times the number of iterations that have been executed so far.\n3. After the loop termination, `sn` is equal to `n` times `a`.\n\nWe can express these loop invariants in ACSL annotations as follows:\n```\n/*@ \n    loop invariant sn == 0 || sn == a * (i - 1);\n    loop invariant i <= n;\n*/\n```\nNote that we have used the `||` operator to combine the two loop invariants. This is because the loop invariant `sn == 0` is true before the loop execution, while the loop invariant `sn == a * (i - 1)` is true in every iteration of the loop.\n\nAlso, we have used the `i - 1` expression to account for the fact that the loop counter `i` starts at 1 and increments by 1 in each iteration."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body is executed repeatedly while the loop condition is true. The loop body updates the value of the variable `sn` by adding the value of `a` to it. The loop body can be written as follows:\n```\nsn = sn + a;\n```\n2. Loop Condition:\nThe loop condition is the condition that must be true for the loop to continue executing. In this case, the loop condition is:\n```\ni <= n\n```\nThis condition is true as long as `i` is less than or equal to `n`.\n\n3. Loop Invariants:\nA loop invariant is a condition that is true before the loop starts, remains true during the loop execution, and is true after the loop terminates. In this case, we need to find the loop invariants that imply the post-condition `sn == n*a || sn == 0`.\n\nTo find the loop invariants, we can analyze the loop body and the loop condition. We can start by identifying the variables that are involved in the loop body and the loop condition. In this case, the variables are `sn`, `a`, and `n`.\n\nBased on the loop body, we can identify the following loop invariants:\n\n* `sn` is a sum of `a` and a multiple of `n`. This can be written as `sn = sn + a`.\n* `sn` is a multiple of `a`. This can be written as `sn = sn + a*k` for some integer `k`.\n\nBased on the loop condition, we can identify the following loop invariant:\n\n* `i` is less than or equal to `n`. This can be written as `i <= n`.\n\nTo find the loop invariants that imply the post-condition `sn == n*a || sn == 0`, we can use the loop invariants we identified above. We can write the post-condition as:\n```\nsn == n*a || sn == 0\n```\nWe can rewrite this post-condition using the loop invariants as follows:\n```\nsn == n*a + a*k || sn == 0\n```\nThis implies that `sn` is equal to `n*a` or `0`.\n\nTherefore, the loop invariants that imply the post-condition `sn == n*a || sn == 0` are:\n\n* `sn` is a sum of `a` and a multiple of `n`.\n* `sn` is a multiple of `a`.\n* `i` is less than or equal to `n`.\n\nTo write these loop invariants in the ACSL annotation format, we can use the following code block:\n```\n/*@\n    loop invariant sn == n*a + a*k;\n    loop invariant sn == 0;\n    loop invariant i <= n;\n*/\n```\nNote that we have assumed that `k` is an integer. If `k` is not an integer, we need to modify the loop invariants accordingly."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body: The loop body consists of a single statement: `sn = sn + a;`. This statement increments the variable `sn` by the value of `a` in each iteration of the loop.\n2. Loop Condition: The loop condition is `i <= n`. This means that the loop will iterate until `i` is greater than or equal to `n`.\n\nBased on the loop body and condition, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to 0. This is because the loop starts with `i` equal to 1, and `sn` is initialized to 0 before the loop.\n2. In every iteration of the loop, `sn` is equal to the sum of `a` and the previous value of `sn`. This is because the loop body increments `sn` by `a` in each iteration.\n3. After the loop termination, `sn` is equal to `n*a` or 0. This is because the loop condition is `i <= n`, and the loop will terminate when `i` is greater than or equal to `n`.\n\nTherefore, the loop invariants for the loop in the program are:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant sn == a + sn;\n    loop invariant sn == n*a || sn == 0;\n*/\n```\nNote that these loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, respectively."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants of the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, let's identify the loop condition:\n```scss\ni <= n\n```\nThis condition is true at the beginning of each iteration of the loop, and it is also true after the loop terminates.\n\nNext, let's identify the loop invariant:\n```scss\nsn == n*a || sn == 0\n```\nThis invariant is true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nNow, let's use the loop invariant to verify the post-condition:\n```scss\nsn == n*a || sn == 0\n```\nThis loop invariant implies that the post-condition `sn == n*a || sn == 0` is true after the loop termination.\n\nTherefore, the loop invariant for the while loop in the given program is:\n```scss\nsn == n*a || sn == 0\n```\nThis loop invariant can be used to verify the post-condition `sn == n*a || sn == 0` of the while loop using Frama-C."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of a single statement: `sn = sn + a;`. This statement updates the value of `sn` by adding `a` to it.\n2. Loop Condition:\nThe loop condition is `i <= n`. This condition checks whether the loop should continue executing or not.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\nThere are no loop invariants that are true before the loop execution.\n2. In every iteration of the loop:\nThe loop invariant `sn == n*a` is true in every iteration of the loop. This invariant is true because the loop body updates the value of `sn` by adding `a` to it, and the loop condition checks whether the loop should continue executing or not.\n3. After the loop termination:\nThere are no loop invariants that are true after the loop termination.\n\nSo, the loop invariants for the loop in the given program are:\n\n* `sn == n*a`\n\nNote that these loop invariants imply the post-condition `sn == n*a || sn == 0`, which is the desired property of the program."
            },
            {
                "role": "assistant",
                "content": " The given program has a loop with a single iteration variable `i`, and the loop condition is `i <= n`. The loop body increments the variable `sn` by `a` in each iteration.\n\nTo find the loop invariants for this loop, we need to analyze the loop body and the loop condition. We can start by noting that the loop body does not modify the variable `n`, so we can assume that `n` is a constant value throughout the loop.\n\nNext, we can analyze the loop condition. The loop condition is `i <= n`, which means that `i` is less than or equal to `n`. We can express this as a loop invariant by writing `i <= n` as a loop invariant.\n\nNow, we need to find the loop invariant that is true before the loop execution, in every iteration of the loop, and after the loop termination. We can do this by analyzing the loop body and the loop condition.\n\nBefore the loop execution, the variable `sn` is initialized to 0. We can express this as a loop invariant by writing `sn == 0` as a loop invariant.\n\nIn every iteration of the loop, the variable `sn` is incremented by `a`. We can express this as a loop invariant by writing `sn == sn + a` as a loop invariant.\n\nAfter the loop termination, the variable `sn` is equal to `n*a` or 0. We can express this as a loop invariant by writing `sn == n*a || sn == 0` as a loop invariant.\n\nTherefore, the loop invariants for this loop are:\n```\n/*@\n  loop invariant i <= n;\n  loop invariant sn == 0;\n  loop invariant sn == sn + a;\n  loop invariant sn == n*a || sn == 0;\n*/\n```\nNote that we have used the loop invariants to express the properties of the loop that we want to verify. In this case, we want to verify that the loop terminates and that the variable `sn` is equal to `n*a` or 0 after the loop termination."
            },
            {
                "role": "assistant",
                "content": " The program has a single loop, which is the `for` loop. To find the loop invariants, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body is executed for each iteration of the loop. It consists of a single statement: `sn = sn + a;`. This statement updates the value of `sn` by adding `a` to it.\n2. Loop Condition:\nThe loop condition is the condition that must be true in order for the loop to continue executing. In this case, the loop condition is `i <= n`. This condition checks whether the current value of `i` is less than or equal to `n`.\n3. Loop Invariants:\nA loop invariant is a condition that is true before the loop execution, at the start of each iteration, and after the loop termination. In other words, a loop invariant is a condition that is preserved throughout the loop execution.\n\nTo find the loop invariants, we need to identify the conditions that are true before the loop execution, at the start of each iteration, and after the loop termination.\n\nHere are the loop invariants for the loop in the program:\n\n1. `sn` is initialized to 0 before the loop execution.\n2. `sn` is updated by adding `a` to it in each iteration of the loop.\n3. `i` is initialized to 1 before the loop execution.\n4. `i` is incremented by 1 in each iteration of the loop.\n5. `n` is initialized to a value returned by `unknown_int()` before the loop execution.\n6. `n` is not modified within the loop.\n7. The loop terminates when `i` is greater than or equal to `n`.\n\nWe can express these loop invariants using ACSL annotations as follows:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n == unknown_int();\n    loop invariant n <= i;\n    loop invariant i <= n;\n    loop invariant sn == i*a || sn == 0;\n*/\n```\nNote that the last loop invariant `sn == i*a || sn == 0` is a consequence of the other loop invariants and the loop condition. It states that the value of `sn` is equal to `i*a` or 0, which is the expected result of the loop."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of a single statement: `sn = sn + a;`. This statement updates the value of `sn` by adding `a` to its current value.\n\nThe loop condition is `i <= n`, which means the loop will continue to execute as long as `i` is less than or equal to `n`.\n\nBased on this analysis, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to 0.\n2. In every iteration of the loop, `sn` is equal to the sum of `a` and the previous value of `sn`.\n3. After the loop termination, `sn` is equal to `n * a` or 0.\n\nThese loop invariants can be used to verify the post-condition of the program, which is `sn == n * a || sn == 0`.\n\nHere is the code block with the loop invariants:\n```\n/*@ \n    loop invariant sn == 0 || sn == n * a;\n    loop invariant sn == 0 || sn == n * a;\n*/\n```\nNote that we have used the `assume` statement to specify the pre-conditions of the program. We have also used the `unknown_int` function to generate a random integer value for `n`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program above, we need to analyze the loop body and the loop condition.\n\nThe loop body is:\n```\nsn = sn + a;\n```\nThis statement updates the value of `sn` by adding `a` to it.\n\nThe loop condition is:\n```\ni <= n\n```\nThis condition checks whether the loop should continue executing or not.\n\nBased on the above analysis, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to `0`.\n2. In every iteration of the loop, `sn` is equal to `i*a`.\n3. After the loop termination, `sn` is equal to `n*a` or `0`.\n\nWe can express these loop invariants using ACSL annotations as follows:\n```\n/*@\n    loop invariant sn == 0;\n    loop invariant sn == i*a;\n    loop invariant sn == n*a || sn == 0;\n@*/\n```\nNote that we have used the `loop invariant` keyword to indicate that the loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. We have also used the `==` operator to express the equality between the variables and the constants.\n\nAlso, note that we have used the `||` operator to express the disjunction between the two conditions in the last loop invariant. This is because the post-condition of the loop is that `sn` is equal to `n*a` or `0`, and we want to ensure that this condition is true after the loop termination."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program, we need to analyze the loop body and the loop condition.\n\n1. The loop body consists of a single statement: `sn = sn + a;`. This statement updates the value of `sn` by adding `a` to it.\n2. The loop condition is `i <= n`. This condition checks whether the loop should continue executing or not.\n\nBased on the above analysis, we can identify the following loop invariants:\n\n1. Before the loop execution, `sn` is equal to 0. This is because the loop initializes `sn` to 0 before starting the loop.\n2. In every iteration of the loop, `sn` is equal to the sum of `a` and the previous value of `sn`. This is because the loop updates `sn` by adding `a` to it in each iteration.\n3. After the loop termination, `sn` is equal to `n*a` or 0. This is because the loop stops executing when `i` is greater than `n`, and the final value of `sn` is either `n*a` or 0, depending on whether the loop executes at least once.\n\nHere are the loop invariants in code block format:\n```\n/*@\n  loop invariant sn == 0;\n  loop invariant sn == a + sn;\n  loop invariant sn == n*a || sn == 0;\n*/\n```\nNote that we have split the third loop invariant into two parts, `sn == n*a` and `sn == 0`, to make it easier to understand. These two parts are equivalent, and either one of them can be used to verify the post-condition."
            }
        ],
        "invariants": [
            "/*@ \n  loop invariant sn == 0 || sn == n*a;\n  loop invariant i <= n;\n*/",
            "/*@\n  loop invariant a == 1;\n  loop invariant sn == 0 || sn == n*a;\n*/",
            "/*@\n    loop invariant sn == 0;\n    loop invariant sn == a * i;\n    loop invariant sn == n * a || sn == 0;\n*/",
            "/*@\n    loop invariant sn == 0;\n    loop invariant sn == sn + a;\n    loop invariant sn == n * a;\n*/",
            "/*@ \n    loop invariant sn == 0 || sn == n*a;\n    loop invariant i <= n;\n*/",
            "/*@ \n    loop invariant sn == 0 || sn == a * (i - 1);\n    loop invariant i <= n;\n*/",
            "/*@\n    loop invariant sn == n*a + a*k;\n    loop invariant sn == 0;\n    loop invariant i <= n;\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant sn == a + sn;\n    loop invariant sn == n*a || sn == 0;\n*/",
            "i <= n",
            "ERROR: Output does not contain at least 1 code block\nOutput:\n To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of a single statement: `sn = sn + a;`. This statement updates the value of `sn` by adding `a` to it.\n2. Loop Condition:\nThe loop condition is `i <= n`. This condition checks whether the loop should continue executing or not.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\nThere are no loop invariants that are true before the loop execution.\n2. In every iteration of the loop:\nThe loop invariant `sn == n*a` is true in every iteration of the loop. This invariant is true because the loop body updates the value of `sn` by adding `a` to it, and the loop condition checks whether the loop should continue executing or not.\n3. After the loop termination:\nThere are no loop invariants that are true after the loop termination.\n\nSo, the loop invariants for the loop in the given program are:\n\n* `sn == n*a`\n\nNote that these loop invariants imply the post-condition `sn == n*a || sn == 0`, which is the desired property of the program.",
            "/*@\n  loop invariant i <= n;\n  loop invariant sn == 0;\n  loop invariant sn == sn + a;\n  loop invariant sn == n*a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n == unknown_int();\n    loop invariant n <= i;\n    loop invariant i <= n;\n    loop invariant sn == i*a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == 0 || sn == n * a;\n    loop invariant sn == 0 || sn == n * a;\n*/",
            "/*@\n    loop invariant sn == 0;\n    loop invariant sn == i*a;\n    loop invariant sn == n*a || sn == 0;\n@*/",
            "/*@\n  loop invariant sn == 0;\n  loop invariant sn == a + sn;\n  loop invariant sn == n*a || sn == 0;\n*/"
        ],
        "completions": [
            {
                "invariants": "/*@ \n  loop invariant sn == 0 || sn == n*a;\n  loop invariant i <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0 || sn == n*a;\nloop invariant i2: i <= n;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 || sn == n*a is established but not preserved.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n  loop invariant a == 1;\n  loop invariant sn == 0 || sn == n*a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: a == 1;\nloop invariant i2: sn == 0 || sn == n*a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant a == 1 is inductive.\nloop invariant sn == 0 || sn == n*a is established but not preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: a == 1;\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant a == 1 is inductive.\nAssertion sn == n * 1 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant sn == 0;\n    loop invariant sn == a * i;\n    loop invariant sn == n * a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == a * i;\nloop invariant i3: sn == n * a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 is inductive.\nloop invariant sn == a * i is preserved but not established.\nloop invariant sn == n * a || sn == 0 is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant sn == 0;\n    loop invariant sn == sn + a;\n    loop invariant sn == n * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == sn + a;\nloop invariant i3: sn == n * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 is inductive.\nloop invariant sn == sn + a is preserved but not established.\nloop invariant sn == n * a is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant sn == 0 || sn == n*a;\n    loop invariant i <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0 || sn == n*a;\nloop invariant i2: i <= n;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 || sn == n*a is established but not preserved.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant sn == 0 || sn == a * (i - 1);\n    loop invariant i <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0 || sn == a * (i - 1);\nloop invariant i2: i <= n;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 || sn == a * (i - 1) is established but not preserved.\nloop invariant i <= n is neither established nor preserved.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant sn == n*a + a*k;\n    loop invariant sn == 0;\n    loop invariant i <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == n*a + a*k;\nloop invariant i2: sn == 0;\nloop invariant i3: i <= n;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 9: unbound logic variable k. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant sn == 0;\n    loop invariant sn == a + sn;\n    loop invariant sn == n*a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == a + sn;\nloop invariant i3: sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 is inductive.\nloop invariant sn == a + sn is preserved but not established.\nloop invariant sn == n*a || sn == 0 is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "i <= n",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants/variants found"
            },
            {
                "invariants": "/*@\n  loop invariant i <= n;\n  loop invariant sn == 0;\n  loop invariant sn == sn + a;\n  loop invariant sn == n*a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: i <= n;\nloop invariant i2: sn == 0;\nloop invariant i3: sn == sn + a;\nloop invariant i4: sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i <= n is preserved but not established.\nloop invariant sn == 0 is inductive.\nloop invariant sn == sn + a is preserved but not established.\nloop invariant sn == n*a || sn == 0 is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n == unknown_int();\n    loop invariant n <= i;\n    loop invariant i <= n;\n    loop invariant sn == i*a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: i == 1;\nloop invariant i3: n == unknown_int();\nloop invariant i4: n <= i;\nloop invariant i5: i <= n;\nloop invariant i6: sn == i*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 11: unexpected token ')'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant sn == 0 || sn == n * a;\n    loop invariant sn == 0 || sn == n * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0 || sn == n * a;\nloop invariant i2: sn == 0 || sn == n * a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 || sn == n * a is established but not preserved.\nloop invariant sn == 0 || sn == n * a is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant sn == 0;\n    loop invariant sn == i*a;\n    loop invariant sn == n*a || sn == 0;\n@*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == i*a;\nloop invariant i3: sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 is inductive.\nloop invariant sn == i*a is preserved but not established.\nloop invariant sn == n*a || sn == 0 is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n  loop invariant sn == 0;\n  loop invariant sn == a + sn;\n  loop invariant sn == n*a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0;\nloop invariant i2: sn == a + sn;\nloop invariant i3: sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant sn == 0 is inductive.\nloop invariant sn == a + sn is preserved but not established.\nloop invariant sn == n*a || sn == 0 is inductive.\nAssertion sn == n * 1 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\nloop invariant i1: sn == 0 || sn == n*a;\nloop invariant i2: i <= n;\nloop invariant i3: a == 1;\nloop invariant i4: sn == 0 || sn == n*a;\nloop invariant i5: sn == 0;\nloop invariant i6: sn == a * i;\nloop invariant i7: sn == n * a || sn == 0;\nloop invariant i8: sn == 0;\nloop invariant i9: sn == sn + a;\nloop invariant i10: sn == n * a;\nloop invariant i11: sn == 0 || sn == n*a;\nloop invariant i12: i <= n;\nloop invariant i13: sn == 0 || sn == a * (i - 1);\nloop invariant i14: i <= n;\nloop invariant i15: sn == n*a + a*k;\nloop invariant i16: sn == 0;\nloop invariant i17: i <= n;\nloop invariant i18: sn == 0;\nloop invariant i19: sn == a + sn;\nloop invariant i20: sn == n*a || sn == 0;\nloop invariant i21: i <= n;\nloop invariant i22: sn == 0;\nloop invariant i23: sn == sn + a;\nloop invariant i24: sn == n*a || sn == 0;\nloop invariant i25: sn == 0;\nloop invariant i26: i == 1;\nloop invariant i27: n == unknown_int();\nloop invariant i28: n <= i;\nloop invariant i29: i <= n;\nloop invariant i30: sn == i*a || sn == 0;\nloop invariant i31: sn == 0 || sn == n * a;\nloop invariant i32: sn == 0 || sn == n * a;\nloop invariant i33: sn == 0;\nloop invariant i34: sn == i*a;\nloop invariant i35: sn == n*a || sn == 0;\nloop invariant i36: sn == 0;\nloop invariant i37: sn == a + sn;\nloop invariant i38: sn == n*a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 35: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  /*@\n\n\nloop invariant i3: a == 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant a == 1 is inductive.\nAssertion sn == n * 1 || sn == 0: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            6,
            9,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            37,
            38,
            39,
            40,
            43,
            49,
            52,
            58,
            60,
            63,
            64,
            65,
            66,
            68,
            72,
            73,
            79,
            83,
            85,
            86,
            87,
            88,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            115,
            118,
            128,
            129,
            130,
            137,
            138,
            144,
            148,
            150,
            153,
            154,
            155,
            162,
            167,
            171,
            172,
            173,
            182,
            189,
            190,
            191,
            196,
            197,
            199,
            200,
            201,
            202
        ],
        "failure": [
            2,
            3,
            4,
            5,
            7,
            8,
            10,
            11,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            35,
            36,
            41,
            42,
            44,
            45,
            46,
            47,
            48,
            50,
            51,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            67,
            69,
            70,
            71,
            74,
            75,
            76,
            77,
            78,
            80,
            81,
            82,
            84,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            114,
            116,
            117,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            131,
            132,
            133,
            134,
            135,
            136,
            139,
            140,
            141,
            142,
            143,
            145,
            146,
            147,
            149,
            151,
            152,
            156,
            157,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            168,
            169,
            170,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            183,
            184,
            185,
            186,
            187,
            188,
            192,
            193,
            194,
            195,
            198,
            203,
            204
        ],
        "skipped": [],
        "total": 205,
        "success_rate": 0.33170731707317075
    }
}