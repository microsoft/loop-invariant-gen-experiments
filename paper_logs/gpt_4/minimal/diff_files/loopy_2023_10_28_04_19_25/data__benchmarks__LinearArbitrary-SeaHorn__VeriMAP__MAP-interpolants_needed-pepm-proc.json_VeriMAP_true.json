{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n*/\n```",
            "```\n/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || (x >= 4 && y == 2 * x + (x - 4));\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2*x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y >= 2 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2*x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x + 2;\n*/\n```",
            "```\n/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n*/",
            "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
            "/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || (x >= 4 && y == 2 * x + (x - 4));\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2*x;\n*/",
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y >= 2 * x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2*x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2 * x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
            "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x;\n*/",
            "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x + 2;\n*/",
            "/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 2*x <= y is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2*x <= y;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y/2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || (x >= 4 && y == 2 * x + (x - 4));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || (x >= 4 && y == 2 * x + (x - 4)) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2*x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y <= 2*x is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant y >= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0 && y >= 0;\nloop invariant i2: y >= 2 * x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2*x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2*x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2*x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y <= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y <= 2 * x is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || y >= 3 * x is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x == y / 2;\n    loop invariant y % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y == 2 * x || y >= 3 * x + 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || y >= 3 * x + 2 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x == y/2;\n    loop invariant y % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x == y/2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 2*x <= y is inductive.\nloop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x == y/2 is inductive.\nloop invariant y % 2 == 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || (x >= 4 && y == 2 * x + (x - 4)) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y <= 2*x is inductive.\nloop invariant x >= 0 && y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2*x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || y >= 3 * x is inductive.\nloop invariant x == y / 2 is inductive.\nloop invariant y % 2 == 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y == 2 * x || y >= 3 * x + 2 is inductive.\nloop invariant x == y/2 is inductive.\nloop invariant y % 2 == 0 is inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2*x <= y;\nloop invariant i4: x == y / 2;\nloop invariant i5: y % 2 == 0;\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y >= 2 * x;\nloop invariant i9: x == y/2;\nloop invariant i10: y % 2 == 0;\nloop invariant i11: x >= 0;\nloop invariant i12: y >= 0;\nloop invariant i13: y == 2 * x || (x >= 4 && y == 2 * x + (x - 4));\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: y <= 2*x;\nloop invariant i17: x >= 0 && y >= 0;\nloop invariant i18: y >= 2 * x;\nloop invariant i19: x >= 0;\nloop invariant i20: y >= 0;\nloop invariant i21: y >= 2*x;\nloop invariant i22: x >= 0;\nloop invariant i23: y >= 0;\nloop invariant i24: y <= 2 * x;\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: y >= 2 * x;\nloop invariant i28: x == y / 2;\nloop invariant i29: y % 2 == 0;\nloop invariant i30: x >= 0;\nloop invariant i31: y >= 0;\nloop invariant i32: y == 2 * x || y >= 3 * x;\nloop invariant i33: x == y / 2;\nloop invariant i34: y % 2 == 0;\nloop invariant i35: x >= 0;\nloop invariant i36: y >= 0;\nloop invariant i37: x >= 0;\nloop invariant i38: y >= 0;\nloop invariant i39: y == 2 * x || y >= 3 * x + 2;\nloop invariant i40: x == y/2;\nloop invariant i41: y % 2 == 0;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2*x <= y;\n\n\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: y >= 2 * x;\n\n\nloop invariant i11: x >= 0;\nloop invariant i12: y >= 0;\n\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\n\nloop invariant i17: x >= 0 && y >= 0;\nloop invariant i18: y >= 2 * x;\nloop invariant i19: x >= 0;\nloop invariant i20: y >= 0;\nloop invariant i21: y >= 2*x;\nloop invariant i22: x >= 0;\nloop invariant i23: y >= 0;\n\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: y >= 2 * x;\n\n\nloop invariant i30: x >= 0;\nloop invariant i31: y >= 0;\n\n\n\nloop invariant i35: x >= 0;\nloop invariant i36: y >= 0;\nloop invariant i37: x >= 0;\nloop invariant i38: y >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 4,
        "failure_count": 11,
        "success_rate": 0.26666666666666666
    }
}