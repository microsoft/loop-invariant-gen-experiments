{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant 2*a + b == 3*i;\n    loop invariant 2*b + a == 3*(n - i);\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= b;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2*i;\n    loop invariant a >= 0 && b >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a + b == 3 * n - 3 * (n - i);\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant 2*a + b == 3*i;\n    loop invariant 2*b + a == 3*(n - i);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i <= n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= b;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2*i;\n    loop invariant a >= 0 && b >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a + b == 3 * n - 3 * (n - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is established but not preserved.\nloop invariant a >= 0 && b >= 0 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: a >= 0 && b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant n >= 0;\n    loop invariant i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant 2*a + b == 3*i;\n    loop invariant 2*b + a == 3*(n - i);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant n >= 0 is inductive.\nloop invariant i <= n is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant 2*a + b == 3*i is established but not preserved.\nloop invariant 2*b + a == 3*(n - i) is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: i >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: i <= n;\nloop invariant i4: a >= 0;\nloop invariant i5: b >= 0;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= b;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is established but not preserved.\nloop invariant a >= b is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a >= 0 && b >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is established but not preserved.\nloop invariant a >= 0 && b >= 0 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: a >= 0 && b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2*i;\n    loop invariant a >= 0 && b >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2*i is established but not preserved.\nloop invariant a >= 0 && b >= 0 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: a >= 0 && b >= 0;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 2 * i;\n    loop invariant a + b == 3 * n - 3 * (n - i);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is established but not preserved.\nloop invariant a + b == 3 * n - 3 * (n - i) is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: a + b == 3 * n - 3 * (n - i);\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is inductive.\nloop invariant a >= 0 && b >= 0 is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant n >= 0 is inductive.\nloop invariant i <= n is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant 2*a + b == 3*i is inductive.\nloop invariant 2*b + a == 3*(n - i) is preserved but not established.\nloop invariant i >= 0 is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is inductive.\nloop invariant a >= b is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is inductive.\nloop invariant a >= 0 && b >= 0 is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2*i is inductive.\nloop invariant a >= 0 && b >= 0 is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 2 * i is inductive.\nloop invariant a + b == 3 * n - 3 * (n - i) is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a + b == 3*i;\nloop invariant i3: 0 <= i <= n;\nloop invariant i4: a + b == 3 * i;\nloop invariant i5: 0 <= i <= n;\nloop invariant i6: a + b == 2 * i;\nloop invariant i7: a >= 0 && b >= 0;\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: a + b == 3 * i;\nloop invariant i10: i >= 0;\nloop invariant i11: n >= 0;\nloop invariant i12: i <= n;\nloop invariant i13: a >= 0;\nloop invariant i14: b >= 0;\nloop invariant i15: 2*a + b == 3*i;\nloop invariant i16: 2*b + a == 3*(n - i);\nloop invariant i17: i >= 0;\nloop invariant i18: a >= 0;\nloop invariant i19: b >= 0;\nloop invariant i20: i <= n;\nloop invariant i21: a + b == 3 * i;\nloop invariant i22: 0 <= i <= n;\nloop invariant i23: a + b == 2 * i;\nloop invariant i24: a >= b;\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: a + b == 3*i;\nloop invariant i27: 0 <= i <= n;\nloop invariant i28: a + b == 2 * i;\nloop invariant i29: a >= 0 && b >= 0;\nloop invariant i30: 0 <= i <= n;\nloop invariant i31: a + b == 2*i;\nloop invariant i32: a >= 0 && b >= 0;\nloop invariant i33: 0 <= i <= n;\nloop invariant i34: a + b == 3 * i;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: a + b == 3 * i;\nloop invariant i37: 0 <= i <= n;\nloop invariant i38: a + b == 3*i;\nloop invariant i39: 0 <= i <= n;\nloop invariant i40: a + b == 2 * i;\nloop invariant i41: a + b == 3 * n - 3 * (n - i);\nloop invariant i42: 0 <= i <= n;\nloop invariant i43: a + b == 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a + b == 3*i;\nloop invariant i3: 0 <= i <= n;\nloop invariant i4: a + b == 3 * i;\nloop invariant i5: 0 <= i <= n;\n\nloop invariant i7: a >= 0 && b >= 0;\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: a + b == 3 * i;\nloop invariant i10: i >= 0;\nloop invariant i11: n >= 0;\nloop invariant i12: i <= n;\nloop invariant i13: a >= 0;\nloop invariant i14: b >= 0;\n\n\nloop invariant i17: i >= 0;\nloop invariant i18: a >= 0;\nloop invariant i19: b >= 0;\nloop invariant i20: i <= n;\nloop invariant i21: a + b == 3 * i;\nloop invariant i22: 0 <= i <= n;\n\n\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: a + b == 3*i;\nloop invariant i27: 0 <= i <= n;\n\nloop invariant i29: a >= 0 && b >= 0;\nloop invariant i30: 0 <= i <= n;\n\nloop invariant i32: a >= 0 && b >= 0;\nloop invariant i33: 0 <= i <= n;\nloop invariant i34: a + b == 3 * i;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: a + b == 3 * i;\nloop invariant i37: 0 <= i <= n;\nloop invariant i38: a + b == 3*i;\nloop invariant i39: 0 <= i <= n;\n\nloop invariant i41: a + b == 3 * n - 3 * (n - i);\nloop invariant i42: 0 <= i <= n;\nloop invariant i43: a + b == 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 4,
        "failure_count": 10,
        "success_rate": 0.2857142857142857
    }
}