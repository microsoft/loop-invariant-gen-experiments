{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 2 * (n - (x - n)));\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant 2 * x - y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n    loop invariant x >= y;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant y == 2*x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n || y == n - x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * (x / 2);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 2 * (n - (x - n)));\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant 2 * x - y >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n    loop invariant x >= y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant y == 2*x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n || y == n - x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * (x / 2);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -x;\n    loop invariant x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 2 * (n - (x - n)));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= -x is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant (x <= n) ==> (y == 2 * x) is inductive.\nloop invariant (x > n) ==> (y == 2 * (n - (x - n))) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= -x;\nloop invariant i3: x <= 2 * n;\nloop invariant i4: (x <= n) ==> (y == 2 * x);\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant 2 * x - y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x <= 2 * n is inductive.\nloop invariant 2 * x - y >= 0 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\nloop invariant i4: 2 * x - y >= 0;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n    loop invariant x >= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant x >= y is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\nloop invariant i4: y <= 2 * x;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\nloop invariant i4: y <= 2 * x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant y == 2*x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2*n is inductive.\nloop invariant y == 2*x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant y <= 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n - (x - n))) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2*n;\nloop invariant i4: y <= 2*n;\nloop invariant i5: (x <= n) ==> (y == 2*x);\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n || y == n - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n || y == n - x is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y <= 2 * (x / 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * (x / 2) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n - (x - n)));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n - (x - n))) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2*n;\nloop invariant i4: (x <= n) ==> (y == 2*x);\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y == 2 * x - n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= -x is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant (x <= n) ==> (y == 2 * x) is inductive.\nloop invariant (x > n) ==> (y == 2 * (n - (x - n))) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is preserved but not established.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant 2 * x - y >= 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant x >= y is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant 0 <= x <= 2*n is inductive.\nloop invariant y == 2*x - n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant y <= 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n - (x - n))) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n || y == n - x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y <= 2 * (x / 2) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n - (x - n))) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y == 2 * x - n is inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= -x;\nloop invariant i3: x <= 2 * n;\nloop invariant i4: (x <= n) ==> (y == 2 * x);\nloop invariant i5: (x > n) ==> (y == 2 * (n - (x - n)));\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 0;\nloop invariant i8: x <= 2 * n;\nloop invariant i9: y == 2 * x - n;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: x <= 2 * n;\nloop invariant i13: 2 * x - y >= 0;\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: x <= 2 * n;\nloop invariant i17: y <= 2 * x;\nloop invariant i18: x >= y;\nloop invariant i19: x >= 0;\nloop invariant i20: y >= 0;\nloop invariant i21: x <= 2 * n;\nloop invariant i22: y == 2 * x - n;\nloop invariant i23: x >= 0;\nloop invariant i24: y >= 0;\nloop invariant i25: x <= 2 * n;\nloop invariant i26: y == 2 * x - n;\nloop invariant i27: x >= 0;\nloop invariant i28: y >= 0;\nloop invariant i29: x <= 2 * n;\nloop invariant i30: y <= 2 * x;\nloop invariant i31: 0 <= x <= 2*n;\nloop invariant i32: y == 2*x - n;\nloop invariant i33: x >= 0;\nloop invariant i34: y >= 0;\nloop invariant i35: x <= 2*n;\nloop invariant i36: y <= 2*n;\nloop invariant i37: (x <= n) ==> (y == 2*x);\nloop invariant i38: (x > n) ==> (y == 2*(n - (x - n)));\nloop invariant i39: x >= 0;\nloop invariant i40: y >= 0;\nloop invariant i41: x <= 2 * n;\nloop invariant i42: y == 2 * x - n || y == n - x;\nloop invariant i43: x >= 0;\nloop invariant i44: y >= 0;\nloop invariant i45: x <= 2 * n;\nloop invariant i46: y == 2 * x - n;\nloop invariant i47: x >= 0;\nloop invariant i48: y >= 0;\nloop invariant i49: x <= 2 * n;\nloop invariant i50: y == 2 * x - n;\nloop invariant i51: x >= 0;\nloop invariant i52: y >= 0;\nloop invariant i53: x <= 2 * n;\nloop invariant i54: y <= 2 * (x / 2);\nloop invariant i55: x >= 0;\nloop invariant i56: y >= 0;\nloop invariant i57: x <= 2*n;\nloop invariant i58: (x <= n) ==> (y == 2*x);\nloop invariant i59: (x > n) ==> (y == 2*(n - (x - n)));\nloop invariant i60: x >= 0;\nloop invariant i61: y >= 0;\nloop invariant i62: x <= 2 * n;\nloop invariant i63: y == 2 * x - n;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= -x;\nloop invariant i3: x <= 2 * n;\nloop invariant i4: (x <= n) ==> (y == 2 * x);\n\nloop invariant i6: x >= 0;\n\nloop invariant i8: x <= 2 * n;\n\nloop invariant i10: x >= 0;\n\nloop invariant i12: x <= 2 * n;\nloop invariant i13: 2 * x - y >= 0;\nloop invariant i14: x >= 0;\n\nloop invariant i16: x <= 2 * n;\nloop invariant i17: y <= 2 * x;\n\nloop invariant i19: x >= 0;\n\nloop invariant i21: x <= 2 * n;\n\nloop invariant i23: x >= 0;\n\nloop invariant i25: x <= 2 * n;\n\nloop invariant i27: x >= 0;\n\nloop invariant i29: x <= 2 * n;\nloop invariant i30: y <= 2 * x;\nloop invariant i31: 0 <= x <= 2*n;\n\nloop invariant i33: x >= 0;\n\nloop invariant i35: x <= 2*n;\nloop invariant i36: y <= 2*n;\nloop invariant i37: (x <= n) ==> (y == 2*x);\n\nloop invariant i39: x >= 0;\n\nloop invariant i41: x <= 2 * n;\n\nloop invariant i43: x >= 0;\n\nloop invariant i45: x <= 2 * n;\n\nloop invariant i47: x >= 0;\n\nloop invariant i49: x <= 2 * n;\n\nloop invariant i51: x >= 0;\n\nloop invariant i53: x <= 2 * n;\n\nloop invariant i55: x >= 0;\n\nloop invariant i57: x <= 2*n;\nloop invariant i58: (x <= n) ==> (y == 2*x);\n\nloop invariant i60: x >= 0;\n\nloop invariant i62: x <= 2 * n;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 7,
        "failure_count": 11,
        "success_rate": 0.3888888888888889
    }
}