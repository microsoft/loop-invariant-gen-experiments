{
    "logs": {
        "file": "../data/benchmarks/code2inv/64.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant 1 <= x <= 11;\n    loop invariant y == 10 - x + 1;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
            "/*@ \n    loop invariant 1 <= x <= 11;\n    loop invariant y == 10 - x + 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y >= -1 is preserved but not established.\nloop invariant y <= 9 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 9 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= -1;\n    loop invariant y <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y >= -1 is preserved but not established.\nloop invariant y <= 9 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 9 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y >= 0;\n    loop invariant y <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant y <= 9 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= x <= 11;\n    loop invariant y == 10 - x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nAssertion y < 10: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: 1 <= x <= 11;\n\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant x <= 11 is partially proven to be inductive.\nloop invariant y == 10 - x + 1 is preserved but not established.\nloop invariant y >= -1 is partially proven to be inductive.\nloop invariant y <= 9 is preserved but not established.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant 1 <= x <= 11 is partially proven to be inductive.\nAssertion y < 10: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\nloop invariant i3: y == 10 - x + 1;\nloop invariant i4: y >= -1;\nloop invariant i5: y <= 9;\nloop invariant i6: y >= 0;\nloop invariant i7: 1 <= x <= 11;\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    /*@\nloop invariant i1: x >= 1;\nloop invariant i2: x <= 11;\n\n\n\n\nloop invariant i7: 1 <= x <= 11;\n*/\nwhile (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c"
        ],
        "skipped": [],
        "total": 64,
        "success_count": 40,
        "failure_count": 24,
        "success_rate": 0.625
    }
}