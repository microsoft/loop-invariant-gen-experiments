{
    "logs": {
        "file": "../data/benchmarks/code2inv/97.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 2;\n    loop invariant j == 2*i;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant j >= 0;\n    loop invariant i <= x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant j == i * y;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == y * i;\n    loop invariant i <= x+1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i*y;\n    loop invariant i <= x+1;\n*/\n```",
            "```\n/*@ \n    loop invariant i is non-negative;\n    loop invariant j is even;\n    loop invariant j equals to 2*i;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n    loop invariant i <= x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == y*i;\n    loop invariant i <= x + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i is nonnegative;\n    loop invariant j is nonnegative;\n    loop invariant j == y * i;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == y * i;\n*/\n```",
            "```\n/*@ \n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/\n```",
            "```\n/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant y == 2;\n    loop invariant j == y * i;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 2;\n    loop invariant j == 2*i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant j >= 0;\n    loop invariant i <= x + 1;\n*/",
            "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant j == i * y;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == y * i;\n    loop invariant i <= x+1;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x + 1;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i*y;\n    loop invariant i <= x+1;\n*/",
            "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is even;\n    loop invariant j equals to 2*i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n    loop invariant i <= x + 1;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == y*i;\n    loop invariant i <= x + 1;\n*/",
            "/*@ \n    loop invariant i is nonnegative;\n    loop invariant j is nonnegative;\n    loop invariant j == y * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == y * i;\n*/",
            "/*@ \n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/",
            "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant y == 2;\n    loop invariant j == y * i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 2;\n    loop invariant j == 2*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant y == 2 is inductive.\nloop invariant j == 2*i is inductive.\nAssertion i == j: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant j >= 0;\n    loop invariant i <= x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == i * y is partially proven to be inductive.\nloop invariant j >= 0 is established but not preserved.\nloop invariant i <= x + 1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == i * y;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant j == i * y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'is'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: j == i * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == y * i;\n    loop invariant i <= x+1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == y * i is partially proven to be inductive.\nloop invariant i <= x+1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == y * i;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is established but not preserved.\nloop invariant j == i * y is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: j == i * y;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == i*y;\n    loop invariant i <= x+1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is established but not preserved.\nloop invariant j == i*y is partially proven to be inductive.\nloop invariant i <= x+1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: j == i*y;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is even;\n    loop invariant j equals to 2*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'is'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == i * y is partially proven to be inductive.\nloop invariant i <= x+1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == i * y;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n    loop invariant i <= x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == 2 * i is established but not preserved.\nloop invariant i <= x + 1 is preserved but not established.\nAssertion i == j: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == y*i;\n    loop invariant i <= x + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == y*i is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == y*i;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i is nonnegative;\n    loop invariant j is nonnegative;\n    loop invariant j == y * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'is'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: j == y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant j == y * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is established but not preserved.\nloop invariant j == y * i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: j == y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= x + 1 is preserved but not established.\nloop invariant j == y * i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: j == y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == i * y;\n    loop invariant i <= x+1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j == i * y is partially proven to be inductive.\nloop invariant i <= x+1 is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == i * y;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i is non-negative;\n    loop invariant j is non-negative;\n    loop invariant y == 2;\n    loop invariant j == y * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'is'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: y == 2;\nloop invariant i4: j == y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 21: unexpected token 'is'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: y == 2;\nloop invariant i4: j == 2*i;\nloop invariant i5: j == i * y;\nloop invariant i6: i <= x + 1;\nloop invariant i7: i is non-negative;\nloop invariant i8: j is non-negative;\nloop invariant i9: j == y * i;\nloop invariant i10: i <= x+1;\nloop invariant i11: j == i*y;\nloop invariant i12: j is even;\nloop invariant i13: j equals to 2*i;\nloop invariant i14: j == 2 * i;\nloop invariant i15: j == y*i;\nloop invariant i16: i is nonnegative;\nloop invariant i17: j is nonnegative;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: y == 2;\nloop invariant i4: j == 2*i;\nloop invariant i5: j == i * y;\n\n\n\nloop invariant i9: j == y * i;\n\nloop invariant i11: j == i*y;\n\n\nloop invariant i14: j == 2 * i;\nloop invariant i15: j == y*i;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/94.c"
        ],
        "skipped": [],
        "total": 97,
        "success_count": 55,
        "failure_count": 42,
        "success_rate": 0.5670103092783505
    }
}