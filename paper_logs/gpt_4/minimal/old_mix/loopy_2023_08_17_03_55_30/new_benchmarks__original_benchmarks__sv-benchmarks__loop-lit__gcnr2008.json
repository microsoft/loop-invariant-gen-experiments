{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x*100 <= y;\n    loop invariant 10*w <= z;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant x*100 <= y;\nloop invariant 10*w <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x * 100 <= y on line 9: Unknown\nInvariant 10 * w <= z on line 10: Partially proven\nInvariant 0 <= x on line 11: Partially proven\nInvariant 0 <= y on line 12: Partially proven\nInvariant 0 <= z on line 13: Partially proven\nInvariant 0 <= w on line 14: Partially proven\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\n\nloop invariant 10*w <= z;\nloop invariant 0 <= x;\n\nloop invariant 0 <= z;\nloop invariant 0 <= w;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 10 * w <= z on line 10: Valid\nInvariant 0 <= x on line 11: Valid\nInvariant 0 <= z on line 13: Valid\nInvariant 0 <= w on line 14: Valid\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x * 100 <= y && y <= x * 100 + 10000;\n    loop invariant 10 * w <= z && z <= 10 * w + 10;\n    loop invariant 0 <= w && w <= 10000;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant x * 100 <= y && y <= x * 100 + 10000;\nloop invariant 10 * w <= z && z <= 10 * w + 10;\nloop invariant 0 <= w && w <= 10000;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x * 100 <= y <= x * 100 + 10000 on line 9: Unknown\nInvariant 10 * w <= z <= 10 * w + 10 on line 10: Partially proven\nInvariant 0 <= w <= 10000 on line 11: Unknown\nInvariant 0 <= x on line 12: Partially proven\nInvariant 0 <= y on line 13: Partially proven\nInvariant 0 <= z on line 14: Partially proven\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\n\nloop invariant 10 * w <= z && z <= 10 * w + 10;\n\nloop invariant 0 <= x;\n\nloop invariant 0 <= z;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 10 * w <= z <= 10 * w + 10 on line 10: Valid\nInvariant 0 <= x on line 12: Valid\nInvariant 0 <= z on line 14: Valid\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x*100 <= y <= x*101;\n    loop invariant 10*w <= z <= 10*w + 9;\n    loop invariant w >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant x*100 <= y <= x*101;\nloop invariant 10*w <= z <= 10*w + 9;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x * 100 <= y <= x * 101 on line 9: Unknown\nInvariant 10 * w <= z <= 10 * w + 9 on line 10: Partially proven\nInvariant w >= 0 on line 11: Partially proven\nInvariant x >= 0 on line 12: Partially proven\nInvariant y >= 0 on line 13: Partially proven\nInvariant z >= 0 on line 14: Partially proven\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\n\nloop invariant 10*w <= z <= 10*w + 9;\nloop invariant w >= 0;\nloop invariant x >= 0;\n\nloop invariant z >= 0;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 10 * w <= z <= 10 * w + 9 on line 10: Valid\nInvariant w >= 0 on line 11: Valid\nInvariant x >= 0 on line 12: Valid\nInvariant z >= 0 on line 14: Valid\nPost-condition x >= 4 && y <= 2 on line 31: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x*100 <= y <= 10000;\n    loop invariant 0 <= w;\n    loop invariant 10*w <= z;\n    loop invariant z <= 10000;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant x*100 <= y <= 10000;\nloop invariant 0 <= w;\nloop invariant 10*w <= z;\nloop invariant z <= 10000;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x * 100 <= y <= 10000 on line 9: Unknown\nInvariant 0 <= w on line 10: Partially proven\nInvariant 10 * w <= z on line 11: Partially proven\nInvariant z <= 10000 on line 12: Unknown\nPost-condition x >= 4 && y <= 2 on line 29: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\n\nloop invariant 0 <= w;\nloop invariant 10*w <= z;\n\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= w on line 10: Valid\nInvariant 10 * w <= z on line 11: Valid\nPost-condition x >= 4 && y <= 2 on line 29: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w >= 0;\n    loop invariant z >= 10 * w;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n    loop invariant 100 * x <= y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant w >= 0;\nloop invariant z >= 10 * w;\nloop invariant y >= 0;\nloop invariant x >= 0;\nloop invariant 100 * x <= y;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant w >= 0 on line 9: Partially proven\nInvariant z >= 10 * w on line 10: Partially proven\nInvariant y >= 0 on line 11: Unknown\nInvariant x >= 0 on line 12: Partially proven\nInvariant 100 * x <= y on line 13: Unknown\nPost-condition x >= 4 && y <= 2 on line 30: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant w >= 0;\nloop invariant z >= 10 * w;\n\nloop invariant x >= 0;\n\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant w >= 0 on line 9: Valid\nInvariant z >= 10 * w on line 10: Valid\nInvariant x >= 0 on line 12: Valid\nPost-condition x >= 4 && y <= 2 on line 30: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x*100 <= y;\n    loop invariant 10*w <= z;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x * 100 <= y && y <= x * 100 + 10000;\n    loop invariant 10 * w <= z && z <= 10 * w + 10;\n    loop invariant 0 <= w && w <= 10000;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x*100 <= y <= x*101;\n    loop invariant 10*w <= z <= 10*w + 9;\n    loop invariant w >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x*100 <= y <= 10000;\n    loop invariant 0 <= w;\n    loop invariant 10*w <= z;\n    loop invariant z <= 10000;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant w >= 0;\n    loop invariant z >= 10 * w;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n    loop invariant 100 * x <= y;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x*100 <= y;\n    loop invariant 10*w <= z;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= w;\n*/",
            "/*@ \n    loop invariant x * 100 <= y && y <= x * 100 + 10000;\n    loop invariant 10 * w <= z && z <= 10 * w + 10;\n    loop invariant 0 <= w && w <= 10000;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n*/",
            "/*@ \n    loop invariant x*100 <= y <= x*101;\n    loop invariant 10*w <= z <= 10*w + 9;\n    loop invariant w >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
            "/*@ \n    loop invariant x*100 <= y <= 10000;\n    loop invariant 0 <= w;\n    loop invariant 10*w <= z;\n    loop invariant z <= 10000;\n*/",
            "/*@ \n    loop invariant w >= 0;\n    loop invariant z >= 10 * w;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n    loop invariant 100 * x <= y;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\nloop invariant x*100 <= y;\nloop invariant 10*w <= z;\nloop invariant 0 <= x;\nloop invariant 0 <= y;\nloop invariant 0 <= z;\nloop invariant 0 <= w;\nloop invariant x * 100 <= y && y <= x * 100 + 10000;\nloop invariant 10 * w <= z && z <= 10 * w + 10;\nloop invariant 0 <= w && w <= 10000;\nloop invariant x*100 <= y <= x*101;\nloop invariant 10*w <= z <= 10*w + 9;\nloop invariant w >= 0;\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant x*100 <= y <= 10000;\nloop invariant z <= 10000;\nloop invariant z >= 10 * w;\nloop invariant 100 * x <= y;\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant x * 100 <= y on line 9: Unknown\nInvariant 10 * w <= z on line 10: Partially proven\nInvariant 0 <= x on line 11: Partially proven\nInvariant 0 <= y on line 12: Partially proven\nInvariant 0 <= z on line 13: Partially proven\nInvariant 0 <= w on line 14: Partially proven\nInvariant x * 100 <= y <= x * 100 + 10000 on line 15: Partially proven\nInvariant 10 * w <= z <= 10 * w + 10 on line 16: Partially proven\nInvariant 0 <= w <= 10000 on line 17: Partially proven\nInvariant x * 100 <= y <= x * 101 on line 18: Partially proven\nInvariant 10 * w <= z <= 10 * w + 9 on line 19: Partially proven\nInvariant w >= 0 on line 20: Partially proven\nInvariant x >= 0 on line 21: Partially proven\nInvariant y >= 0 on line 22: Partially proven\nInvariant z >= 0 on line 23: Partially proven\nInvariant x * 100 <= y <= 10000 on line 24: Unknown\nInvariant z <= 10000 on line 25: Unknown\nInvariant z >= 10 * w on line 26: Partially proven\nInvariant 100 * x <= y on line 27: Partially proven\nPost-condition x >= 4 && y <= 2 on line 44: Unknown\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    /*@\n\nloop invariant 10*w <= z;\nloop invariant 0 <= x;\n\nloop invariant 0 <= z;\nloop invariant 0 <= w;\n\nloop invariant 10 * w <= z && z <= 10 * w + 10;\n\n\nloop invariant 10*w <= z <= 10*w + 9;\nloop invariant w >= 0;\nloop invariant x >= 0;\n\nloop invariant z >= 0;\n\n\nloop invariant z >= 10 * w;\n\n*/\nwhile (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 10 * w <= z on line 10: Valid\nInvariant 0 <= x on line 11: Valid\nInvariant 0 <= z on line 13: Valid\nInvariant 0 <= w on line 14: Valid\nInvariant 10 * w <= z <= 10 * w + 10 on line 16: Valid\nInvariant 10 * w <= z <= 10 * w + 9 on line 19: Valid\nInvariant w >= 0 on line 20: Valid\nInvariant x >= 0 on line 21: Valid\nInvariant z >= 0 on line 23: Valid\nInvariant z >= 10 * w on line 26: Valid\nPost-condition x >= 4 && y <= 2 on line 44: Unknown\n"
    },
    "stats": {
        "success": [
            1,
            7,
            13,
            14,
            20,
            26,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            46,
            48,
            49,
            50,
            51,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            112,
            113,
            114,
            115,
            117,
            118,
            119,
            122,
            128,
            142,
            143,
            145,
            148,
            150,
            151,
            161,
            163,
            165,
            166,
            167,
            168,
            172,
            173,
            174,
            175,
            177,
            178,
            179,
            180,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            209,
            210,
            211,
            214,
            215,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            227,
            228,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            264,
            265,
            266,
            272,
            274,
            275,
            276,
            279,
            281,
            287,
            290,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            312,
            313,
            321,
            322,
            325
        ],
        "failure": [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            27,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            44,
            45,
            47,
            52,
            53,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            108,
            109,
            110,
            111,
            116,
            120,
            121,
            123,
            124,
            125,
            126,
            127,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            162,
            164,
            169,
            170,
            171,
            176,
            181,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            208,
            212,
            213,
            216,
            217,
            218,
            219,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            240,
            241,
            248,
            251,
            252,
            253,
            254,
            267,
            268,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            282,
            283,
            284,
            285,
            286,
            288,
            289,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            311,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            323,
            324,
            326,
            327
        ],
        "skipped": [
            77,
            78
        ],
        "total": 326,
        "success_rate": 0.4447852760736196
    }
}