{
    "logs": [
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat exp = 1.0 ;\n\tfloat term = 1.0 ;\n\tunsigned int count = 1 ;\n\tfloat result = 2*(1/(1-x)) ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ; \n\t\texp = exp + term ;\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp ==0 ) break ;\n\t}\n\n\t{;\n//@ assert( result >= exp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000000);\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.2,
                "4": 0.3,
                "5": 0.4,
                "6": 0.5,
                "7": 0.5,
                "8": 0.5,
                "9": 0.6,
                "10": 0.7,
                "11": 0.8,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.5,
                "3": 0.6,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(a == 6 ) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.4,
                "4": 0.7,
                "5": 0.7,
                "6": 0.8,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000001);\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > 0 && x < octant) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  while (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > octant && x < pi) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.3,
                "4": 0.3,
                "5": 0.4,
                "6": 0.5,
                "7": 0.6,
                "8": 0.8,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(!(a == 6 )) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tassume(x > -1.0) ;\n\tassume(x < 1.0) ;\n\tfloat exp = 1.0 ;\n\tfloat term = 1.0 ;\n\tunsigned int count = 1 ;\n\tfloat result = 2*(1/(1-x)) ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ; \n\t\texp = exp + term ;\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp ==0 ) break ;\n\t}\n\n\t{;\n//@ assert( result >= exp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 0.9,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.3,
                "4": 0.3,
                "5": 0.4,
                "6": 0.5,
                "7": 0.5,
                "8": 0.8,
                "9": 0.8,
                "10": 0.9,
                "11": 0.9,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.4,
                "4": 0.4,
                "5": 0.6,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  while (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n  return (-1);\n}\n",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.2,
                "5": 0.3,
                "6": 0.4,
                "7": 0.5,
                "8": 0.8,
                "9": 0.9,
                "10": 0.9,
                "11": 0.9,
                "12": 0.9,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.3,
                "3": 0.4,
                "4": 0.8,
                "5": 0.8,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.3,
                "3": 0.5,
                "4": 0.9,
                "5": 0.9,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\twhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.1,
                "5": 0.1,
                "6": 0.2,
                "7": 0.2,
                "8": 0.2,
                "9": 0.6,
                "10": 0.7,
                "11": 0.8,
                "12": 0.9,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  while ((y < 100000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
            "pass_at_k": {
                "1": 0.5,
                "2": 0.9,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.9,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  while ((y < 1000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
            "pass_at_k": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.3,
                "4": 0.3,
                "5": 0.3,
                "6": 0.4,
                "7": 0.5,
                "8": 0.5,
                "9": 0.5,
                "10": 0.7,
                "11": 0.7,
                "12": 0.8,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.3,
                "4": 0.3,
                "5": 0.3,
                "6": 0.4,
                "7": 0.5,
                "8": 0.5,
                "9": 0.5,
                "10": 0.7,
                "11": 0.7,
                "12": 0.8,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.5,
                "3": 0.6,
                "4": 0.7,
                "5": 0.7,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.8,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/5.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.4,
                "3": 0.6,
                "4": 0.7,
                "5": 0.7,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/6.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int v1,v2,v3;\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.3,
                "3": 0.8,
                "4": 0.8,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/7.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.3,
                "3": 0.4,
                "4": 0.5,
                "5": 0.6,
                "6": 0.6,
                "7": 0.8,
                "8": 0.9,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/8.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.3,
                "3": 0.3,
                "4": 0.5,
                "5": 0.8,
                "6": 0.8,
                "7": 0.8,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.4,
                "3": 0.6,
                "4": 0.9,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/9.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.7,
                "3": 0.8,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/10.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.4,
                "6": 0.4,
                "7": 0.4,
                "8": 0.5,
                "9": 0.5,
                "10": 0.6,
                "11": 0.6,
                "12": 0.6,
                "13": 0.8,
                "14": 0.8,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.5,
                "3": 0.5,
                "4": 0.6,
                "5": 0.8,
                "6": 0.8,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/11.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.6,
                "3": 0.7,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/12.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.2,
                "6": 0.4,
                "7": 0.4,
                "8": 0.7,
                "9": 0.7,
                "10": 0.8,
                "11": 0.8,
                "12": 0.9,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.3,
                "3": 0.3,
                "4": 0.4,
                "5": 0.5,
                "6": 0.7,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/13.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.5,
                "3": 0.7,
                "4": 0.8,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/14.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.8,
                "3": 0.8,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/15.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/16.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/17.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/18.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.5,
                "3": 0.5,
                "4": 0.6,
                "5": 0.8,
                "6": 0.8,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/19.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.2,
                "4": 0.2,
                "5": 0.2,
                "6": 0.3,
                "7": 0.3,
                "8": 0.4,
                "9": 0.4,
                "10": 0.4,
                "11": 0.5,
                "12": 0.8,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/20.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.4,
                "5": 0.4,
                "6": 0.8,
                "7": 0.8,
                "8": 0.9,
                "9": 0.9,
                "10": 0.9,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.7,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/21.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.2,
                "5": 0.2,
                "6": 0.4,
                "7": 0.6,
                "8": 0.6,
                "9": 0.6,
                "10": 0.6,
                "11": 0.6,
                "12": 0.8,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.3,
                "4": 0.5,
                "5": 0.5,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/22.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.3,
                "4": 0.3,
                "5": 0.4,
                "6": 0.6,
                "7": 0.7,
                "8": 0.7,
                "9": 0.8,
                "10": 0.8,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/23.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.1,
                "4": 0.1,
                "5": 0.2,
                "6": 0.4,
                "7": 0.5,
                "8": 0.8,
                "9": 0.9,
                "10": 0.9,
                "11": 0.9,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/24.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/25.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 10000);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 0) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/26.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/27.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/28.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/29.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.2,
                "4": 0.2,
                "5": 0.3,
                "6": 0.5,
                "7": 0.6,
                "8": 0.7,
                "9": 0.8,
                "10": 0.8,
                "11": 0.8,
                "12": 0.8,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/30.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 100);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/31.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/32.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/33.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/34.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.4,
                "6": 0.4,
                "7": 0.5,
                "8": 0.5,
                "9": 0.6,
                "10": 0.7,
                "11": 0.8,
                "12": 0.8,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.4,
                "6": 0.4,
                "7": 0.5,
                "8": 0.5,
                "9": 0.6,
                "10": 0.7,
                "11": 0.8,
                "12": 0.8,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/35.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.2,
                "3": 0.2,
                "4": 0.3,
                "5": 0.3,
                "6": 0.4,
                "7": 0.5,
                "8": 0.5,
                "9": 0.7,
                "10": 0.8,
                "11": 0.9,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/36.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c <= 40) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.5,
                "3": 0.6,
                "4": 0.6,
                "5": 0.8,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/37.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.5,
                "4": 0.5,
                "5": 0.6,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.8,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/38.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n        \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.2,
                "4": 0.3,
                "5": 0.4,
                "6": 0.5,
                "7": 0.5,
                "8": 0.6,
                "9": 0.6,
                "10": 0.6,
                "11": 0.7,
                "12": 0.7,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/39.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.3,
                "3": 0.7,
                "4": 0.7,
                "5": 0.8,
                "6": 0.8,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.7,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/40.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/41.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.2,
                "3": 0.2,
                "4": 0.5,
                "5": 0.6,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.8,
                "10": 0.8,
                "11": 0.8,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.2,
                "3": 0.4,
                "4": 0.7,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/42.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/43.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.1,
                "4": 0.1,
                "5": 0.2,
                "6": 0.2,
                "7": 0.5,
                "8": 0.5,
                "9": 0.6,
                "10": 0.6,
                "11": 0.6,
                "12": 0.6,
                "13": 0.7,
                "14": 0.8,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/44.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/45.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 0.9,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/46.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.5,
                "3": 0.6,
                "4": 0.7,
                "5": 0.7,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.5,
                "3": 0.6,
                "4": 0.7,
                "5": 0.7,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/47.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.5,
                "3": 0.6,
                "4": 0.7,
                "5": 0.8,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/48.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.8,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/49.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.4,
                "3": 0.4,
                "4": 0.8,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/50.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.5,
                "3": 0.6,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/51.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/52.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.6,
                "3": 0.6,
                "4": 0.7,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/53.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.1,
                "5": 0.2,
                "6": 0.2,
                "7": 0.3,
                "8": 0.5,
                "9": 0.5,
                "10": 0.6,
                "11": 0.6,
                "12": 0.7,
                "13": 0.9,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/54.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.4,
                "4": 0.6,
                "5": 0.7,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.8,
                "10": 0.8,
                "11": 0.9,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/55.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/56.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/57.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/58.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.7,
                "4": 0.8,
                "5": 0.8,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/59.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.4,
                "4": 0.6,
                "5": 0.8,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.4,
                "4": 0.6,
                "5": 0.8,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/60.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.8,
                "3": 0.8,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/61.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/62.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/63.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/64.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/65.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/66.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/67.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n        \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/68.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        \n        {;\n//@ assert(y <= n);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.3,
                "4": 0.3,
                "5": 0.3,
                "6": 0.5,
                "7": 0.5,
                "8": 0.6,
                "9": 0.7,
                "10": 0.7,
                "11": 0.7,
                "12": 0.8,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/69.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n      \n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/70.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/71.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.5,
                "2": 0.8,
                "3": 0.8,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.8,
                "3": 0.8,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/72.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/73.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/74.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.5,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/75.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/76.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.8,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/77.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n}",
            "pass_at_k": {
                "1": 0.6,
                "2": 0.8,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/78.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/79.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.5,
                "3": 0.8,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/80.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n}",
            "pass_at_k": {
                "1": 0.5,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/81.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n}",
            "pass_at_k": {
                "1": 0.8,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/82.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/83.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -5000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.2,
                "6": 0.3,
                "7": 0.3,
                "8": 0.4,
                "9": 0.5,
                "10": 0.6,
                "11": 0.6,
                "12": 0.7,
                "13": 0.7,
                "14": 0.8,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/84.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/85.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/86.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/87.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/88.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.2,
                "4": 0.2,
                "5": 0.5,
                "6": 0.6,
                "7": 0.7,
                "8": 0.7,
                "9": 0.8,
                "10": 0.8,
                "11": 0.8,
                "12": 0.8,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.4,
                "4": 0.4,
                "5": 0.6,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/89.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/90.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.6,
                "2": 0.9,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/91.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/92.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/93.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  while ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.6,
                "3": 0.6,
                "4": 0.8,
                "5": 0.8,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.8,
                "3": 0.8,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/94.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.4,
                "4": 0.5,
                "5": 0.7,
                "6": 0.7,
                "7": 0.8,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/95.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/96.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.1,
                "4": 0.1,
                "5": 0.1,
                "6": 0.1,
                "7": 0.1,
                "8": 0.2,
                "9": 0.5,
                "10": 0.5,
                "11": 0.5,
                "12": 0.8,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/97.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/98.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.4,
                "4": 0.4,
                "5": 0.4,
                "6": 0.4,
                "7": 0.5,
                "8": 0.6,
                "9": 0.7,
                "10": 0.9,
                "11": 0.9,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/99.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (x = n);\n  (y = 0);\n  \n  while ((x > 0)) {\n    {\n    (y  = (y + 1));\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (n == (x + y)) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/100.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (x = n);\n  (y = 0);\n  \n  while ((x > 0)) {\n    {\n    (y  = (y + 1));\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y == n) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/101.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/102.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/103.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 0);\n  \n  while ((x < 100)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 100) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/104.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/105.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/106.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    assume(a <= m);\n    assume(j < 1);\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a >= m);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/107.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <= m);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.1,
                "4": 0.1,
                "5": 0.2,
                "6": 0.2,
                "7": 0.4,
                "8": 0.5,
                "9": 0.7,
                "10": 0.9,
                "11": 0.9,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.3,
                "3": 0.6,
                "4": 0.8,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/108.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/109.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n    }\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.9,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/110.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/111.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/112.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/113.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/114.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/115.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != -1) )\n{;\n//@ assert( (sn == x) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/116.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/117.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != -1) )\n{;\n//@ assert( (sn == x) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/118.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/119.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/120.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/121.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/122.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/123.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/124.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.6,
                "3": 0.6,
                "4": 0.7,
                "5": 0.8,
                "6": 0.8,
                "7": 0.8,
                "8": 0.9,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/125.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.2,
                "4": 0.7,
                "5": 0.7,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/126.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.4,
                "3": 0.6,
                "4": 0.6,
                "5": 0.8,
                "6": 0.8,
                "7": 0.8,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/127.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.1,
                "5": 0.2,
                "6": 0.3,
                "7": 0.4,
                "8": 0.5,
                "9": 0.5,
                "10": 0.5,
                "11": 0.5,
                "12": 0.7,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.7,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/128.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.6,
                "3": 0.6,
                "4": 0.6,
                "5": 0.7,
                "6": 0.8,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/129.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.2,
                "4": 0.2,
                "5": 0.3,
                "6": 0.3,
                "7": 0.3,
                "8": 0.5,
                "9": 0.5,
                "10": 0.5,
                "11": 0.6,
                "12": 0.7,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/130.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n    \n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/131.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x3 >= 0);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.1,
                "4": 0.1,
                "5": 0.4,
                "6": 0.6,
                "7": 0.7,
                "8": 0.8,
                "9": 0.9,
                "10": 0.9,
                "11": 0.9,
                "12": 0.9,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/132.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    while( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.1,
                "5": 0.3,
                "6": 0.4,
                "7": 0.5,
                "8": 0.6,
                "9": 0.8,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/133.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  assume((n >= 0));\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == n) );\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          ERROR:{; //@ assert(\\false);\n};\n\t}\n\t\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.4,
                "4": 0.5,
                "5": 0.7,
                "6": 0.7,
                "7": 0.7,
                "8": 0.8,
                "9": 0.8,
                "10": 0.9,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.5,
                "3": 0.6,
                "4": 0.7,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) return;\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    ERROR:{; //@ assert(\\false);\n};\n  }\n}\n",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.5,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.7,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      return;\n    j = 0;\n    while(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      return;\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n}\n",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    return;\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.2,
                "4": 0.3,
                "5": 0.3,
                "6": 0.4,
                "7": 0.4,
                "8": 0.5,
                "9": 0.5,
                "10": 0.5,
                "11": 0.6,
                "12": 0.8,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; //@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.2,
                "4": 0.6,
                "5": 0.7,
                "6": 0.8,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.6,
                "3": 0.7,
                "4": 0.8,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; //@ assert(\\false);\n};\n}\n",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.6,
                "3": 0.8,
                "4": 0.8,
                "5": 0.8,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.7,
                "3": 0.9,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; //@ assert(\\false);\n};\n\n}\n",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.4,
                "4": 0.4,
                "5": 0.5,
                "6": 0.6,
                "7": 0.6,
                "8": 0.6,
                "9": 0.6,
                "10": 0.8,
                "11": 0.9,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.4,
                "3": 0.6,
                "4": 0.6,
                "5": 0.7,
                "6": 0.8,
                "7": 0.8,
                "8": 0.9,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;//@ assert(x == 0);\n}\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.8,
                "3": 0.9,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.6,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;//@ assert(x == 1);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.1,
                "3": 0.2,
                "4": 0.2,
                "5": 0.3,
                "6": 0.5,
                "7": 0.6,
                "8": 0.6,
                "9": 0.6,
                "10": 0.7,
                "11": 0.7,
                "12": 0.8,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.4,
                "3": 0.6,
                "4": 0.8,
                "5": 0.8,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.7,
                "4": 0.7,
                "5": 0.9,
                "6": 0.9,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;//@ assert(x >= 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.5,
                "2": 0.7,
                "3": 0.8,
                "4": 0.9,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.2,
                "4": 0.3,
                "5": 0.3,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.8,
                "10": 0.8,
                "11": 0.8,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;//@ assert(x > 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(!(y % 3));\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(x == 6);\n}\n}",
            "pass_at_k": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(x != 6);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;//@ assert(p5 >= open);\n}\n\t{;//@ assert(p1 <= 1);\n}\n\t{;//@ assert(p2 <= 1);\n}\n\t{;//@ assert(p3 <= 1);\n}\n\t{;//@ assert(p4 <= 1);\n}\n\t{;//@ assert(p5 <= 3);\n}\n\t{;//@ assert(p4 >= 0);\n}\n\t{;//@ assert(p3 >= 0);\n}\n\t{;//@ assert(p2 >= 0);\n}\n\t{;//@ assert(p1 >= 0);\n}\n\t{;//@ assert(open >= 0);\n}\n\t{;//@ assert(chair >= 0);\n}\n\t{;//@ assert(barber >= 0);\n}\n}\n",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;//@ assert(p5 <= 3);\n}\n\t{;//@ assert(p5 >= open);\n}\n}\n",
            "pass_at_k": {
                "1": 0.7,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.8,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(nonexclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "1": 0.7,
                "2": 0.9,
                "3": 0.9,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) return 0;\n\tif (! (v1 <= 5)) return 0;\n\tif (! (v1 -v3 >= 0)) return 0;\n\tif (! (2* v2 - v1 - v3 == 0)) return 0;\n\tt=0;\n\n\tif (! (v2 +5 >=0)) return 0;\n\tif (! (v2 <= 5)) return 0;\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) return 0;\n\t\tif (! (v2 <= 5)) return 0;\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;//@ assert(v1 <= 5);\n}\n\t{;//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\t{;//@ assert(5*t  + 75 >= x2);\n}\n\t{;//@ assert(v2 <= 6);\n}\n\t{;//@ assert(v3  >= 0);\n}\n\t{;//@ assert(v2 + 6 >= 0);\n}\n\t{;//@ assert(x2 + 5*t >= 75);\n}\n\t{;//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\t{;//@ assert(v1 - v3 >= 0);\n}\n}\n",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.6,
                "3": 0.8,
                "4": 0.9,
                "5": 0.9,
                "6": 0.9,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.8,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.2,
                "3": 0.3,
                "4": 0.5,
                "5": 0.6,
                "6": 0.6,
                "7": 0.6,
                "8": 0.6,
                "9": 0.6,
                "10": 0.6,
                "11": 0.8,
                "12": 0.8,
                "13": 0.9,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.4,
                "3": 0.8,
                "4": 0.8,
                "5": 0.8,
                "6": 0.8,
                "7": 0.9,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;//@ assert(3*x >= y);\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I >= 0);\n}\n\t{;//@ assert(Sa >= 0);\n}\n\t{;//@ assert(Ma  >= 0);\n}\n\t{;//@ assert(Ea  >= 0);\n}\n\t{;//@ assert(Sb >= 0);\n}\n\t{;//@ assert(Mb  >= 0);\n}\n\t{;//@ assert(Eb  >= 0);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.4,
                "4": 0.5,
                "5": 0.7,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.9,
                "10": 0.9,
                "11": 0.9,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.1,
                "2": 0.2,
                "3": 0.4,
                "4": 0.5,
                "5": 0.7,
                "6": 0.7,
                "7": 0.8,
                "8": 0.8,
                "9": 0.9,
                "10": 0.9,
                "11": 0.9,
                "12": 0.9,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        }
    ]
}