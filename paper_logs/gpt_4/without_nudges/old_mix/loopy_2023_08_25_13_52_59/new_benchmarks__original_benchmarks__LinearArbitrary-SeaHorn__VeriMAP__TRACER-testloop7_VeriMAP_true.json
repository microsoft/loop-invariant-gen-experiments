{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  while ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == 1 || x == 2;\n  loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 1 && x <= 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x >= 1 && x <= 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= x <= 2;\n    loop invariant 0 <= y <= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: 0 <= y <= 1;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0 || y == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0 || y == 1;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= x <= 2;\n  loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: 1 <= x <= 2;\nloop invariant i2: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(x > 2): Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  while ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- y is assigned the value 0\n- x is assigned the value 1\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `unknown() < 10`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/\n```\n\nThese loop invariants ensure that x is always 1 or 2, and y is always 0, which implies the post condition `!(x > 2)`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions:\n- y = 0;\n- x = 1;\n\nNow let's analyze the loop body and make a note of the loop condition:\n- Loop condition: unknown() < 10\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- y is assigned 0.\n- x is assigned 1.\n\nNow, let's analyze the loop condition and loop body:\n- The loop condition is \"unknown() < 10\".\n- Inside the loop, if x < 2, then x is assigned 2; otherwise, x is assigned 1.\n- Inside the loop, if y < 1, then y is assigned 0.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition \"!(x > 2)\"."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `y = 0;`\n- `x = 1;`\n\nNext, we analyze the loop body and make a note of the loop condition:\n- Loop condition: `unknown() < 10`\n\nNow, we'll find the necessary loop invariants of the while loop:\n\n- Loop invariant 1: `x == 1 || x == 2`\n- Loop invariant 2: `y == 0`\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. So, the output is:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "We need to analyze the given program to find the necessary loop invariants of the while loop. Here are the relevant parts of the program:\n\n1. Pre-conditions or variable assignments:\n   - y = 0;\n   - x = 1;\n\n2. Loop condition: unknown() < 10\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n  loop invariant x == 1 || x == 2;\n  loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `y = 0`\n- `x = 1`\n\nNext, analyze the loop body and make a note of the loop condition:\n- `unknown() < 10`\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 1 && x <= 2;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- y is initialized to 0\n- x is initialized to 1\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `unknown() < 10`\n- Inside the loop, x can be either 1 or 2, and y can be either 0 or 1\n\nNow, output the loop invariants:\n```\n/*@ \n    loop invariant 1 <= x <= 2;\n    loop invariant 0 <= y <= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n1. `y = 0;`\n2. `x = 1;`\n\nNext, analyze the loop body and make a note of the loop condition.\n\nThe loop condition is `unknown() < 10`.\n\nNow, let's find the necessary loop invariants for the while loop.\n\n1. The value of `x` is always either 1 or 2. This is because, if `x < 2`, it is set to 2, otherwise it is set to 1.\n2. The value of `y` is always 0. This is because, if `y < 1`, it is set to 0.\n\nWith these invariants, we can help Frama-C verify the post-condition.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make notes:\n\nPre-conditions and variable assignments:\n- y is assigned 0.\n- x is assigned 1.\n\nLoop condition:\n- unknown() < 10\n\nNow, let's find the loop invariants:\n\nLoop invariants:\n1. x is always either 1 or 2.\n2. y is always either 0 or 1.\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere's the loop invariants in ACSL annotations:\n\n```\n/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0 || y == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. `y = 0`\n2. `x = 1`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: `unknown() < 10`\n\nLet's look at the loop body:\n\n1. If `x < 2`, then `x = 2`. Otherwise, `x = 1`.\n2. If `y < 1`, then `y = 0`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n  loop invariant 1 <= x <= 2;\n  loop invariant y == 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n  loop invariant x == 1 || x == 2;\n  loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant x >= 1 && x <= 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant 1 <= x <= 2;\n    loop invariant 0 <= y <= 1;\n*/",
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant x == 1 || x == 2;\n    loop invariant y == 0 || y == 1;\n*/",
            "/*@ \n  loop invariant 1 <= x <= 2;\n  loop invariant y == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  /*@\nloop invariant i1: x == 1 || x == 2;\nloop invariant i2: y == 0;\nloop invariant i3: x == 1 || x == 2;\nloop invariant i4: y == 0;\nloop invariant i5: x == 1 || x == 2;\nloop invariant i6: y == 0;\nloop invariant i7: x == 1 || x == 2;\nloop invariant i8: y == 0;\nloop invariant i9: x == 1 || x == 2;\nloop invariant i10: y == 0;\nloop invariant i11: x >= 1 && x <= 2;\nloop invariant i12: y == 0;\nloop invariant i13: 1 <= x <= 2;\nloop invariant i14: 0 <= y <= 1;\nloop invariant i15: x == 1 || x == 2;\nloop invariant i16: y == 0;\nloop invariant i17: x == 1 || x == 2;\nloop invariant i18: y == 0 || y == 1;\nloop invariant i19: 1 <= x <= 2;\nloop invariant i20: y == 0;\n*/\nwhile ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;//@ assert(!( x > 2 ));\n}\n  return;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nAssertion !(x > 2): Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 273,
        "success_rate": 0.5824175824175825
    }
}