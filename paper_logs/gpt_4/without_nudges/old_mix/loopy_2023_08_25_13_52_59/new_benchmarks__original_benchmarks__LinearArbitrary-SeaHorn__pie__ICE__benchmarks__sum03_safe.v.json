{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant sn == x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == sn;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: x == sn;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x || sn == 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x || sn == 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant sn == x;\n  loop invariant x >= 0;\n  loop invariant sn >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\nloop invariant i2: x >= 0;\nloop invariant i3: sn >= 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x * 1;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x || sn == 0;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x || sn == 0;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x || sn == 0;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "//@\nloop invariant sn == x;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions or variable assignments in the program.\n\n1. sn is initialized to 0.\n2. loop1, n1, and x are assigned unknown_uint() values.\n3. Inside the loop, v1, v2, and v3 are assigned unknown_int() values.\n\nNext, let's analyze the loop body and make a note of the loop condition.\n\n1. The loop is an infinite loop, as the condition is just \"while(1)\".\n\nNow, let's find the loop invariants.\n\n1. Before the loop execution, sn is 0, and x is an unknown unsigned integer.\n2. In every iteration of the loop, sn is incremented by 1, and x is incremented by 1.\n3. After the loop termination, sn and x have the same values due to their increments in each iteration.\n\nConsidering the given rules and the information we have about the program, we can now output the loop invariants for the while loop in the program:\n\n```\n/*@ \n    loop invariant sn == x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nVariable assignments and pre-conditions:\n1. sn = 0\n2. loop1 and n1 are assigned unknown_uint() values\n3. x = 0\n4. v1, v2, and v3 are assigned unknown_int() values within the loop\n\nLoop condition: The loop runs infinitely with the condition \"while(1)\"\n\nNow, let's identify loop invariants that hold before the loop, in every iteration, and after loop termination (although this loop does not terminate):\n\n```\n/*@ \n    loop invariant sn == x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- sn is initialized to 0\n- loop1, n1 are assigned an unknown unsigned integer value\n- x is initialized to 0\n- v1, v2, v3 are assigned unknown integer values inside the loop\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop is a while(1) loop, meaning it runs indefinitely until a break statement or a return statement is executed (none are present in this case)\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant x == sn;\n*/\n```\n\nExplanation:\n- Before the loop execution: x and sn are both initialized to 0, so x == sn holds true.\n- In every iteration of the loop: sn is incremented by 1, and x is incremented by 1 as well. Hence, x == sn remains true.\n- After the loop termination: The loop does not terminate in this program, so the loop invariant holds true for all iterations."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- sn is initialized to 0.\n- loop1, n1 are assigned unknown_uint values.\n- x is initialized to 0.\n- v1, v2, and v3 are assigned unknown_int values inside the loop.\n\nNow, let's analyze the loop body and condition:\n- The loop condition is 'while(1)', which is an infinite loop. The loop will keep executing until the program is terminated.\n- Inside the loop, sn is incremented by 1 and x is incremented by 1 in each iteration.\n- There is an assertion (sn==x*1 || sn == 0). The loop invariant should satisfy this assertion.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant sn == x || sn == 0;\n*/\n```\n\nThis loop invariant is true:\n(i) before the loop execution, as sn and x are both initialized to 0.\n(ii) in every iteration of the loop, as sn and x are incremented by 1 in each iteration.\n(iii) after the loop termination, which is not applicable here since this is an infinite loop. However, if the loop were to terminate, the invariant would still hold.\n\nAs the loop is infinite and there is no post-condition, we only need to provide the loop invariant that satisfies the given assertion."
                },
                {
                    "role": "assistant",
                    "content": "First, we note the variable assignments and the loop condition in the program:\n\n- sn = 0\n- loop1 and n1 are assigned unknown_uint() values\n- x = 0\n- The loop condition is while(1), which means it is an infinite loop.\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant sn == x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- sn is initialized to 0\n- loop1 and n1 are assigned unknown_uint() values\n- x is initialized to 0\n- v1, v2, and v3 are assigned unknown_int() values inside the loop\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is while(1), which means it is an infinite loop.\n\nConsidering the given code and the rules, we can derive the following loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant sn == x;\n  loop invariant x >= 0;\n  loop invariant sn >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination (if it were to terminate). However, in this case, the loop does not terminate, as it is an infinite loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions, variable assignments, and loop conditions.\n\nPre-conditions / Variable assignments:\n- sn = 0\n- x = 0\n- loop1, n1 are assigned unknown_uint() values\n- v1, v2, v3 are assigned unknown_int() values in each iteration\n\nLoop condition:\n- The loop is an infinite loop (while (1))\n\nPost-condition:\n- sn == x*1 || sn == 0\n\nNow, let's output the loop invariants for the loop in the program.\n\n```\n/*@ \n    loop invariant sn == x * 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program:\n\nPre-conditions and variable assignments:\n- `int sn = 0`\n- `unsigned int loop1 = unknown_uint()`\n- `unsigned int n1 = unknown_uint()`\n- `unsigned int x = 0`\n- `int v1, v2, v3` (these variables get assigned inside the loop but their values are not relevant to the loop invariants)\n\nLoop condition: The loop is an infinite loop using `while(1)`.\n\nPost-condition: The assert statement inside the loop is `sn == x * 1 || sn == 0`.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant sn == x || sn == 0;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n- sn = 0\n- loop1 is an unknown unsigned integer\n- n1 is an unknown unsigned integer\n- x = 0\n- v1, v2, and v3 are unknown integers\n\nLoop condition:\n- The loop is a \"while(1)\" loop, which means it is an infinite loop.\n\nNow, let's find the necessary loop invariants:\n\nBefore the loop execution:\n- sn = 0\n- x = 0\n\nIn every iteration of the loop:\n- sn is incremented by 1\n- x is incremented by 1\n\nAfter the loop termination:\n- The loop does not terminate in the given program.\n\nLoop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination (if it were to terminate) are:\n\n```\n/*@ \n    loop invariant sn == x;\n*/\n```\n\nHowever, since this is an infinite loop, Frama-C would not be able to verify the post-condition in this case. The given program does not have a post-condition to verify, as the loop will never exit."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program.\n\nPre-conditions and variable assignments:\n- sn = 0\n- loop1, n1 = unknown_uint()\n- x = 0\n- v1, v2, v3 = unknown_int()\n\nNow let's analyze the loop body and make a note of the loop condition.\n\nLoop condition:\n- while(1) - This is an infinite loop.\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nLoop invariants:\n```\n//@\nloop invariant sn == x;\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant sn == x;\n*/",
            "/*@ \n    loop invariant sn == x;\n*/",
            "/*@ \n    loop invariant x == sn;\n*/",
            "/*@ \n    loop invariant sn == x || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == x;\n*/",
            "/*@ \n  loop invariant sn == x;\n  loop invariant x >= 0;\n  loop invariant sn >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * 1;\n*/",
            "/*@ \n    loop invariant sn == x || sn == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x;\n*/",
            "//@\nloop invariant sn == x;"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  /*@\nloop invariant i1: sn == x;\nloop invariant i2: sn == x;\nloop invariant i3: x == sn;\nloop invariant i4: sn == x || sn == 0;\nloop invariant i5: sn == x;\nloop invariant i6: sn == x;\nloop invariant i7: x >= 0;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn == x * 1;\nloop invariant i10: sn == x || sn == 0;\nloop invariant i11: x >= 0;\nloop invariant i12: sn == x;\nloop invariant i13: sn == x;\n*/\nwhile(1){\n    sn = sn + 1;\n    x++;\n    {;//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 235,
        "success_rate": 0.5659574468085107
    }
}