{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4 * y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4*y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4 * y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4*y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4*y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4*y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant x == 4*y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x == 4*y;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4 * y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4 * y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `assume(x == y && y == 0);` (initial condition for x and y)\n\nNow, analyze the loop body and make a note of the loop condition:\n\n- `while (unknown_bool())` (loop condition)\n- `x += 4; y++;` (loop body)\n\nFinally, output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `if (!(x == y && y == 0)) return 0;` (This is equivalent to the pre-condition `x == 0 && y == 0`)\n\nNext, we analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `unknown_bool()`, which is non-deterministic.\n- Loop body: `x += 4; y++;`\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution, since `x == 0 && y == 0` implies `x == 4*y` and `x >= 0`,\n(ii) in every iteration of the loop, because when `x += 4; y++;`, the relationship `x == 4*y` is maintained and `x` remains non-negative, and\n(iii) after the loop termination, which ensures that the post-condition `x == 4*y && x >= 0` holds."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code:\n\nPre-conditions and variable assignments:\n- x and y are assigned unknown integer values.\n- The program proceeds only if x == y and y == 0.\n\nLoop condition:\n- The loop iterates as long as unknown_bool() returns true.\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n- x == y == 0\n\n(ii) In every iteration of the loop:\n- x += 4 and y += 1 in every iteration.\n- x == 4 * y (since x started as 0 and increases 4 times as fast as y)\n\n(iii) After the loop termination:\n- The loop terminates when unknown_bool() returns false.\n- x == 4 * y holds true even after the loop termination.\n\nNow, let's write the loop invariants in a Frama-C style ACSL annotation:\n\n```\n/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/\n```\nThese loop invariants will help Frama-C verify the post-condition that x == 4 * y and x >= 0."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are initialized with unknown integers.\n- The program only proceeds if `x == y && y == 0`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `unknown_bool()`, which means that the loop can run any number of times.\n- In each loop iteration, `x` is incremented by 4, and `y` is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition `x == 4*y && x >= 0`:\n\n```\n/*@\n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. x = unknown_int();\n2. y = unknown_int();\n3. if (!(x == y && y == 0)) return 0;\n\nFrom the pre-conditions, we know that x and y are both initialized to 0.\n\nNow, let's analyze the loop body and loop condition:\n\n1. Loop condition: while (unknown_bool())\n2. Loop body: x += 4; y++;\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nThe post-condition is: x == 4*y && x >= 0.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's list the pre-conditions and variable assignments:\n\n1. x and y are assigned non-deterministic integer values.\n2. The program continues only if x == y and y == 0, which implies x == 0.\n\nNow, let's analyze the loop condition and body:\n\n1. The loop condition is unknown_bool(), which is a non-deterministic boolean value.\n2. In the loop body, x is incremented by 4 and y is incremented by 1.\n\nNow let's find the loop invariants:\n\n/*@ \n  loop invariant x == 4*y;\n  loop invariant x >= 0;\n*/\nThese loop invariants are true before the loop execution (since x == y == 0), in every iteration of the loop, and after the loop termination. These loop invariants imply the post-condition (x == 4*y && x >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the pre-conditions and variable assignments:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n- `assume(x == y && y == 0);` (this is equivalent to the if statement)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- `while (unknown_bool())` is the loop condition\n- In the loop body, we have `x+=4;` and `y++;`\n\nNow, let's output the necessary loop invariants for the while loop:\n```\n/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. x and y are initialized with unknown integer values.\n2. The program returns 0 if x is not equal to y or y is not equal to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: unknown_bool() - The loop continues as long as unknown_bool() returns true.\n2. Loop body: x += 4; y++;\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x == 4*y;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (x == 4*y && x >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n1. x and y are assigned unknown integer values.\n2. The program continues only if x == y && y == 0.\n\nNow, let's analyze the loop and note the loop condition:\n- The loop continues as long as unknown_bool() returns true.\n\nNow, let's find the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/\n```\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (x == 4 * y && x >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `int x = unknown_int();`\n2. `int y = unknown_int();`\n3. `if (!(x == y && y == 0)) return 0;` (This means that x and y are both initially 0)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: `unknown_bool()`\n\nLoop body: `x+=4; y++;`\n\nNext, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/\n```\n\nThese invariants hold before the loop execution, during each iteration, and after the loop terminates, and they imply the post-condition `x == 4 * y && x >= 0`."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/",
            "/*@\n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's list the pre-conditions and variable assignments:\n\n1. x and y are assigned non-deterministic integer values.\n2. The program continues only if x == y and y == 0, which implies x == 0.\n\nNow, let's analyze the loop condition and body:\n\n1. The loop condition is unknown_bool(), which is a non-deterministic boolean value.\n2. In the loop body, x is incremented by 4 and y is incremented by 1.\n\nNow let's find the loop invariants:\n\n/*@ \n  loop invariant x == 4*y;\n  loop invariant x >= 0;\n*/\nThese loop invariants are true before the loop execution (since x == y == 0), in every iteration of the loop, and after the loop termination. These loop invariants imply the post-condition (x == 4*y && x >= 0).",
            "/*@ \n    loop invariant x == 4*y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x == 4*y;\n*/",
            "/*@ \n  loop invariant x == 4 * y;\n  loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == 4 * y;\n    loop invariant x >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == 4 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: x == 4*y;\nloop invariant i4: x >= 0;\nloop invariant i5: x == 4 * y;\nloop invariant i6: x >= 0;\nloop invariant i7: x == 4*y;\nloop invariant i8: x >= 0;\nloop invariant i9: x == 4*y;\nloop invariant i10: x >= 0;\nloop invariant i11: x == 4*y;\nloop invariant i12: x >= 0;\nloop invariant i13: x >= 0;\nloop invariant i14: x == 4*y;\nloop invariant i15: x == 4 * y;\nloop invariant i16: x >= 0;\nloop invariant i17: x == 4 * y;\nloop invariant i18: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nAssertion x == 4 * y && x >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            364,
            366,
            367,
            368,
            370,
            371,
            373,
            374,
            375,
            376,
            377,
            378,
            379
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            363,
            365,
            369,
            372
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 376,
        "success_rate": 0.5851063829787234
    }
}