{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    while(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == (k - (j - m));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y) == (k - (j - m));\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= j <= n on line 19: Unknown\nInvariant x + y == k - (j - m) on line 20: Unknown\nPost-condition x + y == k on line 36: Unknown\nPost-condition 0 <= m on line 40: Partially proven\nPost-condition m < n on line 42: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\n\n\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y + j == k + m;\n    loop invariant 0 <= m <= j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant 0 <= j <= n;\nloop invariant x + y + j == k + m;\nloop invariant 0 <= m <= j;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= j <= n on line 19: Unknown\nInvariant (x + y) + j == k + m on line 20: Unknown\nInvariant 0 <= m <= j on line 21: Partially proven\nPost-condition x + y == k on line 37: Unknown\nPost-condition 0 <= m on line 41: Partially proven\nPost-condition m < n on line 43: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\n\n\nloop invariant 0 <= m <= j;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
                "checker_message_after_prune": "Invariant 0 <= m <= j on line 21: Valid\nPost-condition x + y == k on line 37: Unknown\nPost-condition 0 <= m on line 41: Partially proven\nPost-condition m < n on line 43: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == k + (j - i) * (j <= i ? 1 : -1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y) == k + (j - i) * (j <= i ? 1 : -1);\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= j <= n on line 19: Unknown\nInvariant x + y == k + (j - i) * (j <= i? 1: -1) on line 20: Unknown\nPost-condition x + y == k on line 36: Unknown\nPost-condition 0 <= m on line 40: Unknown\nPost-condition m < n on line 42: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\n\n\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) + j * (unknown1() ? 0 : 1) == k;\n    loop invariant 0 <= m <= j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y) + j * (unknown1() ? 0 : 1) == k;\nloop invariant 0 <= m <= j;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 20: unexpected token ')'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\n\n\nloop invariant 0 <= m <= j;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
                "checker_message_after_prune": "Invariant 0 <= m <= j on line 21: Valid\nPost-condition x + y == k on line 37: Unknown\nPost-condition 0 <= m on line 41: Partially proven\nPost-condition m < n on line 43: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant x + y == k;\n    loop invariant 0 <= j <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant x + y == k;\nloop invariant 0 <= j <= n;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
                "success": false,
                "checker_message": "Invariant x + y == k on line 19: Partially proven\nInvariant 0 <= j <= n on line 20: Unknown\nPost-condition x + y == k on line 36: Partially proven\nPost-condition 0 <= m on line 40: Unknown\nPost-condition m < n on line 42: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant x + y == k;\n\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
                "checker_message_after_prune": "Invariant x + y == k on line 19: Valid\nPost-condition x + y == k on line 36: Valid\nPost-condition 0 <= m on line 40: Unknown\nPost-condition m < n on line 42: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    while(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- x = unknown1();\n- y = unknown1();\n- k = unknown1();\n- j = unknown1();\n- i = unknown1();\n- n = unknown1();\n\nNow let's analyze the loop:\n- Loop condition: j < n\n- Loop body: \n  - If j == i, x is incremented, and y is decremented\n  - Else, y is incremented, and x is decremented\n  - If unknown1() is true, m is assigned the value of j\n  - j is incremented\n\nNow let's identify the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == (k - (j - m));\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. x, y, k, j, i, and n are assigned by unknown1() calls, which could return any value.\n2. Initially, (x+y) == k.\n3. j is initialized to 0 before the loop.\n4. The loop condition is j < n.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y + j == k + m;\n    loop invariant 0 <= m <= j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- x, y, k, j, i, and n are initialized with unknown1() function calls, which we cannot make assumptions about.\n- The loop starts with j = 0 and continues while j < n.\n\nNow, analyze the loop body and make a note of the loop condition:\n- Inside the loop, there is an if condition: if j == i, x increases and y decreases; otherwise, x decreases and y increases.\n- There is another if condition with unknown1() call, which we cannot make assumptions about. If it returns true, m is assigned the value of j.\n\nFinally, output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == k + (j - i) * (j <= i ? 1 : -1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n- x = unknown1();\n- y = unknown1();\n- k = unknown1();\n- j = unknown1();\n- i = unknown1();\n- n = unknown1();\n- (x + y) == k\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- while (j < n)\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) + j * (unknown1() ? 0 : 1) == k;\n    loop invariant 0 <= m <= j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. x, y, k, j, i, and n are assigned values from unknown1().\n2. The main condition for the program to execute is (x + y) == k.\n\nNow, let's analyze the loop:\n\n1. The loop condition is j < n.\n2. Inside the loop, x and y are modified based on the condition j == i.\n3. The variable m is updated to j if the unknown1() function returns true.\n\nTo prove the post-condition (x + y) == k, we can define the following loop invariants:\n\n```\n/*@\n    loop invariant x + y == k;\n    loop invariant 0 <= j <= n;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == (k - (j - m));\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y + j == k + m;\n    loop invariant 0 <= m <= j;\n*/",
            "/*@\n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == k + (j - i) * (j <= i ? 1 : -1);\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) + j * (unknown1() ? 0 : 1) == k;\n    loop invariant 0 <= m <= j;\n*/",
            "/*@\n    loop invariant x + y == k;\n    loop invariant 0 <= j <= n;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\nloop invariant 0 <= j <= n;\nloop invariant (x + y) == (k - (j - m));\nloop invariant x + y + j == k + m;\nloop invariant 0 <= m <= j;\nloop invariant (x + y) == k + (j - i) * (j <= i ? 1 : -1);\nloop invariant (x + y) + j * (unknown1() ? 0 : 1) == k;\nloop invariant x + y == k;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}\n",
        "checker_output": false,
        "checker_message": "Annotation error on line 24: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    /*@\n\n\n\nloop invariant 0 <= m <= j;\n\n\nloop invariant x + y == k;\n*/\nwhile(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;//@ assert(0<=m);\n} \n\t{;//@ assert(m<n);\n}\n    }\n    }\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 0 <= m <= j on line 22: Valid\nInvariant x + y == k on line 25: Valid\nPost-condition x + y == k on line 41: Valid\nPost-condition 0 <= m on line 45: Valid\nPost-condition m < n on line 47: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 181,
        "success_rate": 0.49171270718232046
    }
}