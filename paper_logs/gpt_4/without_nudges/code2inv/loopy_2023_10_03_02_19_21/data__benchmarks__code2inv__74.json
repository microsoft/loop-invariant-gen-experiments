{
    "logs": {
        "file": "../data/benchmarks/code2inv/74.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant z >= 36 * c;\n    loop invariant c >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: z >= 36 * c;\nloop invariant i2: c >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant z >= 36 * c is established but not preserved.\nloop invariant c >= 0 is inductive.\nAssertion z >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\n\nloop invariant i2: c >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z - 36 * y <= c;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z - 36 * y <= c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z - 36 * y <= c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z - 36 * y <= c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z - 36 * y <= c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant c >= 0;\n  loop invariant y >= 127;\n  loop invariant z >= 36 * y;\n  loop invariant z <= 36 * y + c;\n  loop invariant c <= 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: y >= 127;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\nloop invariant i5: c <= 36;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": true,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant c <= 36 is inductive.\nAssertion z >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant z >= 36 * y;\n    loop invariant c >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: z >= 36 * y;\nloop invariant i2: c >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant z >= 36 * y is inductive.\nloop invariant c >= 0 is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: z >= 36 * y;\nloop invariant i2: c >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant z >= 36 * y is inductive.\nloop invariant c >= 0 is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nAssertion z >= 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: z >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant z >= 0 is inductive.\nAssertion z >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown(), which means it can be true or false, so we cannot make any assumptions about the loop termination.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, during every iteration, and after the loop termination, z >= 36 * c\n2. Before the loop execution, during every iteration, and after the loop termination, c >= 0\n\nThese loop invariants can be used to verify the post-condition:\n\n```\n/*@ \n    loop invariant z >= 36 * c;\n    loop invariant c >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. c is assigned 0.\n2. y is assumed to be greater than or equal to 0.\n3. y is assumed to be greater than or equal to 127.\n4. z is assigned 36 * y.\n\nNow, let's analyze the loop body and loop condition:\n\nLoop condition: The loop continues as long as the unknown() function returns a non-zero value. Since we don't have any information about unknown(), we cannot make any assumptions about the loop condition.\n\nLoop body: If c < 36, z is incremented by 1 and c is incremented by 1.\n\nNow we can state the loop invariants:\n\n1. c is always non-negative (c >= 0).\n2. z is always greater than or equal to 36 * y.\n3. The difference between z and 36 * y is less than or equal to c (z - 36 * y <= c).\n\nThese invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. So, we can write the loop invariants in ACSL format as follows:\n\n```\n@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z - 36 * y <= c;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n\n1. `c` is assigned the value 0.\n2. `y` is assumed to be greater than or equal to 0.\n3. `y` is assumed to be greater than or equal to 127.\n4. `z` is assigned the value 36 * y.\n\nNext, let's analyze the loop body and the loop condition:\n\n- The loop condition is an unknown function call, which means the loop can execute an arbitrary number of times.\n- If `c` is less than 36, both `z` and `c` are incremented by 1.\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```\n\nThese loop invariants are true:\n\n1. Before the loop execution: `c` is 0 and `z` is 36 * y, so both invariants hold.\n2. In every iteration of the loop: If `c` is less than 36, both `z` and `c` are incremented by 1, so the invariants still hold. If `c` is not less than 36, they remain unchanged.\n3. After the loop termination: The loop can terminate when the unknown function returns false, and the invariants are still true."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- c is assigned 0\n- y is assumed to be greater than or equal to 0 and greater than or equal to 127\n- z is assigned 36 * y\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown() which is an external function and could return any boolean value.\n- Inside the loop, if c < 36, z is incremented by 1 and c is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. `c = 0`\n2. `y >= 0`\n3. `y >= 127`\n4. `z = 36 * y`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `unknown()` (This condition is non-deterministic, so we cannot assume it to be true or false)\n- Loop body: \n  ```\n  if (c < 36) {\n    z = z + 1;\n    c = c + 1;\n  }\n  ```\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n  loop invariant c >= 0;\n  loop invariant y >= 127;\n  loop invariant z >= 36 * y;\n  loop invariant z <= 36 * y + c;\n  loop invariant c <= 36;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- c is initialized to 0\n- y is assumed to be greater than or equal to 127\n- z is initialized to 36 * y\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown(), which means we don't have any information about when the loop will terminate.\n\nNow, let's find the loop invariants:\n(i) Before the loop execution:\n- c is 0\n- z is 36 * y\n\n(ii) In every iteration of the loop:\n- c is non-negative (c >= 0)\n- c is less than or equal to 36 (c <= 36)\n- z is greater than or equal to 36 * y (z >= 36 * y)\n- z is less than or equal to 36 * y + c (z <= 36 * y + c)\n\n(iii) After the loop termination:\n- The loop invariants remain the same as in every iteration of the loop.\n\nHere are the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- `c` is initialized to 0.\n- `y` is assumed to be greater than or equal to 0 and greater than or equal to 127.\n- `z` is initialized to 36 * y.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n- The loop condition is `unknown()`, which is a non-deterministic function call.\n\nNow, let's output the loop invariants that are true\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. c is assigned 0.\n2. y is assumed to be greater than or equal to 0 and 127.\n3. z is assigned 36 * y.\n\nNow, let's analyze the loop condition and loop body:\n\n- The loop condition is an unknown function, so we cannot assume anything about it.\n- Inside the loop, if c < 36, then z is incremented by 1, and c is incremented by 1.\n\nNow let's find the loop invariants:\n\n1. z >= 36 * y: This is true before the loop execution, as z = 36 * y initially. During the loop, if c < 36, z is incremented by 1, but z will still be greater than or equal to 36 * y since y >= 127 and c increases slower than z. After loop termination, this is still valid.\n2. c >= 0: This is true before the loop execution, as c = 0 initially. During the loop, c is incremented by 1 when c < 36, so it remains non-negative. After loop termination, this is still valid.\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant z >= 36 * y;\n    loop invariant c >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: unknown()\n\nHere are the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `c = 0`\n- `y >= 0`\n- `y >= 127`\n- `z = 36 * y`\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `unknown()`, which is non-deterministic. Therefore, the loop may run any number of times.\n- Inside the loop, `z` is incremented by 1 and `c` is incremented by 1 if `c < 36`.\n\nNow, let's output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the pre-conditions and variable assignments before the loop.\n\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nNow, let's analyze the loop condition and body.\n\n- Loop condition: unknown()\n- Loop body:\n  - if (c < 36)\n    - z = z + 1\n    - c = c + 1\n\nNow, let's find the loop invariants.\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is \"unknown()\", which means we don't know the exact condition for the loop. However, we can still analyze the loop body.\n\nNow, let's find the necessary loop invariants of the while loop:\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. c = 0;\n2. y >= 0;\n3. y >= 127;\n4. z = 36 * y;\n\nNow let's analyze the loop condition and body:\n\n1. Loop condition: unknown()\n2. If c < 36, increment z and c\n\nNow we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions, variable assignments, and the loop condition:\n\nPre-conditions:\n1. y >= 0\n2. y >= 127\n\nVariable assignments:\n1. c = 0\n2. z = 36 * y\n\nLoop condition:\n1. unknown()\n\nNow, let's analyze the loop body and output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nLoop condition:\n- unknown() (non-deterministic)\n\nLoop body:\n- if (c < 36)\n    - z = z + 1\n    - c = c + 1\n\nPost-condition:\n- if (c < 36)\n    - z >= 0\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant z >= 36 * c;\n    loop invariant c >= 0;\n*/",
            "@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z - 36 * y <= c;\n}",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n  loop invariant c >= 0;\n  loop invariant y >= 127;\n  loop invariant z >= 36 * y;\n  loop invariant z <= 36 * y + c;\n  loop invariant c <= 36;\n*/",
            "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant z >= 36 * y;\n    loop invariant c >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: z >= 36 * c;\nloop invariant i2: c >= 0;\nloop invariant i3: c >= 0;\nloop invariant i4: z >= 36 * y;\nloop invariant i5: z - 36 * y <= c;\nloop invariant i6: 0 <= c <= 36;\nloop invariant i7: z == 36 * y + c;\nloop invariant i8: 0 <= c <= 36;\nloop invariant i9: z == 36 * y + c;\nloop invariant i10: c >= 0;\nloop invariant i11: y >= 127;\nloop invariant i12: z >= 36 * y;\nloop invariant i13: z <= 36 * y + c;\nloop invariant i14: c <= 36;\nloop invariant i15: c >= 0;\nloop invariant i16: c <= 36;\nloop invariant i17: z >= 36 * y;\nloop invariant i18: z <= 36 * y + c;\nloop invariant i19: 0 <= c <= 36;\nloop invariant i20: z == 36 * y + c;\nloop invariant i21: z >= 36 * y;\nloop invariant i22: c >= 0;\nloop invariant i23: 0 <= c <= 36;\nloop invariant i24: z == 36 * y + c;\nloop invariant i25: 0 <= c <= 36;\nloop invariant i26: z == 36 * y + c;\nloop invariant i27: 0 <= c <= 36;\nloop invariant i28: z >= 36 * y;\nloop invariant i29: z == 36 * y + c;\nloop invariant i30: 0 <= c <= 36;\nloop invariant i31: z == 36 * y + c;\nloop invariant i32: 0 <= c <= 36;\nloop invariant i33: z >= 36 * y;\nloop invariant i34: z == 36 * y + c;\nloop invariant i35: 0 <= c <= 36;\nloop invariant i36: z == 36 * y + c;\nloop invariant i37: 0 <= c <= 36;\nloop invariant i38: z == 36 * y + c;\nloop invariant i39: z >= 0;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
        "checker_output": true,
        "checker_message": "loop invariant z >= 36 * c is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z - 36 * y <= c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant z >= 0 is inductive.\nAssertion z >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            9,
            11,
            13,
            15,
            17,
            19,
            21,
            24,
            29,
            34,
            35,
            36,
            37,
            38,
            39,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            57,
            59,
            70,
            72,
            73
        ],
        "failure": [
            8,
            10,
            12,
            14,
            16,
            18,
            20,
            22,
            23,
            25,
            26,
            27,
            28,
            30,
            31,
            32,
            33,
            40,
            45,
            55,
            56,
            58,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71
        ],
        "skipped": [],
        "total": 74,
        "success_rate": 0.5540540540540541
    }
}