{
    "logs": {
        "file": "../data/benchmarks/code2inv/6.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int v1,v2,v3;\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int v1,v2,v3;\n    int x = 0;\n    int size;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= size;\nloop invariant i2: \\forall integer k; 0 <= k < x ==> (y <= \\at(y, LoopEntry) || z <= \\at(z, LoopEntry));\nloop invariant i3: x == 0 ==> y == \\old(y);\nloop invariant i4: x > 0 ==> y <= \\min(z, \\at(z, Pre));\nloop invariant i5: \\forall integer k; 0 <= k < x ==> z <= y;\nloop invariant i6: 0 <= x && x <= size;\nloop invariant i7: (x == 0) ==> (y == \\at(y, Pre));\nloop invariant i8: (x > 0) ==> (y <= \\at(y, Pre));\nloop invariant i9: (x > 0) ==> (y <= z);\nloop invariant i10: (x == 0) ==> (y == \\old(y));\nloop invariant i11: (x > 0) ==> (z >= y);\nloop invariant i12: x <= size;\nloop invariant i13: size >= 0 ==> \\forall integer k; 0 <= k < x ==> (z <= y || z > \\at(y, LoopEntry));\nloop invariant i14: 0 <= x;\nloop invariant i15: x >= 0;\n*/\nwhile(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int v1,v2,v3;\n    int x = 0;\n    int size;\n    int y, z;\n\n    /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= size;\nloop invariant i3: \\forall integer i; 0 <= i < x ==> (z <= y);\nloop invariant i4: 0 <= x <= size;\nloop invariant i5: \\forall integer k; 0 <= k < x ==> z <= y;\nloop invariant i6: (x == 0) ==> (y == \\old(y));\nloop invariant i7: (x > 0) ==> (z >= y);\nloop invariant i8: size >= 0 ==> \\forall integer k; 0 <= k < x ==> (z <= y || z > \\at(y, LoopEntry));\nloop invariant i9: 0 <= x;\nloop invariant i10: (x > 0) ==> (y <= \\min(z, \\old(y)));\n*/\nwhile(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}