{
    "logs": {
        "file": "../data/benchmarks/code2inv/94.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: i <= n + 1;\nloop invariant i4: j <= (i * (i - 1)) / 2;\nloop invariant i5: k >= 0;\nloop invariant i6: n >= 0;\nloop invariant i7: 0 <= i <= n + 1;\nloop invariant i8: 0 <= j <= (i * (i - 1)) / 2;\nloop invariant i9: i <= n + 1 ==> j == (i * (i - 1)) / 2;\nloop invariant i10: 0 <= i <= n+1;\nloop invariant i11: 0 <= j <= (i*(i-1))/2;\nloop invariant i12: i >= 1 ==> j == ((i-1)*i)/2;\nloop invariant i13: 0 <= i && i <= n+1;\nloop invariant i14: 0 <= j && j <= (i*(i-1))/2;\nloop invariant i15: i >= 1 ==> j >= i;\nloop invariant i16: i * (i - 1) <= 2 * j;\nloop invariant i17: i <= n;\nloop invariant i18: j == (i * (i + 1)) / 2;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: i <= n + 1;\nloop invariant i4: j <= (i * (i - 1)) / 2;\nloop invariant i5: k >= 0;\nloop invariant i6: n >= 0;\nloop invariant i7: i <= n;\nloop invariant i8: j == (i * (i + 1)) / 2;\nloop invariant i9: 0 <= i && i <= n+1;\nloop invariant i10: 0 <= j && j <= (i*(i-1))/2;\nloop invariant i11: i >= 1 ==> j >= i;\nloop invariant i12: 0 <= i <= n + 1;\nloop invariant i13: 0 <= j <= (i * (i - 1)) / 2;\nloop invariant i14: i <= n + 1 ==> j == (i * (i - 1)) / 2;\nloop invariant i15: 0 <= i;\nloop invariant i16: 0 <= j;\nloop invariant i17: j == (i * (i - 1)) / 2;\nloop invariant i18: 0 <= k;\nloop invariant i19: 0 <= n;\nloop invariant i20: (i >= 1) ==> (j == (i * (i - 1)) / 2);\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/94.c"
        ],
        "repair_success": [
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/67.c"
        ],
        "repair_failure": [
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 25,
        "gen_success_count": 61,
        "repair_success_count": 6,
        "repair_failure_count": 19,
        "gen_skipped_count": 0,
        "repair_skipped_count": 0
    }
}