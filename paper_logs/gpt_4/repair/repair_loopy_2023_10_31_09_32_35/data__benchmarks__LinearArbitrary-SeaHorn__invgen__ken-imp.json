{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y == j - (i - x);\nloop invariant i3: x <= i;\nloop invariant i4: i == x + (\\at(y, Pre) - y);\nloop invariant i5: j == \\at(y, Pre);\nloop invariant i6: i >= x >= 0;\nloop invariant i7: j >= y >= 0;\nloop invariant i8: i - x == j - y;\nloop invariant i9: i == x + y;\nloop invariant i10: 0 <= y;\nloop invariant i11: y <= j;\nloop invariant i12: i == x + i - y;\nloop invariant i13: j == y + i - x;\nloop invariant i14: y >= 0;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  /*@\nloop invariant i1: 0 <= x <= i;\nloop invariant i2: 0 <= y <= j;\nloop invariant i3: i - x == j - y;\nloop invariant i4: x == i && y == j;\nloop invariant i5: x >= 0 && y >= 0;\nloop invariant i6: x == 0;\nloop invariant i7: x >= 0;\nloop invariant i8: y >= 0;\nloop invariant i9: y == j - (i - x);\nloop invariant i10: i >= x >= 0;\nloop invariant i11: j >= y >= 0;\nloop invariant i12: i == x + (\\at(y, Pre) - y);\nloop invariant i13: j == \\at(y, Pre);\nloop invariant i14: i == x + y;\nloop invariant i15: 0 <= y;\nloop invariant i16: y <= j;\n*/\nwhile(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c"
        ],
        "total": 8,
        "gen_success_count": 3,
        "repair_success_count": 0,
        "repair_failure_count": 8,
        "gen_skipped_count": 0,
        "repair_skipped_count": 2
    }
}