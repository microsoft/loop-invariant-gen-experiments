{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\nloop invariant i2: x <= y + x + 1;\nloop invariant i3: y >= -x;\nloop invariant i4: y <= 2 * x;\nloop invariant i5: 0 <= x <= 2*n;\nloop invariant i6: 0 <= y;\nloop invariant i7: x <= n ==> y == 2*x;\nloop invariant i8: x > n ==> y == 2*(n - x);\nloop invariant i9: (x <= n) ==> (y == 2 * x);\nloop invariant i10: (x > n) ==> (y == 4 * n - 2 * x);\nloop invariant i11: 0 <= y <= 2 * n;\nloop invariant i12: x <= 2 * n - y;\nloop invariant i13: x <= y + 2 * n;\nloop invariant i14: x <= 2 * n ==> y == (2 * x) - (x - n);\nloop invariant i15: x > 2 * n ==> y == n - (x - n);\nloop invariant i16: 0 <= x;\nloop invariant i17: x <= 2*n;\nloop invariant i18: x <= y + 2*n;\nloop invariant i19: (x <= n) ==> (y == 2*x);\nloop invariant i20: (x > n) ==> (y == 2*(n+1) - x);\nloop invariant i21: x <= 2 * y <= 2 * x;\nloop invariant i22: (x <= n) ==> (y == x);\nloop invariant i23: (x > n) ==> (y == 3 * n - x);\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\nloop invariant i2: (x <= n) ==> (y == 2 * x);\nloop invariant i3: (x > n) ==> (y == 4 * n - 2 * x);\nloop invariant i4: 0 <= x <= 2*n;\nloop invariant i5: 0 <= y;\nloop invariant i6: x <= n ==> y == 2*x;\nloop invariant i7: x > n ==> y == 2*(n - x);\nloop invariant i8: x <= 2 * y <= 2 * x;\nloop invariant i9: (x <= n) ==> (y == x);\nloop invariant i10: (x > n) ==> (y == 3 * n - x);\nloop invariant i11: x >= 0;\nloop invariant i12: x <= 2 * n;\nloop invariant i13: y >= -x;\nloop invariant i14: x > n ==> y >= 2 * x - 2 * n;\nloop invariant i15: x <= y + x + 1;\nloop invariant i16: y <= 2 * x;\nloop invariant i17: 0 <= y <= 2 * n;\nloop invariant i18: x <= 2 * n - y;\nloop invariant i19: y >= 0;\nloop invariant i20: x <= 2*n;\nloop invariant i21: y <= 4*n;\nloop invariant i22: x >= n ==> y == 2*n - x;\nloop invariant i23: x < n ==> y == 2*x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c"
        ],
        "total": 8,
        "gen_success_count": 3,
        "repair_success_count": 0,
        "repair_failure_count": 8,
        "gen_skipped_count": 0,
        "repair_skipped_count": 2
    }
}