{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: (__BLAST_NONDET ==> fb < fbuflen - 1) || (fb == 0);\nloop invariant i4: !__BLAST_NONDET ==> 0 <= fb <= fbuflen;\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  /*@\nloop invariant i1: 0 <= fb;\nloop invariant i2: fb < fbuflen;\nloop invariant i3: (fb == 0) ==> (__BLAST_NONDET == 0);\nloop invariant i4: (__BLAST_NONDET ==> fb < fbuflen - 1) || (fb == 0);\nloop invariant i5: !__BLAST_NONDET ==> 0 <= fb <= fbuflen;\nloop invariant i6: __BLAST_NONDET ==> (fb == 0 || fb == 1 || fb == 2);\n*/\nwhile (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;//@ assert(0<=fb);\n}\n    {;//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 21,
        "gen_success_count": 36,
        "repair_success_count": 0,
        "repair_failure_count": 21,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}