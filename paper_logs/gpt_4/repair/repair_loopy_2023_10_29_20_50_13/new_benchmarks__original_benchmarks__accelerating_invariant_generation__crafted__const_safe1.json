{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;//@ assert(x == 0);\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: x == 0 || y == 0;\nloop invariant i3: y < 10 ==> x == 1;\nloop invariant i4: y >= 1 ==> x == 0;\nloop invariant i5: y <= 10;\nloop invariant i6: x == 0 || (x == 1 && y == 0);\nloop invariant i7: 0 <= y && y <= 10;\nloop invariant i8: 0 <= y;\nloop invariant i9: x == 0 || x == 1;\n*/\nwhile (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;//@ assert(x == 0);\n}\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  /*@\nloop invariant i1: 0 <= y <= 10;\nloop invariant i2: x == 0 || y == 0;\nloop invariant i3: y < 10 ==> x == 1;\nloop invariant i4: y >= 1 ==> x == 0;\nloop invariant i5: 0 <= y;\nloop invariant i6: y <= 10;\nloop invariant i7: x == 0 || x == 1;\nloop invariant i8: x == 0;\nloop invariant i9: 0 <= y && y <= 10;\nloop invariant i10: x == 0 || (x == 1 && y == 0);\n*/\nwhile (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;//@ assert(x == 0);\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 2,
        "gen_success_count": 5,
        "repair_success_count": 0,
        "repair_failure_count": 2,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}