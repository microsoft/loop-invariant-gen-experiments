{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; //@ assert(\\false);\n};\n\n}\n",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\n/*@\nloop invariant i1: i >= from;\nloop invariant i2: j >= 0;\nloop invariant i3: i <= k;\nloop invariant i4: i - from == j;\nloop invariant i5: from >= 0 && from <= k;\nloop invariant i6: k >= 0 && k <= 100;\nloop invariant i7: i >= from && i <= k;\nloop invariant i8: j >= 0 && j <= (k - from);\nloop invariant i9: i - j == from;\nloop invariant i10: i >= 0;\nloop invariant i11: j <= k;\nloop invariant i12: j == i - from;\nloop invariant i13: 0 <= i && i <= k;\nloop invariant i14: 0 <= j && j <= k;\nloop invariant i15: i == from + j;\nloop invariant i16: from >= 0;\nloop invariant i17: k <= 100;\nloop invariant i18: j <= 100;\nloop invariant i19: j <= k - from;\n*/\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; //@ assert(\\false);\n};\n\n}\n",
            "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\n/*@\nloop invariant i1: i >= from;\nloop invariant i2: i <= k;\nloop invariant i3: j >= 0;\nloop invariant i4: j <= 100;\nloop invariant i5: i - from == j;\nloop invariant i6: j <= k - from;\nloop invariant i7: i == from + j;\nloop invariant i8: from >= 0;\nloop invariant i9: k <= 100;\nloop invariant i10: i <= k + 1;\nloop invariant i11: j <= k - from + 1;\nloop invariant i12: i == j + from;\nloop invariant i13: 0 <= i && i <= k;\nloop invariant i14: 0 <= j && j <= k;\nloop invariant i15: \\false;\nloop invariant i16: i >= from && i <= k;\nloop invariant i17: j >= 0 && j <= (k - from);\nloop invariant i18: i - j == from;\n*/\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; //@ assert(\\false);\n};\n\n}\n"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 2,
        "gen_success_count": 5,
        "repair_success_count": 0,
        "repair_failure_count": 2,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}