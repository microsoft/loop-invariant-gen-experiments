{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x % 2 == 0 ==> x < 0xfff1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff1;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 0x0fffffff on line 10: Valid\nInvariant x % 2 == 0 ==> x < 0xfff1 on line 11: Valid\nPost-condition x % 2 == 0 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff1;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= 0x0fffffff on line 10: Valid\nInvariant x % 2 == 0 ==> x < 0xfff1 on line 11: Valid\nPost-condition x % 2 == 0 on line 21: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == (x < 0xfff1) % 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == (x < 0xfff1) % 2;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 12: invalid operands to binary %; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 10: Valid\nPost-condition x % 2 == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant (x < 0xfff1) ==> (x % 2 == 0);\n    loop invariant (x >= 0xfff1) ==> (x % 2 == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant (x < 0xfff1) ==> (x % 2 == 0);\nloop invariant (x >= 0xfff1) ==> (x % 2 == 1);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 0x0fffffff on line 10: Partially proven\nInvariant x < 0xfff1 ==> x % 2 == 0 on line 11: Unknown\nInvariant x >= 0xfff1 ==> x % 2 == 1 on line 12: Partially proven\nPost-condition x % 2 == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\n\nloop invariant (x >= 0xfff1) ==> (x % 2 == 1);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= 0x0fffffff on line 10: Valid\nInvariant x >= 0xfff1 ==> x % 2 == 1 on line 12: Valid\nPost-condition x % 2 == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x && x <= 0x0fffffff;\n    loop invariant x <= 0xfff1 ==> x % 2 == 0;\n    loop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x && x <= 0x0fffffff;\nloop invariant x <= 0xfff1 ==> x % 2 == 0;\nloop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 0x0fffffff on line 10: Partially proven\nInvariant x <= 0xfff1 ==> x % 2 == 0 on line 11: Unknown\nInvariant x > 0xfff1 ==> (x - 1) % 2 == 0 on line 12: Partially proven\nPost-condition x % 2 == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x && x <= 0x0fffffff;\n\nloop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= 0x0fffffff on line 10: Valid\nInvariant x > 0xfff1 ==> (x - 1) % 2 == 0 on line 12: Valid\nPost-condition x % 2 == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant !(x < 0xfff1) ==> !(x % 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x;\nloop invariant x <= 0x0fffffff;\nloop invariant !(x < 0xfff1) ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x on line 10: Partially proven\nInvariant x <= 0x0fffffff on line 11: Unknown\nInvariant !(x < 0xfff1) ==> x % 2 == 0 on line 12: Unknown\nPost-condition x % 2 == 0 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x;\n\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 10: Valid\nPost-condition x % 2 == 0 on line 22: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- x is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x < 0x0fffffff).\n- Inside the loop, there is a conditional statement:\n  - If (x < 0xfff1), then x is incremented by 1 (x++).\n  - Else, x is incremented by 2 (x += 2).\n\nNow let's output the loop invariants for the while loop that are true:\n- Before the loop execution.\n- In every iteration of the loop.\n- After the loop termination.\n- Such that the loop invariants imply the post condition.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x % 2 == 0 ==> x < 0xfff1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignment and the loop condition:\n- Variable assignment: `unsigned int x = 0;`\n- Loop condition: `x < 0x0fffffff`\n\nNow let's find the loop invariants:\n\n1. Before the loop execution: x is initialized to 0.\n2. In every iteration of the loop: x is incremented by either 1 or 2.\n3. After the loop termination: x must be even (x % 2 == 0).\n\nTaking these points into consideration, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == (x < 0xfff1) % 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- x is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 0x0fffffff`\n- Inside the loop, if `x < 0xfff1`, x is incremented by 1, otherwise, x is incremented by 2.\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant (x < 0xfff1) ==> (x % 2 == 0);\n    loop invariant (x >= 0xfff1) ==> (x % 2 == 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n\n- x is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: x < 0x0fffffff\n- Inside the loop, there are two branches:\n  - If x < 0xfff1, then x is incremented by 1.\n  - Else, x is incremented by 2.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (x % 2 == 0):\n\n```\n/*@ \n    loop invariant 0 <= x && x <= 0x0fffffff;\n    loop invariant x <= 0xfff1 ==> x % 2 == 0;\n    loop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and the loop condition:\n\n- x is initialized to 0.\n- The loop condition is x < 0x0fffffff.\n\nNow, we can analyze the loop body and find the loop invariants:\n\n1. Before the loop execution, x = 0.\n2. In every iteration of the loop, x is increased by either 1 or 2.\n3. After the loop termination, x >= 0x0fffffff.\n\nWith these observations, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant !(x < 0xfff1) ==> !(x % 2);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant x % 2 == 0 ==> x < 0xfff1;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant x % 2 == (x < 0xfff1) % 2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 0x0fffffff;\n    loop invariant (x < 0xfff1) ==> (x % 2 == 0);\n    loop invariant (x >= 0xfff1) ==> (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 0x0fffffff;\n    loop invariant x <= 0xfff1 ==> x % 2 == 0;\n    loop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 0x0fffffff;\n    loop invariant !(x < 0xfff1) ==> !(x % 2);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff1;\nloop invariant 0 <= x;\nloop invariant x <= 0x0fffffff;\nloop invariant x % 2 == (x < 0xfff1) % 2;\nloop invariant (x < 0xfff1) ==> (x % 2 == 0);\nloop invariant (x >= 0xfff1) ==> (x % 2 == 1);\nloop invariant 0 <= x && x <= 0x0fffffff;\nloop invariant x <= 0xfff1 ==> x % 2 == 0;\nloop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\nloop invariant !(x < 0xfff1) ==> !(x % 2);\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 14: invalid operands to binary %; unexpected 𝔹 and ℤ. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  /*@\nloop invariant 0 <= x <= 0x0fffffff;\nloop invariant x % 2 == 0 ==> x < 0xfff1;\nloop invariant 0 <= x;\nloop invariant x <= 0x0fffffff;\n\n\nloop invariant (x >= 0xfff1) ==> (x % 2 == 1);\nloop invariant 0 <= x && x <= 0x0fffffff;\n\nloop invariant x > 0xfff1 ==> (x - 1) % 2 == 0;\n\n*/\nwhile (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 0 <= x <= 0x0fffffff on line 10: Valid\nInvariant x % 2 == 0 ==> x < 0xfff1 on line 11: Valid\nInvariant 0 <= x on line 12: Valid\nInvariant x <= 0x0fffffff on line 13: Valid\nInvariant x >= 0xfff1 ==> x % 2 == 1 on line 16: Valid\nInvariant 0 <= x <= 0x0fffffff on line 17: Valid\nInvariant x > 0xfff1 ==> (x - 1) % 2 == 0 on line 19: Valid\nPost-condition x % 2 == 0 on line 30: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 290,
        "success_rate": 0.593103448275862
    }
}