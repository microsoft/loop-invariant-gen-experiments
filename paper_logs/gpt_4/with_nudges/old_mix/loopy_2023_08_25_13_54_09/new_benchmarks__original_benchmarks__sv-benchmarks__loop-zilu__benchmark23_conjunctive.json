{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2*i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2*i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant 0 <= j <= 200;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= j <= 200;\nloop invariant i3: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant j % 2 == 0;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: j % 2 == 0;\nloop invariant i4: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion j == 200: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: j % 2 == 0;\nloop invariant i4: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion j == 200: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant i * 2 == j;\n    loop invariant i <= 100 ==> j <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: i * 2 == j;\nloop invariant i3: i <= 100 ==> j <= 200;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= j <= 200;\n  loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: 0 <= j <= 200;\nloop invariant i3: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion j == 200: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- i and j are assigned non-deterministic values at the beginning.\n- The program continues only if i == 0 and j == 0, otherwise, it returns 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < 100.\n- Inside the loop, j is incremented by 2 and i is incremented by 1 in each iteration.\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```\n\nExplanation:\n- The invariant `0 <= i <= 100` holds because i is initially 0 and incremented by 1 in each iteration until it reaches 100.\n- The invariant `j == 2 * i` holds because j is initially 0 and incremented by 2 in each iteration, while i is incremented by 1. This relationship is maintained throughout the loop and after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "Let's start by analyzing the given program:\n\n1. Pre-conditions or variable assignments:\n   - `i = unknown_int();`\n   - `j = unknown_int();`\n   - `assume(i == 0 && j == 0);`\n\n2. Loop condition:\n   - `while (i < 100)`\n\nNow, let's find the loop invariants for the while loop:\n\n- Loop invariants should hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n- We are trying to prove the post-condition `j == 200`.\n\nThe loop invariants for the given program are:\n\n```\n/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant j == 2 * i;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition `j == 200` when the loop terminates (i.e., when `i == 100`)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i and j are initialized to unknown values.\n- The program only continues if i==0 && j==0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i<100.\n- In the loop body, j is incremented by 2 and i is incremented by 1.\n\nNow, let's find the loop invariants:\n- Before the loop execution, i == 0 and j == 0.\n- During the loop execution, i is incremented by 1 and j is incremented by 2, so j == 2 * i.\n- After the loop termination, i == 100, and j should be 200.\n\nBased on the above analysis, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program:\n\n1. Pre-conditions or variable assignments:\n   - i and j are assigned values by calling unknown_int(). Since we don't know the definition of unknown_int(), we can't make any assumptions about these values.\n   - The program continues execution only if i and j are both 0.\n   \n2. Loop body and loop condition:\n   - The loop condition is i < 100.\n   - In the loop body, j is incremented by 2 in each iteration, and i is incremented by 1.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: i == 0, j == 0 (Due to the if condition)\n\n2. In every iteration of the loop:\n   - i is incremented by 1, so i is always non-negative and i <= 100 (since the loop condition is i < 100)\n   - j is incremented by 2 for each increment of i, so j == 2 * i\n\n3. After the loop termination:\n   - The loop terminates when i >= 100. Since i is incremented by 1, i will be exactly 100 when the loop terminates.\n   - j will be 2 * 100 = 200.\n\nNow, let's output the loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- i and j are assigned non-deterministic values using unknown_int()\n- We have an assumption that i==0 && j==0, otherwise the program returns 0.\n\nLoop condition:\n- The loop executes while i < 100.\n\nPost-condition:\n- After the loop, j must be equal to 200.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2*i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions or variable assignments in the program:\n- i is an unknown integer\n- j is an unknown integer\n- if i is not 0 and j is not 0, the program returns 0\n\nLoop condition:\n- while i < 100\n\nPost-condition:\n- j == 200\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant 0 <= j <= 200;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i = unknown_int()\n- j = unknown_int()\n- The precondition for the loop is (i == 0 && j == 0)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: i < 100\n- Loop body: j += 2; i++;\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the preconditions and variable assignments in the program:\n- int i = unknown_int();\n- int j = unknown_int();\n- if (!(i==0 && j==0)) return 0; (we can assume i==0 and j==0)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- while (i<100)\n\nLoop invariants:\n1. i is initially 0 and is incremented by 1 in each loop iteration, so it is non-negative.\n2. j is initially 0 and is incremented by 2 in each loop iteration, so it is non-negative and even.\n3. j is twice the value of i, so j = 2 * i.\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant j % 2 == 0;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. i and j are assigned unknown_int() values.\n2. The program has a condition that i and j must both be 0 for the loop to execute.\n\nNow, let's analyze the loop body and loop condition:\n\n1. The loop condition is i < 100.\n2. In the loop body, j is incremented by 2 and i is incremented by 1.\n\nNow, let's state the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant i * 2 == j;\n    loop invariant i <= 100 ==> j <= 200;\n*/\n```\n\nThese loop invariants are true:\n1. Before the loop execution: i and j are both 0, so the invariants hold.\n2. In every iteration of the loop: i is incremented by 1 and j is incremented by 2, so the invariants still hold.\n3. After the loop termination: i reaches 100, and the invariants imply that j is equal to 200, which is the post-condition to be verified."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i and j are initialized with unknown_int() function calls, which can return any integer value. However, we have a conditional statement that only allows the code to proceed if i and j are both 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < 100, meaning the loop will continue executing as long as i is less than 100.\n- Inside the loop, j is incremented by 2 in each iteration, and i is incremented by 1.\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= j <= 200;\n  loop invariant j == 2 * i;\n*/\n```\n\nThese loop invariants satisfy the given conditions. Before the loop execution, i and j are both 0, so the invariants hold. In every iteration of the loop, i is incremented by 1 and j is incremented by 2, maintaining the invariants. After the loop termination, i reaches 100 and j reaches 200, thus implying the post-condition j == 200."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@\n  loop invariant 0 <= i <= 100;\n  loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant 0 <= j <= 200;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant j % 2 == 0;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant i * 2 == j;\n    loop invariant i <= 100 ==> j <= 200;\n*/",
            "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant 0 <= j <= 200;\n  loop invariant j == 2 * i;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\nloop invariant i3: 0 <= i <= 100;\nloop invariant i4: j == 2 * i;\nloop invariant i5: 0 <= i <= 100;\nloop invariant i6: j == 2 * i;\nloop invariant i7: 0 <= i <= 100;\nloop invariant i8: j == 2 * i;\nloop invariant i9: 0 <= i <= 100;\nloop invariant i10: j == 2*i;\nloop invariant i11: 0 <= i <= 100;\nloop invariant i12: 0 <= j <= 200;\nloop invariant i13: j == 2 * i;\nloop invariant i14: 0 <= i <= 100;\nloop invariant i15: j == 2 * i;\nloop invariant i16: 0 <= i;\nloop invariant i17: 0 <= j;\nloop invariant i18: j % 2 == 0;\nloop invariant i19: j == 2 * i;\nloop invariant i20: 0 <= i <= 100;\nloop invariant i21: i * 2 == j;\nloop invariant i22: i <= 100 ==> j <= 200;\nloop invariant i23: 0 <= i <= 100;\nloop invariant i24: 0 <= j <= 200;\nloop invariant i25: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nAssertion j == 200: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            319,
            320,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            339,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            323,
            326,
            327,
            329,
            331,
            338,
            341,
            348
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 361,
        "success_rate": 0.6398891966759003
    }
}