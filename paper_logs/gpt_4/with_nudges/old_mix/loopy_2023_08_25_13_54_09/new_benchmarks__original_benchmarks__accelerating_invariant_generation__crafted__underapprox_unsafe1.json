{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n    loop invariant x != 4 ==> y != 12;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == 1 << x;\nloop invariant i3: x != 4 ==> y != 12;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion y != 12: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == 1 << x;\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "@ loop invariant x >= 0 && x <= 6;\n@ loop invariant y >= 1 && y == (1 << x);",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: x >= 0 && x <= 6;\nloop invariant i2: y >= 1 && y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == 1 << x;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n    loop invariant x <= 6 ==> y <= 64;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\nloop invariant i3: x <= 6 ==> y <= 64;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion y != 12: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion y != 12: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- unsigned int x = 0;\n- unsigned int y = 1;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- while (x < 6)\n\nNow let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the initial values and the loop condition:\n- x is initially 0.\n- y is initially 1.\n- The loop condition is x < 6.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x is initialized to 0\n- y is initialized to 1\n\nNext, we analyze the loop body and make a note of the loop condition:\n- Loop condition: x < 6\n- Loop body: x++, y *= 2\n\nNow, we'll output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x = 0\n- y = 1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- loop condition: x < 6\n- loop body: x++ and y *= 2\n\nNext, we need to find loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition. The post condition is `y != 12`.\n\nBased on the analysis, we can determine the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n    loop invariant x != 4 ==> y != 12;\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `unsigned int x = 0;`\n- `unsigned int y = 1;`\n\nNow, analyze the loop body and make a note of the loop condition:\n- `while (x < 6)`\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program.\n\nInitial variable values:\n- x = 0\n- y = 1\n\nLoop condition:\n- x < 6\n\nLoop body:\n- x++\n- y *= 2\n\nPost-condition:\n- y != 12\n\nNow, let's derive the loop invariants.\n\ni1: x is always non-negative and always less than or equal to 6 (x >= 0 && x <= 6)\ni2: y is always a power of 2 (y >= 1 && y == (1 << x))\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition (y != 12), since 12 is not a power of 2.\n\nThe resulting loop invariants in ACSL notation are:\n\n```\n@ loop invariant x >= 0 && x <= 6;\n@ loop invariant y >= 1 && y == (1 << x);\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments before the loop:\n- `unsigned int x = 0;`\n- `unsigned int y = 1;`\n\nNow, let's analyze the loop condition and body:\n- Loop condition: `x < 6`\n- Loop body: `x++;` and `y *= 2;`\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- `x` is initialized to 0.\n- `y` is initialized to 1.\n\nNext, let's analyze the loop body and loop condition:\n\n- The loop condition is `x < 6`.\n- In each iteration of the loop, `x` is incremented by 1, and `y` is multiplied by 2.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition `y != 12`:\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/\n```\n\nHere's why these invariants hold:\n\n1. `0 <= x <= 6`: This invariant is true before the loop execution, as `x` is initialized to 0. It is true during every iteration of the loop, as `x` is incremented by 1 and the loop condition ensures `x < 6`. After the loop termination, `x` cannot be greater than 6.\n\n2. `y == (1 << x)`: Before the loop execution, `x` is 0, and `y` is 1, so `y == (1 << x)` holds. During each iteration of the loop, `x` is incremented by 1 and `y` is multiplied by 2, maintaining the relationship `y == (1 << x)`. After the loop termination, the relationship still holds.\n\nThese loop invariants imply that `y != 12` after the loop termination because when the loop terminates, `x` must be equal to 6, and `y == (1 << x)` is equivalent to `y == 64`. Since `y == 64`, it cannot be equal to 12."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the variable assignments, loop condition, and loop body:\n\n1. Initial variable assignments: `x = 0` and `y = 1`.\n2. Loop condition: `x < 6`.\n3. Loop body: `x++` and `y *= 2`.\n\nNow, we can find the necessary loop invariants of the while loop:\n\n```c\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n*/\n```\n\nThese invariants hold true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThese loop invariants also imply the post-condition `y != 12`, as when the loop terminates, we have `x == 6` and therefore `y == 1 << 6 = 64`, which is not equal to 12."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- unsigned int x = 0;\n- unsigned int y = 1;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- while (x < 6)\n\nNow, let's find the necessary loop invariants:\n\nBefore the loop execution:\n- x is 0\n- y is 1\n\nIn every iteration of the loop:\n- x increases by 1\n- y is multiplied by 2\n\nAfter the loop termination:\n- x is 6\n- y is 64 (2^6)\n\nTaking these into account, we can derive the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n    loop invariant x <= 6 ==> y <= 64;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
            "/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n    loop invariant x != 4 ==> y != 12;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
            "@ loop invariant x >= 0 && x <= 6;\n@ loop invariant y >= 1 && y == (1 << x);",
            "/*@ \n  loop invariant 0 <= x <= 6;\n  loop invariant y == (1 << x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == 1 << x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 6;\n    loop invariant y == (1 << x);\n    loop invariant x <= 6 ==> y <= 64;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\nloop invariant i3: 0 <= x <= 6;\nloop invariant i4: y == (1 << x);\nloop invariant i5: 0 <= x <= 6;\nloop invariant i6: y == (1 << x);\nloop invariant i7: 0 <= x <= 6;\nloop invariant i8: y == 1 << x;\nloop invariant i9: x != 4 ==> y != 12;\nloop invariant i10: 0 <= x <= 6;\nloop invariant i11: y == (1 << x);\nloop invariant i12: x >= 0 && x <= 6;\nloop invariant i13: y >= 1 && y == (1 << x);\nloop invariant i14: 0 <= x <= 6;\nloop invariant i15: y == (1 << x);\nloop invariant i16: 0 <= x <= 6;\nloop invariant i17: y == (1 << x);\nloop invariant i18: 0 <= x <= 6;\nloop invariant i19: y == 1 << x;\nloop invariant i20: 0 <= x <= 6;\nloop invariant i21: y == (1 << x);\nloop invariant i22: x <= 6 ==> y <= 64;\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is established but not preserved.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is established but not preserved.\nAssertion y != 12: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  /*@\nloop invariant i1: 0 <= x <= 6;\nloop invariant i2: y == (1 << x);\nloop invariant i3: 0 <= x <= 6;\nloop invariant i4: y == (1 << x);\nloop invariant i5: 0 <= x <= 6;\nloop invariant i6: y == (1 << x);\nloop invariant i7: 0 <= x <= 6;\nloop invariant i8: y == 1 << x;\n\nloop invariant i10: 0 <= x <= 6;\nloop invariant i11: y == (1 << x);\nloop invariant i12: x >= 0 && x <= 6;\nloop invariant i13: y >= 1 && y == (1 << x);\nloop invariant i14: 0 <= x <= 6;\nloop invariant i15: y == (1 << x);\nloop invariant i16: 0 <= x <= 6;\nloop invariant i17: y == (1 << x);\nloop invariant i18: 0 <= x <= 6;\nloop invariant i19: y == 1 << x;\nloop invariant i20: 0 <= x <= 6;\nloop invariant i21: y == (1 << x);\n\n*/\nwhile (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;//@ assert(y != 12);\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nAssertion y != 12: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34
        ],
        "skipped": [],
        "total": 37,
        "success_rate": 0.4864864864864865
    }
}