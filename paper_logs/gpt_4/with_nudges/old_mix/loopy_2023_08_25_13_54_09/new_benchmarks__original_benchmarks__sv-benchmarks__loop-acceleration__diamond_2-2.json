{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x <= 99;\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i3: (y % 2 != 0) ==> (x % 2 == 1);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant 0 <= x;\nloop invariant x <= 99;\nloop invariant (x % 2) == (y % 2);",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 99;\nloop invariant i3: (x % 2) == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 == 1) ==> (x % 2 == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 99;\nloop invariant i3: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i4: (y % 2 == 1) ==> (x % 2 == 1);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: (y % 2 == 0) ==> (x % 2 == 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant 0 <= x;\nloop invariant x < 100;\nloop invariant x % 2 == y % 2;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x < 100;\nloop invariant i3: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant y == \\at(y, Pre);\n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: y == \\at(y, Pre);\nloop invariant i2: 0 <= x <= 198;\nloop invariant i3: (x % 2) == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x <= 198;\nloop invariant i2: (x % 2) == (y % 2);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 110;\n    loop invariant x % 2 == y % 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 110;\nloop invariant i3: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i4: (y % 2 != 0) ==> (x % 2 != 0);\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: (y % 2 == 0) ==> (x % 2 == 0);\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nAssertion x % 2 == y % 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: 0 <= x;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and the loop condition:\n- x is initialized to 0\n- y is assigned an unknown unsigned integer value\n- The loop condition is x < 99\n\nNow, let's analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the program:\n\n1. The pre-conditions and variable assignments are:\n   - x is initialized to 0\n   - y is assigned a non-deterministic unsigned integer value.\n\n2. The loop condition is x < 99.\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThe loop invariant should help us verify the post-condition: (x % 2) == (y % 2).\n\nSince x and y are unsigned integers, they are always non-negative.\n\nObserving the loop body, we can see that the parity of x depends on the parity of y. Specifically, if y is even, x increases by 12, and if y is odd, x decreases by 4.\n\nWe can use the following loop invariants:\n\n```\n//@\nloop invariant 0 <= x;\nloop invariant x <= 99;\nloop invariant (x % 2) == (y % 2);\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- x is initialized to 0.\n- y is an unknown unsigned integer.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 99`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 == 1) ==> (x % 2 == 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x is initialized to 0.\n- y is an unknown unsigned integer.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is x < 99.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n//@\nloop invariant 0 <= x;\nloop invariant x < 100;\nloop invariant x % 2 == y % 2;\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post condition, which is (x % 2) == (y % 2)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and the loop condition:\n\n- Variable assignments:\n  - `unsigned int x = 0;`\n  - `unsigned int y = unknown_uint();`\n- Loop condition: `x < 99`\n\nNow, let's analyze the loop body and determine the loop invariants:\n\n- The value of `y` does not change in the loop, so `y` remains constant throughout the loop.\n- The value of `x` is incremented or decremented based on the value of `y % 2`.\n- At the end of each iteration, the parity of `x` (whether it's even or odd) will match the parity of `y`.\n\nGiven this information, we can find the necessary loop invariants to help Frama-C verify the post-condition:\n\n```\n/*@\n    loop invariant y == \\at(y, Pre);\n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is an unknown unsigned integer.\n\nNow, let's analyze the loop condition and body:\n- The loop executes while x < 99.\n- Inside the loop, the value of x changes based on the parity of y (y % 2). The changes are either adding or subtracting 2 or 4.\n\nNow, let's output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x is initialized to 0\n- y is an unknown unsigned integer\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 99`.\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution, since x is initialized to 0 and y is an unknown unsigned integer,\n(ii) in every iteration of the loop, as the loop body maintains the parity relationship between x and y,\n(iii) after the loop termination, such that the loop invariants imply the post-condition `((x % 2) == (y % 2))`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the preconditions and variable assignments:\n- x is initialized to 0.\n- y is initialized with an unknown unsigned integer.\n\nThe loop condition is `x < 99`.\n\nNow, let's analyze the loop body and find the necessary loop invariants.\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 110;\n    loop invariant x % 2 == y % 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n- Pre-conditions: x is assigned the value 0, and y is an unknown unsigned integer.\n- Loop condition: x < 99\n- Post-condition: (x % 2) == (y % 2)\n\nNow, let's find the loop invariants:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\nLoop invariants:\n1. x and y are both non-negative (unsigned integers).\n2. The parity of x and y are preserved in every iteration.\n\nHere are the loop invariants in the ACSL annotation format:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is an unknown unsigned integer value.\n\nNow let's analyze the loop:\n- The loop condition is x < 99.\n- Inside the loop, x is incremented or decremented based on y % 2.\n\nNow let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/\n```\n\nExplanation:\n- The first loop invariant ensures that x is always non-negative, which holds true before the loop starts, during every loop iteration, and after the loop terminates.\n- The second loop invariant ensures that x and y have the same parity (i.e., both are even or both are odd). This is true at the beginning of the loop since x is initialized to 0 and y is an unknown unsigned integer. The parity of x and y remains unchanged during each iteration, since x is incremented or decremented in pairs, which does not change its parity. After the loop terminates, the invariant implies the desired post-condition."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x <= 99;\nloop invariant (x % 2) == (y % 2);",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 == 1) ==> (x % 2 == 1);\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x < 100;\nloop invariant x % 2 == y % 2;",
            "/*@\n    loop invariant y == \\at(y, Pre);\n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 110;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\nloop invariant i1: x <= 99;\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i3: (y % 2 != 0) ==> (x % 2 == 1);\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= 99;\nloop invariant i6: (x % 2) == (y % 2);\nloop invariant i7: 0 <= x;\nloop invariant i8: x <= 99;\nloop invariant i9: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i10: (y % 2 == 1) ==> (x % 2 == 1);\nloop invariant i11: 0 <= x;\nloop invariant i12: x < 100;\nloop invariant i13: x % 2 == y % 2;\nloop invariant i14: y == \\at(y, Pre);\nloop invariant i15: 0 <= x <= 198;\nloop invariant i16: (x % 2) == (y % 2);\nloop invariant i17: 0 <= x;\nloop invariant i18: x % 2 == y % 2;\nloop invariant i19: 0 <= x <= 198;\nloop invariant i20: (x % 2) == (y % 2);\nloop invariant i21: 0 <= x;\nloop invariant i22: x <= 110;\nloop invariant i23: x % 2 == y % 2;\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 0;\nloop invariant i26: (y % 2 == 0) ==> (x % 2 == 0);\nloop invariant i27: (y % 2 != 0) ==> (x % 2 != 0);\nloop invariant i28: 0 <= x;\nloop invariant i29: x % 2 == y % 2;\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 26: unbound logic variable y. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  /*@\n\nloop invariant i2: (y % 2 == 0) ==> (x % 2 == 0);\n\nloop invariant i4: 0 <= x;\n\n\nloop invariant i7: 0 <= x;\n\nloop invariant i9: (y % 2 == 0) ==> (x % 2 == 0);\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: 0 <= x;\n\n\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 0;\nloop invariant i26: (y % 2 == 0) ==> (x % 2 == 0);\n\nloop invariant i28: 0 <= x;\n\n*/\nwhile (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;//@ assert((x % 2) == (y % 2));\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i7 is inductive.\nloop invariant i9 is inductive.\nloop invariant i21 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i28 is inductive.\nAssertion x % 2 == y % 2: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 283,
        "success_rate": 0.6325088339222615
    }
}