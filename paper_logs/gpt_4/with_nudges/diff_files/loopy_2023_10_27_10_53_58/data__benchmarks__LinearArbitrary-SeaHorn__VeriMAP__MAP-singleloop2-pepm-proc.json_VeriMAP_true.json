{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "We start by noting the pre-conditions and variable assignments:\n- n is initialized by unknown_int(), and assume(n>=1) makes sure n is a positive integer greater than or equal to 1.\n- x is initialized to 0.\n- y is initialized to 0.\n\nNow let's analyze the loop body and note the loop condition:\n- The loop condition is x < 2*n.\n- Inside the loop, x is incremented by 1 in every iteration.\n- If x > n, y is decremented by 1; otherwise, y is incremented by 2.\n\nBased on this analysis, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 4*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x < n ==> y == 2*x;\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration, and after the loop termination. They also imply the post-condition, which is x >= y.",
            "First, let's note the pre-conditions and variable assignments:\n- n is a non-deterministic integer value.\n- n >= 1 is assumed.\n- x and y are initialized to 0.\n\nNext, let's analyze the loop body and the loop condition:\n- The loop condition is x < 2 * n.\n- Inside the loop body, x is incremented by 1.\n- If x > n, y is decremented by 1; otherwise, y is incremented by 2.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/\n```",
            "First, let's make a note of the pre-conditions and variable assignments:\n\n1. x = 0\n2. y = 0\n3. n is a non-deterministic integer, but we have a pre-condition that n >= 1\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is x < 2 * n\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 4 * n - 2 * x);\n*/\n```\n\nExplanation:\n1. The first loop invariant states that x is always between 0 and 2 * n.\n2. The second loop invariant states that if x is less than or equal to n, then y is equal to 2 * x.\n3. The third loop invariant states that if x is greater than n, then y is equal to 4 * n - 2 * x.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (x >= y).",
            "First, let's note the pre-conditions, variable assignments, and the loop condition:\n\n- Pre-condition: n >= 1\n- Variable assignments: x = 0, y = 0\n- Loop condition: x < 2 * n\n\nNow, let's find the loop invariants:\n\nBefore the loop execution:\n1. x = 0\n2. y = 0\n\nIn every iteration of the loop:\n1. x <= 2 * n\n2. x >= 0\n3. y <= 2 * x\n4. y >= -n\n\nAfter the loop termination:\n1. x >= 2 * n\n\nNow, let's write the loop invariants in a code block:\n\n```\n/*@ \n    loop invariant x <= 2 * n;\n    loop invariant x >= 0;\n    loop invariant y <= 2 * x;\n    loop invariant y >= -n;\n*/\n```",
            "First, let's analyze the given program:\n1. Pre-conditions: `n >= 1`\n2. Variable assignments: `x = 0`, `y = 0`\n3. Loop condition: `x < 2 * n`\n4. Loop body: The loop increments `x` by 1 every iteration, and depending on the value of `x`, either increments `y` by 2 or decrements `y` by 1.\n5. Post-condition: `x >= y`\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x / 2;\n    loop invariant x >= y;\n*/\n```\n\nExplanation:\n1. `0 <= x <= 2 * n`: `x` starts at 0 and is always incremented by 1 until it reaches `2 * n`, so it's always within this range.\n2. `x <= y + x / 2`: This invariant is maintained because of the conditional nature of the loop. When `x > n`, `y` is decremented by 1, and when `x <= n`, `y` is incremented by 2. So, `y` is always at most `x / 2` larger than `x`.\n3. `x >= y`: This invariant is maintained because `y` is never incremented more than twice the increment of `x`, so `x` is always greater than or equal to `y`.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition `x >= y`.",
            "First, let's make a note of the pre-conditions, variable assignments, and loop condition in the program:\n\n- Pre-condition: n >= 1\n- Variable assignments: x = 0, y = 0\n- Loop condition: x < 2 * n\n\nNow let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= y + 2 * n;\n    loop invariant x <= 2 * n ==> y == (2 * x) - (x - n);\n    loop invariant x > 2 * n ==> y == n - (x - n);\n*/\n```\n\nThese loop invariants hold true:\n- Before the loop execution: as x and y are both 0 and n >= 1.\n- In every iteration of the loop: as x is always incremented by 1, and y is either incremented by 2 or decremented by 1 depending on the value of x.\n- After the loop termination: as the loop terminates when x >= 2 * n, and the value of y is updated based on the value of x throughout the loop.\n\nThese loop invariants imply the post-condition (x >= y) which is checked right after the loop.",
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n- n is a non-deterministic integer with the assumption that n >= 1\n- x and y are both initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is x < 2*n\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + n;\n    loop invariant x - y <= 2 * n;\n    loop invariant y >= 0 ==> x <= 2 * y;\n*/\n```\nThese loop invariants ensure that the conditions on x and y hold throughout the execution of the loop and help Frama-C verify the post-condition.",
            "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `int x = 0;`\n2. `int y = 0;`\n3. `int n = unknown_int();`\n4. `assume(n >= 1);`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x < 2 * n`\n- Loop body:\n  - `x = x + 1;`\n  - `if (x > n) y = y - 1; else y = y + 2;`\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x + 1;\n    loop invariant y >= -x;\n    loop invariant y <= 2 * x;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition `x >= y`.",
            "First, let's note the pre-conditions and variable assignments:\n\n1. `int x = 0;`\n2. `int y = 0;`\n3. `int n = unknown_int();`\n4. `assume(n >= 1);`\n\nNow, let's analyze the loop body and note the loop condition:\n\n`while(x < 2*n)`\n\nWe can now write the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 2*n;\n    loop invariant x <= y + 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n+1) - x);\n*/\n```\n\nThese invariants help Frama-C verify the post-condition of the program.",
            "First, let's analyze the given program:\n\n1. Pre-condition: n >= 1\n2. Variable assignments: x = 0, y = 0\n3. Loop condition: x < 2 * n\n\nNow, let's find the loop invariants:\n\n1. x is initially 0 and always increases, so x >= 0.\n2. x cannot be greater than 2 * n due to the loop condition, so x <= 2 * n.\n3. Before the loop, y = 0. Inside the loop, y either increases by 2 or decreases by 1. So, y >= -x.\n4. When x <= n, y increases by 2. Therefore, x > n ==> y >= 2 * x - 2 * n.\n\nPutting these loop invariants together:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y >= -x;\n    loop invariant x > n ==> y >= 2 * x - 2 * n;\n*/\n```",
            "Pre-conditions and variable assignments:\n- n is a non-negative integer (n >= 1).\n- x and y are initialized to 0.\n\nLoop condition:\n- x < 2 * n\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant 0 <= y;\n    loop invariant x <= n ==> y == 2*x;\n    loop invariant x > n ==> y == 2*(n - x);\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int x = 0;`\n- `int y = 0;`\n- `int n = unknown_int();`\n- `assume(n >= 1);`\n\nNext, analyze the loop body and make a note of the loop condition:\n- `while (x < 2 * n) { ... }`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 2 * n;\n    loop invariant n >= 1;\n    loop invariant x >= n ==> y == 2 * n - x;\n    loop invariant x <= n ==> y == 2 * x;\n*/\n```\n\nThese loop invariants ensure that the post-condition `if (x < y) goto ERROR;` is not violated, as x will always be greater than or equal to y based on the loop invariants.",
            "First, note the pre-condition and variable assignments:\n- n is a non-deterministic integer with the pre-condition n >= 1.\n- x and y are initialized to 0.\n\nNext, analyze the loop condition and loop body:\n- The loop condition is x < 2 * n.\n- Inside the loop, x is always incremented by 1.\n- y is incremented by 2 if x <= n, and decremented by 1 if x > n.\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution, since x = y = 0 and n >= 1,\n(ii) in every iteration of the loop, as x is always incremented by 1 and y is either incremented by 2 or decremented by 1, and\n(iii) after the loop termination, since the loop condition (x < 2 * n) becomes false.\n\nThe loop invariants imply the post-condition (x >= y), as x <= 2 * n - y and x >= y after the loop termination.",
            "First, let's note the pre-conditions and variable assignments:\n- n is assigned an unknown_int() value, and we assume n >= 1.\n- x and y are initialized to 0.\n\nNext, let's analyze the loop body and condition:\n- The loop condition is x < 2 * n.\n- Inside the loop, x is incremented by 1, and y is either incremented by 2 or decremented by 1 based on the condition (x > n).\n\nNow let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= 2 * y <= 2 * x;\n    loop invariant (x <= n) ==> (y == x);\n    loop invariant (x > n) ==> (y == 3 * n - x);\n*/\n```",
            "First, let's analyze the given C program and make notes of the variable assignments, pre-conditions, loop condition, and post-condition:\n\n- Pre-conditions: `n >= 1`.\n- Variable assignments: `x = 0; y = 0;`\n- Loop condition: `x < 2 * n`.\n- Post-condition: `x >= y`.\n\nNow let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant x <= 2*y <= x + 2*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x <= n ==> y == x;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. Also, they imply the post-condition `x >= y`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 4*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x < n ==> y == 2*x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 4 * n - 2 * x);\n*/",
            "/*@ \n    loop invariant x <= 2 * n;\n    loop invariant x >= 0;\n    loop invariant y <= 2 * x;\n    loop invariant y >= -n;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x / 2;\n    loop invariant x >= y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= y + 2 * n;\n    loop invariant x <= 2 * n ==> y == (2 * x) - (x - n);\n    loop invariant x > 2 * n ==> y == n - (x - n);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + n;\n    loop invariant x - y <= 2 * n;\n    loop invariant y >= 0 ==> x <= 2 * y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x + 1;\n    loop invariant y >= -x;\n    loop invariant y <= 2 * x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 2*n;\n    loop invariant x <= y + 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n+1) - x);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y >= -x;\n    loop invariant x > n ==> y >= 2 * x - 2 * n;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant 0 <= y;\n    loop invariant x <= n ==> y == 2*x;\n    loop invariant x > n ==> y == 2*(n - x);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 2 * n;\n    loop invariant n >= 1;\n    loop invariant x >= n ==> y == 2 * n - x;\n    loop invariant x <= n ==> y == 2 * x;\n*/",
            "/*@\n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= 2 * y <= 2 * x;\n    loop invariant (x <= n) ==> (y == x);\n    loop invariant (x > n) ==> (y == 3 * n - x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant x <= 2*y <= x + 2*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x <= n ==> y == x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 2*n;\n    loop invariant y <= 4*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x < n ==> y == 2*x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant y <= 4*n is inductive.\nloop invariant x >= n ==> y == 2*n - x is established but not preserved.\nloop invariant x < n ==> y == 2*x is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x <= 2*n;\nloop invariant i4: y <= 4*n;\n\nloop invariant i6: x < n ==> y == 2*x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is established but not preserved.\nloop invariant x <= 2 * n - y is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant (x <= n) ==> (y == 2 * x);\n    loop invariant (x > n) ==> (y == 4 * n - 2 * x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant (x <= n) ==> (y == 2 * x) is inductive.\nloop invariant (x > n) ==> (y == 4 * n - 2 * x) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\nloop invariant i2: (x <= n) ==> (y == 2 * x);\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= 2 * n;\n    loop invariant x >= 0;\n    loop invariant y <= 2 * x;\n    loop invariant y >= -n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 2 * n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant y >= -n is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x <= 2 * n;\nloop invariant i2: x >= 0;\nloop invariant i3: y <= 2 * x;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x / 2;\n    loop invariant x >= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + x / 2 is established but not preserved.\nloop invariant x >= y is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= y + 2 * n;\n    loop invariant x <= 2 * n ==> y == (2 * x) - (x - n);\n    loop invariant x > 2 * n ==> y == n - (x - n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is inductive.\nloop invariant x <= y + 2 * n is inductive.\nloop invariant x <= 2 * n ==> y == (2 * x) - (x - n) is preserved but not established.\nloop invariant x > 2 * n ==> y == n - (x - n) is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n\nloop invariant i5: x > 2 * n ==> y == n - (x - n);\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + n;\n    loop invariant x - y <= 2 * n;\n    loop invariant y >= 0 ==> x <= 2 * y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + n is established but not preserved.\nloop invariant x - y <= 2 * n is inductive.\nloop invariant y >= 0 ==> x <= 2 * y is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= y + x + 1;\n    loop invariant y >= -x;\n    loop invariant y <= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + x + 1 is established but not preserved.\nloop invariant y >= -x is inductive.\nloop invariant y <= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\nloop invariant i3: y >= -x;\nloop invariant i4: y <= 2 * x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 2*n;\n    loop invariant x <= y + 2*n;\n    loop invariant (x <= n) ==> (y == 2*x);\n    loop invariant (x > n) ==> (y == 2*(n+1) - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant x <= y + 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n+1) - x) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= 2*n;\n\nloop invariant i4: (x <= n) ==> (y == 2*x);\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 2 * n;\n    loop invariant y >= -x;\n    loop invariant x > n ==> y >= 2 * x - 2 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y >= -x is inductive.\nloop invariant x > n ==> y >= 2 * x - 2 * n is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 2 * n;\nloop invariant i3: y >= -x;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant 0 <= y;\n    loop invariant x <= n ==> y == 2*x;\n    loop invariant x > n ==> y == 2*(n - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2*n is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= n ==> y == 2*x is inductive.\nloop invariant x > n ==> y == 2*(n - x) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\nloop invariant i3: x <= n ==> y == 2*x;\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 2 * n;\n    loop invariant n >= 1;\n    loop invariant x >= n ==> y == 2 * n - x;\n    loop invariant x <= n ==> y == 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant n >= 1 is inductive.\nloop invariant x >= n ==> y == 2 * n - x is established but not preserved.\nloop invariant x <= n ==> y == 2 * x is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x <= 2 * n;\nloop invariant i4: n >= 1;\n\nloop invariant i6: x <= n ==> y == 2 * x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= x <= 2 * n;\n    loop invariant 0 <= y <= 2 * n;\n    loop invariant x <= 2 * n - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is established but not preserved.\nloop invariant x <= 2 * n - y is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2 * n;\n    loop invariant x <= 2 * y <= 2 * x;\n    loop invariant (x <= n) ==> (y == x);\n    loop invariant (x > n) ==> (y == 3 * n - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= 2 * y <= 2 * x is established but not preserved.\nloop invariant (x <= n) ==> (y == x) is inductive.\nloop invariant (x > n) ==> (y == 3 * n - x) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2 * n;\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 2*n;\n    loop invariant x <= 2*y <= x + 2*n;\n    loop invariant x >= n ==> y == 2*n - x;\n    loop invariant x <= n ==> y == x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 2*n is inductive.\nloop invariant x <= 2*y <= x + 2*n is established but not preserved.\nloop invariant x >= n ==> y == 2*n - x is established but not preserved.\nloop invariant x <= n ==> y == x is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: 0 <= x <= 2*n;\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant y <= 4*n is inductive.\nloop invariant x >= n ==> y == 2*n - x is inductive.\nloop invariant x < n ==> y == 2*x is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is inductive.\nloop invariant x <= 2 * n - y is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant (x <= n) ==> (y == 2 * x) is inductive.\nloop invariant (x > n) ==> (y == 4 * n - 2 * x) is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant y >= -n is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + x / 2 is inductive.\nloop invariant x >= y is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is inductive.\nloop invariant x <= y + 2 * n is inductive.\nloop invariant x <= 2 * n ==> y == (2 * x) - (x - n) is preserved but not established.\nloop invariant x > 2 * n ==> y == n - (x - n) is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + n is inductive.\nloop invariant x - y <= 2 * n is inductive.\nloop invariant y >= 0 ==> x <= 2 * y is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= y + x + 1 is inductive.\nloop invariant y >= -x is inductive.\nloop invariant y <= 2 * x is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 2*n is inductive.\nloop invariant x <= y + 2*n is inductive.\nloop invariant (x <= n) ==> (y == 2*x) is inductive.\nloop invariant (x > n) ==> (y == 2*(n+1) - x) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant y >= -x is inductive.\nloop invariant x > n ==> y >= 2 * x - 2 * n is inductive.\nloop invariant 0 <= x <= 2*n is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= n ==> y == 2*x is inductive.\nloop invariant x > n ==> y == 2*(n - x) is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= 2 * n is inductive.\nloop invariant n >= 1 is inductive.\nloop invariant x >= n ==> y == 2 * n - x is inductive.\nloop invariant x <= n ==> y == 2 * x is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant 0 <= y <= 2 * n is inductive.\nloop invariant x <= 2 * n - y is inductive.\nloop invariant 0 <= x <= 2 * n is inductive.\nloop invariant x <= 2 * y <= 2 * x is inductive.\nloop invariant (x <= n) ==> (y == x) is inductive.\nloop invariant (x > n) ==> (y == 3 * n - x) is inductive.\nloop invariant 0 <= x <= 2*n is inductive.\nloop invariant x <= 2*y <= x + 2*n is inductive.\nloop invariant x >= n ==> y == 2*n - x is inductive.\nloop invariant x <= n ==> y == x is inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 2*n;\nloop invariant i4: y <= 4*n;\nloop invariant i5: x >= n ==> y == 2*n - x;\nloop invariant i6: x < n ==> y == 2*x;\nloop invariant i7: 0 <= x <= 2 * n;\nloop invariant i8: 0 <= y <= 2 * n;\nloop invariant i9: x <= 2 * n - y;\nloop invariant i10: 0 <= x <= 2 * n;\nloop invariant i11: (x <= n) ==> (y == 2 * x);\nloop invariant i12: (x > n) ==> (y == 4 * n - 2 * x);\nloop invariant i13: x <= 2 * n;\nloop invariant i14: x >= 0;\nloop invariant i15: y <= 2 * x;\nloop invariant i16: y >= -n;\nloop invariant i17: 0 <= x <= 2 * n;\nloop invariant i18: x <= y + x / 2;\nloop invariant i19: x >= y;\nloop invariant i20: 0 <= x <= 2 * n;\nloop invariant i21: 0 <= y <= 2 * n;\nloop invariant i22: x <= y + 2 * n;\nloop invariant i23: x <= 2 * n ==> y == (2 * x) - (x - n);\nloop invariant i24: x > 2 * n ==> y == n - (x - n);\nloop invariant i25: 0 <= x <= 2 * n;\nloop invariant i26: x <= y + n;\nloop invariant i27: x - y <= 2 * n;\nloop invariant i28: y >= 0 ==> x <= 2 * y;\nloop invariant i29: 0 <= x <= 2 * n;\nloop invariant i30: x <= y + x + 1;\nloop invariant i31: y >= -x;\nloop invariant i32: y <= 2 * x;\nloop invariant i33: 0 <= x;\nloop invariant i34: x <= 2*n;\nloop invariant i35: x <= y + 2*n;\nloop invariant i36: (x <= n) ==> (y == 2*x);\nloop invariant i37: (x > n) ==> (y == 2*(n+1) - x);\nloop invariant i38: x >= 0;\nloop invariant i39: x <= 2 * n;\nloop invariant i40: y >= -x;\nloop invariant i41: x > n ==> y >= 2 * x - 2 * n;\nloop invariant i42: 0 <= x <= 2*n;\nloop invariant i43: 0 <= y;\nloop invariant i44: x <= n ==> y == 2*x;\nloop invariant i45: x > n ==> y == 2*(n - x);\nloop invariant i46: 0 <= x;\nloop invariant i47: 0 <= y;\nloop invariant i48: x <= 2 * n;\nloop invariant i49: n >= 1;\nloop invariant i50: x >= n ==> y == 2 * n - x;\nloop invariant i51: x <= n ==> y == 2 * x;\nloop invariant i52: 0 <= x <= 2 * n;\nloop invariant i53: 0 <= y <= 2 * n;\nloop invariant i54: x <= 2 * n - y;\nloop invariant i55: 0 <= x <= 2 * n;\nloop invariant i56: x <= 2 * y <= 2 * x;\nloop invariant i57: (x <= n) ==> (y == x);\nloop invariant i58: (x > n) ==> (y == 3 * n - x);\nloop invariant i59: 0 <= x <= 2*n;\nloop invariant i60: x <= 2*y <= x + 2*n;\nloop invariant i61: x >= n ==> y == 2*n - x;\nloop invariant i62: x <= n ==> y == x;\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 2*n;\nloop invariant i4: y <= 4*n;\n\nloop invariant i6: x < n ==> y == 2*x;\nloop invariant i7: 0 <= x <= 2 * n;\nloop invariant i8: 0 <= y <= 2 * n;\n\nloop invariant i10: 0 <= x <= 2 * n;\nloop invariant i11: (x <= n) ==> (y == 2 * x);\n\nloop invariant i13: x <= 2 * n;\nloop invariant i14: x >= 0;\nloop invariant i15: y <= 2 * x;\nloop invariant i16: y >= -n;\nloop invariant i17: 0 <= x <= 2 * n;\nloop invariant i18: x <= y + x / 2;\n\nloop invariant i20: 0 <= x <= 2 * n;\nloop invariant i21: 0 <= y <= 2 * n;\nloop invariant i22: x <= y + 2 * n;\n\nloop invariant i24: x > 2 * n ==> y == n - (x - n);\nloop invariant i25: 0 <= x <= 2 * n;\nloop invariant i26: x <= y + n;\nloop invariant i27: x - y <= 2 * n;\nloop invariant i28: y >= 0 ==> x <= 2 * y;\nloop invariant i29: 0 <= x <= 2 * n;\nloop invariant i30: x <= y + x + 1;\nloop invariant i31: y >= -x;\nloop invariant i32: y <= 2 * x;\nloop invariant i33: 0 <= x;\nloop invariant i34: x <= 2*n;\nloop invariant i35: x <= y + 2*n;\nloop invariant i36: (x <= n) ==> (y == 2*x);\n\nloop invariant i38: x >= 0;\nloop invariant i39: x <= 2 * n;\nloop invariant i40: y >= -x;\n\nloop invariant i42: 0 <= x <= 2*n;\nloop invariant i43: 0 <= y;\nloop invariant i44: x <= n ==> y == 2*x;\n\nloop invariant i46: 0 <= x;\nloop invariant i47: 0 <= y;\nloop invariant i48: x <= 2 * n;\nloop invariant i49: n >= 1;\n\nloop invariant i51: x <= n ==> y == 2 * x;\nloop invariant i52: 0 <= x <= 2 * n;\nloop invariant i53: 0 <= y <= 2 * n;\n\nloop invariant i55: 0 <= x <= 2 * n;\n\n\nloop invariant i58: (x > n) ==> (y == 3 * n - x);\nloop invariant i59: 0 <= x <= 2*n;\n\n\n\n*/\nwhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "skipped": [],
        "total": 18,
        "success_count": 9,
        "failure_count": 9,
        "success_rate": 0.5
    }
}