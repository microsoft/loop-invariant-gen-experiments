{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions and variable assignments:\n- n is an unsigned char, assigned a value by unknown_uchar().\n- If n is 0, the program returns 0, so we can assume n > 0.\n- v and s are unsigned chars, initialized to 0.\n- i is an unsigned int, initialized to 0.\n\nLoop condition:\n- The loop continues as long as i < n.\n\nNow, we will output the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * \\min(v, 1);\n    loop invariant s <= i * 255;\n*/\n```",
            "Pre-conditions and variable assignments:\n1. n is an unsigned char, initialized with unknown_uchar().\n2. v is an unsigned char, initialized to 0.\n3. s is an unsigned char, initialized to 0.\n4. i is an unsigned int, initialized to 0.\n\nLoop condition: i < n\n\nPost-condition: s >= v and s <= 65025\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (i == 0) ==> (s == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/\n```",
            "Pre-conditions and variable assignments:\n\n1. n is an unsigned char initialized with unknown_uchar().\n2. v and s are unsigned chars initialized to 0.\n3. i is an unsigned int initialized to 0.\n\nLoop condition:\n\n1. i < n\n\nNow, let's analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n    loop invariant s >= v;\n*/\n```",
            "Pre-conditions and variable assignments:\n- n is an unsigned char.\n- v is an unsigned char initialized to 0.\n- s is an unsigned char initialized to 0.\n- i is an unsigned int initialized to 0.\n\nLoop condition: i < n\n\nPost-condition: \n1. s >= v\n2. s <= 65025\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * i;\n    loop invariant (i == 0) ==> (s == 0);\n*/\n```",
            "Pre-conditions and variable assignments:\n- n is an unsigned char with an unknown value.\n- v and s are initialized to 0.\n- i is initialized to 0.\n\nLoop condition and body:\n- The loop condition is \"i < n\".\n- In the loop body, v is assigned an unknown value, s is incremented by v, and i is incremented by 1.\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * UCHAR_MAX;\n*/\n```\n\nExplanation:\n1. i is always between 0 and n.\n2. s is always between 0 and 65025.\n3. v is always between 0 and UCHAR_MAX.\n4. For any integer k, if k is between 0 and i, then s is greater than or equal to k times UCHAR_MAX. This invariant is used to ensure that the sum of the elements in the loop does not overflow.",
            "Pre-conditions and variable assignments:\n- n is a non-deterministic unsigned char value.\n- v and s are initialized to 0.\n- i is initialized to 0.\n\nLoop condition:\n- The loop continues as long as i is less than n.\n\nNow, let's find the loop invariants.\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * 255;\n*/\n```",
            "Pre-conditions and variable assignments:\n1. n is an unsigned char obtained from unknown_uchar() function.\n2. If n is 0, the program returns 0.\n3. v and s are both unsigned char, initialized to 0.\n4. i is an unsigned int, initialized to 0.\n\nLoop condition:\nwhile (i < n)\n\nLoop invariants:\n1. i <= n\n2. s <= 65025\n3. v <= 255 (Maximum value of unsigned char)\n\nOutput the loop invariants in a code block:\n\n```\n/*@ \n    loop invariant i <= n;\n    loop invariant s <= 65025;\n    loop invariant v <= 255;\n*/\n```",
            "First, let's make a note of the pre-conditions, variable assignments, and the loop condition in the program:\n\n- `n` is assigned a non-deterministic value from `unknown_uchar()`.\n- `v` is initialized to 0.\n- `s` is initialized to 0.\n- `i` is initialized to 0.\n- The loop condition is `i < n`.\n\nNow, let's analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s;\n    loop invariant s <= 255*i;\n    loop invariant i == 0 ==> s == 0;\n*/\n```\n\nHere, we have the following loop invariants:\n\n1. `0 <= i <= n` - `i` is always non-negative, starts at 0, and can be at most `n`.\n2. `0 <= v <= 255` - `v` is assigned an unsigned char value which is always between 0 and 255.\n3. `0 <= s` - `s` is always non-negative since it accumulates unsigned char values.\n4. `s <= 255*i` - Since `v` is at most 255 and added to `s` in each iteration, `s` will be at most `255*i` at any point.\n5. `i == 0 ==> s == 0` - When `i` is 0 (before the first iteration), `s` is initialized to 0.",
            "Pre-conditions and variable assignments:\n- n is an unsigned char assigned by unknown_uchar() function.\n- v and s are unsigned char initialized to 0.\n- i is an unsigned int initialized to 0.\n\nLoop condition:\n- i < n\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant s >= v ==> 0 <= s - v < n * 255;\n    loop invariant i != 0 ==> s >= v;\n*/\n```",
            "Pre-conditions and variable assignments:\n1. n is an unsigned char and its value is non-deterministic.\n2. If n is 0, the program returns 0 and the loop is not executed.\n3. v is an unsigned char and its initial value is 0.\n4. s is an unsigned char and its initial value is 0.\n5. i is an unsigned int and its initial value is 0.\n\nLoop condition:\nThe loop executes while i < n.\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (n == 0) ==> (i == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n\n1. n is an unsigned char, assigned by unknown_uchar().\n2. v is an unsigned char, initialized to 0.\n3. s is an unsigned char, initialized to 0.\n4. i is an unsigned int, initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `i < n`.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `0 <= i <= n`: Before the loop, i is 0. In every iteration, i is incremented by 1, and the loop condition ensures that i is always less than or equal to n. After the loop, i is equal to n.\n2. `0 <= v <= 255`: v is an unsigned char, so its range is between 0 and 255.\n3. `0 <= s <= 65025`: s is an unsigned char, but it is incremented by v in each iteration. The maximum value of s can be 255 * 255 = 65025, considering the maximum possible value of v (255) and the maximum possible number of iterations (255).\n4. `i <= n ==> s <= 255 * i`: This invariant relates s and i. If i is less than or equal to n (i.e., the loop is still running), then s is less than or equal to 255 * i. This is because, in each iteration, s increases by at most 255 (maximum value of v).",
            "Pre-conditions and variable assignments:\n1. n is an unsigned char and initialized with unknown_uchar()\n2. v and s are unsigned chars, initialized to 0\n3. i is an unsigned int, initialized to 0\n\nLoop condition: i < n\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n    loop invariant i > 0 ==> s >= v;\n    loop invariant i * UCHAR_MAX >= s;\n*/\n```",
            "Pre-conditions and variable assignments:\n1. n is an unsigned char with an unknown value, and the program returns 0 if n == 0.\n2. v and s are unsigned chars initialized to 0.\n3. i is an unsigned int initialized to 0.\n\nLoop condition: i < n\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * n;\n    loop invariant s <= UCHAR_MAX * i;\n*/\n```",
            "Pre-conditions and variable assignments:\n- n is a non-deterministic unsigned char.\n- v and s are initialized to 0.\n- i is initialized to 0.\n\nLoop condition:\n- i < n\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n*/\n```",
            "Pre-conditions and variable assignments:\n- `n` is a non-deterministic unsigned char.\n- If `n` is 0, the program returns 0.\n- `v` is initialized to 0.\n- `s` is initialized to 0.\n- `i` is initialized to 0.\n\nLoop condition:\n- The loop continues as long as `i < n`.\n\nLoop invariants:\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= UCHAR_MAX;\n  loop invariant 0 <= s <= (UCHAR_MAX * i);\n  loop invariant i == 0 ==> s == 0;\n  loop invariant (i > 0) ==> (s > 0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * \\min(v, 1);\n    loop invariant s <= i * 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (i == 0) ==> (s == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n    loop invariant s >= v;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * i;\n    loop invariant (i == 0) ==> (s == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * UCHAR_MAX;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * 255;\n*/",
            "/*@ \n    loop invariant i <= n;\n    loop invariant s <= 65025;\n    loop invariant v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s;\n    loop invariant s <= 255*i;\n    loop invariant i == 0 ==> s == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant s >= v ==> 0 <= s - v < n * 255;\n    loop invariant i != 0 ==> s >= v;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (n == 0) ==> (i == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n    loop invariant i > 0 ==> s >= v;\n    loop invariant i * UCHAR_MAX >= s;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * n;\n    loop invariant s <= UCHAR_MAX * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= UCHAR_MAX;\n  loop invariant 0 <= s <= (UCHAR_MAX * i);\n  loop invariant i == 0 ==> s == 0;\n  loop invariant (i > 0) ==> (s > 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * \\min(v, 1);\n    loop invariant s <= i * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant s >= i * \\min(v, 1) is established but not preserved.\nloop invariant s <= i * 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\nloop invariant i5: s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (i == 0) ==> (s == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant (i == 0) ==> (s == 0) is inductive.\nloop invariant (i > 0) ==> (s >= v) is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\nloop invariant i4: (i == 0) ==> (s == 0);\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n    loop invariant s >= v;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant i <= n ==> s <= 255 * i is inductive.\nloop invariant s >= v is established but not preserved.\nAssertion \\false: Partially proven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: i <= n ==> s <= 255 * i;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * i;\n    loop invariant (i == 0) ==> (s == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: (i == 0) ==> (s == 0);\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * UCHAR_MAX;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant \\forall integer k; 0 <= k < i ==> s >= k * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant \\forall integer k; 0 <= k < i ==> s >= k * 255 is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i <= n;\n    loop invariant s <= 65025;\n    loop invariant v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= n is inductive.\nloop invariant s <= 65025 is inductive.\nloop invariant v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: i <= n;\nloop invariant i2: s <= 65025;\nloop invariant i3: v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s;\n    loop invariant s <= 255*i;\n    loop invariant i == 0 ==> s == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s is inductive.\nloop invariant s <= 255*i is inductive.\nloop invariant i == 0 ==> s == 0 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s;\nloop invariant i4: s <= 255*i;\nloop invariant i5: i == 0 ==> s == 0;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant s >= v ==> 0 <= s - v < n * 255;\n    loop invariant i != 0 ==> s >= v;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant s >= v ==> 0 <= s - v < n * 255 is established but not preserved.\nloop invariant i != 0 ==> s >= v is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n    loop invariant (n == 0) ==> (i == 0);\n    loop invariant (i > 0) ==> (s >= v);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant (n == 0) ==> (i == 0) is inductive.\nloop invariant (i > 0) ==> (s >= v) is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\nloop invariant i4: (n == 0) ==> (i == 0);\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= 255 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant i <= n ==> s <= 255 * i is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: i <= n ==> s <= 255 * i;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n    loop invariant i > 0 ==> s >= v;\n    loop invariant i * UCHAR_MAX >= s;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: i == 0 ==> s == 0;\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant 0 <= s <= UCHAR_MAX * n;\n    loop invariant s <= UCHAR_MAX * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= UCHAR_MAX;\n    loop invariant i == 0 ==> s == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\n\nloop invariant i4: i == 0 ==> s == 0;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= UCHAR_MAX;\n  loop invariant 0 <= s <= (UCHAR_MAX * i);\n  loop invariant i == 0 ==> s == 0;\n  loop invariant (i > 0) ==> (s > 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: i == 0 ==> s == 0;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 29: unbound logic variable UCHAR_MAX. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: s >= i * \\min(v, 1);\nloop invariant i5: s <= i * 255;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: 0 <= s <= 65025;\nloop invariant i8: 0 <= v <= 255;\nloop invariant i9: (i == 0) ==> (s == 0);\nloop invariant i10: (i > 0) ==> (s >= v);\nloop invariant i11: 0 <= i <= n;\nloop invariant i12: 0 <= v <= 255;\nloop invariant i13: 0 <= s <= 65025;\nloop invariant i14: i <= n ==> s <= 255 * i;\nloop invariant i15: s >= v;\nloop invariant i16: 0 <= i <= n;\nloop invariant i17: 0 <= v <= UCHAR_MAX;\nloop invariant i18: 0 <= s <= UCHAR_MAX * i;\nloop invariant i19: (i == 0) ==> (s == 0);\nloop invariant i20: 0 <= i <= n;\nloop invariant i21: 0 <= s <= 65025;\nloop invariant i22: 0 <= v <= UCHAR_MAX;\nloop invariant i23: \\forall integer k; 0 <= k < i ==> s >= k * UCHAR_MAX;\nloop invariant i24: 0 <= i <= n;\nloop invariant i25: 0 <= s <= 65025;\nloop invariant i26: 0 <= v <= 255;\nloop invariant i27: \\forall integer k; 0 <= k < i ==> s >= k * 255;\nloop invariant i28: i <= n;\nloop invariant i29: s <= 65025;\nloop invariant i30: v <= 255;\nloop invariant i31: 0 <= i <= n;\nloop invariant i32: 0 <= v <= 255;\nloop invariant i33: 0 <= s;\nloop invariant i34: s <= 255*i;\nloop invariant i35: i == 0 ==> s == 0;\nloop invariant i36: 0 <= i <= n;\nloop invariant i37: 0 <= s <= 65025;\nloop invariant i38: 0 <= v <= 255;\nloop invariant i39: s >= v ==> 0 <= s - v < n * 255;\nloop invariant i40: i != 0 ==> s >= v;\nloop invariant i41: 0 <= i <= n;\nloop invariant i42: 0 <= s <= 65025;\nloop invariant i43: 0 <= v <= 255;\nloop invariant i44: (n == 0) ==> (i == 0);\nloop invariant i45: (i > 0) ==> (s >= v);\nloop invariant i46: 0 <= i <= n;\nloop invariant i47: 0 <= v <= 255;\nloop invariant i48: 0 <= s <= 65025;\nloop invariant i49: i <= n ==> s <= 255 * i;\nloop invariant i50: 0 <= i <= n;\nloop invariant i51: 0 <= v <= UCHAR_MAX;\nloop invariant i52: 0 <= s <= UCHAR_MAX;\nloop invariant i53: i == 0 ==> s == 0;\nloop invariant i54: i > 0 ==> s >= v;\nloop invariant i55: i * UCHAR_MAX >= s;\nloop invariant i56: 0 <= i <= n;\nloop invariant i57: 0 <= v <= UCHAR_MAX;\nloop invariant i58: 0 <= s <= UCHAR_MAX * n;\nloop invariant i59: s <= UCHAR_MAX * i;\nloop invariant i60: 0 <= i <= n;\nloop invariant i61: 0 <= s <= 65025;\nloop invariant i62: 0 <= v <= UCHAR_MAX;\nloop invariant i63: i == 0 ==> s == 0;\nloop invariant i64: 0 <= i <= n;\nloop invariant i65: 0 <= v <= UCHAR_MAX;\nloop invariant i66: 0 <= s <= (UCHAR_MAX * i);\nloop invariant i67: i == 0 ==> s == 0;\nloop invariant i68: (i > 0) ==> (s > 0);\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\nloop invariant i5: s <= i * 255;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: 0 <= s <= 65025;\nloop invariant i8: 0 <= v <= 255;\nloop invariant i9: (i == 0) ==> (s == 0);\n\nloop invariant i11: 0 <= i <= n;\nloop invariant i12: 0 <= v <= 255;\nloop invariant i13: 0 <= s <= 65025;\nloop invariant i14: i <= n ==> s <= 255 * i;\n\nloop invariant i16: 0 <= i <= n;\n\n\nloop invariant i19: (i == 0) ==> (s == 0);\nloop invariant i20: 0 <= i <= n;\nloop invariant i21: 0 <= s <= 65025;\n\n\nloop invariant i24: 0 <= i <= n;\nloop invariant i25: 0 <= s <= 65025;\nloop invariant i26: 0 <= v <= 255;\n\nloop invariant i28: i <= n;\nloop invariant i29: s <= 65025;\nloop invariant i30: v <= 255;\nloop invariant i31: 0 <= i <= n;\nloop invariant i32: 0 <= v <= 255;\nloop invariant i33: 0 <= s;\nloop invariant i34: s <= 255*i;\nloop invariant i35: i == 0 ==> s == 0;\nloop invariant i36: 0 <= i <= n;\nloop invariant i37: 0 <= s <= 65025;\nloop invariant i38: 0 <= v <= 255;\nloop invariant i39: s >= v ==> 0 <= s - v < n * 255;\n\nloop invariant i41: 0 <= i <= n;\nloop invariant i42: 0 <= s <= 65025;\nloop invariant i43: 0 <= v <= 255;\nloop invariant i44: (n == 0) ==> (i == 0);\n\nloop invariant i46: 0 <= i <= n;\nloop invariant i47: 0 <= v <= 255;\nloop invariant i48: 0 <= s <= 65025;\nloop invariant i49: i <= n ==> s <= 255 * i;\nloop invariant i50: 0 <= i <= n;\n\n\nloop invariant i53: i == 0 ==> s == 0;\n\n\nloop invariant i56: 0 <= i <= n;\n\n\n\nloop invariant i60: 0 <= i <= n;\nloop invariant i61: 0 <= s <= 65025;\n\nloop invariant i63: i == 0 ==> s == 0;\nloop invariant i64: 0 <= i <= n;\n\n\nloop invariant i67: i == 0 ==> s == 0;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c"
        ],
        "skipped": [],
        "total": 5,
        "success_count": 2,
        "failure_count": 3,
        "success_rate": 0.4
    }
}