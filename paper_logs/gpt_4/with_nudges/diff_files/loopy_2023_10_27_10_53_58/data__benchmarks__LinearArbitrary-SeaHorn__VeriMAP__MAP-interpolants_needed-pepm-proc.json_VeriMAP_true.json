{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Let's analyze the given program:\n\n1. Variables x and y are initialized to 0.\n2. The loop condition is unknown_int(), which is non-deterministic.\n3. Inside the loop, there are two conditional statements:\n    a. If the first unknown_int() is true, x increases by 1, and y increases by 2.\n    b. If the first unknown_int() is false and the second unknown_int() is true, and x >= 4, then x increases by 1, and y increases by 3.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, x = 0, and y = 0.\n2. In every iteration of the loop:\n    a. If the first unknown_int() is true, then x increases by 1, and y increases by 2.\n    b. If the first unknown_int() is false and the second unknown_int() is true, and x >= 4, then x increases by 1, and y increases by 3.\n3. After the loop termination, the post-condition is 3*x < y.\n\nConsidering the above analysis, the following loop invariants can be derived:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant (x < 4) ==> (y <= 2*x);\n*/\n```\n\nHere is an explanation of the invariants:\n\n1. x and y are non-negative since they are only incremented.\n2. The value of y is always at least 2 times the value of x, since either y increases by 2 and x increases by 1, or y increases by 3 and x increases by 1 (only if x >= 4).\n3. If x is less than 4, y can be at most 2 times the value of x, since the case where y increases by 3 and x increases by 1 only happens when x >= 4.",
            "Pre-conditions and variable assignments:\n- x and y are initialized to 0.\n\nLoop condition:\n- The loop continues as long as unknown_int() returns a non-zero value.\n\nNow let's analyze the loop body and find the loop invariants:\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= 2*x;\n    loop invariant x <= y + 1;\n    loop invariant y <= 3*x;\n*/\n```",
            "First, let's note down the variable assignments and loop condition:\n\n- x is initialized to 0.\n- y is initialized to 0.\n- The loop condition is unknown_int().\n\nNow let's analyze the loop body and find the loop invariants:\n\n1. x and y are both non-negative.\n2. y is always at least twice the value of x.\n3. When x >= 4, y is at least thrice the value of (x - 4).\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. \n\nThe loop invariants for the loop in the program are:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x >= 4) ==> (y >= 3 * (x - 4));\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n- x and y are both initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `unknown_int()`, which is a non-deterministic function call.\n- Inside the loop, there are two branches:\n  1. If `unknown_int()` is true, x is incremented by 1 and y is incremented by 2.\n  2. If the first `unknown_int()` is false and the second `unknown_int()` is true, and x is greater than or equal to 4, x is incremented by 1 and y is incremented by 3.\n\nNow, let's find the loop invariants:\n1. Before the loop execution, x and y are 0.\n2. In every iteration of the loop:\n   - If the first branch is taken, y is incremented by 2 * x_increment.\n   - If the second branch is taken, x >= 4, and y is incremented by 3 * x_increment.\n   - In both cases, y is incremented at least twice as much as x.\n3. After the loop termination, 3*x is always less than or equal to y.\n\nUsing these observations, we can write the loop invariants as follows:\n\n```\n/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant 2 * x <= y;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. Moreover, they imply the post-condition, which is that 3*x is less than or equal to y.",
            "First, note the initial values of x and y, and the loop condition:\n\n- x = 0\n- y = 0\n- The loop condition is unknown_int(), which means the loop can execute a non-deterministic number of times.\n\nNow, let's analyze the loop body:\n\n1. If unknown_int() is true, x is incremented by 1 and y is incremented by 2.\n2. Else if unknown_int() is true and x >= 4, x is incremented by 1 and y is incremented by 3.\n\nLet's analyze the post-condition:\n\n- 3 * x < y\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2 * x <= y;\n    loop invariant y <= 2 * x + 3 * (x - 4) ==> x >= 4;\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: x = 0, y = 0, all invariants are true.\n2. In every iteration of the loop: they hold true after each possible branch of the loop.\n3. After loop termination: they imply the post-condition (3 * x < y), as 2 * x <= y and y <= 2 * x + 3 * (x - 4) when x >= 4.",
            "First, let's note the initial values of the variables and the loop condition:\n- x = 0\n- y = 0\n- loop condition: unknown_int()\n\nNow, let's analyze the loop body and find the loop invariants:\n\n1. If the first unknown_int() is true, x increases by 1, and y increases by 2.\n2. If the first unknown_int() is false and the second unknown_int() is true, and x >= 4, x increases by 1, and y increases by 3.\n\nBased on this analysis, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant y <= 3*x;\n*/\n```",
            "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- x = 0\n- y = 0\n\nLoop condition:\n- while (unknown_int())\n\nNow, let's derive the loop invariants:\n\n1. Before the loop execution and in every iteration of the loop, x and y are non-negative.\n\n2. At the end of every iteration, if x is incremented by 1, y is incremented by 2.\n\n3. At the end of every iteration, if x is incremented by 1 and x >= 4, y is incremented by 3.\n\n4. The value of y is always at least 2 * x.\n\nHere are the loop invariants in ACSL notation:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop continues as long as unknown_int() returns non-zero.\n\nNow, let's find the loop invariants for the while loop:\n\n1. x and y are non-negative.\n2. The difference between y and 2 * x is non-negative.\n3. If x >= 4, then the difference between y and 3 * x is non-negative.\n\nConsidering these invariants, we can write the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x < 4 ==> y >= 3 * x;\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n```\nint x=0;\nint y=0;\n```\nBoth x and y are initialized to 0.\n\nNow let's analyze the loop body and make a note of the loop condition:\n```\nwhile (unknown_int()) {\n    ...\n}\n```\nThe loop condition is based on the return value of `unknown_int()`, which is non-deterministic.\n\nNow let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant y <= 3 * x;\n*/\n```\n\nExplanation:\n- `x >= 0`: x is initialized to 0 and only increases in value inside the loop.\n- `y >= 0`: y is initialized to 0 and only increases in value inside the loop.\n- `y >= 2 * x`: If the first condition in the loop is true, x is incremented by 1 and y is incremented by 2. This maintains the invariant that y is always at least 2 times x.\n- `y <= 3 * x`: If the second condition in the loop is true and x >= 4, x is incremented by 1 and y is incremented by 3. This maintains the invariant that y is always at most 3 times x.",
            "First, let's note the pre-conditions and variable assignments:\n- `x` is initialized to 0.\n- `y` is initialized to 0.\n\nNow, let's analyze the loop condition and body:\n- The while loop continues as long as `unknown_int()` returns a non-zero value. Since we don't have the definition of this function, we can't make any assumptions about it.\n- There are two main branches in the loop body:\n    1. If `unknown_int()` returns a non-zero value, `x` is incremented by 1 and `y` is incremented by 2.\n    2. If the first `unknown_int()` returns 0 and the second `unknown_int()` returns a non-zero value, and `x >= 4`, `x` is incremented by 1 and `y` is incremented by 3.\n\nNow, let's determine the necessary loop invariants:\n1. `x` and `y` are non-negative.\n2. `2*x <= y`.\n3. If `x >= 4`, then `3*x <= y`.\n\nWith these loop invariants, we can output them in a single code block as follows:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n    loop invariant x < 4 ==> 3*x <= y;\n*/\n```",
            "Pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is initialized to 0.\n\nLoop condition:\n- The loop continues executing while unknown_int() returns non-zero value.\n\nLoop invariants:\n- For all iterations, x and y are non-negative.\n- For all iterations, y is always greater than or equal to 2 * x.\n- For all iterations, if x >= 4, then y >= 3 * x.\n\nThe loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= 3 * x;\n*/\n```",
            "First, let's analyze the given program:\n- There are two variables, x and y, both initialized to 0.\n- The loop executes as long as unknown_int() returns a non-zero value.\n- Inside the loop, there are two if conditions based on unknown_int():\n  - If the first condition is true, x is incremented by 1, and y is incremented by 2.\n  - If the second condition is true and x >= 4, x is incremented by 1, and y is incremented by 3.\n- The post-condition checks if 3*x < y, and if it is true, the program reaches an error state.\n\nNow let's determine the loop invariants:\n1. x and y are non-negative since they start at 0 and only increment.\n2. At every step, either x and y both increment or neither increments.\n3. If x increments, then y increments by at least 2.\n4. If x >= 4 and x increments, then y increments by at least 3.\n\nNow we can write the loop invariants for Frama-C:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= x + (x - 4);\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. x = 0;\n2. y = 0;\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is \"unknown_int()\", which means it is non-deterministic.\n2. If the first \"unknown_int()\" is true, x increments by 1, and y increments by 2.\n3. If the first \"unknown_int()\" is false, and the second \"unknown_int()\" is true, and x >= 4, then x increments by 1, and y increments by 3.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y <= 2 * x + 1);\n*/\n```\n\nExplanation:\n\n1. x >= 0: x starts at 0 and is only incremented in the loop, so it is always non-negative.\n2. y >= 0: y starts at 0 and is only incremented in the loop, so it is always non-negative.\n3. y >= 2 * x: When x is incremented by 1, y is incremented by at least 2, so y is always at least twice x.\n4. (x < 4) ==> (y <= 2 * x + 1): If x is less than 4, then the second condition of the loop never holds, and y can only increase by 2 when x increases by 1. In this case, the maximum value of y is 2 * x + 1.",
            "First, we note the initial variable assignments and the loop condition:\n\n- x = 0\n- y = 0\n- while (unknown_int())\n\nNow, let's analyze the loop body and find the loop invariants:\n\n1. x is always non-negative.\n2. y is always non-negative.\n3. y is always greater than or equal to x.\n4. If x is incremented, y is incremented by at least 2 times the increment of x.\n5. If x >= 4 and x is incremented, y is incremented by at least 3 times the increment of x.\n\nConsidering these invariants, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= x;\n    loop invariant (\\forall int k; 0 <= k <= x; y >= 2 * k);\n    loop invariant (\\forall int k; 4 <= k <= x; y >= 3 * k);\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. The invariants, along with the loop condition, imply the post-condition of the program.",
            "First, let's analyze the program:\n- Pre-conditions: x = 0, y = 0\n- Loop condition: unknown_int()\n\nNow, let's analyze the loop body:\n1. If the first unknown_int() is true, x and y are incremented by 1 and 2, respectively.\n2. If the second unknown_int() is true and x >= 4, x and y are incremented by 1 and 3, respectively.\n\nBased on the above analysis, we can list the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y == 2 * x);\n    loop invariant (x >= 4) ==> (y >= 2 * x);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant (x < 4) ==> (y <= 2*x);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= 2*x;\n    loop invariant x <= y + 1;\n    loop invariant y <= 3*x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x >= 4) ==> (y >= 3 * (x - 4));\n*/",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant 2 * x <= y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2 * x <= y;\n    loop invariant y <= 2 * x + 3 * (x - 4) ==> x >= 4;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant y <= 3*x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x < 4 ==> y >= 3 * x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant y <= 3 * x;\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n    loop invariant x < 4 ==> 3*x <= y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= 3 * x;\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= x + (x - 4);\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y <= 2 * x + 1);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= x;\n    loop invariant (\\forall int k; 0 <= k <= x; y >= 2 * k);\n    loop invariant (\\forall int k; 4 <= k <= x; y >= 3 * k);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y == 2 * x);\n    loop invariant (x >= 4) ==> (y >= 2 * x);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant (x < 4) ==> (y <= 2*x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 2*x <= y is inductive.\nloop invariant (x < 4) ==> (y <= 2*x) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 2*x <= y;\nloop invariant i4: (x < 4) ==> (y <= 2*x);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= 2*x;\n    loop invariant x <= y + 1;\n    loop invariant y <= 3*x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant y <= 2*x is established but not preserved.\nloop invariant x <= y + 1 is inductive.\nloop invariant y <= 3*x is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\nloop invariant i4: x <= y + 1;\nloop invariant i5: y <= 3*x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x >= 4) ==> (y >= 3 * (x - 4));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant (x >= 4) ==> (y >= 3 * (x - 4)) is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant 2 * x <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 2 * x <= y is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2 * x <= y;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2 * x <= y;\n    loop invariant y <= 2 * x + 3 * (x - 4) ==> x >= 4;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 2 * x <= y is inductive.\nloop invariant y <= 2 * x + 3 * (x - 4) ==> x >= 4 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2 * x <= y;\nloop invariant i4: y <= 2 * x + 3 * (x - 4) ==> x >= 4;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 2*x <= y;\n    loop invariant y <= 3*x;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant 2*x <= y is inductive.\nloop invariant y <= 3*x is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x < 4 ==> y >= 3 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x < 4 ==> y >= 3 * x is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant y <= 3 * x;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant y <= 3 * x is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant 2*x <= y;\n    loop invariant x < 4 ==> 3*x <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant 2*x <= y is inductive.\nloop invariant x < 4 ==> 3*x <= y is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: 2*x <= y;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= 3 * x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x >= 4 ==> y >= 3 * x is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant x >= 4 ==> y >= x + (x - 4);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant x >= 4 ==> y >= x + (x - 4) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\nloop invariant i4: x >= 4 ==> y >= x + (x - 4);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y <= 2 * x + 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant (x < 4) ==> (y <= 2 * x + 1) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\nloop invariant i4: (x < 4) ==> (y <= 2 * x + 1);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= x;\n    loop invariant (\\forall int k; 0 <= k <= x; y >= 2 * k);\n    loop invariant (\\forall int k; 4 <= k <= x; y >= 3 * k);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unexpected token ';'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= x;\n\n\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 2 * x;\n    loop invariant (x < 4) ==> (y == 2 * x);\n    loop invariant (x >= 4) ==> (y >= 2 * x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 2 * x is inductive.\nloop invariant (x < 4) ==> (y == 2 * x) is inductive.\nloop invariant (x >= 4) ==> (y >= 2 * x) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 2 * x;\nloop invariant i4: (x < 4) ==> (y == 2 * x);\nloop invariant i5: (x >= 4) ==> (y >= 2 * x);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 64: unexpected token ';'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 2*x <= y;\nloop invariant i4: (x < 4) ==> (y <= 2*x);\nloop invariant i5: 0 <= x;\nloop invariant i6: 0 <= y;\nloop invariant i7: y <= 2*x;\nloop invariant i8: x <= y + 1;\nloop invariant i9: y <= 3*x;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: y >= 2 * x;\nloop invariant i13: (x >= 4) ==> (y >= 3 * (x - 4));\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: 2 * x <= y;\nloop invariant i17: x >= 0;\nloop invariant i18: y >= 0;\nloop invariant i19: 2 * x <= y;\nloop invariant i20: y <= 2 * x + 3 * (x - 4) ==> x >= 4;\nloop invariant i21: 0 <= x;\nloop invariant i22: 0 <= y;\nloop invariant i23: 2*x <= y;\nloop invariant i24: y <= 3*x;\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: y >= 2 * x;\nloop invariant i28: x >= 0;\nloop invariant i29: y >= 0;\nloop invariant i30: y >= 2 * x;\nloop invariant i31: x < 4 ==> y >= 3 * x;\nloop invariant i32: x >= 0;\nloop invariant i33: y >= 0;\nloop invariant i34: y >= 2 * x;\nloop invariant i35: y <= 3 * x;\nloop invariant i36: x >= 0;\nloop invariant i37: y >= 0;\nloop invariant i38: 2*x <= y;\nloop invariant i39: x < 4 ==> 3*x <= y;\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\nloop invariant i42: y >= 2 * x;\nloop invariant i43: x >= 4 ==> y >= 3 * x;\nloop invariant i44: x >= 0;\nloop invariant i45: y >= 0;\nloop invariant i46: y >= 2 * x;\nloop invariant i47: x >= 4 ==> y >= x + (x - 4);\nloop invariant i48: x >= 0;\nloop invariant i49: y >= 0;\nloop invariant i50: y >= 2 * x;\nloop invariant i51: (x < 4) ==> (y <= 2 * x + 1);\nloop invariant i52: x >= 0;\nloop invariant i53: y >= 0;\nloop invariant i54: y >= x;\nloop invariant i55: (\\forall int k; 0 <= k <= x; y >= 2 * k);\nloop invariant i56: (\\forall int k; 4 <= k <= x; y >= 3 * k);\nloop invariant i57: x >= 0;\nloop invariant i58: y >= 0;\nloop invariant i59: y >= 2 * x;\nloop invariant i60: (x < 4) ==> (y == 2 * x);\nloop invariant i61: (x >= 4) ==> (y >= 2 * x);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 2*x <= y;\nloop invariant i4: (x < 4) ==> (y <= 2*x);\nloop invariant i5: 0 <= x;\nloop invariant i6: 0 <= y;\n\nloop invariant i8: x <= y + 1;\nloop invariant i9: y <= 3*x;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: y >= 2 * x;\n\nloop invariant i14: x >= 0;\nloop invariant i15: y >= 0;\nloop invariant i16: 2 * x <= y;\nloop invariant i17: x >= 0;\nloop invariant i18: y >= 0;\nloop invariant i19: 2 * x <= y;\nloop invariant i20: y <= 2 * x + 3 * (x - 4) ==> x >= 4;\nloop invariant i21: 0 <= x;\nloop invariant i22: 0 <= y;\nloop invariant i23: 2*x <= y;\nloop invariant i24: y <= 3*x;\nloop invariant i25: x >= 0;\nloop invariant i26: y >= 0;\nloop invariant i27: y >= 2 * x;\nloop invariant i28: x >= 0;\nloop invariant i29: y >= 0;\nloop invariant i30: y >= 2 * x;\n\nloop invariant i32: x >= 0;\nloop invariant i33: y >= 0;\nloop invariant i34: y >= 2 * x;\nloop invariant i35: y <= 3 * x;\nloop invariant i36: x >= 0;\nloop invariant i37: y >= 0;\nloop invariant i38: 2*x <= y;\n\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\nloop invariant i42: y >= 2 * x;\n\nloop invariant i44: x >= 0;\nloop invariant i45: y >= 0;\nloop invariant i46: y >= 2 * x;\nloop invariant i47: x >= 4 ==> y >= x + (x - 4);\nloop invariant i48: x >= 0;\nloop invariant i49: y >= 0;\nloop invariant i50: y >= 2 * x;\nloop invariant i51: (x < 4) ==> (y <= 2 * x + 1);\nloop invariant i52: x >= 0;\nloop invariant i53: y >= 0;\nloop invariant i54: y >= x;\n\n\nloop invariant i57: x >= 0;\nloop invariant i58: y >= 0;\nloop invariant i59: y >= 2 * x;\nloop invariant i60: (x < 4) ==> (y == 2 * x);\nloop invariant i61: (x >= 4) ==> (y >= 2 * x);\n*/\nwhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "skipped": [],
        "total": 15,
        "success_count": 6,
        "failure_count": 9,
        "success_rate": 0.4
    }
}