A ranking function (also called variant) is an expression over program variables that are live at the loop head. A ranking function can be used to prove that a loop terminates.
A lexicographic ranking function is a sequence of expressions with the property that each expression must be positive for the loop to execute.
For example, if (e1, e2, e3) is a lexicographic ranking function, then e1 is positive and decreases, or e1 remains the same and e2 is positive and decreases, or e1 and e2 remain the same and e3 is positive and decreases. This can be extended to as many expressions as needed.
Find the lexicographic ranking function for the loop in the following program and explain why it is a valid ranking function.

Instructions:
- Make note of the starting values or constraints for the variables that are live at the loop head.
- Analyze the loop body and find a ranking function such that:
    - The first expression in the ranking function is positive and decreases.
    - If the first expression remains the same, the second expression is positive and decreases.
    - If the first and second expressions remain the same, the third expression is positive and decreases and so on.
- Output the ranking function in one code block, in ACSL syntax, in their lexicographic order. For example, if the ranking function is (v1, v2), output it as:
```
/*@
    loop variant v1;
    loop variant v2;
*/
```

Rules:
- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**