Given a program, you can find loop invariants and function contracts, which can then be used to verify the properties in the program.
A loop invariant is an expression that is true before, during and after the execution of a loop.
A function contract is a pair of expressions, (called the pre-condition and post-condition) that are true before and after the execution of the function, respectively.
The pre-condition is usually an expression over the arguments of the function, and the post-condition is usually an expression over the arguments and the return value of the function.
For the given program, find the necessary loop invariants for each loop, and the function contract for each function in the program.
Each loop is marked by a label provided as a comment at the beginning of the loop statement. A loop label is of the form Loop_X, where X is an uppercase letter, e.g., Loop_A, Loop_B, etc.
Each function is marked by a label provided as a comment at the beginning of the function definition. A function label is of the form Function_X, where X is the name of the function, e.g., Function_main, Function_foo, etc.

Instructions:
- For every function in the given program,
    - Make a note of the arguments given to the function.
    - Analyze the function body and make a note of the return value(s).
    - Output a requires clause that describes the constraints that must be satisfied at every invocation of the function.
    - Output an ensures clause that describes the constraints that are satisfied after the function execution. This clause should capture the effect of the function on the arguments, the return value, and any other global variables that are modified by the function.
    - Output the two clauses in ACSL syntax, with the corresponding labels.
- For every loop in the given program,
    - Make a note of the pre-conditions or variable assignments in the program.
    - Analyze the loop body and make a note of the loop condition. 
    - Output loop invariants that are true
    (i) before the loop execution, 
    (ii) in every iteration of the loop and 
    (iii) after the loop termination, 
    such that the loop invariants imply the post condition.
    - If a loop invariant is a conjunction, split it into its parts.
- Output all the loop invariants and function contracts in one code block, with the corresponding labels as XML tags.
Output each function contract in an XML tag of the form <Function_X>, where Function_X is the function label. Ensure each clause is in a separate line.
Output each loop invariant in an XML tag of the form <Loop_X>, where Loop_X is the loop label.
For example:
```
/*@
    <Function_main> 
        requires r1;
        ensures r2;
    </Function_main>

    <Function_foo> 
        requires r3;
        ensures r4;
    </Function_foo>

    <Loop_A>
        loop invariant i1;
        loop invariant i2;
    </Loop_A>

    <Loop_B>
        loop invariant i3;
    </Loop_B>
*/
```

Rules:
- **Do not use variables or functions that are not declared in the program.** 
- **Do not make any assumptions about functions whose definitions are not given.**
- **Do not use undefined functions in the ACSL annotations. Do not assume any logic function to be pre-defined.**
- **Do not invoke a C function in the ACSL annotations.**
- **All undefined variables contain garbage values. Do not use variables that have garbage values.**
- **Do not use keywords that are not supported in ACSL annotations for loops.**
- **Assume that all variables that are not explicitly initialized, have garbage (unknown) values.**
- **Assume that all functions that are not explicitly defined, have unknown behavior.**
- **Use the expression "\at(x, Pre)" or "\old(x)" to refer to the value of the argument 'x' before the execution of the function.**
- **Use the expression "\at(x, Post)" to refer to the value of variable x after the execution of the function.**
- **Variables defined inside the body of a function are in scope after their declaration, until the end of the function. So you cannot refer to a variable that is defined inside the body of a function, in the pre-condition or post-condition of the function.**
- **Use the expression "\at(x, LoopEntry)" to refer to the value of variable x at the beginning of the loop.**
- **Output only one block of code containing the all the annotations.**