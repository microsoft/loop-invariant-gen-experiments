A ranking function (also called variant) is an expression over program variables that are live at the loop head. A ranking function can be used to prove that a loop terminates.
A multi-phase ranking function is a sequence of ranking functions that can be used to prove termination of a loop.
In a multi-phase ranking function, the first expression decreases with successive iterations of the loop, and when it becomes non-positive, the second expression decreases and so on.
For example, if (e1, e2, e3) is a multi-phase ranking function, we begin with e1 being positive. Once e1 becomes non-positive, we move on to e2, which decreases with every loop iteration. Once e2 becomes non-positive, we move on to e3 which decreases till it becomes non-positive and the loop terminates.
Find the multi-phase ranking function for the loop in the following program and explain why it is a valid ranking function.

Instructions:
- Make note of the starting values or constraints for the variables that are live at the loop head.
- Analyze the loop body and find a ranking function such that:
    - The first expression decreases in the first iteration of the loop and continues to decrease
    - The second expression decreases once the first expression becomes zero or negative
    - so on... till the last expression decreases till the loop terminates.
- Output the ranking function in one code block, in ACSL syntax, in the order they decrease, in different lines. For example,
```
/*@
    loop variant v1;
    loop variant v2;
*/
```

Rules:
- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**