Given a program, you can find loop invariants, which can then be used to verify the properties in the program.
A loop invariant is an expression that is true before, during and after the execution of a loop.
For the given program, find the necessary loop invariants for each loop in the program.
Each loop is marked by a label provided as a comment at the beginning of the loop statement. A loop label is of the form Loop_X, where X is an uppercase letter, e.g., Loop_A, Loop_B, etc.

Instructions:
- For every loop in the given program,
    - Make a note of the pre-conditions or variable assignments in the program.
    - Analyze the loop body and make a note of the loop condition. 
    - Output loop invariants that are true
    (i) before the loop execution, 
    (ii) in every iteration of the loop and 
    (iii) after the loop termination, 
    such that the loop invariants imply the post condition.
    - If a loop invariant is a conjunction, split it into its parts.
    - Add a loop assigns clause that lists all the variables and regions of the array being assigned by the loop.
- Output all the loop invariants in one code block, with the corresponding labels as XML tags.
Output each loop invariant in an XML tag of the form <Loop_X>, where Loop_X is the loop label.
For example:
```
/*@
    <Loop_A>
        loop invariant i1;
        loop invariant i2;
    </Loop_A>

    <Loop_B>
        loop invariant i3;
    </Loop_B>
*/
```

Rules:
- **Do not use variables or functions that are not declared in the program.** 
- **Do not make any assumptions about functions whose definitions are not given.**
- **Do not use undefined functions in the ACSL annotations. Do not assume any logic function to be pre-defined.**
- **Do not invoke a C function in the ACSL annotations.**
- **All undefined variables contain garbage values. Do not use variables that have garbage values.**
- **Do not use keywords that are not supported in ACSL annotations for loops.**
- **Assume that all variables that are not explicitly initialized, have garbage (unknown) values.**
- **Assume that all functions that are not explicitly defined, have unknown behavior.**
- **Use the expression "\at(x, LoopEntry)" to refer to the value of variable x at the beginning of the loop.**
