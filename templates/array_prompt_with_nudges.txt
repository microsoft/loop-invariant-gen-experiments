{# template/array_prompt_with_nudges.txt #}
Consider the following C program:
```
{{ code }}
```

You are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.

For all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.

If a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.

If the assertion is guarded by a condition, use the guard condition in an implication.

If certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location.

To refer to the value of x before the loop, use \at(x, LoopEntry).

For all the values and array ranges that do not change in the loop, add an invariant equating them to their value before the loop.

Add a loop assigns clause listing all array ranges and variables assigned for every loop.

When a loop assigns an array,
- Invariants must specify the state of all array elements after every iteration of the loop, even if they have not changed yet.
- For the range of elements yet to be assigned by the loop, just equate them to their value before the loop.

For nested loops, use the invariants of the inner loop as hints for the outer loop.

Refrain from using the \sum, \max, \min operators.

Output the loop invariants for the loop in the program above. Let's think step by step.