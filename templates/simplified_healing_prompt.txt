{# template/simplified_prompt.txt #}

Consider the following program with loops annotated with the respective loop invariants:
```
{{ code }}
```

The verifier returns the following message.
```
{{ error }}
```
If an invariant is established, it means that the verifier was able to prove that the invariant holds before the loop.
If an invariant is preserved, it means that the verifier was able to prove that the invariant holds after the loop, assuming that it holds before the loop.

To fix the error, try the following:
If there is a syntax error, fix the syntax error.
If an invariant is preserved but not established, add a clause to the invariant to make it established.
To make an invariant established, add a clause that makes the invariant hold before the loop begins.
If an invariant is established but not preserved, add a clause to the invariant to make it preserved.
To make an invariant preserved, add a clause that makes the invariant hold after the loop ends, assuming that it holds before the loop begins.
If an invariant is neither established nor preserved, remove it or replace it with a different inductive invariant.
If neither of the above is possible, add a new loop invariant to strengthen the existing invariants.
Use \at(x, LoopEntry), instead of \at(x, Pre) to refer to the value of a variable x just before the beginning of loop execution.

There could be errors in the loop annotation(s), other than the ones mentioned in the above error message from the verifier.
Please fix all the above-mentioned errors, and provide the corrected loop invariants for the program that is sufficient to verify the post-condition in the program.
Use the ACSL syntax to specify the invariants.
