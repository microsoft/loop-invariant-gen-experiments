A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.
A ranking function can be used to prove the termination of a loop. 
A lexicographic ranking function are a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.
A multi-phase ranking function are a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.
Given a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.

Instructions:
- Make note of the starting values or constraints for the variables that are live at the loop head.
- Analyze the loop body and make a note of the loop condition and the given ranking function.
- Output loop invariants that are true 
(i) before the loop execution, 
(ii) in every iteration of the loop and 
(iii) after the loop termination, 
such that the loop invariants imply that the ranking function decreases with every iteration.
- If a loop invariant is a conjunction, split it into its parts.
- Output all the loop invariants in one code block. For example:
```
/*@ 
    loop invariant i1;
    loop invariant i2;
*/
```
Rules:
- **Do not use variables or functions that are not declared in the program.** 
- **Do not make any assumptions about functions whose definitions are not given.**
- **Assume all uninitialized variables to contain garbage values.**
- **Assume non-deterministic functions to return any value permitted by its return type.**
- **Do not use keywords that are not supported in ACSL annotations for loops.**
- **Use the expression "\at(x, LoopEntry)" to refer to the value of a variable "x" at the beginning of the loop.**