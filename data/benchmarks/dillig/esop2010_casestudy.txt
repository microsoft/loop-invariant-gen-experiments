/*
 * Initializes all elements of a to a specified constant c.
 */
void init(int* a, int c, int size)
{
  int i;
  for(i=0; i<size; i++) 
  {
	a[i] = c;
  }

  for(i=0; i<size; i++)
  {
	static_assert(a[i] == c);
  }
}

=======================================

/*
 * Initializes all elements of a to a linear function of iteration number.
 */
void init_non_constant(int* a, int c, int size)
{
  int i;
  for(i=0; i<size; i++) 
  {
	a[i] =2*i+c;
  }

  for(i=0; i<size; i++)
  {
	static_assert(a[i] ==2*i+c);
  }
}

====================================


/*
 * Initializes num_to_init number of elements of a to 0.
 */
void init_partial(int* a, int size, int num_to_init)
{
  assert(num_to_init <= size);
  int i;
  for(i=0; i<num_to_init; i++) 
  {
	a[i] = 0;
  }

  for(i=0; i<num_to_init; i++)
  {
	static_assert(a[i] == 0);
  }
}

===================================

/*
 * Initializes num_to_init number of elements of a to 0, 
 * but asserts all elements up to size are initialized to 0.
 */
void init_partial_buggy(int* a, int size, int num_to_init)
{
  assert(num_to_init <= size);
  int i;
  for(i=0; i<num_to_init; i++) 
  {
	a[i] = 0;
  }

  for(i=0; i<size; i++)
  {
	// should fail
	static_assert(a[i] == 0);
  }
}
============================

/*
 * Initializes all even elements of a to 1.
 */
void init_even(int* a,  int size)
{
  int i;
  for(i=0; i<size; i+=2) 
  {
	a[i] = 1;
  }

  for(i=0; i<size; i+=2)
  {
	static_assert(a[i] == 1);
  }
}

===============================

/*
 * Initializes all even elements of a to 1,
 * but asserts all odd elements are 1.
 */
void init_even_buggy(int* a,  int size)
{
  int i;
  for(i=0; i<size; i+=2) 
  {
	a[i] = 1;
  }

  for(i=1; i<size; i+=2)
  {
	// should fail
	static_assert(a[i] == 1);
  }
}

==============================
/*
 * Initializes a 2d array to 0 and asserts that 
 * any element in it is 0
 */
void _2Darray_init(int** a, int n, int m, int k, int l)
{
   int i;
   int j;
   for( i=0; i<n; i++)
   {
       for(j=0; j<m; j++)
           a[i][j] = 0;
   }
   if(k>=0 && k<n && l>=0 && l<m)
     static_assert(a[k][l] == 0);

} 

============================


/*
 * Copies elements of b to a.
 */
void copy(int* a, int*b,  int size)
{
  int i;
  for(i=0; i<size; i++) 
  {
	a[i] = b[i];
  }

  for(i=0; i<size; i++)
  {
	static_assert(a[i] == b[i]);
  }
}

===============================

/*
 * Copies num_to_copy number of elements of b to a.
 */
void copy_partial(int* a, int*b,  int size, int num_to_copy)
{
  assert(num_to_copy <= size);
  int i;
  for(i=0; i<num_to_copy; i++) 
  {
	a[i] = b[i];
  }

  for(i=0; i<num_to_copy; i++)
  {
	static_assert(a[i] == b[i]);
  }

}

================================

/*
 * Copies odd numbered elements of b to a contiguously.
 */
void copy_odd(int* a, int*b,  int size)
{
  int i;
  int j;
  for(i=1, j=0; i<size; i+=2, j++) 
  {
	a[j] = b[i];
  }

  for(i=1, j=0; i<size; i+=2, j++)
  {
	static_assert(a[j] == b[2*j+1]);
  }
}
=========================

/*
 * Copies odd numbered elements of b to a contiguously,
 * but asserts all of their elements are equal.
 */
void copy_odd_buggy(int* a, int*b,  int size)
{
  int i;
  int j;
  for(i=1, j=0; i<size; i+=2, j++) 
  {
	a[j] = b[i];
  }

  for(i=0; i<size; i++)
  {
	// should fail
	static_assert(a[i] == b[i]);
  }
}

===============================
/*
 * Reverses array a and checks it is reversed for 
 * any k between 0 and size-1.
 */
void reverse(int* a, int size, int k)
{	
	int i;
	int* a_copy = malloc(sizeof(int)*size);
	for(i=0; i<size; i++)
	{
		a_copy[i] = a[i];
	}
	
	for(i=0; i<size; i++)
	{
		a[i] = a_copy[size-1-i];
	}
	
	if(k>=0 && k<size)
	{
		static_assert(a[k] == a_copy[size-1-k]);
	}

	free(a_copy);	
}

===========================

/*
 * Reverses array a, but has an of--by-one error
 * in checking it is reversed.
 */
void reverse_buggy(int* a, int size, int k)
{	
	int i;
	int* a_copy = malloc(sizeof(int)*size);
	for(i=0; i<size; i++)
	{
		a_copy[i] = a[i];
	}
	
	for(i=0; i<size; i++)
	{
		a[i] = a_copy[size-1-i];
	}
	
	if(k>=0 && k<=size)
	{
		// should fail; the assertion does not hold if k==size.
		static_assert(a[k] == a_copy[size-1-k]);
	}

	free(a_copy);	
}

==================================

/*
 * Swaps a and b and checks they are swapped by first making 
 * copies of the original a and b.
 */

void swap(int* a, int* b, int size)
{
	int i;
	for(i=0; i<size; i++)
	{
		int t = a[i];
		a[i] = b[i];
		b[i] = t;
	}
}

void check_swap(int size, int* a, int* b)
{
	int i;
	int* a_copy = malloc(sizeof(int)*size);
	

	for(i=0; i<size; i++)
	{
		a_copy[i] = a[i];
	}

	int* b_copy = malloc(sizeof(int)*size);
	for(i=0; i<size; i++)
	{
		b_copy[i] = b[i];
	}
	
	swap(a, b, size);	


	for(i=0; i<size; i++)
	{
		static_assert(a[i] == b_copy[i]);
		static_assert(b[i] == a_copy[i]);
	}
	
	free(a_copy);
	free(b_copy);
}

==================================

/*
 * Buggy version of swap; the assertion in check_swap should fail.
 */

void swap_buggy(int* a, int* b, int size)
{
	int i;
	for(i=0; i<size; i++)
	{
		int t = a[i];
		b[i] = a[i];
		a[i] = t;
	}
}

void check_swap(int size, int* a, int* b)
{
	int i;
	int* a_copy = malloc(sizeof(int)*size);
	

	for(i=0; i<size; i++)
	{
		a_copy[i] = a[i];
	}

	int* b_copy = malloc(sizeof(int)*size);
	for(i=0; i<size; i++)
	{
		b_copy[i] = b[i];
	}
	
	swap(a, b, size);	


	for(i=0; i<size; i++)
	{
		static_assert(a[i] == b_copy[i]);
		static_assert(b[i] == a_copy[i]);
	}
	
	free(a_copy);
	free(b_copy);
}

====================


/*
 * Swaps a and b twice and asserts that 
 * a is same as a_copy and b is same as b_copy.
 */

void swap(int* a, int* b, int size)
{
	int i;
	for(i=0; i<size; i++)
	{
		int t = a[i];
		a[i] = b[i];
		b[i] = t;
	}
}

void double_swap(int size, int* a, int* b)
{
	int i;
	int* a_copy = malloc(sizeof(int)*size);
	

	for(i=0; i<size; i++)
	{
		a_copy[i] = a[i];
	}

	int* b_copy = malloc(sizeof(int)*size);
	for(i=0; i<size; i++)
	{
		b_copy[i] = b[i];
	}
	
	swap(a, b, size);
	swap(a, b, size);	


	for(i=0; i<size; i++)
	{
		static_assert(a[i] == a_copy[i]);
		static_assert(b[i] == b_copy[i]);
	}
	
	free(a_copy);
	free(b_copy);
}

=============================
/*
 * Copies source into dest and checks that dest has 
 * the same contents as source.
 */

void strcpy(char* dest, char* source)
{
	for(; *source!='\0'; source++, dest++)
	{
		*dest = *source;
	}
	
}
void check_strcpy(char* str1, char* str2)
{
	strcpy(str1, str2);

	for(; *str2!='\0'; str1++, str2++) {
		static_assert(*str1 == *str2);
	}
}

=======================

/*
 * Checks strlen returns buffer_size(str)-1. 
 * It's not buffer_size(str) because buffer_size
 * includes the last '\0'.
 */
unsigned int strlen(char* str)
{
	int i=0;
	while(str[i] != '\0')
	{
		i++;
	}
	return i;
	
}
void check_strlen(char* str)
{
	unsigned int size = strlen(str);
	static_assert(size == buffer_size(str)-1);
}

======================

/*
 * Buggy version of strlen that has an off-by-one error.
 */
unsigned int strlen_buggy(char* str)
{
	int i=0;
	while(str[i++]=='\0');
	return i;
	
}
void check_strlen(char* str)
{
	unsigned int size = strlen_buggy(str);
	static_assert(size == buffer_size(str)-1);
}

========================

void memcpy(void*_dest, void* _source, int bytes)
{
	char* dest = (char*) _dest;
	char* source = (char*) _source;
	int i;
	for(i=0; i<bytes; i++) 
	{
		dest[i] = source[i];
	}
}

void check_memcpy(char* source, int size)
{
	char* buf = malloc(sizeof(char)*size);
	memcpy(buf, source, size);
	int i;
	for(i=0; i<size; i++)
	{
		static_assert(buf[i] == source[i]);
	}	
}

==========================

/*
 * Looks for a certain element in array and sets
 * pos to the index of this element. 
 */
void find(int* a, int size, int elem)
{
	int i;
	int pos = -1;
	for(i=0; i<size; i++)
	{
		if(a[i] == elem) 
		{
			pos = i;
			break;
		}
	}
	if(pos!= -1) static_assert(a[pos] == elem);	


}

============================

void find_first_nonnull(int* a, int size)
{
	int pos = -1;
	int i;
	for(i=0; i<size; i++)
	{
		if(a[i] != NULL) {
			pos = i;
			break;
		}
	}
	
	if(pos !=-1) static_assert(a[i] !=NULL);
}

==============================

void array_append(int* a,  int size_a, int* b, int size_b, int k)
{
	int i = size_a;
	for(; i < size_a+size_b; i++)
	{
		a[i] = b[i-size_a];
	}
	if(k >=size_a && k < size_a+size_b)
		static_assert(a[k] == b[k-size_a]);
}

=============================

void merge_interleave(int* res, int* a, int*b, int size)
{
	int i;
	for(i=0; i < size; i+=2)
	{
		res[i] = a[i];
	}
	for(i=1; i < size; i+=2)
	{
		res[i] = b[i];
	}
	int k;
	if( k>=0 && k<size) {
		if(k%2 == 0) static_assert(res[k] == a[k]);
		else static_assert(res[k] == b[k]);
	}
}

==============================

void merge_interleave_buggy(int* res, int* a, int*b, int size)
{
	int i;
	for(i=0; i < size; i+=2)
	{
		res[i] = a[i];
	}
	for(i=1; i < size; i+=2)
	{
		res[i] = b[i];
	}
	int k;
	if( k>=0 && k<size) {
		if(k%2 == 1) static_assert(res[k] == a[k]);
		else static_assert(res[k] == b[k]);
	}
}



==============================

void alloc_fixed_size(int** a, int size, int n, int k)
{
   int i;
   for( i=0; i<n; i++){
       a[i] = malloc(sizeof(int)*size);
   }
   if(n>=0 && k>=0 && k<n) {
       buffer_safe(a[k], size-1);
   }  
}

==============================


void alloc_fixed_size_buggy(int** a, int size, int n, int k)
{
   int i;
   for( i=0; i<n; i++){
       a[i] = malloc(sizeof(int)*size);
   }
   if(n>=0 && k>=0 && k<n) {
       buffer_safe(a[k], size-1);
   }     
}

==============================

void alloc_nonfixed_size(int** a, int* b, int n, int k)
{
   int i;
   for( i=0; i<n; i++){
       a[i] = malloc(sizeof(int)*b[i]);
   }
   if(n>=0 && k>=0 && k<n) {
       buffer_safe(a[k], b[k]-1);
   }
}



