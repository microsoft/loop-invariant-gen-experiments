{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant a == x + y || a == x + y + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: flag == 0 || flag == 1;\nloop invariant i4: a == x + y || a == x + y + 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is preserved but not established.\nAssertion a % 2 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\n\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a % 2 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a >= 0;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion a % 2 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a >= 0;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion a % 2 == 1: Unproven\n"
            },
            {
                "invariants": "/*@\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= x + y - 1;\n  loop invariant a <= x + y + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a >= x + y - 1;\nloop invariant i4: a <= x + y + 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is inductive.\nAssertion a % 2 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\n\nloop invariant i4: a <= x + y + 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nAssertion a % 2 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant a == x + y || a == x + y - 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: a == x + y || a == x + y - 1;\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nAssertion a % 2 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\n\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a % 2 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (a == x + y) || (a == x + y + 1);\n    loop invariant (x >= 1) && (y >= 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: (a == x + y) || (a == x + y + 1);\nloop invariant i2: (x >= 1) && (y >= 1);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nAssertion a % 2 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\n\nloop invariant i2: (x >= 1) && (y >= 1);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion a % 2 == 1: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- int flag = unknown1();\n- int x = 1;\n- int y = 1;\n- int a;\n\nThe loop condition is unknown1().\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution:\n- x and y are both initialized to 1.\n\n2. In every iteration of the loop:\n- a is always the sum of x and y (if flag is true) or the sum of x and y plus 1 (if flag is false).\n- a is always odd after updating y (when a%2==1) or always even after updating x (when a%2==0).\n\n3. After the loop termination:\n- a is always odd when flag is true, because it has incremented by 1.\n\nWith these in mind, the loop invariants are:\n\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant a == x + y || a == x + y + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `flag` is assigned the value from the function `unknown1()`.\n2. `x` and `y` are both initialized to 1.\n3. `a` is assigned the value 0 if `flag` is true, or 1 if `flag` is false.\n\nNow, let's analyze the loop body and the loop condition:\n\n1. The loop condition is `unknown1()`, so we do not have any information about the number of iterations.\n2. In the loop body, `a` is updated based on the value of `flag` and the current values of `x` and `y`. The values of `x` and `y` are also updated based on the value of `a`.\n\nNow let's think about the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n1. Before the loop, `x` and `y` are both initialized to 1. This is true for all iterations since both `x` and `y` are incremented at least once in each iteration.\n\n2. Since the values of `x` and `y` are incremented in the loop body, their values are always positive.\n\n3. Since `a` is updated based on the values of `x` and `y`, it is also always positive.\n\nTaking all of these invariants into account, the loop invariants for the given program are as follows:\n\n```\n/*@ \n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n1. `int flag = unknown1();`\n2. `int x = 1;`\n3. `int y = 1;`\n4. `int a;`\n5. In the loop, `a`, `x`, and `y` are updated depending on the value of `flag` and the condition `a%2==1`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `unknown1()`. Since the definition of `unknown1()` is not given, we cannot make any assumptions about it.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition. \n\n```\n/*@\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= x + y - 1;\n  loop invariant a <= x + y + 1;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They help to imply the post condition `a%2 == 1`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- `int flag = unknown1();`\n- `int x = 1;`\n- `int y = 1;`\n- `int a;`\n\nNow, let's analyze the loop body and make a note of the loop condition.\n- Loop condition: `while(unknown1())`\n\nNow let's find the loop invariants:\n- The loop invariant should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n- The post-condition we want to verify is `a%2==1`.\n\nGiven the above information, here are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant a == x + y || a == x + y - 1;\n*/\n```\n\nThese loop invariants hold before the loop execution (since x and y are initialized to 1), during every iteration of the loop, and after the loop termination. Moreover, they imply the post condition `a%2==1`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions or variable assignments in the program:\n- flag is assigned to the value of unknown1() function call.\n- x and y are both initialized to 1.\n- a is assigned based on the value of flag: if flag is true, a = 0, else a = 1.\n\nNow, let's analyze the loop condition and body:\n- The loop condition is unknown1() function call.\n- In the loop, a, x, and y are updated based on the value of flag and the result of a%2.\n\nWe can now output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant (a == x + y) || (a == x + y + 1);\n    loop invariant (x >= 1) && (y >= 1);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant a == x + y || a == x + y + 1;\n*/",
            "/*@ \n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= 0;\n*/",
            "/*@\n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant a >= x + y - 1;\n  loop invariant a <= x + y + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant a == x + y || a == x + y - 1;\n*/",
            "/*@ \n    loop invariant (a == x + y) || (a == x + y + 1);\n    loop invariant (x >= 1) && (y >= 1);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\nloop invariant i3: flag == 0 || flag == 1;\nloop invariant i4: a == x + y || a == x + y + 1;\nloop invariant i5: x >= 1;\nloop invariant i6: y >= 1;\nloop invariant i7: a >= 0;\nloop invariant i8: x >= 1;\nloop invariant i9: y >= 1;\nloop invariant i10: a >= x + y - 1;\nloop invariant i11: a <= x + y + 1;\nloop invariant i12: x >= 1;\nloop invariant i13: y >= 1;\nloop invariant i14: a == x + y || a == x + y - 1;\nloop invariant i15: (a == x + y) || (a == x + y + 1);\nloop invariant i16: (x >= 1) && (y >= 1);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is preserved but not established.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nAssertion a % 2 == 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: y >= 1;\n\n\nloop invariant i5: x >= 1;\nloop invariant i6: y >= 1;\nloop invariant i7: a >= 0;\nloop invariant i8: x >= 1;\nloop invariant i9: y >= 1;\n\nloop invariant i11: a <= x + y + 1;\nloop invariant i12: x >= 1;\nloop invariant i13: y >= 1;\n\n\nloop invariant i16: (x >= 1) && (y >= 1);\n*/\nwhile(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;//@ assert(a%2==1);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i16 is inductive.\nAssertion a % 2 == 1: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 191,
        "success_rate": 0.5026178010471204
    }
}