{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * i;\nloop invariant p == leader_len + 2 * i;\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * i on line 31: Unknown\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant 0 <= p on line 33: Partially proven\nInvariant p + 1 < bufsize_0 on line 34: Unknown\nPost-condition 0 <= p on line 37: Partially proven\nPost-condition p + 1 < bufsize_0 on line 39: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\n\nloop invariant p == leader_len + 2 * i;\nloop invariant 0 <= p;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant 0 <= p on line 33: Partially proven\nPost-condition 0 <= p on line 37: Valid\nPost-condition p + 1 < bufsize_0 on line 39: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p == leader_len + 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant 0 <= p <= bufsize_0 on line 31: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 32: Partially proven\nInvariant p == leader_len + 2 * i on line 33: Partially proven\nPost-condition 0 <= p on line 36: Valid\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p == leader_len + 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant 0 <= p <= bufsize_0 on line 31: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 32: Partially proven\nInvariant p == leader_len + 2 * i on line 33: Partially proven\nPost-condition 0 <= p on line 36: Valid\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant p == leader_len + 2 * i;\nloop invariant bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 33: Partially proven\nPost-condition 0 <= p on line 36: Unknown\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2;\nloop invariant p == leader_len + 2 * i;\nloop invariant bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 33: Partially proven\nPost-condition 0 <= p on line 36: Unknown\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant p == leader_len + 2*i;\nloop invariant bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * i on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 33: Partially proven\nPost-condition 0 <= p on line 36: Unknown\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2*i;\nloop invariant p == leader_len + 2*i;\nloop invariant bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * i on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 33: Partially proven\nPost-condition 0 <= p on line 36: Unknown\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p < bufsize_0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p == leader_len + 2 * i;\nloop invariant 0 <= p < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant 0 <= p < bufsize_0 on line 33: Unknown\nPost-condition 0 <= p on line 36: Partially proven\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant p == leader_len + 2 * i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nPost-condition 0 <= p on line 36: Unknown\nPost-condition p + 1 < bufsize_0 on line 38: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p < bufsize_0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2*i;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p < bufsize_0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * i;\nloop invariant p == leader_len + 2 * i;\nloop invariant 0 <= p;\nloop invariant p + 1 < bufsize_0;\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 == bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p == leader_len + 2*i;\nloop invariant 0 <= p < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "checker_output": false,
        "checker_message": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * i on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant 0 <= p on line 33: Partially proven\nInvariant p + 1 < bufsize_0 on line 34: Unknown\nInvariant 0 <= p <= bufsize_0 on line 35: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 36: Partially proven\nInvariant bufsize >= 2 on line 37: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 38: Partially proven\nInvariant bufsize >= 2 * i on line 39: Partially proven\nInvariant p == leader_len + 2 * i on line 40: Partially proven\nInvariant 0 <= p < bufsize_0 on line 41: Partially proven\nPost-condition 0 <= p on line 44: Partially proven\nPost-condition p + 1 < bufsize_0 on line 46: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant 0 <= i <= ielen;\nloop invariant bufsize >= 2 * i;\nloop invariant p == leader_len + 2 * i;\nloop invariant 0 <= p;\n\nloop invariant 0 <= p <= bufsize_0;\nloop invariant bufsize >= 2 * (ielen - i);\nloop invariant bufsize >= 2;\nloop invariant bufsize_0 == bufsize + leader_len;\nloop invariant bufsize >= 2*i;\nloop invariant p == leader_len + 2*i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 0 <= i <= ielen on line 30: Partially proven\nInvariant bufsize >= 2 * i on line 31: Partially proven\nInvariant p == leader_len + 2 * i on line 32: Partially proven\nInvariant 0 <= p on line 33: Partially proven\nInvariant 0 <= p <= bufsize_0 on line 35: Partially proven\nInvariant bufsize >= 2 * (ielen - i) on line 36: Partially proven\nInvariant bufsize >= 2 on line 37: Partially proven\nInvariant bufsize_0 == bufsize + leader_len on line 38: Partially proven\nInvariant bufsize >= 2 * i on line 39: Partially proven\nInvariant p == leader_len + 2 * i on line 40: Partially proven\nPost-condition 0 <= p on line 44: Valid\nPost-condition p + 1 < bufsize_0 on line 46: Unknown\n"
    },
    "stats": {
        "success": [
            1,
            7,
            13,
            14,
            20,
            26,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            46,
            48,
            49,
            50,
            51,
            54,
            59
        ],
        "failure": [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            27,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            44,
            45,
            47,
            52,
            53,
            55,
            56,
            57,
            58,
            60
        ],
        "skipped": [],
        "total": 61,
        "success_rate": 0.36065573770491804
    }
}