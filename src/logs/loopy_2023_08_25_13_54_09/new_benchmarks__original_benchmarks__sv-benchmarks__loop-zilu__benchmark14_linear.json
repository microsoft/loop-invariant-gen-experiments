{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  while (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i <= \\at(i, Pre);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\nloop invariant i2: i <= \\at(i, Pre);\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable i. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\nloop invariant i2: i >= 0;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= 200;\n    loop invariant \\forall integer k; 0 <= k < i ==> k >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\nloop invariant i2: \\forall integer k; 0 <= k < i ==> k >= 0;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\nloop invariant i2: i >= 0;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  while (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, note the pre-conditions or variable assignments in the program:\n\n- i is assigned an unknown integer value.\n- The program checks that i is between 0 and 200 (inclusive) and continues only if this condition is true.\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is (i > 0).\n- In the loop body, i is decremented by 1 in each iteration.\n\nNow, we can output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i <= \\at(i, Pre);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int i = unknown_int();`\n- `if (!(i>=0 && i<=200)) return 0;` (This is equivalent to `assume(i >= 0 && i <= 200);`)\n\nAnalyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i > 0`.\n- Inside the loop, the variable i is decremented by 1 in each iteration (`i--;`).\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we know that `i >= 0 && i <= 200`.\n2. In every iteration of the loop, `i` is decreasing by 1 and remains non-negative.\n3. After the loop termination, `i` must be equal to 0.\n\nConsidering these points, the loop invariants are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 200;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. i is assigned an unknown integer value.\n2. i must be in the range [0, 200] for the program to continue executing.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is i > 0.\n2. Inside the loop, i is decremented by 1 in each iteration.\n\nNow, let's output the loop invariants that are true:\n1. Before the loop execution,\n2. In every iteration of the loop, and\n3. After the loop termination,\nsuch that the loop invariants imply the post condition.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- i is assigned a value from unknown_int(), which could be any integer.\n- There is an assumption that i is between 0 and 200, inclusive.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `i > 0`.\n- Inside the loop, i is decremented by 1 in each iteration.\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `int i = unknown_int();`\n- `if (!(i>=0 && i<=200)) return 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: `i>0`\n- Loop body: `i--;`\n\nNow, let's derive the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments in the program:\n- `int i = unknown_int();`\n- `if (!(i>=0 && i<=200)) return 0;` (this is equivalent to the assume statement `assume(i>=0 && i<=200);`)\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- `while (i>0) { i--; }`\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- i is assigned a value by unknown_int() function.\n- We have a guard condition that i must be between 0 and 200, inclusive.\n\nLoop condition:\n- The loop runs while i > 0.\n\nNow let's find the loop invariants:\n\nBefore the loop execution:\n1. i is between 0 and 200.\n\nIn every iteration of the loop:\n2. i is between 0 and 200.\n3. i is non-increasing.\n\nAfter the loop termination:\n4. i is between 0 and 200.\n5. i must be 0 since the loop condition is i > 0.\n\nThe loop invariants are:\n\n```\n/*@\n    loop invariant 0 <= i <= 200;\n    loop invariant \\forall integer k; 0 <= k < i ==> k >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions or variable assignments:\n- i is assigned a value from unknown_int() function.\n- A pre-condition for the program is that i should be between 0 and 200, inclusive.\n\nLoop condition:\n- The loop continues as long as i > 0.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n*/\n```\n\nThis loop invariant states that i always remains between 0 and 200, inclusive. This is true before the loop execution because of the pre-condition, it holds in every iteration of the loop since i is decremented, and after the loop termination i must be 0, which is within the range. This loop invariant implies the post condition i >= 0."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n- `i` is assigned a value with `unknown_int()`.\n- `i` is restricted to the range [0, 200] using the `assume` macro.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i > 0`.\n- In the loop body, `i` is decremented by 1 in each iteration.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution, since `i` is restricted to the range [0, 200],\n(ii) in every iteration of the loop, as `i` is always decremented by 1 and never incremented, and\n(iii) after the loop termination, as the loop terminates when `i` is no longer greater than 0, which means `i` must be 0, satisfying the post-condition `i >= 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int i = unknown_int();` (i is assigned an unknown integer value)\n- `if (!(i>=0 && i<=200)) return 0;` (i must be within the range 0 to 200, inclusive)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i > 0`.\n\nFinally, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= 200;\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution (due to the pre-condition),\n(ii) in every iteration of the loop (because i only decreases by 1 in each iteration), and\n(iii) after the loop termination (when i becomes 0)."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i <= \\at(i, Pre);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 200;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n */",
            "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
            "/*@\n    loop invariant 0 <= i <= 200;\n    loop invariant \\forall integer k; 0 <= k < i ==> k >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n    loop invariant i >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 200;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\nloop invariant i2: i <= \\at(i, Pre);\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 200;\nloop invariant i5: 0 <= i <= 200;\nloop invariant i6: 0 <= i <= 200;\nloop invariant i7: i >= 0;\nloop invariant i8: 0 <= i <= 200;\nloop invariant i9: 0 <= i <= 200;\nloop invariant i10: 0 <= i <= 200;\nloop invariant i11: \\forall integer k; 0 <= k < i ==> k >= 0;\nloop invariant i12: 0 <= i <= 200;\nloop invariant i13: 0 <= i <= 200;\nloop invariant i14: i >= 0;\nloop invariant i15: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 13: unbound logic variable i. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 200;\n\nloop invariant i3: i >= 0;\nloop invariant i4: i <= 200;\nloop invariant i5: 0 <= i <= 200;\nloop invariant i6: 0 <= i <= 200;\nloop invariant i7: i >= 0;\nloop invariant i8: 0 <= i <= 200;\nloop invariant i9: 0 <= i <= 200;\nloop invariant i10: 0 <= i <= 200;\nloop invariant i11: \\forall integer k; 0 <= k < i ==> k >= 0;\nloop invariant i12: 0 <= i <= 200;\nloop invariant i13: 0 <= i <= 200;\nloop invariant i14: i >= 0;\nloop invariant i15: 0 <= i <= 200;\n*/\nwhile (i>0) {\n    i--;\n  }\n  {;//@ assert(i>=0);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nAssertion i >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            319,
            320,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            339,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            323,
            326,
            327,
            329,
            331,
            338,
            341,
            348
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 352,
        "success_rate": 0.6306818181818182
    }
}