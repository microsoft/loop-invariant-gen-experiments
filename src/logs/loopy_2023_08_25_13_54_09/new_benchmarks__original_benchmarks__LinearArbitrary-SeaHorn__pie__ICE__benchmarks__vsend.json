{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/vsend.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  while (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant 0 <= c <= 255;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: 0 <= c <= 255;\nloop invariant i5: c == in[idx_in];\nloop invariant i6: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is neither established nor preserved.\nloop invariant i6 is inductive.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: 0 <= c <= 255;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant (0 <= c - '0' < 10) ==> (i == \\at(i, Pre) * 10 + (c - '0'));\n    loop invariant (c < '0' || c > '9') ==> (i == \\at(i, Pre));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: (0 <= c - '0' < 10) ==> (i == \\at(i, Pre) * 10 + (c - '0'));\nloop invariant i5: (c < '0' || c > '9') ==> (i == \\at(i, Pre));\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 19: unbound logic variable i. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\nloop invariant i4: c == in[idx_in];\nloop invariant i5: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i6: i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is neither established nor preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\n\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= idx_in <= 10;\n  loop invariant s == in;\n  loop invariant 0 <= i;\n  loop invariant c == in[idx_in];\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> i >= (i - (in[k] - '0')) * 10;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: 0 <= i;\nloop invariant i4: c == in[idx_in];\nloop invariant i5: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i6: \\forall integer k; 0 <= k < idx_in ==> i >= (i - (in[k] - '0')) * 10;\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is established but not preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: 0 <= i;\n\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant idx_in >= 0 ==> in[idx_in] == c;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: idx_in >= 0 ==> in[idx_in] == c;\nloop invariant i5: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant 0 <= i;\n    loop invariant i <= UINT_MAX/10 || ('0' <= c && c <= '9') ==> idx_in == 10;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= UINT_MAX/10 || ('0' <= c && c <= '9') ==> idx_in == 10;\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 19: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: 0 <= i;\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant idx_in == 0 ==> i == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\nloop invariant i4: c == in[idx_in];\nloop invariant i5: idx_in == 0 ==> i == 0;\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: i >= 0;\nloop invariant i3: s == in;\nloop invariant i4: c == in[idx_in];\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: i >= 0;\nloop invariant i3: s == in;\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: c == in[idx_in];\nloop invariant i5: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\nloop invariant i4: c == in[idx_in];\nloop invariant i5: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i6: i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is neither established nor preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: 0 <= i;\nloop invariant i3: s == in;\n\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  while (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `in` is an array of 11 characters, with the last element being null-terminated (in[10] = 0).\n2. `idx_in` is an integer initially set to 0.\n3. `s` is a pointer to the first element of the `in` array.\n4. `i` and `j` are unsigned integers.\n5. `c` is an unsigned char, initially set to the first element of the `in` array.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `('0' <= c) && (c <= '9')`.\n\nBased on this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant 0 <= c <= 255;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n1. in[10] is assigned the value 0.\n2. idx_in is initialized to 0.\n3. s is assigned the address of in.\n4. i is initialized to 0.\n5. c is assigned the value of in[idx_in].\n\nNow, let's analyze the loop body and make a note of the loop condition:\nThe loop condition is ('0' <= c) && (c <= '9').\n\nFinally, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant (0 <= c - '0' < 10) ==> (i == \\at(i, Pre) * 10 + (c - '0'));\n    loop invariant (c < '0' || c > '9') ==> (i == \\at(i, Pre));\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. in[10] = 0\n2. idx_in = 0\n3. s = in\n4. i = 0\n5. c = in[idx_in]\n\nLoop condition: ('0' <= c) && (c <= '9')\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop and\n(iii) after the loop termination, and they imply the post-condition (i >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- in[10] = 0;\n- idx_in = 0;\n- s = in;\n- i = 0;\n- c = in[idx_in];\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: ('0' <= c) && (c <= '9')\n\nNow, let's find the necessary loop invariants for the while loop:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\n\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n  loop invariant 0 <= idx_in <= 10;\n  loop invariant s == in;\n  loop invariant 0 <= i;\n  loop invariant c == in[idx_in];\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> i >= (i - (in[k] - '0')) * 10;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- in[10] = 0\n- idx_in = 0\n- s = in\n- i = 0\n- c = in[idx_in]\n\nLoop condition:\n- ('0' <= c) && (c <= '9')\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant idx_in >= 0 ==> in[idx_in] == c;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition (i >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `char in[11]` - an array of 11 characters\n2. `char *s` - a pointer to a character\n3. `unsigned char c` - an unsigned character\n4. `unsigned int i, j` - two unsigned integers\n5. `int idx_in` - an integer\n6. `in[10] = 0`\n7. `idx_in = 0`\n8. `s = in`\n9. `i = 0`\n10. `c = in[idx_in]`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is `('0' <= c) && (c <= '9')`.\n\nNow we can identify the loop invariants:\n\n1. Before the loop execution\n2. In every iteration of the loop\n3. After the loop termination\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant 0 <= i;\n    loop invariant i <= UINT_MAX/10 || ('0' <= c && c <= '9') ==> idx_in == 10;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the pre-conditions or variable assignments in the program:\n\n1. in[10] = 0;\n2. idx_in = 0;\n3. s = in;\n4. i = 0;\n5. c = in[idx_in];\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: ('0' <= c) && (c <= '9')\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@\n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant idx_in == 0 ==> i == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make note of the variable assignments and pre-conditions in the program:\n- `in[10] = 0` sets the last element of the in array to the null character.\n- `idx_in = 0` initializes the index variable for the in array.\n- `s = in` makes s point to the same memory as in.\n- `i = 0` initializes the integer i.\n- `c = in[idx_in]` initializes c with the first character of the in array.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `('0' <= c) && (c <= '9')`, meaning that the loop executes only when c is a digit character.\n\nNow, let's find the loop invariants:\n- Before the loop execution and in every iteration of the loop:\n  - idx_in is non-negative and less than or equal to 10.\n  - i is non-negative.\n  - s points to the same memory as in.\n  - c is equal to the character at in[idx_in].\n- After the loop termination:\n  - idx_in is non-negative and less than or equal to 10.\n  - i is non-negative.\n  - s points to the same memory as in.\n\nPutting it all together, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- in[10] = 0;\n- idx_in = 0;\n- s = in;\n- i = 0;\n- c = in[idx_in];\n\nLoop condition:\n- ('0' <= c) && (c <= '9')\n\nPost-condition:\n- i >= 0\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n1. `in` is an array of 11 characters.\n2. `in[10]` is assigned the value 0.\n3. `idx_in` is initialized to 0.\n4. `s` is assigned the address of `in`.\n5. `i` is initialized to 0.\n6. `c` is assigned the value of `in[idx_in]` (i.e., `in[0]`).\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\n- The loop condition is `('0' <= c) && (c <= '9')`.\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant 0 <= c <= 255;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant (0 <= c - '0' < 10) ==> (i == \\at(i, Pre) * 10 + (c - '0'));\n    loop invariant (c < '0' || c > '9') ==> (i == \\at(i, Pre));\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/",
            "/*@ \n  loop invariant 0 <= idx_in <= 10;\n  loop invariant s == in;\n  loop invariant 0 <= i;\n  loop invariant c == in[idx_in];\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n  loop invariant \\forall integer k; 0 <= k < idx_in ==> i >= (i - (in[k] - '0')) * 10;\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant idx_in >= 0 ==> in[idx_in] == c;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant 0 <= i;\n    loop invariant i <= UINT_MAX/10 || ('0' <= c && c <= '9') ==> idx_in == 10;\n*/",
            "/*@\n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant idx_in == 0 ==> i == 0;\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant s == in;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: 0 <= c <= 255;\nloop invariant i5: c == in[idx_in];\nloop invariant i6: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i7: 0 <= idx_in <= 10;\nloop invariant i8: s == in;\nloop invariant i9: i >= 0;\nloop invariant i10: (0 <= c - '0' < 10) ==> (i == \\at(i, Pre) * 10 + (c - '0'));\nloop invariant i11: (c < '0' || c > '9') ==> (i == \\at(i, Pre));\nloop invariant i12: 0 <= idx_in <= 10;\nloop invariant i13: 0 <= i;\nloop invariant i14: s == in;\nloop invariant i15: c == in[idx_in];\nloop invariant i16: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i17: i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\nloop invariant i18: 0 <= idx_in <= 10;\nloop invariant i19: s == in;\nloop invariant i20: 0 <= i;\nloop invariant i21: c == in[idx_in];\nloop invariant i22: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i23: \\forall integer k; 0 <= k < idx_in ==> i >= (i - (in[k] - '0')) * 10;\nloop invariant i24: 0 <= idx_in <= 10;\nloop invariant i25: s == in;\nloop invariant i26: i >= 0;\nloop invariant i27: idx_in >= 0 ==> in[idx_in] == c;\nloop invariant i28: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i29: 0 <= idx_in <= 10;\nloop invariant i30: s == in;\nloop invariant i31: 0 <= i;\nloop invariant i32: i <= UINT_MAX/10 || ('0' <= c && c <= '9') ==> idx_in == 10;\nloop invariant i33: 0 <= idx_in <= 10;\nloop invariant i34: 0 <= i;\nloop invariant i35: s == in;\nloop invariant i36: c == in[idx_in];\nloop invariant i37: idx_in == 0 ==> i == 0;\nloop invariant i38: 0 <= idx_in <= 10;\nloop invariant i39: i >= 0;\nloop invariant i40: s == in;\nloop invariant i41: c == in[idx_in];\nloop invariant i42: 0 <= idx_in <= 10;\nloop invariant i43: s == in;\nloop invariant i44: i >= 0;\nloop invariant i45: c == in[idx_in];\nloop invariant i46: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i47: 0 <= idx_in <= 10;\nloop invariant i48: 0 <= i;\nloop invariant i49: s == in;\nloop invariant i50: c == in[idx_in];\nloop invariant i51: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i52: i == \\sum(0, idx_in, \\lambda integer k; (in[k] - '0') * \\pow(10, idx_in - 1 - k));\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
        "checker_output": false,
        "checker_message": "Annotation error on line 25: unbound logic variable i. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: 0 <= c <= 255;\n\n\n\nloop invariant i8: s == in;\nloop invariant i9: i >= 0;\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: 0 <= i;\n\n\n\n\nloop invariant i25: s == in;\nloop invariant i26: i >= 0;\n\n\n\nloop invariant i30: s == in;\nloop invariant i31: 0 <= i;\n\n\nloop invariant i34: 0 <= i;\nloop invariant i35: s == in;\n\n\n\nloop invariant i39: i >= 0;\nloop invariant i40: s == in;\n\n\nloop invariant i43: s == in;\nloop invariant i44: i >= 0;\n\n\n\nloop invariant i48: 0 <= i;\nloop invariant i49: s == in;\n\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i20 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nAssertion i >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 245,
        "success_rate": 0.6408163265306123
    }
}