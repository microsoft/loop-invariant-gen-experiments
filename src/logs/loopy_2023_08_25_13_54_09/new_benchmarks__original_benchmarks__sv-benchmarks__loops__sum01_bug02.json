{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= (long long) n*a;\n    loop invariant 0 <= j <= 10;\n    loop invariant i <= j+11;\n    loop invariant sn == (i-1)*a ==> (j==10 && i>1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: 0 <= sn <= (long long) n*a;\nloop invariant i3: 0 <= j <= 10;\nloop invariant i4: i <= j+11;\nloop invariant i5: sn == (i-1)*a ==> (j==10 && i>1);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is preserved but not established.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n + 1;\n  loop invariant 9 <= j <= 10;\n  loop invariant 0 <= sn <= ((long long) n) * a;\n  loop invariant (i > j) ==> (sn == ((long long) (i - 1)) * a);\n  loop invariant (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n + 1;\nloop invariant i2: 9 <= j <= 10;\nloop invariant i3: 0 <= sn <= ((long long) n) * a;\nloop invariant i4: (i > j) ==> (sn == ((long long) (i - 1)) * a);\nloop invariant i5: (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\n\n\nloop invariant i5: (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i5 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i && i <= n + 1;\n  loop invariant 10 - i <= j && j <= 10;\n  loop invariant 0 <= sn && sn <= 2 * i;\n  loop invariant (i > j) ==> (sn == 2 * (i - 1));\n  loop invariant (i <= j) ==> (sn == 2 * (i - 1) || sn == 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i && i <= n + 1;\nloop invariant i2: 10 - i <= j && j <= 10;\nloop invariant i3: 0 <= sn && sn <= 2 * i;\nloop invariant i4: (i > j) ==> (sn == 2 * (i - 1));\nloop invariant i5: (i <= j) ==> (sn == 2 * (i - 1) || sn == 0);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\nloop invariant i2: 10 - i <= j && j <= 10;\nloop invariant i3: 0 <= sn && sn <= 2 * i;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 0 <= sn && sn <= i * a;\n    loop invariant j == 10 - (i - 1);\n    loop invariant sn == (i - 1) * a ==> i <= j;\n    loop invariant sn == 0 ==> i > j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i && i <= n + 1;\nloop invariant i2: 0 <= sn && sn <= i * a;\nloop invariant i3: j == 10 - (i - 1);\nloop invariant i4: sn == (i - 1) * a ==> i <= j;\nloop invariant i5: sn == 0 ==> i > j;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is preserved but not established.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\nloop invariant i2: 0 <= sn && sn <= i * a;\nloop invariant i3: j == 10 - (i - 1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= j <= 10;\n  loop invariant 0 <= sn <= (i-1) * a;\n  loop invariant i + j <= 11;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: 0 <= j <= 10;\nloop invariant i3: 0 <= sn <= (i-1) * a;\nloop invariant i4: i + j <= 11;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\nloop invariant i3: 0 <= sn <= (i-1) * a;\nloop invariant i4: i + j <= 11;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 10 - i <= j && j <= 10;\n    loop invariant 0 <= sn;\n    loop invariant (i > j) ==> (sn == 2 * (i - 1));\n    loop invariant (i <= j) ==> (sn == 2 * (i - 1) - 2 * (j - 10));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i && i <= n + 1;\nloop invariant i2: 10 - i <= j && j <= 10;\nloop invariant i3: 0 <= sn;\nloop invariant i4: (i > j) ==> (sn == 2 * (i - 1));\nloop invariant i5: (i <= j) ==> (sn == 2 * (i - 1) - 2 * (j - 10));\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\nloop invariant i2: 10 - i <= j && j <= 10;\nloop invariant i3: 0 <= sn;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant j <= 10;\n    loop invariant sn <= 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j >= 0;\nloop invariant i3: sn >= 0;\nloop invariant i4: i <= n + 1;\nloop invariant i5: j <= 10;\nloop invariant i6: sn <= 2 * i;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is preserved but not established.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: j <= 10;\nloop invariant i6: sn <= 2 * i;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i && i <= n+1;\n  loop invariant 1 <= j && j <= 11;\n  loop invariant 0 <= sn && sn <= (long long)n*a;\n  loop invariant (i <= j) ==> (sn == (i-1)*a);\n  loop invariant (i > j) ==> (sn == j*a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i && i <= n+1;\nloop invariant i2: 1 <= j && j <= 11;\nloop invariant i3: 0 <= sn && sn <= (long long)n*a;\nloop invariant i4: (i <= j) ==> (sn == (i-1)*a);\nloop invariant i5: (i > j) ==> (sn == j*a);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\n\nloop invariant i4: (i <= j) ==> (sn == (i-1)*a);\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i4 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= sn <= n*a;\n  loop invariant 9 <= j <= 10;\n  loop invariant j == 10 - (i - 1);\n  loop invariant (i <= j) ==> (sn == a * (i - 1));\n  loop invariant (i > j)  ==> (sn == a * (j - 1) + a * (i - j));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: 0 <= sn <= n*a;\nloop invariant i3: 9 <= j <= 10;\nloop invariant i4: j == 10 - (i - 1);\nloop invariant i5: (i <= j) ==> (sn == a * (i - 1));\nloop invariant i6: (i > j)  ==> (sn == a * (j - 1) + a * (i - j));\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\n\nloop invariant i4: j == 10 - (i - 1);\nloop invariant i5: (i <= j) ==> (sn == a * (i - 1));\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant 0 <= j <= 10;\n    loop invariant 0 <= sn <= (long long) i * a;\n    loop invariant sn == (long long) (i - 1) * a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n + 1;\nloop invariant i2: 0 <= j <= 10;\nloop invariant i3: 0 <= sn <= (long long) i * a;\nloop invariant i4: sn == (long long) (i - 1) * a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\nloop invariant i3: 0 <= sn <= (long long) i * a;\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- The program initializes `i` as an integer, `j` as 10, `n` as an unknown unsigned integer, and `sn` as 0.\n- There is a condition to return 0 if `n` is equal to 2147483647.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop runs for `i` from 1 to `n` inclusive.\n- If `i` is less than `j`, `sn` is incremented by `a` (which is 2), and `j` is decremented.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= (long long) n*a;\n    loop invariant 0 <= j <= 10;\n    loop invariant i <= j+11;\n    loop invariant sn == (i-1)*a ==> (j==10 && i>1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is an integer index initialized to 1\n- j is an integer initialized to 10\n- n is an unsigned integer from the unknown_uint() function\n- sn is an integer sum initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop iterates while i <= n\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant 1 <= i <= n + 1;\n  loop invariant 9 <= j <= 10;\n  loop invariant 0 <= sn <= ((long long) n) * a;\n  loop invariant (i > j) ==> (sn == ((long long) (i - 1)) * a);\n  loop invariant (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- i is initialized to 1\n- j is initialized to 10\n- n is assigned an unknown unsigned integer value\n- sn is initialized to 0\n\nNext, let's analyze the loop body and note the loop condition:\n- The loop condition is i <= n\n- Inside the loop, there is a conditional statement: if i < j, then sn is incremented by a (which is 2)\n- j is decremented in each iteration\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n  loop invariant 1 <= i && i <= n + 1;\n  loop invariant 10 - i <= j && j <= 10;\n  loop invariant 0 <= sn && sn <= 2 * i;\n  loop invariant (i > j) ==> (sn == 2 * (i - 1));\n  loop invariant (i <= j) ==> (sn == 2 * (i - 1) || sn == 0);\n*/\n```\n\nThese loop invariants hold:\n- before the loop execution (i = 1, j = 10, sn = 0)\n- in every iteration of the loop\n- after the loop termination\n\nAnd they imply the post-condition:\n- sn == ((long long) n) * a (which is 2) || sn == 0"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n\n1. `j = 10`\n2. `n = unknown_uint()`\n3. `sn = 0`\n4. `i` is the loop variable initialized to 1 and incremented in each iteration.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- The loop iterates from `i = 1` to `i <= n`.\n- Inside the loop, if `i < j`, `sn` is updated by adding `a` to it, and `j` is decremented.\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 0 <= sn && sn <= i * a;\n    loop invariant j == 10 - (i - 1);\n    loop invariant sn == (i - 1) * a ==> i <= j;\n    loop invariant sn == 0 ==> i > j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. `int i, j=10, n=unknown_uint(), sn=0;`\n2. `if (n==2147483647) return 0;` (n is a non-negative integer and not equal to 2147483647)\n\nLoop condition:\n`for(i=1; i<=n; i++)`\n\nLoop body:\n```\nif (i<j) \n  sn = sn + a;\nj--;\n```\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n1. `i = 1`\n2. `j = 10`\n3. `sn = 0`\n\n(ii) In every iteration of the loop:\n1. `1 <= i <= n+1`\n2. `0 <= j <= 10`\n3. `0 <= sn <= (i-1) * a`\n4. `i + j <= 11`\n\n(iii) After the loop termination:\n1. `i = n+1`\n2. `j = 10 - n`\n3. `sn == ((long long) n) * a || sn == 0`\n\nNow, we can write the loop invariants as ACSL annotations:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= j <= 10;\n  loop invariant 0 <= sn <= (i-1) * a;\n  loop invariant i + j <= 11;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- n is assigned a value from `unknown_uint()`, which means it is a non-negative integer.\n- i is initialized to 1.\n- j is initialized to 10.\n- sn is initialized to 0.\n\nNext, let's analyze the loop condition and loop body:\n- The loop condition is `i <= n`.\n- Inside the loop, if `i < j`, `sn` is incremented by `a` (which is 2), and `j` is decremented by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 10 - i <= j && j <= 10;\n    loop invariant 0 <= sn;\n    loop invariant (i > j) ==> (sn == 2 * (i - 1));\n    loop invariant (i <= j) ==> (sn == 2 * (i - 1) - 2 * (j - 10));\n*/\n```\n\nThe loop invariants are:\n1. `i` is always between 1 and `n + 1`.\n2. `j` is always between `10 - i` and 10.\n3. `sn` is always non-negative.\n4. If `i > j`, then `sn` is equal to `2 * (i - 1)`.\n5. If `i <= j`, then `sn` is equal to `2 * (i - 1) - 2 * (j - 10)`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `j` is initialized to 10.\n2. `n` is a non-negative integer (unsigned int) with an unknown value (unknown_uint()).\n3. `sn` is initialized to 0.\n4. The loop iterates from `i = 1` to `i <= n`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: `i <= n`.\n2. The loop body consists of an if statement: `if (i < j) sn = sn + a;`, where `a` is a constant value of 2.\n3. `j` is decremented in each iteration: `j--;`.\n\nNow let's find the necessary loop invariants:\n\n1. Loop invariant: `i >= 1` (because `i` starts from 1 and only increases).\n2. Loop invariant: `j >= 0` (because `j` starts from 10 and only decreases).\n3. Loop invariant: `sn >= 0` (because `sn` starts from 0 and only increases).\n4. Loop invariant: `i <= n + 1` (because the loop condition is `i <= n`).\n5. Loop invariant: `j <= 10` (because `j` starts from 10 and only decreases).\n6. Loop invariant: `sn <= 2 * i` (because `sn` is incremented by 2 at most in each iteration).\n\nNow let's write the loop invariants in a code block:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant j <= 10;\n    loop invariant sn <= 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code and make a note of the pre-conditions or variable assignments in the program.\n\n- `i` is initialized to 1.\n- `j` is initialized to 10.\n- `n` is assigned a non-deterministic unsigned int value.\n- `sn` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\n- The loop iterates from `i=1` to `i<=n`.\n- Inside the loop, there is a conditional statement `if (i<j)`, where `sn` is updated with `sn = sn + a` (where `a` is 2) and `j` is decremented by 1 in each iteration.\n\nNow, we can determine the loop invariants:\n\n```\n/*@ \n  loop invariant 1 <= i && i <= n+1;\n  loop invariant 1 <= j && j <= 11;\n  loop invariant 0 <= sn && sn <= (long long)n*a;\n  loop invariant (i <= j) ==> (sn == (i-1)*a);\n  loop invariant (i > j) ==> (sn == j*a);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop and\n(iii) after the loop termination.\n\nUsing these loop invariants, Frama-C can verify the post-condition `sn==((long long) n)*a || sn == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `int i, j=10, n=unknown_uint(), sn=0;`\n2. `if (n==2147483647) { return 0; }`\n\nNow let's analyze the loop condition and loop body:\n\n1. Loop condition: `for(i=1; i<=n; i++)`\n2. Loop body:\n   ```\n   if (i<j) \n       sn = sn + a;\n   j--;\n   ```\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= sn <= n*a;\n  loop invariant 9 <= j <= 10;\n  loop invariant j == 10 - (i - 1);\n  loop invariant (i <= j) ==> (sn == a * (i - 1));\n  loop invariant (i > j)  ==> (sn == a * (j - 1) + a * (i - j));\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n- n is assigned a non-deterministic unsigned integer value.\n- i is initialized to 1.\n- j is initialized to 10.\n- sn is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n- The loop condition is i <= n.\n- Inside the loop, if i < j, sn is incremented by a (a is 2).\n- j is decremented in every iteration.\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant 0 <= j <= 10;\n    loop invariant 0 <= sn <= (long long) i * a;\n    loop invariant sn == (long long) (i - 1) * a || sn == 0;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThey also imply the post-condition in the assertion."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= (long long) n*a;\n    loop invariant 0 <= j <= 10;\n    loop invariant i <= j+11;\n    loop invariant sn == (i-1)*a ==> (j==10 && i>1);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n + 1;\n  loop invariant 9 <= j <= 10;\n  loop invariant 0 <= sn <= ((long long) n) * a;\n  loop invariant (i > j) ==> (sn == ((long long) (i - 1)) * a);\n  loop invariant (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\n*/",
            "/*@ \n  loop invariant 1 <= i && i <= n + 1;\n  loop invariant 10 - i <= j && j <= 10;\n  loop invariant 0 <= sn && sn <= 2 * i;\n  loop invariant (i > j) ==> (sn == 2 * (i - 1));\n  loop invariant (i <= j) ==> (sn == 2 * (i - 1) || sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 0 <= sn && sn <= i * a;\n    loop invariant j == 10 - (i - 1);\n    loop invariant sn == (i - 1) * a ==> i <= j;\n    loop invariant sn == 0 ==> i > j;\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= j <= 10;\n  loop invariant 0 <= sn <= (i-1) * a;\n  loop invariant i + j <= 11;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant 10 - i <= j && j <= 10;\n    loop invariant 0 <= sn;\n    loop invariant (i > j) ==> (sn == 2 * (i - 1));\n    loop invariant (i <= j) ==> (sn == 2 * (i - 1) - 2 * (j - 10));\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant j <= 10;\n    loop invariant sn <= 2 * i;\n*/",
            "/*@ \n  loop invariant 1 <= i && i <= n+1;\n  loop invariant 1 <= j && j <= 11;\n  loop invariant 0 <= sn && sn <= (long long)n*a;\n  loop invariant (i <= j) ==> (sn == (i-1)*a);\n  loop invariant (i > j) ==> (sn == j*a);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= sn <= n*a;\n  loop invariant 9 <= j <= 10;\n  loop invariant j == 10 - (i - 1);\n  loop invariant (i <= j) ==> (sn == a * (i - 1));\n  loop invariant (i > j)  ==> (sn == a * (j - 1) + a * (i - j));\n*/",
            "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant 0 <= j <= 10;\n    loop invariant 0 <= sn <= (long long) i * a;\n    loop invariant sn == (long long) (i - 1) * a || sn == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\nloop invariant i1: 1 <= i <= n+1;\nloop invariant i2: 0 <= sn <= (long long) n*a;\nloop invariant i3: 0 <= j <= 10;\nloop invariant i4: i <= j+11;\nloop invariant i5: sn == (i-1)*a ==> (j==10 && i>1);\nloop invariant i6: 1 <= i <= n + 1;\nloop invariant i7: 9 <= j <= 10;\nloop invariant i8: 0 <= sn <= ((long long) n) * a;\nloop invariant i9: (i > j) ==> (sn == ((long long) (i - 1)) * a);\nloop invariant i10: (i <= j) ==> (sn >= ((long long) (i - 1)) * a);\nloop invariant i11: 1 <= i && i <= n + 1;\nloop invariant i12: 10 - i <= j && j <= 10;\nloop invariant i13: 0 <= sn && sn <= 2 * i;\nloop invariant i14: (i > j) ==> (sn == 2 * (i - 1));\nloop invariant i15: (i <= j) ==> (sn == 2 * (i - 1) || sn == 0);\nloop invariant i16: 1 <= i && i <= n + 1;\nloop invariant i17: 0 <= sn && sn <= i * a;\nloop invariant i18: j == 10 - (i - 1);\nloop invariant i19: sn == (i - 1) * a ==> i <= j;\nloop invariant i20: sn == 0 ==> i > j;\nloop invariant i21: 1 <= i <= n+1;\nloop invariant i22: 0 <= j <= 10;\nloop invariant i23: 0 <= sn <= (i-1) * a;\nloop invariant i24: i + j <= 11;\nloop invariant i25: 1 <= i && i <= n + 1;\nloop invariant i26: 10 - i <= j && j <= 10;\nloop invariant i27: 0 <= sn;\nloop invariant i28: (i > j) ==> (sn == 2 * (i - 1));\nloop invariant i29: (i <= j) ==> (sn == 2 * (i - 1) - 2 * (j - 10));\nloop invariant i30: i >= 1;\nloop invariant i31: j >= 0;\nloop invariant i32: sn >= 0;\nloop invariant i33: i <= n + 1;\nloop invariant i34: j <= 10;\nloop invariant i35: sn <= 2 * i;\nloop invariant i36: 1 <= i && i <= n+1;\nloop invariant i37: 1 <= j && j <= 11;\nloop invariant i38: 0 <= sn && sn <= (long long)n*a;\nloop invariant i39: (i <= j) ==> (sn == (i-1)*a);\nloop invariant i40: (i > j) ==> (sn == j*a);\nloop invariant i41: 1 <= i <= n+1;\nloop invariant i42: 0 <= sn <= n*a;\nloop invariant i43: 9 <= j <= 10;\nloop invariant i44: j == 10 - (i - 1);\nloop invariant i45: (i <= j) ==> (sn == a * (i - 1));\nloop invariant i46: (i > j)  ==> (sn == a * (j - 1) + a * (i - j));\nloop invariant i47: 1 <= i <= n + 1;\nloop invariant i48: 0 <= j <= 10;\nloop invariant i49: 0 <= sn <= (long long) i * a;\nloop invariant i50: sn == (long long) (i - 1) * a || sn == 0;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is preserved but not established.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nAssertion sn == (long long)n * 2 || sn == 0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "No invariants found."
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            319,
            320,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            339,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            366,
            367,
            368,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            389,
            390,
            391,
            392,
            394,
            395,
            397,
            400,
            401,
            402
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            323,
            326,
            327,
            329,
            331,
            338,
            341,
            348,
            365,
            369,
            385,
            388,
            393,
            396,
            398,
            399,
            403,
            404,
            405,
            406,
            407,
            408
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 405,
        "success_rate": 0.6444444444444445
    }
}