{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize_0;\n    loop invariant bufsize_0 - leader_len == bufsize;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize_0;\nloop invariant i3: bufsize_0 - leader_len == bufsize;\nloop invariant i4: p == leader_len + 2 * i;\nloop invariant i5: bufsize == bufsize_0 - p;\nloop invariant i6: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize_0;\nloop invariant i3: bufsize_0 - leader_len == bufsize;\nloop invariant i4: p == leader_len + 2 * i;\n\nloop invariant i6: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == (leader_len + 2 * i);\n    loop invariant bufsize_0 == (bufsize + leader_len);\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == (leader_len + 2 * i);\nloop invariant i3: bufsize_0 == (bufsize + leader_len);\nloop invariant i4: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == (leader_len + 2 * i);\nloop invariant i3: bufsize_0 == (bufsize + leader_len);\nloop invariant i4: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == 2 * i + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == 2 * i + leader_len;\nloop invariant i3: bufsize == bufsize_0 - leader_len - 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == 2 * i + leader_len;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize > 2 * (ielen - i);\n    loop invariant p == 2 * i + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize > 2 * (ielen - i);\nloop invariant i3: p == 2 * i + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p == 2 * i + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * i;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * i;\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * i;\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "@ loop invariant 0 <= i <= ielen;\n@ loop invariant p == 2 * i + leader_len;\n@ loop invariant bufsize == bufsize_0 - 2 * i - leader_len;\n@ loop invariant bufsize > 2 || i == ielen;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == 2 * i + leader_len;\nloop invariant i3: bufsize == bufsize_0 - 2 * i - leader_len;\nloop invariant i4: bufsize > 2 || i == ielen;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is preserved but not established.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == 2 * i + leader_len;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant bufsize >= 2 * (ielen - i);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == leader_len + 2 * i;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == leader_len + 2 * i;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * i;\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * i;\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize_0 >= 2 * ielen + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == leader_len + 2 * i;\nloop invariant i3: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i4: bufsize_0 >= 2 * ielen + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: p == leader_len + 2 * i;\n\nloop invariant i4: bufsize_0 >= 2 * ielen + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize\n7. bufsize = bufsize - leader_len\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: i < ielen && bufsize > 2\n2. Loop increment: i++\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize_0;\n    loop invariant bufsize_0 - leader_len == bufsize;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned values from unknown() function calls. We have no information about these values.\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. bufsize must be greater or equal to leader_len.\n4. p is initially set to 0.\n5. bufsize_0 is set to bufsize.\n6. bufsize is reduced by leader_len.\n7. p is increased by leader_len.\n8. bufsize must be greater or equal to 2 * ielen for the loop to execute.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n1. The loop iterates while i < ielen and bufsize > 2.\n2. In each iteration, p is increased by 2.\n3. The loop invariant should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBased on the above information, we can provide the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == (leader_len + 2 * i);\n    loop invariant bufsize_0 == (bufsize + leader_len);\n    loop invariant bufsize >= 2 * (ielen - i);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned unknown values.\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. If bufsize < leader_len, the program goes to END.\n4. p is initialized to 0.\n5. bufsize_0 is assigned the value of bufsize.\n6. bufsize is decremented by leader_len.\n7. p is incremented by leader_len.\n8. If bufsize < 2 * ielen, the program goes to END.\n\nNow, let's analyze the loop:\n\n- Loop condition: i < ielen && bufsize > 2\n- Loop body: p is incremented by 2 in each iteration.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == 2 * i + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution (i = 0, p = leader_len, bufsize = bufsize_0 - leader_len).\n- In every iteration of the loop (i increments by 1, p increments by 2, bufsize remains unchanged).\n- After the loop termination (when i = ielen or bufsize <= 2)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize\n7. bufsize -= leader_len\n8. bufsize >= 2 * ielen\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- Loop condition: i < ielen && bufsize > 2\n- Loop variable: i\n\nNow, let's output the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are initialized with unknown values.\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. If bufsize is less than leader_len, the program terminates.\n4. p is initialized to 0.\n5. bufsize_0 is assigned the value of bufsize.\n6. bufsize is reduced by leader_len, and p is increased by leader_len.\n7. If bufsize is less than 2 * ielen, the program terminates.\n8. The loop starts with i = 0 and continues as long as i < ielen and bufsize > 2.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: i < ielen && bufsize > 2\n- Loop body: p += 2\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize > 2 * (ielen - i);\n    loop invariant p == 2 * i + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned unknown values, but they are checked to be positive.\n2. If bufsize < leader_len, the program goes to END.\n3. p is initialized to 0.\n4. bufsize_0 is set to bufsize.\n5. bufsize is reduced by leader_len.\n6. p is incremented by leader_len.\n7. If bufsize < 2*ielen, the program goes to END.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop iterates while i < ielen and bufsize > 2.\n- In each iteration, p is incremented by 2.\n\nNow, we can output the necessary loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * i;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- leader_len, bufsize, bufsize_0, and ielen are assigned unknown values.\n- leader_len, bufsize, and ielen must be greater than 0.\n- p is initially set to 0.\n- bufsize_0 is set to bufsize.\n- bufsize is reduced by leader_len.\n- p is increased by leader_len.\n\nNow, let's analyze the loop:\n- Loop variable is i.\n- Loop condition is i < ielen && bufsize > 2.\n- Loop body increments p by 2 and increments i.\n\nBased on this analysis, we can determine the loop invariants:\n```\n@ loop invariant 0 <= i <= ielen;\n@ loop invariant p == 2 * i + leader_len;\n@ loop invariant bufsize == bufsize_0 - 2 * i - leader_len;\n@ loop invariant bufsize > 2 || i == ielen;\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- leader_len, bufsize, bufsize_0, and ielen are assigned values from unknown() function calls.\n- leader_len, bufsize, and ielen must be greater than 0.\n- If bufsize < leader_len, the program jumps to END.\n- p is initially 0.\n- bufsize_0 = bufsize.\n- bufsize is reduced by leader_len and p is incremented by leader_len.\n- If bufsize < 2*ielen, the program jumps to END.\n- The loop starts with i = 0 and continues while i < ielen and bufsize > 2.\n\nLoop invariants:\n```\n/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant bufsize >= 2 * (ielen - i);\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution:\n   - i is 0, i <= ielen (since ielen > 0), and p == leader_len.\n2. In every iteration of the loop:\n   - i is incremented by 1, and p is incremented by 2.\n   - The loop condition ensures that i remains within the bounds of ielen, and bufsize remains greater than 2.\n3. After the loop termination:\n   - The loop invariants imply that p has been incremented by 2 * ielen after the execution of the loop."
                },
                {
                    "role": "assistant",
                    "content": "First, note the pre-conditions and variable assignments:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize\n7. bufsize = bufsize - leader_len\n\nNow, analyze the loop condition and body:\n\n- Loop condition: i < ielen && bufsize > 2\n- Loop body: p += 2, i++\n\nNow, we can provide the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize\n7. bufsize -= leader_len\n\nNow, let's analyze the loop:\n\nLoop condition: i < ielen && bufsize > 2\nLoop body: p += 2\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize_0 >= 2 * ielen + leader_len;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize_0;\n    loop invariant bufsize_0 - leader_len == bufsize;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == (leader_len + 2 * i);\n    loop invariant bufsize_0 == (bufsize + leader_len);\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == 2 * i + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize > 2 * (ielen - i);\n    loop invariant p == 2 * i + leader_len;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * i;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "@ loop invariant 0 <= i <= ielen;\n@ loop invariant p == 2 * i + leader_len;\n@ loop invariant bufsize == bufsize_0 - 2 * i - leader_len;\n@ loop invariant bufsize > 2 || i == ielen;",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize_0 >= 2 * ielen + leader_len;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize_0;\nloop invariant i3: bufsize_0 - leader_len == bufsize;\nloop invariant i4: p == leader_len + 2 * i;\nloop invariant i5: bufsize == bufsize_0 - p;\nloop invariant i6: bufsize >= 2 * (ielen - i);\nloop invariant i7: 0 <= i <= ielen;\nloop invariant i8: p == (leader_len + 2 * i);\nloop invariant i9: bufsize_0 == (bufsize + leader_len);\nloop invariant i10: bufsize >= 2 * (ielen - i);\nloop invariant i11: 0 <= i <= ielen;\nloop invariant i12: p == 2 * i + leader_len;\nloop invariant i13: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i14: 0 <= i <= ielen;\nloop invariant i15: bufsize >= 2 * (ielen - i);\nloop invariant i16: p == leader_len + 2 * i;\nloop invariant i17: bufsize_0 == bufsize + leader_len;\nloop invariant i18: 0 <= i <= ielen;\nloop invariant i19: bufsize > 2 * (ielen - i);\nloop invariant i20: p == 2 * i + leader_len;\nloop invariant i21: 0 <= i <= ielen;\nloop invariant i22: bufsize >= 2 * i;\nloop invariant i23: p == leader_len + 2 * i;\nloop invariant i24: bufsize_0 == bufsize + leader_len;\nloop invariant i25: 0 <= i <= ielen;\nloop invariant i26: p == 2 * i + leader_len;\nloop invariant i27: bufsize == bufsize_0 - 2 * i - leader_len;\nloop invariant i28: bufsize > 2 || i == ielen;\nloop invariant i29: 0 <= i <= ielen;\nloop invariant i30: p == leader_len + 2 * i;\nloop invariant i31: bufsize_0 == bufsize + leader_len;\nloop invariant i32: bufsize >= 2 * (ielen - i);\nloop invariant i33: 0 <= i <= ielen;\nloop invariant i34: bufsize >= 2 * i;\nloop invariant i35: p == leader_len + 2 * i;\nloop invariant i36: bufsize_0 == bufsize + leader_len;\nloop invariant i37: 0 <= i <= ielen;\nloop invariant i38: p == leader_len + 2 * i;\nloop invariant i39: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i40: bufsize_0 >= 2 * ielen + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is preserved but not established.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize_0;\nloop invariant i3: bufsize_0 - leader_len == bufsize;\nloop invariant i4: p == leader_len + 2 * i;\n\nloop invariant i6: bufsize >= 2 * (ielen - i);\nloop invariant i7: 0 <= i <= ielen;\nloop invariant i8: p == (leader_len + 2 * i);\nloop invariant i9: bufsize_0 == (bufsize + leader_len);\nloop invariant i10: bufsize >= 2 * (ielen - i);\nloop invariant i11: 0 <= i <= ielen;\nloop invariant i12: p == 2 * i + leader_len;\n\nloop invariant i14: 0 <= i <= ielen;\nloop invariant i15: bufsize >= 2 * (ielen - i);\nloop invariant i16: p == leader_len + 2 * i;\nloop invariant i17: bufsize_0 == bufsize + leader_len;\nloop invariant i18: 0 <= i <= ielen;\n\nloop invariant i20: p == 2 * i + leader_len;\nloop invariant i21: 0 <= i <= ielen;\nloop invariant i22: bufsize >= 2 * i;\nloop invariant i23: p == leader_len + 2 * i;\nloop invariant i24: bufsize_0 == bufsize + leader_len;\nloop invariant i25: 0 <= i <= ielen;\nloop invariant i26: p == 2 * i + leader_len;\n\n\nloop invariant i29: 0 <= i <= ielen;\nloop invariant i30: p == leader_len + 2 * i;\nloop invariant i31: bufsize_0 == bufsize + leader_len;\nloop invariant i32: bufsize >= 2 * (ielen - i);\nloop invariant i33: 0 <= i <= ielen;\nloop invariant i34: bufsize >= 2 * i;\nloop invariant i35: p == leader_len + 2 * i;\nloop invariant i36: bufsize_0 == bufsize + leader_len;\nloop invariant i37: 0 <= i <= ielen;\nloop invariant i38: p == leader_len + 2 * i;\n\nloop invariant i40: bufsize_0 >= 2 * ielen + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i40 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 104,
        "success_rate": 0.49038461538461536
    }
}