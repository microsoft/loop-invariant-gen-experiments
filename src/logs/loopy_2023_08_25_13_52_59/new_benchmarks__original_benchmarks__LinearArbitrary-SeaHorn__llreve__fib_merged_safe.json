{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
        "completions": [
            {
                "invariants": "//@\n  loop invariant f1 >= 0;\n  loop invariant g1 >= 1;\n  loop invariant h1 >= 1;\n  loop invariant f2 >= 1;\n  loop invariant g2 >= 1;\n  loop invariant h2 >= 2;\n  loop invariant g1 == f1 + 1;\n  loop invariant h1 == f1 + g1;\n  loop invariant f2 == f1 + 1;\n  loop invariant g2 == f2 + 1;\n  loop invariant h2 == f2 + g2;",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: g1 >= 1;\nloop invariant i3: h1 >= 1;\nloop invariant i4: f2 >= 1;\nloop invariant i5: g2 >= 1;\nloop invariant i6: h2 >= 2;\nloop invariant i7: g1 == f1 + 1;\nloop invariant i8: h1 == f1 + g1;\nloop invariant i9: f2 == f1 + 1;\nloop invariant i10: g2 == f2 + 1;\nloop invariant i11: h2 == f2 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: g1 >= 1;\n\nloop invariant i4: f2 >= 1;\nloop invariant i5: g2 >= 1;\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant f1 + g1 == h1;\n    loop invariant f2 + g2 == h2;\n    loop invariant h2 == h1 + f1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 + g1 == h1;\nloop invariant i2: f2 + g2 == h2;\nloop invariant i3: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\nloop invariant i3: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 1;\nloop invariant g1 >= 1;\nloop invariant g2 >= 2;\nloop invariant h1 >= 0;\nloop invariant h2 >= 1;\nloop invariant h2 == h1 + f1;\nloop invariant g1 == f1 + f2;\nloop invariant g2 == f2 + f1 + 1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: f2 >= 1;\nloop invariant i3: g1 >= 1;\nloop invariant i4: g2 >= 2;\nloop invariant i5: h1 >= 0;\nloop invariant i6: h2 >= 1;\nloop invariant i7: h2 == h1 + f1;\nloop invariant i8: g1 == f1 + f2;\nloop invariant i9: g2 == f2 + f1 + 1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is preserved but not established.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\n\nloop invariant i3: g1 >= 1;\n\nloop invariant i5: h1 >= 0;\n\nloop invariant i7: h2 == h1 + f1;\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i5 is inductive.\nloop invariant i7 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant f1 <= g1;\n  loop invariant f2 <= g2;\n  loop invariant g2 == f2 + g1;\n  loop invariant h2 == f2 + g2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 <= g1;\nloop invariant i2: f2 <= g2;\nloop invariant i3: g2 == f2 + g1;\nloop invariant i4: h2 == f2 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: h1 == f1 + g1;\nloop invariant i2: h2 == f2 + g2;\nloop invariant i3: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\nloop invariant i3: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant g1 == f1 + 1;\nloop invariant g2 == f2 + 1;\nloop invariant h2 == h1 + f1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: f2 >= 0;\nloop invariant i3: g1 >= 0;\nloop invariant i4: g2 >= 0;\nloop invariant i5: h1 >= 0;\nloop invariant i6: h2 >= 0;\nloop invariant i7: g1 == f1 + 1;\nloop invariant i8: g2 == f2 + 1;\nloop invariant i9: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is preserved but not established.\nloop invariant i9 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: f2 >= 0;\nloop invariant i3: g1 >= 0;\nloop invariant i4: g2 >= 0;\nloop invariant i5: h1 >= 0;\nloop invariant i6: h2 >= 0;\n\n\nloop invariant i9: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i9 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant f2 == g2 - g1;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 == g1 - f2;\nloop invariant i2: f2 == g2 - g1;\nloop invariant i3: h1 == f1 + g1;\nloop invariant i4: h2 == f2 + g2;\nloop invariant i5: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\nloop invariant i5: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i5 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant f1 >= 0;\n    loop invariant f2 == f1 + 1;\n    loop invariant g1 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == h1 + f1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: f2 == f1 + 1;\nloop invariant i3: g1 == f1 + 1;\nloop invariant i4: g2 == g1 + 1;\nloop invariant i5: h1 == f1 + g1 - 1;\nloop invariant i6: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is preserved but not established.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\nloop invariant i6: h2 == h1 + f1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i6 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant g1 == f2 + g2;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 == g1 - f2;\nloop invariant i2: g1 == f2 + g2;\nloop invariant i3: h1 == f1 + g1;\nloop invariant i4: h2 == f2 + g2;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant n >= 0;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == f2 + g2 - 1;\n    loop invariant f2 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: n >= 0;\nloop invariant i2: h1 == f1 + g1 - 1;\nloop invariant i3: h2 == f2 + g2 - 1;\nloop invariant i4: f2 == f1 + 1;\nloop invariant i5: g2 == g1 + 1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `n` is assigned an unknown value.\n- `f1` is initialized to 0.\n- `f2` is initialized to 1.\n- `g1` and `g2` are initialized to 1.\n- `h1` and `h2` are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `n > 0`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (h2==h1+f1).\n\nBased on the loop behavior and the post-condition, we can determine the following loop invariants:\n\n```\n//@\n  loop invariant f1 >= 0;\n  loop invariant g1 >= 1;\n  loop invariant h1 >= 1;\n  loop invariant f2 >= 1;\n  loop invariant g2 >= 1;\n  loop invariant h2 >= 2;\n  loop invariant g1 == f1 + 1;\n  loop invariant h1 == f1 + g1;\n  loop invariant f2 == f1 + 1;\n  loop invariant g2 == f2 + 1;\n  loop invariant h2 == f2 + g2;\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the pre-conditions and variable assignments:\n- n is assigned an unknown value.\n- f1 is initialized to 0.\n- f2 is initialized to 1.\n- g1 and g2 are both initialized to 1.\n- h1 and h2 are both initialized to 0.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is (n > 0).\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant f1 + g1 == h1;\n    loop invariant f2 + g2 == h2;\n    loop invariant h2 == h1 + f1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- int n = unknown(); (n is an integer with an unknown value)\n- int f1 = 0;\n- int f2 = 1;\n- int g1 = 1, g2 = 1;\n- int h1 = 0, h2 = 0;\n\nNext, let's analyze the loop condition and body:\n- Loop condition: (n > 0)\n- Loop body:\n  - h1 = f1 + g1;\n  - f1 = g1;\n  - g1 = h1;\n  - n--;\n  - h2 = f2 + g2;\n  - f2 = g2;\n  - g2 = h2;\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition (h2 == h1 + f1).\n\nHere are the loop invariants:\n\n```\n//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 1;\nloop invariant g1 >= 1;\nloop invariant g2 >= 2;\nloop invariant h1 >= 0;\nloop invariant h2 >= 1;\nloop invariant h2 == h1 + f1;\nloop invariant g1 == f1 + f2;\nloop invariant g2 == f2 + f1 + 1;\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n- `n` is assigned an unknown value.\n- `f1` is initialized to 0, `f2` to 1.\n- `g1` and `g2` are both initialized to 1.\n- `h1` and `h2` are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `n > 0`.\n\nNow, let's output the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n  loop invariant f1 <= g1;\n  loop invariant f2 <= g2;\n  loop invariant g2 == f2 + g1;\n  loop invariant h2 == f2 + g2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the pre-conditions and variable assignments:\n\n- n is assigned an unknown value.\n- f1 is assigned 0.\n- f2 is assigned 1.\n- g1 is assigned 1.\n- g2 is assigned 1.\n- h1 is assigned 0.\n- h2 is assigned 0.\n\nNext, let's analyze the loop condition and body:\n\n- Loop condition: (n > 0)\n- Loop body:\n  1. h1 = f1 + g1;\n  2. f1 = g1;\n  3. g1 = h1;\n  4. n--;\n  5. h2 = f2 + g2;\n  6. f2 = g2;\n  7. g2 = h2;\n\nNow, let's find the loop invariants:\n\n1. h1 = f1 + g1 is true before the loop execution, in every iteration of the loop, and after the loop termination.\n2. h2 = f2 + g2 is true before the loop execution, in every iteration of the loop, and after the loop termination.\n3. h2 = h1 + f1 is true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThe loop invariants are:\n\n```\n/*@ \n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is initialized with an unknown value\n- f1 is initialized to 0\n- f2 is initialized to 1\n- g1 is initialized to 1\n- g2 is initialized to 1\n- h1 is initialized to 0\n- h2 is initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (n > 0)\n\nNow, let's output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant g1 == f1 + 1;\nloop invariant g2 == f2 + 1;\nloop invariant h2 == h1 + f1;\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions, variable assignments, and loop condition:\n\n- n is assigned an unknown value\n- f1 is initialized to 0, f2 to 1\n- g1 and g2 are both initialized to 1\n- h1 and h2 are both initialized to 0\n- Loop condition: n > 0\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant f2 == g2 - g1;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the pre-conditions and variable assignments in the program:\n- n is assigned an unknown value, and we don't have any information about it.\n- f1 is initialized to 0, and f2 is initialized to 1.\n- g1 and g2 are both initialized to 1.\n- h1 and h2 are both initialized to 0.\n\nNow, let's analyze the loop body and its condition:\n- The loop condition is (n > 0), meaning the loop will execute as long as n is positive.\n- In the loop body, h1, f1, and g1 are updated according to the Fibonacci sequence, and h2, f2, and g2 are updated according to the Fibonacci sequence as well. Additionally, n is decremented.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (h2 == h1 + f1):\n\n```\n/*@ \n    loop invariant f1 >= 0;\n    loop invariant f2 == f1 + 1;\n    loop invariant g1 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == h1 + f1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n\n- n is assigned an unknown value.\n- f1 is assigned 0.\n- f2 is assigned 1.\n- g1 is assigned 1.\n- g2 is assigned 1.\n- h1 is assigned 0.\n- h2 is assigned 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (n > 0).\n\nNow let's find the loop invariants. These must be true before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply the post-condition:\n\n```\n/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant g1 == f2 + g2;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n*/\n```\n\nThese loop invariants capture the relationship between the fibonacci numbers being calculated in the loop, and they hold true for every iteration, as well as before and after the loop execution. They also imply the post-condition (h2 == h1 + f1)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- n is assigned an unknown value.\n- f1 is assigned 0.\n- f2 is assigned 1.\n- g1 is assigned 1.\n- g2 is assigned 1.\n- h1 is assigned 0.\n- h2 is assigned 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (n > 0).\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant n >= 0;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == f2 + g2 - 1;\n    loop invariant f2 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n*/\n```\n\nThese loop invariants hold before the loop execution, during every iteration of the loop, and after the loop termination, implying the post condition `h2 == h1 + f1`."
                }
            ]
        ],
        "invariants": [
            "//@\n  loop invariant f1 >= 0;\n  loop invariant g1 >= 1;\n  loop invariant h1 >= 1;\n  loop invariant f2 >= 1;\n  loop invariant g2 >= 1;\n  loop invariant h2 >= 2;\n  loop invariant g1 == f1 + 1;\n  loop invariant h1 == f1 + g1;\n  loop invariant f2 == f1 + 1;\n  loop invariant g2 == f2 + 1;\n  loop invariant h2 == f2 + g2;",
            "/*@ \n    loop invariant f1 + g1 == h1;\n    loop invariant f2 + g2 == h2;\n    loop invariant h2 == h1 + f1;\n*/",
            "//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 1;\nloop invariant g1 >= 1;\nloop invariant g2 >= 2;\nloop invariant h1 >= 0;\nloop invariant h2 >= 1;\nloop invariant h2 == h1 + f1;\nloop invariant g1 == f1 + f2;\nloop invariant g2 == f2 + f1 + 1;",
            "/*@ \n  loop invariant f1 <= g1;\n  loop invariant f2 <= g2;\n  loop invariant g2 == f2 + g1;\n  loop invariant h2 == f2 + g2;\n*/",
            "/*@ \n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "//@\nloop invariant f1 >= 0;\nloop invariant f2 >= 0;\nloop invariant g1 >= 0;\nloop invariant g2 >= 0;\nloop invariant h1 >= 0;\nloop invariant h2 >= 0;\nloop invariant g1 == f1 + 1;\nloop invariant g2 == f2 + 1;\nloop invariant h2 == h1 + f1;",
            "/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant f2 == g2 - g1;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant f1 >= 0;\n    loop invariant f2 == f1 + 1;\n    loop invariant g1 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant f1 == g1 - f2;\n    loop invariant g1 == f2 + g2;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant h1 == f1 + g1 - 1;\n    loop invariant h2 == f2 + g2 - 1;\n    loop invariant f2 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: g1 >= 1;\nloop invariant i3: h1 >= 1;\nloop invariant i4: f2 >= 1;\nloop invariant i5: g2 >= 1;\nloop invariant i6: h2 >= 2;\nloop invariant i7: g1 == f1 + 1;\nloop invariant i8: h1 == f1 + g1;\nloop invariant i9: f2 == f1 + 1;\nloop invariant i10: g2 == f2 + 1;\nloop invariant i11: h2 == f2 + g2;\nloop invariant i12: f1 + g1 == h1;\nloop invariant i13: f2 + g2 == h2;\nloop invariant i14: h2 == h1 + f1;\nloop invariant i15: f1 >= 0;\nloop invariant i16: f2 >= 1;\nloop invariant i17: g1 >= 1;\nloop invariant i18: g2 >= 2;\nloop invariant i19: h1 >= 0;\nloop invariant i20: h2 >= 1;\nloop invariant i21: h2 == h1 + f1;\nloop invariant i22: g1 == f1 + f2;\nloop invariant i23: g2 == f2 + f1 + 1;\nloop invariant i24: f1 <= g1;\nloop invariant i25: f2 <= g2;\nloop invariant i26: g2 == f2 + g1;\nloop invariant i27: h2 == f2 + g2;\nloop invariant i28: h1 == f1 + g1;\nloop invariant i29: h2 == f2 + g2;\nloop invariant i30: h2 == h1 + f1;\nloop invariant i31: f1 >= 0;\nloop invariant i32: f2 >= 0;\nloop invariant i33: g1 >= 0;\nloop invariant i34: g2 >= 0;\nloop invariant i35: h1 >= 0;\nloop invariant i36: h2 >= 0;\nloop invariant i37: g1 == f1 + 1;\nloop invariant i38: g2 == f2 + 1;\nloop invariant i39: h2 == h1 + f1;\nloop invariant i40: f1 == g1 - f2;\nloop invariant i41: f2 == g2 - g1;\nloop invariant i42: h1 == f1 + g1;\nloop invariant i43: h2 == f2 + g2;\nloop invariant i44: h2 == h1 + f1;\nloop invariant i45: f1 >= 0;\nloop invariant i46: f2 == f1 + 1;\nloop invariant i47: g1 == f1 + 1;\nloop invariant i48: g2 == g1 + 1;\nloop invariant i49: h1 == f1 + g1 - 1;\nloop invariant i50: h2 == h1 + f1;\nloop invariant i51: f1 == g1 - f2;\nloop invariant i52: g1 == f2 + g2;\nloop invariant i53: h1 == f1 + g1;\nloop invariant i54: h2 == f2 + g2;\nloop invariant i55: n >= 0;\nloop invariant i56: h1 == f1 + g1 - 1;\nloop invariant i57: h2 == f2 + g2 - 1;\nloop invariant i58: f2 == f1 + 1;\nloop invariant i59: g2 == g1 + 1;\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i51 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nloop invariant i59 is inductive.\nAssertion h2 == h1 + f1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  /*@\nloop invariant i1: f1 >= 0;\nloop invariant i2: g1 >= 1;\n\nloop invariant i4: f2 >= 1;\nloop invariant i5: g2 >= 1;\n\n\n\n\n\n\n\n\nloop invariant i14: h2 == h1 + f1;\nloop invariant i15: f1 >= 0;\nloop invariant i16: f2 >= 1;\nloop invariant i17: g1 >= 1;\n\nloop invariant i19: h1 >= 0;\n\nloop invariant i21: h2 == h1 + f1;\n\n\nloop invariant i24: f1 <= g1;\nloop invariant i25: f2 <= g2;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i44: h2 == h1 + f1;\nloop invariant i45: f1 >= 0;\n\n\n\n\nloop invariant i50: h2 == h1 + f1;\n\n\n\n\n\n\n\n\n\n*/\nwhile((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;//@ assert(h2==h1+f1);\n}\n  }\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i19 is inductive.\nloop invariant i21 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i50 is inductive.\nAssertion h2 == h1 + f1: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 119,
        "success_rate": 0.5210084033613446
    }
}