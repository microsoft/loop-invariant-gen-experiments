{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/nec40.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  while(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n  loop invariant x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> x[n] != 0;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer n; 0 <= n < i ==> x[n] != 0;\nloop invariant i3: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer n; 0 <= n < i ==> x[n] != 0;\nloop invariant i3: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\n    loop invariant \\forall int j; i <= j < 100 ==> y[j] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\nloop invariant i3: \\forall int j; i <= j < 100 ==> y[j] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\nloop invariant i3: \\forall int j; i <= j < 100 ==> y[j] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: y[i] == 0 || x[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant x[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: x[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: x[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer t; 0 <= t < i ==> y[t] == x[t];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer t; 0 <= t < i ==> y[t] == x[t];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer t; 0 <= t < i ==> y[t] == x[t];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant x[i] == 0 ==> y[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: x[i] == 0 ==> y[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  while(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. k is assigned a value by the `unknown_int()` function, which can be any integer value.\n2. i is initialized to 0.\n\nNow, let's analyze the loop:\n\nThe loop condition is `x[i] != 0`. The loop body copies the value of `x[i]` to `y[i]`, and then increments i.\n\nBased on the information above, we can now write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `k = unknown_int();` assigns an unknown integer value to `k`.\n- `i = 0;` initializes `i` to 0.\n- `x` and `y` are character arrays with a size of 100.\n\nNext, let's analyze the loop body and note the loop condition:\n- The loop condition is `x[i] != 0`.\n- In the loop body, `y[i] = x[i];` and `i` is incremented by 1.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n  loop invariant x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n- `i` is initialized to 0.\n- The while loop continues as long as `x[i] != 0`.\n- Inside the loop, `y[i] = x[i]` and `i` is incremented.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> x[n] != 0;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `k = unknown_int();` k is assigned an unknown integer value\n- `i = 0;` i is initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- `while(x[i] != 0)` The loop continues until x[i] is not equal to 0\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\n    loop invariant \\forall int j; i <= j < 100 ==> y[j] == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `k` is assigned a value from an unknown function `unknown_int()`.\n2. `i` is initialized to 0 before entering the loop.\n\nNext, let's analyze the loop condition and body:\n\n- The loop condition is `x[i] != 0`.\n- In each iteration, the value of `x[i]` is assigned to `y[i]`, and `i` is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- k is assigned an unknown integer value.\n- i is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x[i] != 0`.\n\nNow let's find the necessary loop invariants:\n- Before the loop execution, i is 0 and both x and y have unknown values.\n- In every iteration of the loop, y[i] is assigned the value of x[i] and i is incremented.\n- After the loop termination, x[i] == 0 and y has the same values as x from index 0 to i-1.\n\nBased on this analysis, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant x[i] == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `k` is assigned an unknown integer value.\n- `i` is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x[i] != 0`.\n\nNow, we can find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nThe loop invariants for the given loop are:\n```\n/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer t; 0 <= t < i ==> y[t] == x[t];\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- k is assigned a value from the `unknown_int` function.\n- i is initialized to 0.\n\nLoop condition:\n- The loop continues while `x[i] != 0`.\n\nPost-condition:\n- If `k >= 0` and `k < i`, then `y[k] != 0`.\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. k is assigned an unknown integer value.\n2. i is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is (x[i] != 0).\n2. In each iteration of the loop, y[i] is assigned the value of x[i], and then i is incremented.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code and make a note of the pre-conditions or variable assignments in the program:\n\n1. `k` is an unknown integer value\n2. `i` is initialized to 0\n3. The while loop condition is `(x[i] != 0)`\n\nNow let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant x[i] == 0 ==> y[i] == 0;\n*/\n```\n\nThese loop invariants satisfy the given rules and help Frama-C verify the post-condition."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
            "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n  loop invariant x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> x[n] != 0;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\n    loop invariant \\forall int j; i <= j < 100 ==> y[j] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant x[i] == 0;\n*/",
            "/*@ \n  loop invariant 0 <= i <= 100;\n  loop invariant \\forall integer t; 0 <= t < i ==> y[t] == x[t];\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
            "/*@\n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant x[i] == 0 ==> y[i] == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i4: 0 <= i <= 100;\nloop invariant i5: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i6: x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\nloop invariant i7: 0 <= i <= 100;\nloop invariant i8: \\forall integer n; 0 <= n < i ==> x[n] != 0;\nloop invariant i9: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i10: 0 <= i <= 100;\nloop invariant i11: \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\nloop invariant i12: \\forall int j; i <= j < 100 ==> y[j] == 0;\nloop invariant i13: 0 <= i <= 100;\nloop invariant i14: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i15: y[i] == 0 || x[i] == 0;\nloop invariant i16: 0 <= i <= 100;\nloop invariant i17: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i18: x[i] == 0;\nloop invariant i19: 0 <= i <= 100;\nloop invariant i20: \\forall integer t; 0 <= t < i ==> y[t] == x[t];\nloop invariant i21: 0 <= i <= 100;\nloop invariant i22: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i23: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i24: 0 <= i <= 100;\nloop invariant i25: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i26: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i27: 0 <= i <= 100;\nloop invariant i28: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i29: x[i] == 0 ==> y[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nAssertion 0 != 0: Unproven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i4: 0 <= i <= 100;\nloop invariant i5: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i6: x[i] == 0 || (\\forall integer j; 0 <= j < i ==> x[j] != 0);\nloop invariant i7: 0 <= i <= 100;\nloop invariant i8: \\forall integer n; 0 <= n < i ==> x[n] != 0;\nloop invariant i9: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i10: 0 <= i <= 100;\nloop invariant i11: \\forall int j; 0 <= j < i ==> x[j] != 0 && y[j] == x[j];\nloop invariant i12: \\forall int j; i <= j < 100 ==> y[j] == 0;\nloop invariant i13: 0 <= i <= 100;\nloop invariant i14: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i15: y[i] == 0 || x[i] == 0;\nloop invariant i16: 0 <= i <= 100;\nloop invariant i17: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i18: x[i] == 0;\nloop invariant i19: 0 <= i <= 100;\nloop invariant i20: \\forall integer t; 0 <= t < i ==> y[t] == x[t];\nloop invariant i21: 0 <= i <= 100;\nloop invariant i22: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i23: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i24: 0 <= i <= 100;\nloop invariant i25: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i26: \\forall integer j; 0 <= j < i ==> x[j] != 0;\nloop invariant i27: 0 <= i <= 100;\nloop invariant i28: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i29: x[i] == 0 ==> y[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nAssertion 0 != 0: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            364,
            366,
            367,
            368,
            370,
            371,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            397,
            400,
            401,
            402
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            363,
            365,
            369,
            372,
            385,
            388,
            396,
            398,
            399,
            403,
            404,
            405
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 402,
        "success_rate": 0.5920398009950248
    }
}