{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x <= 10;\n    loop invariant sn <= 20;\n    loop invariant (x < 10) ==> (sn == 2 * x);\n    loop invariant (x >= 10) ==> (sn == 20);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant sn <= 20;\nloop invariant (x < 10) ==> (sn == 2 * x);\nloop invariant (x >= 10) ==> (sn == 20);\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "success": false,
                "checker_message": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant x <= 10 on line 12: Partially proven\nInvariant sn <= 20 on line 13: Partially proven\nInvariant x < 10 ==> sn == 2 * x on line 14: Partially proven\nInvariant x >= 10 ==> sn == 20 on line 15: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant sn <= 20;\nloop invariant (x < 10) ==> (sn == 2 * x);\nloop invariant (x >= 10) ==> (sn == 20);\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant x <= 10 on line 12: Partially proven\nInvariant sn <= 20 on line 13: Partially proven\nInvariant x < 10 ==> sn == 2 * x on line 14: Partially proven\nInvariant x >= 10 ==> sn == 20 on line 15: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant (x <= 10) ==> (sn == x * 2);\n    loop invariant (x > 10) ==> (sn == 20);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant (x <= 10) ==> (sn == x * 2);\nloop invariant (x > 10) ==> (sn == 20);\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x on line 10: Partially proven\nInvariant 0 <= sn on line 11: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant (x <= 10) ==> (sn == x * 2);\nloop invariant (x > 10) ==> (sn == 20);\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 10: Partially proven\nInvariant 0 <= sn on line 11: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant x <= 10 ==> sn == 2 * x;\n    loop invariant x > 10 ==> sn == 20;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant x <= 10 ==> sn == 2 * x;\nloop invariant x > 10 ==> sn == 20;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x on line 10: Partially proven\nInvariant 0 <= sn on line 11: Partially proven\nInvariant x <= 10 ==> sn == 2 * x on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant x <= 10 ==> sn == 2 * x;\nloop invariant x > 10 ==> sn == 20;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 10: Partially proven\nInvariant 0 <= sn on line 11: Partially proven\nInvariant x <= 10 ==> sn == 2 * x on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == 2 * x || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == 2 * x || sn == 0;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "success": false,
                "checker_message": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant sn == 2 * x || sn == 0 on line 12: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 19: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant sn == 2 * x || sn == 0;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant sn == 2 * x || sn == 0 on line 12: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 19: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= sn <= 20;\n  loop invariant 0 <= x;\n  loop invariant x <= 10 ==> sn == x * 2;\n  loop invariant x > 10 ==> sn == 20;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= sn <= 20;\nloop invariant 0 <= x;\nloop invariant x <= 10 ==> sn == x * 2;\nloop invariant x > 10 ==> sn == 20;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "success": false,
                "checker_message": "Invariant 0 <= sn <= 20 on line 10: Partially proven\nInvariant 0 <= x on line 11: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant 0 <= sn <= 20;\nloop invariant 0 <= x;\nloop invariant x <= 10 ==> sn == x * 2;\nloop invariant x > 10 ==> sn == 20;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "Invariant 0 <= sn <= 20 on line 10: Partially proven\nInvariant 0 <= x on line 11: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 12: Partially proven\nInvariant x > 10 ==> sn == 20 on line 13: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 20: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the pre-conditions and variable assignments in the program:\n1. sn is initialized to 0.\n2. loop1 and n1 are assigned non-deterministic unsigned integer values.\n3. x is initialized to 0.\n\nNow, let's analyze the loop condition and loop body:\n1. The loop is a while(1) loop, which means it will run indefinitely.\n2. The loop increments the value of sn by 2 if x < 10.\n3. The loop increments the value of x by 1 in each iteration.\n\nNow, let's write the loop invariants:\n\n1. sn is always non-negative.\n2. x is always non-negative.\n3. x is always less than or equal to 10.\n4. sn is always less than or equal to 20.\n5. If x < 10, then sn == 2 * x.\n6. If x >= 10, then sn == 20.\n\nPutting it all together, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x <= 10;\n    loop invariant sn <= 20;\n    loop invariant (x < 10) ==> (sn == 2 * x);\n    loop invariant (x >= 10) ==> (sn == 20);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the initial variable assignments and the loop condition. In the given program, `sn = 0`, `loop1` and `n1` are non-deterministic unsigned integers, and `x = 0`. The loop condition is `1`, which means it is an infinite loop.\n\nNow, let's analyze the loop body and find the loop invariants:\n1. `x` is incremented by 1 in each iteration.\n2. `sn` is incremented by 2 when `x < 10`.\n3. After the loop, the assertion checks if `sn == x * 2` or `sn == 0`.\n\nConsidering these properties, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant (x <= 10) ==> (sn == x * 2);\n    loop invariant (x > 10) ==> (sn == 20);\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition in the assertion."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Variables and assignments:\n   - sn = 0 (initial value)\n   - loop1 = unknown_uint() (unknown value)\n   - n1 = unknown_uint() (unknown value)\n   - x = 0 (initial value)\n\n2. Loop body:\n   - If x < 10, sn is incremented by 2.\n   - x is incremented by 1 in each iteration.\n\n3. Loop condition:\n   - The loop is an infinite loop (while(1)).\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant x <= 10 ==> sn == 2 * x;\n    loop invariant x > 10 ==> sn == 20;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the variable assignments in the program:\n- sn = 0\n- loop1 = unknown_uint()\n- n1 = unknown_uint()\n- x = 0\n\nNext, we analyze the loop body and note the loop condition:\n- There is no specific loop condition, as the loop is infinite (while(1)).\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == 2 * x || sn == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. sn = 0\n2. loop1, n1, and x are unknown unsigned integers.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop is a while(1) loop, which means it is an infinite loop.\n2. Inside the loop, there's a condition (x < 10), and if it's true, sn is incremented by 2.\n3. x is incremented by 1 in every iteration.\n\nNow, let's find the loop invariants that hold before the loop execution, in every iteration, and after the loop termination. We will use implications to handle the conditional nature of the code.\n\n```\n/*@ \n  loop invariant 0 <= sn <= 20;\n  loop invariant 0 <= x;\n  loop invariant x <= 10 ==> sn == x * 2;\n  loop invariant x > 10 ==> sn == 20;\n*/\n```\n\nHere's the explanation of the loop invariants:\n\n1. The first invariant bounds the value of sn between 0 and 20, as it can only increment by 2 for x < 10.\n2. The second invariant ensures that x is always non-negative.\n3. The third invariant states that if x is less than or equal to 10, sn is equal to x times 2.\n4. The fourth invariant states that if x is greater than 10, sn is equal to 20."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x <= 10;\n    loop invariant sn <= 20;\n    loop invariant (x < 10) ==> (sn == 2 * x);\n    loop invariant (x >= 10) ==> (sn == 20);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant (x <= 10) ==> (sn == x * 2);\n    loop invariant (x > 10) ==> (sn == 20);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n    loop invariant x <= 10 ==> sn == 2 * x;\n    loop invariant x > 10 ==> sn == 20;\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == 2 * x || sn == 0;\n*/",
            "/*@ \n  loop invariant 0 <= sn <= 20;\n  loop invariant 0 <= x;\n  loop invariant x <= 10 ==> sn == x * 2;\n  loop invariant x > 10 ==> sn == 20;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant sn <= 20;\nloop invariant (x < 10) ==> (sn == 2 * x);\nloop invariant (x >= 10) ==> (sn == 20);\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant (x <= 10) ==> (sn == x * 2);\nloop invariant (x > 10) ==> (sn == 20);\nloop invariant x <= 10 ==> sn == 2 * x;\nloop invariant x > 10 ==> sn == 20;\nloop invariant sn == 2 * x || sn == 0;\nloop invariant 0 <= sn <= 20;\nloop invariant x <= 10 ==> sn == x * 2;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
        "checker_output": false,
        "checker_message": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant x <= 10 on line 12: Partially proven\nInvariant sn <= 20 on line 13: Partially proven\nInvariant x < 10 ==> sn == 2 * x on line 14: Partially proven\nInvariant x >= 10 ==> sn == 20 on line 15: Partially proven\nInvariant 0 <= x on line 16: Partially proven\nInvariant 0 <= sn on line 17: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 18: Partially proven\nInvariant x > 10 ==> sn == 20 on line 19: Partially proven\nInvariant x <= 10 ==> sn == 2 * x on line 20: Partially proven\nInvariant x > 10 ==> sn == 20 on line 21: Partially proven\nInvariant sn == 2 * x || sn == 0 on line 22: Partially proven\nInvariant 0 <= sn <= 20 on line 23: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 24: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 31: Unknown\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  /*@\nloop invariant sn >= 0;\nloop invariant x >= 0;\nloop invariant x <= 10;\nloop invariant sn <= 20;\nloop invariant (x < 10) ==> (sn == 2 * x);\nloop invariant (x >= 10) ==> (sn == 20);\nloop invariant 0 <= x;\nloop invariant 0 <= sn;\nloop invariant (x <= 10) ==> (sn == x * 2);\nloop invariant (x > 10) ==> (sn == 20);\nloop invariant x <= 10 ==> sn == 2 * x;\nloop invariant x > 10 ==> sn == 20;\nloop invariant sn == 2 * x || sn == 0;\nloop invariant 0 <= sn <= 20;\nloop invariant x <= 10 ==> sn == x * 2;\n*/\nwhile(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant sn >= 0 on line 10: Partially proven\nInvariant x >= 0 on line 11: Partially proven\nInvariant x <= 10 on line 12: Partially proven\nInvariant sn <= 20 on line 13: Partially proven\nInvariant x < 10 ==> sn == 2 * x on line 14: Partially proven\nInvariant x >= 10 ==> sn == 20 on line 15: Partially proven\nInvariant 0 <= x on line 16: Partially proven\nInvariant 0 <= sn on line 17: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 18: Partially proven\nInvariant x > 10 ==> sn == 20 on line 19: Partially proven\nInvariant x <= 10 ==> sn == 2 * x on line 20: Partially proven\nInvariant x > 10 ==> sn == 20 on line 21: Partially proven\nInvariant sn == 2 * x || sn == 0 on line 22: Partially proven\nInvariant 0 <= sn <= 20 on line 23: Partially proven\nInvariant x <= 10 ==> sn == x * 2 on line 24: Partially proven\nPost-condition sn == x * 2 || sn == 0 on line 31: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 155,
        "success_rate": 0.535483870967742
    }
}