{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= mid;\n    loop invariant hi == 2 * mid + lo - mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= mid;\nloop invariant hi == 2 * mid + lo - mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant lo >= 0 on line 14: Partially proven\nInvariant mid >= 0 on line 15: Partially proven\nInvariant hi >= mid on line 16: Partially proven\nInvariant hi == (2 * mid + lo) - mid on line 17: Unknown\nPost-condition lo == hi on line 24: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= mid;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant lo >= 0 on line 14: Valid\nInvariant mid >= 0 on line 15: Valid\nInvariant hi >= mid on line 16: Valid\nPost-condition lo == hi on line 24: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= lo <= mid on line 14: Unknown\nInvariant 0 <= mid <= 1000000 on line 15: Partially proven\nInvariant hi == 2 * mid on line 16: Unknown\nPost-condition lo == hi on line 23: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant 0 <= mid <= LARGE_INT;\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= mid <= 1000000 on line 15: Valid\nPost-condition lo == hi on line 23: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo <= hi;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= hi;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi == 2*mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "Invariant 0 <= lo <= hi on line 14: Valid\nInvariant 0 <= mid <= 1000000 on line 15: Valid\nInvariant hi == 2 * mid + lo on line 16: Valid\nPost-condition lo == hi on line 23: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "Invariant 0 <= lo on line 14: Valid\nInvariant 0 <= mid <= 1000000 on line 15: Valid\nInvariant 0 <= hi <= 2 * 1000000 on line 16: Valid\nInvariant hi == 2 * mid + lo on line 17: Valid\nPost-condition lo == hi on line 24: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant lo <= LARGE_INT;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant lo + mid <= LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo + mid <= LARGE_INT;\nloop invariant hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "Invariant lo >= 0 on line 14: Valid\nInvariant mid >= 0 on line 15: Valid\nInvariant hi >= 0 on line 16: Valid\nInvariant lo <= 1000000 on line 17: Valid\nInvariant mid <= 1000000 on line 18: Valid\nInvariant hi <= 2 * 1000000 on line 19: Valid\nInvariant lo + mid <= 1000000 on line 20: Valid\nInvariant hi == 2 * mid + lo on line 21: Valid\nPost-condition lo == hi on line 28: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `lo` is initialized to 0.\n2. `mid` is assigned a value from `unknown_int()`, and the program continues only if `mid > 0 && mid <= LARGE_INT`.\n3. `hi` is initialized to `2 * mid`.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop continues while `mid > 0`.\n- In each iteration, `lo` is incremented by 1, `hi` is decremented by 1, and `mid` is decremented by 1.\n\nNow let's find the necessary loop invariants:\n\n1. Since `lo` is incremented by 1 in each iteration, `lo` must be non-negative before and during the loop.\n2. Since `mid` is decremented by 1 in each iteration, it must be non-negative during the loop.\n3. `hi` is initially `2 * mid` and is decremented by 1 in each iteration, so it must be at least `mid` during the loop.\n4. The value of `hi` at the end of the loop must be equal to the value of `lo`.\n\nTherefore, the loop invariants are:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= mid;\n    loop invariant hi == 2 * mid + lo - mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the initial variable assignments and pre-conditions:\n- lo = 0\n- mid = unknown_int()\n- hi = 2 * mid\n- The pre-condition is: mid > 0 && mid <= LARGE_INT\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: mid > 0\n- Loop body: lo = lo + 1; hi = hi - 1; mid = mid - 1;\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- lo is assigned the value 0\n- mid is assigned an unknown value from the unknown_int() function\n- hi is assigned 2*mid\n\nNow, let's analyze the loop condition and body:\n- The loop condition is `mid > 0`\n- Inside the loop, `lo` is incremented by 1, `hi` is decremented by 1, and `mid` is decremented by 1\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants should imply the post-condition `lo == hi`.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= lo <= hi;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- lo = 0\n- mid = unknown_int()\n- if (!(mid > 0 && mid <= LARGE_INT)) return 0; // mid is in the range (0, LARGE_INT]\n- hi = 2 * mid\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is mid > 0.\n- Inside the loop, the following updates happen:\n  - lo = lo + 1\n  - hi = hi - 1\n  - mid = mid - 1\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= lo;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/\n```\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition `lo == hi`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of pre-conditions, variable assignments, and loop condition.\n\nPre-conditions:\n- mid > 0\n- mid <= LARGE_INT\n\nVariable assignments:\n- lo = 0\n- mid = unknown_int()\n- hi = 2 * mid\n\nLoop condition:\n- mid > 0\n\nNow, let's find the loop invariants. We need invariants that hold (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination.\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant lo <= LARGE_INT;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant lo + mid <= LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= mid;\n    loop invariant hi == 2 * mid + lo - mid;\n*/",
            "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n*/",
            "/*@ \n    loop invariant 0 <= lo <= hi;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
            "/*@ \n    loop invariant 0 <= lo;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant lo <= LARGE_INT;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant lo + mid <= LARGE_INT;\n    loop invariant hi == 2 * mid + lo;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= mid;\nloop invariant hi == 2 * mid + lo - mid;\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\nloop invariant 0 <= lo <= hi;\nloop invariant hi == 2*mid + lo;\nloop invariant 0 <= lo;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant hi == 2 * mid + lo;\nloop invariant hi >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo + mid <= LARGE_INT;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant lo >= 0 on line 14: Partially proven\nInvariant mid >= 0 on line 15: Partially proven\nInvariant hi >= mid on line 16: Partially proven\nInvariant hi == (2 * mid + lo) - mid on line 17: Unknown\nInvariant 0 <= lo <= mid on line 18: Partially proven\nInvariant 0 <= mid <= 1000000 on line 19: Partially proven\nInvariant hi == 2 * mid on line 20: Partially proven\nInvariant 0 <= lo <= hi on line 21: Partially proven\nInvariant hi == 2 * mid + lo on line 22: Partially proven\nInvariant 0 <= lo on line 23: Partially proven\nInvariant 0 <= hi <= 2 * 1000000 on line 24: Partially proven\nInvariant hi == 2 * mid + lo on line 25: Partially proven\nInvariant hi >= 0 on line 26: Partially proven\nInvariant lo <= 1000000 on line 27: Partially proven\nInvariant mid <= 1000000 on line 28: Partially proven\nInvariant hi <= 2 * 1000000 on line 29: Partially proven\nInvariant lo + mid <= 1000000 on line 30: Partially proven\nPost-condition lo == hi on line 37: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= mid;\n\n\nloop invariant 0 <= mid <= LARGE_INT;\n\nloop invariant 0 <= lo <= hi;\nloop invariant hi == 2*mid + lo;\nloop invariant 0 <= lo;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant hi == 2 * mid + lo;\nloop invariant hi >= 0;\nloop invariant lo <= LARGE_INT;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant lo + mid <= LARGE_INT;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant lo >= 0 on line 14: Valid\nInvariant mid >= 0 on line 15: Valid\nInvariant hi >= mid on line 16: Valid\nInvariant 0 <= mid <= 1000000 on line 19: Valid\nInvariant 0 <= lo <= hi on line 21: Valid\nInvariant hi == 2 * mid + lo on line 22: Valid\nInvariant 0 <= lo on line 23: Valid\nInvariant 0 <= hi <= 2 * 1000000 on line 24: Valid\nInvariant hi == 2 * mid + lo on line 25: Valid\nInvariant hi >= 0 on line 26: Valid\nInvariant lo <= 1000000 on line 27: Valid\nInvariant mid <= 1000000 on line 28: Valid\nInvariant hi <= 2 * 1000000 on line 29: Valid\nInvariant lo + mid <= 1000000 on line 30: Valid\nPost-condition lo == hi on line 37: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 323,
        "success_rate": 0.5851393188854489
    }
}