{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x < 100 && z < 100;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: z >= 0;\nloop invariant i3: x < 100 && z < 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\nloop invariant i3: x < 100 && z < 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x <= z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\nloop invariant i2: z >= 100;\nloop invariant i3: x <= z;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n    loop invariant 100 <= x || z <= 100;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: 0 <= x && x < 100;\nloop invariant i2: z <= 100;\nloop invariant i3: 100 <= x || z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\nloop invariant i2: z <= 100;\nloop invariant i3: 100 <= x || z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: 0 <= x && x < 100;\nloop invariant i2: z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\nloop invariant i2: z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= 100;\n    loop invariant z <= 100;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: z >= 0;\nloop invariant i3: x <= 100;\nloop invariant i4: z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\nloop invariant i3: x <= 100;\nloop invariant i4: z <= 100;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant y == \\at(y, Pre);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: z >= 0 && z <= 100;\nloop invariant i3: y == \\at(y, Pre);\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 16: unbound logic variable y. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant 0 <= y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: z >= 0 && z <= 100;\nloop invariant i3: 0 <= y;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is preserved but not established.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x < 100;\n    loop invariant 100 <= z;\n    loop invariant x + z == \\at(x, Pre) + \\at(z, Pre);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: 0 <= x < 100;\nloop invariant i2: 100 <= z;\nloop invariant i3: x + z == \\at(x, Pre) + \\at(z, Pre);\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 16: unbound logic variable x. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x - y + z == unknown_int() - unknown_int() + unknown_int();\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\nloop invariant i2: z >= 100;\nloop invariant i3: x - y + z == unknown_int() - unknown_int() + unknown_int();\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 16: unexpected token ')'",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x <= 100;\n    loop invariant z <= 100;\n    loop invariant x >= 0;\n    loop invariant z >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\nloop invariant i2: z <= 100;\nloop invariant i3: x >= 0;\nloop invariant i4: z >= 0;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is preserved but not established.\nAssertion x >= 100 || z <= 100: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x <= 100;\nloop invariant i2: z <= 100;\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x < 100 && z < 100;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x <= z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n    loop invariant 100 <= x || z <= 100;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= 100;\n    loop invariant z <= 100;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant y == \\at(y, Pre);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant 0 <= y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= x < 100;\n    loop invariant 100 <= z;\n    loop invariant x + z == \\at(x, Pre) + \\at(z, Pre);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x - y + z == unknown_int() - unknown_int() + unknown_int();\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant x <= 100;\n    loop invariant z <= 100;\n    loop invariant x >= 0;\n    loop invariant z >= 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x < 100 && z < 100;\n*/",
            "/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x <= z;\n*/",
            "/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n    loop invariant 100 <= x || z <= 100;\n*/",
            "/*@ \n    loop invariant 0 <= x && x < 100;\n    loop invariant z <= 100;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= 100;\n    loop invariant z <= 100;\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant y == \\at(y, Pre);\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant z >= 0 && z <= 100;\n    loop invariant 0 <= y;\n*/",
            "/*@ \n    loop invariant 0 <= x < 100;\n    loop invariant 100 <= z;\n    loop invariant x + z == \\at(x, Pre) + \\at(z, Pre);\n*/",
            "/*@ \n    loop invariant x <= 100;\n    loop invariant z >= 100;\n    loop invariant x - y + z == unknown_int() - unknown_int() + unknown_int();\n*/",
            "/*@ \n    loop invariant x <= 100;\n    loop invariant z <= 100;\n    loop invariant x >= 0;\n    loop invariant z >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: z >= 0;\nloop invariant i3: x < 100 && z < 100;\nloop invariant i4: x <= 100;\nloop invariant i5: z >= 100;\nloop invariant i6: x <= z;\nloop invariant i7: 0 <= x && x < 100;\nloop invariant i8: z <= 100;\nloop invariant i9: 100 <= x || z <= 100;\nloop invariant i10: 0 <= x && x < 100;\nloop invariant i11: z <= 100;\nloop invariant i12: x >= 0;\nloop invariant i13: z >= 0;\nloop invariant i14: x <= 100;\nloop invariant i15: z <= 100;\nloop invariant i16: x >= 0 && x <= 100;\nloop invariant i17: z >= 0 && z <= 100;\nloop invariant i18: y == \\at(y, Pre);\nloop invariant i19: x >= 0 && x <= 100;\nloop invariant i20: z >= 0 && z <= 100;\nloop invariant i21: 0 <= y;\nloop invariant i22: 0 <= x < 100;\nloop invariant i23: 100 <= z;\nloop invariant i24: x + z == \\at(x, Pre) + \\at(z, Pre);\nloop invariant i25: x <= 100;\nloop invariant i26: z >= 100;\nloop invariant i27: x - y + z == unknown_int() - unknown_int() + unknown_int();\nloop invariant i28: x <= 100;\nloop invariant i29: z <= 100;\nloop invariant i30: x >= 0;\nloop invariant i31: z >= 0;\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}\n",
        "checker_output": false,
        "checker_message": "Annotation error on line 40: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  /*@\n\n\nloop invariant i3: x < 100 && z < 100;\nloop invariant i4: x <= 100;\n\n\n\nloop invariant i8: z <= 100;\nloop invariant i9: 100 <= x || z <= 100;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;//@ assert(x>=100 || z<=100);\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion x >= 100 || z <= 100: Valid\n"
    },
    "stats": {
        "success": [
            1,
            5,
            7,
            8,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94
        ],
        "failure": [
            0,
            2,
            3,
            4,
            6,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            39,
            42,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 92,
        "success_rate": 0.4782608695652174
    }
}