from utilities import *
import sys
import shutil

if len(sys.argv) != 2:
    print("Usage: python run_pipeline.py <Step Number of pipeline|all|clean>")

if not os.path.exists(BOOGIE_PARSED_DIR):
    print(f"Folder {BOOGIE_PARSED_DIR} doesn't exist.\
          Please create this folder and add boogie files generated by the parser.\
          Please make sure the directory structure mirrors {BOOGIE_LLM_DIR}")

if not os.path.exists(BOOGIE_LLM_DIR):
    print(f"Folder {BOOGIE_PARSED_DIR} doesn't exist.\
          Please create this folder and add boogie files with invariants generated by the LLM.\
          Please make sure the directory structure mirrors {BOOGIE_PARSED_DIR}")
    
if sys.argv[1] == "clean":
    if os.path.exists(BOOGIE_WITH_INV_INSERTED_DIR): shutil.rmtree(BOOGIE_WITH_INV_INSERTED_DIR)
    if os.path.exists(BOOGIE_ALL_INV): shutil.rmtree(BOOGIE_ALL_INV)
    if os.path.exists(BOOGIE_REMOVED_INV_SUCCESS): shutil.rmtree(BOOGIE_REMOVED_INV_SUCCESS)
    if os.path.exists(BOOGIE_REMOVED_INV_FAILURE): shutil.rmtree(BOOGIE_REMOVED_INV_FAILURE)
if os.path.exists("results.log"): os.remove("results.log")

if sys.argv[1] == "1" or sys.argv[1] == "all" :
    print(f"===\nStep 1: Splicing invariants from LLM generated code in '{BOOGIE_LLM_DIR}' into trusted code from '{BOOGIE_PARSED_DIR}' and writing to '{BOOGIE_WITH_INV_INSERTED_DIR}'")
    stats = {"Verified": 0, "Error": 0}
    verified = []
    error = []
    i = 0
    for trusted_boogie_root, dirs, files in os.walk(BOOGIE_PARSED_DIR):
        for file in files:
            boogie_translated_code = open(os.path.join(trusted_boogie_root, file)).read()
            llm_boogie_root = trusted_boogie_root.replace(BOOGIE_PARSED_DIR, BOOGIE_LLM_DIR, 1)
            status = False

            if not check_insert_invariant_keyword(boogie_translated_code):
                print(f"Ignoring {file} since it does not have the insert invariant keyword")
                continue

            if os.path.exists(llm_boogie_root):
                for j in range(NUM_COMPLETIONS):
                    boogie_llm_code = open(os.path.join(llm_boogie_root, f"{file[:-4]}_{j}.bpl")).read()        
                    boogie_with_inv_inserted_code = insert_invariants(boogie_translated_code, boogie_llm_code)
                    output_root = trusted_boogie_root.replace(BOOGIE_PARSED_DIR, BOOGIE_WITH_INV_INSERTED_DIR, 1)
                    os.makedirs(output_root, exist_ok=True)
                    output_file_path = os.path.join(output_root, f"{file[:-4]}_{j}.bpl")
                    with open(output_file_path, "w") as f2:
                        f2.write(boogie_with_inv_inserted_code)
                    res, _ = evaluate_boogie_file(output_file_path, print_command=True)
                    status = res or status

                if status:
                    verified.append(file)
                    stats["Verified"] += 1
                else:
                    error.append(file)
                    stats["Error"] += 1
                i += 1
                print(i, file, "Verified" if status else "Error")
            else:
                print(f"Folder {trusted_boogie_root} does not have a corresponding folder {llm_boogie_root}")
                exit(1)

    with open("results.log", "a") as f:
        f.write("Statistics for Step 1:\n")
        f.write(f"Verified: {stats['Verified']}, Error: {stats['Error']}")
        f.write("\n")

if sys.argv[1] == "2" or sys.argv[1] == "all" :
    print(f"===\nStep 2: Splice invariants from all LLM generated files in '{BOOGIE_LLM_DIR}' into trusted code from '{BOOGIE_PARSED_DIR}' and write to '{BOOGIE_ALL_INV}'")
    for trusted_boogie_root, dirs, files in os.walk(BOOGIE_PARSED_DIR):
        for file in files:
            llm_boogie_root = trusted_boogie_root.replace(BOOGIE_PARSED_DIR, BOOGIE_LLM_DIR, 1)
            if os.path.exists(llm_boogie_root):
                boogie_translated_code = open(os.path.join(trusted_boogie_root, file)).read()
                
                if not check_insert_invariant_keyword(boogie_translated_code):
                    print(f"Ignoring {file} since it does not have the insert invariant keyword")
                    continue

                invariants = []
                for j in range(NUM_COMPLETIONS):
                        boogie_llm_code = open(os.path.join(llm_boogie_root, f"{file[:-4]}_{j}.bpl")).read()
                        invariants.extend(get_invariants(boogie_llm_code))

                output_root = trusted_boogie_root.replace(BOOGIE_PARSED_DIR, BOOGIE_ALL_INV, 1)
                os.makedirs(output_root, exist_ok=True)
                output_file_path = os.path.join(output_root, file)
                with open(output_file_path, "w") as f2:
                    f2.write(splice_invariants(boogie_translated_code, invariants))
                print(output_file_path)

if sys.argv[1] == "3" or sys.argv[1] == "all" :
    print(f"===\nStep 3: Prune invariants and if verified, write to {BOOGIE_REMOVED_INV_SUCCESS} else restore invariants and write to {BOOGIE_REMOVED_INV_FAILURE}")
    stats = {"Verified": 0, "Error": 0}
    i = 1
    for root, dirs, files in os.walk(BOOGIE_ALL_INV):
        for file in files:
            file_path = os.path.join(root, file)
            status, _ = evaluate_boogie_file(file_path)
            if not status:
                boogie_code_orig = open(file_path).read()
                boogie_code = boogie_code_orig
                boogie_code = partition_invariants(boogie_code)
                status, _ = evaluate_boogie_code(boogie_code)
                if status:
                    output_root = root.replace(BOOGIE_ALL_INV, BOOGIE_REMOVED_INV_SUCCESS, 1)
                    os.makedirs(output_root, exist_ok=True)
                    with open(os.path.join(output_root, file), "w") as f2:
                        f2.write(boogie_code)
                    print(f"{i} - Success {file} - Partitioned invariants")
                    stats['Verified'] += 1
                else:
                    output_root = root.replace(BOOGIE_ALL_INV, BOOGIE_REMOVED_INV_FAILURE, 1)
                    os.makedirs(output_root, exist_ok=True)
                    with open(os.path.join(output_root, file), "w") as f2:
                        f2.write(boogie_code_orig)
                    print(f"{i} - Failed {file}")
                    stats['Error'] += 1
            else:
                boogie_code = open(file_path).read()
                output_root = root.replace(BOOGIE_ALL_INV, BOOGIE_REMOVED_INV_SUCCESS, 1)
                os.makedirs(output_root, exist_ok=True)
                with open(os.path.join(output_root, file), "w") as f2:
                    f2.write(boogie_code)
                print(f"{i} - Success {file} - No change")
                stats['Verified'] += 1
            i += 1
    with open("results.log", "a") as f:
        f.write("Statistics for Step 3:\n")
        f.write(f"Verified: {stats['Verified']}, Error: {stats['Error']}")
        f.write("\n")
