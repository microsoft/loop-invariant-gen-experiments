{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X4 + X5 + X6 == X1 + X2 + X3 + X4 - 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\nloop invariant X1 + X2 >= X4 + X5;\nloop invariant X1 + X2 + X3 >= 1;\nloop invariant X4 + X5 + X6 == X1 + X2 + X3 + X4 - 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "success": false,
                "checker_message": "Invariant X1 >= 0 on line 24: Partially proven\nInvariant X2 >= 0 on line 25: Partially proven\nInvariant X3 >= 0 on line 26: Partially proven\nInvariant X4 >= 0 on line 27: Partially proven\nInvariant X5 >= 0 on line 28: Partially proven\nInvariant X6 >= 0 on line 29: Partially proven\nInvariant X1 + X5 >= 1 on line 30: Partially proven\nInvariant X1 + X2 >= X4 + X5 on line 31: Unknown\nInvariant (X1 + X2) + X3 >= 1 on line 32: Partially proven\nInvariant (X4 + X5) + X6 == (((X1 + X2) + X3) + X4) - 1 on line 33: Unknown\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 87: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 89: Unknown\nPost-condition X4 + X5 <= 1 on line 91: Partially proven\nPost-condition X5 >= 0 on line 93: Partially proven\nPost-condition X4 >= 0 on line 95: Partially proven\nPost-condition X3 >= 0 on line 97: Partially proven\nPost-condition X2 >= 0 on line 99: Partially proven\nPost-condition X1 + X5 >= 1 on line 101: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 103: Partially proven\nPost-condition (X1 + X2) + X3 >= 1 on line 105: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\n\nloop invariant X1 + X2 + X3 >= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}",
                "checker_message_after_prune": "Invariant X1 >= 0 on line 24: Valid\nInvariant X2 >= 0 on line 25: Valid\nInvariant X3 >= 0 on line 26: Valid\nInvariant X4 >= 0 on line 27: Valid\nInvariant X5 >= 0 on line 28: Valid\nInvariant X6 >= 0 on line 29: Valid\nInvariant X1 + X5 >= 1 on line 30: Valid\nInvariant (X1 + X2) + X3 >= 1 on line 32: Valid\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 87: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 89: Unknown\nPost-condition X4 + X5 <= 1 on line 91: Partially proven\nPost-condition X5 >= 0 on line 93: Partially proven\nPost-condition X4 >= 0 on line 95: Partially proven\nPost-condition X3 >= 0 on line 97: Partially proven\nPost-condition X2 >= 0 on line 99: Partially proven\nPost-condition X1 + X5 >= 1 on line 101: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 103: Unknown\nPost-condition (X1 + X2) + X3 >= 1 on line 105: Partially proven\n"
            },
            {
                "invariants": "int X1;\nint X2;\nint X3;\nint X4;\nint X5;\nint X6;\n\nif (! (X1>=1)) return 0;\nif (! (X2==0)) return 0;\nif (! (X3==0)) return 0;\nif (! (X4==1)) return 0;\nif (! (X5==0)) return 0;\nif (! (X6==0)) return 0;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "checker_message_after_prune": "No invariants/variants found"
            },
            {
                "invariants": "/*@ \n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X4 + X5 + X6 >= 1;\n    loop invariant X4 + X5 <= 1;\n    loop invariant X5 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X2 >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 + X2 + X3 >= 1;\nloop invariant X1 + X5 >= 1;\nloop invariant X1 + X2 >= X4 + X5;\nloop invariant X4 + X5 + X6 >= 1;\nloop invariant X4 + X5 <= 1;\nloop invariant X5 >= 0;\nloop invariant X4 >= 0;\nloop invariant X3 >= 0;\nloop invariant X2 >= 0;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "success": false,
                "checker_message": "Invariant (X1 + X2) + X3 >= 1 on line 24: Partially proven\nInvariant X1 + X5 >= 1 on line 25: Partially proven\nInvariant X1 + X2 >= X4 + X5 on line 26: Unknown\nInvariant (X4 + X5) + X6 >= 1 on line 27: Partially proven\nInvariant X4 + X5 <= 1 on line 28: Unknown\nInvariant X5 >= 0 on line 29: Partially proven\nInvariant X4 >= 0 on line 30: Partially proven\nInvariant X3 >= 0 on line 31: Partially proven\nInvariant X2 >= 0 on line 32: Partially proven\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 86: Partially proven\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 88: Unknown\nPost-condition X4 + X5 <= 1 on line 90: Partially proven\nPost-condition X5 >= 0 on line 92: Partially proven\nPost-condition X4 >= 0 on line 94: Partially proven\nPost-condition X3 >= 0 on line 96: Partially proven\nPost-condition X2 >= 0 on line 98: Partially proven\nPost-condition X1 + X5 >= 1 on line 100: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 102: Partially proven\nPost-condition (X1 + X2) + X3 >= 1 on line 104: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 + X2 + X3 >= 1;\n\n\nloop invariant X4 + X5 + X6 >= 1;\n\nloop invariant X5 >= 0;\n\nloop invariant X3 >= 0;\nloop invariant X2 >= 0;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}",
                "checker_message_after_prune": "Invariant (X1 + X2) + X3 >= 1 on line 24: Valid\nInvariant (X4 + X5) + X6 >= 1 on line 27: Valid\nInvariant X5 >= 0 on line 29: Valid\nInvariant X3 >= 0 on line 31: Valid\nInvariant X2 >= 0 on line 32: Valid\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 86: Valid\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 88: Unknown\nPost-condition X4 + X5 <= 1 on line 90: Unknown\nPost-condition X5 >= 0 on line 92: Partially proven\nPost-condition X4 >= 0 on line 94: Unknown\nPost-condition X3 >= 0 on line 96: Partially proven\nPost-condition X2 >= 0 on line 98: Partially proven\nPost-condition X1 + X5 >= 1 on line 100: Unknown\nPost-condition X1 + X2 >= X4 + X5 on line 102: Unknown\nPost-condition (X1 + X2) + X3 >= 1 on line 104: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X4 + X5 <= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X2 >= X4 + X5;\nloop invariant X1 + X2 + X3 >= 1;\nloop invariant X1 + X5 >= 1;\nloop invariant X4 + X5 <= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "success": false,
                "checker_message": "Invariant X1 >= 0 on line 24: Partially proven\nInvariant X2 >= 0 on line 25: Partially proven\nInvariant X3 >= 0 on line 26: Partially proven\nInvariant X4 >= 0 on line 27: Partially proven\nInvariant X5 >= 0 on line 28: Partially proven\nInvariant X6 >= 0 on line 29: Partially proven\nInvariant X1 + X2 >= X4 + X5 on line 30: Unknown\nInvariant (X1 + X2) + X3 >= 1 on line 31: Partially proven\nInvariant X1 + X5 >= 1 on line 32: Partially proven\nInvariant X4 + X5 <= 1 on line 33: Unknown\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 87: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 89: Unknown\nPost-condition X4 + X5 <= 1 on line 91: Partially proven\nPost-condition X5 >= 0 on line 93: Partially proven\nPost-condition X4 >= 0 on line 95: Partially proven\nPost-condition X3 >= 0 on line 97: Partially proven\nPost-condition X2 >= 0 on line 99: Partially proven\nPost-condition X1 + X5 >= 1 on line 101: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 103: Partially proven\nPost-condition (X1 + X2) + X3 >= 1 on line 105: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\n\nloop invariant X1 + X2 + X3 >= 1;\nloop invariant X1 + X5 >= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}",
                "checker_message_after_prune": "Invariant X1 >= 0 on line 24: Valid\nInvariant X2 >= 0 on line 25: Valid\nInvariant X3 >= 0 on line 26: Valid\nInvariant X4 >= 0 on line 27: Valid\nInvariant X5 >= 0 on line 28: Valid\nInvariant X6 >= 0 on line 29: Valid\nInvariant (X1 + X2) + X3 >= 1 on line 31: Valid\nInvariant X1 + X5 >= 1 on line 32: Valid\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 87: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 89: Unknown\nPost-condition X4 + X5 <= 1 on line 91: Partially proven\nPost-condition X5 >= 0 on line 93: Partially proven\nPost-condition X4 >= 0 on line 95: Partially proven\nPost-condition X3 >= 0 on line 97: Partially proven\nPost-condition X2 >= 0 on line 99: Partially proven\nPost-condition X1 + X5 >= 1 on line 101: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 103: Unknown\nPost-condition (X1 + X2) + X3 >= 1 on line 105: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\nloop invariant X1 + X2 >= X4 + X5;\nloop invariant X1 + X2 + X3 >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
                "success": false,
                "checker_message": "Invariant X1 >= 0 on line 24: Partially proven\nInvariant X2 >= 0 on line 25: Partially proven\nInvariant X3 >= 0 on line 26: Partially proven\nInvariant X4 >= 0 on line 27: Partially proven\nInvariant X5 >= 0 on line 28: Partially proven\nInvariant X6 >= 0 on line 29: Partially proven\nInvariant X1 + X5 >= 1 on line 30: Partially proven\nInvariant X1 + X2 >= X4 + X5 on line 31: Unknown\nInvariant (X1 + X2) + X3 >= 1 on line 32: Partially proven\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 86: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 88: Unknown\nPost-condition X4 + X5 <= 1 on line 90: Partially proven\nPost-condition X5 >= 0 on line 92: Partially proven\nPost-condition X4 >= 0 on line 94: Partially proven\nPost-condition X3 >= 0 on line 96: Partially proven\nPost-condition X2 >= 0 on line 98: Partially proven\nPost-condition X1 + X5 >= 1 on line 100: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 102: Partially proven\nPost-condition (X1 + X2) + X3 >= 1 on line 104: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\n\nloop invariant X1 + X2 + X3 >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}",
                "checker_message_after_prune": "Invariant X1 >= 0 on line 24: Valid\nInvariant X2 >= 0 on line 25: Valid\nInvariant X3 >= 0 on line 26: Valid\nInvariant X4 >= 0 on line 27: Valid\nInvariant X5 >= 0 on line 28: Valid\nInvariant X6 >= 0 on line 29: Valid\nInvariant X1 + X5 >= 1 on line 30: Valid\nInvariant (X1 + X2) + X3 >= 1 on line 32: Valid\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 86: Unknown\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 88: Unknown\nPost-condition X4 + X5 <= 1 on line 90: Partially proven\nPost-condition X5 >= 0 on line 92: Partially proven\nPost-condition X4 >= 0 on line 94: Partially proven\nPost-condition X3 >= 0 on line 96: Partially proven\nPost-condition X2 >= 0 on line 98: Partially proven\nPost-condition X1 + X5 >= 1 on line 100: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 102: Unknown\nPost-condition (X1 + X2) + X3 >= 1 on line 104: Partially proven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- X1 >= 1\n- X2 == 0\n- X3 == 0\n- X4 == 1\n- X5 == 0\n- X6 == 0\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_int(), which is non-deterministic.\n\nOutput loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X4 + X5 + X6 == X1 + X2 + X3 + X4 - 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments:\n\n```\nint X1;\nint X2;\nint X3;\nint X4;\nint X5;\nint X6;\n\nif (! (X1>=1)) return 0;\nif (! (X2==0)) return 0;\nif (! (X3==0)) return 0;\nif (! (X4==1)) return 0;\nif (! (X5==0)) return 0;\nif (! (X6==0)) return 0;\n```\n\nNext, we analyze the loop body and make a note of the loop condition:\n\n```\nwhile(unknown_int()) {...}\n```\n\nNow, we can output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant X1 >= 1;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X4 + X5 <= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- X1 >= 1\n- X2 == 0\n- X3 == 0\n- X4 == 1\n- X5 == 0\n- X6 == 0\n\nLoop condition:\n- unknown_int()\n\nLoop invariants:\n```\n/*@ \n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X4 + X5 + X6 >= 1;\n    loop invariant X4 + X5 <= 1;\n    loop invariant X5 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X2 >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. X1 >= 1\n2. X2 == 0\n3. X3 == 0\n4. X4 == 1\n5. X5 == 0\n6. X6 == 0\n\nNow let's analyze the loop condition and body. The loop condition is unknown_int(), which means it is a non-deterministic loop that can terminate at any time.\n\nIn the loop body, there are various conditions and operations performed on the variables. We need to find loop invariants that hold true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination.\n\nBased on the given code, we can find the following loop invariants:\n\n```c\n/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X4 + X5 <= 1;\n*/\n```\n\nThese loop invariants hold true before the loop, during every iteration, and after the loop termination, and they help Frama-C verify the post-conditions mentioned in the code."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the preconditions and variable assignments in the program:\n\n- X1 >= 1\n- X2 == 0\n- X3 == 0\n- X4 == 1\n- X5 == 0\n- X6 == 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown_int(), which means we don't have a specific condition for the loop, and it can have any number of iterations.\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post conditions:\n\n```\n/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X4 + X5 + X6 == X1 + X2 + X3 + X4 - 1;\n*/",
            "int X1;\nint X2;\nint X3;\nint X4;\nint X5;\nint X6;\n\nif (! (X1>=1)) return 0;\nif (! (X2==0)) return 0;\nif (! (X3==0)) return 0;\nif (! (X4==1)) return 0;\nif (! (X5==0)) return 0;\nif (! (X6==0)) return 0;",
            "/*@ \n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X4 + X5 + X6 >= 1;\n    loop invariant X4 + X5 <= 1;\n    loop invariant X5 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X2 >= 0;\n*/",
            "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X4 + X5 <= 1;\n*/",
            "/*@ \n    loop invariant X1 >= 0;\n    loop invariant X2 >= 0;\n    loop invariant X3 >= 0;\n    loop invariant X4 >= 0;\n    loop invariant X5 >= 0;\n    loop invariant X6 >= 0;\n    loop invariant X1 + X5 >= 1;\n    loop invariant X1 + X2 >= X4 + X5;\n    loop invariant X1 + X2 + X3 >= 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\nloop invariant X1 + X2 >= X4 + X5;\nloop invariant X1 + X2 + X3 >= 1;\nloop invariant X4 + X5 + X6 == X1 + X2 + X3 + X4 - 1;\nloop invariant X4 + X5 + X6 >= 1;\nloop invariant X4 + X5 <= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
        "checker_output": false,
        "checker_message": "Invariant X1 >= 0 on line 24: Partially proven\nInvariant X2 >= 0 on line 25: Partially proven\nInvariant X3 >= 0 on line 26: Partially proven\nInvariant X4 >= 0 on line 27: Partially proven\nInvariant X5 >= 0 on line 28: Partially proven\nInvariant X6 >= 0 on line 29: Partially proven\nInvariant X1 + X5 >= 1 on line 30: Partially proven\nInvariant X1 + X2 >= X4 + X5 on line 31: Unknown\nInvariant (X1 + X2) + X3 >= 1 on line 32: Partially proven\nInvariant (X4 + X5) + X6 == (((X1 + X2) + X3) + X4) - 1 on line 33: Unknown\nInvariant (X4 + X5) + X6 >= 1 on line 34: Partially proven\nInvariant X4 + X5 <= 1 on line 35: Partially proven\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 89: Partially proven\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 91: Unknown\nPost-condition X4 + X5 <= 1 on line 93: Partially proven\nPost-condition X5 >= 0 on line 95: Partially proven\nPost-condition X4 >= 0 on line 97: Partially proven\nPost-condition X3 >= 0 on line 99: Partially proven\nPost-condition X2 >= 0 on line 101: Partially proven\nPost-condition X1 + X5 >= 1 on line 103: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 105: Partially proven\nPost-condition (X1 + X2) + X3 >= 1 on line 107: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\t/*@\nloop invariant X1 >= 0;\nloop invariant X2 >= 0;\nloop invariant X3 >= 0;\nloop invariant X4 >= 0;\nloop invariant X5 >= 0;\nloop invariant X6 >= 0;\nloop invariant X1 + X5 >= 1;\n\nloop invariant X1 + X2 + X3 >= 1;\n\nloop invariant X4 + X5 + X6 >= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;//@ assert(X4 + X5 <= 1);\n}\n\t{;//@ assert(X5  >= 0);\n}\n\t{;//@ assert(X4  >= 0);\n}\n\t{;//@ assert(X3  >= 0);\n}\n\t{;//@ assert(X2  >= 0);\n}\n\t{;//@ assert(X1 + X5 >= 1);\n}\n\t{;//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant X1 >= 0 on line 24: Valid\nInvariant X2 >= 0 on line 25: Valid\nInvariant X3 >= 0 on line 26: Valid\nInvariant X4 >= 0 on line 27: Valid\nInvariant X5 >= 0 on line 28: Valid\nInvariant X6 >= 0 on line 29: Valid\nInvariant X1 + X5 >= 1 on line 30: Valid\nInvariant (X1 + X2) + X3 >= 1 on line 32: Valid\nInvariant (X4 + X5) + X6 >= 1 on line 34: Valid\nPost-condition ((X4 + X5) + X6) - 1 >= 0 on line 89: Valid\nPost-condition ((X4 + X5) + X6) - 1 <= 0 on line 91: Unknown\nPost-condition X4 + X5 <= 1 on line 93: Partially proven\nPost-condition X5 >= 0 on line 95: Partially proven\nPost-condition X4 >= 0 on line 97: Partially proven\nPost-condition X3 >= 0 on line 99: Partially proven\nPost-condition X2 >= 0 on line 101: Partially proven\nPost-condition X1 + X5 >= 1 on line 103: Partially proven\nPost-condition X1 + X2 >= X4 + X5 on line 105: Unknown\nPost-condition (X1 + X2) + X3 >= 1 on line 107: Partially proven\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [],
        "total": 44,
        "success_rate": 0.36363636363636365
    }
}