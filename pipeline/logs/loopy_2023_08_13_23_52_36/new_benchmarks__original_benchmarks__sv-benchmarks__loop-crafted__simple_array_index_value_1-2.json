{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-crafted/simple_array_index_value_1-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  while (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= tmp < SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp < SIZE;\nloop invariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "Invariant 0 <= tmp < 10000 on line 21: Partially proven\nInvariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i on line 22: Unknown\nPost-condition tmp < 10000 && array[tmp] == tmp on line 33: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp < SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "Invariant 0 <= tmp < 10000 on line 21: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 33: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n  loop invariant tmp <= index;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\nloop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\nloop invariant tmp <= index;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "Invariant 0 <= index <= 10000 on line 21: Partially proven\nInvariant \\forall integer k; 0 <= k < index ==> array[k] == k on line 22: Unknown\nInvariant tmp <= index on line 23: Partially proven\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\n\nloop invariant tmp <= index;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "Invariant 0 <= index <= 10000 on line 21: Valid\nInvariant tmp <= index on line 23: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\nloop invariant 0 <= tmp <= SIZE;\nloop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "Invariant 0 <= index <= 10000 on line 21: Partially proven\nInvariant 0 <= tmp <= 10000 on line 22: Partially proven\nInvariant \\forall integer i; 0 <= i < index ==> array[i] == i on line 23: Unknown\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\nloop invariant 0 <= tmp <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "Invariant 0 <= index <= 10000 on line 21: Valid\nInvariant 0 <= tmp <= 10000 on line 22: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i;\n    loop invariant tmp == index - 1 || tmp == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\nloop invariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i;\nloop invariant tmp == index - 1 || tmp == 0;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "Invariant 0 <= index <= 10000 on line 21: Partially proven\nInvariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i on line 22: Unknown\nInvariant tmp == index - 1 || tmp == 0 on line 23: Unknown\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= index <= SIZE;\n\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "Invariant 0 <= index <= 10000 on line 21: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= tmp && tmp < SIZE;\n  loop invariant \\forall integer k; 0 <= k < tmp ==> array[k] == k;\n  loop invariant index == tmp;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp && tmp < SIZE;\nloop invariant \\forall integer k; 0 <= k < tmp ==> array[k] == k;\nloop invariant index == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "Invariant 0 <= tmp < 10000 on line 21: Partially proven\nInvariant \\forall integer k; 0 <= k < tmp ==> array[k] == k on line 22: Unknown\nInvariant index == tmp on line 23: Partially proven\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp && tmp < SIZE;\n\nloop invariant index == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "Invariant 0 <= tmp < 10000 on line 21: Valid\nInvariant index == tmp on line 23: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 34: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  while (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, we make a note of the pre-conditions or variable assignments in the program:\n- The array has a fixed size of 10000.\n- `index` and `tmp` are initialized to 0.\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop runs indefinitely, and it breaks when `index >= SIZE`.\n\nNow, we can output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= tmp < SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. `unsigned int array[SIZE];`\n2. `unsigned int index = 0;`\n3. `unsigned int tmp = 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: `1` (infinite loop, breaks if `index >= SIZE`)\n\nNow, let's output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post condition:\n```\n/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n  loop invariant tmp <= index;\n*/\n```\n\nThese loop invariants satisfy the requirements and can be used to verify the post-condition using Frama-C."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `unsigned int array[SIZE];` (an array of size SIZE)\n- `unsigned int index = 0;`\n- `unsigned int tmp = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop is a while loop with condition `1`, which means it will keep iterating until a `break` statement is encountered.\n- The loop body assigns `index` with an unknown value returned by `unknown_uint()`.\n- If `index` is greater than or equal to `SIZE`, the loop breaks.\n- The array element at `array[index]` is assigned the value `index`.\n- `tmp` is assigned the value of `index`.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/\n```\n\nThese loop invariants state that:\n1. `index` is always between 0 (inclusive) and `SIZE` (inclusive).\n2. `tmp` is always between 0 (inclusive) and `SIZE` (inclusive).\n3. For all integer values `i` in the range [0, index), the array element at `array[i]` is equal to `i`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `unsigned int array[SIZE];`\n- `unsigned int index = 0;`\n- `unsigned int tmp = 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n- `while (1)` is an infinite loop with a break condition `if (index >= SIZE)`.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i;\n    loop invariant tmp == index - 1 || tmp == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- `unsigned int array[SIZE];`\n- `unsigned int index = 0;`\n- `unsigned int tmp = 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop is a `while(1)` loop, which means it is an infinite loop that breaks only when a certain condition is met.\n- The break condition is `if (index >= SIZE)`.\n\nNow, output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant 0 <= tmp && tmp < SIZE;\n  loop invariant \\forall integer k; 0 <= k < tmp ==> array[k] == k;\n  loop invariant index == tmp;\n*/\n```\n\nThese loop invariants ensure that:\n- `tmp` is always within the valid range of the array.\n- All the elements in the array are set to their respective indices.\n- `index` is equal to `tmp` during the loop execution, which is important for the post-condition."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= tmp < SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i;\n*/",
            "/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n  loop invariant tmp <= index;\n*/",
            "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/",
            "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i;\n    loop invariant tmp == index - 1 || tmp == 0;\n*/",
            "/*@ \n  loop invariant 0 <= tmp && tmp < SIZE;\n  loop invariant \\forall integer k; 0 <= k < tmp ==> array[k] == k;\n  loop invariant index == tmp;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp < SIZE;\nloop invariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i;\nloop invariant 0 <= index <= SIZE;\nloop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\nloop invariant tmp <= index;\nloop invariant 0 <= tmp <= SIZE;\nloop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\nloop invariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i;\nloop invariant tmp == index - 1 || tmp == 0;\nloop invariant 0 <= tmp && tmp < SIZE;\nloop invariant \\forall integer k; 0 <= k < tmp ==> array[k] == k;\nloop invariant index == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= tmp < 10000 on line 21: Partially proven\nInvariant \\forall unsigned int i; 0 <= i < tmp ==> array[i] == i on line 22: Unknown\nInvariant 0 <= index <= 10000 on line 23: Partially proven\nInvariant \\forall integer k; 0 <= k < index ==> array[k] == k on line 24: Partially proven\nInvariant tmp <= index on line 25: Partially proven\nInvariant 0 <= tmp <= 10000 on line 26: Partially proven\nInvariant \\forall integer i; 0 <= i < index ==> array[i] == i on line 27: Partially proven\nInvariant \\forall unsigned int i; 0 <= i < index ==> array[i] == i on line 28: Partially proven\nInvariant tmp == index - 1 || tmp == 0 on line 29: Unknown\nInvariant 0 <= tmp < 10000 on line 30: Partially proven\nInvariant \\forall integer k; 0 <= k < tmp ==> array[k] == k on line 31: Partially proven\nInvariant index == tmp on line 32: Partially proven\nPost-condition tmp < 10000 && array[tmp] == tmp on line 43: Unknown\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant 0 <= tmp < SIZE;\n\nloop invariant 0 <= index <= SIZE;\n\nloop invariant tmp <= index;\nloop invariant 0 <= tmp <= SIZE;\n\n\n\nloop invariant 0 <= tmp && tmp < SIZE;\n\nloop invariant index == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 0 <= tmp < 10000 on line 21: Valid\nInvariant 0 <= index <= 10000 on line 23: Valid\nInvariant tmp <= index on line 25: Valid\nInvariant 0 <= tmp <= 10000 on line 26: Valid\nInvariant 0 <= tmp < 10000 on line 30: Valid\nInvariant index == tmp on line 32: Valid\nPost-condition tmp < 10000 && array[tmp] == tmp on line 43: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 305,
        "success_rate": 0.5245901639344263
    }
}