{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-crafted/simple_array_index_value_1-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  while (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\nloop invariant i3: \\forall integer k; 0 <= k < index ==> array[k] == k;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < tmp ==> array[i] == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= tmp <= SIZE;\nloop invariant i2: 0 <= index <= SIZE;\nloop invariant i3: \\forall integer i; 0 <= i < tmp ==> array[i] == i;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= tmp <= SIZE;\nloop invariant i2: 0 <= index <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= tmp <= SIZE - 1;\n    loop invariant \\forall integer i; 0 <= i < SIZE ==> array[i] == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= tmp <= SIZE - 1;\nloop invariant i2: \\forall integer i; 0 <= i < SIZE ==> array[i] == i;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nAssertion tmp < 10000 && array[tmp] == tmp: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= tmp <= SIZE - 1;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\nloop invariant i3: \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
            },
            {
                "invariants": "/*@\n  loop invariant 0 <= index && index <= SIZE;\n  loop invariant array[tmp] == tmp;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index && index <= SIZE;\nloop invariant i2: array[tmp] == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index && index <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  while (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. The array \"array\" has a size of 10000.\n2. Variables \"index\" and \"tmp\" are initialized to 0.\n\nNow let's analyze the loop body and loop condition:\n\n1. The loop is a while(1) loop, which means it will continue until a break statement is encountered.\n2. The \"index\" variable is assigned a value from the unknown_uint() function.\n3. If \"index\" is greater or equal to SIZE, the loop will break.\n4. The \"array\" at position \"index\" is assigned the value of \"index\".\n5. The \"tmp\" variable is assigned the value of \"index\".\n\nNow, let's output the loop invariants:\n```\n/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. The size of the array is 10000.\n2. The initial value of index and tmp is 0.\n\nNext, let's analyze the loop condition and body:\n\n1. The loop continues until index >= SIZE.\n2. Inside the loop, array[index] is assigned the value of index, and tmp is also assigned the value of index.\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < tmp ==> array[i] == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- The array `array` has a size of `SIZE`.\n- `index` and `tmp` are both unsigned integers initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop is an infinite loop with a conditional break when `index >= SIZE`.\n\nNow let's find the necessary loop invariants:\n- Invariant 1: For all elements `array[i]` where `0 <= i < SIZE`, `array[i]` is either uninitialized or `array[i] == i`.\n- Invariant 2: `tmp` is always between `0` and `SIZE - 1`.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThe loop invariants in ACSL format are:\n\n```\n/*@ \n    loop invariant 0 <= tmp <= SIZE - 1;\n    loop invariant \\forall integer i; 0 <= i < SIZE ==> array[i] == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `unsigned int array[SIZE];`\n2. `unsigned int index = 0;`\n3. `unsigned int tmp = 0;`\n\nNext, let's analyze the loop body and make a note of the loop condition: \n\n`while (1)`: This is an infinite loop that will only break when `index >= SIZE`.\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the pre-conditions and variable assignments in the program:\n- `unsigned int array[SIZE];`\n- `unsigned int index = 0;`\n- `unsigned int tmp = 0;`\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop condition is `while (1)` which means it's an infinite loop that breaks when `index >= SIZE`.\n\nNow, we can output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@\n  loop invariant 0 <= index && index <= SIZE;\n  loop invariant array[tmp] == tmp;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= index <= SIZE;\n    loop invariant 0 <= tmp <= SIZE;\n    loop invariant \\forall integer k; 0 <= k < index ==> array[k] == k;\n */",
            "/*@ \n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant 0 <= index <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < tmp ==> array[i] == i;\n*/",
            "/*@ \n    loop invariant 0 <= tmp <= SIZE - 1;\n    loop invariant \\forall integer i; 0 <= i < SIZE ==> array[i] == i;\n*/",
            "/*@ \n  loop invariant 0 <= index <= SIZE;\n  loop invariant 0 <= tmp <= SIZE;\n  loop invariant \\forall integer i; 0 <= i < index ==> array[i] == i;\n*/",
            "/*@\n  loop invariant 0 <= index && index <= SIZE;\n  loop invariant array[tmp] == tmp;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\nloop invariant i3: \\forall integer k; 0 <= k < index ==> array[k] == k;\nloop invariant i4: 0 <= tmp <= SIZE;\nloop invariant i5: 0 <= index <= SIZE;\nloop invariant i6: \\forall integer i; 0 <= i < tmp ==> array[i] == i;\nloop invariant i7: 0 <= tmp <= SIZE - 1;\nloop invariant i8: \\forall integer i; 0 <= i < SIZE ==> array[i] == i;\nloop invariant i9: 0 <= index <= SIZE;\nloop invariant i10: 0 <= tmp <= SIZE;\nloop invariant i11: \\forall integer i; 0 <= i < index ==> array[i] == i;\nloop invariant i12: 0 <= index && index <= SIZE;\nloop invariant i13: array[tmp] == tmp;\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is preserved but not established.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define SIZE 10000\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n  unsigned int array[SIZE];\n  unsigned int index = 0;\n  unsigned int tmp = 0;\n\n  /*@\nloop invariant i1: 0 <= index <= SIZE;\nloop invariant i2: 0 <= tmp <= SIZE;\n\nloop invariant i4: 0 <= tmp <= SIZE;\nloop invariant i5: 0 <= index <= SIZE;\n\nloop invariant i7: 0 <= tmp <= SIZE - 1;\n\nloop invariant i9: 0 <= index <= SIZE;\nloop invariant i10: 0 <= tmp <= SIZE;\n\nloop invariant i12: 0 <= index && index <= SIZE;\n\n*/\nwhile (1) {\n    index = unknown_uint();\n    if (index >= SIZE) {\n      break;\n    }\n    array[index] = index;\n    tmp = index;\n  }\n\n  {;//@ assert(tmp < SIZE && array[tmp] == tmp);\n}\n  \n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i7 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i12 is inductive.\nAssertion tmp < 10000 && array[tmp] == tmp: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            275,
            276,
            279,
            281,
            282,
            287,
            290,
            293,
            295,
            299,
            301,
            303,
            305
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207,
            215,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            256,
            263,
            267,
            269,
            270,
            271,
            273,
            274,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 303,
        "success_rate": 0.5346534653465347
    }
}