{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex23.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y * 36 + counter < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - (36 - counter);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z <= 4608 - (36 - counter);\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= y <= 127;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= counter <= 36;\nloop invariant i4: \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. y is assigned an unknown integer value.\n2. z is assigned an unknown integer value.\n3. y is in the range [0, 127].\n4. counter is initialized to 0.\n5. z is assigned the value y * 36.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is counter < 36.\n\nNow, let's find the necessary loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. `y` is assigned an unknown integer value.\n2. If `y` is not between 0 and 127 (inclusive), the program returns 0.\n3. `z` is assigned an unknown integer value.\n4. `z` is assigned the value `y * 36`.\n5. `counter` is initialized to 0.\n\nNow, let's analyze the loop body and note the loop condition:\n\n- The loop condition is `counter < 36`.\n\nFinally, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- y is an integer from unknown_int() function and is in the range [0, 127] (inclusive).\n- counter is initialized to 0.\n- z is initialized as y * 36.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (counter < 36).\n\nNow, let's find the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - (36 - counter);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. `y` is assigned an unknown integer value.\n2. `z` is assigned an unknown integer value.\n3. We have two conditions: `0 <= y <= 127` and `z = y * 36`.\n4. `counter` is initialized to 0.\n\nNow let's analyze the loop body:\n\n- Loop condition: `counter < 36`\n- Inside the loop, the following steps occur:\n  1. An assertion checks whether `z` is within the bounds of the array `x`.\n  2. The value at index `z` in the array `x` is set to 0.\n  3. `z` is incremented by 1.\n  4. `counter` is incremented by 1.\n\nNow, let's find the loop invariants:\n\n1. The value of `y` remains unchanged throughout the loop.\n2. The initial value of `z` is `y * 36`, and `z` is incremented by 1 in each iteration.\n3. The value of `counter` starts at 0 and is incremented by 1 in each iteration.\n4. The values of `x[z]` are set to 0 for every `z` in the range [`y * 36`, `y * 36 + 36`).\n\nUsing these observations, we can define the loop invariants as:\n\n```\n@{\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n1. y is a non-negative integer less than or equal to 127.\n2. z is initialized to y * 36.\n3. counter is initialized to 0.\n\nNext, let's analyze the loop condition:\n- The loop executes while counter < 36.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - (36 - counter);\n*/",
            "@{\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n}",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y * 36 + counter < 4608;\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: z == y * 36 + counter;\nloop invariant i6: 0 <= z <= 4608 - 36;\nloop invariant i7: 0 <= counter <= 36;\nloop invariant i8: z == y * 36 + counter;\nloop invariant i9: 0 <= z <= 4608 - (36 - counter);\nloop invariant i10: 0 <= y <= 127;\nloop invariant i11: z == y * 36 + counter;\nloop invariant i12: 0 <= counter <= 36;\nloop invariant i13: \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i14: 0 <= counter <= 36;\nloop invariant i15: z == y * 36 + counter;\nloop invariant i16: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nAssertion 0 == 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: z == y * 36 + counter;\n\nloop invariant i7: 0 <= counter <= 36;\nloop invariant i8: z == y * 36 + counter;\nloop invariant i9: 0 <= z <= 4608 - (36 - counter);\nloop invariant i10: 0 <= y <= 127;\nloop invariant i11: z == y * 36 + counter;\nloop invariant i12: 0 <= counter <= 36;\nloop invariant i13: \\forall int k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i14: 0 <= counter <= 36;\nloop invariant i15: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nAssertion 0 == 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 211,
        "success_rate": 0.5308056872037915
    }
}