{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (\\sum int k; 0 <= k <= x; k <= 50 ? 1 : -1);\n    loop invariant z == (\\sum int k; 0 <= k <= x; k < 25 ? 1 : 5);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == (\\sum int k; 0 <= k <= x; k <= 50 ? 1 : -1);\nloop invariant i3: z == (\\sum int k; 0 <= k <= x; k < 25 ? 1 : 5);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 8: unexpected token 'int'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == x + ((x > 25) ? 4 * (x - 25) : 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == x - ((x > 50) ? (x - 50) : 0);\nloop invariant i3: z == x + ((x > 25) ? 4 * (x - 25) : 0);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z == x + ((x > 25) ? 4 * (x - 25) : 0);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion z == 400: Valid\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 5 * (x - 25) + 25);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == (x <= 50 ? x : 100 - x);\nloop invariant i3: z == (x <= 25 ? x : 5 * (x - 25) + 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z == (x <= 25 ? x : 5 * (x - 25) + 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion z == 400: Valid\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == (x <= 50 ? x : 100 - x);\nloop invariant i3: z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nAssertion z == 400: Partially proven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\nloop invariant i3: z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion z == 400: Valid\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == x - ((x > 50) ? (x - 50) : 0);\nloop invariant i3: z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion z == 400: Unproven\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x = 0\n- y = 0\n- z = 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: x < 100\n\nNow, let's find the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\nWe have three assertions to prove:\n1. z == 400\n2. y == 2\n3. x == 100\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (\\sum int k; 0 <= k <= x; k <= 50 ? 1 : -1);\n    loop invariant z == (\\sum int k; 0 <= k <= x; k < 25 ? 1 : 5);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n```\nx = 0;\ny = 0;\nz = 0;\n```\n\nNext, we analyze the loop body and make a note of the loop condition:\n```\nwhile (x < 100) {\n    ...\n}\n```\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == x + ((x > 25) ? 4 * (x - 25) : 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n```\nx=0; y=0; z=0;\n```\n\nNow, let's analyze the loop body and make a note of the loop condition:\n```\nwhile (x<100) {\n    if(x<=50)\n        y=y+1;\n    else\n        y=y-1;\n\n    if(x<25)\n        z=z+1;\n    else\n        z=z+5;\n\n    x=x+1;\n}\n```\n\nAfter analyzing the loop, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 5 * (x - 25) + 25);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. x = 0\n2. y = 0\n3. z = 0\n\nNow, let's analyze the loop condition and loop body:\n\n- Loop condition: x < 100\n- Loop body:\n  - if(x <= 50) y = y + 1; else y = y - 1;\n  - if(x < 25) z = z + 1; else z = z + 5;\n  - x = x + 1;\n\nNow, let's derive the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-conditions: z == 400, y == 2, and x == 100."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `x = 0`\n2. `y = 0`\n3. `z = 0`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: `x < 100`\n2. Loop body:\n   - If `x <= 50`, `y = y + 1` else `y = y - 1`\n   - If `x < 25`, `z = z + 1` else `z = z + 5`\n   - `x = x + 1`\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/\n```\n\nThese loop invariants hold true before the loop starts, during each iteration, and after the loop terminates. They also imply the post-conditions in the program:\n1. `z == 400`\n2. `y == 2`\n3. `x == 100`"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (\\sum int k; 0 <= k <= x; k <= 50 ? 1 : -1);\n    loop invariant z == (\\sum int k; 0 <= k <= x; k < 25 ? 1 : 5);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == x + ((x > 25) ? 4 * (x - 25) : 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 5 * (x - 25) + 25);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == x - ((x > 50) ? (x - 50) : 0);\n    loop invariant z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\nloop invariant i2: y == (\\sum int k; 0 <= k <= x; k <= 50 ? 1 : -1);\nloop invariant i3: z == (\\sum int k; 0 <= k <= x; k < 25 ? 1 : 5);\nloop invariant i4: 0 <= x <= 100;\nloop invariant i5: y == x - ((x > 50) ? (x - 50) : 0);\nloop invariant i6: z == x + ((x > 25) ? 4 * (x - 25) : 0);\nloop invariant i7: 0 <= x <= 100;\nloop invariant i8: y == (x <= 50 ? x : 100 - x);\nloop invariant i9: z == (x <= 25 ? x : 5 * (x - 25) + 25);\nloop invariant i10: 0 <= x <= 100;\nloop invariant i11: y == (x <= 50 ? x : 100 - x);\nloop invariant i12: z == (x <= 25 ? x : 25 + 5 * (x - 25));\nloop invariant i13: 0 <= x <= 100;\nloop invariant i14: y == x - ((x > 50) ? (x - 50) : 0);\nloop invariant i15: z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 8: unexpected token 'int'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\t/*@\nloop invariant i1: 0 <= x <= 100;\n\n\nloop invariant i4: 0 <= x <= 100;\n\nloop invariant i6: z == x + ((x > 25) ? 4 * (x - 25) : 0);\nloop invariant i7: 0 <= x <= 100;\n\nloop invariant i9: z == (x <= 25 ? x : 5 * (x - 25) + 25);\nloop invariant i10: 0 <= x <= 100;\n\nloop invariant i12: z == (x <= 25 ? x : 25 + 5 * (x - 25));\nloop invariant i13: 0 <= x <= 100;\n\nloop invariant i15: z == (x <= 25) ? x : 25 + 5 * (x - 25);\n*/\nwhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;//@ assert(z==400);\n}\n\t{;//@ assert(y==2);\n}\n\t{;//@ assert(x==100);\n}\n\treturn 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i15 is inductive.\nAssertion z == 400: Valid\nAssertion y == 2: Unproven\nAssertion x == 100: Partially proven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207,
            215,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 251,
        "success_rate": 0.545816733067729
    }
}