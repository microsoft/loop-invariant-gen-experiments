{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= N;\n  loop invariant j == i;\n  loop invariant k == 0 || (k == 1 && i < 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == 0 || (k == 1 && i < 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion !(k > 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(k > 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: i == j;\nloop invariant i3: (i < 1) ==> (k == 1);\nloop invariant i4: (i >= 1) ==> (k == 0);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nAssertion !(k > 0): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: i == j;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(k > 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i == 0) ==> (k == 0);\n    loop invariant (i > 0) ==> (k == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: (i == 0) ==> (k == 0);\nloop invariant i4: (i > 0) ==> (k == 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion !(k > 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: (i == 0) ==> (k == 0);\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(k > 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j == i;\n    loop invariant k == 0 || (k == 1 && i <= 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == 0 || (k == 1 && i <= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(k > 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: i >= 0 && i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == 0 || (k == 1 && i <= 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(k > 0): Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i >= 1) ==> (k == 0);\n    loop invariant (i < 1) ==> (k == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: (i >= 1) ==> (k == 0);\nloop invariant i4: (i < 1) ==> (k == 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is preserved but not established.\nAssertion !(k > 0): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(k > 0): Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- N is a non-negative integer (unknown_uint() returns an unsigned int).\n- i, j, and k are initialized to 0.\n- The loop condition is i < N.\n- We assume N > 1.\n\nNow, let's analyze the loop body:\n- If i < 1, then k is set to 1.\n- If i >= 1, then k is set to 0.\n- j is incremented by 1.\n- i is incremented by 1.\n\nLet's find the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= N;\n  loop invariant j == i;\n  loop invariant k == 0 || (k == 1 && i < 1);\n*/\n```\n\nExplanation:\n- The loop invariant '0 <= i <= N' ensures that i is always within the range of 0 to N during the loop execution.\n- The loop invariant 'j == i' ensures that j is always equal to i during the loop execution.\n- The loop invariant 'k == 0 || (k == 1 && i < 1)' ensures that k is either 0 or 1 if i < 1 during the loop execution."
                },
                {
                    "role": "assistant",
                    "content": "First, note the initial variable assignments and pre-conditions:\n- N is assigned an unknown unsigned integer.\n- i, j, and k are initialized to 0.\n- The pre-condition is that N > 1.\n\nNext, analyze the loop body and the loop condition:\n- The loop condition is i < N.\n- Inside the loop, if i < 1, k is set to 1; otherwise, k is set to 0. Then, j is incremented, and i is incremented.\n\nNow, let's find the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- N is assigned an unknown unsigned integer value.\n- i, j, and k are initialized to 0.\n- We assume N > 1.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < N.\n- Inside the loop, if i < 1, k is assigned the value 1, otherwise, k is assigned the value 0.\n- j is incremented in each iteration.\n- i is incremented in each iteration.\n\nNow let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i == 0) ==> (k == 0);\n    loop invariant (i > 0) ==> (k == 1);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. N is an unknown positive integer greater than 1 (N > 1)\n2. i, j, and k are initialized to 0\n\nNext, let's analyze the loop condition and body:\n\n1. The loop condition is i < N\n2. If i < 1, k is set to 1, else k is set to 0\n3. j is incremented\n4. i is incremented\n\nNow, let's find the loop invariants. We need invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply the post-condition.\n\n```c\n/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j == i;\n    loop invariant k == 0 || (k == 1 && i <= 1);\n*/\n```\n\nThese invariants hold true:\n\n1. Before the loop execution: i, j, and k are initialized to 0, which satisfies the invariants.\n2. In every iteration of the loop: \n   - i increases by 1, remaining within the range [0, N]\n   - j increases by 1, keeping j equal to i\n   - If i < 1, k is set to 1, else k is set to 0, maintaining the invariant for k\n3. After the loop termination: \n   - i >= N, and since N > 1, i > 1, and k must be 0, implying the post-condition (!(k > 0))"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. N is assigned an unknown non-negative integer value.\n2. i, j, and k are initialized to 0.\n3. The program assumes that N > 1.\n\nNext, analyze the loop body and the loop condition:\n\nThe loop condition is `i < N`. In the loop body, we have the following steps:\n1. If `i < 1`, set `k` to 1, else set `k` to 0.\n2. Increment `j` and `i`.\n\nNow, let's find the loop invariants. We need to find invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination.\n\n```\n/*@\n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i >= 1) ==> (k == 0);\n    loop invariant (i < 1) ==> (k == 1);\n*/\n```\n\nExplanation:\n1. `0 <= i <= N`: This invariant ensures that the value of `i` is always between 0 and N, inclusive.\n2. `j == i`: This invariant states that `j` always equals `i` in every iteration of the loop.\n3. `(i >= 1) ==> (k == 0)`: When `i` is greater than or equal to 1, this invariant ensures that `k` is always 0.\n4. `(i < 1) ==> (k == 1)`: When `i` is less than 1, this invariant ensures that `k` is always 1.\n\nThese loop invariants will help Frama-C verify the post-condition `!(k > 0)`."
                }
            ]
        ],
        "invariants": [
            "/*@ \n  loop invariant 0 <= i <= N;\n  loop invariant j == i;\n  loop invariant k == 0 || (k == 1 && i < 1);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i == 0) ==> (k == 0);\n    loop invariant (i > 0) ==> (k == 1);\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= N;\n    loop invariant j == i;\n    loop invariant k == 0 || (k == 1 && i <= 1);\n*/",
            "/*@\n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i >= 1) ==> (k == 0);\n    loop invariant (i < 1) ==> (k == 1);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\nloop invariant i3: k == 0 || (k == 1 && i < 1);\nloop invariant i4: 0 <= i <= N;\nloop invariant i5: i == j;\nloop invariant i6: (i < 1) ==> (k == 1);\nloop invariant i7: (i >= 1) ==> (k == 0);\nloop invariant i8: 0 <= i <= N;\nloop invariant i9: j == i;\nloop invariant i10: (i == 0) ==> (k == 0);\nloop invariant i11: (i > 0) ==> (k == 1);\nloop invariant i12: i >= 0 && i <= N;\nloop invariant i13: j == i;\nloop invariant i14: k == 0 || (k == 1 && i <= 1);\nloop invariant i15: 0 <= i <= N;\nloop invariant i16: j == i;\nloop invariant i17: (i >= 1) ==> (k == 0);\nloop invariant i18: (i < 1) ==> (k == 1);\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is preserved but not established.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nAssertion !(k > 0): Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  /*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: j == i;\n\nloop invariant i4: 0 <= i <= N;\nloop invariant i5: i == j;\n\n\nloop invariant i8: 0 <= i <= N;\nloop invariant i9: j == i;\nloop invariant i10: (i == 0) ==> (k == 0);\n\nloop invariant i12: i >= 0 && i <= N;\nloop invariant i13: j == i;\nloop invariant i14: k == 0 || (k == 1 && i <= 1);\nloop invariant i15: 0 <= i <= N;\nloop invariant i16: j == i;\n\n\n*/\nwhile (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nAssertion !(k > 0): Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207,
            215,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            256,
            263,
            267
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 264,
        "success_rate": 0.5568181818181818
    }
}