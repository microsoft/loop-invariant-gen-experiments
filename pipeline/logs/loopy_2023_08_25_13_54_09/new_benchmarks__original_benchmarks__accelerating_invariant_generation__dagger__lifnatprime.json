{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
        "completions": [
            {
                "invariants": "//@ loop invariant I >= 1;\n//@ loop invariant Sa >= 0;\n//@ loop invariant Ea >= 0;\n//@ loop invariant Ma >= 0;\n//@ loop invariant Sb >= 0;\n//@ loop invariant Eb >= 0;\n//@ loop invariant Mb >= 0;\n//@ loop invariant Ea + Ma <= 1;\n//@ loop invariant Eb + Mb <= 1;\n//@ loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant I >= 1;\nloop invariant Sa >= 0;\nloop invariant Ea >= 0;\nloop invariant Ma >= 0;\nloop invariant Sb >= 0;\nloop invariant Eb >= 0;\nloop invariant Mb >= 0;\nloop invariant Ea + Ma <= 1;\nloop invariant Eb + Mb <= 1;\nloop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 0;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 0;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n- I >= 1\n- Sa = 0\n- Ea = 0\n- Ma = 0\n- Sb = 0\n- Eb = 0\n- Mb = 0\n\nNow, let's analyze the loop condition and body:\nThe loop condition is unknown_int(), which means it can be non-deterministic. The loop body consists of a series of if-else statements, which are also non-deterministic due to the unknown_int() function.\n\nNow, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. We will use implications to take care of the conditional nature of the code.\n\nHere are the loop invariants:\n\n```\n//@ loop invariant I >= 1;\n//@ loop invariant Sa >= 0;\n//@ loop invariant Ea >= 0;\n//@ loop invariant Ma >= 0;\n//@ loop invariant Sb >= 0;\n//@ loop invariant Eb >= 0;\n//@ loop invariant Mb >= 0;\n//@ loop invariant Ea + Ma <= 1;\n//@ loop invariant Eb + Mb <= 1;\n//@ loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n```\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the pre-conditions and variable assignments in the program:\n\n- I >= 1\n- Sa = 0\n- Ea = 0\n- Ma = 0\n- Sb = 0\n- Eb = 0\n- Mb = 0\n\nNow, let's analyze the loop body and note down the loop condition:\n\n- The loop condition is `unknown_int()`, which is non-deterministic.\n\nNow, let's list the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n//@\nloop invariant I >= 1;\nloop invariant Sa >= 0;\nloop invariant Ea >= 0;\nloop invariant Ma >= 0;\nloop invariant Sb >= 0;\nloop invariant Eb >= 0;\nloop invariant Mb >= 0;\nloop invariant Ea + Ma <= 1;\nloop invariant Eb + Mb <= 1;\nloop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- I >= 1\n- Sa = 0\n- Ea = 0\n- Ma = 0\n- Sb = 0\n- Eb = 0\n- Mb = 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_int(), which is non-deterministic. Therefore, we cannot determine a specific loop condition.\n\nNext, we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments before the loop:\n- I >= 1\n- Sa = 0, Ea = 0, Ma = 0, Sb = 0, Eb = 0, Mb = 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_int(), which is non-deterministic.\n\nNow, we can output the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- I >= 1\n- Sa, Ea, Ma, Sb, Eb, Mb are initialized to 0\n\nLoop condition:\n- unknown_int() is true\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant I >= 0;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given code and extract the loop invariants.\n\n1. Pre-conditions or variable assignments:\n   - I >= 1\n   - Sa = 0, Ea = 0, Ma = 0, Sb = 0, Eb = 0, Mb = 0\n\n2. Loop condition:\n   - unknown_int() (non-deterministic, no specific condition)\n\n3. Loop invariants:\n\n```c\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```\n\nThe loop invariants above are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "Given the program, we can note the following:\n- Pre-conditions: I >= 1\n- Variable assignments: Sa = 0, Ea = 0, Ma = 0, Sb = 0, Eb = 0, Mb = 0\n- Loop condition: unknown_int(), which is non-deterministic\n\nNow, we will list the necessary loop invariants for the while loop in the program:\n\n```\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```\n\nThese invariants are true:\n- before the loop execution: due to the pre-conditions and variable assignments\n- in every iteration of the loop: since every branch ensures that the variables are updated accordingly\n- after the loop termination: these invariants imply the post-conditions."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n- I >= 1\n- Sa = 0, Ea = 0, Ma = 0\n- Sb = 0, Eb = 0, Mb = 0\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is unknown_int(), which is non-deterministic.\n- The loop body contains multiple nested conditional statements, each with their own unknown_int() condition.\n\nConsidering the pre-conditions and the loop body, we can output the following loop invariants:\n\n```\n/*@\n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. I >= 1\n2. Sa = 0, Ea = 0, Ma = 0, Sb = 0, Eb = 0, Mb = 0\n\nNow, let's analyze the loop condition:\n- The loop continues as long as unknown_int() returns a non-zero value.\n\nNow, let's determine the loop invariants that hold true before the loop execution, in every iteration, and after the loop termination:\n\n```\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration, and after the loop termination. They also imply the post-conditions of the program."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n\n- I >= 1\n- Sa = 0\n- Ea = 0\n- Ma = 0\n- Sb = 0\n- Eb = 0\n- Mb = 0\n\nNext, we analyze the loop body and note the loop condition:\n- unknown_int() (non-deterministic)\n\nNow, we will derive the loop invariants:\n\n(i) Before the loop execution,\n(ii) In every iteration of the loop, and\n(iii) After the loop termination.\n\nHere are the loop invariants for the program:\n\n```\n/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "//@ loop invariant I >= 1;\n//@ loop invariant Sa >= 0;\n//@ loop invariant Ea >= 0;\n//@ loop invariant Ma >= 0;\n//@ loop invariant Sb >= 0;\n//@ loop invariant Eb >= 0;\n//@ loop invariant Mb >= 0;\n//@ loop invariant Ea + Ma <= 1;\n//@ loop invariant Eb + Mb <= 1;\n//@ loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;",
            "//@\nloop invariant I >= 1;\nloop invariant Sa >= 0;\nloop invariant Ea >= 0;\nloop invariant Ma >= 0;\nloop invariant Sb >= 0;\nloop invariant Eb >= 0;\nloop invariant Mb >= 0;\nloop invariant Ea + Ma <= 1;\nloop invariant Eb + Mb <= 1;\nloop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 0;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@\n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/",
            "/*@ \n    loop invariant I >= 1;\n    loop invariant Sa >= 0;\n    loop invariant Ea >= 0;\n    loop invariant Ma >= 0;\n    loop invariant Sb >= 0;\n    loop invariant Eb >= 0;\n    loop invariant Mb >= 0;\n    loop invariant Ea + Ma <= 1;\n    loop invariant Eb + Mb <= 1;\n    loop invariant I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\nloop invariant i1: I >= 1;\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\nloop invariant i10: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i11: I >= 1;\nloop invariant i12: Sa >= 0;\nloop invariant i13: Ea >= 0;\nloop invariant i14: Ma >= 0;\nloop invariant i15: Sb >= 0;\nloop invariant i16: Eb >= 0;\nloop invariant i17: Mb >= 0;\nloop invariant i18: Ea + Ma <= 1;\nloop invariant i19: Eb + Mb <= 1;\nloop invariant i20: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i21: I >= 1;\nloop invariant i22: Sa >= 0;\nloop invariant i23: Ea >= 0;\nloop invariant i24: Ma >= 0;\nloop invariant i25: Sb >= 0;\nloop invariant i26: Eb >= 0;\nloop invariant i27: Mb >= 0;\nloop invariant i28: Ea + Ma <= 1;\nloop invariant i29: Eb + Mb <= 1;\nloop invariant i30: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i31: I >= 1;\nloop invariant i32: Sa >= 0;\nloop invariant i33: Ea >= 0;\nloop invariant i34: Ma >= 0;\nloop invariant i35: Sb >= 0;\nloop invariant i36: Eb >= 0;\nloop invariant i37: Mb >= 0;\nloop invariant i38: Ea + Ma <= 1;\nloop invariant i39: Eb + Mb <= 1;\nloop invariant i40: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i41: I >= 0;\nloop invariant i42: Sa >= 0;\nloop invariant i43: Ea >= 0;\nloop invariant i44: Ma >= 0;\nloop invariant i45: Sb >= 0;\nloop invariant i46: Eb >= 0;\nloop invariant i47: Mb >= 0;\nloop invariant i48: Ea + Ma <= 1;\nloop invariant i49: Eb + Mb <= 1;\nloop invariant i50: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i51: I >= 1;\nloop invariant i52: Sa >= 0;\nloop invariant i53: Ea >= 0;\nloop invariant i54: Ma >= 0;\nloop invariant i55: Sb >= 0;\nloop invariant i56: Eb >= 0;\nloop invariant i57: Mb >= 0;\nloop invariant i58: Ea + Ma <= 1;\nloop invariant i59: Eb + Mb <= 1;\nloop invariant i60: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i61: I >= 1;\nloop invariant i62: Sa >= 0;\nloop invariant i63: Ea >= 0;\nloop invariant i64: Ma >= 0;\nloop invariant i65: Sb >= 0;\nloop invariant i66: Eb >= 0;\nloop invariant i67: Mb >= 0;\nloop invariant i68: Ea + Ma <= 1;\nloop invariant i69: Eb + Mb <= 1;\nloop invariant i70: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i71: I >= 1;\nloop invariant i72: Sa >= 0;\nloop invariant i73: Ea >= 0;\nloop invariant i74: Ma >= 0;\nloop invariant i75: Sb >= 0;\nloop invariant i76: Eb >= 0;\nloop invariant i77: Mb >= 0;\nloop invariant i78: Ea + Ma <= 1;\nloop invariant i79: Eb + Mb <= 1;\nloop invariant i80: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i81: I >= 1;\nloop invariant i82: Sa >= 0;\nloop invariant i83: Ea >= 0;\nloop invariant i84: Ma >= 0;\nloop invariant i85: Sb >= 0;\nloop invariant i86: Eb >= 0;\nloop invariant i87: Mb >= 0;\nloop invariant i88: Ea + Ma <= 1;\nloop invariant i89: Eb + Mb <= 1;\nloop invariant i90: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i91: I >= 1;\nloop invariant i92: Sa >= 0;\nloop invariant i93: Ea >= 0;\nloop invariant i94: Ma >= 0;\nloop invariant i95: Sb >= 0;\nloop invariant i96: Eb >= 0;\nloop invariant i97: Mb >= 0;\nloop invariant i98: Ea + Ma <= 1;\nloop invariant i99: Eb + Mb <= 1;\nloop invariant i100: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i51 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nloop invariant i59 is inductive.\nloop invariant i60 is inductive.\nloop invariant i61 is inductive.\nloop invariant i62 is inductive.\nloop invariant i63 is inductive.\nloop invariant i64 is inductive.\nloop invariant i65 is inductive.\nloop invariant i66 is inductive.\nloop invariant i67 is inductive.\nloop invariant i68 is inductive.\nloop invariant i69 is inductive.\nloop invariant i70 is inductive.\nloop invariant i71 is inductive.\nloop invariant i72 is inductive.\nloop invariant i73 is inductive.\nloop invariant i74 is inductive.\nloop invariant i75 is inductive.\nloop invariant i76 is inductive.\nloop invariant i77 is inductive.\nloop invariant i78 is inductive.\nloop invariant i79 is inductive.\nloop invariant i80 is inductive.\nloop invariant i81 is inductive.\nloop invariant i82 is inductive.\nloop invariant i83 is inductive.\nloop invariant i84 is inductive.\nloop invariant i85 is inductive.\nloop invariant i86 is inductive.\nloop invariant i87 is inductive.\nloop invariant i88 is inductive.\nloop invariant i89 is inductive.\nloop invariant i90 is inductive.\nloop invariant i91 is inductive.\nloop invariant i92 is inductive.\nloop invariant i93 is inductive.\nloop invariant i94 is inductive.\nloop invariant i95 is inductive.\nloop invariant i96 is inductive.\nloop invariant i97 is inductive.\nloop invariant i98 is inductive.\nloop invariant i99 is inductive.\nloop invariant i100 is inductive.\nAssertion Ea + Ma <= 1: Partially proven\nAssertion Eb + Mb <= 1: Partially proven\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\t/*@\n\nloop invariant i2: Sa >= 0;\nloop invariant i3: Ea >= 0;\nloop invariant i4: Ma >= 0;\nloop invariant i5: Sb >= 0;\nloop invariant i6: Eb >= 0;\nloop invariant i7: Mb >= 0;\nloop invariant i8: Ea + Ma <= 1;\nloop invariant i9: Eb + Mb <= 1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i22: Sa >= 0;\nloop invariant i23: Ea >= 0;\nloop invariant i24: Ma >= 0;\nloop invariant i25: Sb >= 0;\nloop invariant i26: Eb >= 0;\nloop invariant i27: Mb >= 0;\nloop invariant i28: Ea + Ma <= 1;\nloop invariant i29: Eb + Mb <= 1;\nloop invariant i30: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i32: Sa >= 0;\nloop invariant i33: Ea >= 0;\nloop invariant i34: Ma >= 0;\nloop invariant i35: Sb >= 0;\nloop invariant i36: Eb >= 0;\nloop invariant i37: Mb >= 0;\nloop invariant i38: Ea + Ma <= 1;\nloop invariant i39: Eb + Mb <= 1;\nloop invariant i40: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\nloop invariant i41: I >= 0;\nloop invariant i42: Sa >= 0;\nloop invariant i43: Ea >= 0;\nloop invariant i44: Ma >= 0;\nloop invariant i45: Sb >= 0;\nloop invariant i46: Eb >= 0;\nloop invariant i47: Mb >= 0;\nloop invariant i48: Ea + Ma <= 1;\nloop invariant i49: Eb + Mb <= 1;\nloop invariant i50: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i52: Sa >= 0;\nloop invariant i53: Ea >= 0;\nloop invariant i54: Ma >= 0;\nloop invariant i55: Sb >= 0;\nloop invariant i56: Eb >= 0;\nloop invariant i57: Mb >= 0;\nloop invariant i58: Ea + Ma <= 1;\nloop invariant i59: Eb + Mb <= 1;\nloop invariant i60: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i62: Sa >= 0;\nloop invariant i63: Ea >= 0;\nloop invariant i64: Ma >= 0;\nloop invariant i65: Sb >= 0;\nloop invariant i66: Eb >= 0;\nloop invariant i67: Mb >= 0;\nloop invariant i68: Ea + Ma <= 1;\nloop invariant i69: Eb + Mb <= 1;\nloop invariant i70: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i72: Sa >= 0;\nloop invariant i73: Ea >= 0;\nloop invariant i74: Ma >= 0;\nloop invariant i75: Sb >= 0;\nloop invariant i76: Eb >= 0;\nloop invariant i77: Mb >= 0;\nloop invariant i78: Ea + Ma <= 1;\nloop invariant i79: Eb + Mb <= 1;\nloop invariant i80: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i82: Sa >= 0;\nloop invariant i83: Ea >= 0;\nloop invariant i84: Ma >= 0;\nloop invariant i85: Sb >= 0;\nloop invariant i86: Eb >= 0;\nloop invariant i87: Mb >= 0;\nloop invariant i88: Ea + Ma <= 1;\nloop invariant i89: Eb + Mb <= 1;\nloop invariant i90: I + Sa + Ea + Ma + Sb + Eb + Mb >= 1;\n\nloop invariant i92: Sa >= 0;\nloop invariant i93: Ea >= 0;\nloop invariant i94: Ma >= 0;\nloop invariant i95: Sb >= 0;\nloop invariant i96: Eb >= 0;\nloop invariant i97: Mb >= 0;\nloop invariant i98: Ea + Ma <= 1;\nloop invariant i99: Eb + Mb <= 1;\n\n*/\nwhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(Ea + Ma <= 1);\n}\n\t{;//@ assert(Eb + Mb <= 1);\n}\n\t{;//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i20 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nloop invariant i59 is inductive.\nloop invariant i60 is inductive.\nloop invariant i62 is inductive.\nloop invariant i63 is inductive.\nloop invariant i64 is inductive.\nloop invariant i65 is inductive.\nloop invariant i66 is inductive.\nloop invariant i67 is inductive.\nloop invariant i68 is inductive.\nloop invariant i69 is inductive.\nloop invariant i70 is inductive.\nloop invariant i72 is inductive.\nloop invariant i73 is inductive.\nloop invariant i74 is inductive.\nloop invariant i75 is inductive.\nloop invariant i76 is inductive.\nloop invariant i77 is inductive.\nloop invariant i78 is inductive.\nloop invariant i79 is inductive.\nloop invariant i80 is inductive.\nloop invariant i82 is inductive.\nloop invariant i83 is inductive.\nloop invariant i84 is inductive.\nloop invariant i85 is inductive.\nloop invariant i86 is inductive.\nloop invariant i87 is inductive.\nloop invariant i88 is inductive.\nloop invariant i89 is inductive.\nloop invariant i90 is inductive.\nloop invariant i92 is inductive.\nloop invariant i93 is inductive.\nloop invariant i94 is inductive.\nloop invariant i95 is inductive.\nloop invariant i96 is inductive.\nloop invariant i97 is inductive.\nloop invariant i98 is inductive.\nloop invariant i99 is inductive.\nAssertion Ea + Ma <= 1: Valid\nAssertion Eb + Mb <= 1: Valid\nAssertion (((((I + Sa) + Ea) + Ma) + Sb) + Eb) + Mb >= 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47
        ],
        "skipped": [],
        "total": 50,
        "success_rate": 0.54
    }
}