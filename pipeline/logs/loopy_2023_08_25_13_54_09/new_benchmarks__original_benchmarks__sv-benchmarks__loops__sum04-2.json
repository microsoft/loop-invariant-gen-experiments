{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum04-2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE+1;\nloop invariant i2: sn == (i-1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == a * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: 0 <= sn <= SIZE * a;\nloop invariant i3: sn == a * (i - 1);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1)*a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE+1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i-1)*a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn <= SIZE * a;\nloop invariant i4: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n- `i` is initialized to 1.\n- `sn` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i <= SIZE`.\n- In each iteration, `sn` is incremented by `a`.\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants ensure that:\n\n- `i` is always between 1 and SIZE + 1 (inclusive) throughout the loop.\n- `sn` is always equal to the product of `a` and one less than the current value of `i`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program. In this case, there are no explicit pre-conditions, but we have `int i` and `int sn = 0`.\n\nNext, we analyze the loop body and make a note of the loop condition. The loop starts with `i = 1` and iterates while `i <= SIZE`, incrementing `i` by 1 each time. In each iteration, `sn` is increased by `a`, where `a` is a constant defined as 2.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants are true:\n\n1. Before the loop execution, as `i = 1` and `sn = 0`.\n2. In every iteration of the loop, since `sn` is increased by `a` each time and `i` is incremented by 1.\n3. After the loop termination, when `i = SIZE + 1`, the post-condition `sn == SIZE * a || sn == 0` is implied by the loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- int i, sn=0;\n- i is not initialized, so it has a garbage value before the loop starts.\n\nAnalyze the loop body and make a note of the loop condition:\n- for(i=1; i<=SIZE; i++)\n- The loop condition is i <= SIZE.\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and the loop condition:\n\n- Variable assignments:\n  - `int i` (not initialized)\n  - `int sn = 0`\n  \n- Loop condition: `i <= SIZE`\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and conditions in the program:\n\n- Variable `i` is initialized to 1 and goes up to SIZE (inclusive) in the loop.\n- Variable `sn` is initialized to 0 and is incremented by `a` in each iteration of the loop.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i <= SIZE`.\n\nFinally, let's output the loop invariants that hold true before, during, and after the loop execution, such that they imply the post-condition:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants hold before the loop execution (when `i == 1`), during each iteration of the loop (as `sn` is incremented by `a`), and after the loop termination (when `i == SIZE + 1`)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make note of the pre-conditions and variable assignments in the program:\n\n1. int i, sn = 0; (i and sn are initialized)\n2. i starts from 1 and goes till SIZE (inclusive)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: i <= SIZE\n2. Loop body: sn = sn + a;\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. The pre-condition or variable assignments are: `int i, sn=0;`\n2. The loop condition is: `i<=SIZE`\n3. The loop body is: `sn = sn + a;`\n4. The post-condition is: `sn==SIZE*a || sn == 0;`\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution: `i=1` and `sn=0`\n(ii) In every iteration of the loop: `sn == a * (i - 1)`\n(iii) After the loop termination: `i > SIZE` \n\nBased on the above information, the loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == a * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n- int i, sn=0; (i is not initialized, sn is initialized to 0)\n\nNext, let's analyze the loop condition and body:\n- Loop condition: i <= SIZE\n- Loop body: sn = sn + a\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- int i, sn=0;\n- i is not explicitly initialized, so it could have a garbage value.\n- sn is initialized to 0.\n- SIZE is defined as 8.\n- a is defined as 2.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- for(i=1; i<=SIZE; i++)\n- The loop starts with i=1 and continues until i<=SIZE (i<=8).\n\nNow let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1)*a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Before we start with loop invariants, let's note the initial variable assignments and the loop condition:\n\n- Initial variable assignments: `i = 1`, `sn = 0`\n- Loop condition: `i <= SIZE`\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == a * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: 1 <= i <= SIZE + 1;\nloop invariant i4: sn == (i - 1) * a;\nloop invariant i5: 1 <= i <= SIZE+1;\nloop invariant i6: sn == (i-1) * a;\nloop invariant i7: 1 <= i <= SIZE + 1;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn == (i - 1) * a;\nloop invariant i10: 1 <= i && i <= SIZE + 1;\nloop invariant i11: sn == (i - 1) * a;\nloop invariant i12: 1 <= i <= SIZE + 1;\nloop invariant i13: sn == (i - 1) * a;\nloop invariant i14: 1 <= i <= SIZE + 1;\nloop invariant i15: 0 <= sn <= SIZE * a;\nloop invariant i16: sn == a * (i - 1);\nloop invariant i17: 1 <= i <= SIZE + 1;\nloop invariant i18: sn >= 0;\nloop invariant i19: sn == (i - 1) * a;\nloop invariant i20: 1 <= i && i <= SIZE+1;\nloop invariant i21: sn >= 0;\nloop invariant i22: sn == (i-1)*a;\nloop invariant i23: 1 <= i <= SIZE + 1;\nloop invariant i24: sn >= 0;\nloop invariant i25: sn <= SIZE * a;\nloop invariant i26: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            319,
            320,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            339,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            366,
            367,
            368,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            389,
            390,
            391,
            392,
            394,
            395,
            397,
            400,
            401,
            402,
            413
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            323,
            326,
            327,
            329,
            331,
            338,
            341,
            348,
            365,
            369,
            385,
            388,
            393,
            396,
            398,
            399,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 410,
        "success_rate": 0.6390243902439025
    }
}