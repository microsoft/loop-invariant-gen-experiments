{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant w % 2 == 1;\n    loop invariant w >= 1;\n    loop invariant z % 2 == 0;\n    loop invariant z >= 0;\n    loop invariant x <= 1;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w % 2 == 1;\nloop invariant i2: w >= 1;\nloop invariant i3: z % 2 == 0;\nloop invariant i4: z >= 0;\nloop invariant i5: x <= 1;\nloop invariant i6: y >= 0;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: w >= 1;\n\nloop invariant i4: z >= 0;\n\nloop invariant i6: y >= 0;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 1 <= w;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 1 <= w;\nloop invariant i5: x <= w;\nloop invariant i6: y <= z;\nloop invariant i7: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i8: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= z;\nloop invariant i4: 1 <= w;\nloop invariant i5: x <= w;\nloop invariant i6: y <= z;\nloop invariant i7: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i8: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w >= 0;\n    loop invariant z >= 0;\n    loop invariant (w % 2 == 1) ==> (w == \\old(w) + 1 && x == \\old(x) + 1);\n    loop invariant (z % 2 == 0) ==> (z == \\old(z) + 1 && y == \\old(y) + 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\nloop invariant i5: (w % 2 == 1) ==> (w == \\old(w) + 1 && x == \\old(x) + 1);\nloop invariant i6: (z % 2 == 0) ==> (z == \\old(z) + 1 && y == \\old(y) + 1);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "Annotation error on line 19: \\old undefined in this context. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: w >= 0;\nloop invariant i4: z >= 0;\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w - x == 1;\n    loop invariant z - y == 0;\n    loop invariant w % 2 == 1;\n    loop invariant z % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: w - x == 1;\nloop invariant i6: z - y == 0;\nloop invariant i7: w % 2 == 1;\nloop invariant i8: z % 2 == 0;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is inductive.\nAssertion x <= 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: w - x == 1;\nloop invariant i6: z - y == 0;\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant x <= 1;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\nloop invariant i5: x <= 1;\nloop invariant i6: x <= w;\nloop invariant i7: y <= z;\nloop invariant i8: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i9: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\n\nloop invariant i6: x <= w;\nloop invariant i7: y <= z;\nloop invariant i8: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i9: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w == x + 1;\n    loop invariant z == y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: w == x + 1;\nloop invariant i6: z == y;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: w == x + 1;\nloop invariant i6: z == y;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant (w % 2 == 1) ==> (x == 1);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: 0 <= x <= 1;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\nloop invariant i5: (w % 2 == 1) ==> (x == 1);\nloop invariant i6: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is preserved but not established.\nloop invariant i6 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\n\nloop invariant i6: (z % 2 == 0) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\n    loop invariant z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\nloop invariant i2: z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x <= 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\nloop invariant i2: z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2 + 1);\n    loop invariant (w % 2 == 0) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2 + 1);\n    loop invariant (z % 2 == 1) ==> (y == z / 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= w;\nloop invariant i6: y <= z;\nloop invariant i7: (w % 2 == 1) ==> (x == w / 2 + 1);\nloop invariant i8: (w % 2 == 0) ==> (x == w / 2);\nloop invariant i9: (z % 2 == 0) ==> (y == z / 2 + 1);\nloop invariant i10: (z % 2 == 1) ==> (y == z / 2);\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is preserved but not established.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w >= 1;\nloop invariant i2: z >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= w;\nloop invariant i6: y <= z;\n\n\n\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion x <= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w % 2 == x % 2;\n    loop invariant z % 2 == y % 2;\n    loop invariant x * 2 <= w;\n    loop invariant y * 2 <= z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w % 2 == x % 2;\nloop invariant i2: z % 2 == y % 2;\nloop invariant i3: x * 2 <= w;\nloop invariant i4: y * 2 <= z;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion x <= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\n\nloop invariant i3: x * 2 <= w;\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion x <= 1: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. w = 1\n2. z = 0\n3. x = 0\n4. y = 0\n\nLoop condition:\n- unknown2()\n\nLoop body:\n1. if (w % 2 == 1) { x++; w++; }\n2. if (z % 2 == 0) { y++; z++; }\n\nPost-condition:\n- x <= 1\n\nNow, let's find the loop invariants:\n\nLoop invariants:\n1. w is always odd at the start of the loop, and w >= 1\n2. z is always even at the start of the loop, and z >= 0\n3. x is incremented at most once (when w is odd)\n4. y is incremented in every iteration (when z is even)\n\nHere are the loop invariants for the while loop in the program:\n\n```\n/*@ \n    loop invariant w % 2 == 1;\n    loop invariant w >= 1;\n    loop invariant z % 2 == 0;\n    loop invariant z >= 0;\n    loop invariant x <= 1;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n- w = 1\n- z = 0\n- x = 0\n- y = 0\n\nLoop condition: unknown2()\n\nLoop body:\n- if (w % 2 == 1) { x++; w++; }\n- if (z % 2 == 0) { y++; z++; }\n\nPost-condition: x <= 1\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@\n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 1 <= w;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the initial assignments and loop condition:\n\n- w = 1\n- z = 0\n- x = 0\n- y = 0\n- loop condition: unknown2()\n\nNow, let's find the loop invariants:\n\n1. x is always non-negative.\n2. y is always non-negative.\n3. w is always non-negative.\n4. z is always non-negative.\n5. If w is odd, then x increases by 1 and w increases by 1 in the same iteration.\n6. If z is even, then y increases by 1 and z increases by 1 in the same iteration.\n\nHere are the loop invariants in ACSL notation:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w >= 0;\n    loop invariant z >= 0;\n    loop invariant (w % 2 == 1) ==> (w == \\old(w) + 1 && x == \\old(x) + 1);\n    loop invariant (z % 2 == 0) ==> (z == \\old(z) + 1 && y == \\old(y) + 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Preconditions and variable assignments:\n- w is initially 1\n- z, x, and y are initially 0\n- The loop condition is unknown2() which is non-deterministic\n\nNow, let's analyze the loop body:\n- If w is odd (w % 2 == 1), then x is incremented and w is incremented.\n- If z is even (z % 2 == 0), then y is incremented and z is incremented.\n\nNow let's identify the loop invariants:\n1. x and w are incremented together, so the difference between w and x remains constant throughout the loop.\n2. y and z are incremented together, so the difference between z and y remains constant throughout the loop.\n3. w is always odd before entering the loop body and even after the increment.\n4. z is always even before entering the loop body and odd after the increment.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w - x == 1;\n    loop invariant z - y == 0;\n    loop invariant w % 2 == 1;\n    loop invariant z % 2 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program and the loop:\n\n1. Pre-conditions and variable assignments:\n   - w is initialized to 1\n   - z is initialized to 0\n   - x is initialized to 0\n   - y is initialized to 0\n\n2. Loop condition: The loop executes as long as unknown2() returns a non-zero value.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant x <= 1;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/\n```\n\nThese invariants hold:\n- (i) before the loop execution,\n- (ii) in every iteration of the loop, and\n- (iii) after the loop termination.\n\nThey can help Frama-C verify the post-condition \"assert(x<=1);\"."
                },
                {
                    "role": "assistant",
                    "content": "First, we note that `unknown2()` is an external function whose definition is not given, so we cannot make any assumptions about its behavior. As per the instructions, we should not use non-deterministic function calls, so we won't use `unknown2()` in our loop invariants.\n\nNext, we analyze the loop body and note the loop condition:\n\n```\nwhile(unknown2()) {\n    ...\n}\n```\n\nSince the loop condition is non-deterministic, we need to focus on the loop body and identify invariants that hold during the loop execution. Let's analyze the loop body:\n\n```\nif(w%2 == 1) {x++; w++;};\nif(z%2==0) {y++; z++;};\n```\n\nWe can observe that:\n1. `w` and `x` are incremented together when `w` is odd.\n2. `z` and `y` are incremented together when `z` is even.\n\nNow we can write the loop invariants:\n\n```\n/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w == x + 1;\n    loop invariant z == y;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the initial variable assignments and loop condition:\n\n- w = 1\n- z = 0\n- x = 0\n- y = 0\n- loop condition: unknown2()\n\nNow, let's analyze the loop body and find the loop invariants:\n\n- When w is odd, x increments and w increments.\n- When z is even, y increments and z increments.\n\nNow we can write the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant (w % 2 == 1) ==> (x == 1);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- w = 1\n- z = 0\n- x = 0\n- y = 0\n\nLoop condition: unknown2()\n\nIn the loop body:\n- If w is odd, increment x and w.\n- If z is even, increment y and z.\n\nPost-condition: x <= 1\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution, w is odd and z is even.\n2. In every iteration of the loop, if w is odd, x and w are incremented.\n3. In every iteration of the loop, if z is even, y and z are incremented.\n4. After the loop termination, x <= 1.\n\nConsidering these observations, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\n    loop invariant z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- w = 1\n- z = 0\n- x = 0\n- y = 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown2(), which is an external function with no definition provided. We cannot make any assumptions about the function and thus treat it as non-deterministic.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2 + 1);\n    loop invariant (w % 2 == 0) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2 + 1);\n    loop invariant (z % 2 == 1) ==> (y == z / 2);\n*/\n```\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (x <= 1)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the loop condition and the loop body operations.\n\nLoop condition: `unknown2()`\nLoop body:\n1. If `w % 2 == 1`, increment `x` and `w`.\n2. If `z % 2 == 0`, increment `y` and `z`.\n\nNow let's find the loop invariants.\n\nThe loop invariants will be:\n1. The parity of `w` and `x` is the same.\n2. The parity of `z` and `y` is the same.\n3. The relation between `x` and `w`.\n4. The relation between `y` and `z`.\n\nWe can now write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant w % 2 == x % 2;\n    loop invariant z % 2 == y % 2;\n    loop invariant x * 2 <= w;\n    loop invariant y * 2 <= z;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant w % 2 == 1;\n    loop invariant w >= 1;\n    loop invariant z % 2 == 0;\n    loop invariant z >= 0;\n    loop invariant x <= 1;\n    loop invariant y >= 0;\n*/",
            "/*@\n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 1 <= w;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w >= 0;\n    loop invariant z >= 0;\n    loop invariant (w % 2 == 1) ==> (w == \\old(w) + 1 && x == \\old(x) + 1);\n    loop invariant (z % 2 == 0) ==> (z == \\old(z) + 1 && y == \\old(y) + 1);\n*/",
            "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w - x == 1;\n    loop invariant z - y == 0;\n    loop invariant w % 2 == 1;\n    loop invariant z % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant x <= 1;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
            "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant w == x + 1;\n    loop invariant z == y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1;\n    loop invariant 0 <= y;\n    loop invariant 0 <= w;\n    loop invariant 0 <= z;\n    loop invariant (w % 2 == 1) ==> (x == 1);\n    loop invariant (z % 2 == 0) ==> (y == z / 2);\n*/",
            "/*@ \n    loop invariant w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\n    loop invariant z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\n*/",
            "/*@ \n    loop invariant w >= 1;\n    loop invariant z >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= w;\n    loop invariant y <= z;\n    loop invariant (w % 2 == 1) ==> (x == w / 2 + 1);\n    loop invariant (w % 2 == 0) ==> (x == w / 2);\n    loop invariant (z % 2 == 0) ==> (y == z / 2 + 1);\n    loop invariant (z % 2 == 1) ==> (y == z / 2);\n*/",
            "/*@ \n    loop invariant w % 2 == x % 2;\n    loop invariant z % 2 == y % 2;\n    loop invariant x * 2 <= w;\n    loop invariant y * 2 <= z;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\nloop invariant i1: w % 2 == 1;\nloop invariant i2: w >= 1;\nloop invariant i3: z % 2 == 0;\nloop invariant i4: z >= 0;\nloop invariant i5: x <= 1;\nloop invariant i6: y >= 0;\nloop invariant i7: 0 <= x <= 1;\nloop invariant i8: 0 <= y;\nloop invariant i9: 0 <= z;\nloop invariant i10: 1 <= w;\nloop invariant i11: x <= w;\nloop invariant i12: y <= z;\nloop invariant i13: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i14: (z % 2 == 0) ==> (y == z / 2);\nloop invariant i15: x >= 0;\nloop invariant i16: y >= 0;\nloop invariant i17: w >= 0;\nloop invariant i18: z >= 0;\nloop invariant i19: (w % 2 == 1) ==> (w == \\old(w) + 1 && x == \\old(x) + 1);\nloop invariant i20: (z % 2 == 0) ==> (z == \\old(z) + 1 && y == \\old(y) + 1);\nloop invariant i21: w >= 1;\nloop invariant i22: z >= 0;\nloop invariant i23: x >= 0;\nloop invariant i24: y >= 0;\nloop invariant i25: w - x == 1;\nloop invariant i26: z - y == 0;\nloop invariant i27: w % 2 == 1;\nloop invariant i28: z % 2 == 0;\nloop invariant i29: 0 <= x;\nloop invariant i30: 0 <= y;\nloop invariant i31: 0 <= w;\nloop invariant i32: 0 <= z;\nloop invariant i33: x <= 1;\nloop invariant i34: x <= w;\nloop invariant i35: y <= z;\nloop invariant i36: (w % 2 == 1) ==> (x == w / 2);\nloop invariant i37: (z % 2 == 0) ==> (y == z / 2);\nloop invariant i38: w >= 1;\nloop invariant i39: z >= 0;\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\nloop invariant i42: w == x + 1;\nloop invariant i43: z == y;\nloop invariant i44: 0 <= x <= 1;\nloop invariant i45: 0 <= y;\nloop invariant i46: 0 <= w;\nloop invariant i47: 0 <= z;\nloop invariant i48: (w % 2 == 1) ==> (x == 1);\nloop invariant i49: (z % 2 == 0) ==> (y == z / 2);\nloop invariant i50: w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\nloop invariant i51: z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\nloop invariant i52: w >= 1;\nloop invariant i53: z >= 0;\nloop invariant i54: x >= 0;\nloop invariant i55: y >= 0;\nloop invariant i56: x <= w;\nloop invariant i57: y <= z;\nloop invariant i58: (w % 2 == 1) ==> (x == w / 2 + 1);\nloop invariant i59: (w % 2 == 0) ==> (x == w / 2);\nloop invariant i60: (z % 2 == 0) ==> (y == z / 2 + 1);\nloop invariant i61: (z % 2 == 1) ==> (y == z / 2);\nloop invariant i62: w % 2 == x % 2;\nloop invariant i63: z % 2 == y % 2;\nloop invariant i64: x * 2 <= w;\nloop invariant i65: y * 2 <= z;\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}\n",
        "checker_output": false,
        "checker_message": "Annotation error on line 33: \\old undefined in this context. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         /*@\n\nloop invariant i2: w >= 1;\n\nloop invariant i4: z >= 0;\nloop invariant i5: x <= 1;\nloop invariant i6: y >= 0;\nloop invariant i7: 0 <= x <= 1;\nloop invariant i8: 0 <= y;\nloop invariant i9: 0 <= z;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i21: w >= 1;\nloop invariant i22: z >= 0;\nloop invariant i23: x >= 0;\nloop invariant i24: y >= 0;\nloop invariant i25: w - x == 1;\nloop invariant i26: z - y == 0;\n\n\nloop invariant i29: 0 <= x;\n\n\n\n\n\n\n\n\n\n\nloop invariant i40: x >= 0;\nloop invariant i41: y >= 0;\nloop invariant i42: w == x + 1;\nloop invariant i43: z == y;\nloop invariant i44: 0 <= x <= 1;\nloop invariant i45: 0 <= y;\nloop invariant i46: 0 <= w;\nloop invariant i47: 0 <= z;\n\nloop invariant i49: (z % 2 == 0) ==> (y == z / 2);\nloop invariant i50: w % 2 == 1 ==> x == \\at(x, LoopEntry) + (w - \\at(w, LoopEntry)) / 2;\nloop invariant i51: z % 2 == 0 ==> y == \\at(y, LoopEntry) + (z - \\at(z, LoopEntry)) / 2;\nloop invariant i52: w >= 1;\nloop invariant i53: z >= 0;\nloop invariant i54: x >= 0;\nloop invariant i55: y >= 0;\nloop invariant i56: x <= w;\nloop invariant i57: y <= z;\n\nloop invariant i59: (w % 2 == 0) ==> (x == w / 2);\n\n\n\nloop invariant i63: z % 2 == y % 2;\nloop invariant i64: x * 2 <= w;\n\n*/\nwhile(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;//@ assert(x<=1);\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i29 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i51 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i59 is inductive.\nloop invariant i63 is inductive.\nloop invariant i64 is inductive.\nAssertion x <= 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 194,
        "success_rate": 0.6134020618556701
    }
}