{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant p >= leader_len;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2*i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p == leader_len + 2*i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\nloop invariant i5: bufsize >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p == leader_len + 2*i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\nloop invariant i5: bufsize >= 2*i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant p >= leader_len;\n    loop invariant i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p + 2*i <= bufsize_0;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: p >= leader_len;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2;\nloop invariant i5: p + 2*i <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: p >= leader_len;\nloop invariant i3: i <= ielen;\nloop invariant i4: bufsize >= 2;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 < bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 < bufsize <= bufsize_0;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: bufsize >= 2 * (ielen - i);\nloop invariant i5: p == leader_len + 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 < bufsize <= bufsize_0;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: bufsize >= 2 * (ielen - i);\nloop invariant i5: p == leader_len + 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0 - 1;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0 - 1;\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize == bufsize_0 - leader_len - 2 * i;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: p == leader_len + 2 * i;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 0;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant p >= leader_len;\n    loop invariant p <= bufsize_0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: bufsize_0 >= bufsize;\nloop invariant i4: p >= leader_len;\nloop invariant i5: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 0;\nloop invariant i3: bufsize_0 >= bufsize;\nloop invariant i4: p >= leader_len;\nloop invariant i5: p <= bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: p == leader_len + 2 * i;\nloop invariant i5: 0 <= p;\nloop invariant i6: p + 1 < bufsize_0;\nloop invariant i7: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: p == leader_len + 2 * i;\nloop invariant i5: 0 <= p;\n\nloop invariant i7: bufsize >= 2 * (ielen - i);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i7 is inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: 0 <= p;\nloop invariant i5: p + 1 < bufsize_0;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: 0 <= p;\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant (bufsize > 2) ==> (p + 1 < bufsize_0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: p == leader_len + 2 * i;\nloop invariant i5: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i6: (bufsize > 2) ==> (p + 1 < bufsize_0);\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= bufsize;\nloop invariant i3: bufsize_0 == bufsize + leader_len;\nloop invariant i4: p == leader_len + 2 * i;\n\n\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0 - 2*i;\n  loop invariant bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: 0 <= p <= bufsize_0 - 2*i;\nloop invariant i3: bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\n\nloop invariant i3: bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * (ielen - i);\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i <= ielen;\nloop invariant i2: bufsize >= 2 * (ielen - i);\nloop invariant i3: p == leader_len + 2 * i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 <= p: Unproven\nAssertion p + 1 < bufsize_0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize\n7. bufsize -= leader_len\n\nThe loop condition is (i < ielen && bufsize > 2), and the loop body increments p by 2 and i by 1 in every iteration.\n\nNow, let's find the loop invariants:\n\n1. i is non-negative and increases in each iteration: 0 <= i\n2. p is non-negative and increases by 2 in each iteration: p >= leader_len\n3. The relationship between i and p: p == leader_len + 2*i\n4. The relationship between bufsize and bufsize_0: bufsize_0 == bufsize + leader_len\n5. The relationship between i and bufsize: bufsize >= 2*i\n\nNow, we can write the loop invariants in ACSL format:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant p >= leader_len;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2*i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize + leader_len\n7. bufsize >= 2 * ielen\n\nNow, let's analyze the loop condition and body:\n\nLoop condition: i < ielen && bufsize > 2\nLoop body: p += 2; i++;\n\nNow, let's find the loop invariants:\n\n1. i >= 0 (i starts at 0 and only increases)\n2. p >= leader_len (p starts at leader_len and only increases)\n3. i <= ielen (loop condition)\n4. bufsize >= 2 (loop condition)\n5. p + 2*i <= bufsize_0 (due to the loop body)\n\nWith these loop invariants, we can output the ACSL annotations for the loop:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant p >= leader_len;\n    loop invariant i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p + 2*i <= bufsize_0;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned by unknown() function calls.\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. bufsize >= leader_len\n4. p = 0\n5. bufsize_0 = bufsize\n6. bufsize -= leader_len\n7. p += leader_len\n8. bufsize < 2 * ielen at the start of the loop\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is (i < ielen && bufsize > 2)\n2. The loop body increments i by 1 and p by 2 in each iteration.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 < bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned unknown values.\n2. leader_len, bufsize, and ielen must be positive.\n3. p is initialized to 0.\n4. bufsize_0 = bufsize.\n5. bufsize is decremented by leader_len.\n6. p is incremented by leader_len.\n7. The loop runs as long as i < ielen and bufsize > 2.\n\nLoop condition:\n- i < ielen && bufsize > 2\n\nPost-condition (assertions inside the loop):\n- 0 <= p\n- p + 1 < bufsize_0\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0 - 1;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/\n```\n\nThese loop invariants satisfy the required conditions:\n- They are true before the loop execution.\n- They are true in every iteration of the loop.\n- They are true after the loop termination.\n- They imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. p = 0\n5. bufsize_0 = bufsize\n6. bufsize -= leader_len\n7. p += leader_len\n\nNow, let's analyze the loop condition and body:\n\nLoop condition: i < ielen && bufsize > 2\n\nLoop body: p += 2\n\nNow, let's find the necessary loop invariants:\n\n1. Loop invariant i1: 0 <= i <= ielen\n2. Loop invariant i2: bufsize >= 0\n3. Loop invariant i3: bufsize_0 >= bufsize\n4. Loop invariant i4: p >= leader_len\n5. Loop invariant i5: p <= bufsize_0\n\nOutput the loop invariants for the loop in the program:\n```\n/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 0;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant p >= leader_len;\n    loop invariant p <= bufsize_0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned non-deterministic values from unknown().\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. If bufsize < leader_len, the program goes to END.\n4. p is initialized to 0.\n5. bufsize_0 is assigned the value of bufsize.\n6. bufsize is reduced by leader_len and p is increased by leader_len.\n7. If bufsize < 2*ielen, the program goes to END.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop iterates from i = 0 to i < ielen and while bufsize > 2.\n2. Within the loop, p is increased by 2 in each iteration.\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. leader_len > 0\n2. bufsize > 0\n3. ielen > 0\n4. bufsize >= leader_len\n5. p = leader_len\n6. bufsize_0 = bufsize + leader_len\n7. bufsize >= 2 * ielen\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop iterates from i = 0 to i < ielen, with the additional condition bufsize > 2.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/\n```\n\nThese loop invariants hold before the loop execution, during every iteration, and after the loop termination, and can help Frama-C verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- leader_len, bufsize, bufsize_0, and ielen are assigned unknown values.\n- leader_len, bufsize, and ielen must be positive.\n- The loop condition is (i < ielen && bufsize > 2).\n- The loop variable i is initialized to 0.\n\nNow, let's analyze the loop body and output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant (bufsize > 2) ==> (p + 1 < bufsize_0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Preconditions and variable assignments:\n- leader_len, bufsize, bufsize_0, and ielen are non-deterministic and positive.\n- p is initially 0.\n- bufsize_0 is initially equal to bufsize.\n- bufsize is decremented by leader_len.\n- p is incremented by leader_len.\n- i is initialized to 0.\n\nLoop condition:\n- The loop iterates as long as i < ielen and bufsize > 2.\n\nNow, let's identify the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0 - 2*i;\n  loop invariant bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution, as i = 0 and bufsize = bufsize_0 - leader_len.\n- In every iteration of the loop, as i is incremented by 1 and p and bufsize are updated accordingly.\n- After the loop termination, helping Frama-C verify the post-condition (assertions inside the loop)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and note the pre-conditions or variable assignments in the program:\n\n1. leader_len, bufsize, bufsize_0, and ielen are assigned non-deterministic values from unknown().\n2. leader_len, bufsize, and ielen must be greater than 0.\n3. bufsize is decreased by leader_len, and p is increased by leader_len.\n4. If bufsize is less than 2*ielen, the program goes to END.\n5. The loop iterates from i = 0 to i < ielen and bufsize > 2, and in each iteration, p is increased by 2.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is (i < ielen && bufsize > 2).\n\nFinally, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * (ielen - i);\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant p >= leader_len;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2*i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant p >= leader_len;\n    loop invariant i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p + 2*i <= bufsize_0;\n */",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 < bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0 - 1;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 0;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant p >= leader_len;\n    loop invariant p <= bufsize_0;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant (bufsize > 2) ==> (p + 1 < bufsize_0);\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0 - 2*i;\n  loop invariant bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * (ielen - i);\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p == leader_len + 2*i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\nloop invariant i5: bufsize >= 2*i;\nloop invariant i6: i >= 0;\nloop invariant i7: p >= leader_len;\nloop invariant i8: i <= ielen;\nloop invariant i9: bufsize >= 2;\nloop invariant i10: p + 2*i <= bufsize_0;\nloop invariant i11: 0 <= i <= ielen;\nloop invariant i12: 0 < bufsize <= bufsize_0;\nloop invariant i13: bufsize_0 == bufsize + leader_len;\nloop invariant i14: bufsize >= 2 * (ielen - i);\nloop invariant i15: p == leader_len + 2 * i;\nloop invariant i16: 0 <= i <= ielen;\nloop invariant i17: 0 <= p <= bufsize_0 - 1;\nloop invariant i18: p == leader_len + 2 * i;\nloop invariant i19: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i20: 0 <= i <= ielen;\nloop invariant i21: bufsize >= 0;\nloop invariant i22: bufsize_0 >= bufsize;\nloop invariant i23: p >= leader_len;\nloop invariant i24: p <= bufsize_0;\nloop invariant i25: 0 <= i <= ielen;\nloop invariant i26: 0 <= bufsize;\nloop invariant i27: bufsize_0 == bufsize + leader_len;\nloop invariant i28: p == leader_len + 2 * i;\nloop invariant i29: 0 <= p;\nloop invariant i30: p + 1 < bufsize_0;\nloop invariant i31: bufsize >= 2 * (ielen - i);\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: bufsize >= 2 * (ielen - i);\nloop invariant i34: p == leader_len + 2 * i;\nloop invariant i35: 0 <= p;\nloop invariant i36: p + 1 < bufsize_0;\nloop invariant i37: 0 <= i <= ielen;\nloop invariant i38: 0 <= bufsize;\nloop invariant i39: bufsize_0 == bufsize + leader_len;\nloop invariant i40: p == leader_len + 2 * i;\nloop invariant i41: bufsize == bufsize_0 - leader_len - 2 * i;\nloop invariant i42: (bufsize > 2) ==> (p + 1 < bufsize_0);\nloop invariant i43: 0 <= i <= ielen;\nloop invariant i44: 0 <= p <= bufsize_0 - 2*i;\nloop invariant i45: bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\nloop invariant i46: 0 <= i <= ielen;\nloop invariant i47: bufsize >= 2 * (ielen - i);\nloop invariant i48: p == leader_len + 2 * i;\nloop invariant i49: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is established but not preserved.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is established but not preserved.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nAssertion 0 <= p: Partially proven\nAssertion p + 1 < bufsize_0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: p >= leader_len;\nloop invariant i3: p == leader_len + 2*i;\nloop invariant i4: bufsize_0 == bufsize + leader_len;\nloop invariant i5: bufsize >= 2*i;\nloop invariant i6: i >= 0;\nloop invariant i7: p >= leader_len;\nloop invariant i8: i <= ielen;\nloop invariant i9: bufsize >= 2;\n\nloop invariant i11: 0 <= i <= ielen;\nloop invariant i12: 0 < bufsize <= bufsize_0;\nloop invariant i13: bufsize_0 == bufsize + leader_len;\nloop invariant i14: bufsize >= 2 * (ielen - i);\nloop invariant i15: p == leader_len + 2 * i;\nloop invariant i16: 0 <= i <= ielen;\n\nloop invariant i18: p == leader_len + 2 * i;\n\nloop invariant i20: 0 <= i <= ielen;\nloop invariant i21: bufsize >= 0;\nloop invariant i22: bufsize_0 >= bufsize;\nloop invariant i23: p >= leader_len;\nloop invariant i24: p <= bufsize_0;\nloop invariant i25: 0 <= i <= ielen;\nloop invariant i26: 0 <= bufsize;\nloop invariant i27: bufsize_0 == bufsize + leader_len;\nloop invariant i28: p == leader_len + 2 * i;\nloop invariant i29: 0 <= p;\n\nloop invariant i31: bufsize >= 2 * (ielen - i);\nloop invariant i32: 0 <= i <= ielen;\nloop invariant i33: bufsize >= 2 * (ielen - i);\nloop invariant i34: p == leader_len + 2 * i;\nloop invariant i35: 0 <= p;\n\nloop invariant i37: 0 <= i <= ielen;\nloop invariant i38: 0 <= bufsize;\nloop invariant i39: bufsize_0 == bufsize + leader_len;\nloop invariant i40: p == leader_len + 2 * i;\n\n\nloop invariant i43: 0 <= i <= ielen;\n\nloop invariant i45: bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\nloop invariant i46: 0 <= i <= ielen;\nloop invariant i47: bufsize >= 2 * (ielen - i);\nloop invariant i48: p == leader_len + 2 * i;\nloop invariant i49: bufsize_0 == bufsize + leader_len;\n*/\nfor (i = 0; i < ielen && bufsize > 2; i++) {\n    {;//@ assert(0<=p);\n}\n    {;//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i18 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i43 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nAssertion 0 <= p: Valid\nAssertion p + 1 < bufsize_0: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 104,
        "success_rate": 0.5865384615384616
    }
}