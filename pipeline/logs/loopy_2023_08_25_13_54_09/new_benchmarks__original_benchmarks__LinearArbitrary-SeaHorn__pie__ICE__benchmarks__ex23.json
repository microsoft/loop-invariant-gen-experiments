{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex23.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "completions": [
            {
                "invariants": "@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= y * 36 + 36;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: y * 36 <= z <= y * 36 + 36;\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\n\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] != 0;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer k; 0 <= k < y * 36 ==> x[k] != 0;\nloop invariant i4: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\nloop invariant i4: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant y * 36 <= z < (y + 1) * 36;\n    loop invariant z >= 0 && z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y <= 127;\nloop invariant i4: y * 36 <= z < (y + 1) * 36;\nloop invariant i5: z >= 0 && z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y <= 127;\n\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4572;\n    loop invariant z == y * 36 + counter;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\nloop invariant i3: 0 <= z <= 4572;\nloop invariant i4: z == y * 36 + counter;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\n\nloop invariant i4: z == y * 36 + counter;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4608;\n    loop invariant z == y * 36 + counter;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\nloop invariant i3: 0 <= z <= 4608;\nloop invariant i4: z == y * 36 + counter;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == (y * 36) + counter;\nloop invariant i3: 0 <= y <= 127;\nloop invariant i4: 0 <= z <= 4571;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == (y * 36) + counter;\nloop invariant i3: 0 <= y <= 127;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= y <= 127;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= counter <= 36;\nloop invariant i4: 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= y <= 127;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= counter <= 36;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\nloop invariant i3: 0 <= z <= 4571;\nloop invariant i4: z == y * 36 + counter;\nloop invariant i5: \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\n\nloop invariant i4: z == y * 36 + counter;\nloop invariant i5: \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `y` is assigned an unknown integer value.\n2. `z` is assigned an unknown integer value.\n3. `counter` is initialized to 0.\n4. If `y` is greater than 127 or less than 0, the function returns 0.\n5. If `y` is between 0 and 127 inclusive, `z = y * 36`.\n\nNow let's analyze the loop condition and body:\n\n- The loop condition is `counter < 36`.\n- In each iteration of the loop:\n    1. If `z` is less than 0 or greater than or equal to 4608, an assertion is triggered (but the program continues).\n    2. The array `x[z]` is set to 0.\n    3. `z` is incremented by 1.\n    4. `counter` is incremented by 1.\n\nNow let's find the loop invariants:\n\n1. `counter` is non-negative and less than or equal to 36.\n2. `z` is in the range `y * 36` to `(y * 36) + 36`.\n3. The elements of `x` from index `y * 36` to `z - 1` are set to 0.\n\nThe loop invariants can be written as:\n\n```\n@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= y * 36 + 36;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make note of the pre-conditions and variable assignments before the loop:\n- y is a non-negative integer and at most 127 (0 <= y <= 127).\n- z is initially y * 36.\n- counter is initially 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is counter < 36.\n- Inside the loop, x[z] is assigned the value 0, z is incremented by 1, and counter is incremented by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] != 0;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\n```\n\nThese loop invariants satisfy the requirements:\n1. They are true before the loop execution.\n2. They are true in every iteration of the loop.\n3. They are true after the loop termination.\n\nThese invariants also imply the post-condition: after the loop terminates, all elements in the array x in the range [y * 36, y * 36 + 36) are set to 0."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. y is an unknown integer value.\n2. counter is initialized to 0.\n3. z is an unknown integer value.\n4. If y is greater than 127 or less than 0, the function returns 0.\n5. z is assigned the value y * 36.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is counter < 36, so the loop will run 36 times.\n- The loop body updates x[z] to 0, increments z, and increments counter.\n\nNow we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant y * 36 <= z < (y + 1) * 36;\n    loop invariant z >= 0 && z < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `y` is an unknown integer value.\n2. The program returns if `y` is less than 0 or greater than 127.\n3. `counter` is initialized to 0.\n4. `z` is an unknown integer value, but after the condition checks, it is assigned to `y * 36`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is `counter < 36`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4572;\n    loop invariant z == y * 36 + counter;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also help Frama-C verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- y is assigned an unknown integer value.\n- counter is initialized to 0.\n- z is assigned an unknown integer value.\n- The program has a condition that y must be between 0 and 127 inclusive.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop continues while counter < 36.\n- In the loop body, z is checked for being in the range [0, 4608). If it's not, the assertion fails (but we can ignore this as we are asked to use implications).\n- x[z] is assigned the value 0.\n- z is incremented by 1.\n- counter is incremented by 1.\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. y is a non-negative integer and less than or equal to 127.\n2. z is initialized to y * 36.\n3. counter is initialized to 0.\n\nNext, we analyze the loop body and note the loop condition:\n\n1. The loop condition is \"counter < 36\".\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants should imply the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4608;\n    loop invariant z == y * 36 + counter;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Before the loop execution, we have the following conditions and variable assignments:\n\n- y is between 0 and 127 (inclusive).\n- z = y * 36.\n- counter = 0.\n\nThe loop condition is counter < 36.\n\nNow we can write the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n*/\n```\nThese loop invariants should help Frama-C verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n1. y is assigned a value from unknown_int().\n2. z is assigned y * 36.\n3. counter is assigned 0.\n4. The loop condition is (counter < 36).\n\nNow let's find the necessary loop invariants:\n\nBefore the loop execution:\n1. 0 <= y <= 127\n2. z == y * 36\n3. counter == 0\n\nIn every iteration of the loop:\n1. 0 <= counter <= 36\n2. z == (y * 36) + counter\n3. 0 <= z < 4608\n\nAfter the loop termination:\n1. counter == 36\n2. z == (y * 36) + 36\n\nNow, let's write the loop invariants in the ACSL format:\n\n```\n/*@\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= z < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `int y = unknown_int();`\n2. `int counter = 0;`\n3. `int z = unknown_int();`\n4. `if (127 < y) return 0;`\n5. `if (y < 0) return 0;`\n6. `z = y * 36;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. `while (counter < 36)`\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n1. y is a non-negative integer and y <= 127.\n2. z = y * 36.\n3. counter = 0.\n\nNow, let's analyze the loop body and condition:\n1. Loop condition: counter < 36.\n2. Loop body: \n    - If z is not within the range [0, 4607], the assertion fails.\n    - x[z] = 0.\n    - z is incremented by 1.\n    - counter is incremented by 1.\n\nLoop invariants:\n1. 0 <= counter <= 36.\n2. z == y * 36 + counter.\n3. For all integer i in range [y * 36, z), x[i] == 0.\n\nNow let's write the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= y * 36 + 36;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n}",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] != 0;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant y * 36 <= z < (y + 1) * 36;\n    loop invariant z >= 0 && z < 4608;\n*/",
            "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4572;\n    loop invariant z == y * 36 + counter;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4608;\n    loop invariant z == y * 36 + counter;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n*/",
            "/*@\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= z < 4608;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 4571;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: y * 36 <= z <= y * 36 + 36;\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: z == y * 36 + counter;\nloop invariant i6: \\forall integer k; 0 <= k < y * 36 ==> x[k] != 0;\nloop invariant i7: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i8: 0 <= counter <= 36;\nloop invariant i9: z == y * 36 + counter;\nloop invariant i10: 0 <= y <= 127;\nloop invariant i11: y * 36 <= z < (y + 1) * 36;\nloop invariant i12: z >= 0 && z < 4608;\nloop invariant i13: 0 <= counter <= 36;\nloop invariant i14: 0 <= y <= 127;\nloop invariant i15: 0 <= z <= 4572;\nloop invariant i16: z == y * 36 + counter;\nloop invariant i17: 0 <= counter <= 36;\nloop invariant i18: z == y * 36 + counter;\nloop invariant i19: 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\nloop invariant i20: 0 <= counter <= 36;\nloop invariant i21: 0 <= y <= 127;\nloop invariant i22: 0 <= z <= 4608;\nloop invariant i23: z == y * 36 + counter;\nloop invariant i24: 0 <= counter <= 36;\nloop invariant i25: z == (y * 36) + counter;\nloop invariant i26: 0 <= y <= 127;\nloop invariant i27: 0 <= z <= 4571;\nloop invariant i28: 0 <= y <= 127;\nloop invariant i29: z == y * 36 + counter;\nloop invariant i30: 0 <= counter <= 36;\nloop invariant i31: 0 <= z < 4608;\nloop invariant i32: 0 <= counter <= 36;\nloop invariant i33: 0 <= y <= 127;\nloop invariant i34: 0 <= z <= 4571;\nloop invariant i35: z == y * 36 + counter;\nloop invariant i36: \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\nloop invariant i37: 0 <= counter <= 36;\nloop invariant i38: z == y * 36 + counter;\nloop invariant i39: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is preserved but not established.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is established but not preserved.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nAssertion 0 == 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int();\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: y * 36 <= z <= y * 36 + 36;\nloop invariant i3: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: z == y * 36 + counter;\n\nloop invariant i7: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i8: 0 <= counter <= 36;\nloop invariant i9: z == y * 36 + counter;\nloop invariant i10: 0 <= y <= 127;\n\n\nloop invariant i13: 0 <= counter <= 36;\nloop invariant i14: 0 <= y <= 127;\n\nloop invariant i16: z == y * 36 + counter;\nloop invariant i17: 0 <= counter <= 36;\nloop invariant i18: z == y * 36 + counter;\nloop invariant i19: 0 <= y * 36 + counter < 4608 ==> 0 <= z < 4608;\nloop invariant i20: 0 <= counter <= 36;\nloop invariant i21: 0 <= y <= 127;\nloop invariant i22: 0 <= z <= 4608;\nloop invariant i23: z == y * 36 + counter;\nloop invariant i24: 0 <= counter <= 36;\nloop invariant i25: z == (y * 36) + counter;\nloop invariant i26: 0 <= y <= 127;\n\nloop invariant i28: 0 <= y <= 127;\nloop invariant i29: z == y * 36 + counter;\nloop invariant i30: 0 <= counter <= 36;\n\nloop invariant i32: 0 <= counter <= 36;\nloop invariant i33: 0 <= y <= 127;\n\nloop invariant i35: z == y * 36 + counter;\nloop invariant i36: \\forall integer k; 0 <= k < y * 36 ==> x[k] == 0;\nloop invariant i37: 0 <= counter <= 36;\nloop invariant i38: z == y * 36 + counter;\nloop invariant i39: \\forall integer i; y * 36 <= i < z ==> x[i] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nAssertion 0 == 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 211,
        "success_rate": 0.6350710900473934
    }
}