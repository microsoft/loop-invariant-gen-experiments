{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn >= 0 && sn % 2 == 0;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= 9;\nloop invariant i2: sn >= 0 && sn % 2 == 0;\nloop invariant i3: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: i <= 9;\nloop invariant i3: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant sn == (i - 1) * 2;\n  loop invariant 1 <= i <= 9;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: sn == (i - 1) * 2;\nloop invariant i2: 1 <= i <= 9;\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= 16;\nloop invariant i3: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= 9;\nloop invariant i2: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant sn >= 0;\n  loop invariant i > 8 ==> (sn == 8 * (2) || sn == 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\nloop invariant i3: i > 8 ==> (sn == 8 * (2) || sn == 0);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion sn == 8 * 2 || sn == 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn >= 0;\n\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant 0 <= sn <= 16;\n  loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= 16;\nloop invariant i3: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the pre-conditions and variable assignments in the program:\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, let's look at the loop condition and body:\n- The loop condition is \"i <= 8\".\n- Inside the loop body, sn is incremented by 2 in each iteration.\n\nNow, let's find the necessary loop invariants of the while loop:\n\n1. i is always non-negative and less than or equal to 8.\n2. sn is always non-negative and a multiple of 2.\n3. sn is always equal to 2*(i-1).\n\nThe loop invariants can be written as:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn >= 0 && sn % 2 == 0;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the pre-condition and variable assignments in the program:\n- i is initialized to 1\n- sn is initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= 8\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and the loop condition:\n\n- Variable `i` is initialized to 1.\n- Variable `sn` is initialized to 0.\n- The loop condition is `i <= 8`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `sn` is 0 and `i` is 1.\n2. In every iteration of the loop, `sn` is incremented by 2 and `i` is incremented by 1.\n3. After the loop termination, `i` would be 9 and `sn` would be 8 * 2.\n\nGiven this information, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the initial variable assignments and the loop condition:\n- i is initialized to 1\n- sn is initialized to 0\n- The loop condition is i <= 8\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn == 2 * (i - 1);\n*/\n"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and loop conditions:\n\n- Initial assignment: `int i = 1; int sn = 0;`\n- Loop condition: `i <= 8`\n- Loop increment: `i++`\n- Loop body: `sn = sn + 2;`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and the loop condition:\n\nVariable assignments:\n- i = 1\n- sn = 0\n\nLoop condition:\n- i <= 8\n\nNow, let's find the loop invariants:\n\nLoop invariants:\n- sn is always equal to (i - 1) * 2\n- i is always in the range [1, 9]\n\nHere is the loop invariants in ACSL annotation format:\n\n```\n/*@ \n  loop invariant sn == (i - 1) * 2;\n  loop invariant 1 <= i <= 9;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions or variable assignments:\n\n- `i` is initialized to 1\n- `sn` is initialized to 0\n\nNow, let's analyze the loop:\n\n- The loop condition is `i <= 8`\n- In each iteration of the loop, `sn` is incremented by 2, and `i` is incremented by 1.\n\nNow let's find the loop invariants:\n\n1. Before the loop execution:\n   - `i == 1`\n   - `sn == 0`\n\n2. In every iteration of the loop:\n   - `1 <= i <= 9`\n   - `0 <= sn <= 16`\n   - `sn == 2 * (i - 1)`\n\n3. After the loop termination:\n   - `i == 9`\n   - `sn == 16`\n\nNow, let's write down the loop invariants in the ACSL annotation format:\n\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n\n- i is initialized to 1\n- sn is initialized to 0\n\nNow let's analyze the loop condition and the loop body:\n\n- Loop condition: i <= 8\n- Loop body: sn = sn + 2\n\nNow we can find the loop invariants:\n\n- Before the loop execution: sn == 0\n- In every iteration of the loop: sn == 2 * (i - 1)\n- After the loop termination: sn == 8 * 2 (since i > 8)\n\nWith these invariants, we can now output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n- The loop initializes `i` to 1 and runs as long as `i <= 8`.\n- In each iteration of the loop, `sn` is incremented by 2.\n- The post-condition is `sn == 8 * (2) || sn == 0`.\n\nNow, we can find the necessary loop invariants:\n\n1. `i` starts from 1 and is incremented by 1 in each iteration. So, we have a lower and upper bound for `i`: `1 <= i <= 9`.\n2. `sn` starts from 0, and in each iteration, it is incremented by 2. Thus, its lower bound is 0.\n3. After the loop termination (`i > 8`), we want to prove the post-condition `sn == 8 * (2) || sn == 0`.\n\nLet's write down the loop invariants:\n\n```\n/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant sn >= 0;\n  loop invariant i > 8 ==> (sn == 8 * (2) || sn == 0);\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n```\nint  i,  sn=0;\n```\n\nWe have two variables: `i` and `sn`. `sn` is initialized to 0, but `i` is not explicitly initialized.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n```\nfor(i=1; i<=8; i++){\n  sn = sn +(2);\n}\n```\n\nThe loop condition is `i <= 8`. The loop initializes `i` to 1 and increments it by 1 in each iteration. In each iteration, `sn` is incremented by 2.\n\nNow, let's output the necessary loop invariants of the while loop to help Frama-C verify the post-condition. We will use the implication operator (==>) to take care of the conditional nature of the code and add conjunctions that bound the maximum and minimum values that variables can take, if such bounds exist.\n\n```\n/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant 0 <= sn <= 16;\n  loop invariant sn == 2 * (i - 1);\n*/\n```\n\nThese loop invariants are true:\n- Before the loop execution (`i` is initialized to 1 and `sn` is initialized to 0).\n- In every iteration of the loop (`sn` is incremented by 2 each time, and `i` is incremented by 1).\n- After the loop termination (when the loop finishes, `i` will be 9 and `sn` will be 16).\n\nThese loop invariants imply the post-condition `sn == 8 * (2) || sn == 0`."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn >= 0 && sn % 2 == 0;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, note the initial variable assignments and the loop condition:\n- i is initialized to 1\n- sn is initialized to 0\n- The loop condition is i <= 8\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn == 2 * (i - 1);\n*/\n",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n  loop invariant sn == (i - 1) * 2;\n  loop invariant 1 <= i <= 9;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 16;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= 9;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant sn >= 0;\n  loop invariant i > 8 ==> (sn == 8 * (2) || sn == 0);\n*/",
            "/*@ \n  loop invariant 1 <= i <= 9;\n  loop invariant 0 <= sn <= 16;\n  loop invariant sn == 2 * (i - 1);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= 9;\nloop invariant i2: sn >= 0 && sn % 2 == 0;\nloop invariant i3: sn == 2 * (i - 1);\nloop invariant i4: 1 <= i;\nloop invariant i5: i <= 9;\nloop invariant i6: sn == 2 * (i - 1);\nloop invariant i7: 1 <= i <= 9;\nloop invariant i8: sn == 2 * (i - 1);\nloop invariant i9: 1 <= i <= 9;\nloop invariant i10: sn == 2 * (i - 1);\nloop invariant i11: sn == (i - 1) * 2;\nloop invariant i12: 1 <= i <= 9;\nloop invariant i13: 1 <= i <= 9;\nloop invariant i14: 0 <= sn <= 16;\nloop invariant i15: sn == 2 * (i - 1);\nloop invariant i16: 1 <= i && i <= 9;\nloop invariant i17: sn == 2 * (i - 1);\nloop invariant i18: 1 <= i <= 9;\nloop invariant i19: sn >= 0;\nloop invariant i20: i > 8 ==> (sn == 8 * (2) || sn == 0);\nloop invariant i21: 1 <= i <= 9;\nloop invariant i22: 0 <= sn <= 16;\nloop invariant i23: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 156,
        "success_rate": 0.6025641025641025
    }
}