{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: cnt >= 0;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: cnt >= 0;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: cnt >= 0;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt;\n    loop invariant cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt;\nloop invariant i2: cnt <= b;\nloop invariant i3: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant b >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + (b - cnt);\nloop invariant i3: b >= 0;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n    loop invariant b >= cnt;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: res == a + (b - cnt);\nloop invariant i2: cnt >= 0;\nloop invariant i3: b >= cnt;\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: 0 <= cnt <= b;\nloop invariant i2: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion res == a + b: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- a and b are assigned non-deterministic values with unknown_int()\n- b >= 0 (from the assume(e) macro)\n- res = a\n- cnt = b\n\nLoop condition:\n- cnt > 0\n\nNow, we will derive the loop invariants:\n\n(i) Before the loop execution:\n- res = a\n- cnt = b\n- b >= 0\n\n(ii) In every iteration of the loop:\n- cnt is decreased by 1\n- res is increased by 1\n\n(iii) After the loop termination:\n- cnt <= 0\n- res == a + b (this is the post-condition we want to verify)\n\nWe can now write the loop invariants in ACSL notation:\n\n```\n/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. a and b are assigned non-deterministic integer values.\n2. b is non-negative: 0 <= b\n\nNow let's analyze the loop:\n\nLoop condition: cnt > 0\nLoop body: cnt is decremented by 1, res is incremented by 1\n\nNow let's find the necessary loop invariants:\n\n1. Before the loop execution, res = a and cnt = b.\n2. In every iteration of the loop, cnt is decremented by 1 and res is incremented by 1.\n3. After the loop termination, res = a + b.\n\nWe can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= cnt;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's go through the steps as outlined.\n\n1. Pre-conditions or variable assignments in the program:\n   - `a` and `b` are assigned values from unknown_int().\n   - `res = a` and `cnt = b`\n   - The pre-condition is that `0 <= b`.\n\n2. Loop condition:\n   - The loop condition is `cnt > 0`.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- a and b are assigned non-deterministic integer values from the functions `unknown_int()`.\n- The program only proceeds if `0 <= b`.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `cnt > 0`.\n- Inside the loop, `cnt` is decremented by 1 and `res` is incremented by 1.\n\nNow we can output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- a = unknown_int()\n- b = unknown_int()\n- The pre-condition is 0 <= b\n- res = a\n- cnt = b\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is cnt > 0\n- In each iteration, cnt is decremented by 1 and res is incremented by 1\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- int a = unknown_int();\n- int b = unknown_int();\n- if (!(0 <= b)) return 0;\n- int res = a;\n- int cnt = b;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- while (cnt > 0)\n\nNow, let's output the necessary loop invariants for this loop:\n\n```\n/*@ \n    loop invariant 0 <= cnt;\n    loop invariant cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program step by step:\n1. Pre-conditions or variable assignments in the program:\n   - int a = unknown_int();\n   - int b = unknown_int();\n   - int res = a;\n   - int cnt = b;\n   - The pre-condition is that b >= 0.\n\n2. Analyze the loop body and make a note of the loop condition:\n   - Loop condition: cnt > 0\n   - Loop body: cnt = cnt - 1; res = res + 1;\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant b >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n- a = unknown_int();\n- b = unknown_int();\n- Pre-condition: 0 <= b\n- res = a;\n- cnt = b;\n\nNow, let's analyze the loop body and its condition:\n- Loop condition: cnt > 0\n- Loop body: cnt = cnt - 1; res = res + 1;\n\nNow, let's find the loop invariants:\n- Before the loop execution: res == a and cnt == b\n- In every iteration of the loop: res == a + (b - cnt)\n- After the loop termination: res == a + b\n\nNow, let's write the loop invariants in ACSL notation:\n\n```\n/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n    loop invariant b >= cnt;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- a and b are initialized with unknown_int() function, which means their values are non-deterministic.\n- res is assigned the value of a.\n- cnt is assigned the value of b.\n- b is non-negative (0 <= b).\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (cnt > 0).\n- Inside the loop, cnt is decremented by 1, and res is incremented by 1.\n\nNow let's write the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `a` and `b` are assigned non-deterministic values using `unknown_int()`.\n- `0 <= b` is a precondition for the rest of the program.\n- `res` is assigned the value of `a`.\n- `cnt` is assigned the value of `b`.\n\nNow, let's analyze the loop body and the loop condition:\n- The loop condition is `cnt > 0`.\n- Inside the loop, `cnt` is decremented by 1, and `res` is incremented by 1.\n\nConsidering the given information, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/\n```\n\nThese loop invariants are true:\n- Before the loop execution, since `cnt = b`, the first invariant holds and `res = a` making the second invariant hold as well.\n- In every iteration of the loop, as `cnt` is decremented and `res` is incremented by 1, maintaining their relationship.\n- After the loop termination, when `cnt = 0`, the second invariant implies the post-condition `res == a + b`."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant 0 <= cnt;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant cnt >= 0;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant 0 <= cnt;\n    loop invariant cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n    loop invariant b >= 0;\n*/",
            "/*@ \n    loop invariant res == a + (b - cnt);\n    loop invariant cnt >= 0;\n    loop invariant b >= cnt;\n*/",
            "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/",
            "/*@ \n    loop invariant 0 <= cnt <= b;\n    loop invariant res == a + (b - cnt);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    /*@\nloop invariant i1: cnt >= 0;\nloop invariant i2: res == a + (b - cnt);\nloop invariant i3: 0 <= cnt;\nloop invariant i4: res == a + (b - cnt);\nloop invariant i5: 0 <= cnt <= b;\nloop invariant i6: res == a + (b - cnt);\nloop invariant i7: cnt >= 0;\nloop invariant i8: res == a + (b - cnt);\nloop invariant i9: cnt >= 0;\nloop invariant i10: res == a + (b - cnt);\nloop invariant i11: 0 <= cnt;\nloop invariant i12: cnt <= b;\nloop invariant i13: res == a + (b - cnt);\nloop invariant i14: 0 <= cnt <= b;\nloop invariant i15: res == a + (b - cnt);\nloop invariant i16: b >= 0;\nloop invariant i17: res == a + (b - cnt);\nloop invariant i18: cnt >= 0;\nloop invariant i19: b >= cnt;\nloop invariant i20: 0 <= cnt <= b;\nloop invariant i21: res == a + (b - cnt);\nloop invariant i22: 0 <= cnt <= b;\nloop invariant i23: res == a + (b - cnt);\n*/\nwhile (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;//@ assert(res == a + b);\n}\n    return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nAssertion res == a + b: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 136,
        "success_rate": 0.6176470588235294
    }
}