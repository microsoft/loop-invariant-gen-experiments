{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= SIZE;\nloop invariant i3: i <= n;\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\n\n\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i - j) % 3 == 0;\n    loop invariant j == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: n <= SIZE;\nloop invariant i3: (i - j) % 3 == 0;\nloop invariant i4: j == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is neither established nor preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: n <= SIZE;\nloop invariant i3: (i - j) % 3 == 0;\nloop invariant i4: j == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: n <= SIZE;\nloop invariant i3: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is neither established nor preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: n <= SIZE;\nloop invariant i3: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= n;\nloop invariant i3: n <= SIZE;\nloop invariant i4: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: n <= SIZE;\nloop invariant i4: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n;\n  loop invariant n <= SIZE;\n  loop invariant (i % 3) == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: n <= SIZE;\nloop invariant i4: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: n <= SIZE;\nloop invariant i4: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: n <= SIZE;\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: n <= SIZE;\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: n <= SIZE;\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is neither established nor preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: n <= SIZE;\nloop invariant i4: i % 3 == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= n && n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= n && n <= SIZE;\nloop invariant i3: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is neither established nor preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\n\nloop invariant i3: (i % 3) == 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= SIZE;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion i % 3 == 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: i >= 0;\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i % 3 == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= SIZE;\n    loop invariant i % 3 == 0 ==> j % 3 == 0;\n    loop invariant i % 3 != 0 ==> j % 3 != 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: 0 <= i <= SIZE;\nloop invariant i2: i % 3 == 0 ==> j % 3 == 0;\nloop invariant i3: i % 3 != 0 ==> j % 3 != 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i % 3 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\n\nloop invariant i2: i % 3 == 0 ==> j % 3 == 0;\nloop invariant i3: i % 3 != 0 ==> j % 3 != 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i % 3 == 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n1. n is a non-deterministic integer value.\n2. i and j are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\nThe loop condition is i < n.\n\nNow, let's find the loop invariants.\n\nWe know that i is always incremented by a multiple of 3. Therefore, at every step of the loop, i % 3 == 0. This invariant holds before the loop execution, in every iteration of the loop, and after the loop termination.\n\nWe also know that i is always non-negative and can never be greater than SIZE. This invariant holds before the loop execution, in every iteration of the loop, and after the loop termination.\n\nFinally, since i is always less than or equal to n, we can add another loop invariant stating this relationship.\n\nThe loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n is assigned an unknown value, and its value is bounded by the condition (n <= SIZE).\n- i and j are initialized to 0.\n\nNow, let's analyze the loop body and the loop condition:\n- The loop condition is (i < n).\n- In each iteration, the value of i is increased either by 6 or by 3, depending on the outcome of unknown_int().\n\nConsidering the loop condition, variable assignments, and loop body, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i - j) % 3 == 0;\n    loop invariant j == 0;\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution (initially, i and j are both 0, and n is bounded by SIZE).\n2. In every iteration of the loop (i is always increased by a multiple of 3, and j remains 0).\n3. After the loop termination (which is when i >= n, and the post-condition (i % 3) == 0 is implied by the loop invariants)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- `n = unknown_int()`: n can be any integer value.\n- `if (!(n <= SIZE)) return 0`: if n is greater than SIZE, the program returns 0.\n- `i = 0`: i is initialized to 0.\n- `j = 0`: j is initialized to 0 but not used in the loop, so we don't need to consider it.\n\nAnalyze the loop body and make a note of the loop condition:\n\n- `while (i < n)`: This is the loop condition.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, i is initialized to 0.\n2. In every iteration of the loop, i is increased by either 3 or 6.\n3. After the loop termination, we need to ensure that (i % 3) == 0.\n\nWe can now write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the pre-conditions or variable assignments in the program:\n\n1. n = unknown_int(), which means n can take any integer value.\n2. i = 0, j = 0.\n\nNext, let's analyze the loop condition: i < n.\n\nNow, let's find the necessary loop invariants:\n\n1. i is always non-negative and a multiple of 3.\n2. i is always less than or equal to n.\n3. n is less than or equal to SIZE.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- n is a non-deterministic integer value.\n- SIZE is a constant with value 50000001.\n- The program returns early if n > SIZE.\n- i and j are initialized to 0.\n\nLoop condition and body:\n- The loop executes as long as i < n.\n- In the loop body, i is incremented by either 6 or 3 depending on the result of unknown_int().\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n;\n  loop invariant n <= SIZE;\n  loop invariant (i % 3) == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n is assigned an unknown integer value.\n- The program returns if n > SIZE.\n- i and j are initialized to 0.\n\nNow, let's analyze the loop condition and body:\n- The loop condition is i < n.\n- Inside the loop, i is incremented by either 6 or 3 depending on the result of unknown_int().\n\nNow, let's find the loop invariants:\n- i is always divisible by 3, as it is incremented by either 6 or 3.\n- i is always non-negative since it starts at 0 and is only incremented.\n- i is always less than or equal to n, as the loop continues only when i < n.\n- n is less than or equal to SIZE since the program returns if n > SIZE.\n\nGiven these facts, we can write the loop invariants for the while loop as follows:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n is assigned a value from unknown_int()\n- The program only continues if n <= SIZE\n- i and j are initialized to 0\n\nAnalyze the loop body and make a note of the loop condition:\n- Loop condition: i < n\n- Loop body: i is incremented by either 3 or 6 depending on unknown_int()\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/\n```\nThese loop invariants hold true:\n(i) before the loop execution: i = 0, n <= SIZE, i <= n, and i % 3 == 0;\n(ii) in every iteration of the loop: i increases by 3 or 6, which always keeps i % 3 == 0;\n(iii) after the loop termination: i % 3 == 0, and i >= n due to loop condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n is assigned a non-deterministic value (unknown_int()).\n- The program returns if n > SIZE.\n- i and j are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n- In each iteration, i is either incremented by 6 or 3, depending on unknown_int().\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= n && n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- n is assigned a non-deterministic value through `unknown_int()`\n- The program returns 0 if n > SIZE, so the pre-condition is n <= SIZE\n- i and j are both initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is i < n\n- Inside the loop, i is incremented by either 6 or 3\n\nNow, let's find the loop invariants:\n\n1. i is always a multiple of 3: This is true because i is initialized to 0 (a multiple of 3) and is incremented by either 6 or 3, both of which are multiples of 3.\n2. i is always non-negative: This is true because i is initialized to 0 and is only incremented by positive values (3 or 6) within the loop.\n3. i <= SIZE: Since n <= SIZE, it follows that i <= n <= SIZE throughout the loop.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant i % 3 == 0;\n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- n is assigned a value from unknown_int()\n- i and j are assigned 0\n- n has an upper bound of SIZE\n\nLoop condition:\n- i < n\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= SIZE;\n    loop invariant i % 3 == 0 ==> j % 3 == 0;\n    loop invariant i % 3 != 0 ==> j % 3 != 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i - j) % 3 == 0;\n    loop invariant j == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/",
            "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n;\n  loop invariant n <= SIZE;\n  loop invariant (i % 3) == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant n <= SIZE;\n    loop invariant i % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= n && n <= SIZE;\n    loop invariant (i % 3) == 0;\n*/",
            "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant i >= 0;\n    loop invariant i <= SIZE;\n*/",
            "/*@ \n    loop invariant 0 <= i <= SIZE;\n    loop invariant i % 3 == 0 ==> j % 3 == 0;\n    loop invariant i % 3 != 0 ==> j % 3 != 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= SIZE;\nloop invariant i3: i <= n;\nloop invariant i4: i % 3 == 0;\nloop invariant i5: 0 <= i <= n;\nloop invariant i6: n <= SIZE;\nloop invariant i7: (i - j) % 3 == 0;\nloop invariant i8: j == 0;\nloop invariant i9: 0 <= i <= n;\nloop invariant i10: n <= SIZE;\nloop invariant i11: i % 3 == 0;\nloop invariant i12: i >= 0;\nloop invariant i13: i <= n;\nloop invariant i14: n <= SIZE;\nloop invariant i15: (i % 3) == 0;\nloop invariant i16: 0 <= i;\nloop invariant i17: i <= n;\nloop invariant i18: n <= SIZE;\nloop invariant i19: (i % 3) == 0;\nloop invariant i20: 0 <= i;\nloop invariant i21: i <= n;\nloop invariant i22: n <= SIZE;\nloop invariant i23: i % 3 == 0;\nloop invariant i24: 0 <= i;\nloop invariant i25: i <= n;\nloop invariant i26: n <= SIZE;\nloop invariant i27: i % 3 == 0;\nloop invariant i28: 0 <= i && i <= n;\nloop invariant i29: 0 <= n && n <= SIZE;\nloop invariant i30: (i % 3) == 0;\nloop invariant i31: i % 3 == 0;\nloop invariant i32: i >= 0;\nloop invariant i33: i <= SIZE;\nloop invariant i34: 0 <= i <= SIZE;\nloop invariant i35: i % 3 == 0 ==> j % 3 == 0;\nloop invariant i36: i % 3 != 0 ==> j % 3 != 0;\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nAssertion i % 3 == 0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  /*@\nloop invariant i1: i >= 0;\n\n\nloop invariant i4: i % 3 == 0;\n\nloop invariant i6: n <= SIZE;\nloop invariant i7: (i - j) % 3 == 0;\nloop invariant i8: j == 0;\n\nloop invariant i10: n <= SIZE;\nloop invariant i11: i % 3 == 0;\nloop invariant i12: i >= 0;\n\nloop invariant i14: n <= SIZE;\nloop invariant i15: (i % 3) == 0;\nloop invariant i16: 0 <= i;\n\nloop invariant i18: n <= SIZE;\nloop invariant i19: (i % 3) == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nAssertion i % 3 == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            319,
            320,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            339,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            366,
            367,
            368,
            370,
            371,
            372,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            389,
            390,
            391,
            392,
            394,
            395,
            397,
            400,
            401,
            402,
            413,
            416,
            418,
            420,
            424
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            323,
            326,
            327,
            329,
            331,
            338,
            341,
            348,
            365,
            369,
            385,
            388,
            393,
            396,
            398,
            399,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            414,
            415,
            417,
            419,
            421,
            422,
            423
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 421,
        "success_rate": 0.6318289786223278
    }
}