{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant high == (2 * unknown_int() - mid);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low == (unknown_int() - mid);\nloop invariant i2: high == (2 * unknown_int() - mid);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unexpected token ')'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + mid == \\at(low, Pre);\nloop invariant i2: high - mid == \\at(high, Pre);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable low. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + high == 2 * mid + low;\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + high == 2 * mid + low;\nloop invariant i2: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nAssertion low == high: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + mid == \\at(low, PreLoop) && high - mid == \\at(high, PreLoop);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + mid == \\at(low, PreLoop) && high - mid == \\at(high, PreLoop);\nloop invariant i2: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: logic label `PreLoop' not found. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + mid == \\at(low, Pre) && high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n    loop invariant high - low == 2 * mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + mid == \\at(low, Pre) && high - mid == \\at(high, Pre);\nloop invariant i2: mid >= 0;\nloop invariant i3: high - low == 2 * mid;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable high. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: mid >= 0;\nloop invariant i3: high - low == 2 * mid;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion low == high: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + mid == \\at(low, Pre);\nloop invariant i2: high - mid == \\at(high, Pre);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable low. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant mid >= 0;\n    loop invariant high == (2 * unknown_int()) - low;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low == (unknown_int() - mid);\nloop invariant i2: mid >= 0;\nloop invariant i3: high == (2 * unknown_int()) - low;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unexpected token ')'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\nloop invariant i2: mid >= 0;\n\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low == (\\at(low,Pre) + \\at(mid,Pre) - mid);\n    loop invariant high == (\\at(high,Pre) + \\at(mid,Pre) - mid);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low == (\\at(low,Pre) + \\at(mid,Pre) - mid);\nloop invariant i2: high == (\\at(high,Pre) + \\at(mid,Pre) - mid);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable low. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low + mid == \\at(low, Pre);\nloop invariant i2: high - mid == \\at(high, Pre);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable low. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant low == \\at(low, Pre) + (\\at(mid, Pre) - mid);\n    loop invariant high == \\at(high, Pre) - (\\at(mid, Pre) - mid);\n    loop invariant mid >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low == \\at(low, Pre) + (\\at(mid, Pre) - mid);\nloop invariant i2: high == \\at(high, Pre) - (\\at(mid, Pre) - mid);\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unbound logic variable low. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion low == high: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant high == (2 * unknown_int() - mid);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + high == 2 * mid + low;\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + mid == \\at(low, PreLoop) && high - mid == \\at(high, PreLoop);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + mid == \\at(low, Pre) && high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n    loop invariant high - low == 2 * mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant mid >= 0;\n    loop invariant high == (2 * unknown_int()) - low;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low == (\\at(low,Pre) + \\at(mid,Pre) - mid);\n    loop invariant high == (\\at(high,Pre) + \\at(mid,Pre) - mid);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant low == \\at(low, Pre) + (\\at(mid, Pre) - mid);\n    loop invariant high == \\at(high, Pre) - (\\at(mid, Pre) - mid);\n    loop invariant mid >= 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant high == (2 * unknown_int() - mid);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low + high == 2 * mid + low;\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low + mid == \\at(low, PreLoop) && high - mid == \\at(high, PreLoop);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low + mid == \\at(low, Pre) && high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n    loop invariant high - low == 2 * mid;\n*/",
            "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low == (unknown_int() - mid);\n    loop invariant mid >= 0;\n    loop invariant high == (2 * unknown_int()) - low;\n*/",
            "/*@ \n    loop invariant low == (\\at(low,Pre) + \\at(mid,Pre) - mid);\n    loop invariant high == (\\at(high,Pre) + \\at(mid,Pre) - mid);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low + mid == \\at(low, Pre);\n    loop invariant high - mid == \\at(high, Pre);\n    loop invariant mid >= 0;\n*/",
            "/*@ \n    loop invariant low == \\at(low, Pre) + (\\at(mid, Pre) - mid);\n    loop invariant high == \\at(high, Pre) - (\\at(mid, Pre) - mid);\n    loop invariant mid >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\nloop invariant i1: low == (unknown_int() - mid);\nloop invariant i2: high == (2 * unknown_int() - mid);\nloop invariant i3: mid >= 0;\nloop invariant i4: low + mid == \\at(low, Pre);\nloop invariant i5: high - mid == \\at(high, Pre);\nloop invariant i6: mid >= 0;\nloop invariant i7: low + high == 2 * mid + low;\nloop invariant i8: mid >= 0;\nloop invariant i9: low + mid == \\at(low, PreLoop) && high - mid == \\at(high, PreLoop);\nloop invariant i10: mid >= 0;\nloop invariant i11: low + mid == \\at(low, Pre) && high - mid == \\at(high, Pre);\nloop invariant i12: mid >= 0;\nloop invariant i13: high - low == 2 * mid;\nloop invariant i14: low + mid == \\at(low, Pre);\nloop invariant i15: high - mid == \\at(high, Pre);\nloop invariant i16: mid >= 0;\nloop invariant i17: low == (unknown_int() - mid);\nloop invariant i18: mid >= 0;\nloop invariant i19: high == (2 * unknown_int()) - low;\nloop invariant i20: low == (\\at(low,Pre) + \\at(mid,Pre) - mid);\nloop invariant i21: high == (\\at(high,Pre) + \\at(mid,Pre) - mid);\nloop invariant i22: mid >= 0;\nloop invariant i23: low + mid == \\at(low, Pre);\nloop invariant i24: high - mid == \\at(high, Pre);\nloop invariant i25: mid >= 0;\nloop invariant i26: low == \\at(low, Pre) + (\\at(mid, Pre) - mid);\nloop invariant i27: high == \\at(high, Pre) - (\\at(mid, Pre) - mid);\nloop invariant i28: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 13: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  /*@\n\n\nloop invariant i3: mid >= 0;\n\n\nloop invariant i6: mid >= 0;\n\nloop invariant i8: mid >= 0;\n\nloop invariant i10: mid >= 0;\n\nloop invariant i12: mid >= 0;\nloop invariant i13: high - low == 2 * mid;\n\n\nloop invariant i16: mid >= 0;\n\nloop invariant i18: mid >= 0;\n\n\n\nloop invariant i22: mid >= 0;\n\n\nloop invariant i25: mid >= 0;\n\n\nloop invariant i28: mid >= 0;\n*/\nwhile (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;//@ assert(low == high);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i3 is inductive.\nloop invariant i6 is inductive.\nloop invariant i8 is inductive.\nloop invariant i10 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i16 is inductive.\nloop invariant i18 is inductive.\nloop invariant i22 is inductive.\nloop invariant i25 is inductive.\nloop invariant i28 is inductive.\nAssertion low == high: Valid\n"
    },
    "stats": {
        "success": [
            1,
            5,
            7,
            8,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            102,
            107,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            172,
            174,
            175,
            177,
            178,
            179,
            180,
            181,
            184,
            185,
            186,
            187,
            191,
            195,
            198,
            202,
            203,
            204,
            205,
            206,
            207,
            209,
            210,
            211,
            214,
            215,
            218,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            312,
            313,
            321,
            322,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            355,
            356
        ],
        "failure": [
            0,
            2,
            3,
            4,
            6,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            39,
            42,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            101,
            103,
            104,
            105,
            106,
            108,
            109,
            111,
            118,
            120,
            121,
            123,
            124,
            125,
            126,
            129,
            132,
            133,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            171,
            173,
            176,
            182,
            183,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            197,
            199,
            200,
            201,
            208,
            212,
            213,
            216,
            217,
            219,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            240,
            241,
            251,
            252,
            253,
            254,
            264,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            311,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            323,
            324,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            354
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 353,
        "success_rate": 0.5240793201133145
    }
}