{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
        "completions": [
            {
                "invariants": "#include <limits.h>\n\n/*@ \n  requires LARGE_INT >= 0;\n  ensures \\result == 0;\n*/\nint main() {\n    int i;\n    //@ ghost int loop_counter = 0;\n\n    /*@ \n      loop invariant 0 <= i <= LARGE_INT;\n      loop invariant loop_counter == i;\n      loop assigns i, loop_counter;\n      loop variant LARGE_INT - i;\n    */\n    for (i = 0; i != LARGE_INT; i++) {\n        //@ ghost loop_counter++;\n        //@ assert i <= LARGE_INT;\n    }\n    return 0;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: loop_counter == i;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 8: unbound logic variable loop_counter. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion i <= 1000000: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's rewrite the given program with ACSL annotations.\n\n```c\n#include <limits.h>\n\n/*@ \n  requires LARGE_INT >= 0;\n  ensures \\result == 0;\n*/\nint main() {\n    int i;\n    //@ ghost int loop_counter = 0;\n\n    /*@ \n      loop invariant 0 <= i <= LARGE_INT;\n      loop invariant loop_counter == i;\n      loop assigns i, loop_counter;\n      loop variant LARGE_INT - i;\n    */\n    for (i = 0; i != LARGE_INT; i++) {\n        //@ ghost loop_counter++;\n        //@ assert i <= LARGE_INT;\n    }\n    return 0;\n}\n```\n\nHere are the loop invariants for the loop in the program:\n\n```c\n/*@ \n    loop invariant 0 <= i <= LARGE_INT;\n    loop invariant loop_counter == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's convert the for loop into a while loop for better understanding:\n```c\nint main() {\n    int i = 0;\n    while (i != LARGE_INT) {\n        // assert(i <= LARGE_INT);\n        i++;\n    }\n    return 0;\n}\n```\n\nNow, let's find the loop invariants for the while loop:\n\n```c\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int i` is declared but not initialized.\n- `i` is initialized to 0 before the loop starts.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i != LARGE_INT`.\n\nLet's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/\n```\n\nThese loop invariants hold true before the loop starts (i is initialized to 0), in every iteration of the loop (i is never greater than LARGE_INT), and after the loop termination (i will be equal to LARGE_INT)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions, variable assignments, and the loop condition in the given program.\n\nPre-conditions or variable assignments:\n- int i;\n- i = 0;\n- #define LARGE_INT 1000000\n\nLoop condition:\n- i != LARGE_INT\n\nNow, we can determine the loop invariants that are true before the loop execution, during every iteration of the loop, and after the loop termination.\n\nLoop invariants:\n- i is non-negative (i >= 0)\n- i is always less than or equal to LARGE_INT (i <= LARGE_INT)\n\nThese loop invariants imply the post-condition (i <= LARGE_INT) after the loop terminates.\n\nHere is the loop invariant code block:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the pre-conditions or variable assignments in the program:\n\n- `int i;` (declaration of `i`)\n- `i = 0;` (initialization of `i`)\n- `LARGE_INT` is a constant with the value of `1000000`\n\nAnalyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i != LARGE_INT`\n- The loop body increments `i` by `1` in each iteration\n\nNow, output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/\n```\n\nThese loop invariants are true:\n\n- Before the loop execution: `i = 0`, so both invariants hold.\n- In every iteration of the loop: If `i < LARGE_INT`, then `i` is incremented by `1`, and both invariants still hold.\n- After the loop termination: When the loop terminates, `i == LARGE_INT`, so both invariants hold.\n\nThese loop invariants imply the post-condition given in the program:\n\n- `i <= LARGE_INT` is asserted in the loop body, and it is guaranteed by the loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions, variable assignments, and the loop condition.\n\nPre-conditions or variable assignments:\n- `i` is initialized to 0.\n- `LARGE_INT` is defined as 1000000.\n\nLoop condition:\n- The loop continues until `i` becomes equal to `LARGE_INT`.\n\nNow, let's find the necessary loop invariants of the while loop.\n\nLoop invariants:\n1. `i` is non-negative: `i >= 0`.\n2. `i` is less than or equal to `LARGE_INT`: `i <= LARGE_INT`.\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition, which asserts that `i <= LARGE_INT`.\n\nThe loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `int i;` initializes the variable `i`.\n- `i` is assigned the value `0` before the loop starts.\n\nNow let's analyze the loop body and note the loop condition:\n- The loop condition is `i != LARGE_INT`.\n\nHere are the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we need to convert the for loop to a while loop to better reason about the loop invariants.\n\n```\nint main() {\n    int i;\n    i = 0;\n    while (i != LARGE_INT) {\n        //@ assert(i <= LARGE_INT);\n        i++;\n    }\n    return 0;\n}\n```\n\nNow, let's find the loop invariants:\n\n- Pre-conditions or variable assignments: `int i; i = 0;`\n- Loop condition: `i != LARGE_INT`\n- Loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination:\n  1. `i >= 0`\n  2. `i <= LARGE_INT`\n\nHere are the loop invariants in ACSL format:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `i` is initialized to 0.\n2. `LARGE_INT` is defined as 1000000.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `i != LARGE_INT`.\n2. The loop body increments `i` by 1 in each iteration.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Pre-conditions or variable assignments:\n   - i is assigned to 0.\n   - LARGE_INT is defined as 1000000.\n\n2. Loop condition:\n   - The loop will continue as long as i is not equal to LARGE_INT.\n\nNow, let's find the loop invariants that are true before the loop execution, during every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "#include <limits.h>\n\n/*@ \n  requires LARGE_INT >= 0;\n  ensures \\result == 0;\n*/\nint main() {\n    int i;\n    //@ ghost int loop_counter = 0;\n\n    /*@ \n      loop invariant 0 <= i <= LARGE_INT;\n      loop invariant loop_counter == i;\n      loop assigns i, loop_counter;\n      loop variant LARGE_INT - i;\n    */\n    for (i = 0; i != LARGE_INT; i++) {\n        //@ ghost loop_counter++;\n        //@ assert i <= LARGE_INT;\n    }\n    return 0;\n}",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n */",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= LARGE_INT;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\nloop invariant i2: loop_counter == i;\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= LARGE_INT;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= LARGE_INT;\nloop invariant i7: i >= 0;\nloop invariant i8: i <= LARGE_INT;\nloop invariant i9: 0 <= i;\nloop invariant i10: i <= LARGE_INT;\nloop invariant i11: i >= 0;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: 0 <= i;\nloop invariant i14: i <= LARGE_INT;\nloop invariant i15: i >= 0;\nloop invariant i16: i <= LARGE_INT;\nloop invariant i17: 0 <= i;\nloop invariant i18: i <= LARGE_INT;\nloop invariant i19: 0 <= i;\nloop invariant i20: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 8: unbound logic variable loop_counter. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    /*@\nloop invariant i1: 0 <= i <= LARGE_INT;\n\nloop invariant i3: 0 <= i;\nloop invariant i4: i <= LARGE_INT;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= LARGE_INT;\nloop invariant i7: i >= 0;\nloop invariant i8: i <= LARGE_INT;\nloop invariant i9: 0 <= i;\nloop invariant i10: i <= LARGE_INT;\nloop invariant i11: i >= 0;\nloop invariant i12: i <= LARGE_INT;\nloop invariant i13: 0 <= i;\nloop invariant i14: i <= LARGE_INT;\nloop invariant i15: i >= 0;\nloop invariant i16: i <= LARGE_INT;\nloop invariant i17: 0 <= i;\nloop invariant i18: i <= LARGE_INT;\nloop invariant i19: 0 <= i;\nloop invariant i20: i <= LARGE_INT;\n*/\nfor (i = 0; i != LARGE_INT; i++) {\n\t{;//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nAssertion i <= 1000000: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 333,
        "success_rate": 0.5585585585585585
    }
}