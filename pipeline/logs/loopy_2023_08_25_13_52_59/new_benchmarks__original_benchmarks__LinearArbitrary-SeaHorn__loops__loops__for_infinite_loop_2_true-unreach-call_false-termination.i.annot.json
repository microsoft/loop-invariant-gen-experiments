{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i == 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop variant n - i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Partially proven\nAssertion x != 0: Valid\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\n\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: i >= 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i <= UINT_MAX;\n    loop invariant x == 0;\n    loop assigns i, x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i <= UINT_MAX;\nloop invariant i2: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 11: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\n\nloop invariant i2: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `unsigned int i = 0;`\n2. `int x = 0, y = 0;`\n3. `int n = unknown_int();`\n4. `assume(n > 0);`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `1`, which means it's an infinite loop.\n2. Inside the loop body, there is an assertion stating `x == 0`.\n\nNow, let's find the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x == 0;\n*/\n```\n\nThe loop invariant `x == 0` is true before the loop execution, in every iteration of the loop, and after the loop termination. However, in this particular case, the loop never terminates due to the infinite loop condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- i is initialized to 0\n- x and y are both initialized to 0\n- n is assigned a value from unknown_int() and assumed to be greater than 0\n\nNext, analyze the loop body and make a note of the loop condition.\n- The loop is an infinite loop (1) and has no explicit loop condition.\n\nNow, output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant x == 0;\n*/\n```\n\nNote that the loop never terminates, so there's no post-condition to satisfy after the loop termination. The loop invariant x == 0 holds before the loop execution, in every iteration of the loop, and is the only loop invariant needed in this case."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Pre-conditions or variable assignments in the program:\n   - unsigned int i = 0;\n   - int x = 0, y = 0;\n   - int n = unknown_int();\n   - assume(n > 0);\n\n2. The loop condition:\n   - The loop is a \"while(1)\" loop, which means it is an infinite loop.\n\nNow let's find the loop invariants:\n\n- The loop invariant should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n- However, since the loop is infinite, it will never terminate, so we only need to consider the invariants that are true before and during the loop execution.\n\nBased on the analysis, here is the loop invariant for the given program:\n\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop variant n - i;\n*/\n```\n\nThe loop invariant states that i, x, and y will always be 0 during the loop execution. The loop variant ensures that the loop will terminate, but in this case, it won't because it is an infinite loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions or variable assignments:\n\n1. `unsigned int i=0;`\n2. `int x=0, y=0;`\n3. `int n=unknown_int();`\n4. `assume(n>0);`\n5. There is a while loop with the condition `1`, meaning it is an infinite loop.\n\nNow, let's analyze the loop body:\n- The loop body contains only an assert statement: `assert(x==0);`\n\nThe post-condition for the program is an assert statement just after the loop: `assert(x!=0);`\n\nSince the loop is an infinite loop, it will never terminate, and the post-condition will never be reached. Thus, it is not possible to find loop invariants that imply the post-condition.\n\nHowever, if we assume that the loop terminates (which is not the case in the given program), we can provide loop invariants for the loop:\n\n```c\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. But, as mentioned earlier, these invariants do not imply the post-condition since the loop never terminates."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `unsigned int i = 0`\n- `int x = 0, y = 0`\n- `int n = unknown_int()`\n- `assume(n > 0)`\n\nNext, analyze the loop body and loop condition:\n- The loop is a `for` loop that iterates indefinitely (`1` as the condition).\n- Inside the loop body, there is an assertion `x == 0`.\n\nNow, we can determine the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n1. `unsigned int i = 0;`\n2. `int x = 0, y = 0;`\n3. `int n = unknown_int();` (definition not provided)\n4. `assume(n > 0);`\n\nLoop condition: `1` (infinite loop)\n\nPost-condition: `x != 0` (This assertion should never be reached due to the infinite loop)\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: `i == 0` and `x == 0`\n2. In every iteration of the loop: The loop does not modify the values of the variables `x`, `y`, and `i` inside the loop. Therefore, the loop invariants are `x == 0` and `i >= 0`.\n3. After the loop termination: There is no termination condition for the loop in this program.\n\nGiven these loop invariants, we can write the ACSL annotations as follows:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n */\n```\n\nHowever, it's important to note that the post-condition `x != 0` will never be reached, as the loop is infinite."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given C program:\n\nPre-conditions or variable assignments:\n- `unsigned int i=0;`\n- `int x=0, y=0;`\n- `int n=unknown_int();`\n- `assume(n>0);`\n\nLoop condition: `1` (infinite loop)\n\nNow, let's determine the loop invariants:\n\n1. `x` is always equal to `0` before the loop execution, in every iteration of the loop, and after the loop termination.\n2. `i` is a non-negative integer.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/\n```\n\nHowever, it is important to note that the given program has an infinite loop and never reaches the post-condition `x != 0`. In this case, Frama-C would not be able to verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "Given that the provided program is not a complete and well-formed C program, we will need to make some changes before we can proceed with finding the loop invariants. First, let's correct the program by removing the `assume` function and the `unknown` function calls, and replace them with actual values or assumptions in ACSL annotations:\n\n```c\n#include <limits.h>\n\n/*@ requires n > 0; */\nint main(int n) {\n  unsigned int i = 0;\n  int x = 0, y = 0;\n\n  //@ ghost int initial_n = n;\n\n  while (1) {\n    //@ assert x == 0;\n    i++;\n  }\n\n  //@ assert x != 0;\n}\n```\n\nNow we can find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\n```\n/*@ \n    loop invariant i <= UINT_MAX;\n    loop invariant x == 0;\n    loop assigns i, x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Pre-conditions and variable assignments:\n   - `unsigned int i=0;`\n   - `int  x=0,  y=0;`\n   - `int  n=unknown_int();`\n   - `assume(n>0);`\n\n2. Loop body and condition:\n   - The loop condition is `1`, which means it's an infinite loop.\n   - Loop body contains an ACSL assertion `/*@ assert(x==0); */`.\n\nNow let's find the loop invariants for the given while loop:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```\n\nThese invariants hold:\n- Before the loop execution: `i` is initialized to 0, and both `x` and `y` are initialized to 0.\n- In every iteration of the loop: The loop body doesn't change the values of `i`, `x`, and `y`.\n- After the loop termination: However, the loop never terminates as the loop condition is always true.\n\nNote that the post-condition `/*@ assert(x!=0); */` is unreachable, as the loop never terminates."
                },
                {
                    "role": "assistant",
                    "content": "We cannot determine loop invariants for the given code. The reason is that there is no exit condition for the loop, and the body of the loop does not update any variables that could affect its termination. Therefore, it becomes impossible to reason about the behavior of this loop using loop invariants."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n    loop variant n - i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n */",
            "/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/",
            "/*@ \n    loop invariant i <= UINT_MAX;\n    loop invariant x == 0;\n    loop assigns i, x;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nWe cannot determine loop invariants for the given code. The reason is that there is no exit condition for the loop, and the body of the loop does not update any variables that could affect its termination. Therefore, it becomes impossible to reason about the behavior of this loop using loop invariants."
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: x == 0;\nloop invariant i3: i == 0;\nloop invariant i4: x == 0;\nloop invariant i5: y == 0;\nloop invariant i6: i >= 0;\nloop invariant i7: x == 0;\nloop invariant i8: i >= 0;\nloop invariant i9: x == 0;\nloop invariant i10: y == 0;\nloop invariant i11: i >= 0;\nloop invariant i12: x == 0;\nloop invariant i13: x == 0;\nloop invariant i14: i >= 0;\nloop invariant i15: i <= UINT_MAX;\nloop invariant i16: x == 0;\nloop invariant i17: i >= 0;\nloop invariant i18: x == 0;\nloop invariant i19: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 25: unbound logic variable UINT_MAX. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: x == 0;\n\nloop invariant i4: x == 0;\nloop invariant i5: y == 0;\nloop invariant i6: i >= 0;\nloop invariant i7: x == 0;\nloop invariant i8: i >= 0;\nloop invariant i9: x == 0;\nloop invariant i10: y == 0;\nloop invariant i11: i >= 0;\nloop invariant i12: x == 0;\nloop invariant i13: x == 0;\nloop invariant i14: i >= 0;\n\nloop invariant i16: x == 0;\nloop invariant i17: i >= 0;\nloop invariant i18: x == 0;\nloop invariant i19: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 149,
        "success_rate": 0.5436241610738255
    }
}