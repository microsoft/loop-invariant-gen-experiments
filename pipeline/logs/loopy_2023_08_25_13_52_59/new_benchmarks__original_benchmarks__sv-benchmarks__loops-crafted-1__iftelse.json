{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant j <= k + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= n;\nloop invariant i3: 0 <= k && k <= n;\nloop invariant i4: i == 3*(j + k);\nloop invariant i5: j <= k + 1;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 2 * j <= i;\n    loop invariant 2 * k <= i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i <= n;\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: 2 * j <= i;\nloop invariant i6: 2 * k <= i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\n\nloop invariant i4: k % 3 == 0;\n\nloop invariant i6: 2 * k <= i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant i == 3 * (j/3 + k/3);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: j % 3 == 0;\nloop invariant i3: k % 3 == 0;\nloop invariant i4: i == 3 * (j/3 + k/3);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: j % 3 == 0;\nloop invariant i3: k % 3 == 0;\nloop invariant i4: i == 3 * (j/3 + k/3);\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant i % 6 == 0 ==> j == k;\n    loop invariant i % 6 == 3 ==> j == k + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= n;\nloop invariant i3: 0 <= k <= n;\nloop invariant i4: i == 3*(j + k);\nloop invariant i5: i % 6 == 0 ==> j == k;\nloop invariant i6: i % 6 == 3 ==> j == k + 1;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant (i % 2 != 0) ==> (j % 3 == 0);\n    loop invariant (i % 2 == 0) ==> (k % 3 == 0);\n    loop invariant j + k == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: (i % 2 != 0) ==> (j % 3 == 0);\nloop invariant i3: (i % 2 == 0) ==> (k % 3 == 0);\nloop invariant i4: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: i % 3 == 0;\nloop invariant i2: (i % 2 != 0) ==> (j % 3 == 0);\nloop invariant i3: (i % 2 == 0) ==> (k % 3 == 0);\nloop invariant i4: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 3 * ((i + 2) / 6) <= j && j <= i;\n    loop invariant 3 * (i / 6) <= k && k <= i;\n    loop invariant j + k == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: 3 * ((i + 2) / 6) <= j && j <= i;\nloop invariant i6: 3 * (i / 6) <= k && k <= i;\nloop invariant i7: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: 3 * ((i + 2) / 6) <= j && j <= i;\nloop invariant i6: 3 * (i / 6) <= k && k <= i;\nloop invariant i7: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@\n  loop invariant 0 <= i <= n;\n  loop invariant i % 3 == 0;\n  loop invariant j % 3 == 0;\n  loop invariant k % 3 == 0;\n  loop invariant j + k == i;\n  loop invariant j * 2 <= i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: j + k == i;\nloop invariant i6: j * 2 <= i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is established but not preserved.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: j + k == i;\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant i <= n;\n    loop invariant i <= 3 * j + 3 * k;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\nloop invariant i4: i <= n;\nloop invariant i5: i <= 3 * j + 3 * k;\nloop invariant i6: i % 3 == 0;\nloop invariant i7: j % 3 == 0;\nloop invariant i8: k % 3 == 0;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is established but not preserved.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= k;\n\nloop invariant i5: i <= 3 * j + 3 * k;\nloop invariant i6: i % 3 == 0;\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant j + k == i;\n    loop invariant i/2 <= j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: j + k == i;\nloop invariant i6: i/2 <= j;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\nloop invariant i2: i % 3 == 0;\nloop invariant i3: j % 3 == 0;\nloop invariant i4: k % 3 == 0;\nloop invariant i5: j + k == i;\nloop invariant i6: i/2 <= j;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i % 2 == 0 ==> k == i / 2 * 3;\n    loop invariant i % 2 != 0 ==> j == (i - 1) / 2 * 3;\n    loop invariant j + k == i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= n;\nloop invariant i3: 0 <= k && k <= n;\nloop invariant i4: i % 2 == 0 ==> k == i / 2 * 3;\nloop invariant i5: i % 2 != 0 ==> j == (i - 1) / 2 * 3;\nloop invariant i6: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion i / 2 <= j: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions or variable assignments in the program:\n\n1. `n` is assigned an unknown unsigned integer value.\n2. The program returns 0 if `n > SIZE`, where SIZE = 20000001.\n3. `i`, `j`, and `k` are initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `i < n`.\n\nNow, let's output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant j <= k + 1;\n*/\n```\n\nThese loop invariants ensure that:\n1. `i`, `j`, and `k` are always non-negative and within the range [0, n].\n2. The value of `i` is always equal to the sum of `j` and `k` multiplied by 3.\n3. The value of `j` is always less than or equal to the value of `k + 1`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unsigned integer from unknown_uint()\n- n <= SIZE\n- i, j, and k are initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n- In each iteration of the loop, i is incremented by 3.\n- If i is odd, j is incremented by 3. If i is even, k is incremented by 3.\n\nNow let's find the loop invariants:\n- Before the loop execution: i = 0, j = 0, k = 0\n- In every iteration of the loop: (i/2 <= j) and (i/2 <= k)\n- After the loop termination: (i/2 <= j) and (i/2 <= k)\n\nSo, the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination are:\n\n```\n/*@ \n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 2 * j <= i;\n    loop invariant 2 * k <= i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `n` is an unsigned integer with an unknown value, but it must be less than or equal to `SIZE`.\n2. `i`, `j`, and `k` are all initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i < n`.\n\nNow, let's find the necessary loop invariants:\n\n1. `i` is always a multiple of 3.\n2. `j` is always a multiple of 3.\n3. `k` is always a multiple of 3.\n4. `i = 3 * (j/3 + k/3)` because both `j` and `k` are incremented by 3 based on the value of `i`.\n\nHere are the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant i == 3 * (j/3 + k/3);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. n is an unsigned integer, and n <= SIZE.\n2. i, j, and k are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n- Inside the loop, i is incremented by 3 in each iteration.\n- If i is odd, j is incremented by 3, otherwise k is incremented by 3.\n\nNow we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant i % 6 == 0 ==> j == k;\n    loop invariant i % 6 == 3 ==> j == k + 1;\n*/\n```\n\nThese loop invariants ensure that the values of i, j, and k are within the bounds of 0 and n, maintain the relationship between i, j, and k, and account for the possible parity of i."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. n is an unsigned integer assigned by the function unknown_uint()\n2. i, j, and k are initialized to 0\n3. The loop condition is i < n\n\nNow, let's analyze the loop body:\n\n1. i is incremented by 3 in each iteration.\n2. If i % 2 is true (i is odd), j is incremented by 3.\n3. If i % 2 is false (i is even), k is incremented by 3.\n\nBased on this information, we can come up with the following loop invariants:\n\n1. i is always a multiple of 3 (i % 3 == 0).\n2. If i is odd, j is incremented by 3 in that iteration.\n3. If i is even, k is incremented by 3 in that iteration.\n4. The sum of the increments in j and k is equal to i (j + k == i).\n\nNow, let's write the loop invariants in ACSL:\n\n```\n/*@ \n    loop invariant i % 3 == 0;\n    loop invariant (i % 2 != 0) ==> (j % 3 == 0);\n    loop invariant (i % 2 == 0) ==> (k % 3 == 0);\n    loop invariant j + k == i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments in the program:\n\n1. n is an unsigned integer from an unknown source, but it is assumed to be less than or equal to SIZE.\n2. i, j, and k are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is i < n.\n2. Inside the loop, i is incremented by 3, and depending on whether i is odd or even, either j or k is incremented by 3.\n\nNow let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 3 * ((i + 2) / 6) <= j && j <= i;\n    loop invariant 3 * (i / 6) <= k && k <= i;\n    loop invariant j + k == i;\n*/\n```\nThese invariants hold before the loop execution, in every iteration of the loop, and after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unknown unsigned integer.\n- n is less than or equal to SIZE (20000001).\n- i, j, and k are initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@\n  loop invariant 0 <= i <= n;\n  loop invariant i % 3 == 0;\n  loop invariant j % 3 == 0;\n  loop invariant k % 3 == 0;\n  loop invariant j + k == i;\n  loop invariant j * 2 <= i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unsigned integer and is less than or equal to SIZE.\n- i, j, and k are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i < n`.\n\nNow, let's output the loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant i <= n;\n    loop invariant i <= 3 * j + 3 * k;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unsigned integer, and its value is unknown but it is less than or equal to SIZE.\n- i, j, and k are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant j + k == i;\n    loop invariant i/2 <= j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- n is assigned an unknown unsigned integer value.\n- The program returns 0 if n > SIZE. So, the assumption here is n <= SIZE.\n- i, j, and k are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n- In the loop body, i is incremented by 3 in each iteration.\n- If i is odd, j is incremented by 3; otherwise, k is incremented by 3.\n\nNow, let's find the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i % 2 == 0 ==> k == i / 2 * 3;\n    loop invariant i % 2 != 0 ==> j == (i - 1) / 2 * 3;\n    loop invariant j + k == i;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant j <= k + 1;\n*/",
            "/*@ \n    loop invariant i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 2 * j <= i;\n    loop invariant 2 * k <= i;\n*/",
            "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant i == 3 * (j/3 + k/3);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant i == 3*(j + k);\n    loop invariant i % 6 == 0 ==> j == k;\n    loop invariant i % 6 == 3 ==> j == k + 1;\n*/",
            "/*@ \n    loop invariant i % 3 == 0;\n    loop invariant (i % 2 != 0) ==> (j % 3 == 0);\n    loop invariant (i % 2 == 0) ==> (k % 3 == 0);\n    loop invariant j + k == i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant 3 * ((i + 2) / 6) <= j && j <= i;\n    loop invariant 3 * (i / 6) <= k && k <= i;\n    loop invariant j + k == i;\n*/",
            "/*@\n  loop invariant 0 <= i <= n;\n  loop invariant i % 3 == 0;\n  loop invariant j % 3 == 0;\n  loop invariant k % 3 == 0;\n  loop invariant j + k == i;\n  loop invariant j * 2 <= i;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant i <= n;\n    loop invariant i <= 3 * j + 3 * k;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant i % 3 == 0;\n    loop invariant j % 3 == 0;\n    loop invariant k % 3 == 0;\n    loop invariant j + k == i;\n    loop invariant i/2 <= j;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= n;\n    loop invariant 0 <= k && k <= n;\n    loop invariant i % 2 == 0 ==> k == i / 2 * 3;\n    loop invariant i % 2 != 0 ==> j == (i - 1) / 2 * 3;\n    loop invariant j + k == i;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= n;\nloop invariant i3: 0 <= k && k <= n;\nloop invariant i4: i == 3*(j + k);\nloop invariant i5: j <= k + 1;\nloop invariant i6: i <= n;\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\nloop invariant i10: 2 * j <= i;\nloop invariant i11: 2 * k <= i;\nloop invariant i12: i % 3 == 0;\nloop invariant i13: j % 3 == 0;\nloop invariant i14: k % 3 == 0;\nloop invariant i15: i == 3 * (j/3 + k/3);\nloop invariant i16: 0 <= i <= n;\nloop invariant i17: 0 <= j <= n;\nloop invariant i18: 0 <= k <= n;\nloop invariant i19: i == 3*(j + k);\nloop invariant i20: i % 6 == 0 ==> j == k;\nloop invariant i21: i % 6 == 3 ==> j == k + 1;\nloop invariant i22: i % 3 == 0;\nloop invariant i23: (i % 2 != 0) ==> (j % 3 == 0);\nloop invariant i24: (i % 2 == 0) ==> (k % 3 == 0);\nloop invariant i25: j + k == i;\nloop invariant i26: 0 <= i && i <= n;\nloop invariant i27: i % 3 == 0;\nloop invariant i28: j % 3 == 0;\nloop invariant i29: k % 3 == 0;\nloop invariant i30: 3 * ((i + 2) / 6) <= j && j <= i;\nloop invariant i31: 3 * (i / 6) <= k && k <= i;\nloop invariant i32: j + k == i;\nloop invariant i33: 0 <= i <= n;\nloop invariant i34: i % 3 == 0;\nloop invariant i35: j % 3 == 0;\nloop invariant i36: k % 3 == 0;\nloop invariant i37: j + k == i;\nloop invariant i38: j * 2 <= i;\nloop invariant i39: 0 <= i;\nloop invariant i40: 0 <= j;\nloop invariant i41: 0 <= k;\nloop invariant i42: i <= n;\nloop invariant i43: i <= 3 * j + 3 * k;\nloop invariant i44: i % 3 == 0;\nloop invariant i45: j % 3 == 0;\nloop invariant i46: k % 3 == 0;\nloop invariant i47: 0 <= i <= n;\nloop invariant i48: i % 3 == 0;\nloop invariant i49: j % 3 == 0;\nloop invariant i50: k % 3 == 0;\nloop invariant i51: j + k == i;\nloop invariant i52: i/2 <= j;\nloop invariant i53: 0 <= i && i <= n;\nloop invariant i54: 0 <= j && j <= n;\nloop invariant i55: 0 <= k && k <= n;\nloop invariant i56: i % 2 == 0 ==> k == i / 2 * 3;\nloop invariant i57: i % 2 != 0 ==> j == (i - 1) / 2 * 3;\nloop invariant i58: j + k == i;\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i51 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nAssertion i / 2 <= j: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  /*@\n\n\nloop invariant i3: 0 <= k && k <= n;\n\n\n\nloop invariant i7: i % 3 == 0;\nloop invariant i8: j % 3 == 0;\nloop invariant i9: k % 3 == 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: 3 * ((i + 2) / 6) <= j && j <= i;\nloop invariant i31: 3 * (i / 6) <= k && k <= i;\nloop invariant i32: j + k == i;\n\nloop invariant i34: i % 3 == 0;\nloop invariant i35: j % 3 == 0;\nloop invariant i36: k % 3 == 0;\nloop invariant i37: j + k == i;\n\nloop invariant i39: 0 <= i;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i3 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i39 is inductive.\nAssertion i / 2 <= j: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            364,
            366,
            367,
            368,
            370,
            371,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            389,
            390,
            391,
            392,
            393,
            394,
            395,
            397,
            400,
            401,
            402,
            413,
            416,
            418,
            420
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            363,
            365,
            369,
            372,
            385,
            388,
            396,
            398,
            399,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            414,
            415,
            417,
            419,
            421,
            422,
            423
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 420,
        "success_rate": 0.5761904761904761
    }
}