{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0 && y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0 && y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == y && x >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n1. x and y are both initialized with unknown integers.\n2. The program enters the loop only if x == y and y == 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is \"unknown_bool()\".\n2. In each iteration of the loop, both x and y are incremented by 1.\n\nNow, let's output the loop invariants:\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```\n\nThese loop invariants are true:\n1. Before the loop execution: Since x == y and y == 0, both x and y are 0 initially.\n2. In every iteration of the loop: As both x and y are incremented by 1 in each iteration, their equality and non-negative properties are maintained.\n3. After the loop termination: The invariants still hold, and they imply the post condition (x == y && x >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are assigned unknown_int(), so they can be any integer values.\n- The program checks if x == y and y == 0, so x and y must be equal to 0 at the beginning of the loop.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_bool(), so we don't have any specific condition for the loop to continue or terminate.\n- In the loop body, x and y are both incremented by 1.\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. x is assigned an unknown integer value.\n2. y is assigned an unknown integer value.\n3. Pre-condition: x == y and y == 0\n\nNow, let's analyze the loop condition and body:\n\nLoop condition: unknown_bool() (non-deterministic loop condition)\n\nLoop body: x++; y++;\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination. These invariants should imply the post-condition (x == y && x >= 0).\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition (x == y && x >= 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- int x = unknown_int();\n- int y = unknown_int();\n- if (!(x == y && y == 0)) return 0; (This implies x == y and y == 0 at the beginning of the loop)\n\nNow let's analyze the loop:\n- Loop condition: unknown_bool()\n- Loop body: x++; y++;\n\nNow, we can output the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n```\nint x = unknown_int();\nint y = unknown_int();\n```\nBoth x and y are assigned with unknown integer values.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n```\nwhile (unknown_bool()) {\n  x++;y++;\n}\n```\nThe loop condition is `unknown_bool()`, so the loop may continue any number of iterations.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n  loop invariant x == y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution (as x and y are initialized to be equal and 0), in every iteration of the loop (as x and y are incremented together), and after the loop termination (as the loop condition does not affect their values). The loop invariants imply the post condition: `x == y && x >= 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n- x and y are initialized with unknown integer values.\n- There is a precondition: if x and y are not both 0, the program terminates.\n- The while loop condition depends on an unknown boolean value.\n- In the loop body, x and y are incremented together.\n\nNow, let's identify the loop invariants:\n\n1. x and y have the same value in each iteration.\n2. x and y are non-negative.\n\nWe can now write the loop invariants as ACSL annotations:\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0 && y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- x and y are assigned with unknown_int() values.\n- The program continues only if x == y && y == 0, so x and y are both 0 initially.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop executes as long as unknown_bool() returns a non-zero value (true).\n- In each iteration, both x and y are incremented by 1.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n- The program proceeds only if x == y and y == 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_bool(), which means that the loop can run any number of times.\n- In each iteration of the loop, both x and y are incremented by 1.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- int x = unknown_int();\n- int y = unknown_int();\n- if (!(x == y && y == 0)) return 0; (This implies x == y && y == 0)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_bool(), which means the loop may execute zero or more times.\n- In each iteration of the loop, x and y are incremented by 1: x++; y++;\n\nNow, let's output the loop invariants:\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code:\n\n1. Two integer variables `x` and `y` are initialized with unknown values.\n2. A pre-condition checks if both `x` and `y` are equal and equal to 0. If they are not, the program returns 0.\n3. A while loop with an unknown condition is executed. In each iteration, both `x` and `y` are incremented by 1.\n4. The post-condition asserts that `x` and `y` are equal and `x` is greater than or equal to 0.\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution: Since the pre-condition ensures that `x == y` and `x == 0`, we know that both `x` and `y` are 0 at the start of the loop.\n2. In every iteration of the loop: The loop increments both `x` and `y` by 1, so their equality is preserved. Moreover, since they both start at 0, they will always be non-negative.\n3. After the loop termination: The loop condition is unknown, but since the loop maintains the equality between `x` and `y` and the non-negativity of both variables, the post-condition is satisfied.\n\nConsidering all these points, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n  loop invariant x == y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0 && y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  /*@\nloop invariant i1: x == y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x == y;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x == y;\nloop invariant i8: x >= 0;\nloop invariant i9: x == y;\nloop invariant i10: x >= 0;\nloop invariant i11: y >= 0;\nloop invariant i12: x == y;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\nloop invariant i15: x == y;\nloop invariant i16: x >= 0 && y >= 0;\nloop invariant i17: x == y;\nloop invariant i18: x >= 0;\nloop invariant i19: y >= 0;\nloop invariant i20: x == y;\nloop invariant i21: x >= 0;\nloop invariant i22: x == y;\nloop invariant i23: x >= 0;\nloop invariant i24: y >= 0;\nloop invariant i25: x == y;\nloop invariant i26: x >= 0;\nloop invariant i27: y >= 0;\n*/\nwhile (unknown_bool()) {\n    x++;y++;\n  }\n  {;//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nAssertion x == y && x >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            364,
            366,
            367,
            368,
            370,
            371,
            373,
            374,
            375,
            376,
            377
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            363,
            365,
            369,
            372
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 374,
        "success_rate": 0.5828877005347594
    }
}