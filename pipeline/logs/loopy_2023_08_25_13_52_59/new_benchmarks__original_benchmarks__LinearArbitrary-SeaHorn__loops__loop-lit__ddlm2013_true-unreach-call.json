{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant (flag == 0) ==> (i == 1);\n    loop invariant (flag != 0) ==> (i == 0);\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant j == i + 1;\n    loop invariant b == a * (j - i);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: (flag == 0) ==> (i == 1);\nloop invariant i2: (flag != 0) ==> (i == 0);\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: j >= 1;\nloop invariant i6: j == i + 1;\nloop invariant i7: b == a * (j - i);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is preserved but not established.\nloop invariant i7 is inductive.\nAssertion a == b: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (i == 0 && flag) || (i == 1 && !flag);\n    loop invariant (i + 1 == j) || (i + 2 == j);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: j >= 1;\nloop invariant i4: (i == 0 && flag) || (i == 1 && !flag);\nloop invariant i5: (i + 1 == j) || (i + 2 == j);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is preserved but not established.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant i%2 == 0 || i%2 == 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag && i == 2*a) || (!flag && i == 2*a + 1);\n    loop invariant (flag && j == 2*a + 1) || (!flag && j == 2*a);\n    loop invariant b == a*(j - i + 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: j >= 1;\nloop invariant i4: i >= 0;\nloop invariant i5: i%2 == 0 || i%2 == 1;\nloop invariant i6: flag == 0 || flag == 1;\nloop invariant i7: (flag && i == 2*a) || (!flag && i == 2*a + 1);\nloop invariant i8: (flag && j == 2*a + 1) || (!flag && j == 2*a);\nloop invariant i9: b == a*(j - i + 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is preserved but not established.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is neither established nor preserved.\nloop invariant i9 is established but not preserved.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\n\nloop invariant i4: i >= 0;\nloop invariant i5: i%2 == 0 || i%2 == 1;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant i % 2 == 0 ==> (j - i) == 1;\n    loop invariant i % 2 != 0 ==> (j - i) == 2;\n    loop invariant (j - i) == a - b + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 1;\nloop invariant i5: i % 2 == 0 ==> (j - i) == 1;\nloop invariant i6: i % 2 != 0 ==> (j - i) == 2;\nloop invariant i7: (j - i) == a - b + 1;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is neither established nor preserved.\nloop invariant i7 is inductive.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: i >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant a >= 0 && b >= 0;\n    loop invariant i >= 0 && j >= 1;\n    loop invariant j == i + 1 || j == i - 1;\n    loop invariant flag ==> a == b;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0 && b >= 0;\nloop invariant i2: i >= 0 && j >= 1;\nloop invariant i3: j == i + 1 || j == i - 1;\nloop invariant i4: flag ==> a == b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is established but not preserved.\nAssertion a == b: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0 && b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant a == b + i * (j - i) / 2;\n  loop invariant (i % 2 == 0) == (j % 2 == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a == b + i * (j - i) / 2;\nloop invariant i2: (i % 2 == 0) == (j % 2 == 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is neither established nor preserved.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant (flag == 1 && i%2 == 0) || (flag == 0 && i%2 == 1);\n    loop invariant j >= 1;\n    loop invariant j == i + 1 || j == i;\n    loop invariant a == b + (i - j);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: (flag == 1 && i%2 == 0) || (flag == 0 && i%2 == 1);\nloop invariant i4: j >= 1;\nloop invariant i5: j == i + 1 || j == i;\nloop invariant i6: a == b + (i - j);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is neither established nor preserved.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (flag == 1 && i == 2*a) || (flag == 0 && i == 2*a + 1);\n    loop invariant b == a*(j - i/2) + (i/2)*(i/2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: j >= 1;\nloop invariant i4: (flag == 1 && i == 2*a) || (flag == 0 && i == 2*a + 1);\nloop invariant i5: b == a*(j - i/2) + (i/2)*(i/2);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is neither established nor preserved.\nloop invariant i5 is established but not preserved.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= a;\n  loop invariant 0 <= b;\n  loop invariant 0 <= i;\n  loop invariant 1 <= j;\n  loop invariant (flag == 0 && i == 2 * a + 1) || (flag != 0 && i == 2 * a);\n  loop invariant b == a * (j - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\nloop invariant i3: 0 <= i;\nloop invariant i4: 1 <= j;\nloop invariant i5: (flag == 0 && i == 2 * a + 1) || (flag != 0 && i == 2 * a);\nloop invariant i6: b == a * (j - 1);\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nAssertion a == b: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: 0 <= a;\nloop invariant i2: 0 <= b;\nloop invariant i3: 0 <= i;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion a == b: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= 1;\n    loop invariant flag ==> a == b;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\nloop invariant i3: i >= \\at(i, Pre);\nloop invariant i4: j >= 1;\nloop invariant i5: flag ==> a == b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 20: unbound logic variable i. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: a >= 0;\nloop invariant i2: b >= 0;\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion a == b: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. Variables: i, j, a, b are unsigned integers.\n2. Variable flag is an integer.\n3. flag is initialized with an unknown_int() function call.\n4. a and b are initialized to 0.\n5. j is initialized to 1.\n6. If flag is true, i is initialized to 0; otherwise, i is initialized to 1.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is unknown_int(), which can be true or false.\n2. Inside the loop, a is incremented by 1, b is incremented by (j - i), i is incremented by 2, and j is incremented by 2 if i is even, otherwise by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant (flag == 0) ==> (i == 1);\n    loop invariant (flag != 0) ==> (i == 0);\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant j == i + 1;\n    loop invariant b == a * (j - i);\n*/\n```\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition `a == b` when the flag is true."
                },
                {
                    "role": "assistant",
                    "content": "Let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `a` and `b` are initialized to 0.\n2. `j` is initialized to 1.\n3. `i` is initialized to 0 if `flag` is true, or to 1 if `flag` is false.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown, as it depends on the result of `unknown_int()` which is an external function.\n\nTo find the loop invariants that are true before the loop execution, during each iteration of the loop, and after the loop termination, let's examine the changes made to the variables during each iteration of the loop:\n\n1. `a` is incremented by 1.\n2. `b` is incremented by `(j - i)`.\n3. `i` is incremented by 2.\n4. `j` is incremented by 2 if `i % 2 == 0`, or by 1 if `i % 2 != 0`.\n\nConsidering the above analysis, we can now write the loop invariants as follows:\n\n```\n/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (i == 0 && flag) || (i == 1 && !flag);\n    loop invariant (i + 1 == j) || (i + 2 == j);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n\n1. `int flag = unknown_int();`\n2. `a = 0;`\n3. `b = 0;`\n4. `j = 1;`\n5. `if (flag) { i = 0; } else { i = 1; }`\n\nAnalyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `unknown_int()`.\n\nNow, output loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant i%2 == 0 || i%2 == 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag && i == 2*a) || (!flag && i == 2*a + 1);\n    loop invariant (flag && j == 2*a + 1) || (!flag && j == 2*a);\n    loop invariant b == a*(j - i + 1);\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition `{;//@ assert(a == b);}` when `flag` is true."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. `a = 0`\n2. `b = 0`\n3. `j = 1`\n4. `i = 0` if `flag` is true, otherwise `i = 1`\n\nNow, let's analyze the loop condition: `while (unknown_int())`. This means that the loop will run an unknown number of times.\n\nNext, we analyze the loop body and identify the loop invariants that hold (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination:\n\n1. `a` is incremented by 1 in every iteration.\n2. `b` is incremented by `(j - i)` in every iteration.\n3. `i` is incremented by 2 in every iteration.\n4. `j` is incremented by 2 if `i % 2 == 0`, otherwise incremented by 1.\n\nTaking all of this into account, we can write the loop invariants:\n\n```\n/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant i % 2 == 0 ==> (j - i) == 1;\n    loop invariant i % 2 != 0 ==> (j - i) == 2;\n    loop invariant (j - i) == a - b + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- int flag = unknown_int();\n- a = 0;\n- b = 0;\n- j = 1;\n- if (flag) { i = 0; } else { i = 1; }\n\nLoop condition: unknown_int()\n\nPost-condition: if (flag) { assert(a == b); }\n\nLoop invariants:\n```\n/*@ \n    loop invariant a >= 0 && b >= 0;\n    loop invariant i >= 0 && j >= 1;\n    loop invariant j == i + 1 || j == i - 1;\n    loop invariant flag ==> a == b;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `int flag = unknown_int();`\n2. `a = 0;`\n3. `b = 0;`\n4. `j = 1;`\n5. `if (flag) { i = 0; } else { i = 1; }`\n\nNow, let's analyze the loop condition and body:\n\nThe loop condition is `unknown_int()`. Since the loop condition is non-deterministic, we cannot reason about when it terminates, but we can still reason about the loop invariants.\n\nIn the loop body, the following updates occur:\n\n1. `a++;`\n2. `b += (j - i);`\n3. `i += 2;`\n4. `if (i%2 == 0) { j += 2; } else { j++; }`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition (i.e., `a == b` when `flag` is true).\n\n```\n/*@ \n  loop invariant a == b + i * (j - i) / 2;\n  loop invariant (i % 2 == 0) == (j % 2 == 1);\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. When the loop terminates, and `flag` is true, the invariants imply that `a == b`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n1. Variables a and b are initialized to 0.\n2. Variable j is initialized to 1.\n3. Variable i is initialized to 0 if flag is true, and 1 otherwise.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: unknown_int(), which means the loop executes an unknown number of times.\n- Loop body: \n  - a is incremented by 1.\n  - b is incremented by (j - i).\n  - i is incremented by 2.\n  - If i is even, j is incremented by 2; otherwise, j is incremented by 1.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant (flag == 1 && i%2 == 0) || (flag == 0 && i%2 == 1);\n    loop invariant j >= 1;\n    loop invariant j == i + 1 || j == i;\n    loop invariant a == b + (i - j);\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition (a == b) when flag is true."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `int flag = unknown_int();`\n- `a = 0;`\n- `b = 0;`\n- `j = 1;`\n- `if (flag) { i = 0; } else { i = 1; }`\n\nNow, let's analyze the loop condition and body:\n- `while (unknown_int())`\n- Inside the loop:\n  - `a++;`\n  - `b += (j - i);`\n  - `i += 2;`\n  - `if (i%2 == 0) { j += 2; } else { j++; }`\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n```\n/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (flag == 1 && i == 2*a) || (flag == 0 && i == 2*a + 1);\n    loop invariant b == a*(j - i/2) + (i/2)*(i/2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. `int flag = unknown_int();`\n2. `a = 0;`\n3. `b = 0;`\n4. `j = 1;`\n5. `if (flag) { i = 0; } else { i = 1; }`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- `while (unknown_int()) { ... }`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n  loop invariant 0 <= a;\n  loop invariant 0 <= b;\n  loop invariant 0 <= i;\n  loop invariant 1 <= j;\n  loop invariant (flag == 0 && i == 2 * a + 1) || (flag != 0 && i == 2 * a);\n  loop invariant b == a * (j - 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- `a = 0`\n- `b = 0`\n- `j = 1`\n- `i = 0` if `flag` is true, otherwise `i = 1`\n\nNow, let's analyze the loop body and loop condition:\n- The loop condition is `unknown_int()`, which means it can be true or false, and we cannot make any assumptions on when the loop will terminate.\n- Inside the loop, `a` is incremented by 1 in every iteration.\n- `b` is incremented by `(j - i)` in every iteration.\n- `i` is incremented by 2 in every iteration.\n- If `i % 2 == 0`, `j` is incremented by 2, otherwise `j` is incremented by 1.\n\nNow, let's find the loop invariants:\n1. The value of `a` is always greater than or equal to the initial value of `a`.\n2. The value of `b` is always greater than or equal to the initial value of `b`.\n3. The value of `i` is always greater than or equal to the initial value of `i`.\n4. The value of `j` is always greater than or equal to the initial value of `j`.\n5. The value of `a` and `b` are always equal when `flag` is true.\n\nConsidering these points, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= 1;\n    loop invariant flag ==> a == b;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant (flag == 0) ==> (i == 1);\n    loop invariant (flag != 0) ==> (i == 0);\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant j == i + 1;\n    loop invariant b == a * (j - i);\n*/",
            "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (i == 0 && flag) || (i == 1 && !flag);\n    loop invariant (i + 1 == j) || (i + 2 == j);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant i%2 == 0 || i%2 == 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag && i == 2*a) || (!flag && i == 2*a + 1);\n    loop invariant (flag && j == 2*a + 1) || (!flag && j == 2*a);\n    loop invariant b == a*(j - i + 1);\n*/",
            "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant i % 2 == 0 ==> (j - i) == 1;\n    loop invariant i % 2 != 0 ==> (j - i) == 2;\n    loop invariant (j - i) == a - b + 1;\n*/",
            "/*@ \n    loop invariant a >= 0 && b >= 0;\n    loop invariant i >= 0 && j >= 1;\n    loop invariant j == i + 1 || j == i - 1;\n    loop invariant flag ==> a == b;\n*/",
            "/*@ \n  loop invariant a == b + i * (j - i) / 2;\n  loop invariant (i % 2 == 0) == (j % 2 == 1);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant (flag == 1 && i%2 == 0) || (flag == 0 && i%2 == 1);\n    loop invariant j >= 1;\n    loop invariant j == i + 1 || j == i;\n    loop invariant a == b + (i - j);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (flag == 1 && i == 2*a) || (flag == 0 && i == 2*a + 1);\n    loop invariant b == a*(j - i/2) + (i/2)*(i/2);\n*/",
            "/*@ \n  loop invariant 0 <= a;\n  loop invariant 0 <= b;\n  loop invariant 0 <= i;\n  loop invariant 1 <= j;\n  loop invariant (flag == 0 && i == 2 * a + 1) || (flag != 0 && i == 2 * a);\n  loop invariant b == a * (j - 1);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= 1;\n    loop invariant flag ==> a == b;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\nloop invariant i1: (flag == 0) ==> (i == 1);\nloop invariant i2: (flag != 0) ==> (i == 0);\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\nloop invariant i5: j >= 1;\nloop invariant i6: j == i + 1;\nloop invariant i7: b == a * (j - i);\nloop invariant i8: a >= 0;\nloop invariant i9: b >= 0;\nloop invariant i10: j >= 1;\nloop invariant i11: (i == 0 && flag) || (i == 1 && !flag);\nloop invariant i12: (i + 1 == j) || (i + 2 == j);\nloop invariant i13: a >= 0;\nloop invariant i14: b >= 0;\nloop invariant i15: j >= 1;\nloop invariant i16: i >= 0;\nloop invariant i17: i%2 == 0 || i%2 == 1;\nloop invariant i18: flag == 0 || flag == 1;\nloop invariant i19: (flag && i == 2*a) || (!flag && i == 2*a + 1);\nloop invariant i20: (flag && j == 2*a + 1) || (!flag && j == 2*a);\nloop invariant i21: b == a*(j - i + 1);\nloop invariant i22: a >= 0;\nloop invariant i23: b >= 0;\nloop invariant i24: i >= 0;\nloop invariant i25: j >= 1;\nloop invariant i26: i % 2 == 0 ==> (j - i) == 1;\nloop invariant i27: i % 2 != 0 ==> (j - i) == 2;\nloop invariant i28: (j - i) == a - b + 1;\nloop invariant i29: a >= 0 && b >= 0;\nloop invariant i30: i >= 0 && j >= 1;\nloop invariant i31: j == i + 1 || j == i - 1;\nloop invariant i32: flag ==> a == b;\nloop invariant i33: a == b + i * (j - i) / 2;\nloop invariant i34: (i % 2 == 0) == (j % 2 == 1);\nloop invariant i35: a >= 0;\nloop invariant i36: b >= 0;\nloop invariant i37: (flag == 1 && i%2 == 0) || (flag == 0 && i%2 == 1);\nloop invariant i38: j >= 1;\nloop invariant i39: j == i + 1 || j == i;\nloop invariant i40: a == b + (i - j);\nloop invariant i41: a >= 0;\nloop invariant i42: b >= 0;\nloop invariant i43: j >= 1;\nloop invariant i44: (flag == 1 && i == 2*a) || (flag == 0 && i == 2*a + 1);\nloop invariant i45: b == a*(j - i/2) + (i/2)*(i/2);\nloop invariant i46: 0 <= a;\nloop invariant i47: 0 <= b;\nloop invariant i48: 0 <= i;\nloop invariant i49: 1 <= j;\nloop invariant i50: (flag == 0 && i == 2 * a + 1) || (flag != 0 && i == 2 * a);\nloop invariant i51: b == a * (j - 1);\nloop invariant i52: a >= 0;\nloop invariant i53: b >= 0;\nloop invariant i54: i >= \\at(i, Pre);\nloop invariant i55: j >= 1;\nloop invariant i56: flag ==> a == b;\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 71: unbound logic variable i. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    /*@\n\n\nloop invariant i3: a >= 0;\nloop invariant i4: b >= 0;\n\n\n\nloop invariant i8: a >= 0;\nloop invariant i9: b >= 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i35: a >= 0;\nloop invariant i36: b >= 0;\n\n\n\n\nloop invariant i41: a >= 0;\nloop invariant i42: b >= 0;\n\n\n\nloop invariant i46: 0 <= a;\nloop invariant i47: 0 <= b;\nloop invariant i48: 0 <= i;\n\n\n\n\n\n\n\n\n*/\nwhile (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;//@ assert(a == b);\n}\n    }\n    return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nAssertion a == b: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 130,
        "success_rate": 0.5230769230769231
    }
}