{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/eq1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@\n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion w == x && y == z: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- w is an unsigned integer and is assigned an unknown value.\n- x is assigned the value of w.\n- y is an unsigned integer and is assigned an unknown value.\n- z is assigned the value of y.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop continues as long as unknown_uint() returns a non-zero value.\n- Inside the loop, if unknown_uint() returns a non-zero value, w and x are incremented by 1.\n- Else, y and z are decremented by 1.\n\nNow let's output the loop invariants:\n```\n/*@\n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- w and x are both assigned the same unknown unsigned integer value.\n- y and z are both assigned the same unknown unsigned integer value.\n\nLoop condition:\n- The loop continues running as long as unknown_uint() returns a non-zero value.\n\nThe loop invariants needed are:\n1. w and x have the same value in every iteration.\n2. y and z have the same value in every iteration.\n\nThe loop invariants can be written as:\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n1. w, x, y, and z are unsigned int variables.\n2. x is initialized to w.\n3. z is initialized to y.\n\nLoop condition:\n- The loop continues to execute while unknown_uint() returns a non-zero value.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- w is assigned an unknown unsigned integer.\n- x is assigned the value of w.\n- y is assigned an unknown unsigned integer.\n- z is assigned the value of y.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop continues as long as the call to unknown_uint() returns a non-zero value.\n- Inside the loop, there are two branches:\n  - If another call to unknown_uint() returns a non-zero value, w and x are incremented.\n  - If the call returns zero, y and z are decremented.\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```\nThese loop invariants hold true before the loop, during every iteration, and after the loop termination, and they imply the post condition \"w == x && y == z\"."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- w, x are assigned the same unknown unsigned integer value.\n- y, z are assigned the same unknown unsigned integer value.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition is unknown_uint(), which is non-deterministic, so the loop can run zero or more times.\n- If unknown_uint() is non-zero, w and x are incremented, otherwise y and z are decremented.\n\nWith this information, we can now state the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```\n\nThese loop invariants satisfy the requirements:\n\n1. They are true before the loop execution: w == x and y == z, as they are assigned the same values before the loop.\n2. They hold for every iteration of the loop: If w and x are incremented, they remain equal; similarly, if y and z are decremented, they remain equal.\n3. They hold after the loop termination: w == x and y == z, as specified by the loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- w = unknown_uint();\n- x = w;\n- y = unknown_uint();\n- z = y;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- loop condition: unknown_uint()\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, such that they imply the post condition (w == x && y == z)."
                },
                {
                    "role": "assistant",
                    "content": "First, we note the initial variable assignments and pre-conditions:\n- w = unknown_uint()\n- x = w\n- y = unknown_uint()\n- z = y\n\nThe loop condition is: unknown_uint()\n\nNow, we analyze the loop body:\n- If unknown_uint() is true, both w and x are incremented.\n- Else, both y and z are decremented.\n\nWe can now write the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n\n1. unsigned int w = unknown_uint();\n2. unsigned int x = w;\n3. unsigned int y = unknown_uint();\n4. unsigned int z = y;\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_uint(), which means the loop may run any number of times, including not running at all.\n\nNow, output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions:\n- w = unknown_uint()\n- x = w\n- y = unknown_uint()\n- z = y\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown_uint(). It is a non-deterministic function call, so the loop may run any number of times.\n\nNow let's find the loop invariants:\n\n1. Before the loop execution:\n- w == x\n- y == z\n\n2. In every iteration of the loop:\n- if unknown_uint() is true, then w and x are incremented by 1.\n- else, y and z are decremented by 1.\n\n3. After the loop termination:\n- w == x\n- y == z\n\nBased on the above analysis, the loop invariants are:\n\n```\n/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Before proceeding to the loop invariants, let's make a note of the variable assignments and loop condition in the given program:\n\nVariable assignments:\n- w = unknown_uint()\n- x = w\n- y = unknown_uint()\n- z = y\n\nLoop condition:\n- while (unknown_uint())\n\nNow, let's find the loop invariants that hold true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination:\n\n```\n/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/\n```\nThese loop invariants hold true before the loop execution because of the initial variable assignments (x = w and z = y). They hold true in every iteration of the loop, as both pairs of variables (w, x) and (y, z) are either incremented or decremented together. Finally, these loop invariants hold true after the loop termination, as they are maintained throughout the loop. The post-condition (w == x && y == z) is implied by these loop invariants."
                }
            ]
        ],
        "invariants": [
            "/*@\n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y == z;\n*/",
            "/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/",
            "/*@ \n  loop invariant w == x;\n  loop invariant y == z;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  /*@\nloop invariant i1: w == x;\nloop invariant i2: y == z;\nloop invariant i3: w == x;\nloop invariant i4: y == z;\nloop invariant i5: w == x;\nloop invariant i6: y == z;\nloop invariant i7: w == x;\nloop invariant i8: y == z;\nloop invariant i9: w == x;\nloop invariant i10: y == z;\nloop invariant i11: w == x;\nloop invariant i12: y == z;\nloop invariant i13: w == x;\nloop invariant i14: y == z;\nloop invariant i15: w == x;\nloop invariant i16: y == z;\nloop invariant i17: w == x;\nloop invariant i18: y == z;\nloop invariant i19: w == x;\nloop invariant i20: y == z;\n*/\nwhile (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;//@ assert(w == x && y == z);\n}\n  return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nAssertion w == x && y == z: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 309,
        "success_rate": 0.5598705501618123
    }
}