{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 2*(n+1)*10;\n    loop invariant (i > 1) ==> (j == 10 - (i-1));\n    loop invariant sn == 2*(min(i-1, 10))*(11 - min(i-1, 10))/2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant 0 <= j && j <= 10;\nloop invariant 0 <= sn && sn <= 2*(n+1)*10;\nloop invariant (i > 1) ==> (j == 10 - (i-1));\nloop invariant sn == 2*(min(i-1, 10))*(11 - min(i-1, 10))/2;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Annotation error on line 14: unbound logic function min. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\n\n\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant j <= 10;\n    loop invariant sn >= 0;\n    loop invariant sn <= i * a;\n    loop invariant i <= j + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i;\nloop invariant j <= 10;\nloop invariant sn >= 0;\nloop invariant sn <= i * a;\nloop invariant i <= j + 1;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 10: Partially proven\nInvariant j <= 10 on line 11: Partially proven\nInvariant sn >= 0 on line 12: Partially proven\nInvariant sn <= i * 2 on line 13: Partially proven\nInvariant i <= j + 1 on line 14: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i;\nloop invariant j <= 10;\nloop invariant sn >= 0;\nloop invariant sn <= i * a;\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 10: Valid\nInvariant j <= 10 on line 11: Valid\nInvariant sn >= 0 on line 12: Valid\nInvariant sn <= i * 2 on line 13: Valid\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 10*a;\n    loop invariant sn <= i*a;\n    loop invariant (i > 10) ==> (sn == (10*a));\n    loop invariant (i <= 10) ==> (sn == (i-1)*a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant 0 <= j && j <= 10;\nloop invariant 0 <= sn && sn <= 10*a;\nloop invariant sn <= i*a;\nloop invariant (i > 10) ==> (sn == (10*a));\nloop invariant (i <= 10) ==> (sn == (i-1)*a);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 10: Unknown\nInvariant 0 <= j <= 10 on line 11: Unknown\nInvariant 0 <= sn <= 10 * 2 on line 12: Partially proven\nInvariant sn <= i * 2 on line 13: Partially proven\nInvariant i > 10 ==> sn == 10 * 2 on line 14: Unknown\nInvariant i <= 10 ==> sn == (i - 1) * 2 on line 15: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\n\n\n\nloop invariant sn <= i*a;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn <= i * 2 on line 13: Valid\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant j == 10 - (i-1);\n    loop invariant (i >= j) ==> (sn == (i-1)*a);\n    loop invariant (i < j) ==> (sn == i*a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n*a;\nloop invariant j == 10 - (i-1);\nloop invariant (i >= j) ==> (sn == (i-1)*a);\nloop invariant (i < j) ==> (sn == i*a);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 10: Unknown\nInvariant 0 <= sn <= n * 2 on line 11: Partially proven\nInvariant j == 10 - (i - 1) on line 12: Partially proven\nInvariant i >= j ==> sn == (i - 1) * 2 on line 13: Partially proven\nInvariant i < j ==> sn == i * 2 on line 14: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 21: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\n\n\nloop invariant j == 10 - (i-1);\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant j == 10 - (i - 1) on line 12: Valid\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 10 - (i-1) <= j <= 10;\n    loop invariant sn >= 0;\n    loop invariant i < j ==> sn == (i-1)*a;\n    loop invariant i >= j ==> sn == (10-j)*a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant 10 - (i-1) <= j <= 10;\nloop invariant sn >= 0;\nloop invariant i < j ==> sn == (i-1)*a;\nloop invariant i >= j ==> sn == (10-j)*a;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 10: Unknown\nInvariant 10 - (i - 1) <= j <= 10 on line 11: Partially proven\nInvariant sn >= 0 on line 12: Partially proven\nInvariant i < j ==> sn == (i - 1) * 2 on line 13: Partially proven\nInvariant i >= j ==> sn == (10 - j) * 2 on line 14: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\n\nloop invariant 10 - (i-1) <= j <= 10;\nloop invariant sn >= 0;\nloop invariant i < j ==> sn == (i-1)*a;\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant 10 - (i - 1) <= j <= 10 on line 11: Valid\nInvariant sn >= 0 on line 12: Valid\nInvariant i < j ==> sn == (i - 1) * 2 on line 13: Valid\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- i is initialized to 1.\n- j is initialized to 10.\n- n is assigned a non-deterministic unsigned integer value.\n- sn is initialized to 0.\n\nThe loop body and condition:\n- The loop condition is i <= n.\n- Inside the loop, if i < j, then sn is updated as sn + a (a = 2), and j is decremented by 1 in each iteration.\n\nNow let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 2*(n+1)*10;\n    loop invariant (i > 1) ==> (j == 10 - (i-1));\n    loop invariant sn == 2*(min(i-1, 10))*(11 - min(i-1, 10))/2;\n*/\n```\n\nExplanation of loop invariants:\n1. i starts at 1 and increases by 1 each iteration, and the loop terminates when i > n. Therefore, 1 <= i <= n+1.\n2. j starts at 10 and decreases by 1 each iteration, but it never goes below 0. Therefore, 0 <= j <= 10.\n3. sn is incremented by a (which is 2) at most (n+1)*10 times, so 0 <= sn <= 2*(n+1)*10.\n4. If i > 1, then j has been decreased (i-1) times, so j == 10 - (i-1).\n5. sn accumulates the sum of a (2) for each iteration when i < j. The sum can be calculated as 2*(min(i-1, 10))*(11 - min(i-1, 10))/2, based on the arithmetic progression formula."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the initial variable assignments and the pre-conditions in the program:\n\n- i = 1 (initialized in the for loop)\n- j = 10\n- n = unknown_uint() (non-deterministic)\n- sn = 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: i <= n\n\nNow let's find the necessary loop invariants:\n\n1. i is always greater than or equal to 1.\n2. j is always less than or equal to 10.\n3. sn is always greater than or equal to 0.\n4. sn is always less than or equal to i * a.\n5. i is always less than or equal to j + 1.\n\nWe can now write the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant j <= 10;\n    loop invariant sn >= 0;\n    loop invariant sn <= i * a;\n    loop invariant i <= j + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the important pre-conditions or variable assignments in the program:\n- j is initialized to 10\n- n is initialized with an unknown unsigned integer\n- sn is initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= n\n\nNow, let's write the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 10*a;\n    loop invariant sn <= i*a;\n    loop invariant (i > 10) ==> (sn == (10*a));\n    loop invariant (i <= 10) ==> (sn == (i-1)*a);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the pre-conditions or variable assignments in the program:\n- j is assigned 10\n- n is assigned by calling unknown_uint()\n- sn is assigned 0\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop condition is i<=n\n- In the loop body, if i<j, sn is updated with sn+a\n- j is decremented in each iteration\n\nNow, we output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant j == 10 - (i-1);\n    loop invariant (i >= j) ==> (sn == (i-1)*a);\n    loop invariant (i < j) ==> (sn == i*a);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i is initialized to 1.\n- j is initialized to 10.\n- n is an unknown non-negative integer.\n- sn is initialized to 0.\n\nNext, let's analyze the loop body and the loop condition:\n- The loop condition is i <= n.\n- In each iteration of the loop, the following actions are taken:\n  1. If i < j, sn is updated with sn + a.\n  2. j is decremented by 1.\n  3. i is incremented by 1.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 10 - (i-1) <= j <= 10;\n    loop invariant sn >= 0;\n    loop invariant i < j ==> sn == (i-1)*a;\n    loop invariant i >= j ==> sn == (10-j)*a;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 2*(n+1)*10;\n    loop invariant (i > 1) ==> (j == 10 - (i-1));\n    loop invariant sn == 2*(min(i-1, 10))*(11 - min(i-1, 10))/2;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant j <= 10;\n    loop invariant sn >= 0;\n    loop invariant sn <= i * a;\n    loop invariant i <= j + 1;\n*/",
            "/*@\n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant 0 <= sn && sn <= 10*a;\n    loop invariant sn <= i*a;\n    loop invariant (i > 10) ==> (sn == (10*a));\n    loop invariant (i <= 10) ==> (sn == (i-1)*a);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n*a;\n    loop invariant j == 10 - (i-1);\n    loop invariant (i >= j) ==> (sn == (i-1)*a);\n    loop invariant (i < j) ==> (sn == i*a);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 10 - (i-1) <= j <= 10;\n    loop invariant sn >= 0;\n    loop invariant i < j ==> sn == (i-1)*a;\n    loop invariant i >= j ==> sn == (10-j)*a;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant 0 <= j && j <= 10;\nloop invariant 0 <= sn && sn <= 2*(n+1)*10;\nloop invariant (i > 1) ==> (j == 10 - (i-1));\nloop invariant sn == 2*(min(i-1, 10))*(11 - min(i-1, 10))/2;\nloop invariant 1 <= i;\nloop invariant j <= 10;\nloop invariant sn >= 0;\nloop invariant sn <= i * a;\nloop invariant i <= j + 1;\nloop invariant 0 <= sn && sn <= 10*a;\nloop invariant sn <= i*a;\nloop invariant (i > 10) ==> (sn == (10*a));\nloop invariant (i <= 10) ==> (sn == (i-1)*a);\nloop invariant 1 <= i <= n+1;\nloop invariant 0 <= sn <= n*a;\nloop invariant j == 10 - (i-1);\nloop invariant (i >= j) ==> (sn == (i-1)*a);\nloop invariant (i < j) ==> (sn == i*a);\nloop invariant 10 - (i-1) <= j <= 10;\nloop invariant i < j ==> sn == (i-1)*a;\nloop invariant i >= j ==> sn == (10-j)*a;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 14: unbound logic function min. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  /*@\n\n\n\nloop invariant (i > 1) ==> (j == 10 - (i-1));\n\nloop invariant 1 <= i;\nloop invariant j <= 10;\nloop invariant sn >= 0;\nloop invariant sn <= i * a;\n\nloop invariant 0 <= sn && sn <= 10*a;\nloop invariant sn <= i*a;\n\n\n\n\nloop invariant j == 10 - (i-1);\n\n\nloop invariant 10 - (i-1) <= j <= 10;\nloop invariant i < j ==> sn == (i-1)*a;\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant i > 1 ==> j == 10 - (i - 1) on line 13: Valid\nInvariant 1 <= i on line 15: Valid\nInvariant j <= 10 on line 16: Valid\nInvariant sn >= 0 on line 17: Valid\nInvariant sn <= i * 2 on line 18: Valid\nInvariant 0 <= sn <= 10 * 2 on line 20: Valid\nInvariant sn <= i * 2 on line 21: Valid\nInvariant j == 10 - (i - 1) on line 26: Valid\nInvariant 10 - (i - 1) <= j <= 10 on line 29: Valid\nInvariant i < j ==> sn == (i - 1) * 2 on line 30: Valid\nPost-condition sn == n * 2 || sn == 0 on line 38: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 83,
        "success_rate": 0.5421686746987951
    }
}