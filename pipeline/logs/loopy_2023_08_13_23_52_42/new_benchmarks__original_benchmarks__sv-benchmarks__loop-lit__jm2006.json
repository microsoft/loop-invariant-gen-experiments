{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/jm2006.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x >= 0 on line 13: Partially proven\nInvariant y >= 0 on line 14: Unknown\nInvariant i - x == j - y on line 15: Partially proven\nPost-condition y == 0 on line 23: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\n\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant x >= 0 on line 13: Valid\nInvariant i - x == j - y on line 15: Valid\nPost-condition y == 0 on line 23: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x + y == i + j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i >= 0 && j >= 0;\nloop invariant x >= 0 && y >= 0;\nloop invariant x <= i && y <= j;\nloop invariant x + y == i + j;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant i >= 0 && j >= 0 on line 13: Partially proven\nInvariant x >= 0 && y >= 0 on line 14: Unknown\nInvariant x <= i && y <= j on line 15: Partially proven\nInvariant x + y == i + j on line 16: Unknown\nPost-condition y == 0 on line 24: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant i >= 0 && j >= 0;\n\nloop invariant x <= i && y <= j;\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant i >= 0 && j >= 0 on line 13: Valid\nInvariant x <= i && y <= j on line 15: Valid\nPost-condition y == 0 on line 24: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x >= 0 on line 13: Partially proven\nInvariant y >= 0 on line 14: Unknown\nInvariant x <= i on line 15: Partially proven\nInvariant y <= j on line 16: Partially proven\nInvariant i - x == j - y on line 17: Partially proven\nPost-condition y == 0 on line 25: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\n\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant x >= 0 on line 13: Valid\nInvariant x <= i on line 15: Valid\nInvariant y <= j on line 16: Valid\nInvariant i - x == j - y on line 17: Valid\nPost-condition y == 0 on line 25: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x == y;\n    loop invariant i - x == j - y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == y;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= i on line 13: Partially proven\nInvariant 0 <= y <= j on line 14: Partially proven\nInvariant x == y on line 15: Unknown\nInvariant i - x == j - y on line 16: Partially proven\nPost-condition y == 0 on line 24: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant 0 <= x <= i;\n\n\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= i on line 13: Valid\nInvariant i - x == j - y on line 16: Valid\nPost-condition y == 0 on line 24: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant x >= 0 on line 13: Partially proven\nInvariant y >= 0 on line 14: Unknown\nInvariant x <= i on line 15: Partially proven\nInvariant y <= j on line 16: Partially proven\nInvariant i - x == j - y on line 17: Partially proven\nPost-condition y == 0 on line 25: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\n\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant i - x == j - y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant x >= 0 on line 13: Valid\nInvariant x <= i on line 15: Valid\nInvariant y <= j on line 16: Valid\nInvariant i - x == j - y on line 17: Valid\nPost-condition y == 0 on line 25: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and note the pre-conditions, variable assignments, and loop condition:\n\n1. Pre-conditions: `i >= 0` and `j >= 0`\n2. Variable assignments: `x = i` and `y = j`\n3. Loop condition: `x != 0`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: `x == i` and `y == j`\n2. In every iteration of the loop: `x >= 0`, `y >= 0`, and `i - x == j - y`\n3. After the loop termination: `x == 0`, `y >= 0`, and `i - x == j - y`\n\nNow, let's output the loop invariants in a code block:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i and j are assigned unknown integers.\n- The program only proceeds if i >= 0 and j >= 0.\n- x is assigned the value of i and y is assigned the value of j.\n\nNext, let's analyze the loop body and loop condition:\n- The loop condition is x != 0.\n- In the loop body, both x and y are decremented by 1.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x + y == i + j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i and j are assigned non-deterministic integer values using unknown_int().\n- x is initialized with the value of i.\n- y is initialized with the value of j.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop runs while x is not equal to 0.\n- In each iteration, x and y are decremented by 1.\n\nNow, we can output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition.\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/\n```\nThese loop invariants ensure that:\n- x and y are always non-negative.\n- x and y do not exceed their initial values (i and j, respectively).\n- The difference between i and x is always equal to the difference between j and y. This invariant helps in verifying the post-condition, where we need to check if y becomes 0 when i is equal to j."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i and j are assigned non-deterministic values from `unknown_int()`.\n- The program only proceeds if both i and j are non-negative (i >= 0 && j >= 0).\n- x is initialized with the value of i, and y is initialized with the value of j.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop continues as long as x is not equal to 0 (x != 0).\n- In each iteration of the loop, x and y are decremented by 1.\n\nWith this information, we can write the necessary loop invariants for the while loop:\n\n```\n/*@\n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x == y;\n    loop invariant i - x == j - y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. i and j are non-negative integers: `i >= 0 && j >= 0`\n2. x is initialized to i: `x = i`\n3. y is initialized to j: `y = j`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x != 0`\n- Loop body: `x--; y--;`\n\nNow, we can output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant i >= 0 && j >= 0;\n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= i && y <= j;\n    loop invariant x + y == i + j;\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/",
            "/*@\n    loop invariant 0 <= x <= i;\n    loop invariant 0 <= y <= j;\n    loop invariant x == y;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= i;\n    loop invariant y <= j;\n    loop invariant i - x == j - y;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant i - x == j - y;\nloop invariant i >= 0 && j >= 0;\nloop invariant x >= 0 && y >= 0;\nloop invariant x <= i && y <= j;\nloop invariant x + y == i + j;\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant 0 <= x <= i;\nloop invariant 0 <= y <= j;\nloop invariant x == y;\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant x >= 0 on line 13: Partially proven\nInvariant y >= 0 on line 14: Partially proven\nInvariant i - x == j - y on line 15: Partially proven\nInvariant i >= 0 && j >= 0 on line 16: Partially proven\nInvariant x >= 0 && y >= 0 on line 17: Partially proven\nInvariant x <= i && y <= j on line 18: Partially proven\nInvariant x + y == i + j on line 19: Unknown\nInvariant x <= i on line 20: Partially proven\nInvariant y <= j on line 21: Partially proven\nInvariant 0 <= x <= i on line 22: Partially proven\nInvariant 0 <= y <= j on line 23: Partially proven\nInvariant x == y on line 24: Unknown\nPost-condition y == 0 on line 32: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    /*@\nloop invariant x >= 0;\n\nloop invariant i - x == j - y;\nloop invariant i >= 0 && j >= 0;\n\nloop invariant x <= i && y <= j;\n\nloop invariant x <= i;\nloop invariant y <= j;\nloop invariant 0 <= x <= i;\n\n\n*/\nwhile(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant x >= 0 on line 13: Valid\nInvariant i - x == j - y on line 15: Valid\nInvariant i >= 0 && j >= 0 on line 16: Valid\nInvariant x <= i && y <= j on line 18: Valid\nInvariant x <= i on line 20: Valid\nInvariant y <= j on line 21: Valid\nInvariant 0 <= x <= i on line 22: Valid\nPost-condition y == 0 on line 32: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 332,
        "success_rate": 0.5873493975903614
    }
}