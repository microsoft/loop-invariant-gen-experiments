{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/eq2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  while (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 1;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\nloop invariant y >= w + 1;\nloop invariant z >= w + 1;\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant x == w on line 14: Partially proven\nInvariant y >= w + 1 on line 15: Unknown\nInvariant z >= w + 1 on line 16: Partially proven\nInvariant y == z on line 17: Partially proven\nPost-condition y == z on line 23: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\n\n\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant x == w on line 14: Valid\nInvariant y == z on line 17: Valid\nPost-condition y == z on line 23: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == w;\n    loop invariant y == w + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z - 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\nloop invariant y == w + 1;\nloop invariant z == x + 1;\nloop invariant y == z - 1;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant x == w on line 14: Partially proven\nInvariant y == w + 1 on line 15: Unknown\nInvariant z == x + 1 on line 16: Partially proven\nInvariant y == z - 1 on line 17: Unknown\nPost-condition y == z on line 23: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\n\n\n\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant x == w on line 14: Valid\nPost-condition y == z on line 23: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w <= x < UINT_MAX;\n    loop invariant x == w;\n    loop invariant y == x + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant w <= x < UINT_MAX;\nloop invariant x == w;\nloop invariant y == x + 1;\nloop invariant z == x + 1;\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 14: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\n\nloop invariant x == w;\n\n\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant x == w on line 15: Valid\nInvariant y == z on line 18: Valid\nPost-condition y == z on line 24: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant w == x;\n    loop invariant y >= w + 1;\n    loop invariant z >= x + 1;\n    loop invariant y == z;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant w == x;\nloop invariant y >= w + 1;\nloop invariant z >= x + 1;\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant w == x on line 14: Partially proven\nInvariant y >= w + 1 on line 15: Unknown\nInvariant z >= x + 1 on line 16: Partially proven\nInvariant y == z on line 17: Partially proven\nPost-condition y == z on line 23: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant w == x;\n\n\nloop invariant y == z;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant w == x on line 14: Valid\nInvariant y == z on line 17: Valid\nPost-condition y == z on line 23: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 2;\n    loop invariant y == z || y == z - 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\nloop invariant y >= w + 1;\nloop invariant z >= w + 2;\nloop invariant y == z || y == z - 1;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant x == w on line 14: Partially proven\nInvariant y >= w + 1 on line 15: Unknown\nInvariant z >= w + 2 on line 16: Unknown\nInvariant y == z || y == z - 1 on line 17: Partially proven\nPost-condition y == z on line 23: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\n\n\n\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant x == w on line 14: Valid\nPost-condition y == z on line 23: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  while (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- w is assigned an unknown unsigned integer value.\n- x is assigned the value of w.\n- y is assigned the value of w + 1.\n- z is assigned the value of x + 1, which is equivalent to w + 1.\n\nNow, let's analyze the loop body and the loop condition:\n- The loop condition is unknown_uint(), which is non-deterministic.\n- In the loop body, y and z are incremented.\n\nNow, let's find the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 1;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program. The program initializes the variables w, x, y, and z with the following values:\n- w: unknown unsigned integer\n- x: w\n- y: w + 1\n- z: x + 1\n\nThe loop condition is unknown_uint(), which means that the loop will run an unknown number of times.\n\nInside the loop, y and z are incremented by 1 in each iteration.\n\nThe post-condition after the loop is the assertion that y == z.\n\nNow, let's find the loop invariants.\n\n1. Before the loop execution:\n- x == w (since x is initialized to w)\n- y == w + 1 (since y is initialized to w + 1)\n- z == x + 1 (since z is initialized to x + 1)\n\n2. In every iteration of the loop:\n- y and z are incremented by 1 in each iteration. Since y == w + 1 and z == x + 1 initially, after each iteration, this relation holds true.\n\n3. After the loop termination:\n- The loop invariants that are true before the loop execution and in every iteration of the loop should also be true after the loop termination.\n\nConsidering the above points, the following loop invariants can be used to help Frama-C verify the post-condition:\n\n```\n/*@ \n    loop invariant x == w;\n    loop invariant y == w + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z - 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- w is an unknown unsigned integer.\n- x is assigned the value of w.\n- y is assigned the value of w + 1.\n- z is assigned the value of x + 1.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown_uint(), so it is non-deterministic.\n- In the loop body, y and z are incremented in each iteration.\n\nNow, let's output the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant w <= x < UINT_MAX;\n    loop invariant x == w;\n    loop invariant y == x + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition \"assert(y == z);\"."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `w` is assigned an unknown non-negative value.\n2. `x` is assigned the value of `w`.\n3. `y` is assigned the value of `w + 1`.\n4. `z` is assigned the value of `x + 1`.\n\nNow, let's analyze the loop body and note the loop condition:\n\nThe loop condition is `unknown_uint()`, which means the loop can run an unknown number of times. In each iteration of the loop, `y` and `z` are incremented.\n\nBased on this information, we can now output the loop invariants:\n\n```\n/*@ \n    loop invariant w == x;\n    loop invariant y >= w + 1;\n    loop invariant z >= x + 1;\n    loop invariant y == z;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- w is an unknown unsigned integer\n- x is assigned the value of w\n- y is assigned the value of w + 1\n- z is assigned the value of x + 1\n\nLoop condition: unknown_uint()\n\nPost-condition: y == z\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 2;\n    loop invariant y == z || y == z - 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 1;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant x == w;\n    loop invariant y == w + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z - 1;\n*/",
            "/*@ \n    loop invariant w <= x < UINT_MAX;\n    loop invariant x == w;\n    loop invariant y == x + 1;\n    loop invariant z == x + 1;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant w == x;\n    loop invariant y >= w + 1;\n    loop invariant z >= x + 1;\n    loop invariant y == z;\n*/",
            "/*@ \n    loop invariant x == w;\n    loop invariant y >= w + 1;\n    loop invariant z >= w + 2;\n    loop invariant y == z || y == z - 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\nloop invariant y >= w + 1;\nloop invariant z >= w + 1;\nloop invariant y == z;\nloop invariant y == w + 1;\nloop invariant z == x + 1;\nloop invariant y == z - 1;\nloop invariant w <= x < UINT_MAX;\nloop invariant y == x + 1;\nloop invariant w == x;\nloop invariant z >= x + 1;\nloop invariant z >= w + 2;\nloop invariant y == z || y == z - 1;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 21: unbound logic variable UINT_MAX. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  /*@\nloop invariant x == w;\n\n\nloop invariant y == z;\n\n\n\n\n\nloop invariant w == x;\n\n\nloop invariant y == z || y == z - 1;\n*/\nwhile (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;//@ assert(y == z);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant x == w on line 14: Valid\nInvariant y == z on line 17: Valid\nInvariant w == x on line 23: Valid\nInvariant y == z || y == z - 1 on line 26: Valid\nPost-condition y == z on line 32: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 312,
        "success_rate": 0.592948717948718
    }
}