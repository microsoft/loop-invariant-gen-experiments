{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant old <= UINT_MAX;\n    loop invariant new <= UINT_MAX + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 ==> lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old <= UINT_MAX;\nloop invariant new <= UINT_MAX + 1;\nloop invariant lock == 0 || lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 17: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant lock == 0 || lock == 1;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 0 || lock == 1 on line 19: Valid\nPost-condition !(lock == 0) on line 31: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 1 || (lock == 0 && new != old);\n    loop invariant new >= old + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant lock == 1 || (lock == 0 && new != old);\nloop invariant new >= old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant lock == 1 || (lock == 0 && new != old) on line 17: Partially proven\nInvariant new >= old + 1 on line 18: Unknown\nPost-condition !(lock == 0) on line 29: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant lock == 1 || (lock == 0 && new != old);\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 1 || (lock == 0 && new != old) on line 17: Valid\nPost-condition !(lock == 0) on line 29: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant new > old;\n    loop invariant lock == 1 ==> old == \\at(new, Pre);\n    loop invariant lock == 0 ==> \\at(new, Pre) + 2 == new;\n    loop invariant lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant new > old;\nloop invariant lock == 1 ==> old == \\at(new, Pre);\nloop invariant lock == 0 ==> \\at(new, Pre) + 2 == new;\nloop invariant lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 18: unbound logic variable new. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant old <= new;\n    loop invariant lock == 1 ==> old + 1 <= new;\n    loop invariant lock == 0 ==> new == old + 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old <= new;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 0 ==> new == old + 2;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant old <= new on line 17: Partially proven\nInvariant lock == 1 ==> old + 1 <= new on line 18: Partially proven\nInvariant lock == 0 ==> new == old + 2 on line 19: Unknown\nPost-condition !(lock == 0) on line 30: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old <= new;\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant old <= new on line 17: Valid\nPost-condition !(lock == 0) on line 30: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant old <= UINT_MAX && old >= 0;\n    loop invariant new <= UINT_MAX && new >= 0;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (new == old) ==> (lock == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old <= UINT_MAX && old >= 0;\nloop invariant new <= UINT_MAX && new >= 0;\nloop invariant lock == 0 || lock == 1;\nloop invariant (new == old) ==> (lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 17: unbound logic variable UINT_MAX. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant lock == 0 || lock == 1;\nloop invariant (new == old) ==> (lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 0 || lock == 1 on line 19: Valid\nInvariant new == old ==> lock == 1 on line 20: Valid\nPost-condition !(lock == 0) on line 31: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- old = unknown_uint();\n- lock = 0;\n- new = old + 1;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `new != old`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant old <= UINT_MAX;\n    loop invariant new <= UINT_MAX + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 ==> lock == 1;\n*/\n```\n\nExplanation:\n1. old <= UINT_MAX: Since old is an unsigned integer, its maximum value is UINT_MAX.\n2. new <= UINT_MAX + 1: Since new is initialized as old + 1, its maximum value is UINT_MAX + 1.\n3. lock == 0 || lock == 1: The lock variable can only have two values: 0 and 1.\n4. new == old + 1 ==> lock == 1: If new is equal to old + 1, then the lock must be 1. This helps to satisfy the post-condition that the lock should not be 0 when the loop terminates."
                },
                {
                    "role": "assistant",
                    "content": "Preconditions and variable assignments:\n- old is an unknown unsigned integer.\n- lock is initially 0.\n- new is initialized to old + 1.\n\nLoop condition:\n- new != old\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. These invariants should help Frama-C verify the post-condition, which is !(lock == 0).\n\nLoop invariants:\n```\n/*@ \n    loop invariant lock == 1 || (lock == 0 && new != old);\n    loop invariant new >= old + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. old is initialized with an unknown unsigned integer value.\n2. lock is initialized with 0.\n3. new is initialized with old + 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (new != old).\n\nNow, let's find the necessary loop invariants for the while loop:\n\n1. Before the loop execution, new is always greater than old (new = old + 1).\n2. In every iteration of the loop, if lock is set to 1, then old is updated to the value of new.\n3. In every iteration of the loop, if lock is set to 0, then new is incremented by 2.\n4. After the loop termination, lock must be equal to 1.\n\nConsidering the above points, the loop invariants for the given program are:\n\n```\n/*@\n    loop invariant new > old;\n    loop invariant lock == 1 ==> old == \\at(new, Pre);\n    loop invariant lock == 0 ==> \\at(new, Pre) + 2 == new;\n    loop invariant lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. old is assigned a non-deterministic unsigned integer value.\n2. lock is initialized to 0.\n3. new is assigned the value old + 1.\n\nNow, let's analyze the loop body and the loop condition:\n\n- The loop condition is (new != old).\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant old <= new;\n    loop invariant lock == 1 ==> old + 1 <= new;\n    loop invariant lock == 0 ==> new == old + 2;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition \"!(lock == 0)\" because when the loop terminates, we know that new == old and lock must be equal to 1, satisfying the post condition."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n1. old is assigned a value from unknown_uint() function.\n2. lock is assigned 0.\n3. new is assigned old+1.\n\nLoop condition:\n- new != old\n\nPost-condition:\n- lock != 0\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant old <= UINT_MAX && old >= 0;\n    loop invariant new <= UINT_MAX && new >= 0;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (new == old) ==> (lock == 1);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant old <= UINT_MAX;\n    loop invariant new <= UINT_MAX + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 ==> lock == 1;\n*/",
            "/*@ \n    loop invariant lock == 1 || (lock == 0 && new != old);\n    loop invariant new >= old + 1;\n*/",
            "/*@\n    loop invariant new > old;\n    loop invariant lock == 1 ==> old == \\at(new, Pre);\n    loop invariant lock == 0 ==> \\at(new, Pre) + 2 == new;\n    loop invariant lock == 1;\n*/",
            "/*@ \n    loop invariant old <= new;\n    loop invariant lock == 1 ==> old + 1 <= new;\n    loop invariant lock == 0 ==> new == old + 2;\n*/",
            "/*@ \n    loop invariant old <= UINT_MAX && old >= 0;\n    loop invariant new <= UINT_MAX && new >= 0;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (new == old) ==> (lock == 1);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old <= UINT_MAX;\nloop invariant new <= UINT_MAX + 1;\nloop invariant lock == 0 || lock == 1;\nloop invariant new == old + 1 ==> lock == 1;\nloop invariant lock == 1 || (lock == 0 && new != old);\nloop invariant new >= old + 1;\nloop invariant new > old;\nloop invariant lock == 1 ==> old == \\at(new, Pre);\nloop invariant lock == 0 ==> \\at(new, Pre) + 2 == new;\nloop invariant lock == 1;\nloop invariant old <= new;\nloop invariant lock == 1 ==> old + 1 <= new;\nloop invariant lock == 0 ==> new == old + 2;\nloop invariant old <= UINT_MAX && old >= 0;\nloop invariant new <= UINT_MAX && new >= 0;\nloop invariant (new == old) ==> (lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 17: unbound logic variable UINT_MAX. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant lock == 0 || lock == 1;\n\nloop invariant lock == 1 || (lock == 0 && new != old);\n\n\n\n\n\nloop invariant old <= new;\n\n\n\n\nloop invariant (new == old) ==> (lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant lock == 0 || lock == 1 on line 19: Valid\nInvariant lock == 1 || (lock == 0 && new != old) on line 21: Valid\nInvariant old <= new on line 27: Valid\nInvariant new == old ==> lock == 1 on line 32: Valid\nPost-condition !(lock == 0) on line 43: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 262,
        "success_rate": 0.6068702290076335
    }
}