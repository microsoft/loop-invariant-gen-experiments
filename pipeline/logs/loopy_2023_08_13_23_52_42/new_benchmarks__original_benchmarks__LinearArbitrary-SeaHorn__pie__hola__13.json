{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "completions": [
            {
                "invariants": "/*@\n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2*k + 2 ==> flag == 0;\n    loop invariant j % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j % 2 == 0;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "success": false,
                "checker_message": "Invariant j >= 2 on line 16: Partially proven\nInvariant k >= 0 on line 17: Partially proven\nInvariant j == 2 * k + 2 ==> flag == 0 on line 18: Unknown\nInvariant j % 2 == 0 on line 19: Partially proven\nPost-condition j == 2 * k + 2 on line 30: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant j >= 2;\nloop invariant k >= 0;\n\nloop invariant j % 2 == 0;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_message_after_prune": "Invariant j >= 2 on line 16: Valid\nInvariant k >= 0 on line 17: Valid\nInvariant j % 2 == 0 on line 19: Valid\nPost-condition j == 2 * k + 2 on line 30: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag == 1) ==> j == 2*k + 2 + 4*(k - 0);\n    loop invariant (flag == 0) ==> j == 2*k + 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant 0 <= k;\nloop invariant 2 <= j;\nloop invariant (flag == 1) ==> j == 2*k + 2 + 4*(k - 0);\nloop invariant (flag == 0) ==> j == 2*k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= k on line 16: Partially proven\nInvariant 2 <= j on line 17: Partially proven\nInvariant flag == 1 ==> j == (2 * k + 2) + 4 * (k - 0) on line 18: Unknown\nInvariant flag == 0 ==> j == 2 * k + 2 on line 19: Partially proven\nPost-condition j == 2 * k + 2 on line 30: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant 0 <= k;\nloop invariant 2 <= j;\n\nloop invariant (flag == 0) ==> j == 2*k + 2;\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= k on line 16: Valid\nInvariant 2 <= j on line 17: Valid\nInvariant flag == 0 ==> j == 2 * k + 2 on line 19: Valid\nPost-condition j == 2 * k + 2 on line 30: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant (flag != 0) ==> (k == 0);\n    loop invariant (flag == 0) ==> (j == 2 * k + 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant (flag != 0) ==> (k == 0);\nloop invariant (flag == 0) ==> (j == 2 * k + 2);\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "success": true,
                "checker_message": "Invariant j >= 2 on line 16: Valid\nInvariant k >= 0 on line 17: Valid\nInvariant flag != 0 ==> k == 0 on line 18: Valid\nInvariant flag == 0 ==> j == 2 * k + 2 on line 19: Valid\nPost-condition j == 2 * k + 2 on line 30: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag != 0) ==> (j == 2*k + 2);\n    loop invariant (flag == 0) ==> (j == 2*k + 4);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant 0 <= k;\nloop invariant 2 <= j;\nloop invariant (flag != 0) ==> (j == 2*k + 2);\nloop invariant (flag == 0) ==> (j == 2*k + 4);\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= k on line 16: Partially proven\nInvariant 2 <= j on line 17: Partially proven\nInvariant flag != 0 ==> j == 2 * k + 2 on line 18: Unknown\nInvariant flag == 0 ==> j == 2 * k + 4 on line 19: Unknown\nPost-condition j == 2 * k + 2 on line 30: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant 0 <= k;\nloop invariant 2 <= j;\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= k on line 16: Valid\nInvariant 2 <= j on line 17: Valid\nPost-condition j == 2 * k + 2 on line 30: Unknown\n"
            },
            {
                "invariants": "if (flag)\n   j = j + 4;\nelse {\n   j = j + 2;\n   k = k + 1;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
                "checker_message_after_prune": "No invariants/variants found"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's take note of the variable assignments and pre-conditions in the program:\n- j is initialized to 2\n- k is initialized to 0\n- flag is assigned a value from the unknown2() function\n\nNow, let's analyze the loop body and condition:\n- The loop condition is unknown1(), which could be any non-zero value (true) or zero (false).\n- Inside the loop, there is a conditional statement based on the value of flag.\n- If flag is non-zero, j is incremented by 4.\n- If flag is zero, j is incremented by 2 and k is incremented by 1.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@\n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2*k + 2 ==> flag == 0;\n    loop invariant j % 2 == 0;\n*/\n```\n\nExplanation:\n1. j is always greater than or equal to 2 since it starts at 2 and increments by either 2 or 4.\n2. k is always greater than or equal to 0 since it starts at 0 and increments by 1.\n3. If j is equal to 2*k + 2, then flag must be 0, as this relationship is only maintained when j increments by 2 and k increments by 1 (i.e., when flag is 0). We use implication here to account for the conditional nature of the code.\n4. j is always an even number since it starts at 2 and increments by either 2 or 4, which maintains its evenness."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given C program and make some necessary notes:\n\n1. Pre-conditions and variable assignments:\n   - int j = 2;\n   - int k = 0;\n   - int flag = unknown2();\n\n2. Loop condition: while(unknown1())\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we know that:\n   - j = 2\n   - k = 0\n\n2. In every iteration of the loop:\n   - If flag is true, j increases by 4.\n   - If flag is false, j increases by 2 and k increases by 1.\n\n3. After the loop termination, we need to prove the post-condition:\n   - If k != 0, then j == 2*k + 2\n\nTaking all these points into consideration, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag == 1) ==> j == 2*k + 2 + 4*(k - 0);\n    loop invariant (flag == 0) ==> j == 2*k + 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Before we start writing the loop invariants, let's analyze the program and make a note of the pre-conditions, variable assignments, and loop condition.\n\nPre-conditions / Variable assignments:\n- j = 2\n- k = 0\n- flag = unknown2() (non-deterministic value)\n\nLoop condition:\n- unknown1() (non-deterministic)\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLoop invariants:\n1. j >= 2\n2. k >= 0\n3. (flag != 0) ==> (k == 0)\n4. (flag == 0) ==> (j == 2 * k + 2)\n\nHere is the loop invariants block for the given program:\n\n```\n/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant (flag != 0) ==> (k == 0);\n    loop invariant (flag == 0) ==> (j == 2 * k + 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program:\n\nPre-conditions or variable assignments:\n1. j is assigned the value 2.\n2. k is assigned the value 0.\n3. flag is assigned an unknown value from unknown2().\n\nLoop condition: \nunknown1() returns a non-zero value.\n\nLoop body:\n1. If flag is non-zero, j is increased by 4.\n2. If flag is zero, j is increased by 2 and k is increased by 1.\n\nPost-condition:\nIf k is not 0, then j is equal to 2*k + 2.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag != 0) ==> (j == 2*k + 2);\n    loop invariant (flag == 0) ==> (j == 2*k + 4);\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution: k is 0 and j is 2, which satisfy the invariants.\n2. In every iteration of the loop: The invariants are maintained as j increases by either 2 or 4 and k increases by 1 when flag is 0.\n3. After the loop termination: The invariants imply the post-condition, i.e., if k is not 0, j is equal to 2*k + 2."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. `int j = 2;`\n2. `int k = 0;`\n3. `int flag = unknown2();`\n\nNow, let's analyze the loop body and make a note of the loop condition:\nLoop condition: `while(unknown1()){`\n\nLoop body:\n```\nif (flag)\n   j = j + 4;\nelse {\n   j = j + 2;\n   k = k + 1;\n}\n```\n\nNow we can provide the necessary loop invariants:\n\n```\n/*@\n  loop invariant j >= 2;\n  loop invariant k >= 0;\n  loop invariant (flag == 1) ==> (j >= 2 * k + 2);\n  loop invariant (flag == 0) ==> (j == 2 * k + 2);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@\n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant j == 2*k + 2 ==> flag == 0;\n    loop invariant j % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag == 1) ==> j == 2*k + 2 + 4*(k - 0);\n    loop invariant (flag == 0) ==> j == 2*k + 2;\n*/",
            "/*@ \n    loop invariant j >= 2;\n    loop invariant k >= 0;\n    loop invariant (flag != 0) ==> (k == 0);\n    loop invariant (flag == 0) ==> (j == 2 * k + 2);\n*/",
            "/*@ \n    loop invariant 0 <= k;\n    loop invariant 2 <= j;\n    loop invariant (flag != 0) ==> (j == 2*k + 2);\n    loop invariant (flag == 0) ==> (j == 2*k + 4);\n*/",
            "if (flag)\n   j = j + 4;\nelse {\n   j = j + 2;\n   k = k + 1;\n}"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant j >= 2;\nloop invariant k >= 0;\nloop invariant j == 2*k + 2 ==> flag == 0;\nloop invariant j % 2 == 0;\nloop invariant 0 <= k;\nloop invariant 2 <= j;\nloop invariant (flag == 1) ==> j == 2*k + 2 + 4*(k - 0);\nloop invariant (flag == 0) ==> j == 2*k + 2;\nloop invariant (flag != 0) ==> (k == 0);\nloop invariant (flag == 0) ==> (j == 2 * k + 2);\nloop invariant (flag != 0) ==> (j == 2*k + 2);\nloop invariant (flag == 0) ==> (j == 2*k + 4);\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant j >= 2 on line 16: Partially proven\nInvariant k >= 0 on line 17: Partially proven\nInvariant j == 2 * k + 2 ==> flag == 0 on line 18: Unknown\nInvariant j % 2 == 0 on line 19: Partially proven\nInvariant 0 <= k on line 20: Partially proven\nInvariant 2 <= j on line 21: Partially proven\nInvariant flag == 1 ==> j == (2 * k + 2) + 4 * (k - 0) on line 22: Partially proven\nInvariant flag == 0 ==> j == 2 * k + 2 on line 23: Partially proven\nInvariant flag != 0 ==> k == 0 on line 24: Partially proven\nInvariant flag == 0 ==> j == 2 * k + 2 on line 25: Partially proven\nInvariant flag != 0 ==> j == 2 * k + 2 on line 26: Partially proven\nInvariant flag == 0 ==> j == 2 * k + 4 on line 27: Unknown\nPost-condition j == 2 * k + 2 on line 38: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   /*@\nloop invariant j >= 2;\nloop invariant k >= 0;\n\nloop invariant j % 2 == 0;\nloop invariant 0 <= k;\nloop invariant 2 <= j;\n\nloop invariant (flag == 0) ==> j == 2*k + 2;\nloop invariant (flag != 0) ==> (k == 0);\nloop invariant (flag == 0) ==> (j == 2 * k + 2);\n\n\n*/\nwhile(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant j >= 2 on line 16: Valid\nInvariant k >= 0 on line 17: Valid\nInvariant j % 2 == 0 on line 19: Valid\nInvariant 0 <= k on line 20: Valid\nInvariant 2 <= j on line 21: Valid\nInvariant flag == 0 ==> j == 2 * k + 2 on line 23: Valid\nInvariant flag != 0 ==> k == 0 on line 24: Valid\nInvariant flag == 0 ==> j == 2 * k + 2 on line 25: Valid\nPost-condition j == 2 * k + 2 on line 38: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 175,
        "success_rate": 0.5542857142857143
    }
}