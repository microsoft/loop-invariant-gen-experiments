{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0 ==> sn == (i-1)*a || sn == -10;\n    loop invariant sn < 0 ==> sn == -10;\n    loop invariant i > 4 ==> sn <= (i-1)*a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn >= 0 ==> sn == (i-1)*a || sn == -10;\nloop invariant sn < 0 ==> sn == -10;\nloop invariant i > 4 ==> sn <= (i-1)*a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn >= 0 ==> sn == (i - 1) * 2 || sn == -10 on line 14: Partially proven\nInvariant sn < 0 ==> sn == -10 on line 15: Unknown\nInvariant i > 4 ==> sn <= (i - 1) * 2 on line 16: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n\nloop invariant i > 4 ==> sn <= (i-1)*a;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant i > 4 ==> sn <= (i - 1) * 2 on line 16: Valid\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i - 1) * 2 || (i > 4 && sn == -10 + (i - 5) * 2) on line 14: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 20: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\nloop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn == (i - 1) * 2 || (i > 4 && sn == -10 + (i - 5) * 2) on line 14: Valid\nPost-condition sn == n * 2 || sn == 0 on line 20: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a || sn == -10;\n    loop invariant sn >= -10;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n + 1;\nloop invariant sn == (i - 1) * a || sn == -10;\nloop invariant sn >= -10;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i - 1) * 2 || sn == -10 on line 14: Unknown\nInvariant sn >= -10 on line 15: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\nloop invariant sn >= -10;\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn >= -10 on line 15: Valid\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n + 1;\n  loop invariant (i != 4) ==> (sn == (i - 1) * a) || (i == 4) ==> (sn == -10);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 0 <= i;\nloop invariant i <= n + 1;\nloop invariant (i != 4) ==> (sn == (i - 1) * a) || (i == 4) ==> (sn == -10);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= i on line 13: Partially proven\nInvariant i <= n + 1 on line 14: Unknown\nInvariant i != 4 ==> sn == (i - 1) * 2 || i == 4 ==> sn == -10 on line 15: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 21: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 0 <= i;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant 0 <= i on line 13: Valid\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is a non-deterministic unsigned integer.\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop iterates from i=1 to i<=n.\n\nNow, we can find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0 ==> sn == (i-1)*a || sn == -10;\n    loop invariant sn < 0 ==> sn == -10;\n    loop invariant i > 4 ==> sn <= (i-1)*a;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination, such that the loop invariants imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions, variable assignments, and loop condition in the given program:\n\n- Pre-conditions: None.\n- Variable assignments: `int i, n=unknown_uint(), sn=0;`\n- Loop condition: `for (i=1; i <= n; i++)`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: `i = 1` and `sn = 0`.\n2. In every iteration of the loop: \n   - `sn` increases by `a` (2) in each iteration, unless `i == 4` in which case `sn = -10`.\n   - `i` increases by 1 in each iteration.\n3. After the loop termination: `i > n`.\n\nNow, let's write down the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n*/\n```\n\nThese loop invariants are true before the loop execution, during every iteration of the loop, and after the loop termination. They can help Frama-C verify the post-condition in the given program."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program:\n- Pre-conditions or variable assignments:\n  - n is assigned a value from the unknown_uint() function\n  - i is initialized to 1\n  - sn is initialized to 0\n\n- Loop condition: i <= n\n\nNow, let's find the loop invariants:\n- Before the loop execution:\n  - sn == 0\n  - i == 1\n\n- In every iteration of the loop:\n  - sn == i * a when i != 4\n  - sn == -10 when i == 4\n\n- After the loop termination:\n  - sn == n * a when n < 4 or n > 4\n  - sn == -10 when n == 4\n  - sn == 0 when n == 0\n\nConsidering the above invariants, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a || sn == -10;\n    loop invariant sn >= -10;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the initial conditions and variable assignments:\n- n is assigned an unknown non-negative value (unknown_uint()).\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, we analyze the loop:\n- The loop iterates from i = 1 to i = n (inclusive).\n- In each iteration, sn is updated by adding a (which is equal to 2).\n- If i is 4, sn is set to -10.\n\nNow, let's find the loop invariants:\n\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2 * (i-1) || sn == -8;\n*/\n"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- i, n, and sn are integer variables, with n being non-negative (unknown_uint() returns an unsigned int).\n- a is a constant integer with the value 2.\n\nLoop:\n- The loop starts with i = 1 and ends with i > n.\n- In every iteration of the loop, sn is incremented by a (which is 2) and if i is 4, sn is set to -10.\n\nNow, let's identify the loop invariants:\n\n1. i is always non-negative and non-decreasing.\n2. sn is always equal to sn + a * i or sn = -10 when i == 4.\n3. i is always less than or equal to n + 1.\n\nHere are the loop invariants in the ACSL format:\n\n```\n/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n + 1;\n  loop invariant (i != 4) ==> (sn == (i - 1) * a) || (i == 4) ==> (sn == -10);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0 ==> sn == (i-1)*a || sn == -10;\n    loop invariant sn < 0 ==> sn == -10;\n    loop invariant i > 4 ==> sn <= (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a || sn == -10;\n    loop invariant sn >= -10;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's note the initial conditions and variable assignments:\n- n is assigned an unknown non-negative value (unknown_uint()).\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, we analyze the loop:\n- The loop iterates from i = 1 to i = n (inclusive).\n- In each iteration, sn is updated by adding a (which is equal to 2).\n- If i is 4, sn is set to -10.\n\nNow, let's find the loop invariants:\n\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2 * (i-1) || sn == -8;\n*/\n",
            "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= n + 1;\n  loop invariant (i != 4) ==> (sn == (i - 1) * a) || (i == 4) ==> (sn == -10);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn >= 0 ==> sn == (i-1)*a || sn == -10;\nloop invariant sn < 0 ==> sn == -10;\nloop invariant i > 4 ==> sn <= (i-1)*a;\nloop invariant 1 <= i && i <= n+1;\nloop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\nloop invariant 1 <= i && i <= n + 1;\nloop invariant sn == (i - 1) * a || sn == -10;\nloop invariant sn >= -10;\nloop invariant 0 <= i;\nloop invariant i <= n + 1;\nloop invariant (i != 4) ==> (sn == (i - 1) * a) || (i == 4) ==> (sn == -10);\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn >= 0 ==> sn == (i - 1) * 2 || sn == -10 on line 14: Partially proven\nInvariant sn < 0 ==> sn == -10 on line 15: Partially proven\nInvariant i > 4 ==> sn <= (i - 1) * 2 on line 16: Partially proven\nInvariant 1 <= i <= n + 1 on line 17: Partially proven\nInvariant sn == (i - 1) * 2 || (i > 4 && sn == -10 + (i - 5) * 2) on line 18: Partially proven\nInvariant 1 <= i <= n + 1 on line 19: Partially proven\nInvariant sn == (i - 1) * 2 || sn == -10 on line 20: Partially proven\nInvariant sn >= -10 on line 21: Partially proven\nInvariant 0 <= i on line 22: Partially proven\nInvariant i <= n + 1 on line 23: Partially proven\nInvariant i != 4 ==> sn == (i - 1) * 2 || i == 4 ==> sn == -10 on line 24: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 30: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n\nloop invariant i > 4 ==> sn <= (i-1)*a;\n\nloop invariant sn == (i-1) * a || (i > 4 && sn == -10 + (i-5)*a);\n\n\nloop invariant sn >= -10;\nloop invariant 0 <= i;\n\n\n*/\nfor(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant i > 4 ==> sn <= (i - 1) * 2 on line 16: Valid\nInvariant sn == (i - 1) * 2 || (i > 4 && sn == -10 + (i - 5) * 2) on line 18: Valid\nInvariant sn >= -10 on line 21: Valid\nInvariant 0 <= i on line 22: Valid\nPost-condition sn == n * 2 || sn == 0 on line 30: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 408,
        "success_rate": 0.6225490196078431
    }
}