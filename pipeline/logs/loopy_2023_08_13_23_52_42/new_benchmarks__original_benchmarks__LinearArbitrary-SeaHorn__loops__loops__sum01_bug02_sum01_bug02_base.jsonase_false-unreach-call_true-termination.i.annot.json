{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i && i <= n + 1;\nloop invariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 8: Unknown\nInvariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12) on line 9: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 15: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || sn == -10;\n  loop invariant (i <= 4) ==> (sn == (i-1)*2);\n  loop invariant (i > 4) ==> (sn == -10 || sn == (i-1)*2 - 12);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i-1)*2 || sn == -10;\nloop invariant (i <= 4) ==> (sn == (i-1)*2);\nloop invariant (i > 4) ==> (sn == -10 || sn == (i-1)*2 - 12);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 8: Unknown\nInvariant sn == (i - 1) * 2 || sn == -10 on line 9: Unknown\nInvariant i <= 4 ==> sn == (i - 1) * 2 on line 10: Partially proven\nInvariant i > 4 ==> sn == -10 || sn == (i - 1) * 2 - 12 on line 11: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 17: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\nloop invariant (i <= 4) ==> (sn == (i-1)*2);\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant i <= 4 ==> sn == (i - 1) * 2 on line 10: Valid\nPost-condition sn == n * 2 || sn == 0 on line 17: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || (i >= 5 && sn == (i-5)*2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i-1)*2 || (i >= 5 && sn == (i-5)*2);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 8: Unknown\nInvariant sn == (i - 1) * 2 || (i >= 5 && sn == (i - 5) * 2) on line 9: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 15: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn >= -10;\n    loop invariant (i != 5) ==> (sn == 2 * (i - 1));\n    loop invariant (i == 5) ==> (sn == -6);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i;\nloop invariant i <= n+1;\nloop invariant sn >= -10;\nloop invariant (i != 5) ==> (sn == 2 * (i - 1));\nloop invariant (i == 5) ==> (sn == -6);\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 8: Partially proven\nInvariant i <= n + 1 on line 9: Unknown\nInvariant sn >= -10 on line 10: Partially proven\nInvariant i != 5 ==> sn == 2 * (i - 1) on line 11: Unknown\nInvariant i == 5 ==> sn == -6 on line 12: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 18: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i;\n\nloop invariant sn >= -10;\n\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 8: Valid\nInvariant sn >= -10 on line 10: Valid\nPost-condition sn == n * 2 || sn == 0 on line 18: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == 2*(i-1) || sn == -10;\n  loop invariant (i <= 4) ==> (sn == 2*(i-1));\n  loop invariant (i > 4)  ==> (sn == -10 || sn == 2*(i-1));\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == 2*(i-1) || sn == -10;\nloop invariant (i <= 4) ==> (sn == 2*(i-1));\nloop invariant (i > 4)  ==> (sn == -10 || sn == 2*(i-1));\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 8: Unknown\nInvariant sn == 2 * (i - 1) || sn == -10 on line 9: Unknown\nInvariant i <= 4 ==> sn == 2 * (i - 1) on line 10: Partially proven\nInvariant i > 4 ==> sn == -10 || sn == 2 * (i - 1) on line 11: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 17: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\nloop invariant (i <= 4) ==> (sn == 2*(i-1));\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant i <= 4 ==> sn == 2 * (i - 1) on line 10: Valid\nPost-condition sn == n * 2 || sn == 0 on line 17: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program:\n\n1. Pre-conditions and variable assignments: `i` is initialized to 1, `n` is a non-deterministic unsigned integer, and `sn` is initialized to 0.\n2. Loop condition: `i` should be less than or equal to `n`.\n3. Loop body: `sn` is incremented by 2 in every iteration, and if `i` is equal to 4, `sn` is set to -10.\n4. Post-condition: The assertion states that `sn` should be equal to `n * 2` or `sn` should be equal to 0.\n\nNow let's find the loop invariants:\n\n1. Before the loop execution: `i` is 1 and `sn` is 0.\n2. In every iteration of the loop: `sn` is incremented by 2 unless `i` is equal to 4, in which case `sn` is -10.\n3. After loop termination: `i` is greater than `n`, and the post-condition should hold.\n\nWith this information, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int i` is uninitialized.\n- `int n` is assigned a non-deterministic unsigned integer value from the `unknown_uint()` function.\n- `int sn` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop starts with `i = 1` and continues as long as `i <= n`. It increments `i` by 1 in each iteration.\n- In each iteration, `sn` is incremented by 2. If `i == 4`, `sn` is set to -10.\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || sn == -10;\n  loop invariant (i <= 4) ==> (sn == (i-1)*2);\n  loop invariant (i > 4) ==> (sn == -10 || sn == (i-1)*2 - 12);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- n is an unknown unsigned integer.\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n\n- The loop condition is i <= n.\n- In the loop body, sn is incremented by 2 in each iteration, and if i equals 4, sn is set to -10.\n\nNow, let's derive the necessary loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || (i >= 5 && sn == (i-5)*2);\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution: when i = 1, sn = 0, which satisfies both invariants.\n(ii) in every iteration of the loop: in each iteration, sn is incremented by 2 and i is incremented by 1, which maintains the invariants.\n(iii) after the loop termination: when i > n, the loop terminates, and these invariants imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- n is an unknown unsigned integer.\n- i starts at 1 and increments by 1 in each iteration.\n- sn starts at 0 and in each iteration, it increases by 2 unless i is equal to 4, in which case sn is set to -10.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is i <= n.\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn >= -10;\n    loop invariant (i != 5) ==> (sn == 2 * (i - 1));\n    loop invariant (i == 5) ==> (sn == -6);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code:\n\n1. We have an unknown function `unknown_uint()` that returns an unsigned integer value. Since the definition is not given, we cannot make any assumptions about its behavior.\n2. The variable `n` is assigned the value returned by the unknown function.\n3. The variables `i` and `sn` are initialized to 1 and 0, respectively.\n4. The loop runs from `i=1` to `i=n`.\n5. Inside the loop, `sn` is incremented by 2 in each iteration.\n6. If `i` becomes 4 at any point, `sn` is set to -10.\n7. The post-condition is that `sn` should be equal to `n*2` or `sn` should be equal to 0.\n\nNow, we can state the loop invariants:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == 2*(i-1) || sn == -10;\n  loop invariant (i <= 4) ==> (sn == 2*(i-1));\n  loop invariant (i > 4)  ==> (sn == -10 || sn == 2*(i-1));\n*/\n```\n\nExplanation:\n1. The loop invariant `1 <= i <= n+1` states that the variable `i` is always between 1 and `n+1` (inclusive) during the loop execution.\n2. The loop invariant `sn == 2*(i-1) || sn == -10` states that `sn` is either equal to twice the value of `i-1` or equal to -10.\n3. The loop invariant `(i <= 4) ==> (sn == 2*(i-1))` states that if `i` is less than or equal to 4, then `sn` is equal to twice the value of `i-1`.\n4. The loop invariant `(i > 4)  ==> (sn == -10 || sn == 2*(i-1))` states that if `i` is greater than 4, then `sn` is either equal to -10 or twice the value of `i-1`."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || sn == -10;\n  loop invariant (i <= 4) ==> (sn == (i-1)*2);\n  loop invariant (i > 4) ==> (sn == -10 || sn == (i-1)*2 - 12);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*2 || (i >= 5 && sn == (i-5)*2);\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn >= -10;\n    loop invariant (i != 5) ==> (sn == 2 * (i - 1));\n    loop invariant (i == 5) ==> (sn == -6);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == 2*(i-1) || sn == -10;\n  loop invariant (i <= 4) ==> (sn == 2*(i-1));\n  loop invariant (i > 4)  ==> (sn == -10 || sn == 2*(i-1));\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\nloop invariant 1 <= i && i <= n + 1;\nloop invariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12);\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i-1)*2 || sn == -10;\nloop invariant (i <= 4) ==> (sn == (i-1)*2);\nloop invariant (i > 4) ==> (sn == -10 || sn == (i-1)*2 - 12);\nloop invariant sn == (i-1)*2 || (i >= 5 && sn == (i-5)*2);\nloop invariant 1 <= i;\nloop invariant i <= n+1;\nloop invariant sn >= -10;\nloop invariant (i != 5) ==> (sn == 2 * (i - 1));\nloop invariant (i == 5) ==> (sn == -6);\nloop invariant sn == 2*(i-1) || sn == -10;\nloop invariant (i <= 4) ==> (sn == 2*(i-1));\nloop invariant (i > 4)  ==> (sn == -10 || sn == 2*(i-1));\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "Invariant 1 <= i <= n + 1 on line 8: Unknown\nInvariant sn == 0 || sn == (i - 1) * 2 || (i > 4 && sn == (i - 1) * 2 - 12) on line 9: Unknown\nInvariant 1 <= i <= n + 1 on line 10: Partially proven\nInvariant sn == (i - 1) * 2 || sn == -10 on line 11: Partially proven\nInvariant i <= 4 ==> sn == (i - 1) * 2 on line 12: Partially proven\nInvariant i > 4 ==> sn == -10 || sn == (i - 1) * 2 - 12 on line 13: Partially proven\nInvariant sn == (i - 1) * 2 || (i >= 5 && sn == (i - 5) * 2) on line 14: Partially proven\nInvariant 1 <= i on line 15: Partially proven\nInvariant i <= n + 1 on line 16: Partially proven\nInvariant sn >= -10 on line 17: Partially proven\nInvariant i != 5 ==> sn == 2 * (i - 1) on line 18: Partially proven\nInvariant i == 5 ==> sn == -6 on line 19: Partially proven\nInvariant sn == 2 * (i - 1) || sn == -10 on line 20: Partially proven\nInvariant i <= 4 ==> sn == 2 * (i - 1) on line 21: Partially proven\nInvariant i > 4 ==> sn == -10 || sn == 2 * (i - 1) on line 22: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 28: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  /*@\n\n\n\n\nloop invariant (i <= 4) ==> (sn == (i-1)*2);\n\n\nloop invariant 1 <= i;\n\nloop invariant sn >= -10;\n\n\n\nloop invariant (i <= 4) ==> (sn == 2*(i-1));\n\n*/\nfor(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant i <= 4 ==> sn == (i - 1) * 2 on line 12: Valid\nInvariant 1 <= i on line 15: Valid\nInvariant sn >= -10 on line 17: Valid\nInvariant i <= 4 ==> sn == 2 * (i - 1) on line 21: Valid\nPost-condition sn == n * 2 || sn == 0 on line 28: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 152,
        "success_rate": 0.5460526315789473
    }
}