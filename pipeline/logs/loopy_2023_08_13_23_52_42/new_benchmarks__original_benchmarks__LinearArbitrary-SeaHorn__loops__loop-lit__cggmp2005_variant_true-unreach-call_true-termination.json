{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*LARGE_INT;\n    loop invariant lo + mid == hi;\n    loop invariant lo <= hi;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 < mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*LARGE_INT;\nloop invariant lo + mid == hi;\nloop invariant lo <= hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= lo <= 1000000 on line 14: Partially proven\nInvariant 0 < mid <= 1000000 on line 15: Partially proven\nInvariant 0 <= hi <= 2 * 1000000 on line 16: Partially proven\nInvariant lo + mid == hi on line 17: Unknown\nInvariant lo <= hi on line 18: Partially proven\nPost-condition lo == hi on line 25: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "@{\n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n    loop invariant lo + mid + mid == hi;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\nloop invariant lo + mid + mid == hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= lo <= mid on line 14: Unknown\nInvariant 0 <= mid <= 1000000 on line 15: Partially proven\nInvariant hi == 2 * mid on line 16: Unknown\nInvariant (lo + mid) + mid == hi on line 17: Partially proven\nPost-condition lo == hi on line 24: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant 0 <= mid <= LARGE_INT;\n\nloop invariant lo + mid + mid == hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= mid <= 1000000 on line 15: Valid\nInvariant (lo + mid) + mid == hi on line 17: Valid\nPost-condition lo == hi on line 24: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant hi == 2*mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "Invariant lo >= 0 on line 14: Valid\nInvariant mid >= 0 on line 15: Valid\nInvariant hi >= 0 on line 16: Valid\nInvariant mid <= 1000000 on line 17: Valid\nInvariant hi <= 2 * 1000000 on line 18: Valid\nInvariant hi == 2 * mid + lo on line 19: Valid\nPost-condition lo == hi on line 26: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant lo + mid == \\at(hi, LoopEntry);\n    loop invariant hi - lo == 2 * mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 < mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant lo + mid == \\at(hi, LoopEntry);\nloop invariant hi - lo == 2 * mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= lo <= 1000000 on line 14: Partially proven\nInvariant 0 < mid <= 1000000 on line 15: Partially proven\nInvariant 0 <= hi <= 2 * 1000000 on line 16: Partially proven\nInvariant lo + mid == \\at(hi,LoopEntry) on line 17: Unknown\nInvariant hi - lo == 2 * mid on line 18: Partially proven\nPost-condition lo == hi on line 25: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\n\n\nloop invariant hi - lo == 2 * mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "Invariant hi - lo == 2 * mid on line 18: Valid\nPost-condition lo == hi on line 25: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= lo <= hi;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= hi;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant mid >= 0;\nloop invariant hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "Invariant 0 <= lo <= hi on line 14: Valid\nInvariant hi <= 2 * 1000000 on line 15: Valid\nInvariant mid >= 0 on line 16: Valid\nInvariant hi == 2 * mid + lo on line 17: Valid\nPost-condition lo == hi on line 24: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. lo = 0\n2. mid = unknown_int()\n3. if (!(mid > 0 && mid <= LARGE_INT)) return 0; (mid must be greater than 0 and less than or equal to LARGE_INT)\n4. hi = 2*mid\n\nNow let's analyze the loop condition and loop body:\n- Loop condition: mid > 0\n- Loop body:\n  1. lo = lo + 1\n  2. hi = hi - 1\n  3. mid = mid - 1\n\nNow, let's write the loop invariants that are true before the loop execution, during every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*LARGE_INT;\n    loop invariant lo + mid == hi;\n    loop invariant lo <= hi;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- lo is initialized to 0.\n- mid is assigned an unknown integer value and is checked to be in the range (0, LARGE_INT].\n- hi is assigned 2 * mid.\n\nNow let's analyze the loop body and note the loop condition:\n- The loop condition is mid > 0.\n- Inside the loop, lo is incremented by 1, hi is decremented by 1, and mid is decremented by 1.\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n```\n@{\n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n    loop invariant lo + mid + mid == hi;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `lo = 0;`\n2. `mid = unknown_int();` (non-deterministic integer value)\n3. `if (!(mid > 0 && mid <= LARGE_INT)) return 0;` (pre-condition: `mid > 0 && mid <= LARGE_INT`)\n4. `hi = 2*mid;`\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `mid > 0`\n- Loop body:\n  - `lo = lo + 1;`\n  - `hi = hi - 1;`\n  - `mid = mid - 1;`\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- lo = 0\n- mid = unknown_int()\n- mid > 0 && mid <= LARGE_INT\n- hi = 2 * mid\n\nLoop condition: mid > 0\n\nAnalyze the loop body:\n- lo is incremented by 1\n- hi is decremented by 1\n- mid is decremented by 1\n\nNow let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant lo + mid == \\at(hi, LoopEntry);\n    loop invariant hi - lo == 2 * mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- lo = 0\n- mid = unknown_int() (with a constraint: 0 < mid <= LARGE_INT)\n- hi = 2 * mid\n\nThe loop condition is mid > 0.\n\nNow, let's analyze the loop body and find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n1. Before the loop execution: lo = 0\n2. In every iteration: lo increases by 1, hi decreases by 1, and mid decreases by 1\n3. After the loop termination: lo == hi (post-condition)\n\nConsidering these observations, we can write the loop invariants as follows:\n\n```\n/*@\n    loop invariant 0 <= lo <= hi;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2*LARGE_INT;\n    loop invariant lo + mid == hi;\n    loop invariant lo <= hi;\n*/",
            "@{\n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2 * mid;\n    loop invariant lo + mid + mid == hi;\n}",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant mid <= LARGE_INT;\n    loop invariant hi <= 2*LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
            "/*@ \n    loop invariant 0 <= lo <= LARGE_INT;\n    loop invariant 0 < mid <= LARGE_INT;\n    loop invariant 0 <= hi <= 2 * LARGE_INT;\n    loop invariant lo + mid == \\at(hi, LoopEntry);\n    loop invariant hi - lo == 2 * mid;\n*/",
            "/*@\n    loop invariant 0 <= lo <= hi;\n    loop invariant hi <= 2 * LARGE_INT;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant 0 <= lo <= LARGE_INT;\nloop invariant 0 < mid <= LARGE_INT;\nloop invariant 0 <= hi <= 2*LARGE_INT;\nloop invariant lo + mid == hi;\nloop invariant lo <= hi;\nloop invariant 0 <= lo <= mid;\nloop invariant 0 <= mid <= LARGE_INT;\nloop invariant hi == 2 * mid;\nloop invariant lo + mid + mid == hi;\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant hi == 2*mid + lo;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\nloop invariant lo + mid == \\at(hi, LoopEntry);\nloop invariant hi - lo == 2 * mid;\nloop invariant 0 <= lo <= hi;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= lo <= 1000000 on line 14: Partially proven\nInvariant 0 < mid <= 1000000 on line 15: Partially proven\nInvariant 0 <= hi <= 2 * 1000000 on line 16: Partially proven\nInvariant lo + mid == hi on line 17: Unknown\nInvariant lo <= hi on line 18: Partially proven\nInvariant 0 <= lo <= mid on line 19: Partially proven\nInvariant 0 <= mid <= 1000000 on line 20: Partially proven\nInvariant hi == 2 * mid on line 21: Partially proven\nInvariant (lo + mid) + mid == hi on line 22: Partially proven\nInvariant lo >= 0 on line 23: Partially proven\nInvariant mid >= 0 on line 24: Partially proven\nInvariant hi >= 0 on line 25: Partially proven\nInvariant mid <= 1000000 on line 26: Partially proven\nInvariant hi <= 2 * 1000000 on line 27: Partially proven\nInvariant hi == 2 * mid + lo on line 28: Partially proven\nInvariant 0 <= hi <= 2 * 1000000 on line 29: Partially proven\nInvariant lo + mid == \\at(hi,LoopEntry) on line 30: Partially proven\nInvariant hi - lo == 2 * mid on line 31: Partially proven\nInvariant 0 <= lo <= hi on line 32: Partially proven\nInvariant hi <= 2 * 1000000 on line 33: Partially proven\nInvariant hi == 2 * mid + lo on line 34: Partially proven\nPost-condition lo == hi on line 41: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\n\nloop invariant 0 <= hi <= 2*LARGE_INT;\n\nloop invariant lo <= hi;\n\nloop invariant 0 <= mid <= LARGE_INT;\n\nloop invariant lo + mid + mid == hi;\nloop invariant lo >= 0;\nloop invariant mid >= 0;\nloop invariant hi >= 0;\nloop invariant mid <= LARGE_INT;\nloop invariant hi <= 2*LARGE_INT;\nloop invariant hi == 2*mid + lo;\nloop invariant 0 <= hi <= 2 * LARGE_INT;\n\nloop invariant hi - lo == 2 * mid;\nloop invariant 0 <= lo <= hi;\nloop invariant hi <= 2 * LARGE_INT;\nloop invariant hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant 0 <= hi <= 2 * 1000000 on line 16: Valid\nInvariant lo <= hi on line 18: Valid\nInvariant 0 <= mid <= 1000000 on line 20: Valid\nInvariant (lo + mid) + mid == hi on line 22: Valid\nInvariant lo >= 0 on line 23: Valid\nInvariant mid >= 0 on line 24: Valid\nInvariant hi >= 0 on line 25: Valid\nInvariant mid <= 1000000 on line 26: Valid\nInvariant hi <= 2 * 1000000 on line 27: Valid\nInvariant hi == 2 * mid + lo on line 28: Valid\nInvariant 0 <= hi <= 2 * 1000000 on line 29: Valid\nInvariant hi - lo == 2 * mid on line 31: Valid\nInvariant 0 <= lo <= hi on line 32: Valid\nInvariant hi <= 2 * 1000000 on line 33: Valid\nInvariant hi == 2 * mid + lo on line 34: Valid\nPost-condition lo == hi on line 41: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 129,
        "success_rate": 0.5503875968992248
    }
}