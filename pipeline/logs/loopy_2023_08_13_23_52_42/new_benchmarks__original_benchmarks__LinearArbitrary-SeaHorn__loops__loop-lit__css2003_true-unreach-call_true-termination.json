{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
        "completions": [
            {
                "invariants": "@{\n    loop invariant 1 <= i;\n    loop invariant -1 <= k <= 1;\n    loop invariant j >= i;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\nloop invariant -1 <= k <= 1;\nloop invariant j >= i;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 13: Partially proven\nInvariant -1 <= k <= 1 on line 14: Unknown\nInvariant j >= i on line 15: Unknown\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\n\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 13: Partially proven\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 21: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -1 <= k <= 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant j <= i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant -1 <= k <= 1;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j <= i;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 13: Partially proven\nInvariant 1 <= j on line 14: Unknown\nInvariant -1 <= k <= 1 on line 15: Unknown\nInvariant i + k >= 1 on line 16: Partially proven\nInvariant i + k <= 2 on line 17: Partially proven\nInvariant j <= i on line 18: Partially proven\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 24: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\n\n\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j <= i;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 13: Valid\nInvariant i + k >= 1 on line 16: Valid\nInvariant i + k <= 2 on line 17: Valid\nInvariant j <= i on line 18: Valid\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 24: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant k <= 1;\n    loop invariant i + k == 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k <= 1;\nloop invariant i + k == 2;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant i >= 1 on line 13: Partially proven\nInvariant j >= 1 on line 14: Unknown\nInvariant k <= 1 on line 15: Partially proven\nInvariant i + k == 2 on line 16: Unknown\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 22: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant i >= 1;\n\nloop invariant k <= 1;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant i >= 1 on line 13: Partially proven\nInvariant k <= 1 on line 15: Partially proven\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i + k <= 2;\n    loop invariant i + k >= 1;\n    loop invariant 0 <= k && k <= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\nloop invariant 0 <= k && k <= 1;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 13: Partially proven\nInvariant 1 <= j on line 14: Partially proven\nInvariant i + k <= 2 on line 15: Partially proven\nInvariant i + k >= 1 on line 16: Partially proven\nInvariant 0 <= k <= 1 on line 17: Unknown\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 23: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\n\nloop invariant i + k <= 2;\nloop invariant i + k >= 1;\n\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 13: Valid\nInvariant i + k <= 2 on line 15: Valid\nInvariant i + k >= 1 on line 16: Valid\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 23: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -LARGE_INT <= k;\n    loop invariant k <= 1;\n    loop invariant i + k <= 2;\n    loop invariant 1 <= i + k;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\nloop invariant 1 <= j;\nloop invariant -LARGE_INT <= k;\nloop invariant k <= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= i + k;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i on line 13: Partially proven\nInvariant 1 <= j on line 14: Unknown\nInvariant -1000000 <= k on line 15: Partially proven\nInvariant k <= 1 on line 16: Partially proven\nInvariant i + k <= 2 on line 17: Partially proven\nInvariant 1 <= i + k on line 18: Partially proven\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 24: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\n\nloop invariant -LARGE_INT <= k;\nloop invariant k <= 1;\nloop invariant i + k <= 2;\nloop invariant 1 <= i + k;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
                "checker_message_after_prune": "Invariant 1 <= i on line 13: Valid\nInvariant -1000000 <= k on line 15: Valid\nInvariant k <= 1 on line 16: Valid\nInvariant i + k <= 2 on line 17: Valid\nInvariant 1 <= i + k on line 18: Valid\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 24: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- i = 1;\n- j = 1;\n- k = unknown_int();\n- if (!(0 <= k && k <= 1)) return 0;\n- From the if condition, we have 0 <= k <= 1.\n\nLoop condition:\n- while (i < LARGE_INT)\n\nLoop body:\n- i = i + 1;\n- j = j + k;\n- k = k - 1;\n\nNow, let's find the loop invariants:\n- i is always increasing and i starts from 1.\n- The value of k is always between -1 and 1.\n- j is always greater than or equal to i.\n\nLoop invariants:\n\n```\n@{\n    loop invariant 1 <= i;\n    loop invariant -1 <= k <= 1;\n    loop invariant j >= i;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. i is assigned the value 1.\n2. j is assigned the value 1.\n3. k is assigned a value by unknown_int(), which is non-deterministic but is bounded by the condition 0 <= k <= 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: i < LARGE_INT.\n2. Loop body updates:\n   - i is incremented by 1.\n   - j is incremented by k.\n   - k is decremented by 1.\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -1 <= k <= 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant j <= i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the pre-conditions, variable assignments, and loop condition:\n\n1. `i = 1`, `j = 1`, and `k = unknown_int()`\n2. Pre-condition: `0 <= k && k <= 1`\n3. Loop condition: `i < LARGE_INT`\n4. Loop body:\n   a. `i = i + 1`\n   b. `j = j + k`\n   c. `k = k - 1`\n\nNow, let's find the loop invariants:\n\n1. `i` is incremented by 1 in every iteration, so `i >= 1` will always hold true.\n2. `j` is incremented by `k` in every iteration, and initially `j = 1`. Since `k` is between 0 and 1 (inclusive), it implies that `j >= 1`.\n3. `k` is decremented by 1 in every iteration, and initially `k` is between 0 and 1 (inclusive). Therefore, `k` will be non-positive after the first iteration, and `k <= 1` will always hold true.\n4. Since `k` is decremented by 1 in every iteration, and `i` is incremented by 1, their sum remains constant at `i + k == 2`.\n\nNow we can combine these invariants into a single code block:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant k <= 1;\n    loop invariant i + k == 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- i = 1\n- j = 1\n- k = unknown_int()\n- 0 <= k && k <= 1\n\nLoop condition:\n- i < LARGE_INT\n\nLoop body:\n- i = i + 1\n- j = j + k\n- k = k - 1\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i + k <= 2;\n    loop invariant i + k >= 1;\n    loop invariant 0 <= k && k <= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- i = 1\n- j = 1\n- 0 <= k <= 1\n\nNext, we analyze the loop body and note the loop condition:\n- Loop condition: i < LARGE_INT\n- Loop body: i = i + 1; j = j + k; k = k - 1;\n\nNow, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -LARGE_INT <= k;\n    loop invariant k <= 1;\n    loop invariant i + k <= 2;\n    loop invariant 1 <= i + k;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "@{\n    loop invariant 1 <= i;\n    loop invariant -1 <= k <= 1;\n    loop invariant j >= i;\n}",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -1 <= k <= 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant j <= i;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant k <= 1;\n    loop invariant i + k == 2;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i + k <= 2;\n    loop invariant i + k >= 1;\n    loop invariant 0 <= k && k <= 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant -LARGE_INT <= k;\n    loop invariant k <= 1;\n    loop invariant i + k <= 2;\n    loop invariant 1 <= i + k;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\nloop invariant -1 <= k <= 1;\nloop invariant j >= i;\nloop invariant 1 <= j;\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j <= i;\nloop invariant i >= 1;\nloop invariant j >= 1;\nloop invariant k <= 1;\nloop invariant i + k == 2;\nloop invariant 0 <= k && k <= 1;\nloop invariant -LARGE_INT <= k;\nloop invariant 1 <= i + k;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant 1 <= i on line 13: Partially proven\nInvariant -1 <= k <= 1 on line 14: Partially proven\nInvariant j >= i on line 15: Unknown\nInvariant 1 <= j on line 16: Partially proven\nInvariant i + k >= 1 on line 17: Partially proven\nInvariant i + k <= 2 on line 18: Partially proven\nInvariant j <= i on line 19: Partially proven\nInvariant i >= 1 on line 20: Partially proven\nInvariant j >= 1 on line 21: Partially proven\nInvariant k <= 1 on line 22: Partially proven\nInvariant i + k == 2 on line 23: Unknown\nInvariant 0 <= k <= 1 on line 24: Partially proven\nInvariant -1000000 <= k on line 25: Partially proven\nInvariant 1 <= i + k on line 26: Partially proven\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 32: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    /*@\nloop invariant 1 <= i;\n\n\n\nloop invariant i + k >= 1;\nloop invariant i + k <= 2;\nloop invariant j <= i;\nloop invariant i >= 1;\n\nloop invariant k <= 1;\n\n\nloop invariant -LARGE_INT <= k;\nloop invariant 1 <= i + k;\n*/\nwhile (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant 1 <= i on line 13: Valid\nInvariant i + k >= 1 on line 17: Valid\nInvariant i + k <= 2 on line 18: Valid\nInvariant j <= i on line 19: Valid\nInvariant i >= 1 on line 20: Valid\nInvariant k <= 1 on line 22: Valid\nInvariant -1000000 <= k on line 25: Valid\nInvariant 1 <= i + k on line 26: Valid\nPost-condition 1 <= i + k <= 2 && i >= 1 on line 32: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 130,
        "success_rate": 0.5538461538461539
    }
}