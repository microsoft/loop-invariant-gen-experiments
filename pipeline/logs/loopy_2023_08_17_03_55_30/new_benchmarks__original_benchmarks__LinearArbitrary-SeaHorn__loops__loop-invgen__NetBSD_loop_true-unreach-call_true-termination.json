{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_p_off < MAXPATHLEN + 1;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_p_off < MAXPATHLEN + 1 on line 28: Unknown\nPost-condition 0 <= glob2_p_off on line 34: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nPost-condition 0 <= glob2_p_off on line 34: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_p_off < MAXPATHLEN + 1;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_p_off < MAXPATHLEN + 1 on line 28: Unknown\nPost-condition 0 <= glob2_p_off on line 34: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nPost-condition 0 <= glob2_p_off on line 34: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_pathlim_off == bound_off;\n    loop invariant glob2_pathbuf_off == pathbuf_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_pathlim_off == bound_off;\nloop invariant glob2_pathbuf_off == pathbuf_off;\nloop invariant glob2_p_off <= MAXPATHLEN;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_pathlim_off == bound_off on line 28: Partially proven\nInvariant glob2_pathbuf_off == pathbuf_off on line 29: Partially proven\nInvariant glob2_p_off <= MAXPATHLEN on line 30: Unknown\nPost-condition 0 <= glob2_p_off on line 36: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 38: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\nloop invariant glob2_pathlim_off == bound_off;\nloop invariant glob2_pathbuf_off == pathbuf_off;\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_pathlim_off == bound_off on line 28: Partially proven\nInvariant glob2_pathbuf_off == pathbuf_off on line 29: Partially proven\nPost-condition 0 <= glob2_p_off on line 36: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 38: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_p_off <= MAXPATHLEN;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_p_off <= MAXPATHLEN on line 28: Unknown\nPost-condition 0 <= glob2_p_off on line 34: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nPost-condition 0 <= glob2_p_off on line 34: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_p_off <= MAXPATHLEN;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_p_off <= MAXPATHLEN on line 28: Unknown\nPost-condition 0 <= glob2_p_off on line 34: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nPost-condition 0 <= glob2_p_off on line 34: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 36: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_pathlim_off == bound_off;\n    loop invariant glob2_pathbuf_off == pathbuf_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/",
            "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off < MAXPATHLEN + 1;\n*/",
            "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_pathlim_off == bound_off;\n    loop invariant glob2_pathbuf_off == pathbuf_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/",
            "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/",
            "/*@ \n    loop invariant 0 <= glob2_p_off;\n    loop invariant glob2_p_off <= glob2_pathlim_off;\n    loop invariant glob2_p_off <= MAXPATHLEN;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\nloop invariant glob2_p_off <= glob2_pathlim_off;\nloop invariant glob2_p_off < MAXPATHLEN + 1;\nloop invariant glob2_pathlim_off == bound_off;\nloop invariant glob2_pathbuf_off == pathbuf_off;\nloop invariant glob2_p_off <= MAXPATHLEN;\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_p_off <= glob2_pathlim_off on line 27: Unknown\nInvariant glob2_p_off < MAXPATHLEN + 1 on line 28: Unknown\nInvariant glob2_pathlim_off == bound_off on line 29: Partially proven\nInvariant glob2_pathbuf_off == pathbuf_off on line 30: Partially proven\nInvariant glob2_p_off <= MAXPATHLEN on line 31: Partially proven\nPost-condition 0 <= glob2_p_off on line 37: Partially proven\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 39: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  /*@\nloop invariant 0 <= glob2_p_off;\n\n\nloop invariant glob2_pathlim_off == bound_off;\nloop invariant glob2_pathbuf_off == pathbuf_off;\n\n*/\nfor (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;//@ assert(0 <= glob2_p_off );\n}\n    {;//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant 0 <= glob2_p_off on line 26: Partially proven\nInvariant glob2_pathlim_off == bound_off on line 29: Partially proven\nInvariant glob2_pathbuf_off == pathbuf_off on line 30: Partially proven\nPost-condition 0 <= glob2_p_off on line 37: Valid\nPost-condition glob2_p_off < MAXPATHLEN + 1 on line 39: Unknown\n"
    },
    "stats": {
        "success": [
            1,
            7,
            13,
            14,
            20,
            26,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            46,
            48,
            49,
            50,
            51,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            112,
            113,
            114,
            115,
            117,
            118,
            119,
            122
        ],
        "failure": [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            27,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            44,
            45,
            47,
            52,
            53,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            108,
            109,
            110,
            111,
            116,
            120,
            121,
            123,
            124,
            125
        ],
        "skipped": [
            77,
            78
        ],
        "total": 124,
        "success_rate": 0.4274193548387097
    }
}