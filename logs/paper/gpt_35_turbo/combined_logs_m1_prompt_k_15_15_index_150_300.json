{
    "logs": [
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          ERROR:{; \n//@ assert(\\false);\n};\n\t}\n\t\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) return;\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    ERROR:{; \n//@ assert(\\false);\n};\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      return;\n    j = 0;\n    while(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      return;\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    return;\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.9
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; \n//@ assert(\\false);\n};\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; \n//@ assert(\\false);\n};\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.6
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(!(y % 3));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 12);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 >= open);\n}\n\t{;\n//@ assert(p1 <= 1);\n}\n\t{;\n//@ assert(p2 <= 1);\n}\n\t{;\n//@ assert(p3 <= 1);\n}\n\t{;\n//@ assert(p4 <= 1);\n}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p4 >= 0);\n}\n\t{;\n//@ assert(p3 >= 0);\n}\n\t{;\n//@ assert(p2 >= 0);\n}\n\t{;\n//@ assert(p1 >= 0);\n}\n\t{;\n//@ assert(open >= 0);\n}\n\t{;\n//@ assert(chair >= 0);\n}\n\t{;\n//@ assert(barber >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p5 >= open);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) return 0;\n\tif (! (v1 <= 5)) return 0;\n\tif (! (v1 -v3 >= 0)) return 0;\n\tif (! (2* v2 - v1 - v3 == 0)) return 0;\n\tt=0;\n\n\tif (! (v2 +5 >=0)) return 0;\n\tif (! (v2 <= 5)) return 0;\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) return 0;\n\t\tif (! (v2 <= 5)) return 0;\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\t{;\n//@ assert(v2 <= 6);\n}\n\t{;\n//@ assert(v3  >= 0);\n}\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;\n//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;\n//@ assert(X4 + X5 <= 1);\n}\n\t{;\n//@ assert(X5  >= 0);\n}\n\t{;\n//@ assert(X4  >= 0);\n}\n\t{;\n//@ assert(X3  >= 0);\n}\n\t{;\n//@ assert(X2  >= 0);\n}\n\t{;\n//@ assert(X1 + X5 >= 1);\n}\n\t{;\n//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;\n//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/fig2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I >= 0);\n}\n\t{;\n//@ assert(Sa >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n\t{;\n//@ assert(Sb >= 0);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifo.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\tSb = Sb-1;\n\t\t\tSa = Ea+Ma+1;\n\t\t\tEa = 0;\n\t\t\tMa = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\tI = I -1;\n\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\tEa = 0;\n\t\t\t\tMa =0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\tI=I-1;\n\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\tEb=0;\n\t\t\t\t\tMb=0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEa = Ea -1;\n\t\t\t\t\t\t\t\t\t\t\tMa = Ma +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Eb >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEb = Eb -1;\n\t\t\t\t\t\t\t\t\t\t\tMb = Mb +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x;\n\tint y;\n\n\tif (! (x==0)) return 0;\n\tif (! (y==0)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x >= 9)) return 0;\n\t\t\tx = x + 2;\n\t\t\ty = y + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(x >= 7)) return 0;\n\t\t\t\tif (!(x <= 9)) return 0;\n\t\t\t\tx = x + 1;\n\t\t\t\ty = y + 3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x - 5 >=0)) return 0;\n\t\t\t\t\tif (! (x - 7 <=0)) return 0;\n\t\t\t\t\tx = x + 2;\n\t\t\t\t\ty = y + 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!(x - 4 <=0)) return 0;\n\t\t\t\t\tx = x + 1;\n\t\t\t\t\ty = y + 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(-x + 2*y  >= 0);\n}\n\t{;\n//@ assert(3*x - y  >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/substring1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\n{;\n//@ assert(j <= 100);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 == p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= p);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 <= p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x6 + x7 >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  while( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n    assume( nlen  ==  idBitLength / 32 );\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n    \n  }\n  \n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int i;\n  int j;\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) {;\n//@ assert(0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main ()\n{\n  \n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\n\nint main ()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (__BLAST_NONDET) goto END;\n    }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.7
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/simple.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int x=0;\n  int n;\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/split.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint NONDET;\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n\n  assume ( j<=n );\n  while ( j <= n ) {\n    \n    assume( i >= 0);\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  \n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    assume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    if (x<10)\n      sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#define bool int\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.9
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,y;\n  y = unknown();\n  x = -50;\n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown ();\n  idBitLength = unknown ();\n  material_length = unknown ();\n\n  if (!( nlen  ==  idBitLength / 32 )) return;\n\n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j / 4);\n}\n    {;\n//@ assert( j / 4 < nlen);\n}\n    \n  }\n\n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  int MAXPATHLEN = unknown ();\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (unknown()) goto END;\n    }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.3
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    while ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n, c;\n\tint i;\n\tint j1, j2;\n\tint x1, x2;\n\n\tn = unknown();\n\tc = unknown();\n\ti = 0;\n\tj1 = 0; \n\tx1 = 0;\n\tj2 = c; \n\tx2 = 0;\n\n\twhile( i < n) {\n\t\tj1 = 5*i + c;\n\n\t\tx1 = x1 + j1;\n\t\tx2 = x2 + j2;\n\t\t{;\n//@ assert(x1==x2);\n}\n\n\t\tj2 = j2 + 5;\n\t\tif (i == 10) {\n\t\t  j2 = 10;\n\t\t}\n\t\ti++;\n\t}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  while (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:\n  ;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.7
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.8
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n    {;\n//@ assert((m < n || n <= 0));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.8
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  int  i=0,  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\nassume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  j=10,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<j)\n    sn = sn +(2);\n    j--;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<10)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void assert(int cond);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    if(i<4)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int  z=unknown_int();\n\n  while(x<100 && 100<z)\n  {\n    int  tmp=unknown_bool();\n    if(tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }\n\n  {;\n//@ assert(0);\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int  x=unknown_int();\n    int y=unknown_int();\n    int  z=unknown_int();\nassume(x<100);\nassume(x>-100);\nassume(z<100);\nassume(z>-100);\n    while(x<100 && 100<z)\n    {\n        int  tmp=unknown_bool();\n        if(tmp){\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }\n    {;\n//@ assert(x>=100 || z<=100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int  x=unknown_int();\n  int  y=unknown_int();\n\n  if(y>0)\n  {\n    while(x<100)\n    {\n      x=x+y;\n     }\n  }\n  {;\n//@ assert(y<=0 ||(y<0 && x>=100));\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        }
    ]
}