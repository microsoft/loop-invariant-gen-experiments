{
    "logs": {
        "file": "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "        /*@\n            loop invariant 0 <= k <= 1;\n        */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= k <= 1 is established but not preserved.\nAssertion 1 <= i + k <= 2 && i >= 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "loop invariant !unknown_bool() ==> i + k == 1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: !unknown_bool() ==> i + k == 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 13: unexpected token ')'",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ loop invariant i >= 1; */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: i >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: i == 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= k <= 1 is established but not preserved.\nloop invariant i == 1 is established but not preserved.\nAssertion 1 <= i + k <= 2 && i >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "//@ assert (i == 1 && k >= 0 && k <= 1);",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants/variants found"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n\n  loop invariant 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2; // at beginning of loop\n  loop invariant 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1; // in every iteration\n\n  loop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\n  loop invariant 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1; // at end of loop\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: i == 1;\nloop invariant i3: 1 <= i + k <= 2;\nloop invariant i4: 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2;\nloop invariant i5: 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1;\nloop invariant i6: (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\nloop invariant i7: 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= k <= 1 is established but not preserved.\nloop invariant i == 1 is established but not preserved.\nloop invariant 1 <= i + k <= 2 is inductive.\nloop invariant 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2 is inductive.\nloop invariant 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1 is inductive.\nloop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2) is inductive.\nloop invariant 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: 1 <= i + k <= 2;\n\n\nloop invariant i6: (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 1 <= i + k <= 2 is inductive.\nloop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2) is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n  loop invariant i >= 1;\n  loop invariant (i + k >= 2) ==> !unknown_bool();\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: i == 1;\nloop invariant i3: 1 <= i + k <= 2;\nloop invariant i4: i >= 1;\nloop invariant i5: (i + k >= 2) ==> !unknown_bool();\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 17: unexpected token ')'",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: 1 <= i + k <= 2;\nloop invariant i4: i >= 1;\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant 1 <= i + k <= 2 is inductive.\nloop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant i >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: i == 1;\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= k <= 1 is established but not preserved.\nloop invariant i == 1 is established but not preserved.\nloop invariant i + k >= 1 is inductive.\nloop invariant i + k <= 2 is inductive.\nloop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: i + k >= 1;\nloop invariant i4: i + k <= 2;\nloop invariant i5: i >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i + k >= 1 is inductive.\nloop invariant i + k <= 2 is inductive.\nloop invariant i >= 1 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Valid\n"
            },
            {
                "invariants": "int i = unknown_int();\nint k = unknown_int();\nassume(0 <= k && k <= 1 && i == 1)",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants/variants found"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- `i` and `k` are integer variables with unknown values.\n- `unknown()` returns an integer value with unknown value.\n- `unknown_int()` returns an integer value with unknown value.\n- `unknown_bool()` returns a Boolean value with unknown value.\n\nLoop condition:\n- `unknown_bool()`\n\nPost-condition:\n- `1 <= i + k && i + k <= 2 && i >= 1`\n\nLoop invariants:\n- Before the loop execution: \n    - Since `k` is bounded by 0 and 1, we can add the following loop invariant before the loop execution:\n        ```\n        /*@\n            loop invariant 0 <= k <= 1;\n        */\n        ```\n    - Since `i` is initialized to 1, we can add the following loop invariant before the loop execution:\n        ```\n        /*@\n            loop invariant i == 1;\n        */\n        ```\n- In every iteration of the loop:\n    - Since `i` is incremented by 1 in each iteration, we can add the following loop invariant in every iteration:\n        ```\n        /*@\n            loop invariant i >= 1;\n            loop invariant \\forall integer j; 1 <= j < i ==> k + j <= 2;\n        */\n        ```\n    - Since `k` is decremented by 1 in each iteration, we can add the following loop invariant in every iteration:\n        ```\n        /*@\n            loop invariant 0 <= k <= 1;\n            loop invariant \\forall integer j; 0 <= j <= k ==> i + j >= 1;\n        */\n        ```\n- After the loop termination:\n    - Since the loop terminates when `unknown_bool()` returns false, we can add the following loop invariant after the loop termination:\n        ```\n        /*@\n            loop invariant !(unknown_bool());\n        */\n        ```\n    - Since `i` and `k` are bounded by their initial values and the number of loop iterations, we can add the following loop invariant after the loop termination:\n        ```\n        /*@\n            loop invariant 1 <= i + k && i + k <= 2;\n        */\n        ```\n    - Since `i` is incremented by 1 in each iteration and `k` is decremented by 1 in each iteration, we can add the following loop invariant after the loop termination:\n        ```\n        /*@\n            loop invariant i + k >= 1;\n        */\n        ```\nPutting it all together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n    loop invariant i >= 1;\n    loop invariant \\forall integer j; 1 <= j < i ==> k + j <= 2;\n    loop invariant 0 <= k <= 1;\n    loop invariant \\forall integer j; 0 <= j <= k ==> i + j >= 1;\n    loop invariant !(unknown_bool());\n    loop invariant 1 <= i + k && i + k <= 2;\n    loop invariant i + k >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- Variables `i` and `k` are assigned non-deterministic values.\n- The values of `i` and `k` satisfy the condition `0 <= k <= 1 && i == 1`.\n\nLoop condition:\n- The loop continues as long as `unknown_bool()` returns true. The function `unknown_bool()` represents a non-deterministic boolean value.\n\nPost-condition:\n- After the loop terminates, the values of `i` and `k` satisfy the condition `1 <= i + k <= 2 && i >= 1`.\n\nLoop invariants:\n- Since `i` is initialized to 1, it satisfies the condition `1 <= i`. \n- Since `k` is initialized to a non-negative integer less than or equal to 1, it satisfies the condition `0 <= k <= 1`. \n- Since `i` and `k` satisfy the condition `0 <= k <= 1 && i == 1` before the loop, they satisfy the condition `i + k == 1` before the loop.\n- In each iteration of the loop, `i` is incremented by 1 and `k` is decremented by 1. Therefore, `i + k` remains constant in each iteration of the loop. Hence, the condition `i + k == 1` holds in every iteration of the loop.\n- After the loop terminates, `i + k` is between 1 and 2 (inclusive) and `i` is greater than or equal to 1. Therefore, the condition `1 <= i + k <= 2 && i >= 1` holds after the loop terminates.\n- Since the loop condition is a non-deterministic boolean value, we need to use implication to make the loop invariant trivially true when the loop condition is false. Therefore, we can add the following implication as a loop invariant:\n```\nloop invariant !unknown_bool() ==> i + k == 1;\n```\n\nPutting all the loop invariants together, we get:\n```\n/*@\n    loop invariant 1 <= i;\n    loop invariant 0 <= k <= 1;\n    loop invariant i + k == 1;\n    loop invariant !unknown_bool() ==> i + k == 1;\n    loop invariant 1 <= i + k <= 2 && i >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program takes no input.\n- Variables i and k are initialized with non-deterministic integer values.\n- i must be equal to 1.\n- k must be between 0 and 1 (inclusive).\n\n```\nint i = unknown_int();\nint k = unknown_int();\nassume(0 <= k && k <= 1 && i == 1);\n```\n\nLoop condition:\n- The loop iterates as long as the boolean function unknown_bool() returns true.\n\n```\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n}\n```\n\nPost-condition:\n- The sum of i and k must be between 1 and 2 (inclusive).\n- i must be greater than or equal to 1.\n\n```\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n```\n\nLoop Invariants:\n- Since i starts at 1, and is incremented by 1 in each iteration, it will always be greater than or equal to 1. Therefore, we can add the following invariant:\n\n```\n/*@ loop invariant i >= 1; */\n```\n\n- Since k starts at a value between 0 and 1, and is decremented by 1 in each iteration, it will always be between -1 and 0 (inclusive). Therefore, we can add the following invariant:\n\n```\n/*@ loop invariant -1 <= k && k <= 0; */\n```\n\n- The sum of i and k is non-increasing in each iteration. Therefore, we can add the following invariant:\n\n```\n/*@ loop invariant i + k <= i + \\at(k, Pre); */\n```\n\n- Since the loop continues as long as unknown_bool() returns true, we can add the following invariant:\n\n```\n/*@ loop invariant unknown_bool(); */\n```\n\n- At the end of the loop, either unknown_bool() is false, or both i and k are non-positive. Therefore, we can add the following invariant:\n\n```\n/*@ loop invariant !unknown_bool() ==> (i + k) <= 1; */\n```\n\n- Finally, we can combine all the loop invariants into one code block:\n\n```\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n}\n/*@ \n  loop invariant i >= 1;\n  loop invariant -1 <= k && k <= 0;\n  loop invariant i + k <= i + \\at(k, Pre);\n  loop invariant unknown_bool();\n  loop invariant !unknown_bool() ==> (i + k) <= 1;\n*/\n```\n\nThese loop invariants are sufficient to prove the post-condition of the program."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- `i` and `k` are integer variables, with `i` initially set to an unknown integer value and `k` initially set to an unknown integer value between 0 and 1 (inclusive).\n\nLoop condition:\n- The loop executes as long as an unknown boolean value is true.\n\nPost-condition:\n- `i` and `k` are integers such that `i + k` is between 1 and 2 (inclusive) and `i` is greater than or equal to 1.\n\nLoop invariants:\n- Before the loop execution, we have:\n```\n/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n*/\n```\n- In every iteration of the loop, we have:\n```\n/*@ \n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant i >= 1;\n    loop invariant 0 <= k <= 1;\n*/\n```\n- After the loop termination, we have:\n```\n/*@ \n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant i >= 1;\n*/\n```\nNote that we do not need to add any implications to make the loop invariants hold, as the program does not contain any non-deterministic behavior or conditional statements that affect the loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program takes no input from the user.\n- The program calls two external functions: `unknown()` and `unknown_int()`.\n- The program assumes that `0 <= k <= 1` and `i == 1`.\n\nLoop condition:\n- The loop executes while the function `unknown_bool()` returns a non-zero value.\n\nLoop Invariants:\n- Before the loop:\n```\n//@ assert (i == 1 && k >= 0 && k <= 1);\n```\nExplanation: Before the loop, we know that `i` is equal to 1, and `k` is between 0 and 1 (inclusive).\n\n- In every iteration of the loop:\n```\n//@ assert (i >= 1 && k >= 0 && k <= 1);\n//@ assert (i + k == \\at(i, Pre) + \\at(k, Pre) - n);\n```\nExplanation: In every iteration, we know that `i` is at least 1, and `k` is between 0 and 1 (inclusive). The second assertion is the loop invariant that keeps track of the sum of `i` and `k`. Since `i` is incremented by 1 and `k` is decremented by 1 in each iteration, we can calculate the sum at any point in the loop by subtracting the number of iterations (`n`) from the sum of `i` and `k` at the beginning of the loop (`\\at(i, Pre) + \\at(k, Pre)`).\n\n- After the loop:\n```\n//@ assert (i + k >= 1 && i + k <= 2 && i >= 1);\n```\nExplanation: After the loop, we know that `i` is at least 1 and `i + k` is between 1 and 2 (inclusive). This is because `i` is incremented by at least 1 in each iteration and `k` is decremented by at most 1 in each iteration. The sum of `i` and `k` is at least 1 because we know that `i` is at least 1 before the loop."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program takes no input.\n- The program calls two external functions `unknown` and `unknown_int` that return integer values.\n- The program calls an external function `unknown_bool` that returns a Boolean value.\n\nVariable assignments:\n- `i` is assigned the value returned by `unknown_int()`.\n- `k` is assigned the value returned by `unknown_int()`.\n\nLoop condition:\n- The loop executes while the Boolean value returned by `unknown_bool()` is true.\n\nPost-condition:\n- `1 <= i + k && i + k <= 2 && i >= 1`\n\nLoop invariants:\n- `0 <= k <= 1` (from the pre-condition)\n- `i == 1` (from the pre-condition)\n- `1 <= i + k <= 2` (from the post-condition)\n- At the beginning of the loop:\n  - `0 <= k <= 1`\n  - `i == 1`\n  - `1 <= i + k <= 2`\n- In every iteration of the loop:\n  - `0 <= k <= 1` (unchanged)\n  - `1 <= i + k <= 2` (unchanged)\n  - `i >= 1` (follows from `i = i + 1`)\n  - `k <= 1` (follows from `k = k - 1`)\n- At the end of the loop:\n  - `(i >= 1 && k == 0) ==> (1 <= i + k <= 2)` (the loop condition fails when `k < 0`, so `k` must be `0` at the end of the loop)\n  - `1 <= i + k <= 2` (unchanged)\n  - `i >= 1` (unchanged)\n  - `0 <= k <= 1` (follows from `(i >= 1 && k == 0) ==> (1 <= i + k <= 2)`)\n\nPutting it all together:\n```\n/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n\n  loop invariant 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2; // at beginning of loop\n  loop invariant 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1; // in every iteration\n\n  loop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\n  loop invariant 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1; // at end of loop\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's first analyze the program and make notes of the pre-conditions and variable assignments:\n- The program declares two integer variables `i` and `k`.\n- The program assigns a non-deterministic value to both `i` and `k`.\n- The program checks if the value of `k` is between 0 and 1 (inclusive) and the value of `i` is 1. If this condition is not satisfied, the program returns 0.\n- The program enters a while loop with a non-deterministic condition.\n- Inside the while loop, `i` is incremented by 1 and `k` is decremented by 1.\n- After the while loop, the program asserts that the sum of `i` and `k` is between 1 and 2 (inclusive) and `i` is greater than or equal to 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is non-deterministic.\n\nBased on the above analysis, we can derive the following loop invariants:\n```\n/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n  loop invariant i >= 1;\n  loop invariant (i + k >= 2) ==> !unknown_bool();\n*/\n```\nExplanation:\n- The first loop invariant `0 <= k <= 1` is true before the loop execution because of the pre-condition.\n- The second loop invariant `i == 1` is true before the loop execution because of the pre-condition.\n- The third loop invariant `1 <= i + k <= 2` is true before the loop execution because of the pre-condition.\n- The fourth loop invariant `i >= 1` is true before the loop execution because of the pre-condition.\n- The fifth loop invariant `(i + k >= 2) ==> !unknown_bool()` is true in every iteration of the loop because `i` and `k` are incremented and decremented by 1 respectively in each iteration, which means the sum `i + k` decreases by 1. Therefore, if `i + k >= 2` in any iteration, the loop condition `unknown_bool()` must be false in that iteration. This invariant is necessary because the loop condition is non-deterministic and we need to make sure that the loop terminates.\n- After the loop termination, the loop invariants `0 <= k <= 1`, `i == 1`, `1 <= i + k <= 2`, and `i >= 1` are still true because they were true before the loop execution and the loop body did not modify them. The loop invariant `(i + k >= 2) ==> !unknown_bool()` is also true after the loop termination because if the loop terminated, then `i + k < 2`, which means that the implication is trivially true. \n- The loop invariants `0 <= k <= 1`, `i == 1`, `1 <= i + k <= 2`, and `i >= 1` imply the post-condition `1 <= i + k <= 2 && i >= 1` because the post-condition is a conjunction of these loop invariants."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The program takes no inputs.\n- The variables `i` and `k` are initialized with non-deterministic values using the `unknown_int()` function.\n- The value of `k` is between 0 and 1 (inclusive).\n- The value of `i` is equal to 1.\n\nLoop condition:\n- The loop executes as long as the boolean expression `unknown_bool()` is true. \n\nPost-condition:\n- The value of `i + k` is between 1 and 2 (inclusive).\n- The value of `i` is greater than or equal to 1.\n\nLoop invariants:\n- Before the loop execution: \n    - `0 <= k <= 1` (from the pre-condition).\n    - `i == 1` (from the pre-condition).\n    - `i + k >= 1` (to satisfy the post-condition).\n- In every iteration of the loop:\n    - `0 <= k <= 1` (remains unchanged from the pre-condition).\n    - `i + k >= 1` (remains true as `i` is incremented and `k` is decremented).\n- After the loop termination:\n    - `i + k >= 1` (the loop terminates when `k` becomes 0, so `i` must be at least 1 to satisfy the post-condition).\n    - `i + k <= 2` (to satisfy the post-condition).\n    - `i >= 1` (to satisfy the post-condition).\n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant i >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions:\n- The variables i and k can have any integer value.\n- k must be between 0 and 1 (inclusive).\n- i must be equal to 1.\n\nLoop condition:\n- unknown_bool() returns a Boolean value.\n\nPost-condition:\n- The sum of i and k must be between 1 and 2 (inclusive).\n- i must be greater than or equal to 1.\n\nLoop invariants:\n- Before the loop: \n    - 0 <= k <= 1\n    - i == 1\n- In every iteration:\n    - 1 <= i\n    - i + k <= i_old + k_old\n    - 0 <= k <= k_old\n- After the loop:\n    - i + k >= 1\n    - i + k <= 2\n\nExplanation:\n- Before the loop: \n    - The variable k must be between 0 and 1 inclusive, and i must be equal to 1 at the beginning of the loop.\n- In every iteration:\n    - The value of i must be greater than or equal to 1, as it is incremented by 1 in each iteration.\n    - The sum of i and k must not increase in each iteration, so the new sum (i + k) must be less than or equal to the old sum (i_old + k_old).\n    - The value of k must be between 0 and k_old, as it is decremented by 1 in each iteration.\n- After the loop:\n    - The sum of i and k must be greater than or equal to 1, as i is always greater than or equal to 1.\n    - The sum of i and k must be less than or equal to 2, as the maximum value of k is 1 and the maximum value of i is 2 (when k is 0)."
                },
                {
                    "role": "assistant",
                    "content": "Step 1: Pre-conditions and variable assignments\n```\nint i = unknown_int();\nint k = unknown_int();\nassume(0 <= k && k <= 1 && i == 1)\n```\nThe pre-condition is that k is between 0 and 1 inclusive, and i is equal to 1. The values of i and k are non-deterministic.\n\nStep 2: Loop condition\n```\nwhile (unknown_bool())\n```\nThe loop executes while the boolean condition is true. The value of the condition is non-deterministic.\n\nStep 3: Loop invariants\nWe want to find loop invariants that are true:\n- before the loop execution\n- in every iteration of the loop\n- after the loop termination\nsuch that the loop invariants imply the post-condition.\n\nBefore loop execution:\n```\n//@ assert(0 <= k && k <= 1 && i == 1)\n```\nThis assertion holds because of the assume statement in the beginning.\n\nIn every iteration of the loop:\n```\n//@ assert(1 <= i + k && i + k <= 2)\n```\nThis assertion holds because the loop body increments i and decrements k, so the sum i+k increases by 1 in each iteration. The initial values of i and k satisfy the precondition, so the sum i+k is between 1 and 2 inclusive at the beginning of the loop. Since the loop condition is non-deterministic, we cannot make a stronger assertion about the value of i and k individually.\n\nAfter the loop termination:\n```\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1)\n```\nThis assertion holds because the loop terminates when the loop condition is false, which means that the loop body was executed a finite number of times. Since i is incremented in each iteration and k is decremented in each iteration, the final value of i+k is at least as large as the initial value of i+k. Therefore, i+k is between 1 and 2 inclusive at the end of the loop. Also, since i is incremented at least once in the loop, its final value is at least 1. \n\nPutting it all together:\n```\nint i = unknown_int();\nint k = unknown_int();\nassume(0 <= k && k <= 1 && i == 1)\n//@ assert(0 <= k && k <= 1 && i == 1)\nwhile (unknown_bool()) {\n  i = i + 1;\n  k = k - 1;\n  //@ assert(1 <= i + k && i + k <= 2)\n}\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1)\n```"
                }
            ]
        ],
        "invariants": [
            "        /*@\n            loop invariant 0 <= k <= 1;\n        */",
            "loop invariant !unknown_bool() ==> i + k == 1;",
            "/*@ loop invariant i >= 1; */",
            "/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n*/",
            "//@ assert (i == 1 && k >= 0 && k <= 1);",
            "/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n\n  loop invariant 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2; // at beginning of loop\n  loop invariant 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1; // in every iteration\n\n  loop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\n  loop invariant 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1; // at end of loop\n*/",
            "/*@ \n  loop invariant 0 <= k <= 1;\n  loop invariant i == 1;\n  loop invariant 1 <= i + k <= 2;\n  loop invariant i >= 1;\n  loop invariant (i + k >= 2) ==> !unknown_bool();\n*/",
            "/*@ \n    loop invariant 0 <= k <= 1;\n    loop invariant i == 1;\n    loop invariant i + k >= 1;\n    loop invariant i + k <= 2;\n    loop invariant i >= 1;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions:\n- The variables i and k can have any integer value.\n- k must be between 0 and 1 (inclusive).\n- i must be equal to 1.\n\nLoop condition:\n- unknown_bool() returns a Boolean value.\n\nPost-condition:\n- The sum of i and k must be between 1 and 2 (inclusive).\n- i must be greater than or equal to 1.\n\nLoop invariants:\n- Before the loop: \n    - 0 <= k <= 1\n    - i == 1\n- In every iteration:\n    - 1 <= i\n    - i + k <= i_old + k_old\n    - 0 <= k <= k_old\n- After the loop:\n    - i + k >= 1\n    - i + k <= 2\n\nExplanation:\n- Before the loop: \n    - The variable k must be between 0 and 1 inclusive, and i must be equal to 1 at the beginning of the loop.\n- In every iteration:\n    - The value of i must be greater than or equal to 1, as it is incremented by 1 in each iteration.\n    - The sum of i and k must not increase in each iteration, so the new sum (i + k) must be less than or equal to the old sum (i_old + k_old).\n    - The value of k must be between 0 and k_old, as it is decremented by 1 in each iteration.\n- After the loop:\n    - The sum of i and k must be greater than or equal to 1, as i is always greater than or equal to 1.\n    - The sum of i and k must be less than or equal to 2, as the maximum value of k is 1 and the maximum value of i is 2 (when k is 0).",
            "int i = unknown_int();\nint k = unknown_int();\nassume(0 <= k && k <= 1 && i == 1)"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\nloop invariant i1: 0 <= k <= 1;\nloop invariant i2: !unknown_bool() ==> i + k == 1;\nloop invariant i3: i >= 1;\nloop invariant i4: 0 <= k <= 1;\nloop invariant i5: i == 1;\nloop invariant i6: 0 <= k <= 1;\nloop invariant i7: i == 1;\nloop invariant i8: 1 <= i + k <= 2;\nloop invariant i9: 0 <= k <= 1 && i == 1 && 1 <= i + k <= 2;\nloop invariant i10: 0 <= k <= 1 && 1 <= i + k <= 2 && i >= 1 && k <= 1;\nloop invariant i11: (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\nloop invariant i12: 1 <= i + k <= 2 && i >= 1 && 0 <= k <= 1;\nloop invariant i13: 0 <= k <= 1;\nloop invariant i14: i == 1;\nloop invariant i15: 1 <= i + k <= 2;\nloop invariant i16: i >= 1;\nloop invariant i17: (i + k >= 2) ==> !unknown_bool();\nloop invariant i18: 0 <= k <= 1;\nloop invariant i19: i == 1;\nloop invariant i20: i + k >= 1;\nloop invariant i21: i + k <= 2;\nloop invariant i22: i >= 1;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 14: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  /*@\n\n\nloop invariant i3: i >= 1;\n\nloop invariant i8: 1 <= i + k <= 2;\n\n\nloop invariant i11: (i >= 1 && k == 0) ==> (1 <= i + k <= 2);\n\n\nloop invariant i20: i + k >= 1;\nloop invariant i21: i + k <= 2;\n*/\nwhile (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i >= 1 is inductive.\nloop invariant 1 <= i + k <= 2 is inductive.\nloop invariant (i >= 1 && k == 0) ==> (1 <= i + k <= 2) is inductive.\nloop invariant i + k >= 1 is inductive.\nloop invariant i + k <= 2 is inductive.\nAssertion 1 <= i + k <= 2 && i >= 1: Valid\n"
    },
    "stats": {
        "success": [
            1,
            2,
            3,
            4,
            5,
            6,
            9,
            11,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            35,
            37,
            38,
            39,
            42,
            43,
            45,
            47,
            48,
            49,
            52,
            53,
            54,
            56,
            58,
            59,
            60,
            61,
            63,
            64,
            65,
            66,
            68,
            70,
            72,
            73,
            77,
            79,
            81,
            83,
            85,
            86,
            87,
            88,
            89,
            95,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            114,
            115,
            118,
            121,
            126,
            128,
            129,
            130,
            132,
            133,
            135,
            137,
            138,
            146,
            148,
            152,
            153,
            154,
            157,
            162,
            169,
            171,
            172,
            173,
            174,
            176,
            177,
            178,
            179,
            180,
            182,
            183,
            185,
            186,
            187,
            189,
            190,
            191,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            208,
            209,
            210,
            212,
            215,
            216,
            217,
            218,
            219,
            220,
            225,
            226,
            227,
            228,
            229,
            230,
            231,
            232,
            234,
            235,
            236,
            237,
            238,
            242,
            244,
            245,
            246,
            250,
            253,
            259,
            261,
            262,
            265,
            267,
            269,
            271,
            272,
            273,
            274,
            276,
            278,
            284,
            285,
            286,
            287,
            290,
            294,
            297,
            298,
            300,
            301,
            302,
            303,
            304,
            307,
            308,
            309,
            311,
            312,
            314,
            315,
            316,
            318,
            319,
            320,
            321,
            322
        ],
        "failure": [
            0,
            7,
            8,
            10,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            36,
            40,
            41,
            44,
            46,
            50,
            51,
            55,
            57,
            62,
            67,
            69,
            71,
            74,
            75,
            76,
            78,
            80,
            82,
            84,
            90,
            91,
            92,
            93,
            94,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            116,
            117,
            119,
            120,
            122,
            123,
            124,
            125,
            127,
            131,
            134,
            136,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            147,
            149,
            150,
            151,
            155,
            156,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            167,
            168,
            170,
            175,
            181,
            184,
            188,
            192,
            193,
            194,
            195,
            203,
            204,
            205,
            206,
            207,
            211,
            213,
            214,
            221,
            222,
            223,
            224,
            233,
            239,
            240,
            241,
            243,
            247,
            248,
            249,
            251,
            252,
            254,
            255,
            256,
            257,
            258,
            260,
            263,
            264,
            266,
            268,
            270,
            275,
            277,
            279,
            280,
            281,
            282,
            283,
            288,
            289,
            291,
            292,
            293,
            295,
            296,
            299,
            305,
            306,
            310,
            313,
            317
        ],
        "skipped": [],
        "total": 323,
        "success_rate": 0.5263157894736842
    }
}