{
    "logs": {
        "file": [
            "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
            },
            {
                "role": "user",
                "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;//@ assert(j == 6);\n}\n    return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of two statements:\n```scss\ni = i + 2;\nj = -1 + j;\n```\nThe loop condition is `j >= i`.\n\nBased on this information, we can identify the following loop invariants:\n\n(i) Before the loop execution, the variable `i` is initialized to 1, and the variable `j` is initialized to 10.\n```scss\n/*@ loop invariant \\initialized(i) && \\initialized(j); @*/\n```\n(ii) In every iteration of the loop, the variable `i` is incremented by 2, and the variable `j` is decremented by 1.\n```scss\n/*@ loop invariant i == \\old(i) + 2 && j == \\old(j) - 1; @*/\n```\n(iii) After the loop termination, the variable `j` is equal to 6.\n```scss\n/*@ loop invariant j == 6; @*/\n```\nTherefore, the loop invariants for the while loop in the given program are:\n```scss\n/*@\n    loop invariant \\initialized(i) && \\initialized(j);\n    loop invariant i == \\old(i) + 2 && j == \\old(j) - 1;\n    loop invariant j == 6;\n@*/\n```\nNote that the loop invariants are written in the ACSL syntax, which is used by Frama-C to specify loop properties. The `\\initialized` keyword is used to indicate that a variable is initialized before the loop execution. The `\\old` keyword is used to refer to the previous value of a variable in the loop."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants of the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, let's make a note of the pre-conditions or variable assignments in the program. We have:\n```\ni = 1;\nj = 10;\n```\nNext, let's analyze the loop body. The loop body consists of two statements:\n```\ni = i + 2;\nj = -1 + j;\n```\nFrom these statements, we can see that the loop invariant `i` is preserved, since the value of `i` is not modified in the loop body.\n\nNow, let's analyze the loop condition. The loop condition is `j >= i`. We can see that the loop invariant `j` is preserved, since the value of `j` is not modified in the loop body.\n\nFinally, let's think about the post-condition. The post-condition is `j == 6`. We can see that this post-condition is implied by the loop invariants `i` and `j`, since `j` is equal to `6` after the loop termination.\n\nTherefore, the loop invariants for the while loop in the given program are:\n```\n/*@\n    loop invariant i;\n    loop invariant j;\n*/\n```\nNote that we have split the loop invariant `i` and `j` into two separate loop invariants, since they are both preserved in the loop body. Also, we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program above, we need to analyze the loop body and the loop condition.\n\nFirst, let's identify the loop condition:\n\n* The loop condition is `j >= i`.\n\nNext, let's analyze the loop body:\n\n* The loop body consists of two statements: `i = i + 2` and `j = -1 + j`.\n* The first statement increments `i` by 2.\n* The second statement decrements `j` by 1.\n\nNow, let's find the loop invariants:\n\n* Before the loop execution, we know that `i = 1` and `j = 10`.\n* In every iteration of the loop, we know that `i` is incremented by 2, and `j` is decremented by 1.\n* After the loop termination, we know that `i` is greater than or equal to `j`.\n\nWe can express these loop invariants as:\n\n* `i >= j` before the loop execution.\n* `i + 2` in every iteration of the loop.\n* `j - 1` in every iteration of the loop.\n* `i >= j` after the loop termination.\n\nWe can write these loop invariants in ACSL annotations as:\n```\n/*@ \n    loop invariant i >= j;\n    loop invariant i + 2;\n    loop invariant j - 1;\n    loop invariant i >= j;\n*/\n```\nNote that we have split the loop invariant `i >= j` into two parts: `i >= j` before the loop execution and `i >= j` after the loop termination. This is because the loop invariant is true both before and after the loop execution, but the meaning of the invariant changes depending on whether the loop is executing or not."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given C program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of two statements:\n```\ni = i + 2;\nj = -1 + j;\n```\nFrom these statements, we can see that the value of `i` is increased by 2 in each iteration, and the value of `j` is decreased by 1.\n\nLoop Condition:\nThe loop condition is `j >= i`.\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\nThere are no loop invariants before the loop execution.\n\n(ii) In every iteration of the loop:\nThe loop invariants are:\n```\ni >= 1\nj >= 1\ni + j <= 11\n```\nThese loop invariants are true in every iteration of the loop because:\n\n* `i` is always greater than or equal to 1 because it is initialized to 1 and increased by 2 in each iteration.\n* `j` is always greater than or equal to 1 because it is initialized to 10 and decreased by 1 in each iteration.\n* The sum of `i` and `j` is always less than or equal to 11 because `i` is increased by 2 and `j` is decreased by 1 in each iteration.\n\n(iii) After the loop termination:\nThe loop invariants are:\n```\ni >= 1\nj >= 1\ni + j <= 11\n```\nThese loop invariants are true after the loop termination because:\n\n* `i` is always greater than or equal to 1 because it is initialized to 1 and increased by 2 in each iteration.\n* `j` is always greater than or equal to 1 because it is initialized to 10 and decreased by 1 in each iteration.\n* The sum of `i` and `j` is always less than or equal to 11 because `i` is increased by 2 and `j` is decreased by 1 in each iteration.\n\nTherefore, the necessary loop invariants for the while loop in the given C program are:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant i + j <= 11;\n*/\n```\nThese loop invariants imply the post-condition `j == 6` because:\n\n* The loop terminates when `j` is equal to 6.\n* The loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination.\n* The loop invariants imply that `j` is equal to 6."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of two statements:\n\n1. `i = i + 2;`\n2. `j = -1 + j;`\n\nFrom these statements, we can infer that the loop invariants should include:\n\n1. `i` is increased by 2 in each iteration.\n2. `j` is decreased by 1 in each iteration.\n\nLoop Condition:\nThe loop condition is `j >= i`. From this condition, we can infer that the loop invariants should include:\n\n1. `j` is greater than or equal to `i` at the start of each iteration.\n2. `j` is less than or equal to `i` at the end of each iteration.\n\nCombining the loop body and the loop condition, we can come up with the following loop invariants:\n\n1. `i` is increased by 2 in each iteration.\n2. `j` is decreased by 1 in each iteration.\n3. `j` is greater than or equal to `i` at the start of each iteration.\n4. `j` is less than or equal to `i` at the end of each iteration.\n\nNow, we need to check if these loop invariants imply the post-condition `j == 6`. Let's analyze the loop invariants:\n\n1. `i` is increased by 2 in each iteration, so `i` will be even in each iteration.\n2. `j` is decreased by 1 in each iteration, so `j` will be odd in each iteration.\n3. `j` is greater than or equal to `i` at the start of each iteration, so `j` will be greater than or equal to `i` at the end of each iteration.\n4. `j` is less than or equal to `i` at the end of each iteration, so `j` will be less than or equal to `i` at the end of each iteration.\n\nFrom these loop invariants, we can conclude that `j` will be equal to `6` at the end of the loop. Therefore, the loop invariants imply the post-condition `j == 6`.\n\nFinally, we can output the loop invariants in the required format:\n```\n/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant j >= i;\n    loop invariant j <= i;\n*/\n```\nNote that we have used the `%` operator to check if `i` and `j` are even and odd, respectively."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the given program, we need to analyze the loop body and the loop condition.\n\nThe loop condition is `j >= i`. The loop body increments `i` by 2 and decrements `j` by 1.\n\n1. Before the loop execution:\nThe pre-condition is `i = 1` and `j = 10`. We can use these values to find the necessary loop invariant.\n\nLet's assume that `i` and `j` are initialized to `1` and `10`, respectively. Then, the loop invariant would be `i <= j`. This invariant is true before the loop execution because `i` is less than or equal to `j`.\n\n1. In every iteration of the loop:\nThe loop invariant would be `i <= j`. This invariant is true in every iteration of the loop because `i` is always less than or equal to `j`.\n\n1. After the loop termination:\nThe post-condition is `j == 6`. We can use this value to find the necessary loop invariant.\n\nLet's assume that `j` is equal to `6` after the loop termination. Then, the loop invariant would be `i <= 6`. This invariant is true after the loop termination because `i` is less than or equal to `6`.\n\nTherefore, the necessary loop invariants for the given program are:\n```\n/*@ \n    loop invariant i <= j;\n    loop invariant i <= 6;\n*/\n```\nThese loop invariants imply the post-condition `j == 6`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\n\nThe loop body consists of two statements:\n```\ni = i + 2;\nj = -1 + j;\n```\nFrom these statements, we can see that the value of `i` is increased by 2 in each iteration of the loop, and the value of `j` is decreased by 1 in each iteration.\n\nLoop Condition:\n\nThe loop condition is `j >= i`. This means that the loop will continue to execute as long as the value of `j` is greater than or equal to the value of `i`.\n\nLoop Invariants:\n\nBased on the analysis of the loop body and the loop condition, we can identify the following loop invariants:\n\n1. Before the loop execution, the value of `i` is 1, and the value of `j` is 10.\n2. In every iteration of the loop, the value of `i` is increased by 2, and the value of `j` is decreased by 1.\n3. After the loop termination, the value of `j` is 6.\n\nThese loop invariants imply the post-condition that the value of `j` is 6 after the loop execution.\n\nHere is the code block with the loop invariants:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n*/\n```\nNote that we have split the conjunction of loop invariants into its parts to make it easier to understand and verify."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program above, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of two statements:\n```scss\ni = i + 2;\nj = -1 + j;\n```\nThe loop condition is `j >= i`.\n\nTo find the loop invariants, we need to identify the variables that are not modified in the loop body, and the variables that are modified in the loop body.\n\nThe variables that are not modified in the loop body are `i` and `j`. These variables are assigned values before the loop starts, and their values are not modified in the loop body.\n\nThe variables that are modified in the loop body are `i` and `j`. The values of these variables are updated in each iteration of the loop.\n\nBased on these observations, we can identify the following loop invariants:\n\n1. `i` is equal to `1` before the loop starts.\n2. `j` is equal to `10` before the loop starts.\n3. `i` is equal to `2` in every iteration of the loop.\n4. `j` is equal to `-1 + j` in every iteration of the loop.\n5. `j` is equal to `6` after the loop terminates.\n\nThese loop invariants can be used to verify the post-condition of the loop, which is `j == 6`.\n\nHere is the code block that contains the loop invariants:\n```scss\n/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n    loop invariant i == 2;\n    loop invariant j == -1 + j;\n    loop invariant j == 6;\n*/\n```\nNote that we have used the `==` operator to compare the values of the variables, and we have used the `;` operator to separate the loop invariants.\n\nAlso, note that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also avoided using any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of two statements:\n```c\ni = i + 2;\nj = -1 + j;\n```\nThese statements can be simplified to:\n```c\ni = i + 2;\nj = j - 1;\n```\n2. Loop Condition:\nThe loop condition is `j >= i`.\n\n3. Loop Invariants:\nFrom the loop body and the loop condition, we can find the following loop invariants:\n\na. Before the loop execution, the value of `i` is 1 and the value of `j` is 10.\n```c\n/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n*/\n```\nb. In every iteration of the loop, the value of `i` is incremented by 2 and the value of `j` is decremented by 1.\n```c\n/*@\n    loop invariant i == i + 2;\n    loop invariant j == j - 1;\n*/\n```\nc. After the loop termination, the value of `j` is 6.\n```c\n/*@\n    loop invariant j == 6;\n*/\n```\nTherefore, the necessary loop invariants for the while loop are:\n```c\n/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n    loop invariant i == i + 2;\n    loop invariant j == j - 1;\n    loop invariant j == 6;\n*/\n```\nNote that we have split the loop invariant into its parts to make it more readable."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants of the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, we need to identify the variables that are modified within the loop body. In this case, the variables modified are `i` and `j`.\n\nNext, we need to identify the loop condition. The loop condition is `j >= i`.\n\nNow, we need to find the loop invariants. A loop invariant is a condition that is true before the loop starts, is preserved during the loop execution, and remains true after the loop terminates.\n\nHere are the loop invariants for the while loop in the given program:\n\n1. `i <= 10`\n2. `j >= 10`\n3. `i <= j`\n4. `j >= 6`\n\nThese loop invariants imply the post-condition `j == 6`, which is the desired property to be verified by Frama-C.\n\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. Additionally, we have not used any keywords that are not supported in ACSL annotations for loops.\n\nFinally, we have not used the `\\at(x, Pre)` notation for any variable `x`, and we have not used non-deterministic function calls."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Before the loop execution, the loop invariant is:\n`i >= 1`\n2. In every iteration of the loop, the loop invariant is:\n`j >= i`\n3. After the loop termination, the loop invariant is:\n`j == 6`\n\nSo, the necessary loop invariants for the while loop are:\n```\n/*@\n    loop invariant i >= 1;\n    loop invariant j >= i;\n    loop invariant j == 6;\n*/\n```\nNote that we have used the pre-condition `i >= 1` and the loop condition `j >= i` to derive the loop invariants. We have also used the post-condition `j == 6` to ensure that the loop terminates when `j` is equal to `6`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of two statements:\n```c\ni = i + 2;\nj = -1 + j;\n```\nFrom the loop body, we can infer that the value of `i` is increased by 2 in every iteration, and the value of `j` is decreased by 1.\n2. Loop Condition:\nThe loop condition is `j >= i`. From this condition, we can infer that the loop will terminate when `j` is less than or equal to `i`.\n3. Loop Invariants:\nBased on the analysis of the loop body and the loop condition, we can identify the following loop invariants:\n\n(i) Before the loop execution, `i` is equal to 1, and `j` is equal to 10.\n```c\n/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/\n```\n(ii) In every iteration of the loop, `i` is increased by 2, and `j` is decreased by 1.\n```c\n/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/\n```\n(iii) After the loop termination, `j` is equal to 6.\n```c\n/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/\n```\nNote that the loop invariants are expressed in terms of `i` and `j`, which are the variables used in the loop. The loop invariants are also expressed using the ACSL (ANSI/ISO C Specification Language) syntax, which is supported by Frama-C.\n\nTherefore, the necessary loop invariants for the while loop in the given program are:\n```c\n/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/\n```\nThese loop invariants imply the post-condition `j == 6`, which is the desired property that we want to verify using Frama-C."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of two statements: `i = i + 2;` and `j = -1 + j;`. The first statement increments `i` by 2, while the second statement decrements `j` by 1.\n\nLoop Condition:\nThe loop condition is `j >= i`, which means that the loop will continue to execute as long as `j` is greater than or equal to `i`.\n\nPre-condition:\nBefore the loop starts, `i` is initialized to 1 and `j` is initialized to 10.\n\nPost-condition:\nAfter the loop terminates, `j` is equal to 6.\n\nNow, let's find the loop invariants that imply the post-condition.\n\nLoop Invariants:\n\n1. `i` is even: This invariant is true before the loop starts, as `i` is initialized to 1, which is an even number. It is also true in every iteration of the loop, as `i` is incremented by 2 in each iteration, which keeps it even. Finally, it is true after the loop terminates, as `i` is even and has not been modified outside the loop.\n2. `j` is odd: This invariant is true before the loop starts, as `j` is initialized to 10, which is an odd number. It is also true in every iteration of the loop, as `j` is decremented by 1 in each iteration, which keeps it odd. Finally, it is true after the loop terminates, as `j` is odd and has not been modified outside the loop.\n3. `i + j` is even: This invariant is true before the loop starts, as `i` is even and `j` is odd, so their sum is even. It is also true in every iteration of the loop, as `i` is incremented by 2 and `j` is decremented by 1, which keeps their sum even. Finally, it is true after the loop terminates, as `i` and `j` have not been modified outside the loop.\n\nImplication:\nThe loop invariants imply the post-condition that `j` is equal to 6. This is because the loop terminates when `j` is equal to 6, and the loop invariants ensure that `j` is odd and `i` is even. Therefore, the sum of `i` and `j` is even, which means that `j` must be equal to 6.\n\nHere are the loop invariants in code block format:\n```\n/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant i + j % 2 == 0;\n*/\n```\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also ensured that the loop invariants are true before the loop starts, in every iteration of the loop, and after the loop terminates."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. The loop condition is `j >= i`. This means that the loop will continue to execute as long as `j` is greater than or equal to `i`.\n2. The loop body updates the values of `i` and `j` as follows:\n```\ni = i + 2;\nj = -1 + j;\n```\nThis means that in each iteration of the loop, `i` is increased by 2, and `j` is decreased by 1.\n3. The loop invariant is a condition that is true before the loop execution, in every iteration of the loop, and after the loop termination. In this case, the loop invariant is `j >= i`.\n4. To prove that the loop terminates, we need to show that the loop invariant is preserved in every iteration of the loop. This means that in each iteration of the loop, `j` is still greater than or equal to `i`.\n5. To prove that the loop invariant is preserved, we can use the fact that `i` is increased by 2 in each iteration of the loop, and `j` is decreased by 1 in each iteration of the loop. This means that `j - i` is always non-negative, which implies that `j >= i`.\n6. Therefore, the necessary loop invariants for the while loop in the given program are `j >= i` before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere is the code block with the loop invariants:\n```\n/*@\n    loop invariant j >= i;\n*/\n```\nNote that we have only one loop invariant, which is `j >= i`. This loop invariant is sufficient to prove that the loop terminates, and it is preserved in every iteration of the loop."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants, we need to analyze the loop body and the loop condition. The loop body is:\n```\ni = i + 2;\nj = -1 + j;\n```\nThe loop condition is:\n```\nj >= i\n```\nWe can see that the loop body increments `i` by 2 and decrements `j` by 1. The loop condition checks if `j` is greater than or equal to `i`.\n\nTo find the loop invariants, we need to find the conditions that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBefore the loop execution, we know that `i` is 1 and `j` is 10. So, the loop invariant before the loop execution is:\n```\ni == 1 && j == 10\n```\nIn every iteration of the loop, we know that `i` is incremented by 2 and `j` is decremented by 1. So, the loop invariant in every iteration of the loop is:\n```\ni == 1 + 2*k && j == 10 - k\n```\nwhere `k` is the loop counter.\n\nAfter the loop termination, we know that `j` is equal to 6. So, the loop invariant after the loop termination is:\n```\nj == 6\n```\nTherefore, the loop invariants for the loop in the program are:\n```\n/*@ \n    loop invariant i == 1 && j == 10;\n    loop invariant i == 1 + 2*k && j == 10 - k;\n    loop invariant j == 6;\n*/\n```\nNote that we have used the `assume` keyword to make assumptions about the variables `i` and `j`. We have also used the `return` keyword to indicate that the loop terminates when `j` is equal to 6."
            }
        ],
        "invariants": [
            "/*@ loop invariant \\initialized(i) && \\initialized(j); @*/",
            "/*@\n    loop invariant i;\n    loop invariant j;\n*/",
            "/*@ \n    loop invariant i >= j;\n    loop invariant i + 2;\n    loop invariant j - 1;\n    loop invariant i >= j;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant i + j <= 11;\n*/",
            "/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant j >= i;\n    loop invariant j <= i;\n*/",
            "/*@ \n    loop invariant i <= j;\n    loop invariant i <= 6;\n*/",
            "/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n*/",
            "/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n    loop invariant i == 2;\n    loop invariant j == -1 + j;\n    loop invariant j == 6;\n*/",
            "/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\n To find the loop invariants of the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, we need to identify the variables that are modified within the loop body. In this case, the variables modified are `i` and `j`.\n\nNext, we need to identify the loop condition. The loop condition is `j >= i`.\n\nNow, we need to find the loop invariants. A loop invariant is a condition that is true before the loop starts, is preserved during the loop execution, and remains true after the loop terminates.\n\nHere are the loop invariants for the while loop in the given program:\n\n1. `i <= 10`\n2. `j >= 10`\n3. `i <= j`\n4. `j >= 6`\n\nThese loop invariants imply the post-condition `j == 6`, which is the desired property to be verified by Frama-C.\n\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. Additionally, we have not used any keywords that are not supported in ACSL annotations for loops.\n\nFinally, we have not used the `\\at(x, Pre)` notation for any variable `x`, and we have not used non-deterministic function calls.",
            "/*@\n    loop invariant i >= 1;\n    loop invariant j >= i;\n    loop invariant j == 6;\n*/",
            "/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/",
            "/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant i + j % 2 == 0;\n*/",
            "/*@\n    loop invariant j >= i;\n*/",
            "/*@ \n    loop invariant i == 1 && j == 10;\n    loop invariant i == 1 + 2*k && j == 10 - k;\n    loop invariant j == 6;\n*/"
        ],
        "completions": [
            {
                "invariants": "/*@ loop invariant \\initialized(i) && \\initialized(j); @*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: \\initialized(i) && \\initialized(j);\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 8: j is not a pointer.. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i;\n    loop invariant j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i;\nloop invariant i2: j;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i is established but not preserved.\nloop invariant j is established but not preserved.\nAssertion j == 6: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i >= j;\n    loop invariant i + 2;\n    loop invariant j - 1;\n    loop invariant i >= j;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= j;\nloop invariant i2: i + 2;\nloop invariant i3: j - 1;\nloop invariant i4: i >= j;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i >= j is preserved but not established.\nloop invariant i + 2 is inductive.\nloop invariant j - 1 is inductive.\nloop invariant i >= j is inductive.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 1;\n    loop invariant i + j <= 11;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j >= 1;\nloop invariant i3: i + j <= 11;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nloop invariant j >= 1 is established but not preserved.\nloop invariant i + j <= 11 is established but not preserved.\nAssertion j == 6: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nAssertion j == 6: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant j >= i;\n    loop invariant j <= i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i % 2 == 0;\nloop invariant i2: j % 2 == 1;\nloop invariant i3: j >= i;\nloop invariant i4: j <= i;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i % 2 == 0 is preserved but not established.\nloop invariant j % 2 == 1 is inductive.\nloop invariant j >= i is inductive.\nloop invariant j <= i is inductive.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i <= j;\n    loop invariant i <= 6;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i <= j;\nloop invariant i2: i <= 6;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i <= j is established but not preserved.\nloop invariant i <= 6 is established but not preserved.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 8: unbound logic variable i1. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n    loop invariant i == 2;\n    loop invariant j == -1 + j;\n    loop invariant j == 6;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i == 1;\nloop invariant i2: j == 10;\nloop invariant i3: i == 2;\nloop invariant i4: j == -1 + j;\nloop invariant i5: j == 6;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i == 1 is inductive.\nloop invariant j == 10 is inductive.\nloop invariant i == 2 is preserved but not established.\nloop invariant j == -1 + j is inductive.\nloop invariant j == 6 is inductive.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i == 1;\n    loop invariant j == 10;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i == 1;\nloop invariant i2: j == 10;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i == 1 is established but not preserved.\nloop invariant j == 10 is inductive.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i >= 1;\n    loop invariant j >= i;\n    loop invariant j == 6;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j >= i;\nloop invariant i3: j == 6;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nloop invariant j >= i is inductive.\nloop invariant j == 6 is preserved but not established.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i >= 1;\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nAssertion j == 6: Unproven\n"
            },
            {
                "invariants": "/*@ loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0; @*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: \\forall int k; 0 <= k < i ==> j - k >= 0;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant \\forall int k; 0 <= k < i ==> j - k >= 0 is established but not preserved.\nAssertion j == 6: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i % 2 == 0;\n    loop invariant j % 2 == 1;\n    loop invariant i + j % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i % 2 == 0;\nloop invariant i2: j % 2 == 1;\nloop invariant i3: i + j % 2 == 0;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i % 2 == 0 is preserved but not established.\nloop invariant j % 2 == 1 is inductive.\nloop invariant i + j % 2 == 0 is inductive.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant j >= i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: j >= i;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant j >= i is established but not preserved.\nAssertion j == 6: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i == 1 && j == 10;\n    loop invariant i == 1 + 2*k && j == 10 - k;\n    loop invariant j == 6;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: i == 1 && j == 10;\nloop invariant i2: i == 1 + 2*k && j == 10 - k;\nloop invariant i3: j == 6;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 9: unbound logic variable k. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\nloop invariant i1: \\initialized(i) && \\initialized(j);\nloop invariant i2: i;\nloop invariant i3: j;\nloop invariant i4: i >= j;\nloop invariant i5: i + 2;\nloop invariant i6: j - 1;\nloop invariant i7: i >= j;\nloop invariant i8: i >= 1;\nloop invariant i9: j >= 1;\nloop invariant i10: i + j <= 11;\nloop invariant i11: i % 2 == 0;\nloop invariant i12: j % 2 == 1;\nloop invariant i13: j >= i;\nloop invariant i14: j <= i;\nloop invariant i15: i <= j;\nloop invariant i16: i <= 6;\nloop invariant i17: i1;\nloop invariant i18: i2;\nloop invariant i19: i3;\nloop invariant i20: i == 1;\nloop invariant i21: j == 10;\nloop invariant i22: i == 2;\nloop invariant i23: j == -1 + j;\nloop invariant i24: j == 6;\nloop invariant i25: i == 1;\nloop invariant i26: j == 10;\nloop invariant i27: i >= 1;\nloop invariant i28: j >= i;\nloop invariant i29: j == 6;\nloop invariant i30: \\forall int k; 0 <= k < i ==> j - k >= 0;\nloop invariant i31: i % 2 == 0;\nloop invariant i32: j % 2 == 1;\nloop invariant i33: i + j % 2 == 0;\nloop invariant i34: j >= i;\nloop invariant i35: i == 1 && j == 10;\nloop invariant i36: i == 1 + 2*k && j == 10 - k;\nloop invariant i37: j == 6;\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 8: j is not a pointer.. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    /*@\n\nloop invariant i2: i;\n\n\nloop invariant i5: i + 2;\n\nloop invariant i8: i >= 1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i is inductive.\nloop invariant i + 2 is inductive.\nloop invariant i >= 1 is inductive.\nAssertion j == 6: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            6,
            9,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            37,
            38,
            39,
            40,
            43,
            49,
            52,
            58,
            60,
            63,
            64,
            65,
            66,
            68,
            72,
            73,
            79,
            83,
            85,
            86,
            87,
            88,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            115,
            118,
            128,
            129,
            130,
            137,
            138,
            144,
            148,
            150,
            153,
            154,
            155,
            162,
            167,
            171,
            172,
            173,
            182,
            189,
            190,
            191,
            196,
            197,
            199,
            200,
            201,
            202,
            208,
            210,
            215,
            216,
            217,
            218,
            219,
            221,
            226,
            227,
            228,
            229,
            232,
            234,
            236,
            238,
            241,
            242,
            245,
            246,
            253,
            259,
            261,
            262,
            265,
            267,
            271,
            272,
            276,
            277,
            278,
            284,
            287
        ],
        "failure": [
            2,
            3,
            4,
            5,
            7,
            8,
            10,
            11,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            35,
            36,
            41,
            42,
            44,
            45,
            46,
            47,
            48,
            50,
            51,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            67,
            69,
            70,
            71,
            74,
            75,
            76,
            77,
            78,
            80,
            81,
            82,
            84,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            114,
            116,
            117,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            131,
            132,
            133,
            134,
            135,
            136,
            139,
            140,
            141,
            142,
            143,
            145,
            146,
            147,
            149,
            151,
            152,
            156,
            157,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            168,
            169,
            170,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            183,
            184,
            185,
            186,
            187,
            188,
            192,
            193,
            194,
            195,
            198,
            203,
            204,
            205,
            206,
            207,
            209,
            211,
            212,
            213,
            214,
            220,
            222,
            223,
            224,
            225,
            230,
            231,
            233,
            235,
            237,
            239,
            240,
            243,
            244,
            247,
            248,
            249,
            250,
            251,
            252,
            254,
            255,
            256,
            257,
            258,
            260,
            263,
            264,
            266,
            268,
            269,
            270,
            273,
            274,
            275,
            279,
            280,
            281,
            282,
            283,
            285,
            286,
            288
        ],
        "skipped": [],
        "total": 289,
        "success_rate": 0.3494809688581315
    }
}