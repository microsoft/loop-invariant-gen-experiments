{
    "logs": [
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat exp = 1.0 ;\n\tfloat term = 1.0 ;\n\tunsigned int count = 1 ;\n\tfloat result = 2*(1/(1-x)) ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ; \n\t\texp = exp + term ;\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp ==0 ) break ;\n\t}\n\n\t{;\n//@ assert( result >= exp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000000);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(a == 6 ) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000001);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > 0 && x < octant) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  while (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > octant && x < pi) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(!(a == 6 )) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  while (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n  return (-1);\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          ERROR:{; \n//@ assert(\\false);\n};\n\t}\n\t\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown1())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n          j = j;\n\t} \n\tif(j <= i - 1)\n\t{\n\t  goto ERROR;\n          ERROR:{; \n//@ assert(\\false);\n};\n\t}\n\t\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) return;\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    ERROR:{; \n//@ assert(\\false);\n};\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int n = unknown1();\n  int i=0, j=0;\n  if(!(n >= 0)) return;\n  while(i<n) {\n    i++;\n    j++;\n  }\t\n  if(j >= n+1)\n  { goto ERROR;\n    ERROR:{; \n//@ assert(\\false);\n};\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      return;\n    j = 0;\n    while(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      return;\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main()\n{\n  int x; int y; int k; int j;int i; int n;\n    int m = 0;\n    if((x+y) != k)\n      return;\n    j = 0;\n    while(j<=n-1) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    if(j < n)\n      return;\n    if(x + y <= k - 1 || x + y >= k + 1 || (n >= 1 && ((m <= -1) || (m >= n))))\n    {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    return;\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int n;\n  int x= 0;\n  while(x<=n-1) {\n    x++;\n  } \n  if(x < n)\n    return;\n  if(n>=1 && (x<=n-1 || x >= n+1))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; \n//@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; \n//@ assert(\\false);\n};\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; \n//@ assert(\\false);\n};\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; \n//@ assert(\\false);\n};\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; \n//@ assert(\\false);\n};\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; \n//@ assert(\\false);\n};\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(!(y % 3));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(!(y % 3));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 12);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 12);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbr.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 >= open);\n}\n\t{;\n//@ assert(p1 <= 1);\n}\n\t{;\n//@ assert(p2 <= 1);\n}\n\t{;\n//@ assert(p3 <= 1);\n}\n\t{;\n//@ assert(p4 <= 1);\n}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p4 >= 0);\n}\n\t{;\n//@ assert(p3 >= 0);\n}\n\t{;\n//@ assert(p2 >= 0);\n}\n\t{;\n//@ assert(p1 >= 0);\n}\n\t{;\n//@ assert(open >= 0);\n}\n\t{;\n//@ assert(chair >= 0);\n}\n\t{;\n//@ assert(barber >= 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 >= open);\n}\n\t{;\n//@ assert(p1 <= 1);\n}\n\t{;\n//@ assert(p2 <= 1);\n}\n\t{;\n//@ assert(p3 <= 1);\n}\n\t{;\n//@ assert(p4 <= 1);\n}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p4 >= 0);\n}\n\t{;\n//@ assert(p3 >= 0);\n}\n\t{;\n//@ assert(p2 >= 0);\n}\n\t{;\n//@ assert(p1 >= 0);\n}\n\t{;\n//@ assert(open >= 0);\n}\n\t{;\n//@ assert(chair >= 0);\n}\n\t{;\n//@ assert(barber >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p5 >= open);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint barber;\n\tint chair;\n\tint open;\n\tint p1;\n\tint p2;\n\tint p3;\n\tint p4;\n\tint p5;\n\n\tbarber=0;\n\tchair=0;\n\topen=0;\n\tp1=0;\n\tp2=0;\n\tp3=0;\n\tp4=0;\n\tp5=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (!(p1 >= 0)) return 0;\n\t\t\tif (!(p1 <= 0)) return 0;\n\t\t\tif (!(barber >= 1)) return 0;\n\t\t\tbarber = barber-1;\n\t\t\tchair = chair+1;\n\t\t\tp1 = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(p2 >= 0)) return 0;\n\t\t\t\tif (!(p2 <= 0)) return 0;\n\t\t\t\tif (!(barber >= 1)) return 0;\n\t\t\t\tbarber = barber-1;\n\t\t\t\tchair = chair+1;\n\t\t\t\tp2 = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (!(p2 >= 1)) return 0;\n\t\t\t\t\tif (!(p2 <= 1)) return 0;\n\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\topen = open -1;\n\t\t\t\t\tp2 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!(p3>=0)) return 0;\n\t\t\t\t\t\tif (!(p3<=0)) return 0;\n\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\tbarber = barber-1;\n\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\tp3 =1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!(p3>=1)) return 0;\n\t\t\t\t\t\t\tif (!(p3<=1)) return 0;\n\t\t\t\t\t\t\tif (!(open >=1)) return 0;\n\t\t\t\t\t\t\topen = open -1;\n\t\t\t\t\t\t\tp3 =0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (!(p4 >=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(p4 <=0)) return 0;\n\t\t\t\t\t\t\t\tif (!(barber >=1)) return 0;\n\t\t\t\t\t\t\t\tbarber= barber-1;\n\t\t\t\t\t\t\t\tchair = chair +1;\n\t\t\t\t\t\t\t\tp4 = p4+1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (p4 >=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (p4 <=1)) return 0;\n\t\t\t\t\t\t\t\t\tif (! (open >=1)) return 0;\n\t\t\t\t\t\t\t\t\topen = open - 1;\n\t\t\t\t\t\t\t\t\tp4=p4 -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (p5>=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tif (! (p5<=0)) return 0;\n\t\t\t\t\t\t\t\t\t\tbarber=barber+1;\n\t\t\t\t\t\t\t\t\t\tp5=1;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tif (! (chair >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tchair= chair -1;\n\t\t\t\t\t\t\t\t\t\t\tp5=2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5>=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5<=2)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\topen=open +1;\n\t\t\t\t\t\t\t\t\t\t\t\tp5=3;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 >= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p5 <= 3)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open == 0)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp5=0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (p1 <= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (! (open >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\topen = open-1;\n\t\t\t\t\t\t\t\t\t\t\t\t\tp1 = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(p5 <= 3);\n}\n\t{;\n//@ assert(p5 >= open);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(nonexclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(exclusive >= 0);\n}\n\t{;\n//@ assert(unowned >= 0);\n}\n\t{;\n//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) return 0;\n\tif (! (v1 <= 5)) return 0;\n\tif (! (v1 -v3 >= 0)) return 0;\n\tif (! (2* v2 - v1 - v3 == 0)) return 0;\n\tt=0;\n\n\tif (! (v2 +5 >=0)) return 0;\n\tif (! (v2 <= 5)) return 0;\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) return 0;\n\t\tif (! (v2 <= 5)) return 0;\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\t{;\n//@ assert(v2 <= 6);\n}\n\t{;\n//@ assert(v3  >= 0);\n}\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint v1;\n\tint x2;\n\tint v2;\n\tint x3;\n\tint v3;\n\tint t;\n\n\tx1=100;\n\tx2=75;\n\tx3=-50;\n\tif (! (v3 >= 0)) return 0;\n\tif (! (v1 <= 5)) return 0;\n\tif (! (v1 -v3 >= 0)) return 0;\n\tif (! (2* v2 - v1 - v3 == 0)) return 0;\n\tt=0;\n\n\tif (! (v2 +5 >=0)) return 0;\n\tif (! (v2 <= 5)) return 0;\n\twhile (unknown_int())\n\t{\n\t\tif (! (v2 +5 >=0)) return 0;\n\t\tif (! (v2 <= 5)) return 0;\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (2* x2 - x1 - x3>=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2-1;\n\t\t\tt = t+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (! (2*x2 -x1-x3 <=0)) return 0;\n\t\t\tx1 = x1+v1;\n\t\t\tx3 = x3+v3;\n\t\t\tx2 = x2+v2;\n\t\t\tv2 = v2+1;\n\t\t\tt = t+1;\n\t\t}\n\t}\n\t{;\n//@ assert(v1 <= 5);\n}\n\t{;\n//@ assert(2*v2 + 2*t  >= v1 + v3);\n}\n\t{;\n//@ assert(5*t  + 75 >= x2);\n}\n\t{;\n//@ assert(v2 <= 6);\n}\n\t{;\n//@ assert(v3  >= 0);\n}\n\t{;\n//@ assert(v2 + 6 >= 0);\n}\n\t{;\n//@ assert(x2 + 5*t >= 75);\n}\n\t{;\n//@ assert(v1 - 2*v2 + v3 + 2*t >= 0);\n}\n\t{;\n//@ assert(v1 - v3 >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;\n//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;\n//@ assert(X4 + X5 <= 1);\n}\n\t{;\n//@ assert(X5  >= 0);\n}\n\t{;\n//@ assert(X4  >= 0);\n}\n\t{;\n//@ assert(X3  >= 0);\n}\n\t{;\n//@ assert(X2  >= 0);\n}\n\t{;\n//@ assert(X1 + X5 >= 1);\n}\n\t{;\n//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;\n//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;\n//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;\n//@ assert(X4 + X5 <= 1);\n}\n\t{;\n//@ assert(X5  >= 0);\n}\n\t{;\n//@ assert(X4  >= 0);\n}\n\t{;\n//@ assert(X3  >= 0);\n}\n\t{;\n//@ assert(X2  >= 0);\n}\n\t{;\n//@ assert(X1 + X5 >= 1);\n}\n\t{;\n//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;\n//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/fig2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnat.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I >= 0);\n}\n\t{;\n//@ assert(Sa >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n\t{;\n//@ assert(Sb >= 0);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I >= 0);\n}\n\t{;\n//@ assert(Sa >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n\t{;\n//@ assert(Sb >= 0);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifnatprime.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Eb >=1)) return 0;\n\t\t\tEb = Eb -1;\n\t\t\tMb = Mb +1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\tEa = Ea -1;\n\t\t\t\tMa = Ma +1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\tSb=0;\n\t\t\t\t\tEb=1;\n\t\t\t\t\tMb=0;\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tI=I-1;\n\t\t\t\t\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tI = I -1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa =0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tSb = Sb-1;\n\t\t\t\t\t\t\t\t\t\t\tSa = Ea+Ma+1;\n\t\t\t\t\t\t\t\t\t\t\tEa = 0;\n\t\t\t\t\t\t\t\t\t\t\tMa = 0;\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(I + Sa + Ea + Ma + Sb + Eb + Mb >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/lifo.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\tSb = Sb-1;\n\t\t\tSa = Ea+Ma+1;\n\t\t\tEa = 0;\n\t\t\tMa = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\tI = I -1;\n\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\tEa = 0;\n\t\t\t\tMa =0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\tI=I-1;\n\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\tEb=0;\n\t\t\t\t\tMb=0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEa = Ea -1;\n\t\t\t\t\t\t\t\t\t\t\tMa = Ma +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Eb >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEb = Eb -1;\n\t\t\t\t\t\t\t\t\t\t\tMb = Mb +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint I;\n\tint Sa;\n\tint Ea;\n\tint Ma;\n\tint Sb;\n\tint Eb;\n\tint Mb;\n\n\tif (! (I>=1)) return 0;\n\tSa=0;\n\tEa=0;\n\tMa=0;\n\tSb=0;\n\tEb=0;\n\tMb=0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (Sb >= 1)) return 0;\n\t\t\tSb = Sb-1;\n\t\t\tSa = Ea+Ma+1;\n\t\t\tEa = 0;\n\t\t\tMa = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (I >= 1)) return 0;\n\t\t\t\tI = I -1;\n\t\t\t\tSa = Sa + Ea + Ma + 1;\n\t\t\t\tEa = 0;\n\t\t\t\tMa =0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (I>=1)) return 0;\n\t\t\t\t\tI=I-1;\n\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\tEb=0;\n\t\t\t\t\tMb=0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\tSb=Sb+Eb+Mb+1;\n\t\t\t\t\t\tEb=0;\n\t\t\t\t\t\tMb=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\tSb=Sb-1;\n\t\t\t\t\t\t\t\tI=I+Sa+Ea+Ma;\n\t\t\t\t\t\t\t\tSa=0;\n\t\t\t\t\t\t\t\tEa=1;\n\t\t\t\t\t\t\t\tMa=0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (! (Sb>=1)) return 0;\n\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (! (Sa>=1)) return 0;\n\t\t\t\t\t\t\t\t\t\tSa=Sa-1;\n\t\t\t\t\t\t\t\t\t\tI=I+Sb+Eb+Mb;\n\t\t\t\t\t\t\t\t\t\tSb=0;\n\t\t\t\t\t\t\t\t\t\tEb=1;\n\t\t\t\t\t\t\t\t\t\tMb=0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Ea >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEa = Ea -1;\n\t\t\t\t\t\t\t\t\t\t\tMa = Ma +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (! (Eb >=1)) return 0;\n\t\t\t\t\t\t\t\t\t\t\tEb = Eb -1;\n\t\t\t\t\t\t\t\t\t\t\tMb = Mb +1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(Ea + Ma <= 1);\n}\n\t{;\n//@ assert(Eb + Mb <= 1);\n}\n\t{;\n//@ assert(Mb  >= 0);\n}\n\t{;\n//@ assert(Eb  >= 0);\n}\n\t{;\n//@ assert(Ma  >= 0);\n}\n\t{;\n//@ assert(Ea  >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/seesaw.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x;\n\tint y;\n\n\tif (! (x==0)) return 0;\n\tif (! (y==0)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x >= 9)) return 0;\n\t\t\tx = x + 2;\n\t\t\ty = y + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(x >= 7)) return 0;\n\t\t\t\tif (!(x <= 9)) return 0;\n\t\t\t\tx = x + 1;\n\t\t\t\ty = y + 3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x - 5 >=0)) return 0;\n\t\t\t\t\tif (! (x - 7 <=0)) return 0;\n\t\t\t\t\tx = x + 2;\n\t\t\t\t\ty = y + 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!(x - 4 <=0)) return 0;\n\t\t\t\t\tx = x + 1;\n\t\t\t\t\ty = y + 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(-x + 2*y  >= 0);\n}\n\t{;\n//@ assert(3*x - y  >= 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x;\n\tint y;\n\n\tif (! (x==0)) return 0;\n\tif (! (y==0)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x >= 9)) return 0;\n\t\t\tx = x + 2;\n\t\t\ty = y + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (!(x >= 7)) return 0;\n\t\t\t\tif (!(x <= 9)) return 0;\n\t\t\t\tx = x + 1;\n\t\t\t\ty = y + 3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x - 5 >=0)) return 0;\n\t\t\t\t\tif (! (x - 7 <=0)) return 0;\n\t\t\t\t\tx = x + 2;\n\t\t\t\t\ty = y + 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (!(x - 4 <=0)) return 0;\n\t\t\t\t\tx = x + 1;\n\t\t\t\t\ty = y + 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(-x + 2*y  >= 0);\n}\n\t{;\n//@ assert(3*x - y  >= 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/substring1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\n{;\n//@ assert(j <= 100);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\n{;\n//@ assert(j <= 100);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 == p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 == p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/swim1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= p);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 <= p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x6 + x7 >= 1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint x1;\n\tint x2;\n\tint x3;\n\tint x4;\n\tint x5;\n\tint x6;\n\tint x7;\n\tint p;\n\tint q;\n\n\tx1=0;\n\tx2=0;\n\tx3=0;\n\tx4=0;\n\tx5=0;\n\tif (! (x6==p)) return 0;\n\tif (! (x7==q)) return 0; \n\tif (! (p >=1)) return 0;\n\tif (! (q >=1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (x6 >=1)) return 0;\n\t\t\tx1 = x1 + 1;\n\t\t\tx6 = x6 - 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (x1 >=1)) return 0;\n\t\t\t\tif (! (x7 >=1)) return 0;\n\t\t\t\tx1 = x1-1;\n\t\t\t\tx2 = x2+1;\n\t\t\t\tx7 = x7-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (x2 >=1)) return 0;\n\n\t\t\t\t\tx2 = x2-1;\n\t\t\t\t\tx3 = x3+1;\n\t\t\t\t\tx6 = x6+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (x3>=1)) return 0;\n\t\t\t\t\t\tif (! (x6>=1)) return 0;\n\n\t\t\t\t\t\tx3 = x3-1;\n\t\t\t\t\t\tx4 = x4+1;\n\t\t\t\t\t\tx6 = x6-1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x4>=1)) return 0;\n\t\t\t\t\t\t\tx4 = x4-1;\n\t\t\t\t\t\t\tx5 = x5+1;\n\t\t\t\t\t\t\tx7 = x7+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (! (x5>=1)) return 0;\n\n\t\t\t\t\t\t\tx5 = x5-1;\n\t\t\t\t\t\t\tx6 = x6+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 == q);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= q);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= p);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 <= p);\n}\n\t{;\n//@ assert(x7  >= 0);\n}\n\t{;\n//@ assert(x6  >= 0);\n}\n\t{;\n//@ assert(x5  >= 0);\n}\n\t{;\n//@ assert(x4  >= 0);\n}\n\t{;\n//@ assert(x3  >= 0);\n}\n\t{;\n//@ assert(x2  >= 0);\n}\n\t{;\n//@ assert(x1  >= 0);\n}\n\t{;\n//@ assert(x2 + x3 + x4 + x7 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x5 + x6 >= 1);\n}\n\t{;\n//@ assert(x1 + x2 + x4 + x6 + x7 >= 1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/bind_expands_vars2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  int MAXDATA;\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  while( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,y;\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n  while( __BLAST_NONDET ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/gulwani_cegar2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint __BLAST_NONDET;\nvoid main() {\n  int x,m,n;\n\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(__BLAST_NONDET)\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n    assume( nlen  ==  idBitLength / 32 );\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n    \n  }\n  \n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n    assume( nlen  ==  idBitLength / 32 );\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n    \n  }\n  \n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/ken-imp.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int i;\n  int j;\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) {;\n//@ assert(0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int i;\n  int j;\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) {;\n//@ assert(0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main ()\n{\n  \n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main ()\n{\n  \n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\n\nint main ()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (__BLAST_NONDET) goto END;\n    }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\n\nint main ()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (__BLAST_NONDET) goto END;\n    }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/rajamani_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( __BLAST_NONDET ){\n    if ( __BLAST_NONDET ) {\n      x++; y = y+100;\n    } else if  ( __BLAST_NONDET ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-close-angle.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int in;\n  int inlen;\n  int bufferlen;\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (__BLAST_NONDET)\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main (void)\n{\n  \n  int __BLAST_NONDET;\n  int fbuflen;\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (__BLAST_NONDET)\n  {\n    \n    if (__BLAST_NONDET)\n      break;\n\n    if (__BLAST_NONDET)\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/simple.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int x=0;\n  int n;\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int x=0;\n  int n;\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/simple_if.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int n,m;\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/split.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/up-nested.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nint NONDET;\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n\n  assume ( j<=n );\n  while ( j <= n ) {\n    \n    assume( i >= 0);\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  \n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nint NONDET;\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n\n  assume ( j<=n );\n  while ( j <= n ) {\n    \n    assume( i >= 0);\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  \n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/count_up_down_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    assume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    assume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_1_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    if (x<10)\n      sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    if (x<10)\n      sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum03_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/terminator_02_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n  assume(x<100);\n  assume(z<100);\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(x>=100 || z<=100);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#define bool int\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#define bool int\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/trex03_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_1_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/while_infinite_loop_2_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x = unknown();\n  int y = unknown();\n\n  assume(0 <= x);  assume(x <= 2);\n  assume(0 <= y);  assume(y <= 2);\n\n  if (x >= 0 && x <= 2 && y >= 0 && y <= 2) {\n  while( unknown() ) {\n\tx+=2;\n\ty+=2;\n  }\n  if( y >= 0 ) \n    if( y <= 0 ) \n      if( 4 <= x ) \n\t{;\n//@ assert( x < 4 );\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_cegar2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,m,n;\n  n = unknown();\n  x = 0;\n  m = 0;\n  while( x < n ) {\n    if(unknown())\n\tm = x;\n\tx++;\n  }\n  if( n > 0 )\n    {\n      {;\n//@ assert( 0<=m);\n}\n      {;\n//@ assert(m<n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/gulwani_fig1a.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,y;\n  y = unknown();\n  x = -50;\n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int x,y;\n  y = unknown();\n  x = -50;\n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown ();\n  idBitLength = unknown ();\n  material_length = unknown ();\n\n  if (!( nlen  ==  idBitLength / 32 )) return;\n\n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j / 4);\n}\n    {;\n//@ assert( j / 4 < nlen);\n}\n    \n  }\n\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown ();\n  idBitLength = unknown ();\n  material_length = unknown ();\n\n  if (!( nlen  ==  idBitLength / 32 )) return;\n\n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j / 4);\n}\n    {;\n//@ assert( j / 4 < nlen);\n}\n    \n  }\n\n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len = unknown();\n  int bufsize = unknown();\n  int bufsize_0 = unknown();\n  int ielen = unknown();\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n  \n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_g_Ctoc.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main ()\n{\n  int BASE_SZ = unknown();\n  int __BLAST_NONDET = unknown();\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop_int.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  int MAXPATHLEN = unknown ();\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (unknown()) goto END;\n    }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  int MAXPATHLEN = unknown ();\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (unknown()) goto END;\n    }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/rajamani_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main(){\n  int x=0;\n  int y=0;\n  int z=0;\n  int w=0;\n\n  while ( unknown() ){\n    if ( unknown() ) {\n      x++; y = y+100;\n    } else if  ( unknown() ) {\n      if( x >= 4)\n\t{ x=x+1; y=y+1;}\n    } else if  ( y >10*w)\n      if (z>=100*x )\n      y = -y;\n    w=w+1; \n    z=z+10;\n  }\n  if ( x >=4 )\n    {;\n//@ assert(y>2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-close-angle.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int in;\n  int inlen = unknown();\n  int bufferlen = unknown();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n    \n  while (unknown())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n    \n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n  \n  buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime-fromqp.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  int outfilelen = unknown();\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(unknown())\n  {\n    \n    if(unknown())\n    {\n      \n      if(unknown())\n\t\n\tgoto AFTERLOOP; \n\n      if(unknown())\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(unknown())  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(unknown()) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/sendmail-mime7to8_arr_three_chars_no_test_ok.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main (void)\n{\n  \n  int fbuflen = unknown();\n  int fb;\n  \n  if(fbuflen >0);else goto END;\n  fb = 0;\n  while (unknown())\n  {\n    \n    if (unknown())\n      break;\n\n    if (unknown())\n      break;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n    \n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n\n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n\n    fb++;\n    if (fb >= fbuflen-1)\n      fb = 0;\n  }\n\n  if (fb > 0)\n  {\n    \n    {;\n//@ assert(0<=fb);\n}\n    {;\n//@ assert(fb<fbuflen);\n}\n        \n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/simple.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int x=0;\n  int n = unknown();\n  \n  assume(n > 0 );\n  while( x < n ){\n    x++;\n  }\n  {;\n//@ assert( x<=n );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/simple_if.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  int n,m;\n  n = unknown ();\n  m = unknown ();\n  int i = 1;\n   \n  while( i < n ) {\n    if( m > 0 ) {\n      i = 2*i;\n    } else {\n      i = 3*i;\n    }\n    \n  }\n  {;\n//@ assert(i > 0 );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/split.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i;\n  int j;\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/up-nested.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int n,j,i,k;\n\n  i = 0;\n  k = 0;\n  j = unknown();\n  n = unknown();\n\n  if ( j<=n ) {\n  while ( j <= n ) {\n    \n    j++;\n  }\n  {;\n//@ assert( i>= 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    while ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nextern int __mark(int);\nvoid main() {\n\tint n, c;\n    n = unknown();\n    c = unknown();\n    int i = 0;\n    int j1 = 0;\n    int x1 = 0;\n    int j2 = c;\n    int x2 = 0;\n\n    while ( (i < n)) {\n        \n        j1 = 5 * i + c;\n\t\t{;\n//@ assert(j1 == j2);\n}\n\n        x1 = x1 + j1;\n        x2 = x2 + j2;\n\t\t{;\n//@ assert(x1 == x2);\n}\n\n        j2 = j2 + 5;\n        i++;\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n, c;\n\tint i;\n\tint j1, j2;\n\tint x1, x2;\n\n\tn = unknown();\n\tc = unknown();\n\ti = 0;\n\tj1 = 0; \n\tx1 = 0;\n\tj2 = c; \n\tx2 = 0;\n\n\twhile( i < n) {\n\t\tj1 = 5*i + c;\n\n\t\tx1 = x1 + j1;\n\t\tx2 = x2 + j2;\n\t\t{;\n//@ assert(x1==x2);\n}\n\n\t\tj2 = j2 + 5;\n\t\tif (i == 10) {\n\t\t  j2 = 10;\n\t\t}\n\t\ti++;\n\t}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n, c;\n\tint i;\n\tint j1, j2;\n\tint x1, x2;\n\n\tn = unknown();\n\tc = unknown();\n\ti = 0;\n\tj1 = 0; \n\tx1 = 0;\n\tj2 = c; \n\tx2 = 0;\n\n\twhile( i < n) {\n\t\tj1 = 5*i + c;\n\n\t\tx1 = x1 + j1;\n\t\tx2 = x2 + j2;\n\t\t{;\n//@ assert(x1==x2);\n}\n\n\t\tj2 = j2 + 5;\n\t\tif (i == 10) {\n\t\t  j2 = 10;\n\t\t}\n\t\ti++;\n\t}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/loop4_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  while (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n  int n = unknown();\n  int i1 = 0, i2 = 0;\n  int j1 = 0, j2 = 0;\n\n  while (1) {\n    if (i1 < n + n) {\n      j1++;\n      i1++;\n    }\n\n    if (i2 < n) {\n      j2 = j2 + 2;\n      i2++;\n    }\n  }\n  {;\n//@ assert(j1==j2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:\n  ;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:\n  ;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/NetBSD_loop_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/afnp2014_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/bhmr2007_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n    {;\n//@ assert((m < n || n <= 0));\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n    {;\n//@ assert((m < n || n <= 0));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gr2006_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/hhk2008_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(0 <= b)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_variant_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_2_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_k_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_nondet_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_true-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  int  i=0,  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\nassume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  int  i=0,  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\nassume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  unsigned int i=0;\n  int  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  j=10,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<j)\n    sn = sn +(2);\n    j--;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  j=10,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<j)\n    sn = sn +(2);\n    j--;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<10)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<10)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void assert(int cond);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void assert(int cond);\n\nint main(){\n  int i, n=unknown_int(), sn=0;\nassume(n < 1000 && n >= -1000);\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(x < 1000000){\n    sn = sn +(2);\n    x++;\n    {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    if(i<4)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    if(i<4)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_true-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int  z=unknown_int();\n\n  while(x<100 && 100<z)\n  {\n    int  tmp=unknown_bool();\n    if(tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }\n\n  {;\n//@ assert(0);\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int  z=unknown_int();\n\n  while(x<100 && 100<z)\n  {\n    int  tmp=unknown_bool();\n    if(tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }\n\n  {;\n//@ assert(0);\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_true-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int  x=unknown_int();\n    int y=unknown_int();\n    int  z=unknown_int();\nassume(x<100);\nassume(x>-100);\nassume(z<100);\nassume(z>-100);\n    while(x<100 && 100<z)\n    {\n        int  tmp=unknown_bool();\n        if(tmp){\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }\n    {;\n//@ assert(x>=100 || z<=100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n    int  x=unknown_int();\n    int y=unknown_int();\n    int  z=unknown_int();\nassume(x<100);\nassume(x>-100);\nassume(z<100);\nassume(z>-100);\n    while(x<100 && 100<z)\n    {\n        int  tmp=unknown_bool();\n        if(tmp){\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }\n    {;\n//@ assert(x>=100 || z<=100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int  x=unknown_int();\n  int  y=unknown_int();\n\n  if(y>0)\n  {\n    while(x<100)\n    {\n      x=x+y;\n     }\n  }\n  {;\n//@ assert(y<=0 ||(y<0 && x>=100));\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int  x=unknown_int();\n  int  y=unknown_int();\n\n  if(y>0)\n  {\n    while(x<100)\n    {\n      x=x+y;\n     }\n  }\n  {;\n//@ assert(y<=0 ||(y<0 && x>=100));\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_true-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        while(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n    int  x=unknown_int();\n    int  y=unknown_int();\nassume(y <= 1000000);\n    if(y>0){\n        while(x<100){\n            x=x+y;\n        }\n    }\n    {;\n//@ assert(y<=0 ||(y>0 && x>=100));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_true-unreach-call.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x!=0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_2_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/01.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n while(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n int x=1; int y=1;\n while(unknown1()) {\n   int t1 = x;\n   int t2 = y;\n   x = t1+ t2;\n   y = t1 + t2;\n }\n {;\n//@ assert(y>=1);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/02.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\twhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown2();\n\nint main()\n{\n\tint i = 1;\n\tint j = 0;\n\tint z = i-j;\n\tint x = 0;\n\tint y = 0;\n\tint w = 0;\n\n\twhile(unknown2()) \n\t{\n\t\tz+=x+y+w;\n\t\ty++;\n\t\tif(z%2==1) \n\t\t  x++;\n\t\tw+=2; \n\t}\n\n\t{;\n//@ assert(x==y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/05.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n\tint flag = unknown1();\n\tint x = 0;\n\tint y = 0;\n\n\tint j = 0;\n\tint i = 0;\n\n\twhile(unknown2())\n\t{\n\t  x++;\n\t  y++;\n\t  i+=x;\n\t  j+=y;\n\t  if(flag)  j+=1;\n\t} \n\t{;\n//@ assert(j>=i);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/07.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \twhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n  }\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1 ();\nextern int unknown2 ();\n\nint main() {\n  int i, n, a, b;\n  n = unknown1 ();\n  i = 0; a = 0; b = 0;\n\n  if (n >= 0) {\n  \twhile( i < n ) {\n    \t\tif(unknown2()) {\n      \t\t\ta = a+1;\n      \t\t\tb = b+2;\n    \t\t} else {\n      \t\t\ta = a+2;\n      \t\t\tb = b+1;\n    \t\t}\n    \t\ti = i+1;\n  \t}\n  \t{;\n//@ assert( a+b == 3*n );\n}\n  }\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/08.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n while(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nvoid main() {\n int x = 0, y = 0;\n while(unknown1()){\n   if(unknown2()){ \n      x++; \n      y+=100; \n   }\n   else if (unknown3()){ \n      if (x >= 4) { \n          x++; \n          y++; \n      } \n      if (x < 0){\n          y = -y;\n      }\n   }\n  \n }\n {;\n//@ assert(x < 4 || y > 2);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/10.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n  \n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main() {\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w) {\n\t\tx++; \n\t\tw=!w;\n\t    };\n\t    if(!z) {\n\t\ty++; \n\t\tz=!z;\n\t    };\n\t}\n\n\t{;\n//@ assert(x==y);\n}\n  \n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/11.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  for (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main()\n{\n  int j=0;\n  int i;\n  int x=100;\n   \n  for (i =0; i< x ; i++){\n    j = j + 2;\n  }\n\n  {;\n//@ assert(j == 2*x);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/13.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\nextern int unknown4();\n\nint main() {\n   int j = 2; \n   int k = 0;\n\n   int flag = unknown2();\n\n   while(unknown1()){ \n     if (flag)\n       j = j + 4;\n     else {\n       j = j + 2;\n       k = k + 1;\n     }\n   }\n   if(k!=0)\n     {;\n//@ assert(j==2*k+2);\n}\n\n   return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/14.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  for(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n  int a = 0;\n  int j = unknown1();\n  int m = unknown1();\n  if(m<=0)\n    return 0;\n  for(j = 1; j <= m ; j++){\n    if(unknown1()) \n       a++;\n    else\n       a--; \n  }\n  {;\n//@ assert(a>=-m && a<=m);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/15.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nint main() {\n\n  int n;\n  int i, k, j;\n\n  n = unknown1();\n  i = unknown1();\n  k = unknown1();\n  j = unknown1();\n\n  if (n > 0 && k > n) {\n  j = 0;\n  while( j < n ) {\n    j++;\n    k--;\n  } \n  {;\n//@ assert(k>=0);\n}\n  }\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint unknown1();\nint unknown2();\nint unknown3();\nint unknown4();\n\nint main() {\n\n  int n;\n  int i, k, j;\n\n  n = unknown1();\n  i = unknown1();\n  k = unknown1();\n  j = unknown1();\n\n  if (n > 0 && k > n) {\n  j = 0;\n  while( j < n ) {\n    j++;\n    k--;\n  } \n  {;\n//@ assert(k>=0);\n}\n  }\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/16.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n\n  int i = unknown1();\n  int j = unknown1();\n  \n  int x = i;\n  int y = j;\n \n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\t{;\n//@ assert(y==0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/18.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   for (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main() {\n   int flag = unknown1();\n   int a = unknown2();\n   int b = unknown3();\n   int j = 0;\n\n   for (b=0; b < 100 ; ++b){\n      if (flag)\n         j = j +1;\n   }\n\n   if(flag)\n      {;\n//@ assert(j==100);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/19.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  while(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n  int n = unknown1 (); \n  int m = unknown1 ();\n  if (n >= 0 && m >= 0 && m < n) {\n  int x=0; \n  int y=m;\n  while(x<n) {\n    x++;\n    if(x>m) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/20.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    while(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;\n//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;\n//@ assert(0<=m);\n} \n\t{;\n//@ assert(m<n);\n}\n    }\n    }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n    int x, y, k, j, i, n;\n    x = unknown1();\n    y = unknown1();\n    k = unknown1();\n    j = unknown1();\n    i = unknown1();\n    n = unknown1();\n    if((x+y)== k) {\n    int m = 0;\n    j = 0;\n    while(j<n) {\n      if(j==i)\n      {\n         x++;\n         y--;\n      }else\n      {\n         y++;\n         x--;\n      }\n\tif(unknown1())\n  \t\tm = j;\n      j++;\n    }\n    {;\n//@ assert((x+y)== k);\n}\n    if(n>0)\n    {\n   \t{;\n//@ assert(0<=m);\n} \n\t{;\n//@ assert(m<n);\n}\n    }\n    }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  while( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nint main() {\n  int c1 = 4000;\n  int c2 = 2000;\n  int n, v;\n  int i, k, j;\n\n  n = unknown1();\n\n  assume (n > 0 && n < 10);\n\n  k = 0;\n  i = 0;\n  while( i < n ) {\n    i++;\n    if(unknown2() % 2 == 0) \n      v = 0;\n    else v = 1;\n    \n    if( v == 0 )\n      k += c1;\n    else \n      k += c2;\n  }\n  \n  {;\n//@ assert(k>n);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n} \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main()\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n  int k = 0;\n\n  while(unknown1())\n  {\n     if(k%3 == 0)\n       x++;\n     y++;\n     z++;\n     k = x+y+z;\n  }\n\n  {;\n//@ assert(x==y && y==z);\n} \n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/23.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   for (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n   }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main(){\n   int i, sum=0;\n   int n = unknown1();\n   if( n >= 0){\n\n   for (i=0; i < n; ++i)\n      sum = sum +i;\n\n   {;\n//@ assert(sum >= 0);\n}\n   }\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/30.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  while (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n  int i, c;\n  i = 0;\n  c = 0;\n  while (i < 1000) {\n    c = c + i;\n    i = i + 1;\n  }\n\n  {;\n//@ assert(c>=0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/32.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int k = 100;\n  int b = 0;\n  int i = unknown();\n  int j = unknown();\n  int n;\n  i = j = 0;\n  for( n = 0 ; n < 2*k ; n++ ) {\n    if((int )b == 1) {\n      i++;\n      b = 0;\n    } else if ((int )b == 0) {\n      j++;\n      b = 1;\n    } \n    \n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int m=10;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i==m) {;\n//@ assert(x==2*y);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int m=10;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i==m) {;\n//@ assert(x==2*y);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int n = unknown1();\n  int x= 0;\n  while(x<n) {\n    x++;\n  } \n  if(n>0) {;\n//@ assert(x==n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int n = unknown1();\n  int x= 0;\n  while(x<n) {\n    x++;\n  } \n  if(n>0) {;\n//@ assert(x==n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/38.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i%2 == 0) {;\n//@ assert(x==2*y);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/39.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint MAXPATHLEN;\nextern int unknown();\n\nint main()\n{\n  MAXPATHLEN = unknown();\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}\n      {;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint MAXPATHLEN;\nextern int unknown();\n\nint main()\n{\n  MAXPATHLEN = unknown();\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}\n      {;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/41.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   while(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n   }\n   return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main() {\n   int n = unknown1();\n   int flag = unknown1();\n\n   if(n>=0){\n   int k = 1;\n   if(flag) {\n\tk = unknown1();\n\tif(k>=0) ; else return 0;\n   }\n   int i = 0, j = 0;\n   while(i <= n) {\n     i++;\n     j+=i;\n   }\n   int z = k + i + j;\n   {;\n//@ assert(z > 2*n);\n}\n   }\n   return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main()\n{\n  int flag = unknown1();\n  int x = 1;\n  int y = 1;\n  int a;\n  \n  if(flag)\n    a = 0;\n  else\n    a = 1;\n\n  while(unknown1()){\n    if(flag)\n    {\n      a = x+y;\n      x++;\n    }\n    else\n    {\n      a = x+y+1;\n      y++;\n    }\n    if(a%2==1)\n      y++;\n    else\n      x++;\t  \n  }\n  \n  if(flag)\n    a++;\n  {;\n//@ assert(a%2==1);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/43.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main()\n{\n  int x = unknown1();\n  int y = unknown2();\n  int i=0;\n  int t=y;\n   \n  if (x==y) return x;\n  \n  while (unknown3()){\n    if (x > 0)   \n      y = y + x;\n  }\n   \n  {;\n//@ assert(y>=t);\n}\n\t\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\nextern int unknown3();\n\nint main()\n{\n  int x = unknown1();\n  int y = unknown2();\n  int i=0;\n  int t=y;\n   \n  if (x==y) return x;\n  \n  while (unknown3()){\n    if (x > 0)   \n      y = y + x;\n  }\n   \n  {;\n//@ assert(y>=t);\n}\n\t\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/44.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  while ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\t\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown1();\n\nint main()\n{\n  int k = unknown1();\n  int flag = unknown1();\n  int i=0;\n  int j=0;\n  int n = unknown1();\n\n  if (flag == 1){\n     n=1;\n  } else {\n     n=2;\n  }\n\n  i=0;\n\n  while ( i <= k){\n    i++;\n    j= j +n;\n  }\n  if(flag == 1)\n      {;\n//@ assert(j == i);\n}\n\t\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/46.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown2();\n\nvoid main()\n{\n\n\tint w = 1;\n\tint z = 0;\n\tint x= 0;\n\tint y=0;\n\n         while(unknown2()){\n\t    if(w%2 == 1) {x++; w++;};\n\t    if(z%2==0) {y++; z++;};\n\t}\n\n\t{;\n//@ assert(x<=1);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/afnp2014_true-unreach-call.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n\tx = x + y;\n\ty = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\t}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\t}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cegar2.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\t}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint N = unknown_int();\n\tint x = 0;\n\tint m = 0;\n\tint input, v1, v2, v3;\n\n \twhile (x < N) {\n\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tm = x;\n\t\t}\n\n\t\tx = x + 1;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\tif (N > 0) {\n\t\t{;\n//@ assert((0 <= m) && (m < N));\n}\n\t}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n\ti = i + 2;\n\tj = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/dec.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  while(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 100;\n  while(x > 0)\n  {\n    m = unknown_int();\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}    \n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/decn.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    return;\n  \n  x = N;\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}    \n  \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, m, N;\n  N = unknown_int();\n  if (N < 0)\n    return;\n  \n  x = N;\n  while(x > 0)\n  {\n    x = x - 1;\n  }\n  {;\n//@ assert(x == 0);\n}    \n  \n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex14n.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \twhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\t\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n    \tint x,y,N, v1, v2, v3;\n   \t\n   \tx=1;\n        N = unknown_int();\n   \twhile (x <= N){\n      \t\ty=N-x;\n\n\t\tif(y < 0 || y >= N)\n\t\t\t{;\n//@ assert(0 == 1);\n}\n\t\n      \t\tx++;\n\t\tv1 = v2;\n\t\tv2 = v3;\n\t\tv3 = v1;\n\t\n   \t}\n\n   \treturn 1;\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x = -50;\n\tint y;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig3.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint y = unknown_int();\n\tint lock, v1,v2,v3;\n\tlock = 0;\n\tint x = unknown_int();\n\tint input;\n\n\t{\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\n\t}\n\n\twhile(x != y) {\n\n\t\tlock = 1;\n\t\tx = y;\n\t\tinput = unknown_int();\n\t\tif ( input ) {\n\n\t\t\tlock = 0;\n\t\t\ty = y + 1;\n\t\t}\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t}\n\n\t{;\n//@ assert(lock == 1);\n}\n\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x, y, v1,v2,v3;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form22.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3;\n  int x1p,x2p,x3p, input;\n\n  x1 = x2 = x3 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n\n    if (x1p <= x2p && (x2p >= 0 || x2p - x3p <= 2))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= x2 && (x2 >= 0 || x2 - x3 <= 2));\n}    \n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form25.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4;\n  int x1p,x2p,x3p,x4p, input;\n\n  x1 = x2 = x3 = 0; x4 = -1;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n\n    if (x1p <= 0 && x1p >= x4p + 1 && x2p == x3p && (x4p >= 0 || x4p <= x3p))\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(x1 <= 0 && x1 >= x4 + 1 && x2 == x3 && (x4 >= 0 || x4 <= x3));\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/form27.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x1,x2,x3,x4,x5;\n  int x1p,x2p,x3p,x4p,x5p, input;\n\n  x1 = x2 = x3 = x4 = x5 = 0;\n  input = unknown_int();\n  while(input)\n  {\n    x1p = unknown_int();\n    x2p = unknown_int();\n    x3p = unknown_int();\n    x4p = unknown_int();\n    x5p = unknown_int();\n\n    if (0 <= x1p && x1p <= x4p + 1 && x2p == x3p && (x2p <= -1 || x4p <= x2p + 2) && x5p == 0)\n    {\n\tx1 = x1p;\n\tx2 = x2p;\n\tx3 = x3p;\n\tx4 = x4p;\n\tx5 = x5p;\n    }\n    input = unknown_int();\n  }\n  {;\n//@ assert(0 <= x1 && x1 <= x4 + 1 && x2 == x3 && (x2 <= -1 || x4 <= x2 + 2) && x5 == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/inc.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  while(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, m;\n  x = 0;\n  while(x < 100)\n  {\n    m = unknown_int();\n    x = x + 1;\n  }\n  {;\n//@ assert(x == 100);\n}    \n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    return;\n\n  while(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}    \n  return;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main()\n{\n  int x, N;\n  x = 0;\n  N = unknown_int();\n  if (N < 0)\n    return;\n\n  while(x < N)\n  {\n    x = x + 1;\n  }\n  {;\n//@ assert(x == N);\n}    \n  return;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  while(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int x, N, v1,v2,v3;\n  x = 0;\n  N = unknown_int();\n  while(x < N)\n  {\n    x = x + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(N < 0 || x == N);\n}    \n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\nint main() { \n  int i, n=unknown_int(), sn=0;\n  int v1, v2, v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() { \n  int i, n=unknown_int(), sn=0, v1,v2,v3;\n  for(i=1; i<=n; i++) {\n    sn = sn + 1;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==n || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n  int v1, v2, v3;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n\n  }\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#define a (1)\n\nint main() { \n  int i, sn=0;\n  int SIZE = unknown_int();\n  int v1, v2, v3;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  int v1, v2, v3;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/trex03_safe.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  int v1,v2,v3;\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  int v1,v2,v3;\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \twhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \twhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;\n//@ assert(x == n);\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/cav.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\t{;\n//@ assert(y<=51);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while (flag < 1) {\n               if (x<=50)\n                       y=y+1;\n               else\n                       y=y-1;\n               \n               if (y<0) {\n                       flag=1;\n               }\n               if (flag < 1) {\n                       x=x+1;\n               }\n       }\n\n\t{;\n//@ assert(x<=102);\n}\n\t{;\n//@ assert(y<=51);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\t{;\n//@ assert(x==99);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;\n//@ assert(y==-2);\n}\n\t{;\n//@ assert(x==99);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\t{;\n//@ assert(y==2);\n}\n\t{;\n//@ assert(x==100);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\t{;\n//@ assert(y==2);\n}\n\t{;\n//@ assert(x==100);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/popl.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       while(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y;\n       x=0;\n       y=50;\n       while(x<100) {\n               x=x+1;\n               if (x>50) {\n                       y=y+1;\n               }\n       }\n\t{;\n//@ assert(y==100);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs12_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,count,n;\n  count = unknown_uint();\n  assume( count >= 0 );\n  i=0;\n\n  while (i < 100 ){\n      count++;\n      i++;\n  }\n\n  {;\n//@ assert(!( (i > 100 ) || count < 0 ));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs13_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0; n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs15_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i, a, b;\n  int TRACER_NONDET;\n\n  if(n >=0){\n\n    i=0; a=0; b=0;\n\n    while (i < n){\n      if (TRACER_NONDET){\n a=a+1;\n b=b+2;\n      }\n      else{\n a=a+2;\n b=b+1;\n      }\n      i++;\n    }\n    {;\n//@ assert(!( a+b != 3*n ));\n}\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs7_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testabs8_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(int n){\n  int i;\n\n  i=0;n=10;\n\n  while (i < n){ i++; }\n\n  {;\n//@ assert(!( i>10 ));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop11_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  while (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n      s=5;\n    }\n  }\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int e, s;\n\n  e=0;\n  s=2;\n  while (unknown()) {\n    if (s == 2){\n      if (e ==0) e=1;\n      s = 3;\n    }\n    else if (s == 3){\n      if (e ==1) e=2;\n      s=4;\n    }\n    else if (s == 4){\n      {;\n//@ assert(!( e == 3 ));\n}\n      s=5;\n    }\n  }\n  return;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop14_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n  }\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i, x, y;\n  x = unknown_uint();\n  y = unknown_uint();\n  if (y <= 2) {\n    if (x < 0) {\n      x = 0;\n    }\n    i = 0;\n    while (i < 10) {\n      {;\n//@ assert(!( y > 2 ));\n}\n      i++;\n    }\n\n    {;\n//@ assert(!( x <= -1 ));\n}\n  }\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i = 0;\n  int N = 100;\n\n  while (i<N) {\n    i++;\n  }\n\n  {;\n//@ assert(!( i>N ));\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i = 0;\n  int N = 100;\n\n  while (i<N) {\n    i++;\n  }\n\n  {;\n//@ assert(!( i>N ));\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\n  return;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n\tint N = unknown_uint();\n  int i, j, k;\n\n  i = 0;\n  j = 0;\n  k = 0;\n\n  assume( N > 1 );\n\n  while (i < N) {\n    if (i<1)\n      k = 1;\n    else\n      k = 0;\n    j++;\n    i++;\n  }\n\n  {;\n//@ assert(!( k>0 ));\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n  return;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,n,x,NONDET;\n\n  i=0;x=0;\n  while (i < 1){\n     x++;\n    if (NONDET > 0 ){\n      x--;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x !=0 ));\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,n,x,NONDET;\n\n  i=0;x=0;\n  while (i < 1){\n     x++;\n    if (NONDET > 0 ){\n      x--;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x !=0 ));\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nvoid assert(int cond) {if (!cond) __VERIFIER_error();}\nint unknown() {int x; return x;}\nint main(){\n  int i,n,x, NONDET;\n\n  x=0;\n  i=0;\n  while (i<n) {\n    if (unknown() >0){\n      {;\n//@ assert(!( x>0 ));\n}\n    }\n    else{\n      x = 1;\n    }\n    i++;\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nvoid assert(int cond) {if (!cond) __VERIFIER_error();}\nint unknown() {int x; return x;}\nint main(){\n  int i,n,x, NONDET;\n\n  x=0;\n  i=0;\n  while (i<n) {\n    if (unknown() >0){\n      {;\n//@ assert(!( x>0 ));\n}\n    }\n    else{\n      x = 1;\n    }\n    i++;\n  }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop29_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  while(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main() {\n  int x = 0;\n  while(x < 100) {\n    x++;\n    if(x == 50)\n      break;\n  }\n  {;\n//@ assert(!( x != 50 ));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n  return;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop7_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  while ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int x, y;\n\n  y = 0;\n  x = 1;\n  while ( unknown() < 10) {\n    if (x<2) {\n      x=2;\n    } else {\n      x=1;\n    }\n    if (y<1) {\n      y=0;\n    }\n  }\n  {;\n//@ assert(!( x > 2 ));\n}\n  return;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i;\n  int x, y;\n\n  i = 0;\n  x = 1;\n\n  while (i<10) {\n    if (x==1) {\n      x = 2;\n      y = 3;\n    } else if (x==2) {\n      x = 3;\n      y = 4;\n    } else if (x==3) {\n      x = 1;\n      y = 5;\n    } else if (x==4) {\n      x = 1;\n      y = 6;\n    } else {\n      x = 2;\n    }\n\n    i = i + 1;\n  }\n\n  {;\n//@ assert(!( y==6 ));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/const_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/multivar_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x + 1;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x + 1;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/phases_2-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_2-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_3-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/simple_4-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff0;\n\n  while (x > 0) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 64);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 64);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y % 3);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y % 3);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-crafted/simple_vardep_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n  }\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n\n    {;\n//@ assert(k == (i + j));\n}\n  }\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-crafted/simple_vardep_2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n  }\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int i = 0;\n  unsigned int j = 0;\n  unsigned int k = 0;\n\n  while (k < 0x0fffffff) {\n    i = i + 1;\n    j = j + 2;\n    k = k + 3;\n    {;\n//@ assert((k == 3*i) && (j == 2*i));\n}\n  }\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-industry-pattern/mod3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  while(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(){\n  unsigned int x = unknown_int();\n  unsigned int y = 1;\n  \n  while(unknown_int()){\n    if(x % 3 == 1){\n      x += 2; y = 0;}\n    else{\n      if(x % 3 == 2){\n\tx += 1; y = 0;}\n      else{\n\tif(unknown_int()){\n\t  x += 4; y = 1;}\n\telse{\n\t  x += 5; y = 1;}\n      }\n    }\n  }\n  if(y == 0)\n    {;\n//@ assert(x % 3 == 0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/bin-suffix-5.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 5;\n  while (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 5;\n  while (unknown_int()) {\n    x += 8;\n  }\n  {;\n//@ assert((x & 5) == 5);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/const.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int s = 0;\n  while (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n    }\n  }\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int s = 0;\n  while (unknown_uint()) {\n    if (s != 0) {\n      ++s;\n    }\n    if (unknown_uint()) {\n      {;\n//@ assert(s == 0);\n}\n    }\n  }\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/eq1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/eq2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  while (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;\n//@ assert(y == z);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = w + 1;\n  unsigned int z = x + 1;\n  while (unknown_uint()) {\n    y++;\n    z++;\n  }\n  {;\n//@ assert(y == z);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/even.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(!(x % 2));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/mod4.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  while (unknown_int()) {\n    x += 4;\n  }\n  {;\n//@ assert(!(x % 4));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/odd.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  while (unknown_int()) {\n    x += 2;\n  }\n  {;\n//@ assert(x % 2);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:\n  ;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  \n  int p;\n  int i;\n  int leader_len;\n  int bufsize;\n  int bufsize_0;\n  int ielen;\n\n  leader_len = unknown_int();\n  bufsize = unknown_int();\n  ielen = unknown_int();\n  if (!(leader_len < LARGE_INT)) return 0;\n  if (!(bufsize < LARGE_INT)) return 0;\n  if (!(ielen < LARGE_INT)) return 0;\n\n  if(leader_len >0); else goto END;\n  if(bufsize >0); else goto END;\n  if(ielen >0); else goto END;\n\n  if (bufsize < leader_len)\n    goto END;\n\n  p = 0;\n\n  bufsize_0 = bufsize;\n  bufsize -= leader_len;\n  p += leader_len;\n\n  if (bufsize < 2*ielen)\n    goto END;\n\n  for (i = 0; i < ielen && bufsize > 2; i++) {\n    {;\n//@ assert(0<=p);\n}\n    {;\n//@ assert(p+1<bufsize_0);\n}\n      \n    p += 2;\n  }\n\n END:\n  ;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-invgen/sendmail-close-angle.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/afnp2014.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 1;\n    int y = 0;\n    while (y < 1000 && unknown_int()) {\n        x = x + y;\n        y = y + 1;\n    }\n    {;\n//@ assert(x >= y);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/bhmr2007.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, n, a, b;\n    i = 0; a = 0; b = 0; n = unknown_int();\n    if (!(n >= 0 && n <= LARGE_INT)) return 0;\n    while (i < n) {\n        if (unknown_int()) {\n            a = a + 1;\n            b = b + 2;\n        } else {\n            a = a + 2;\n            b = b + 1;\n        }\n        i = i + 1;\n    }\n    {;\n//@ assert(a + b == 3*n);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/cggmp2005.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int i,j;\n    i = 1;\n    j = 10;\n    while (j >= i) {\n        i = i + 2;\n        j = -1 + j;\n    }\n    {;\n//@ assert(j == 6);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/css2003.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/ddlm2013.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    unsigned int i,j,a,b;\n    int flag = unknown_int();\n    a = 0;\n    b = 0;\n    j = 1;\n    if (flag) {\n        i = 0;\n    } else {\n        i = 1;\n    }\n\n    while (unknown_int()) {\n        a++;\n        b += (j - i);\n        i += 2;\n        if (i%2 == 0) {\n            j += 2;\n        } else {\n            j++;\n        }\n    }\n    if (flag) {\n        {;\n//@ assert(a == b);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gj2007.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gj2007b.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n    {;\n//@ assert((m < n || n <= 0));\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = 0;\n    int m = 0;\n    int n = unknown_int();\n    while(x < n) {\n\tif(unknown_int()) {\n\t    m = x;\n\t}\n\tx = x + 1;\n    }\n    {;\n//@ assert((m >= 0 || n <= 0));\n}\n    {;\n//@ assert((m < n || n <= 0));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gr2006.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gsv2008.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y;\n    x = -50;\n    y = unknown_int();\n    if (!(-1000 < y && y < LARGE_INT)) return 0;\n    while (x < 0) {\n\tx = x + y;\n\ty++;\n    }\n    {;\n//@ assert(y > 0);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/hhk2008.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int a = unknown_int();\n    int b = unknown_int();\n    int res, cnt;\n    if (!(a <= 1000000)) return 0;\n    if (!(0 <= b && b <= 1000000)) return 0;\n    res = a;\n    cnt = b;\n    while (cnt > 0) {\n\tcnt = cnt - 1;\n\tres = res + 1;\n    }\n    {;\n//@ assert(res == a + b);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/jm2006.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n    if (!(i >= 0 && j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    while(x != 0) {\n        x--;\n        y--;\n    }\n\n    if (i == j) {\n        {;\n//@ assert(y == 0);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i += 2) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_k.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i;\n    int k;\n    k = unknown_int();\n    if (!(0 <= k && k <= 10)) return 0;\n    for (i = 0; i < LARGE_INT*k; i += k) ;\n    {;\n//@ assert(i == LARGE_INT*k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/gauss_sum.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int n, sum, i;\n    n = unknown_int();\n    if (!(1 <= n && n <= 1000)) return 0;\n    sum = 0;\n    for(i = 1; i <= n; i++) {\n        sum = sum + i;\n    }\n    {;\n//@ assert(2*sum == n*(n+1));\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/half.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark01_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x==1 && y==1)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y=x;\n  }\n  {;\n//@ assert(y>=1);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x==1 && y==1)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y=x;\n  }\n  {;\n//@ assert(y>=1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark02_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  while (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int i = unknown_int();\n  int l = unknown_int();\n  i = l;\n  if (!(l>0)) return 0;\n  while (i < n) {\n    i++;\n  }\n  {;\n//@ assert(l>=1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark03_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  x = 0; y = 0;\n  if (!(i==0 && j==0)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n    i+=x;\n    j+=y;\n    if (flag) j+=1;\n  }\n  {;\n//@ assert(j>=i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark04_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  while (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int k = unknown_int();\n  int j = unknown_int();\n  int n = unknown_int();\n  \n  if (!(n>=1 && k>=n && j==0)) return 0;\n  while (j<=n-1) {\n    j++;\n    k--;\n  }\n  {;\n//@ assert(k>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark05_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  while (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x>=0 && x<=y && y<n)) return 0;\n  while (x<n) {\n    x++;\n    if (x>y) y++;\n  }\n  {;\n//@ assert(y==n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark06_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  while (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int i = unknown_int();\n  int x = unknown_int();\n  int y = unknown_int();\n  int k = unknown_int();\n  j=0;\n  if (!(x+y==k)) return 0;\n  while (unknown_bool()) {\n    if(j==i) {x++;y--;} else {y++;x--;} j++;\n  }\n  {;\n//@ assert(x+y==k);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark08_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  while (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int n = unknown_int();\n  int sum = unknown_int();\n  int i = unknown_int();\n  \n  if (!(n>=0 && sum==0 && i==0)) return 0;\n  while (i<n) {\n    sum=sum+i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark09_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  while (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x == y && y >=0)) return 0;\n  while (x!=0) {\n    x--;\n    y--;\n    if (x<0 || y<0) break;\n  }\n  {;\n//@ assert(y==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark10_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  while (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int c = unknown_int();\n  \n  if (!(c==0 && i==0)) return 0;\n  while (i<100) {\n    c=c+i;\n    i=i+1;\n    if (i<=0) break;\n  }\n  {;\n//@ assert(c>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark11_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x==0 && n>0)) return 0;\n  while (x<n) {\n    x++;\n  }\n  {;\n//@ assert(x==n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int n = unknown_int();\n  \n  if (!(x==0 && n>0)) return 0;\n  while (x<n) {\n    x++;\n  }\n  {;\n//@ assert(x==n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark13_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i <= k) {\n    i++;\n    j=j+1;\n  }\n  {;\n//@ assert(j==i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark14_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  while (i>0) {\n    i--;\n  }\n  {;\n//@ assert(i>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  \n  if (!(i>=0 && i<=200)) return 0;\n  while (i>0) {\n    i--;\n  }\n  {;\n//@ assert(i>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark15_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int low = unknown_int();\n  int mid = unknown_int();\n  int high = unknown_int();\n  if (!(low == 0 && mid >= 1 && high == 2*mid)) return 0;\n  while (mid > 0) {\n    low = low + 1;\n    high = high - 1;\n    mid = mid - 1;\n  }\n  {;\n//@ assert(low == high);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark16_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  if (!(0 <= k && k <= 1 && i == 1)) return 0;\n  while (unknown_bool()) {\n    i = i + 1;\n    k = k - 1;\n  }\n  {;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((i==0) && (k==0) && (n>0))) return 0;\n  while (i < n) {\n    i++;k++;\n  }\n  {;\n//@ assert((i == k) && (k == n));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((i==0) && (k==0) && (n>0))) return 0;\n  while (i < n) {\n    i++;k++;\n  }\n  {;\n//@ assert((i == k) && (k == n));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark19_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==n) && (k==n) && (n>0))) return 0;\n  while (j>0 && n>0) {\n    j--;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark21_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (1) {\n    if (x+y>-2) {\n      break;\n    }\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (1) {\n    if (x+y>-2) {\n      break;\n    }\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark22_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x==1 && y==0)) return 0;\n  while (unknown_bool()) {\n    x=x+y;\n    y++;\n  }\n  {;\n//@ assert(x >= y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;\n//@ assert(j==200);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;\n//@ assert(j==200);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark25_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x<0)) return 0;\n  while (x<10) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==10);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x<0)) return 0;\n  while (x<10) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark26_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==y);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+1;\n  }\n  {;\n//@ assert(x==y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark27_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k>i-j)) return 0;\n  while (i<j) {\n    k=k+1;\n    i=i+1;\n  }\n  {;\n//@ assert(k > 0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k>i-j)) return 0;\n  while (i<j) {\n    k=k+1;\n    i=i+1;\n  }\n  {;\n//@ assert(k > 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  if (!(i * i < j * j)) return 0;\n  while (i < j) {\n    j = j - i;\n    if (j < i) {j = j + i;\n    i = j - i;\n    j = j - i;}\n  }\n  {;\n//@ assert(j == i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  if (!(i * i < j * j)) return 0;\n  while (i < j) {\n    j = j - i;\n    if (j < i) {j = j + i;\n    i = j - i;\n    j = j - i;}\n  }\n  {;\n//@ assert(j == i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark29_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+100;\n  }\n  {;\n//@ assert(x >= y && x <= y + 99);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    x=x+100;\n  }\n  {;\n//@ assert(x >= y && x <= y + 99);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark30_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y == x)) return 0;\n  while (unknown_bool()) {\n    x++;\n    y++;\n  }\n  {;\n//@ assert(x == y);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark31_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  while (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 0)) return 0;\n  while (1) {\n    if (x>=0) {\n      break;\n    } else {\n      x=x+y; y++;\n    }\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark32_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x==1 || x==2)) return 0;\n  while (unknown_bool()) {\n    if(x==1) x=2;\n    else if (x==2) x=1;\n  }\n  {;\n//@ assert(x<=8);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark33_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x>=0)) return 0;\n  while (x<100 && x>=0) {\n    x++;\n  }\n  {;\n//@ assert(x>=100);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!(x>=0)) return 0;\n  while (x<100 && x>=0) {\n    x++;\n  }\n  {;\n//@ assert(x>=100);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark34_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  while (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int j = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((j==0) && (k==n) && (n>0))) return 0;\n  while (j<n && n>0) {\n    j++;k--;\n  }\n  {;\n//@ assert((k == 0));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark36_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;\n  }\n  {;\n//@ assert(x == y && x >= 0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;\n  }\n  {;\n//@ assert(x == y && x >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark37_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && x >= 0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark38_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;\n//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == y && y == 0)) return 0;\n  while (unknown_bool()) {\n    x+=4;y++;\n  }\n  {;\n//@ assert(x == 4*y && x >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark39_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == 4*y && x >= 0)) return 0;\n  while (x > 0) {\n    x-=4;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x == 4*y && x >= 0)) return 0;\n  while (x > 0) {\n    x-=4;\n    y--;\n  }\n  {;\n//@ assert(y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark40_polynomial.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark41_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && y == 0 && z==0)) return 0;\n  while (unknown_bool()) {\n    x++;y++;z-=2;\n  }\n  {;\n//@ assert(x == y && x >= 0 && x+y+z==0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark42_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && x >= 0 && x+y+z==0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n    z++;\n    z++;\n  }\n  {;\n//@ assert(z<=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(x == y && x >= 0 && x+y+z==0)) return 0;\n  while (x > 0) {\n    x--;\n    y--;\n    z++;\n    z++;\n  }\n  {;\n//@ assert(z<=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark43_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 100 && y < 100)) return 0;\n  while (x < 100 && y < 100) {\n    x=x+1;\n    y=y+1;\n  }\n  {;\n//@ assert(x == 100 || y == 100);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x < 100 && y < 100)) return 0;\n  while (x < 100 && y < 100) {\n    x=x+1;\n    y=y+1;\n  }\n  {;\n//@ assert(x == 100 || y == 100);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if ((x<0 && y<0)) {\n      x=x+7; y=y-10;\n    }\n    if ((x<0 && y>=0)) {\n      x=x+7; y=y+3;\n    } else {\n      x=x+10; y=y+3;\n    }\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if ((x<0 && y<0)) {\n      x=x+7; y=y-10;\n    }\n    if ((x<0 && y>=0)) {\n      x=x+7; y=y+3;\n    } else {\n      x=x+10; y=y+3;\n    }\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark46_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int z = unknown_int();\n  if (!(y>0 || x>0 || z>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    }\n    if (y>0) {\n      y++;\n    } else {\n      z++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0 || z>0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if (x < 0) x = x + 7;\n    else x = x + 10;\n    if (y < 0) y = y - 10;\n    else y = y + 3;\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if (x < 0) x = x + 7;\n    else x = x + 10;\n    if (y < 0) y = y - 10;\n    else y = y + 3;\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark48_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  while (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int k = unknown_int();\n  if (!(i<j && k> 0)) return 0;\n  while (i<j) {\n    k=k+1;i=i+1;\n  }\n  {;\n//@ assert(k > j - i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark49_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int r = unknown_int();\n  if (!(r > i + j)) return 0;\n  while (i > 0) {\n    i = i - 1;\n    j = j + 1;\n  }\n  {;\n//@ assert(r > i + j);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  int r = unknown_int();\n  if (!(r > i + j)) return 0;\n  while (i > 0) {\n    i = i - 1;\n    j = j + 1;\n  }\n  {;\n//@ assert(r > i + j);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark51_polynomial.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  \n  if (!((x>=0) && (x<=50))) return 0;\n  while (unknown_bool()) {\n    if (x>50) x++;\n    if (x == 0) { x ++;\n    } else x--;\n  }\n  {;\n//@ assert((x>=0) && (x<=50));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark52_polynomial.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  while (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  if (!(i < 10 && i > -10)) return 0;\n  while (i * i < 100) {\n    i = i + 1;\n  }\n  {;\n//@ assert(i == 10);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark53_polynomial.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  \n  if (!(x*y>=0)) return 0;\n  while (unknown_bool()) {\n    if(x==0) {if (y>0) x++;\n    else x--;} if(x>0) y++;\n    else x--;\n  }\n  {;\n//@ assert(x*y>=0);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/count_up_down-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y==n);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/count_up_down-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    if (!(y!=0)) return 0;\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    if (!(y!=0)) return 0;\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_infinite_loop_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/for_infinite_loop_2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  unsigned int i=0;\n  int x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; 1; i++)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n  {;\n//@ assert(x!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_int(), sn=0;\n  if (!(n < 1000 && n >= -1000)) return 0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n      if (x<10) {\n          sn = sn + a;\n      }\n      x++;\n      {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n      if (x<10) {\n          sn = sn + a;\n      }\n      x++;\n      {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum03-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum04-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum04-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_02-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_02-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    while(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main()\n{\n    int x=unknown_int();\n    int z=unknown_int();\n    if (!(x>-100)) return 0;\n    if (!(x<200)) return 0;\n    if (!(z>100)) return 0;\n    if (!(z<200)) return 0;\n    while(x<100 && z>100) \n    {\n        _Bool tmp=unknown_bool();\n        if (tmp) {\n            x++;\n        } else {\n            x--;\n            z--;\n        }\n    }                       \n\n    {;\n//@ assert(x>=100 || z<=100);\n}\n\n    return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/terminator_03-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\n#define LIMIT 1000000\n\nint main() {\n    int x=unknown_int();\n    int y=unknown_int();\n    if (!(y <= LIMIT)) return 0;\n\n    if (y>0) {\n        while(x<100) {\n            x=x+y;\n        }\n    }\n\n    {;\n//@ assert(y<=0 || (y>0 && x>=100));\n}\n\n    return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\n#include <assert.h>\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\n#define LIMIT 1000000\n\nint main() {\n    int x=unknown_int();\n    int y=unknown_int();\n    if (!(y <= LIMIT)) return 0;\n\n    if (y>0) {\n        while(x<100) {\n            x=x+y;\n        }\n    }\n\n    {;\n//@ assert(y<=0 || (y>0 && x>=100));\n}\n\n    return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/trex03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/trex03-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n  int x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}    \n  }\n\n  {;\n//@ assert(x==0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/iftelse.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;\n//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    if(i%2)\n\t    j = j+3;\n    else\n\t    k = k+3;\n    if(n>0)\n\t  {;\n//@ assert( (i/2<=j) );\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/loopv3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i,j;\n  i = 0; j=0;\n  while(i<SIZE){ \n\n    if(unknown_int())\t  \n      i = i + 8; \n    else\n     i = i + 4;    \n\t  \n  }\n  j = i/4 ;\n    {;\n//@ assert( (j * 4) == i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i,j;\n  i = 0; j=0;\n  while(i<SIZE){ \n\n    if(unknown_int())\t  \n      i = i + 8; \n    else\n     i = i + 4;    \n\t  \n  }\n  j = i/4 ;\n    {;\n//@ assert( (j * 4) == i);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_10.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void)\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==x);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=0;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz=z+2;\n\t\tx++;\n\t}\n  {;\n//@ assert(!(z%2));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=0;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz=z+2;\n\t\tx++;\n\t}\n  {;\n//@ assert(!(z%2));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_6.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x=0,y=500000,z=0;\n\tx=0;\n\twhile(x<1000000){\n\t\tif(x<500000)\n\t\t\tx++;\n\t\telse{\n\t\t\tif(x<750000){\n\t\t\t\tx++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx=x+2;\n\t\t\t}\n\t\t\ty++;\n\t\t}\n\t}\n\t {;\n//@ assert(x==1000000);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_8.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tunsigned int x = 0;\n\tunsigned int y = 10000000;\n\tunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n\t{;\n//@ assert(z==0);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_9.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x = 0;\n\tint y = 500000;\n\twhile(x < 1000000) {\n\t\tif (x < 500000) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\t{;\n//@ assert(y==x);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n\tint x = 0;\n\tint y = 500000;\n\twhile(x < 1000000) {\n\t\tif (x < 500000) {\n\t\t\tx = x + 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\t{;\n//@ assert(y==x);\n}\n\treturn 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n    int x = 0;\n    int y = 500000;\n    while(x < 1000000) {\n\tif (x < 500000) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y!=x);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n    int x = 0;\n    int y = 500000;\n    while(x < 1000000) {\n\tif (x < 500000) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y!=x);\n}\n    return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%2))\n\t    i = i + 1;\n\t  else \n\t\t  j = j+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j,l=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = 0;\n  j = 0;\n  k = 0;\n  l=0;\n  while( l < n ) {\n\t\n\t  if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt4.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v4=0;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt5.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt8.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5) == l);\n}\n  }\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt9.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n  }\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0, v5=0, v6=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%9))\n\t    v6 = v6 + 1;\n\t  else if(!(l%8))\n\t    v5 = v5 + 1;\n\t  else if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;\n//@ assert((i+j+k+v1+v2+v3+v4+v5+v6) == l);\n}\n  }\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sum_natnum.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  while(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint SIZE = 40000; \n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i;\n  unsigned long long sum;\n  i = 0, sum =0; \n  while(i< SIZE){ \n      i = i + 1; \n      sum += i;\n  }\n  {;\n//@ assert( sum == ((SIZE *(SIZE+1))/2));\n}\n  return 0;\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": [
                "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;\n//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  while ((y < 100000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  while ((y < 1000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 5) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/4.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/5.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/6.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int v1,v2,v3;\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/7.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/8.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/9.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/10.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/11.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/12.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/13.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/14.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/15.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/16.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n    }\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/17.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/18.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/19.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/20.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       \n       {;\n//@ assert(m >= 0);\n}\n    }\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/21.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/22.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/23.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/24.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/25.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 10000);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/26.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/27.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/28.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/29.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/30.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 100);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/31.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/32.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/33.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 0) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/34.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/35.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/36.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c <= 40) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/37.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 40) )\n{;\n//@ assert( (c == 40) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/38.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        {;\n//@ assert( c >= 0);\n}\n        \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/39.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int n;\n    int c = 0;\n    assume (n > 0);\n\n    while (unknown()) {\n        if(c == n) {\n            c = 1;\n        }\n        else {\n            c = c + 1;\n        }\n    }\n\n    if(c == n) {\n        \n        {;\n//@ assert( c <= n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/40.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/41.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/42.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/43.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/44.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/45.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/46.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/47.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/48.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n > -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/49.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/50.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/51.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/52.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/53.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/54.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/55.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/56.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/57.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/58.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/59.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c <= n) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/60.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/61.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/62.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/63.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/64.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 10);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/65.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/66.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 100) {\n        y = 100 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y < 100);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/67.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        {;\n//@ assert(y >= 0);\n}\n        \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/68.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n,y;\n    int x = 1;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n        \n        {;\n//@ assert(y <= n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/69.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      {;\n//@ assert(y >= 0);\n}\n      \n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/70.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/71.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/72.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/73.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/74.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/75.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/76.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/77.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/78.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/79.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/80.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (i < x) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/81.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/82.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/83.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -5000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/84.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/85.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/86.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -50);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/87.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/88.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/89.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/90.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/91.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/92.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n    int z1,z2,z3;\n\n    int x = 0;\n    int y = 0;\n\n    while(y >= 0){\n        y = y + x;\n    }\n\n    {;\n//@ assert( y>= 0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/93.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (i = 0);\n  (x = 0);\n  (y = 0);\n  \n  while ((i < n)) {\n    {\n    (i  = (i + 1));\n      if ( unknown() ) {\n        {\n        (x  = (x + 1));\n        (y  = (y + 2));\n        }\n      } else {\n        {\n        (x  = (x + 2));\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( ((3 * n) == (x + y)) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/94.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int k;\n  int n;\n  \n  assume((k >= 0));\n  assume((n >= 0));\n  (i = 0);\n  (j = 0);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + i));\n    }\n\n  }\n  \n{;\n//@ assert( ((i + (j + k)) > (2 * n)) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/95.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/96.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/97.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/98.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/99.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (x = n);\n  (y = 0);\n  \n  while ((x > 0)) {\n    {\n    (y  = (y + 1));\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (n == (x + y)) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/100.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  int y;\n  \n  assume((n >= 0));\n  (x = n);\n  (y = 0);\n  \n  while ((x > 0)) {\n    {\n    (y  = (y + 1));\n    (x  = (x - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y == n) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/101.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/102.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/103.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 0);\n  \n  while ((x < 100)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 100) );\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/104.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/105.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/106.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    assume(a <= m);\n    assume(j < 1);\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a >= m);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/107.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <= m);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/108.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/109.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n    }\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/110.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/111.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/112.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != n) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/113.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/114.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/115.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != -1) )\n{;\n//@ assert( (sn == x) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/116.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/117.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != -1) )\n{;\n//@ assert( (sn == x) );\n}\n\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/118.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/119.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/120.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/121.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/122.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/123.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == size) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/124.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/125.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/126.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/127.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/128.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/129.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/130.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n    \n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/131.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x3 >= 0);\n}\n}",
            "pass_at_k": {
                "15": 0.0
            },
            "pass_at_k_prune": {
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/132.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    while( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/code2inv/133.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  assume((n >= 0));\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == n) );\n}\n}",
            "pass_at_k": {
                "15": 1.0
            },
            "pass_at_k_prune": {
                "15": 1.0
            }
        }
    ]
}