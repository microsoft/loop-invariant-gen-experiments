{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop10_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\nloop invariant i3: old >= 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is preserved but not established.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant old <= new;\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old <= new;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old <= new;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new >= old;\nloop invariant i3: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new >= old;\nloop invariant i3: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant new == old + 1 || lock == 0;\n    loop invariant (lock == 1) || (new == old + 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: new == old + 1 || lock == 0;\nloop invariant i2: (lock == 1) || (new == old + 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: (lock == 1) || (new == old + 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion !(lock == 0): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new >= old;\nloop invariant i3: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new >= old;\nloop invariant i3: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old == \\at(old, Pre) || old == \\at(new, Pre);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\nloop invariant i3: old == \\at(old, Pre) || old == \\at(new, Pre);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "Annotation error on line 19: unbound logic variable new. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 0;\n    loop invariant new == old || new == old + 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old >= 0;\nloop invariant i2: new >= 0;\nloop invariant i3: new == old || new == old + 1;\nloop invariant i4: lock == 0 || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new == old || new == old + 1;\nloop invariant i4: lock == 0 || lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old >= 0;\nloop invariant i2: new >= 1;\nloop invariant i3: lock == 0 || lock == 1;\nloop invariant i4: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion !(lock == 0): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: lock == 0 || lock == 1;\nloop invariant i4: new == old + 1 || new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion !(lock == 0): Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant new == old + 1 || (new == old && lock == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: old >= 0;\nloop invariant i2: new >= 1;\nloop invariant i3: new == old + 1 || (new == old && lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion !(lock == 0): Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\nloop invariant i3: new == old + 1 || (new == old && lock == 1);\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nAssertion !(lock == 0): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (new == old) || (lock == 1);\n    loop invariant new >= old;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: (new == old) || (lock == 1);\nloop invariant i2: new >= old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nAssertion !(lock == 0): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant i2: new >= old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion !(lock == 0): Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant old <= new;\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant new == old + 1 || lock == 0;\n    loop invariant (lock == 1) || (new == old + 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old == \\at(old, Pre) || old == \\at(new, Pre);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 0;\n    loop invariant new == old || new == old + 1;\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant new == old + 1 || (new == old && lock == 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant (new == old) || (lock == 1);\n    loop invariant new >= old;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old >= 0;\n*/",
            "/*@ \n    loop invariant old <= new;\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/",
            "/*@ \n    loop invariant new == old + 1 || lock == 0;\n    loop invariant (lock == 1) || (new == old + 1);\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new == old;\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n    loop invariant old == \\at(old, Pre) || old == \\at(new, Pre);\n*/",
            "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 0;\n    loop invariant new == old || new == old + 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant new == old + 1 || new == old;\n*/",
            "/*@ \n    loop invariant old >= 0;\n    loop invariant new >= 1;\n    loop invariant new == old + 1 || (new == old && lock == 1);\n*/",
            "/*@ \n    loop invariant (new == old) || (lock == 1);\n    loop invariant new >= old;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\nloop invariant i3: old >= 0;\nloop invariant i4: old <= new;\nloop invariant i5: lock == 0 || lock == 1;\nloop invariant i6: lock == 0 || lock == 1;\nloop invariant i7: new >= old;\nloop invariant i8: new == old + 1 || new == old;\nloop invariant i9: new == old + 1 || lock == 0;\nloop invariant i10: (lock == 1) || (new == old + 1);\nloop invariant i11: lock == 0 || lock == 1;\nloop invariant i12: new >= old;\nloop invariant i13: new == old + 1 || new == old;\nloop invariant i14: lock == 0 || lock == 1;\nloop invariant i15: new == old + 1 || new == old;\nloop invariant i16: old == \\at(old, Pre) || old == \\at(new, Pre);\nloop invariant i17: old >= 0;\nloop invariant i18: new >= 0;\nloop invariant i19: new == old || new == old + 1;\nloop invariant i20: lock == 0 || lock == 1;\nloop invariant i21: old >= 0;\nloop invariant i22: new >= 1;\nloop invariant i23: lock == 0 || lock == 1;\nloop invariant i24: new == old + 1 || new == old;\nloop invariant i25: old >= 0;\nloop invariant i26: new >= 1;\nloop invariant i27: new == old + 1 || (new == old && lock == 1);\nloop invariant i28: (new == old) || (lock == 1);\nloop invariant i29: new >= old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 32: unbound logic variable new. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nvoid main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: new == old + 1 || new == old;\n\nloop invariant i4: old <= new;\nloop invariant i5: lock == 0 || lock == 1;\nloop invariant i6: lock == 0 || lock == 1;\nloop invariant i7: new >= old;\nloop invariant i8: new == old + 1 || new == old;\n\nloop invariant i10: (lock == 1) || (new == old + 1);\nloop invariant i11: lock == 0 || lock == 1;\nloop invariant i12: new >= old;\nloop invariant i13: new == old + 1 || new == old;\nloop invariant i14: lock == 0 || lock == 1;\nloop invariant i15: new == old + 1 || new == old;\n\n\n\nloop invariant i19: new == old || new == old + 1;\nloop invariant i20: lock == 0 || lock == 1;\n\n\nloop invariant i23: lock == 0 || lock == 1;\nloop invariant i24: new == old + 1 || new == old;\n\n\nloop invariant i27: new == old + 1 || (new == old && lock == 1);\n\nloop invariant i29: new >= old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new++;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i27 is inductive.\nloop invariant i29 is inductive.\nAssertion !(lock == 0): Valid\n"
    },
    "stats": {
        "success": [
            1,
            5,
            7,
            8,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            102,
            107,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            172,
            174,
            175,
            177,
            178,
            179,
            180,
            181,
            184,
            185,
            186,
            187,
            191,
            195,
            198,
            202,
            203,
            204,
            205,
            206,
            207,
            209,
            210,
            211,
            214,
            215,
            218,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261
        ],
        "failure": [
            0,
            2,
            3,
            4,
            6,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            39,
            42,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            101,
            103,
            104,
            105,
            106,
            108,
            109,
            111,
            118,
            120,
            121,
            123,
            124,
            125,
            126,
            129,
            132,
            133,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            171,
            173,
            176,
            182,
            183,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            197,
            199,
            200,
            201,
            208,
            212,
            213,
            216,
            217,
            219,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            240,
            241,
            251,
            252,
            253,
            254
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 258,
        "success_rate": 0.5271317829457365
    }
}