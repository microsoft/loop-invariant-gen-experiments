{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/sumt7.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant l >= 0;\n    loop invariant n >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v3 >= 0;\n    loop invariant v4 >= 0;\n    loop invariant l == (i + j + k + v1 + v2 + v3 + v4);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: l >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: v1 >= 0;\nloop invariant i7: v2 >= 0;\nloop invariant i8: v3 >= 0;\nloop invariant i9: v4 >= 0;\nloop invariant i10: l == (i + j + k + v1 + v2 + v3 + v4);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant v1 == l/7;\n    loop invariant v2 == l/6;\n    loop invariant v3 == l/5;\n    loop invariant v4 == l/4;\n    loop invariant i == l/3;\n    loop invariant j == l/2;\n    loop invariant k == l - (v1 + v2 + v3 + v4 + i + j);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: v1 == l/7;\nloop invariant i3: v2 == l/6;\nloop invariant i4: v3 == l/5;\nloop invariant i5: v4 == l/4;\nloop invariant i6: i == l/3;\nloop invariant i7: j == l/2;\nloop invariant i8: k == l - (v1 + v2 + v3 + v4 + i + j);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\nloop invariant i8: k == l - (v1 + v2 + v3 + v4 + i + j);\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i8 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l;\nloop invariant i6: 0 <= v2 <= l;\nloop invariant i7: 0 <= v3 <= l;\nloop invariant i8: 0 <= v4 <= l;\nloop invariant i9: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l;\nloop invariant i6: 0 <= v2 <= l;\nloop invariant i7: 0 <= v3 <= l;\nloop invariant i8: 0 <= v4 <= l;\nloop invariant i9: (i + j + k + v1 + v2 + v3 + v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= n/3;\n    loop invariant 0 <= j <= n/2;\n    loop invariant 0 <= k <= n;\n    loop invariant 0 <= v1 <= n/7;\n    loop invariant 0 <= v2 <= n/6;\n    loop invariant 0 <= v3 <= n/5;\n    loop invariant 0 <= v4 <= n/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= n/3;\nloop invariant i3: 0 <= j <= n/2;\nloop invariant i4: 0 <= k <= n;\nloop invariant i5: 0 <= v1 <= n/7;\nloop invariant i6: 0 <= v2 <= n/6;\nloop invariant i7: 0 <= v3 <= n/5;\nloop invariant i8: 0 <= v4 <= n/4;\nloop invariant i9: i + j + k + v1 + v2 + v3 + v4 == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is established but not preserved.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: 0 <= k <= n;\n\n\n\n\nloop invariant i9: i + j + k + v1 + v2 + v3 + v4 == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i4 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l/7;\nloop invariant i6: 0 <= v2 <= l/6;\nloop invariant i7: 0 <= v3 <= l/5;\nloop invariant i8: 0 <= v4 <= l/4;\nloop invariant i9: i + j + k + v1 + v2 + v3 + v4 == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is established but not preserved.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\n\n\n\n\nloop invariant i9: i + j + k + v1 + v2 + v3 + v4 == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l && l <= n;\n    loop invariant 0 <= i && i <= l;\n    loop invariant 0 <= j && j <= l;\n    loop invariant 0 <= k && k <= l;\n    loop invariant 0 <= v1 && v1 <= l;\n    loop invariant 0 <= v2 && v2 <= l;\n    loop invariant 0 <= v3 && v3 <= l;\n    loop invariant 0 <= v4 && v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l && l <= n;\nloop invariant i2: 0 <= i && i <= l;\nloop invariant i3: 0 <= j && j <= l;\nloop invariant i4: 0 <= k && k <= l;\nloop invariant i5: 0 <= v1 && v1 <= l;\nloop invariant i6: 0 <= v2 && v2 <= l;\nloop invariant i7: 0 <= v3 && v3 <= l;\nloop invariant i8: 0 <= v4 && v4 <= l;\nloop invariant i9: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i == l/3 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant j == l/2 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant k == l - i - j - v1 - v2 - v3 - v4;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l;\nloop invariant i6: 0 <= v2 <= l;\nloop invariant i7: 0 <= v3 <= l;\nloop invariant i8: 0 <= v4 <= l;\nloop invariant i9: i == l/3 - v1/7 - v2/6 - v3/5 - v4/4;\nloop invariant i10: j == l/2 - v1/7 - v2/6 - v3/5 - v4/4;\nloop invariant i11: k == l - i - j - v1 - v2 - v3 - v4;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is established but not preserved.\nloop invariant i10 is established but not preserved.\nloop invariant i11 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l;\nloop invariant i3: 0 <= j <= l;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l;\nloop invariant i6: 0 <= v2 <= l;\nloop invariant i7: 0 <= v3 <= l;\nloop invariant i8: 0 <= v4 <= l;\n\n\nloop invariant i11: k == l - i - j - v1 - v2 - v3 - v4;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i11 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l/3;\n    loop invariant 0 <= j <= l/2;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= i <= l/3;\nloop invariant i3: 0 <= j <= l/2;\nloop invariant i4: 0 <= k <= l;\nloop invariant i5: 0 <= v1 <= l/7;\nloop invariant i6: 0 <= v2 <= l/6;\nloop invariant i7: 0 <= v3 <= l/5;\nloop invariant i8: 0 <= v4 <= l/4;\nloop invariant i9: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is inductive.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is established but not preserved.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\nloop invariant i4: 0 <= k <= l;\n\n\n\n\nloop invariant i9: (i+j+k+v1+v2+v3+v4) == l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i4 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= v1 <= l/7 + 1;\n    loop invariant 0 <= v2 <= l/6 + 1;\n    loop invariant 0 <= v3 <= l/5 + 1;\n    loop invariant 0 <= v4 <= l/4 + 1;\n    loop invariant 0 <= i <= l/3 + 1;\n    loop invariant 0 <= j <= l/2 + 1;\n    loop invariant 0 <= k <= l + 1;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\nloop invariant i2: 0 <= v1 <= l/7 + 1;\nloop invariant i3: 0 <= v2 <= l/6 + 1;\nloop invariant i4: 0 <= v3 <= l/5 + 1;\nloop invariant i5: 0 <= v4 <= l/4 + 1;\nloop invariant i6: 0 <= i <= l/3 + 1;\nloop invariant i7: 0 <= j <= l/2 + 1;\nloop invariant i8: 0 <= k <= l + 1;\nloop invariant i9: (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nloop invariant i3 is established but not preserved.\nloop invariant i4 is established but not preserved.\nloop invariant i5 is established but not preserved.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is established but not preserved.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: 0 <= l <= n;\n\n\n\n\n\n\nloop invariant i8: 0 <= k <= l + 1;\nloop invariant i9: (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant l >= 0;\n    loop invariant n >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v3 >= 0;\n    loop invariant v4 >= 0;\n    loop invariant l == (i + j + k + v1 + v2 + v3 + v4);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant v1 == l/7;\n    loop invariant v2 == l/6;\n    loop invariant v3 == l/5;\n    loop invariant v4 == l/4;\n    loop invariant i == l/3;\n    loop invariant j == l/2;\n    loop invariant k == l - (v1 + v2 + v3 + v4 + i + j);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= n/3;\n    loop invariant 0 <= j <= n/2;\n    loop invariant 0 <= k <= n;\n    loop invariant 0 <= v1 <= n/7;\n    loop invariant 0 <= v2 <= n/6;\n    loop invariant 0 <= v3 <= n/5;\n    loop invariant 0 <= v4 <= n/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l && l <= n;\n    loop invariant 0 <= i && i <= l;\n    loop invariant 0 <= j && j <= l;\n    loop invariant 0 <= k && k <= l;\n    loop invariant 0 <= v1 && v1 <= l;\n    loop invariant 0 <= v2 && v2 <= l;\n    loop invariant 0 <= v3 && v3 <= l;\n    loop invariant 0 <= v4 && v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i == l/3 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant j == l/2 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant k == l - i - j - v1 - v2 - v3 - v4;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l/3;\n    loop invariant 0 <= j <= l/2;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= v1 <= l/7 + 1;\n    loop invariant 0 <= v2 <= l/6 + 1;\n    loop invariant 0 <= v3 <= l/5 + 1;\n    loop invariant 0 <= v4 <= l/4 + 1;\n    loop invariant 0 <= i <= l/3 + 1;\n    loop invariant 0 <= j <= l/2 + 1;\n    loop invariant 0 <= k <= l + 1;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant l >= 0;\n    loop invariant n >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant k >= 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v3 >= 0;\n    loop invariant v4 >= 0;\n    loop invariant l == (i + j + k + v1 + v2 + v3 + v4);\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant v1 == l/7;\n    loop invariant v2 == l/6;\n    loop invariant v3 == l/5;\n    loop invariant v4 == l/4;\n    loop invariant i == l/3;\n    loop invariant j == l/2;\n    loop invariant k == l - (v1 + v2 + v3 + v4 + i + j);\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) == l;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= n/3;\n    loop invariant 0 <= j <= n/2;\n    loop invariant 0 <= k <= n;\n    loop invariant 0 <= v1 <= n/7;\n    loop invariant 0 <= v2 <= n/6;\n    loop invariant 0 <= v3 <= n/5;\n    loop invariant 0 <= v4 <= n/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant i + j + k + v1 + v2 + v3 + v4 == l;\n*/",
            "/*@ \n    loop invariant 0 <= l && l <= n;\n    loop invariant 0 <= i && i <= l;\n    loop invariant 0 <= j && j <= l;\n    loop invariant 0 <= k && k <= l;\n    loop invariant 0 <= v1 && v1 <= l;\n    loop invariant 0 <= v2 && v2 <= l;\n    loop invariant 0 <= v3 && v3 <= l;\n    loop invariant 0 <= v4 && v4 <= l;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l;\n    loop invariant 0 <= j <= l;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l;\n    loop invariant 0 <= v2 <= l;\n    loop invariant 0 <= v3 <= l;\n    loop invariant 0 <= v4 <= l;\n    loop invariant i == l/3 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant j == l/2 - v1/7 - v2/6 - v3/5 - v4/4;\n    loop invariant k == l - i - j - v1 - v2 - v3 - v4;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= i <= l/3;\n    loop invariant 0 <= j <= l/2;\n    loop invariant 0 <= k <= l;\n    loop invariant 0 <= v1 <= l/7;\n    loop invariant 0 <= v2 <= l/6;\n    loop invariant 0 <= v3 <= l/5;\n    loop invariant 0 <= v4 <= l/4;\n    loop invariant (i+j+k+v1+v2+v3+v4) == l;\n*/",
            "/*@ \n    loop invariant 0 <= l <= n;\n    loop invariant 0 <= v1 <= l/7 + 1;\n    loop invariant 0 <= v2 <= l/6 + 1;\n    loop invariant 0 <= v3 <= l/5 + 1;\n    loop invariant 0 <= v4 <= l/4 + 1;\n    loop invariant 0 <= i <= l/3 + 1;\n    loop invariant 0 <= j <= l/2 + 1;\n    loop invariant 0 <= k <= l + 1;\n    loop invariant (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: l >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: v1 >= 0;\nloop invariant i7: v2 >= 0;\nloop invariant i8: v3 >= 0;\nloop invariant i9: v4 >= 0;\nloop invariant i10: l == (i + j + k + v1 + v2 + v3 + v4);\nloop invariant i11: 0 <= l <= n;\nloop invariant i12: v1 == l/7;\nloop invariant i13: v2 == l/6;\nloop invariant i14: v3 == l/5;\nloop invariant i15: v4 == l/4;\nloop invariant i16: i == l/3;\nloop invariant i17: j == l/2;\nloop invariant i18: k == l - (v1 + v2 + v3 + v4 + i + j);\nloop invariant i19: 0 <= l <= n;\nloop invariant i20: 0 <= i <= l;\nloop invariant i21: 0 <= j <= l;\nloop invariant i22: 0 <= k <= l;\nloop invariant i23: 0 <= v1 <= l;\nloop invariant i24: 0 <= v2 <= l;\nloop invariant i25: 0 <= v3 <= l;\nloop invariant i26: 0 <= v4 <= l;\nloop invariant i27: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i28: 0 <= l <= n;\nloop invariant i29: 0 <= i <= l;\nloop invariant i30: 0 <= j <= l;\nloop invariant i31: 0 <= k <= l;\nloop invariant i32: 0 <= v1 <= l;\nloop invariant i33: 0 <= v2 <= l;\nloop invariant i34: 0 <= v3 <= l;\nloop invariant i35: 0 <= v4 <= l;\nloop invariant i36: (i + j + k + v1 + v2 + v3 + v4) == l;\nloop invariant i37: 0 <= l <= n;\nloop invariant i38: 0 <= i <= n/3;\nloop invariant i39: 0 <= j <= n/2;\nloop invariant i40: 0 <= k <= n;\nloop invariant i41: 0 <= v1 <= n/7;\nloop invariant i42: 0 <= v2 <= n/6;\nloop invariant i43: 0 <= v3 <= n/5;\nloop invariant i44: 0 <= v4 <= n/4;\nloop invariant i45: i + j + k + v1 + v2 + v3 + v4 == l;\nloop invariant i46: 0 <= l <= n;\nloop invariant i47: 0 <= i <= l;\nloop invariant i48: 0 <= j <= l;\nloop invariant i49: 0 <= k <= l;\nloop invariant i50: 0 <= v1 <= l/7;\nloop invariant i51: 0 <= v2 <= l/6;\nloop invariant i52: 0 <= v3 <= l/5;\nloop invariant i53: 0 <= v4 <= l/4;\nloop invariant i54: i + j + k + v1 + v2 + v3 + v4 == l;\nloop invariant i55: 0 <= l && l <= n;\nloop invariant i56: 0 <= i && i <= l;\nloop invariant i57: 0 <= j && j <= l;\nloop invariant i58: 0 <= k && k <= l;\nloop invariant i59: 0 <= v1 && v1 <= l;\nloop invariant i60: 0 <= v2 && v2 <= l;\nloop invariant i61: 0 <= v3 && v3 <= l;\nloop invariant i62: 0 <= v4 && v4 <= l;\nloop invariant i63: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i64: 0 <= l <= n;\nloop invariant i65: 0 <= i <= l;\nloop invariant i66: 0 <= j <= l;\nloop invariant i67: 0 <= k <= l;\nloop invariant i68: 0 <= v1 <= l;\nloop invariant i69: 0 <= v2 <= l;\nloop invariant i70: 0 <= v3 <= l;\nloop invariant i71: 0 <= v4 <= l;\nloop invariant i72: i == l/3 - v1/7 - v2/6 - v3/5 - v4/4;\nloop invariant i73: j == l/2 - v1/7 - v2/6 - v3/5 - v4/4;\nloop invariant i74: k == l - i - j - v1 - v2 - v3 - v4;\nloop invariant i75: 0 <= l <= n;\nloop invariant i76: 0 <= i <= l/3;\nloop invariant i77: 0 <= j <= l/2;\nloop invariant i78: 0 <= k <= l;\nloop invariant i79: 0 <= v1 <= l/7;\nloop invariant i80: 0 <= v2 <= l/6;\nloop invariant i81: 0 <= v3 <= l/5;\nloop invariant i82: 0 <= v4 <= l/4;\nloop invariant i83: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i84: 0 <= l <= n;\nloop invariant i85: 0 <= v1 <= l/7 + 1;\nloop invariant i86: 0 <= v2 <= l/6 + 1;\nloop invariant i87: 0 <= v3 <= l/5 + 1;\nloop invariant i88: 0 <= v4 <= l/4 + 1;\nloop invariant i89: 0 <= i <= l/3 + 1;\nloop invariant i90: 0 <= j <= l/2 + 1;\nloop invariant i91: 0 <= k <= l + 1;\nloop invariant i92: (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is established but not preserved.\nloop invariant i13 is established but not preserved.\nloop invariant i14 is established but not preserved.\nloop invariant i15 is established but not preserved.\nloop invariant i16 is established but not preserved.\nloop invariant i17 is established but not preserved.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i50 is inductive.\nloop invariant i51 is inductive.\nloop invariant i52 is inductive.\nloop invariant i53 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nloop invariant i59 is inductive.\nloop invariant i60 is inductive.\nloop invariant i61 is inductive.\nloop invariant i62 is inductive.\nloop invariant i63 is inductive.\nloop invariant i64 is inductive.\nloop invariant i65 is inductive.\nloop invariant i66 is inductive.\nloop invariant i67 is inductive.\nloop invariant i68 is inductive.\nloop invariant i69 is inductive.\nloop invariant i70 is inductive.\nloop invariant i71 is inductive.\nloop invariant i72 is inductive.\nloop invariant i73 is inductive.\nloop invariant i74 is inductive.\nloop invariant i75 is inductive.\nloop invariant i76 is inductive.\nloop invariant i77 is inductive.\nloop invariant i78 is inductive.\nloop invariant i79 is inductive.\nloop invariant i80 is inductive.\nloop invariant i81 is inductive.\nloop invariant i82 is inductive.\nloop invariant i83 is inductive.\nloop invariant i84 is inductive.\nloop invariant i85 is inductive.\nloop invariant i86 is inductive.\nloop invariant i87 is inductive.\nloop invariant i88 is inductive.\nloop invariant i89 is inductive.\nloop invariant i90 is inductive.\nloop invariant i91 is inductive.\nloop invariant i92 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v1=0, v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  /*@\nloop invariant i1: l >= 0;\nloop invariant i2: n >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: k >= 0;\nloop invariant i6: v1 >= 0;\nloop invariant i7: v2 >= 0;\nloop invariant i8: v3 >= 0;\nloop invariant i9: v4 >= 0;\nloop invariant i10: l == (i + j + k + v1 + v2 + v3 + v4);\nloop invariant i11: 0 <= l <= n;\n\n\n\n\n\n\nloop invariant i18: k == l - (v1 + v2 + v3 + v4 + i + j);\nloop invariant i19: 0 <= l <= n;\nloop invariant i20: 0 <= i <= l;\nloop invariant i21: 0 <= j <= l;\nloop invariant i22: 0 <= k <= l;\nloop invariant i23: 0 <= v1 <= l;\nloop invariant i24: 0 <= v2 <= l;\nloop invariant i25: 0 <= v3 <= l;\nloop invariant i26: 0 <= v4 <= l;\nloop invariant i27: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i28: 0 <= l <= n;\nloop invariant i29: 0 <= i <= l;\nloop invariant i30: 0 <= j <= l;\nloop invariant i31: 0 <= k <= l;\nloop invariant i32: 0 <= v1 <= l;\nloop invariant i33: 0 <= v2 <= l;\nloop invariant i34: 0 <= v3 <= l;\nloop invariant i35: 0 <= v4 <= l;\nloop invariant i36: (i + j + k + v1 + v2 + v3 + v4) == l;\nloop invariant i37: 0 <= l <= n;\n\n\nloop invariant i40: 0 <= k <= n;\n\n\n\n\nloop invariant i45: i + j + k + v1 + v2 + v3 + v4 == l;\nloop invariant i46: 0 <= l <= n;\nloop invariant i47: 0 <= i <= l;\nloop invariant i48: 0 <= j <= l;\nloop invariant i49: 0 <= k <= l;\n\n\n\n\nloop invariant i54: i + j + k + v1 + v2 + v3 + v4 == l;\nloop invariant i55: 0 <= l && l <= n;\nloop invariant i56: 0 <= i && i <= l;\nloop invariant i57: 0 <= j && j <= l;\nloop invariant i58: 0 <= k && k <= l;\nloop invariant i59: 0 <= v1 && v1 <= l;\nloop invariant i60: 0 <= v2 && v2 <= l;\nloop invariant i61: 0 <= v3 && v3 <= l;\nloop invariant i62: 0 <= v4 && v4 <= l;\nloop invariant i63: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i64: 0 <= l <= n;\nloop invariant i65: 0 <= i <= l;\nloop invariant i66: 0 <= j <= l;\nloop invariant i67: 0 <= k <= l;\nloop invariant i68: 0 <= v1 <= l;\nloop invariant i69: 0 <= v2 <= l;\nloop invariant i70: 0 <= v3 <= l;\nloop invariant i71: 0 <= v4 <= l;\n\n\nloop invariant i74: k == l - i - j - v1 - v2 - v3 - v4;\nloop invariant i75: 0 <= l <= n;\n\n\nloop invariant i78: 0 <= k <= l;\n\n\n\n\nloop invariant i83: (i+j+k+v1+v2+v3+v4) == l;\nloop invariant i84: 0 <= l <= n;\n\n\n\n\n\n\nloop invariant i91: 0 <= k <= l + 1;\nloop invariant i92: (i + j + k + v1 + v2 + v3 + v4) <= l;\n*/\nwhile( l < n ) {\n\t\n\t  if(!(l%7))\n\t    v1 = v1 + 1;\n\t  else if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n    {;//@ assert((i+j+k+v1+v2+v3+v4) == l);\n}\n  }\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i40 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nloop invariant i49 is inductive.\nloop invariant i54 is inductive.\nloop invariant i55 is inductive.\nloop invariant i56 is inductive.\nloop invariant i57 is inductive.\nloop invariant i58 is inductive.\nloop invariant i59 is inductive.\nloop invariant i60 is inductive.\nloop invariant i61 is inductive.\nloop invariant i62 is inductive.\nloop invariant i63 is inductive.\nloop invariant i64 is inductive.\nloop invariant i65 is inductive.\nloop invariant i66 is inductive.\nloop invariant i67 is inductive.\nloop invariant i68 is inductive.\nloop invariant i69 is inductive.\nloop invariant i70 is inductive.\nloop invariant i71 is inductive.\nloop invariant i74 is inductive.\nloop invariant i75 is inductive.\nloop invariant i78 is inductive.\nloop invariant i83 is inductive.\nloop invariant i84 is inductive.\nloop invariant i91 is inductive.\nloop invariant i92 is inductive.\nAssertion (((((i + j) + k) + v1) + v2) + v3) + v4 == l: Valid\n"
    },
    "stats": {
        "success": [
            1,
            5,
            7,
            8,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            40,
            41,
            43,
            44,
            45,
            46,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            102,
            107,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            172,
            174,
            175,
            177,
            178,
            179,
            180,
            181,
            184,
            185,
            186,
            187,
            191,
            195,
            198,
            202,
            203,
            204,
            205,
            206,
            207,
            209,
            210,
            211,
            214,
            215,
            218,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            263,
            265,
            266,
            268,
            271,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            296,
            299,
            301,
            303,
            305,
            307,
            308,
            312,
            313,
            321,
            322,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            368,
            371,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            384,
            386,
            387,
            388,
            389,
            390,
            391,
            392,
            393,
            394,
            397,
            400,
            401,
            402,
            413,
            416,
            418,
            420,
            423,
            424,
            425,
            430,
            434,
            435,
            436,
            437,
            438,
            439
        ],
        "failure": [
            0,
            2,
            3,
            4,
            6,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            39,
            42,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            101,
            103,
            104,
            105,
            106,
            108,
            109,
            111,
            118,
            120,
            121,
            123,
            124,
            125,
            126,
            129,
            132,
            133,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            171,
            173,
            176,
            182,
            183,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            197,
            199,
            200,
            201,
            208,
            212,
            213,
            216,
            217,
            219,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            235,
            236,
            237,
            238,
            240,
            241,
            251,
            252,
            253,
            254,
            264,
            267,
            269,
            270,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            311,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            323,
            324,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            354,
            369,
            370,
            372,
            385,
            395,
            396,
            398,
            399,
            403,
            404,
            405,
            406,
            407,
            408,
            409,
            410,
            411,
            412,
            414,
            415,
            417,
            419,
            421,
            422,
            426,
            427,
            428,
            429,
            431,
            432,
            433
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 436,
        "success_rate": 0.5435779816513762
    }
}