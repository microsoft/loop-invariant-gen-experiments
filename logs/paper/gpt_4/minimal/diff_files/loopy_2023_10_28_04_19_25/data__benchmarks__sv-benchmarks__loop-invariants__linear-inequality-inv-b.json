{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 255 * n;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 255 * i;\n    loop invariant 0 <= v <= 255;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, Pre);\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, LoopEntry);\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n    loop invariant s == \\sum(0, i, \\lambda (unsigned int k; unknown_uchar()));\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 255 * n;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 255 * i;\n    loop invariant 0 <= v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, Pre);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, LoopEntry);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n    loop invariant s == \\sum(0, i, \\lambda (unsigned int k; unknown_uchar()));\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 255 * n is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 255 * n;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 255 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= v && v <= 255 is inductive.\nloop invariant 0 <= s && s <= 255 * n is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= v && v <= 255;\nloop invariant i3: 0 <= s && s <= 255 * n;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 255 * i;\n    loop invariant 0 <= v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 255 * i is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 255 * i;\nloop invariant i3: 0 <= v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, Pre);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable s. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 255 * n is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 255 * n;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s <= 65025;\n    loop invariant 0 <= v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s <= 65025;\nloop invariant i3: 0 <= v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 255 * n is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 255 * n;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s == \\at(s, Pre) + i * \\at(v, LoopEntry);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable s. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 255 * n;\n    loop invariant s == \\sum(0, i, \\lambda (unsigned int k; unknown_uchar()));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unexpected token '('",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 255 * n;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 57: unexpected token '('",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: 0 <= i <= n;\nloop invariant i5: 0 <= s <= 65025;\nloop invariant i6: 0 <= v <= 255;\nloop invariant i7: 0 <= i <= n;\nloop invariant i8: 0 <= s <= 65025;\nloop invariant i9: 0 <= v <= 255;\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: 0 <= v <= 255;\nloop invariant i12: 0 <= s <= 255 * n;\nloop invariant i13: 0 <= i && i <= n;\nloop invariant i14: 0 <= v && v <= 255;\nloop invariant i15: 0 <= s && s <= 255 * n;\nloop invariant i16: 0 <= i <= n;\nloop invariant i17: 0 <= v <= 255;\nloop invariant i18: 0 <= s <= 65025;\nloop invariant i19: 0 <= i <= n;\nloop invariant i20: 0 <= v <= 255;\nloop invariant i21: 0 <= s <= 65025;\nloop invariant i22: 0 <= i <= n;\nloop invariant i23: 0 <= s <= 255 * i;\nloop invariant i24: 0 <= v <= 255;\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: 0 <= v <= 255;\nloop invariant i27: 0 <= s <= 65025;\nloop invariant i28: s == \\at(s, Pre) + i * \\at(v, Pre);\nloop invariant i29: 0 <= i <= n;\nloop invariant i30: 0 <= v <= 255;\nloop invariant i31: 0 <= s <= 255 * n;\nloop invariant i32: 0 <= i <= n;\nloop invariant i33: 0 <= s <= 65025;\nloop invariant i34: 0 <= v <= 255;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: 0 <= v <= 255;\nloop invariant i37: 0 <= s <= 255 * n;\nloop invariant i38: 0 <= i <= n;\nloop invariant i39: 0 <= v <= 255;\nloop invariant i40: 0 <= s <= 65025;\nloop invariant i41: s == \\at(s, Pre) + i * \\at(v, LoopEntry);\nloop invariant i42: 0 <= i <= n;\nloop invariant i43: 0 <= v <= 255;\nloop invariant i44: 0 <= s <= 255 * n;\nloop invariant i45: s == \\sum(0, i, \\lambda (unsigned int k; unknown_uchar()));\nloop invariant i46: 0 <= i <= n;\nloop invariant i47: 0 <= v <= 255;\nloop invariant i48: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: 0 <= i <= n;\nloop invariant i5: 0 <= s <= 65025;\nloop invariant i6: 0 <= v <= 255;\nloop invariant i7: 0 <= i <= n;\nloop invariant i8: 0 <= s <= 65025;\nloop invariant i9: 0 <= v <= 255;\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: 0 <= v <= 255;\nloop invariant i12: 0 <= s <= 255 * n;\nloop invariant i13: 0 <= i && i <= n;\nloop invariant i14: 0 <= v && v <= 255;\nloop invariant i15: 0 <= s && s <= 255 * n;\nloop invariant i16: 0 <= i <= n;\nloop invariant i17: 0 <= v <= 255;\nloop invariant i18: 0 <= s <= 65025;\nloop invariant i19: 0 <= i <= n;\nloop invariant i20: 0 <= v <= 255;\nloop invariant i21: 0 <= s <= 65025;\nloop invariant i22: 0 <= i <= n;\nloop invariant i23: 0 <= s <= 255 * i;\nloop invariant i24: 0 <= v <= 255;\nloop invariant i25: 0 <= i <= n;\nloop invariant i26: 0 <= v <= 255;\nloop invariant i27: 0 <= s <= 65025;\n\nloop invariant i29: 0 <= i <= n;\nloop invariant i30: 0 <= v <= 255;\nloop invariant i31: 0 <= s <= 255 * n;\nloop invariant i32: 0 <= i <= n;\nloop invariant i33: 0 <= s <= 65025;\nloop invariant i34: 0 <= v <= 255;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: 0 <= v <= 255;\nloop invariant i37: 0 <= s <= 255 * n;\nloop invariant i38: 0 <= i <= n;\nloop invariant i39: 0 <= v <= 255;\nloop invariant i40: 0 <= s <= 65025;\n\nloop invariant i42: 0 <= i <= n;\nloop invariant i43: 0 <= v <= 255;\nloop invariant i44: 0 <= s <= 255 * n;\n\nloop invariant i46: 0 <= i <= n;\nloop invariant i47: 0 <= v <= 255;\nloop invariant i48: 0 <= s <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c"
        ],
        "skipped": [],
        "total": 5,
        "success_count": 2,
        "failure_count": 3,
        "success_rate": 0.4
    }
}