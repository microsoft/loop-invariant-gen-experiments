{
    "logs": [
        {
            "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops-crafted-1/vnew2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n,i,k,j;\n  n = unknown_uint();\n  if (!(n <= SIZE)) return 0;\n  i = j = k = 0;\n  while( i < n ) {\n    i = i + 3;\n    j = j+3;\n    k = k+3;\n  }\n  if(n>0)\n\t  {;//@ assert( i==j && j==k && (i%(SIZE+2)) );\n}\n  return 0;\n}\n",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat exp = 1.0 ;\n\tfloat term = 1.0 ;\n\tunsigned int count = 1 ;\n\tfloat result = 2*(1/(1-x)) ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ; \n\t\texp = exp + term ;\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp ==0 ) break ;\n\t}\n\n\t{;\n//@ assert( result >= exp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000000);\n}\n\n}",
            "pass_at_k": {
                "1": 0.2,
                "2": 0.6,
                "3": 0.9,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.2,
                "2": 0.6,
                "3": 0.9,
                "4": 0.9,
                "5": 0.9,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(a == 6 ) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.4,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.4,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned char s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(x == 100000001);\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > 0 && x < octant) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  while (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant = pi/3 ;\n\tassume(x > octant && x < pi) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( oddExp >= evenExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint a = 6;\n\n\tfor(a = 0; a < 6; ++a) {\n\n\t}\n\tif(!(a == 6 )) {\n\t\t{; \n//@ assert(\\false);\n};\n\t}\n\treturn 1;\n}",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tassume(x > -1.0) ;\n\tassume(x < 1.0) ;\n\tfloat exp = 1.0 ;\n\tfloat term = 1.0 ;\n\tunsigned int count = 1 ;\n\tfloat result = 2*(1/(1-x)) ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ; \n\t\texp = exp + term ;\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp ==0 ) break ;\n\t}\n\n\t{;\n//@ assert( result >= exp );\n}\n\n\treturn 0 ;\n}\t",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "pass_at_k": {
                "1": 0.6,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.7,
                "2": 0.9,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main(){\n\n\tint x=0;\n\tint y=0;\n\n\twhile (unknown_int()) {\n\t\tif (unknown_int()) {\n\t\t\tx = x+1; \n\t\t\ty = y+2;\n\t\t} else if (unknown_int()) {\n\t\t\tif (x >= 4) {\n\t\t\t    x = x+1; \n\t\t\t    y = y+3; \n\t\t\t}\n\t\t} \n\t}\n\n    if(3*x < y)\n\t\tgoto ERROR;\n\t\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main() {\n  int i = unknown();\n  int j = unknown();\n  int x = i;\n  int y = j;\n  while(x!=0) {\n\tx--;\n\ty--;\n  }\n  if(i==j)\n\tif(y != 0) { ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.9,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  int i = 0;\n  int a = 0;\n\n  while (1) {\n    if (i == 20) {\n       goto LOOPEND;\n    } else {\n       i++;\n       a++;\n    }\n\n    if (i != a) {\n      goto ERROR;\n    }\n  }\n\n  LOOPEND:\n\n  if (a != 20) {\n     goto ERROR;\n  }\n\n  return (0);\n  { ERROR: {; \n//@ assert(\\false);\n}\n}\n  return (-1);\n}\n",
            "pass_at_k": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\n;\nint main() {\nint x=0;\nint y=0;\nint n = unknown_int();\n\n\tassume(n>=1);\n\n\twhile(x < 2*n){\n\t   x = x + 1;\n\n\t   if ( x > n )\n\t\t  y = y - 1;\n\t   else\n\t\t  y = y + 2;\n\t}\n\n\tif(x < y)\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.0,
                "5": 0.0,
                "6": 0.0,
                "7": 0.0,
                "8": 0.0,
                "9": 0.0,
                "10": 0.0,
                "11": 0.0,
                "12": 0.0,
                "13": 0.0,
                "14": 0.0,
                "15": 0.0
            },
            "pass_at_k_prune": {
                "1": 0.0,
                "2": 0.0,
                "3": 0.0,
                "4": 0.1,
                "5": 0.1,
                "6": 0.1,
                "7": 0.2,
                "8": 0.3,
                "9": 0.4,
                "10": 0.4,
                "11": 0.4,
                "12": 0.7,
                "13": 0.7,
                "14": 0.8,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
            "pass_at_k": {
                "1": 0.3,
                "2": 0.7,
                "3": 0.7,
                "4": 0.8,
                "5": 0.8,
                "6": 0.9,
                "7": 0.9,
                "8": 0.9,
                "9": 0.9,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 0.3,
                "2": 0.7,
                "3": 0.8,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        },
        {
            "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-paper-prog_d-pepm-proc.c_VeriMAP_true.c",
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\nint y = unknown_uint();\nint x=0;\n\n    assume(y>=0);\n\n\twhile ( x < 10000) {\n\t\ty = y + 1;\n\t\tx = x + 1;\n\t}\n\n\tif( y + x < 10000)\t\t\n\t\tgoto ERROR;\n\n\treturn 0;\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\treturn -1;\n}",
            "pass_at_k": {
                "1": 0.1,
                "2": 0.1,
                "3": 0.1,
                "4": 0.2,
                "5": 0.2,
                "6": 0.4,
                "7": 0.4,
                "8": 0.4,
                "9": 0.4,
                "10": 0.5,
                "11": 0.5,
                "12": 0.6,
                "13": 0.8,
                "14": 0.9,
                "15": 1.0
            },
            "pass_at_k_prune": {
                "1": 1.0,
                "2": 1.0,
                "3": 1.0,
                "4": 1.0,
                "5": 1.0,
                "6": 1.0,
                "7": 1.0,
                "8": 1.0,
                "9": 1.0,
                "10": 1.0,
                "11": 1.0,
                "12": 1.0,
                "13": 1.0,
                "14": 1.0,
                "15": 1.0
            }
        }
    ]
}