{
    "logs": {
        "file": "../data/benchmarks/code2inv/52.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c == 4) ==> (unknown() == 0);\nloop invariant i3: c >= 0;\nloop invariant i4: c <= 4;\nloop invariant i5: \\forall int k; 0 <= k < \\at(c, LoopEntry) ==> (unknown() ==> (c != 4) ==> (c == k + 1));\nloop invariant i6: \\forall int k; 0 <= k < \\at(c, LoopEntry) ==> (!unknown() ==> (c == 4) ==> (c == 1));\nloop invariant i7: (unknown() ==> (c != 4));\nloop invariant i8: (!unknown() ==> (c == 4));\nloop invariant i9: (c != 4) ==> (c == \\old(c) + 1);\nloop invariant i10: (c == 4) ==> (c == 1);\nloop invariant i11: (c == 4) ==> (unknown() ==> (c == 1));\nloop invariant i12: (c != 4) ==> (unknown() ==> (c == c+1));\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (c != 4) ==> (c == \\old(c) + 1);\nloop invariant i3: (c == 4) ==> (c == 1);\nloop invariant i4: (c != 4) ==> (c == 0 || c == 1 || c == 2 || c == 3);\nloop invariant i5: (c == 4) ==> (c == 4);\nloop invariant i6: (c == 4) ==> (c != 0 && c != 1 && c != 2 && c != 3);\nloop invariant i7: (c == 4) ==> (unknown() ==> \\at(c, LoopCurrent) == 1);\nloop invariant i8: (c != 4) ==> (unknown() ==> \\at(c, LoopCurrent) == c + 1);\nloop invariant i9: (unknown() ==> c != 4) ==> c == \\old(c) + 1;\nloop invariant i10: (!unknown() ==> c == 4) ==> c == 1;\nloop invariant i11: \\forall int k; 0 <= k < \\at(c, LoopEntry) ==> (unknown() ==> (c != 4) ==> (c == k + 1));\nloop invariant i12: \\forall int k; 0 <= k < \\at(c, LoopEntry) ==> (!unknown() ==> (c == 4) ==> (c == 1));\nloop invariant i13: (unknown() ==> (c != 4));\nloop invariant i14: (!unknown() ==> (c == 4));\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > 4) )\n{;\n//@ assert( (c == 4) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c"
        ],
        "repair_success": [
            "../data/benchmarks/code2inv/15.c"
        ],
        "repair_failure": [
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 9,
        "gen_success_count": 24,
        "repair_success_count": 1,
        "repair_failure_count": 8,
        "gen_skipped_count": 0,
        "repair_skipped_count": 0
    }
}