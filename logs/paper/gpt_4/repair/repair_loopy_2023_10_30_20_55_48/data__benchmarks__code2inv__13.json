{
    "logs": {
        "file": "../data/benchmarks/code2inv/13.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 4;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= 4;\nloop invariant i5: 2 * ((x - (x % 2)) / 2) == x;\nloop invariant i6: 2 * ((y - (y % 2)) / 2) == y;\nloop invariant i7: (x % 2) == (y % 2);\nloop invariant i8: (x >= 4) ==> (y != 0);\nloop invariant i9: x % 2 == 0;\nloop invariant i10: y % 2 == 0;\nloop invariant i11: x <= 2 + 2 * (number_of_iterations);\nloop invariant i12: y <= 2 + 2 * (number_of_iterations);\nloop invariant i13: (x == 4) ==> (y > 0);\nloop invariant i14: x <= 2;\nloop invariant i15: y <= 2;\nloop invariant i16: x % 2 == \\at(x, Pre) % 2;\nloop invariant i17: y % 2 == \\at(y, Pre) % 2;\nloop invariant i18: x >= 0 && x <= 4;\nloop invariant i19: y >= 0 && y <= 4;\nloop invariant i20: (x % 2) == 0;\nloop invariant i21: (y % 2) == 0;\nloop invariant i22: (x <= 4);\nloop invariant i23: (y <= 4);\nloop invariant i24: (x != 4) ==> (y == 0);\nloop invariant i25: (x == 4) ==> (y != 0);\nloop invariant i26: (x != 4) ==> (x <= 2 && y <= 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 4;\nloop invariant i2: 0 <= y <= 4;\nloop invariant i3: x % 2 == 0;\nloop invariant i4: y % 2 == 0;\nloop invariant i5: (x == 4) ==> (y != 0);\nloop invariant i6: x >= 0;\nloop invariant i7: x <= 4;\nloop invariant i8: y >= 0;\nloop invariant i9: y <= 4;\nloop invariant i10: (x % 2) == (y % 2);\nloop invariant i11: (x >= 4) ==> (y != 0);\nloop invariant i12: x <= 2;\nloop invariant i13: y <= 2;\nloop invariant i14: x % 2 == \\at(x, Pre) % 2;\nloop invariant i15: y % 2 == \\at(y, Pre) % 2;\nloop invariant i16: (x % 2) == 0;\nloop invariant i17: (y % 2) == 0;\nloop invariant i18: (x != 4) ==> (x <= 2 && y <= 2);\nloop invariant i19: x <= 2 + 2 * (number_of_iterations);\nloop invariant i20: y <= 2 + 2 * (number_of_iterations);\nloop invariant i21: (x == 4) ==> (y > 0);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (x == 4) )\n{;\n//@ assert( (y != 0) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}