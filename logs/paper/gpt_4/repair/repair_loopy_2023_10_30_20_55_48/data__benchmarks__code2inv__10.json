{
    "logs": {
        "file": "../data/benchmarks/code2inv/10.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: (x % 2) == 0;\nloop invariant i2: (y % 2) == 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x <= 2 + 2 * k;\nloop invariant i6: y <= 2 + 2 * k;\nloop invariant i7: (x % 2 == 0) <==> (y % 2 == 0);\nloop invariant i8: (x % 2 == 1) <==> (y % 2 == 1);\nloop invariant i9: y <= x + 2;\nloop invariant i10: x <= 2 * \\loop_nest + \\old(x);\nloop invariant i11: y <= 2 * \\loop_nest + \\old(y);\nloop invariant i12: 0 <= x <= 2;\nloop invariant i13: 0 <= y <= 2;\nloop invariant i14: (x % 2) == (y % 2);\nloop invariant i15: x <= 4;\nloop invariant i16: y <= 4;\nloop invariant i17: (y == 0) ==> (x != 4);\nloop invariant i18: x % 2 == 0;\nloop invariant i19: y % 2 == 0;\nloop invariant i20: x >= 0 && x <= 4;\nloop invariant i21: y >= 0 && y <= 4;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 4;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= 4;\nloop invariant i5: (y == 0) ==> (x != 4);\nloop invariant i6: x >= 0 && x <= 4;\nloop invariant i7: y >= 0 && y <= 4;\nloop invariant i8: (x % 2) == (y % 2);\nloop invariant i9: x % 2 == 0;\nloop invariant i10: y % 2 == 0;\nloop invariant i11: 0 <= x <= 2;\nloop invariant i12: 0 <= y <= 2;\nloop invariant i13: (x % 2) == 0;\nloop invariant i14: (y % 2) == 0;\nloop invariant i15: x <= 2 + 2 * k;\nloop invariant i16: y <= 2 + 2 * k;\nloop invariant i17: 0 <= x <= 4;\nloop invariant i18: 0 <= y <= 4;\nloop invariant i19: (y % 2) == (x % 2);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}