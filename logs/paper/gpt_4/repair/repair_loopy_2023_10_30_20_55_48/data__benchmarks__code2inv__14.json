{
    "logs": {
        "file": "../data/benchmarks/code2inv/14.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: \\false;\nloop invariant i2: x >= 0 && x <= 4;\nloop invariant i3: y >= 0 && y <= 4;\nloop invariant i4: (x % 2) == (y % 2);\nloop invariant i5: 0 <= x <= 4;\nloop invariant i6: 0 <= y <= 4;\nloop invariant i7: x % 2 == 0;\nloop invariant i8: y % 2 == 0;\nloop invariant i9: x >= 0;\nloop invariant i10: x <= 4;\nloop invariant i11: y >= 0;\nloop invariant i12: y <= 4;\nloop invariant i13: (y == 0) ==> (x != 4);\nloop invariant i14: x <= (2 * (1 + \\loop_nest)) && x >= (2 * \\loop_nest);\nloop invariant i15: y <= (2 * (1 + \\loop_nest)) && y >= (2 * \\loop_nest);\nloop invariant i16: (x % 2) == 0;\nloop invariant i17: (y % 2) == 0;\nloop invariant i18: (x - y) % 2 == 0;\nloop invariant i19: x - y == \\at(x, Pre) - \\at(y, Pre);\nloop invariant i20: x % 2 == y % 2;\nloop invariant i21: x <= 2 + 4 * (x - 2) / 2;\nloop invariant i22: y <= 2 + 4 * (y - 2) / 2;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x % 2 == y % 2;\nloop invariant i4: x <= 2 + 4 * (x - 2) / 2;\nloop invariant i5: y <= 2 + 4 * (y - 2) / 2;\nloop invariant i6: x % 2 == 0;\nloop invariant i7: y % 2 == 0;\nloop invariant i8: x - y == \\at(x - y, LoopEntry);\nloop invariant i9: x <= y+2;\nloop invariant i10: y <= x+2;\nloop invariant i11: (x - y) % 2 == 0;\nloop invariant i12: (y - x) % 2 == 0;\nloop invariant i13: x - y == \\at(x, Pre) - \\at(y, Pre);\nloop invariant i14: x >= 0 && x <= 4;\nloop invariant i15: y >= 0 && y <= 4;\nloop invariant i16: (x % 2) == (y % 2);\nloop invariant i17: (x % 2) == 0;\nloop invariant i18: (y % 2) == 0;\nloop invariant i19: x <= 2 * y;\nloop invariant i20: y <= 2;\nloop invariant i21: (y == 0) ==> (x <= 2);\nloop invariant i22: x <= 4;\nloop invariant i23: y <= 4;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}