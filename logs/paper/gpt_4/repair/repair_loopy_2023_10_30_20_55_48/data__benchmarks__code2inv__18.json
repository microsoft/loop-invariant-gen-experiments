{
    "logs": {
        "file": "../data/benchmarks/code2inv/18.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 1 <= x && x <= n + 1;\nloop invariant i2: 1 <= m && m <= x;\nloop invariant i3: (x == n + 1) ==> (m >= 1);\nloop invariant i4: 1 <= x;\nloop invariant i5: 1 <= m;\nloop invariant i6: x <= n+1;\nloop invariant i7: m <= x;\nloop invariant i8: x >= 1;\nloop invariant i9: x <= n;\nloop invariant i10: m >= 1;\nloop invariant i11: (n <= 1) || (m >= 1);\nloop invariant i12: \\forall integer k; 1 <= k && k < m ==> (unknown() == 0);\nloop invariant i13: 1 <= x && x <= n;\nloop invariant i14: n != 0 ==> x < n;\nloop invariant i15: 1 <= m <= x;\nloop invariant i16: x <= n ==> m <= n;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int x = 1;\n    int m = 1;\n    int n;\n\n    /*@\nloop invariant i1: 1 <= x;\nloop invariant i2: 1 <= m;\nloop invariant i3: m <= x;\nloop invariant i4: x >= 1;\nloop invariant i5: m >= 1;\nloop invariant i6: x <= n+1;\nloop invariant i7: 1 <= m <= x;\nloop invariant i8: x <= n ==> m <= n;\nloop invariant i9: 1 <= x && x <= n + 1;\nloop invariant i10: 1 <= m && m <= x;\nloop invariant i11: (x == n + 1) ==> (m >= 1);\nloop invariant i12: x <= n + 1;\n*/\nwhile (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c"
        ],
        "repair_success": [
            "../data/benchmarks/code2inv/15.c"
        ],
        "repair_failure": [
            "../data/benchmarks/code2inv/17.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 2,
        "gen_success_count": 15,
        "repair_success_count": 1,
        "repair_failure_count": 1,
        "gen_skipped_count": 0,
        "repair_skipped_count": 0
    }
}