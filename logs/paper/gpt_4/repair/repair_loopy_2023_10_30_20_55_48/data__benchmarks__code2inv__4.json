{
    "logs": {
        "file": "../data/benchmarks/code2inv/4.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    while(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 500;\nloop invariant i2: \\forall integer i; 0 <= i < x ==> (z <= y);\nloop invariant i3: x < 500 ==> z <= y;\nloop invariant i4: (x == 0) ==> (y == \\old(y) && z == \\old(z));\nloop invariant i5: (x > 0) ==> (z >= y);\nloop invariant i6: \\forall integer k; 0 <= k < x ==> y <= z;\nloop invariant i7: z <= y ==> y_min <= z <= y_max;\nloop invariant i8: z > y ==> y_min <= y <= y_max;\nloop invariant i9: \\forall integer k; 0 <= k < x ==> (z <= y || z > y);\nloop invariant i10: \\forall integer k; 0 <= k < x ==> (z <= y);\nloop invariant i11: z <= y ==> y >= z;\n*/\nwhile(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= 500;\nloop invariant i2: \\forall integer i; 0 <= i < x ==> (z <= y);\nloop invariant i3: x <= 500 ==> \\forall integer k; 0 <= k < x ==> z <= y;\nloop invariant i4: x >= 500 ==> z >= y;\nloop invariant i5: (x > 0) ==> (y <= z);\nloop invariant i6: \\forall integer k; 0 <= k < x ==> (z <= y);\nloop invariant i7: z <= y ==> y_min <= z <= y_max;\nloop invariant i8: z > y ==> y_min <= y <= y_max;\nloop invariant i9: z <= y ==> y == z;\nloop invariant i10: x >= \\old(x);\nloop invariant i11: y <= \\max(\\at(y, Pre), z);\nloop invariant i12: z <= y ==> y >= z;\n*/\nwhile(x < 500) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    {;\n//@ assert(z >= y);\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}