{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  /*@\nloop invariant i1: 0 <= glob3_dc <= MAXPATHLEN;\nloop invariant i2: glob3_pathend_off == 0;\nloop invariant i3: glob3_pathlim_off == MAXPATHLEN;\nloop invariant i4: glob3_dc + glob3_pathend_off < glob3_pathlim_off;\nloop invariant i5: glob3_dc <= glob3_pathlim_off - glob3_pathend_off;\nloop invariant i6: glob3_pathbuf_off == 0;\nloop invariant i7: glob3_pattern_off == 0;\nloop invariant i8: 0 <= glob3_dc <= MAXPATHLEN + 1;\nloop invariant i9: glob3_dc == 0 ==> glob3_pathend_off + glob3_dc < glob3_pathlim_off;\nloop invariant i10: glob3_dc >= 0;\nloop invariant i11: glob3_dc <= MAXPATHLEN;\nloop invariant i12: glob3_pathend_off == buf_off;\nloop invariant i13: glob3_pathlim_off == bound_off;\nloop invariant i14: glob3_pathbuf_off == buf_off;\nloop invariant i15: glob3_pattern_off == pattern_off;\nloop invariant i16: 0 <= glob3_dc + glob3_pathend_off <= MAXPATHLEN;\nloop invariant i17: glob3_dc == glob3_pathend_off;\nloop invariant i18: glob3_pathend_off >= 0;\nloop invariant i19: glob3_pathend_off <= MAXPATHLEN;\n*/\nfor (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\nint unknown(){\n    int x; return x;\n}\n\nint main()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  /*@\nloop invariant i1: 0 <= glob3_dc <= MAXPATHLEN + 1;\nloop invariant i2: glob3_pathend_off + glob3_dc <= glob3_pathlim_off;\nloop invariant i3: glob3_pathlim_off == bound_off;\nloop invariant i4: 0 <= glob3_dc <= MAXPATHLEN;\nloop invariant i5: 0 <= glob3_pathend_off <= MAXPATHLEN;\nloop invariant i6: glob3_pathend_off + glob3_dc <= MAXPATHLEN;\nloop invariant i7: glob3_pathlim_off == MAXPATHLEN;\nloop invariant i8: glob3_pathbuf_off == 0;\nloop invariant i9: glob3_pattern_off == 0;\nloop invariant i10: glob3_pathend_off == 0;\nloop invariant i11: glob3_dc == 0 ==> glob3_pathend_off + glob3_dc < glob3_pathlim_off;\nloop invariant i12: glob3_dc + glob3_pathend_off <= glob3_pathlim_off;\nloop invariant i13: glob3_dc <= glob3_pathlim_off - glob3_pathend_off;\nloop invariant i14: glob3_dc >= 0;\nloop invariant i15: glob3_dc <= MAXPATHLEN;\nloop invariant i16: glob3_pathend_off == buf_off;\nloop invariant i17: glob3_pathbuf_off == buf_off;\nloop invariant i18: glob3_pattern_off == pattern_off;\nloop invariant i19: glob3_pathlim_off == 0 + (MAXPATHLEN + 1) - 1;\nloop invariant i20: glob3_pathend_off + glob3_dc < glob3_pathlim_off ==> glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1;\nloop invariant i21: glob3_dc >= 0 ==> glob3_pathend_off + glob3_dc < glob3_pathlim_off;\nloop invariant i22: glob3_dc + glob3_pathend_off < glob3_pathlim_off;\n*/\nfor (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      if(glob3_dc <= -1 || glob3_dc >= MAXPATHLEN + 1)\n      {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n      if (unknown()) goto END;\n    }\n END:  return 0;\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 1,
        "gen_success_count": 3,
        "repair_success_count": 0,
        "repair_failure_count": 1,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}