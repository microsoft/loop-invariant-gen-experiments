{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  while (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; //@ assert(\\false);\n};\n}\n",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x <= N+1 ==> y == x;\nloop invariant i4: x > N+1 ==> y == 2*(N+1) - x;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= -1;\nloop invariant i7: x <= 2 * N + 2 ==> y >= 0;\nloop invariant i8: x <= N ==> y == x;\nloop invariant i9: x > N+1 ==> y == (2 * N + 2 - x);\nloop invariant i10: 0 <= N;\nloop invariant i11: y <= x;\nloop invariant i12: x >= N+1 ==> y == 2 * N + 2 - x;\nloop invariant i13: x >= N+1 ==> y == 2*(N+1) - x;\nloop invariant i14: y >= 0;\nloop invariant i15: x >= N + 1 ==> y == 2 * N + 1 - x;\nloop invariant i16: (x <= N) ==> (y >= 0);\nloop invariant i17: (x >= N+1) ==> (y <= x - (N+1));\nloop invariant i18: y == x - (N+1) || y == x;\nloop invariant i19: 0 <= x <= 2 * N + 3;\nloop invariant i20: x <= N ==> y == x + 1;\nloop invariant i21: N < x <= 2 * N + 2 ==> y == 2 * N - x + 3;\nloop invariant i22: x <= N + y + 1;\nloop invariant i23: x >= y;\nloop invariant i24: (y == -1) ==> (x >= 2 * N + 3);\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; //@ assert(\\false);\n};\n}\n",
            "#define assume(e) if(!(e)) return 0;\n\nint main(){\n\n  int x = 0;\n  int y = 0;\n  int N;\n\n  if(N < 0)\n    return 1;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: x <= N + 1;\nloop invariant i4: x <= N ==> y == x;\nloop invariant i5: x >= N + 1 ==> y == 2 * N - x + 2;\nloop invariant i6: 0 <= x <= 2 * N + 3;\nloop invariant i7: x <= N ==> y == x + 1;\nloop invariant i8: N < x <= 2 * N + 2 ==> y == 2 * N - x + 3;\nloop invariant i9: x <= N+1 ==> y == x;\nloop invariant i10: x > N+1 ==> y == 2*(N+1) - x;\nloop invariant i11: 0 <= N;\nloop invariant i12: y >= -1;\nloop invariant i13: y <= x;\nloop invariant i14: x >= N+1 ==> y == 2 * N + 2 - x;\nloop invariant i15: x >= 0;\nloop invariant i16: (x <= N) ==> (y >= 0);\nloop invariant i17: (x >= N+1) ==> (y <= x - (N+1));\nloop invariant i18: y == x - (N+1) || y == x;\nloop invariant i19: x <= y + 1;\nloop invariant i20: (y < 0) ==> (x >= 2 * N + 3);\nloop invariant i21: y >= 0;\nloop invariant i22: x >= N + 1 ==> y == 2 * N + 1 - x;\nloop invariant i23: x <= 2 * N + 3;\nloop invariant i24: y <= N + 1;\nloop invariant i25: x >= y;\nloop invariant i26: x - y <= N + 1;\n*/\nwhile (1){\n     if (x <= N)\n        y++;\n     else if(x >= N+1)\n       y--;\n     else return 1;\n\n     if ( y < 0)\n       break;\n     x++;\n  }\n\n  if(N >= 0)\n    if(y == -1)\n      if (x >= 2 * N + 3)\n        goto ERROR;\n\n  return 1;\nERROR:{; //@ assert(\\false);\n};\n}\n"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 2,
        "gen_success_count": 5,
        "repair_success_count": 0,
        "repair_failure_count": 2,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}