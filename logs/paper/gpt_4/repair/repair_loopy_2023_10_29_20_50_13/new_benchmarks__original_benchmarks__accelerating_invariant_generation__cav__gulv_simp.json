{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: y <= 100 * x;\nloop invariant i4: x <= \\at(x, LoopEntry) + 1;\nloop invariant i5: (x >= 4) ==> (y >= \\at(y, LoopEntry) + 1);\nloop invariant i6: (y >= 100 * x) ==> (x < 4);\nloop invariant i7: (x >= 4) ==> (y >= x);\nloop invariant i8: \\false;\nloop invariant i9: y <= x * 100;\nloop invariant i10: (x < 4) ==> (y <= x * 100);\nloop invariant i11: (x >= 4) ==> (y >= x - 3);\nloop invariant i12: x >= 0;\nloop invariant i13: y >= 0;\nloop invariant i14: x >= 4 ==> y >= 400;\nloop invariant i15: x < 4 ==> y <= 300;\nloop invariant i16: y >= 100 * x;\nloop invariant i17: x >= 0 && y >= 0;\nloop invariant i18: (y >= 100 * x && y <= 100 * x + 99 * (x - 4)) ==> x < 4;\nloop invariant i19: (y >= x && y <= x + 100) ==> x >= 4;\nloop invariant i20: y >= x * 100;\nloop invariant i21: y <= x * 100 + x;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main(){\nint x = 0, y = 0;\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: y <= x * 100;\nloop invariant i4: (x < 4) ==> (y <= x * 100);\nloop invariant i5: (x >= 4) ==> (y >= x - 3);\nloop invariant i6: y <= 100 * x;\nloop invariant i7: x < 4 ==> y >= 100 * x;\nloop invariant i8: x <= y / 100;\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 0;\nloop invariant i11: y >= 100 * (x >= 4 ? x - 4 : 0);\nloop invariant i12: x >= 0 && y >= 0;\nloop invariant i13: (y >= 100 * x && y <= 100 * x + 99 * (x - 4)) ==> x < 4;\nloop invariant i14: (y >= x && y <= x + 100) ==> x >= 4;\nloop invariant i15: x >= 4 ==> y >= 400;\nloop invariant i16: x < 4 ==> y <= 300;\nloop invariant i17: y >= 100 * x;\nloop invariant i18: x <= \\at(x, LoopEntry) + 1;\nloop invariant i19: (x >= 4) ==> (y >= \\at(y, LoopEntry) + 1);\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n \n   x = x; \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 2,
        "gen_success_count": 5,
        "repair_success_count": 0,
        "repair_failure_count": 2,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}