{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: m <= x;\nloop invariant i4: (n >= 1 && (m <= -1 || m >= n)) ==> (x < n);\nloop invariant i5: 0 <= x && x <= n;\nloop invariant i6: 0 <= m && m <= x;\nloop invariant i7: 0 <= m;\nloop invariant i8: x <= n ==> (m <= -1 || m >= n) || n == 0;\nloop invariant i9: 0 <= x <= n;\nloop invariant i10: 0 <= m <= x;\nloop invariant i11: x == n ==> m <= n - 1;\nloop invariant i12: x == 0 || (unknown1() ==> (m == x));\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n\n}",
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2();\nint unknown3();\nint unknown4();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: m <= x;\nloop invariant i4: (n >= 1 && (m <= -1 || m >= n)) ==> (x < n);\nloop invariant i5: 0 <= m;\nloop invariant i6: m <= n - 1;\nloop invariant i7: 0 <= x <= n;\nloop invariant i8: x == 0 || (unknown1() ==> (m == x));\nloop invariant i9: m == 0 || m >= 1;\nloop invariant i10: 0 <= x && x <= n;\nloop invariant i11: 0 <= m && m <= x;\nloop invariant i12: x <= n ==> (m <= -1 || m >= n) || n == 0;\n*/\nwhile(x<=n-1) {\n     if(unknown1()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(x < n)\n    return;\n  if(n>=1 && (m <= -1 || m >= n))\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 1,
        "gen_success_count": 3,
        "repair_success_count": 0,
        "repair_failure_count": 1,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}