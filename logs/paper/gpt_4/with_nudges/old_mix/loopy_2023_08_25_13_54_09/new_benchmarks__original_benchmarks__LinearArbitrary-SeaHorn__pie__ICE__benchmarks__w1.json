{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "completions": [
            {
                "invariants": "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= n;\n  loop invariant n <= INT_MAX;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: n <= INT_MAX;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Annotation error on line 15: unbound logic variable INT_MAX. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: n >= 0;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant x == \\at(x, Pre) + \\at(\\loop_count, Pre);\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: x == \\at(x, Pre) + \\at(\\loop_count, Pre);\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Annotation error on line 15: unbound logic variable x. Ignoring loop annotation",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "//@\nloop invariant 0 <= x;\nloop invariant x <= n;",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == n: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \twhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given C program:\n\n1. Pre-conditions or variable assignments: `n` is assigned an unknown integer value, and `x` is initialized to 0.\n2. Loop condition: The loop continues to run as long as `x < n`.\n3. Post-condition: After the loop terminates, we want to assert that `x == n`.\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution: `x` is initialized to 0, and `n` is an unknown integer value.\n2. In every iteration of the loop: `x` increases by 1.\n3. After the loop termination: We want to prove that `x == n`.\n\nThe loop invariants are:\n\n```\n/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= n;\n  loop invariant n <= INT_MAX;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. `n` is initialized with an unknown value.\n2. The program returns if `n` is negative.\n3. `x` is initialized to 0.\n4. The loop condition is `x < n`, and in every iteration, `x` is incremented by 1.\n5. The post-condition is `x == n`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `x` is 0 and `n` is non-negative (due to the return statement if `n` is negative).\n2. In every iteration of the loop, `x` is incremented by 1, and `x` is always less than `n`.\n3. After the loop termination, `x` must be equal to `n`.\n\nTaking all these points into consideration, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `n` is assigned a value from the `unknown_int()` function.\n2. If `n` is negative, the program returns, so we can assume `n >= 0` within the loop.\n3. `x` is initialized to 0 before the loop.\n\nNext, let's analyze the loop condition and loop body:\n\n1. The loop condition is `x < n`.\n2. In the loop body, `x` is incremented by 1.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `x` is 0.\n2. In every iteration of the loop, `x` is incremented by 1, so `x` is always non-negative.\n3. After the loop termination, `x` must be equal to `n`.\n\nConsidering the above points, the loop invariants are:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions, assignments, and loop condition:\n\n1. `int n = unknown_int();`\n2. `int x = 0;`\n3. Loop condition: `x < n`\n\nNow, let's find the loop invariants that hold (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\nThe loop invariants for this program are:\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program:\n\n1. Pre-conditions or variable assignments in the program:\n   - n is assigned an unknown integer value.\n   - x is initialized to 0.\n\n2. Loop condition:\n   - The loop continues while x is less than n.\n\n3. Post-condition:\n   - x is equal to n after the loop terminates.\n\nNow, let's find the loop invariants:\n\ni) True before the loop execution:\n   - x is initialized to 0.\n\nii) True in every iteration of the loop:\n   - x is increasing by 1 in each iteration.\n   - x is always less than or equal to n.\n\niii) True after the loop termination:\n   - x is equal to n.\n\nBased on the above analysis, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. n is assigned an unknown integer value.\n2. x is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is x < n.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (x == n):\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is a non-negative integer (n >= 0) since it returns if n < 0.\n- x is initialized to 0 (x = 0).\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x < n).\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (x == n).\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n1. `int n = unknown_int();`\n2. `int x = 0;`\n\nLoop condition:\n`x < n`\n\nNow, let's find the loop invariants for the while loop:\n\n1. Before the loop execution, `x = 0`.\n2. In every iteration of the loop, `x` increases by 1.\n3. After the loop termination, `x = n` (as indicated by the assertion).\n\nLoop invariants:\n\n```\n@{\n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant x == \\at(x, Pre) + \\at(\\loop_count, Pre);\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- n is assigned an unknown integer value.\n- x is initialized to 0.\n\nNow, let's analyze the loop condition and body:\n\n- Loop condition: x < n\n- Loop body: x = x + 1\n\nBased on these, we can find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n//@\nloop invariant 0 <= x;\nloop invariant x <= n;\n```\n\nThese loop invariants are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition (x == n)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. n is assigned an unknown integer value.\n2. x is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n\n- Loop condition: x < n\n- Loop body: x = x + 1\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= n;\n  loop invariant n <= INT_MAX;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "@{\n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant x == \\at(x, Pre) + \\at(\\loop_count, Pre);\n}",
            "//@\nloop invariant 0 <= x;\nloop invariant x <= n;",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\nloop invariant i3: n <= INT_MAX;\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= n;\nloop invariant i6: n >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= n;\nloop invariant i9: 0 <= x;\nloop invariant i10: x <= n;\nloop invariant i11: 0 <= x;\nloop invariant i12: x <= n;\nloop invariant i13: 0 <= x;\nloop invariant i14: x <= n;\nloop invariant i15: 0 <= x;\nloop invariant i16: x <= n;\nloop invariant i17: 0 <= x;\nloop invariant i18: x <= n;\nloop invariant i19: x == \\at(x, Pre) + \\at(\\loop_count, Pre);\nloop invariant i20: 0 <= x;\nloop invariant i21: x <= n;\nloop invariant i22: 0 <= x;\nloop invariant i23: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 15: unbound logic variable INT_MAX. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\tint n = unknown_int();\n\tif(n < 0)\n\t  return;\n\n\tint x = 0;\n\n \t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= n;\n\nloop invariant i4: 0 <= x;\nloop invariant i5: x <= n;\nloop invariant i6: n >= 0;\nloop invariant i7: x >= 0;\nloop invariant i8: x <= n;\nloop invariant i9: 0 <= x;\nloop invariant i10: x <= n;\nloop invariant i11: 0 <= x;\nloop invariant i12: x <= n;\nloop invariant i13: 0 <= x;\nloop invariant i14: x <= n;\nloop invariant i15: 0 <= x;\nloop invariant i16: x <= n;\nloop invariant i17: 0 <= x;\nloop invariant i18: x <= n;\n\nloop invariant i20: 0 <= x;\nloop invariant i21: x <= n;\nloop invariant i22: 0 <= x;\nloop invariant i23: x <= n;\n*/\nwhile (x < n) {\n\n\t\tx = x + 1;\n\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nAssertion x == n: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            103,
            104,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            122,
            126,
            127,
            128,
            129,
            130,
            131,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            169,
            171,
            172,
            173,
            175,
            177,
            178,
            179,
            180,
            181,
            182,
            185,
            186,
            187,
            190,
            192,
            195,
            196,
            197,
            198,
            200,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            216,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            229,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            245,
            246,
            247,
            248,
            249,
            250
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            102,
            105,
            106,
            120,
            121,
            123,
            124,
            125,
            132,
            133,
            134,
            137,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            170,
            174,
            176,
            183,
            184,
            188,
            189,
            191,
            193,
            194,
            199,
            201,
            217,
            218,
            227,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            244
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 247,
        "success_rate": 0.6437246963562753
    }
}