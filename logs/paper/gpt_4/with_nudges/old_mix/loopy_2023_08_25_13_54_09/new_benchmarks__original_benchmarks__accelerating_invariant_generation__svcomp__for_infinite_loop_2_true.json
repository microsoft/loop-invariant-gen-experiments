{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/for_infinite_loop_2_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n  loop invariant i >= 0;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= i;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: x == 0;\nloop invariant i2: i >= 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `int i=0, x=0, y=0;`\n- `int n=unknown_int();`\n- `assume(n>0);`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `1`, which means it is an infinite loop.\n- Inside the loop body, there is an assertion `//@ assert(x==0);`\n\nNow, let's output the loop invariants for the loop:\n\n```\n/*@ \n  loop invariant i >= 0;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Variable initializations: `i=0`, `x=0`, `y=0`.\n2. `n` is assigned an unknown integer value, and we have a pre-condition `assume(n>0)`.\n3. The loop has no exit condition, so it will run indefinitely.\n\nNow, let's find the loop invariants for the while loop:\n\nSince the loop will run indefinitely, it's not possible to have an invariant that is true after the loop termination. However, we can write invariants that are true before the loop execution and in every iteration of the loop.\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```\n\nThese loop invariants hold true before the loop starts and during every iteration of the loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- i = 0\n- x = 0\n- y = 0\n- n > 0 (assume statement)\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop is an infinite loop (`1` as the loop condition). It will only terminate if there is a break or return statement inside the loop.\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution (as i, x, and y are initialized to 0),\n(ii) in every iteration of the loop (since x and y are not modified within the loop, and i is incremented by 1 each iteration), and\n(iii) after the loop termination (if the loop were to terminate, which it currently does not, due to the infinite loop condition)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions/variable assignments:\n1. int i=0, x=0, y=0;\n2. int n=unknown_int();\n3. assume(n>0);\n\nLoop condition: The loop runs indefinitely (1).\n\nNow, let's find the loop invariants:\n\n1. The value of i increases in every iteration.\n2. The value of x remains 0 throughout the loop.\n3. The value of y remains 0 throughout the loop.\n\nConsidering these observations, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. The variables `i`, `x`, and `y` are initialized to 0.\n2. The variable `n` is assigned an unknown integer value.\n3. The `assume` statement ensures that `n > 0`.\n4. The loop runs indefinitely with the condition `1`.\n5. Inside the loop, there is an assertion that `x == 0`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: `i == 0`, `x == 0`, and `y == 0`.\n2. In every iteration of the loop: `i` is incremented by 1, but `x` and `y` remain 0.\n3. After the loop termination: The loop does not terminate, so we don't need to consider this case.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```\nThese loop invariants are true before the loop execution, in every iteration of the loop, and imply the post-condition `x == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code:\n\n1. Pre-conditions or variable assignments in the program:\n\n```\nint i=0, x=0, y=0;\nint n=unknown_int();\nassume(n>0);\n```\n\n2. Loop condition and body:\n\n```\nfor(i=0; 1; i++)\n{\n  {;//@ assert(x==0);\n}\n}\n```\n\n3. Post-condition:\n\n```\n{;//@ assert(x!=0);\n}\n```\n\nNow, let's find the necessary loop invariants for the while loop:\n\n1. Loop invariants true before the loop execution:\n  - i, x, and y are initialized to 0.\n  - n is initialized with an unknown integer greater than 0.\n\n2. Loop invariants true in every iteration of the loop:\n  - x remains 0 during the loop.\n  - i is incremented by 1 in each iteration.\n  - y remains 0 during the loop.\n\n3. Loop invariants true after the loop termination:\n  - Loop does not terminate in this case, as the loop condition is always true (1).\n\nBased on the above analysis, the following loop invariants can be written:\n\n```\n/*@ \n  loop invariant 0 <= i;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program.\n\nPre-conditions or variable assignments:\n1. i, x, and y are initialized to 0.\n2. n is assigned a non-deterministic integer value using unknown_int() function.\n3. n is assumed to be greater than 0.\n\nLoop condition:\n- The loop has no exit condition; it is an infinite loop.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, i, x, and y are all 0.\n2. In every iteration of the loop, x remains 0 and i keeps increasing.\n3. After the loop termination, this case is not applicable as the loop does not terminate.\n\nConsidering the above points, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `int i = 0, x = 0, y = 0;`\n2. `int n = unknown_int();`\n3. `assume(n > 0);`\n\nNow, let's analyze the loop body and note the loop condition:\n\n- The loop condition is `1`, which means the loop will run indefinitely.\n- Inside the loop, there is an assertion `assert(x == 0);`. This implies that x remains 0 throughout the loop iterations.\n\nFinally, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination (although the loop never terminates). The loop invariants imply the post-condition `x == 0`, which is given in the loop body as an assertion."
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program step by step:\n\n1. Variables and their initial values:\n   i = 0, x = 0, y = 0, and n is assigned a non-deterministic value.\n\n2. Pre-conditions:\n   n > 0\n\n3. Loop condition:\n   The loop runs infinitely with the condition \"1\", so we cannot use the loop condition to derive any loop invariants.\n\n4. Loop body:\n   The loop body contains an assertion that x == 0. This assertion must hold true for every iteration of the loop.\n\nNow, let's determine the loop invariants:\n\nThe loop invariants should be true before the loop execution, in every iteration of the loop, and after the loop termination. However, as the loop runs infinitely, we cannot determine the loop invariants for after the loop termination.\n\nLoop invariants for the given program are:\n\n```\n/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and as the loop runs infinitely, we don't need to consider after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. i, x, and y are initialized to 0.\n2. n is assigned an unknown integer value.\n3. It is assumed that n > 0.\n\nNow, let's analyze the loop body and the loop condition:\n\n1. The loop condition is always true (1), making it an infinite loop.\n2. In the loop body, there is an assertion that x == 0.\n\nGiven this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n  loop invariant i >= 0;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/",
            "/*@ \n  loop invariant 0 <= i;\n  loop invariant x == 0;\n  loop invariant y == 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n */",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n    loop invariant i >= 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x == 0;\n    loop invariant y == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x == 0;\nloop invariant i3: y == 0;\nloop invariant i4: i >= 0;\nloop invariant i5: x == 0;\nloop invariant i6: y == 0;\nloop invariant i7: i >= 0;\nloop invariant i8: x == 0;\nloop invariant i9: y == 0;\nloop invariant i10: i >= 0;\nloop invariant i11: x == 0;\nloop invariant i12: y == 0;\nloop invariant i13: i >= 0;\nloop invariant i14: x == 0;\nloop invariant i15: y == 0;\nloop invariant i16: 0 <= i;\nloop invariant i17: x == 0;\nloop invariant i18: y == 0;\nloop invariant i19: i >= 0;\nloop invariant i20: x == 0;\nloop invariant i21: y == 0;\nloop invariant i22: i >= 0;\nloop invariant i23: x == 0;\nloop invariant i24: x == 0;\nloop invariant i25: i >= 0;\nloop invariant i26: i >= 0;\nloop invariant i27: x == 0;\nloop invariant i28: y == 0;\n*/\nfor(i=0; 1; i++)\n  {\n    {;//@ assert(x==0);\n}\n  }\n  {;//@ assert(x!=0);\n}\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nAssertion x == 0: Valid\nAssertion x != 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74
        ],
        "skipped": [],
        "total": 77,
        "success_rate": 0.6363636363636364
    }
}