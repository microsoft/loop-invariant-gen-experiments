{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/w2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \twhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant input != 0 ==> x == n;\n    loop invariant input == 0 || x < n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\nloop invariant input != 0 ==> x == n;\nloop invariant input == 0 || x < n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= n on line 15: Partially proven\nInvariant input != 0 ==> x == n on line 16: Unknown\nInvariant input == 0 || x < n on line 17: Unknown\nPost-condition x == n on line 29: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= n on line 15: Valid\nPost-condition x == n on line 29: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= x <= n;\n    loop invariant input == 0 ==> x < n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\nloop invariant input == 0 ==> x < n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= n on line 15: Valid\nInvariant input == 0 ==> x < n on line 16: Valid\nPost-condition x == n on line 28: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\nloop invariant input == 0 ==> x < n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= n on line 15: Valid\nInvariant input == 0 ==> x < n on line 16: Valid\nPost-condition x == n on line 28: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x && x <= n;\n    loop invariant input != 0 ==> x < n;\n    loop invariant input == 0 ==> x == n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x && x <= n;\nloop invariant input != 0 ==> x < n;\nloop invariant input == 0 ==> x == n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= n on line 15: Partially proven\nInvariant input != 0 ==> x < n on line 16: Unknown\nInvariant input == 0 ==> x == n on line 17: Unknown\nPost-condition x == n on line 29: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x && x <= n;\n\n\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "Invariant 0 <= x <= n on line 15: Valid\nPost-condition x == n on line 29: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n > 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant n > 0;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x on line 15: Valid\nInvariant x <= n on line 16: Valid\nInvariant n > 0 on line 17: Valid\nPost-condition x == n on line 29: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant n > 0;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 15: Valid\nInvariant x <= n on line 16: Valid\nInvariant n > 0 on line 17: Valid\nPost-condition x == n on line 29: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x on line 15: Valid\nInvariant x <= n on line 16: Valid\nPost-condition x == n on line 28: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x;\nloop invariant x <= n;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
                "checker_message_after_prune": "Invariant 0 <= x on line 15: Valid\nInvariant x <= n on line 16: Valid\nPost-condition x == n on line 28: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \twhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- n is a non-deterministic integer\n- If n is less than or equal to 0, the program returns\n- x is initially 0\n- input is a non-deterministic integer\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (0 == 0), which is always true, making it an infinite loop with a break statement inside.\n- If input is non-zero, x is incremented by 1 and the loop breaks when x >= n.\n- input is assigned a new non-deterministic integer value in each iteration.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant input != 0 ==> x == n;\n    loop invariant input == 0 || x < n;\n*/\n```\n\nThese loop invariants can be used to help Frama-C verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "Let's first analyze the given program.\n\nPre-conditions and variable assignments:\n1. n is assigned an unknown integer value.\n2. x is initialized to 0.\n3. input is assigned an unknown integer value.\n\nLoop condition:\nThere is a while loop with the condition `0 == 0`, which is an infinite loop that can only be terminated by the `break` statement inside the loop.\n\nLoop body:\n1. If input is non-zero, x is incremented by 1.\n2. If x is greater than or equal to n, the loop breaks.\n3. input is assigned an unknown integer value.\n\nNow, let's derive the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= x <= n;\n    loop invariant input == 0 ==> x < n;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- n is assigned an unknown integer value.\n- If n is less than or equal to 0, the program returns.\n- x is initialized to 0.\n- input is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (0 == 0), which is always true, so this is an infinite loop with a break statement.\n- Inside the loop, if input is non-zero, x is incremented by 1.\n- If x >= n, the loop breaks.\n- input is assigned a new unknown integer value in every iteration.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x && x <= n;\n    loop invariant input != 0 ==> x < n;\n    loop invariant input == 0 ==> x == n;\n*/\n```\nHere, we have three loop invariants:\n\n1. x is always between 0 and n (inclusive) throughout the loop.\n2. If input is non-zero, x is always less than n.\n3. If input is zero, x is always equal to n.\n\nThese loop invariants imply the post-condition: x == n."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n is a non-negative integer (n > 0)\n- x is initialized to 0\n- input is a non-deterministic integer\n\nNow, let's analyze the loop body and note the loop condition:\n- The loop condition is always true (0 == 0)\n\nWe can now output the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n > 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `n` is assigned an unknown integer value.\n2. The function returns if `n <= 0`.\n3. `x` is initialized to 0.\n4. `input` is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: `0 == 0` (infinite loop with a break condition inside).\n2. If `input` is non-zero, then `x` is incremented by 1, and if `x >= n`, the loop breaks.\n3. `input` is assigned an unknown integer value in each iteration.\n\nBased on this information, we can output the loop invariants for the loop:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant input != 0 ==> x == n;\n    loop invariant input == 0 || x < n;\n*/",
            "/*@\n    loop invariant 0 <= x <= n;\n    loop invariant input == 0 ==> x < n;\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= n;\n    loop invariant input != 0 ==> x < n;\n    loop invariant input == 0 ==> x == n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n > 0;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\nloop invariant input != 0 ==> x == n;\nloop invariant input == 0 || x < n;\nloop invariant input == 0 ==> x < n;\nloop invariant 0 <= x && x <= n;\nloop invariant input != 0 ==> x < n;\nloop invariant input == 0 ==> x == n;\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant n > 0;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= x <= n on line 15: Partially proven\nInvariant input != 0 ==> x == n on line 16: Unknown\nInvariant input == 0 || x < n on line 17: Partially proven\nInvariant input == 0 ==> x < n on line 18: Partially proven\nInvariant 0 <= x <= n on line 19: Partially proven\nInvariant input != 0 ==> x < n on line 20: Partially proven\nInvariant input == 0 ==> x == n on line 21: Unknown\nInvariant 0 <= x on line 22: Partially proven\nInvariant x <= n on line 23: Partially proven\nInvariant n > 0 on line 24: Partially proven\nPost-condition x == n on line 36: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nvoid main() {\n\n\tint n = unknown_int();\n\tif (n <= 0)\n\t\treturn;\n\n\tint x = 0;\n\tint input = unknown_int();\n\n \t/*@\nloop invariant 0 <= x <= n;\n\nloop invariant input == 0 || x < n;\nloop invariant input == 0 ==> x < n;\nloop invariant 0 <= x && x <= n;\nloop invariant input != 0 ==> x < n;\n\nloop invariant 0 <= x;\nloop invariant x <= n;\nloop invariant n > 0;\n*/\nwhile ( 0 == 0 ) {\n\t\tif ( input ) {\n\n\t\t\tx = x + 1;\n\t\t\tif (x >= n ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tinput = unknown_int();\n\t}\n\t{;//@ assert(x == n);\n}\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant 0 <= x <= n on line 15: Valid\nInvariant input == 0 || x < n on line 17: Valid\nInvariant input == 0 ==> x < n on line 18: Valid\nInvariant 0 <= x <= n on line 19: Valid\nInvariant input != 0 ==> x < n on line 20: Valid\nInvariant 0 <= x on line 22: Valid\nInvariant x <= n on line 23: Valid\nInvariant n > 0 on line 24: Valid\nPost-condition x == n on line 36: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 250,
        "success_rate": 0.596
    }
}