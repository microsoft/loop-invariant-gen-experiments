{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's note the pre-conditions and variable assignments:\n\n1. n is a non-negative integer.\n2. i, a, and b are initialized to 0.\n\nNow, let's analyze the loop body and loop condition:\n\nThe loop condition is `i < n`. Inside the loop body, there is a conditional statement that increments `a` and `b` differently based on the result of `unknown_int()`.\n\nWe can now identify the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0 && b >= 0;\n    loop invariant a + b == 3 * i;\n*/\n```\n\nThese invariants are true:\n\n1. Before the loop execution: i, a, and b are 0, so all invariants hold.\n2. In every iteration of the loop: i increases by 1, and the sum a + b increases by 3, so all invariants hold.\n3. After the loop termination: the loop invariants imply the post-condition `a + b == 3 * n`.",
            "First, let's note the pre-conditions and variable assignments in the program:\n1. n is a non-negative integer (n >= 0)\n2. i, a, and b are initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n1. Loop condition: i < n\n2. Loop body: a and b are incremented by either 1 and 2 or 2 and 1, respectively, depending on the result of unknown_int().\n\nNow, let's determine the loop invariants:\n1. Before the loop execution, i, a, and b are all 0.\n2. In every iteration of the loop, the sum of a and b increases by 3 (either 1+2 or 2+1).\n3. After the loop termination, the sum of a and b should be equal to 3 * n.\n\nSo the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= a && a <= 2*n;\n    loop invariant 0 <= b && b <= 2*n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n is a non-negative integer (n >= 0)\n2. i, a, and b are all initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n\nThe loop condition is i < n.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is assigned an unknown integer value, but we assume n >= 0.\n- i, a, and b are initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i < n.\n- In each iteration of the loop, either a is incremented by 1 and b by 2, or a is incremented by 2 and b by 1, depending on the value of unknown_int().\n- i is incremented by 1 in each iteration.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also help Frama-C verify the post-condition a+b == 3*n.",
            "First, let's note the pre-conditions and variable assignments before the loop:\n\n- n is a non-negative integer.\n- i, a, and b are initialized to 0.\n\nNow, let's analyze the loop:\n\n- The loop condition is (i < n).\n- Inside the loop, a and b are incremented by 1 or 2 based on an unknown condition. i is incremented by 1 in each iteration.\n\nNow let's find the loop invariants:\n\n1. i is always non-negative and increasing.\n2. a and b are always non-negative.\n3. The sum of a and b is always equal to 3 * i.\n\nThese invariants hold before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere's the loop invariants in ACSL format:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "Pre-conditions and variable assignments:\n- n is a non-negative integer.\n- i, a, and b are initialized to 0.\n\nLoop condition: i < n\n\nWe can now state the loop invariants. Since the increments to a and b depend on the unknown_int() function, we must use implications to account for both possible outcomes.\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * n;\n    loop invariant 0 <= b <= 2 * n;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is non-negative (n >= 0)\n- i, a, and b are initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (i < n)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/\n```\n\nHere's why these loop invariants hold:\n- \"0 <= i <= n\": i starts from 0 and increments by 1 in every iteration until i becomes equal to n\n- \"0 <= a <= 2*n\": a starts from 0 and increases by either 1 or 2 in every iteration, so it can be at most 2*n\n- \"0 <= b <= 2*n\": b starts from 0 and increases by either 1 or 2 in every iteration, so it can be at most 2*n\n- \"a + b == 3*i\": In each iteration, the sum of a and b increases by 3 (either a increases by 1 and b by 2, or a increases by 2 and b by 1), and i increases by 1. So the sum of a and b will always be 3 times the value of i.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is assigned an unknown integer value, and it is assumed to be greater than or equal to 0.\n- i is initialized to 0.\n- a and b are both initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i < n`.\n\nNow, let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "First, let's take note of the pre-conditions and variable assignments before the loop:\n\n1. n is non-negative (n >= 0)\n2. i, a, and b are initialized to 0\n\nNow, let's analyze the loop condition and body:\n- The loop condition is i < n\n- Inside the loop, the variables a and b are incremented depending on the unknown_int() function output. Either a is incremented by 1 and b by 2, or a is incremented by 2 and b by 1.\n- The variable i is incremented by 1 in each iteration.\n\nNow, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/\n```\n\nThese invariants are true:\n- Before the loop execution: i, a, and b are all initialized to 0\n- In every iteration of the loop: i is incremented by 1, and a and b are incremented by 1 and 2, or 2 and 1, respectively\n- After the loop termination: when i == n, the post-condition a + b == 3 * n is satisfied, as the invariants imply this relationship",
            "Pre-conditions and variable assignments:\n- n is non-negative (n >= 0).\n- i, a, and b are initialized to 0.\n\nLoop condition:\n- i < n\n\nLet's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `n = unknown_int(); assume( n>= 0 );`\n2. `i = 0;`\n3. `a = 0;`\n4. `b = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `i < n`\n\nNow, let's output the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/\n```",
            "First, let's analyze the given program:\n- Pre-conditions: n is non-negative.\n- Variable assignments: i = 0, a = 0, b = 0\n- Loop condition: i < n\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- n is a non-negative integer (n >= 0)\n- i, a, and b are initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is i < n\n\nNow, let's output the loop invariants that are true:\n\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n1. n is non-negative (n >= 0)\n2. i, a, and b are initialized to 0\n\nNext, let's analyze the loop body and the loop condition:\n- Loop condition: i < n\n- Loop body: If unknown_int() returns a non-zero value, a is incremented by 1 and b is incremented by 2. Otherwise, a is incremented by 2 and b is incremented by 1. Finally, i is incremented by 1.\n\nNow, let's find the loop invariants:\n1. i is non-negative (i >= 0)\n2. a is non-negative (a >= 0)\n3. b is non-negative (b >= 0)\n4. The sum of a and b at any iteration is 3 times the value of i (a + b == 3 * i)\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/\n```",
            "First, let's analyze the given code:\n\nPre-conditions and variable assignments:\n- n is a non-negative integer (n >= 0).\n- i, a, and b are initialized to 0.\n\nLoop condition:\n- The loop continues as long as i < n.\n\nLoop body:\n- If unknown_int() is true, a increases by 1 and b increases by 2.\n- If unknown_int() is false, a increases by 2 and b increases by 1.\n- i increases by 1 in each iteration.\n\nPost-condition:\n- a + b must be equal to 3 * n.\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0 && b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= a && a <= 2*n;\n    loop invariant 0 <= b && b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * n;\n    loop invariant 0 <= b <= 2 * n;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0 && b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a >= 0 && b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= a && a <= 2*n;\n    loop invariant 0 <= b && b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= a && a <= 2*n is established but not preserved.\nloop invariant 0 <= b && b <= 2*n is established but not preserved.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i && i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is established but not preserved.\nloop invariant 0 <= b <= 2*n is established but not preserved.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= a is inductive.\nloop invariant 0 <= b is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= a;\nloop invariant i3: 0 <= b;\nloop invariant i4: a + b == 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * n;\n    loop invariant 0 <= b <= 2 * n;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * n is established but not preserved.\nloop invariant 0 <= b <= 2 * n is established but not preserved.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is established but not preserved.\nloop invariant 0 <= b <= 2*n is established but not preserved.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * i is inductive.\nloop invariant 0 <= b <= 2 * i is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is established but not preserved.\nloop invariant 0 <= b <= 2*n is established but not preserved.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*n;\n    loop invariant 0 <= b <= 2*n;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is established but not preserved.\nloop invariant 0 <= b <= 2*n is established but not preserved.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\n\n\nloop invariant i4: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2 * i;\n    loop invariant 0 <= b <= 2 * i;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * i is inductive.\nloop invariant 0 <= b <= 2 * i is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant a + b == 3 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: i >= 0;\nloop invariant i2: a >= 0;\nloop invariant i3: b >= 0;\nloop invariant i4: a + b == 3 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= a <= 2*i;\n    loop invariant 0 <= b <= 2*i;\n    loop invariant a + b == 3*i;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid"
            }
        ],
        "checker_output_for_combined_annotations": true,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant a >= 0 && b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= a && a <= 2*n is inductive.\nloop invariant 0 <= b && b <= 2*n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is inductive.\nloop invariant 0 <= b <= 2*n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= a is inductive.\nloop invariant 0 <= b is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * n is inductive.\nloop invariant 0 <= b <= 2 * n is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is inductive.\nloop invariant 0 <= b <= 2*n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * i is inductive.\nloop invariant 0 <= b <= 2 * i is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is inductive.\nloop invariant 0 <= b <= 2*n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*n is inductive.\nloop invariant 0 <= b <= 2*n is inductive.\nloop invariant a + b == 3*i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2 * i is inductive.\nloop invariant 0 <= b <= 2 * i is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant a >= 0 is inductive.\nloop invariant b >= 0 is inductive.\nloop invariant a + b == 3 * i is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= a <= 2*i is inductive.\nloop invariant 0 <= b <= 2*i is inductive.\nloop invariant a + b == 3*i is inductive.\nAssertion \\false: Valid",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0 && b >= 0;\nloop invariant i3: a + b == 3 * i;\nloop invariant i4: 0 <= i && i <= n;\nloop invariant i5: 0 <= a && a <= 2*n;\nloop invariant i6: 0 <= b && b <= 2*n;\nloop invariant i7: a + b == 3*i;\nloop invariant i8: 0 <= i <= n;\nloop invariant i9: a >= 0;\nloop invariant i10: b >= 0;\nloop invariant i11: a + b == 3 * i;\nloop invariant i12: 0 <= i <= n;\nloop invariant i13: 0 <= a <= 2*n;\nloop invariant i14: 0 <= b <= 2*n;\nloop invariant i15: a + b == 3*i;\nloop invariant i16: 0 <= i;\nloop invariant i17: 0 <= a;\nloop invariant i18: 0 <= b;\nloop invariant i19: a + b == 3 * i;\nloop invariant i20: 0 <= i <= n;\nloop invariant i21: 0 <= a <= 2 * n;\nloop invariant i22: 0 <= b <= 2 * n;\nloop invariant i23: a + b == 3 * i;\nloop invariant i24: 0 <= i <= n;\nloop invariant i25: 0 <= a <= 2*n;\nloop invariant i26: 0 <= b <= 2*n;\nloop invariant i27: a + b == 3*i;\nloop invariant i28: 0 <= i <= n;\nloop invariant i29: 0 <= a <= 2 * i;\nloop invariant i30: 0 <= b <= 2 * i;\nloop invariant i31: a + b == 3 * i;\nloop invariant i32: 0 <= i <= n;\nloop invariant i33: 0 <= a <= 2*i;\nloop invariant i34: 0 <= b <= 2*i;\nloop invariant i35: a + b == 3*i;\nloop invariant i36: 0 <= i <= n;\nloop invariant i37: 0 <= a <= 2*n;\nloop invariant i38: 0 <= b <= 2*n;\nloop invariant i39: a + b == 3*i;\nloop invariant i40: 0 <= i <= n;\nloop invariant i41: 0 <= a <= 2*i;\nloop invariant i42: 0 <= b <= 2*i;\nloop invariant i43: a + b == 3*i;\nloop invariant i44: 0 <= i <= n;\nloop invariant i45: 0 <= a <= 2*n;\nloop invariant i46: 0 <= b <= 2*n;\nloop invariant i47: a + b == 3*i;\nloop invariant i48: 0 <= i <= n;\nloop invariant i49: 0 <= a <= 2 * i;\nloop invariant i50: 0 <= b <= 2 * i;\nloop invariant i51: a + b == 3 * i;\nloop invariant i52: i >= 0;\nloop invariant i53: a >= 0;\nloop invariant i54: b >= 0;\nloop invariant i55: a + b == 3 * i;\nloop invariant i56: 0 <= i <= n;\nloop invariant i57: 0 <= a <= 2*i;\nloop invariant i58: 0 <= b <= 2*i;\nloop invariant i59: a + b == 3*i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}"
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "skipped": [],
        "total": 14,
        "success_count": 5,
        "failure_count": 9,
        "success_rate": 0.35714285714285715
    }
}