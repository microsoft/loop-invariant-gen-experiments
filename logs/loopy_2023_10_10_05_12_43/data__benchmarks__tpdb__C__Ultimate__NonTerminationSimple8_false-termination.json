{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\twhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
        "success": false,
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "Termination of a loop is established using a decreasing variant, also known as a ranking function. \nThe decreasing variant may also need supporting inductive invariants for the proof of termination to be valid.\nProvide the decreasing variant that proves the termination of the loop along with any supporting invariants that may be necessary.\nOutput all the loop invariants and variants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop variant v1;\n*/\n```"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nUse the ACSL syntax to provide the variant and invariants.\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\twhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\nInstead of using conjunctions (&&), provide the conjuncts as separate loop invariants."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant \\forall int k; 0 <= k <= x;\n    loop variant -x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```c\n/*@ \n    loop invariant 0 <= x;\n    loop variant x;\n*/\nwhile (x >= 0) {\n    if (unknown_int()) {\n        x += 1;\n    } else if (unknown_int()) {\n        x += 2;\n    } else if (unknown_int()) {\n        x += 3;\n    } else if (unknown_int()) {\n        x += 4;\n    } else {\n        break;\n    }\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "The following ACSL annotations provide the loop invariants and variant for the given code:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop variant -x;\n*/\n```\n\nHere's the full code with the ACSL annotations:\n\n```c\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\n\t/*@ \n\t    loop invariant x >= 0;\n\t    loop variant -x;\n\t*/\n\twhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nIn this case, the loop invariant `x >= 0` ensures that the value of `x` remains non-negative throughout the loop. The loop variant `-x` is a decreasing integer value, which helps to prove the termination of the loop. Since the value of `x` can only increase in the loop, the loop will eventually terminate when `x` becomes negative."
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x >= \\at(x, Pre);\n    loop variant \\at(x, Pre) - x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 1 <= x <= 4;\n    loop variant -x;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant \\forall int k; 0 <= k <= x;\n    loop variant -x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop variant x;\n*/\nwhile (x >= 0) {\n    if (unknown_int()) {\n        x += 1;\n    } else if (unknown_int()) {\n        x += 2;\n    } else if (unknown_int()) {\n        x += 3;\n    } else if (unknown_int()) {\n        x += 4;\n    } else {\n        break;\n    }\n}",
            "/*@ \n    loop invariant x >= 0;\n    loop variant -x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x >= \\at(x, Pre);\n    loop variant \\at(x, Pre) - x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 1 <= x <= 4;\n    loop variant -x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "success": false,
                "annotations": "/*@ \n    loop invariant \\forall int k; 0 <= k <= x;\n    loop variant -x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: \\forall int k; 0 <= k <= x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant \\forall int k; 0 <= k <= x is preserved but not established.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": false,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant -x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 4,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop variant x;\n*/\nwhile (x >= 0) {\n    if (unknown_int()) {\n        x += 1;\n    } else if (unknown_int()) {\n        x += 2;\n    } else if (unknown_int()) {\n        x += 3;\n    } else if (unknown_int()) {\n        x += 4;\n    } else {\n        break;\n    }\n}",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= x is preserved but not established.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": false,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 4,
                "success": false,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop variant -x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: x >= 0;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant x >= 0 is preserved but not established.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": false,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant -x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 5,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x >= \\at(x, Pre);\n    loop variant \\at(x, Pre) - x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x >= \\at(x, Pre);\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "Annotation error on line 10: unbound logic variable x. Ignoring loop annotation",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": false,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant \\at(x, Pre) - x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 10: unbound logic variable x. Ignoring loop annotation"
                    }
                ]
            },
            {
                "num_solver_calls": 4,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 1 <= x <= 4;\n    loop variant -x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 1 <= x <= 4;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= x is preserved but not established.\nloop invariant 1 <= x <= 4 is neither established nor preserved.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": false,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant -x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ]
            }
        ],
        "individual_completions_num_solver_calls": 21,
        "combined_annotation_num_solver_calls": 9,
        "candidates": [],
        "combined_candidates": [
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant -x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output": false,
                "checker_message": "\n\nLoop variant is Invalid.\n"
            },
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output": false,
                "checker_message": "\n\nLoop variant is Invalid.\n"
            },
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\nloop variant \\at(x, Pre) - x;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                "checker_output": false,
                "checker_message": "Annotation error on line 10: unbound logic variable x. Ignoring loop annotation"
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\nloop invariant i1: \\forall int k; 0 <= k <= x;\nloop invariant i2: 0 <= x;\nloop invariant i3: x >= 0;\nloop invariant i4: 0 <= x;\nloop invariant i5: x >= \\at(x, Pre);\nloop invariant i6: 0 <= x;\nloop invariant i7: 1 <= x <= 4;\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n",
        "checker_output_for_combined_invariants": false,
        "checker_message_for_combined_invariants": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation",
        "code_with_combined_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile (x >= 0) {\n\t\tif (unknown_int()) {\n\t\t\tx += 1;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 2;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 3;\n\t\t} else if (unknown_int()) {\n\t\t\tx += 4;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c"
        ],
        "skipped": [],
        "total": 101,
        "success_rate": 0.39603960396039606
    }
}