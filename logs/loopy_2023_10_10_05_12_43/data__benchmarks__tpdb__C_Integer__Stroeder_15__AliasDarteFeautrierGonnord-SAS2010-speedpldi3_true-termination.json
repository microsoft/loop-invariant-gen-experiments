{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "Termination of a loop is established using a decreasing variant, also known as a ranking function. \nThe decreasing variant may also need supporting inductive invariants for the proof of termination to be valid.\nProvide the decreasing variant that proves the termination of the loop along with any supporting invariants that may be necessary.\nOutput all the loop invariants and variants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop variant v1;\n*/\n```"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nUse the ACSL syntax to provide the variant and invariants.\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nInstead of using conjunctions (&&), provide the conjuncts as separate loop invariants."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (i < n) || (j == 0);\n    loop variant n - i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= m;\n    loop invariant (i == n) || (0 <= j && j < m);\n    loop variant n - i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i <= n);\n    loop variant n - i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n    loop variant (n - i) * m + (m - j);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop variant n - i;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (i < n) || (j == 0);\n    loop variant n - i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= m;\n    loop invariant (i == n) || (0 <= j && j < m);\n    loop variant n - i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i <= n);\n    loop variant n - i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n    loop variant (n - i) * m + (m - j);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop variant n - i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (i < n) || (j == 0);\n    loop variant n - i;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": true,
                "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (i < n) || (j == 0) is inductive.\n\n",
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\nloop variant n - i;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (i < n) || (j == 0) is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= j && j <= m;\n    loop invariant (i == n) || (0 <= j && j < m);\n    loop variant n - i;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= m;\nloop invariant i3: (i == n) || (0 <= j && j < m);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= j && j <= m is inductive.\nloop invariant (i == n) || (0 <= j && j < m) is established but not preserved.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= m;\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= j && j <= m;\nloop variant n - i;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= j && j <= m is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 2,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i <= n);\n    loop variant n - i;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (j == m) ==> (i <= n);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": true,
                "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i <= n) is inductive.\n\n",
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (j == m) ==> (i <= n);\nloop variant n - i;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i <= n) is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 2,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant i * m + j <= n * m;\n    loop variant (n - i) * m + (m - j);\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: i * m + j <= n * m;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": true,
                "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\n",
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: i * m + j <= n * m;\nloop variant (n - i) * m + (m - j);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (j == m) ==> (i < n);\n    loop variant n - i;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (j == m) ==> (i < n);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i < n) is established but not preserved.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop variant n - i;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            }
        ],
        "individual_completions_num_solver_calls": 12,
        "combined_annotation_num_solver_calls": 5,
        "candidates": [],
        "combined_candidates": [
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\nloop invariant i4: 0 <= i && i <= n;\nloop invariant i5: 0 <= j && j <= m;\nloop invariant i9: (j == m) ==> (i <= n);\nloop invariant i12: i * m + j <= n * m;\nloop variant n - i;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false,
                "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (i < n) || (j == 0) is inductive.\nloop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= j && j <= m is inductive.\nloop invariant (j == m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Invalid.\n"
            },
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\nloop invariant i4: 0 <= i && i <= n;\nloop invariant i5: 0 <= j && j <= m;\nloop invariant i9: (j == m) ==> (i <= n);\nloop invariant i12: i * m + j <= n * m;\nloop variant (n - i) * m + (m - j);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false,
                "checker_message": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (i < n) || (j == 0) is inductive.\nloop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= j && j <= m is inductive.\nloop invariant (j == m) ==> (i <= n) is inductive.\nloop invariant i * m + j <= n * m is inductive.\n\nLoop variant is Invalid.\n"
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\nloop invariant i4: 0 <= i && i <= n;\nloop invariant i5: 0 <= j && j <= m;\nloop invariant i6: (i == n) || (0 <= j && j < m);\nloop invariant i7: 0 <= i <= n;\nloop invariant i8: 0 <= j <= m;\nloop invariant i9: (j == m) ==> (i <= n);\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: 0 <= j <= m;\nloop invariant i12: i * m + j <= n * m;\nloop invariant i13: 0 <= i <= n;\nloop invariant i14: 0 <= j <= m;\nloop invariant i15: (j == m) ==> (i < n);\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "checker_output_for_combined_invariants": false,
        "checker_message_for_combined_invariants": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (i < n) || (j == 0) is inductive.\nloop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= j && j <= m is inductive.\nloop invariant (i == n) || (0 <= j && j < m) is established but not preserved.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i <= n) is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant i * m + j <= n * m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant (j == m) ==> (i < n) is inductive.\n\n",
        "code_with_combined_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, j, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= j <= m;\nloop invariant i3: (i < n) || (j == 0);\nloop invariant i4: 0 <= i && i <= n;\nloop invariant i5: 0 <= j && j <= m;\n\nloop invariant i9: (j == m) ==> (i <= n);\nloop invariant i12: i * m + j <= n * m;\n\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c"
        ],
        "skipped": [],
        "total": 123,
        "success_rate": 0.37398373983739835
    }
}