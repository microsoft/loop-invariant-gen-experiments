{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    while ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "Termination of a loop is established using a decreasing variant, also known as a ranking function. \nThe decreasing variant may also need supporting inductive invariants for the proof of termination to be valid.\nProvide the decreasing variant that proves the termination of the loop along with any supporting invariants that may be necessary.\nOutput all the loop invariants and variants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop variant v1;\n*/\n```"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nUse the ACSL syntax to provide the variant and invariants.\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    while ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\nInstead of using conjunctions (&&), provide the conjuncts as separate loop invariants."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```c\n/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop invariant c >= 0;\n    loop variant z - y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "I will provide the decreasing variant and loop invariants using ACSL syntax for the given code. Note that I have made a small change in the code to include the loop label for specifying loop invariants and variant.\n\n```c\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n\n    /*@ \n        loop invariant y <= z;\n        loop invariant flag >= 0;\n        loop invariant flag <= 1;\n        loop invariant c >= 0;\n        loop variant z - y;\n    */\n    while ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nIn this case, the decreasing variant is `z - y`, which ensures that the loop will terminate as `y` approaches `z`. The loop invariants ensure that certain conditions hold true throughout the loop execution, such as `y <= z`, `flag >= 0`, `flag <= 1`, and `c >= 0`."
                },
                {
                    "role": "assistant",
                    "content": "Here is the loop with the ACSL syntax for loop invariants and variant:\n\n```c\n/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n    if ((y > 0) && (x > 1)) {\n        y = x*y;\n    } else {\n        if ((y > 0) && (x < -1)) {\n            y = -x*y;\n        } else {\n            flag = 0;\n        }\n    }\n    c = c + 1;\n}\n```\n\nHere, we have separate loop invariants for `y <= z`, `flag >= 0`, and `flag <= 1`. The loop variant is `z - y`."
                },
                {
                    "role": "assistant",
                    "content": "Here are the loop invariants and variant for the given loop:\n\n```\n/*@ \n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant 0 <= flag <= 1;\n    loop invariant (y >= z) || (flag == 0) || (y < z && flag > 0);\n    loop variant z - y;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop invariant c >= 0;\n    loop variant z - y;\n*/",
            "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n\n    /*@ \n        loop invariant y <= z;\n        loop invariant flag >= 0;\n        loop invariant flag <= 1;\n        loop invariant c >= 0;\n        loop variant z - y;\n    */\n    while ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
            "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n    if ((y > 0) && (x > 1)) {\n        y = x*y;\n    } else {\n        if ((y > 0) && (x < -1)) {\n            y = -x*y;\n        } else {\n            flag = 0;\n        }\n    }\n    c = c + 1;\n}",
            "/*@ \n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant 0 <= flag <= 1;\n    loop invariant (y >= z) || (flag == 0) || (y < z && flag > 0);\n    loop variant z - y;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop invariant c >= 0;\n    loop variant z - y;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: y <= z;\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant y <= z is neither established nor preserved.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: y <= z;\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant y <= z is neither established nor preserved.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n\n    /*@ \n        loop invariant y <= z;\n        loop invariant flag >= 0;\n        loop invariant flag <= 1;\n        loop invariant c >= 0;\n        loop variant z - y;\n    */\n    while ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: y <= z;\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant y <= z is neither established nor preserved.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant y <= z;\n    loop invariant flag >= 0;\n    loop invariant flag <= 1;\n    loop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n    if ((y > 0) && (x > 1)) {\n        y = x*y;\n    } else {\n        if ((y > 0) && (x < -1)) {\n            y = -x*y;\n        } else {\n            flag = 0;\n        }\n    }\n    c = c + 1;\n}",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: y <= z;\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant y <= z is neither established nor preserved.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant 0 <= flag <= 1;\n    loop invariant (y >= z) || (flag == 0) || (y < z && flag > 0);\n    loop variant z - y;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: 0 <= y;\nloop invariant i2: 0 <= c;\nloop invariant i3: 0 <= flag <= 1;\nloop invariant i4: (y >= z) || (flag == 0) || (y < z && flag > 0);\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= y is preserved but not established.\nloop invariant 0 <= c is inductive.\nloop invariant 0 <= flag <= 1 is inductive.\nloop invariant (y >= z) || (flag == 0) || (y < z && flag > 0) is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: 0 <= c;\nloop invariant i3: 0 <= flag <= 1;\nloop invariant i4: (y >= z) || (flag == 0) || (y < z && flag > 0);\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: 0 <= c;\nloop invariant i3: 0 <= flag <= 1;\nloop invariant i4: (y >= z) || (flag == 0) || (y < z && flag > 0);\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant 0 <= flag <= 1 is inductive.\nloop invariant (y >= z) || (flag == 0) || (y < z && flag > 0) is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            }
        ],
        "individual_completions_num_solver_calls": 15,
        "combined_annotation_num_solver_calls": 3,
        "candidates": [],
        "combined_candidates": [
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\nloop invariant i16: 0 <= c;\nloop invariant i17: 0 <= flag <= 1;\nloop invariant i18: (y >= z) || (flag == 0) || (y < z && flag > 0);\nloop variant z - y;\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output": false,
                "checker_message": "loop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant 0 <= flag <= 1 is inductive.\nloop invariant (y >= z) || (flag == 0) || (y < z && flag > 0) is inductive.\n\nLoop variant is Invalid.\n"
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\nloop invariant i1: y <= z;\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\nloop invariant i5: y <= z;\nloop invariant i6: flag >= 0;\nloop invariant i7: flag <= 1;\nloop invariant i8: y <= z;\nloop invariant i9: flag >= 0;\nloop invariant i10: flag <= 1;\nloop invariant i11: c >= 0;\nloop invariant i12: y <= z;\nloop invariant i13: flag >= 0;\nloop invariant i14: flag <= 1;\nloop invariant i15: 0 <= y;\nloop invariant i16: 0 <= c;\nloop invariant i17: 0 <= flag <= 1;\nloop invariant i18: (y >= z) || (flag == 0) || (y < z && flag > 0);\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
        "checker_output_for_combined_invariants": false,
        "checker_message_for_combined_invariants": "loop invariant y <= z is neither established nor preserved.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant y <= z is inductive.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant y <= z is inductive.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant y <= z is inductive.\nloop invariant flag >= 0 is inductive.\nloop invariant flag <= 1 is inductive.\nloop invariant 0 <= y is preserved but not established.\nloop invariant 0 <= c is inductive.\nloop invariant 0 <= flag <= 1 is inductive.\nloop invariant (y >= z) || (flag == 0) || (y < z && flag > 0) is inductive.\n\n",
        "code_with_combined_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c, flag, x, y, z;\n    c = 0;\n    flag = 1;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    /*@\n\nloop invariant i2: flag >= 0;\nloop invariant i3: flag <= 1;\nloop invariant i4: c >= 0;\n\nloop invariant i16: 0 <= c;\nloop invariant i17: 0 <= flag <= 1;\nloop invariant i18: (y >= z) || (flag == 0) || (y < z && flag > 0);\n*/\nwhile ((y < z) && (flag > 0)) {\n        if ((y > 0) && (x > 1)) {\n            y = x*y;\n        } else {\n            if ((y > 0) && (x < -1)) {\n                y = -x*y;\n            } else {\n                flag = 0;\n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenCookFuhsNimkarOHearn-TACAS2014-Introduction_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.03_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.04_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.12_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.14_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.15_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.02_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Choose.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplxStruc.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ConvLower.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cousot.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivWithoutMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Even.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Flip.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Flip2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gauss.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lcm.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex6_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Loop.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Marbie1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Marbie2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Middle.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorIntervSim.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Narrowing.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NarrowKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination1_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination4_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_00.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_21.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_22.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_23.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Sunset.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c"
        ],
        "skipped": [],
        "total": 342,
        "success_rate": 0.3216374269005848
    }
}