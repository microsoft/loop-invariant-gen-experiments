{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "Termination of a loop is established using a decreasing variant, also known as a ranking function. \nThe decreasing variant may also need supporting inductive invariants for the proof of termination to be valid.\nProvide the decreasing variant that proves the termination of the loop along with any supporting invariants that may be necessary.\nOutput all the loop invariants and variants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop variant v1;\n*/\n```"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nUse the ACSL syntax to provide the variant and invariants.\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\nInstead of using conjunctions (&&), provide the conjuncts as separate loop invariants."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x_orig == x + 2*y*iter - iter;\n    loop variant x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, Pre) - 2*y*(1 + \\at(x, Pre))/(2*y) + 1;\n    loop variant x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, PreLoop) - 2*y*(\\at(x, LoopCurrent) - \\at(x, PreLoop)) + \\at(x, LoopCurrent) - \\at(x, PreLoop);\n    loop variant x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant y >= 0;\n    loop invariant 2*y >= 1;\n    loop variant x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -2*y + 1;\n    loop variant x;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x_orig == x + 2*y*iter - iter;\n    loop variant x;\n*/",
            "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, Pre) - 2*y*(1 + \\at(x, Pre))/(2*y) + 1;\n    loop variant x;\n*/",
            "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, PreLoop) - 2*y*(\\at(x, LoopCurrent) - \\at(x, PreLoop)) + \\at(x, LoopCurrent) - \\at(x, PreLoop);\n    loop variant x;\n*/",
            "/*@ \n    loop invariant y >= 0;\n    loop invariant 2*y >= 1;\n    loop variant x;\n*/",
            "/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -2*y + 1;\n    loop variant x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "success": true,
                "annotations": "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x_orig == x + 2*y*iter - iter;\n    loop variant x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i2: x_orig == x + 2*y*iter - iter;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "Annotation error on line 13: unbound logic variable x_orig. Ignoring loop annotation",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": true,
                "annotations": "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, Pre) - 2*y*(1 + \\at(x, Pre))/(2*y) + 1;\n    loop variant x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i2: x == \\at(x, Pre) - 2*y*(1 + \\at(x, Pre))/(2*y) + 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "Annotation error on line 13: unbound logic variable x. Ignoring loop annotation",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": true,
                "annotations": "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x == \\at(x, PreLoop) - 2*y*(\\at(x, LoopCurrent) - \\at(x, PreLoop)) + \\at(x, LoopCurrent) - \\at(x, PreLoop);\n    loop variant x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i2: x == \\at(x, PreLoop) - 2*y*(\\at(x, LoopCurrent) - \\at(x, PreLoop)) + \\at(x, LoopCurrent) - \\at(x, PreLoop);\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "Annotation error on line 13: logic label `PreLoop' not found. Ignoring loop annotation",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 2,
                "success": true,
                "annotations": "/*@ \n    loop invariant y >= 0;\n    loop invariant 2*y >= 1;\n    loop variant x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 0;\nloop invariant i2: 2*y >= 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": true,
                "checker_message_for_invariants": "loop invariant y >= 0 is inductive.\nloop invariant 2*y >= 1 is inductive.\n\n",
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 0;\nloop invariant i2: 2*y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 0 is inductive.\nloop invariant 2*y >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": true,
                "annotations": "/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -2*y + 1;\n    loop variant x;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 1;\nloop invariant i2: x >= -2*y + 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant y >= 1 is inductive.\nloop invariant x >= -2*y + 1 is preserved but not established.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ]
            }
        ],
        "individual_completions_num_solver_calls": 14,
        "combined_annotation_num_solver_calls": 6,
        "candidates": [],
        "combined_candidates": [
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i7: y >= 0;\nloop invariant i9: y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output": true,
                "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 1 is inductive.\n\nLoop variant is Valid.\n"
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i2: x_orig == x + 2*y*iter - iter;\nloop invariant i3: 2*y >= 1;\nloop invariant i4: x == \\at(x, Pre) - 2*y*(1 + \\at(x, Pre))/(2*y) + 1;\nloop invariant i5: 2*y >= 1;\nloop invariant i6: x == \\at(x, PreLoop) - 2*y*(\\at(x, LoopCurrent) - \\at(x, PreLoop)) + \\at(x, LoopCurrent) - \\at(x, PreLoop);\nloop invariant i7: y >= 0;\nloop invariant i8: 2*y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i10: x >= -2*y + 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "checker_output_for_combined_invariants": false,
        "checker_message_for_combined_invariants": "Annotation error on line 13: unbound logic variable x_orig. Ignoring loop annotation",
        "code_with_combined_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\n\n\nloop invariant i7: y >= 0;\nloop invariant i9: y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 72,
        "success_rate": 0.4583333333333333
    }
}