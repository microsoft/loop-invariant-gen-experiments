{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    while (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
        "success": false,
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "Termination of a loop is established using a decreasing variant, also known as a ranking function. \nThe decreasing variant may also need supporting inductive invariants for the proof of termination to be valid.\nProvide the decreasing variant that proves the termination of the loop along with any supporting invariants that may be necessary.\nOutput all the loop invariants and variants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n    loop variant v1;\n*/\n```"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nUse the ACSL syntax to provide the variant and invariants.\n\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    while (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}\n```\nInstead of using conjunctions (&&), provide the conjuncts as separate loop invariants."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Here is the loop invariants and variant using ACSL syntax for the given code:\n\n```\n/*@ \n    loop invariant 0 <= i <= M;\n    loop invariant 0 <= j <= N;\n    loop invariant c >= 0;\n    loop invariant c == i - a && c == j - b;\n    loop variant M - i + N - j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= M;\n    loop invariant 0 <= N;\n    loop invariant i <= M + 1;\n    loop invariant j <= N + 1;\n    loop invariant c >= 0;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant (M - i) + (N - j);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= c;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i && i <= M;\n    loop invariant 0 <= j && j <= N;\n    loop invariant 0 <= c && c <= M + N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == (i - a) + (j - b);\n    loop variant M - i + N - j;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= M;\n    loop invariant 0 <= j <= N;\n    loop invariant c >= 0;\n    loop invariant c == i - a && c == j - b;\n    loop variant M - i + N - j;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= M;\n    loop invariant 0 <= N;\n    loop invariant i <= M + 1;\n    loop invariant j <= N + 1;\n    loop invariant c >= 0;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant (M - i) + (N - j);\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= c;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= M;\n    loop invariant 0 <= j && j <= N;\n    loop invariant 0 <= c && c <= M + N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == (i - a) + (j - b);\n    loop variant M - i + N - j;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i <= M;\n    loop invariant 0 <= j <= N;\n    loop invariant c >= 0;\n    loop invariant c == i - a && c == j - b;\n    loop variant M - i + N - j;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i <= M;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i <= M is neither established nor preserved.\nloop invariant 0 <= j <= N is neither established nor preserved.\nloop invariant c >= 0 is inductive.\nloop invariant c == i - a && c == j - b is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\nloop variant M - i + N - j;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c == i - a && c == j - b is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= M;\n    loop invariant 0 <= N;\n    loop invariant i <= M + 1;\n    loop invariant j <= N + 1;\n    loop invariant c >= 0;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant (M - i) + (N - j);\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= M;\nloop invariant i4: 0 <= N;\nloop invariant i5: i <= M + 1;\nloop invariant i6: j <= N + 1;\nloop invariant i7: c >= 0;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i is preserved but not established.\nloop invariant 0 <= j is preserved but not established.\nloop invariant 0 <= M is preserved but not established.\nloop invariant 0 <= N is preserved but not established.\nloop invariant i <= M + 1 is neither established nor preserved.\nloop invariant j <= N + 1 is neither established nor preserved.\nloop invariant c >= 0 is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\n\n\n\n\nloop invariant i7: c >= 0;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i7: c >= 0;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\nloop variant (M - i) + (N - j);\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= c;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= c;\nloop invariant i4: i <= M;\nloop invariant i5: j <= N;\nloop invariant i6: a <= i;\nloop invariant i7: b <= j;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i is preserved but not established.\nloop invariant 0 <= j is preserved but not established.\nloop invariant 0 <= c is inductive.\nloop invariant i <= M is neither established nor preserved.\nloop invariant j <= N is neither established nor preserved.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\nloop invariant i3: 0 <= c;\n\n\nloop invariant i6: a <= i;\nloop invariant i7: b <= j;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i3: 0 <= c;\nloop invariant i6: a <= i;\nloop invariant i7: b <= j;\nloop invariant i8: c == i - a;\nloop invariant i9: c == j - b;\nloop variant M - i + N - j;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= M;\n    loop invariant 0 <= j && j <= N;\n    loop invariant 0 <= c && c <= M + N;\n    loop invariant a <= i;\n    loop invariant b <= j;\n    loop invariant c == (i - a) + (j - b);\n    loop variant M - i + N - j;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i && i <= M;\nloop invariant i2: 0 <= j && j <= N;\nloop invariant i3: 0 <= c && c <= M + N;\nloop invariant i4: a <= i;\nloop invariant i5: b <= j;\nloop invariant i6: c == (i - a) + (j - b);\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i && i <= M is neither established nor preserved.\nloop invariant 0 <= j && j <= N is neither established nor preserved.\nloop invariant 0 <= c && c <= M + N is established but not preserved.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\nloop invariant c == (i - a) + (j - b) is established but not preserved.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\n\nloop invariant i4: a <= i;\nloop invariant i5: b <= j;\n\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i4: a <= i;\nloop invariant i5: b <= j;\nloop variant M - i + N - j;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            },
            {
                "num_solver_calls": 3,
                "success": false,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= M;\n    loop invariant j <= N;\n    loop invariant c == i - a;\n    loop invariant c == j - b;\n    loop variant M - i + N - j;\n*/",
                "code_with_loop_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: i <= M;\nloop invariant i4: j <= N;\nloop invariant i5: c == i - a;\nloop invariant i6: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_for_invariants": false,
                "checker_message_for_invariants": "loop invariant 0 <= i is preserved but not established.\nloop invariant 0 <= j is preserved but not established.\nloop invariant i <= M is neither established nor preserved.\nloop invariant j <= N is neither established nor preserved.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\n",
                "code_with_loop_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\n\n\nloop invariant i5: c == i - a;\nloop invariant i6: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output_after_prune": true,
                "candidates": [
                    {
                        "candidate_with_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i5: c == i - a;\nloop invariant i6: c == j - b;\nloop variant M - i + N - j;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ]
            }
        ],
        "individual_completions_num_solver_calls": 15,
        "combined_annotation_num_solver_calls": 5,
        "candidates": [],
        "combined_candidates": [
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\nloop invariant i12: c == i - a;\nloop invariant i13: c == j - b;\nloop invariant i16: 0 <= c;\nloop invariant i19: a <= i;\nloop invariant i20: b <= j;\nloop variant M - i + N - j;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c == i - a && c == j - b is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\n\nLoop variant is Invalid.\n"
            },
            {
                "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\nloop invariant i12: c == i - a;\nloop invariant i13: c == j - b;\nloop invariant i16: 0 <= c;\nloop invariant i19: a <= i;\nloop invariant i20: b <= j;\nloop variant (M - i) + (N - j);\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
                "checker_output": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c == i - a && c == j - b is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\n\nLoop variant is Invalid.\n"
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\nloop invariant i1: 0 <= i <= M;\nloop invariant i2: 0 <= j <= N;\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\nloop invariant i5: 0 <= i;\nloop invariant i6: 0 <= j;\nloop invariant i7: 0 <= M;\nloop invariant i8: 0 <= N;\nloop invariant i9: i <= M + 1;\nloop invariant i10: j <= N + 1;\nloop invariant i11: c >= 0;\nloop invariant i12: c == i - a;\nloop invariant i13: c == j - b;\nloop invariant i14: 0 <= i;\nloop invariant i15: 0 <= j;\nloop invariant i16: 0 <= c;\nloop invariant i17: i <= M;\nloop invariant i18: j <= N;\nloop invariant i19: a <= i;\nloop invariant i20: b <= j;\nloop invariant i21: c == i - a;\nloop invariant i22: c == j - b;\nloop invariant i23: 0 <= i && i <= M;\nloop invariant i24: 0 <= j && j <= N;\nloop invariant i25: 0 <= c && c <= M + N;\nloop invariant i26: a <= i;\nloop invariant i27: b <= j;\nloop invariant i28: c == (i - a) + (j - b);\nloop invariant i29: 0 <= i;\nloop invariant i30: 0 <= j;\nloop invariant i31: i <= M;\nloop invariant i32: j <= N;\nloop invariant i33: c == i - a;\nloop invariant i34: c == j - b;\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
        "checker_output_for_combined_invariants": false,
        "checker_message_for_combined_invariants": "loop invariant 0 <= i <= M is neither established nor preserved.\nloop invariant 0 <= j <= N is neither established nor preserved.\nloop invariant c >= 0 is inductive.\nloop invariant c == i - a && c == j - b is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= M is inductive.\nloop invariant 0 <= N is inductive.\nloop invariant i <= M + 1 is inductive.\nloop invariant j <= N + 1 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant i <= M is inductive.\nloop invariant j <= N is inductive.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\nloop invariant 0 <= i && i <= M is inductive.\nloop invariant 0 <= j && j <= N is inductive.\nloop invariant 0 <= c && c <= M + N is inductive.\nloop invariant a <= i is inductive.\nloop invariant b <= j is inductive.\nloop invariant c == (i - a) + (j - b) is established but not preserved.\nloop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant i <= M is inductive.\nloop invariant j <= N is inductive.\nloop invariant c == i - a is inductive.\nloop invariant c == j - b is inductive.\n\n",
        "code_with_combined_invariants_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n\tint a, b, c, i, j, M, N;\n\ti = unknown_int();\n\tj = unknown_int();\n\tM = unknown_int();\n\tN = unknown_int();\n    a = i;\n    b = j;\n    c = 0;\n    /*@\n\n\nloop invariant i3: c >= 0;\nloop invariant i4: c == i - a && c == j - b;\n\n\n\n\n\n\nloop invariant i12: c == i - a;\nloop invariant i13: c == j - b;\nloop invariant i16: 0 <= c;\n\n\nloop invariant i19: a <= i;\nloop invariant i20: b <= j;\n\n\n\n\n*/\nwhile (i<M || j<N) {\n    \ti = i + 1;\n    \tj = j + 1;\n    \tc = c + 1;\n    }\n    return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenCookFuhsNimkarOHearn-TACAS2014-Introduction_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.03_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.04_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.12_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.14_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.15_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.02_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Choose.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplxStruc.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ConvLower.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cousot.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivWithoutMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Even.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ex08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Flip.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Flip2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gauss.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lcm.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex6_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Loop.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Marbie1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Marbie2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Middle.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorIntervSim.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Narrowing.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NarrowKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination1_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTermination4_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c"
        ],
        "skipped": [],
        "total": 274,
        "success_rate": 0.28102189781021897
    }
}