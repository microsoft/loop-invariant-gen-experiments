{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "Invariant exclusive >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant invalid >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant invalid >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "Invariant invalid >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant exclusive >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "Invariant exclusive >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant invalid >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant invalid >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "Invariant invalid >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant exclusive >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant invalid >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant exclusive >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
                "success": true,
                "checker_message": "Invariant invalid >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant exclusive >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": ""
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\twhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "```\n/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
            "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
            "/*@ \n    loop invariant exclusive >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant invalid >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
            "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/",
            "/*@ \n    loop invariant invalid >= 0;\n    loop invariant unowned >= 0;\n    loop invariant nonexclusive >= 0;\n    loop invariant exclusive >= 0;\n    loop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\n\tint invalid;\n\tint unowned;\n\tint nonexclusive;\n\tint exclusive;\n\n\tif (! (exclusive==0)) return 0;\n\tif (! (nonexclusive==0)) return 0;\n\tif (! (unowned==0)) return 0;\n\tif (! (invalid>= 1)) return 0;\n\n\t/*@\nloop invariant exclusive >= 0;\nloop invariant unowned >= 0;\nloop invariant nonexclusive >= 0;\nloop invariant invalid >= 0;\nloop invariant invalid + unowned + exclusive + nonexclusive >= 1;\n*/\nwhile (unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\tnonexclusive=nonexclusive+exclusive;\n\t\t\texclusive=0;\n\t\t\tinvalid=invalid-1;\n\t\t\tunowned=unowned+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (nonexclusive + unowned >=1)) return 0;\n\t\t\t\tinvalid=invalid + unowned + nonexclusive-1;\n\t\t\t\texclusive=exclusive+1;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (! (invalid >= 1)) return 0;\n\t\t\t\tunowned=0;\n\t\t\t\tnonexclusive=0;\n\t\t\t\texclusive=1;\n\t\t\t\tinvalid=invalid+unowned+exclusive+nonexclusive-1;\n\t\t\t}\n\t\t}\n\t}\n\n\t{;//@ assert(exclusive >= 0);\n}\n\t{;//@ assert(unowned >= 0);\n}\n\t{;//@ assert(invalid + unowned + exclusive + nonexclusive >= 1);\n}\n}\n",
        "checker_output": true,
        "checker_message": "Invariant exclusive >= 0 on line 21: Valid\nInvariant unowned >= 0 on line 22: Valid\nInvariant nonexclusive >= 0 on line 23: Valid\nInvariant invalid >= 0 on line 24: Valid\nInvariant ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 25: Valid\nPost-condition exclusive >= 0 on line 58: Valid\nPost-condition unowned >= 0 on line 60: Valid\nPost-condition ((invalid + unowned) + exclusive) + nonexclusive >= 1 on line 62: Valid\n"
    },
    "stats": {
        "success": [
            1,
            7,
            13,
            14,
            20,
            26,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41
        ],
        "failure": [
            0,
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            27,
            30,
            31,
            32,
            33,
            34,
            37
        ],
        "skipped": [],
        "total": 42,
        "success_rate": 0.3333333333333333
    }
}