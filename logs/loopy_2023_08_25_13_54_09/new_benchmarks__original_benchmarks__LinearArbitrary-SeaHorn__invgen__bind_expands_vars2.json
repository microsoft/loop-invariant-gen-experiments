{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant mc_i >= 0;\n    loop invariant mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: mc_i >= 0;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: mc_i >= 0;\n\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant 0 <= cp1_off <= n1;\n    loop invariant 0 < MAXDATA;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i <= n2;\nloop invariant i2: 0 <= cp1_off <= n1;\nloop invariant i3: 0 < MAXDATA;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: n2 <= MAXDATA * 2 - n1;\nloop invariant i6: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\n\nloop invariant i3: 0 < MAXDATA;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: n2 <= MAXDATA * 2 - n1;\nloop invariant i6: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: cp1_off <= n1;\nloop invariant i6: n2 <= MAXDATA * 2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\n\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: cp1_off <= n1;\nloop invariant i6: n2 <= MAXDATA * 2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant cp1_off <= n1;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i <= n2;\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: cp1_off <= n1;\nloop invariant i4: n2 <= MAXDATA * 2 - n1;\nloop invariant i5: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: n1 <= MAXDATA * 2;\nloop invariant i3: cp1_off <= n1;\nloop invariant i4: n2 <= MAXDATA * 2 - n1;\nloop invariant i5: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant 0 <= cp1_off;\n    loop invariant cp1_off + mc_i < MAXDATA * 2;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n1 <= MAXDATA * 2;\nloop invariant i6: 0 <= cp1_off;\nloop invariant i7: cp1_off + mc_i < MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is preserved but not established.\nloop invariant i7 is neither established nor preserved.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\n\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n1 <= MAXDATA * 2;\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n1 <= MAXDATA * 2;\nloop invariant i6: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\n\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: cp1_off <= n1;\nloop invariant i5: n1 <= MAXDATA * 2;\nloop invariant i6: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i <= n2;\nloop invariant i2: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= mc_i;\n  loop invariant mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\n\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n"
            },
            {
                "invariants": "//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant (MAXDATA > 0) ==> (cp1_off + mc_i < MAXDATA * 2);",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\nloop invariant i4: (MAXDATA > 0) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i;\n\nloop invariant i3: n2 <= MAXDATA * 2 - n1;\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Unproven\n"
            },
            {
                "invariants": "/*@\n  loop invariant 0 <= mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n  loop invariant MAXDATA > 0;\n  loop invariant n1 <= MAXDATA * 2;\n  loop invariant cp1_off <= n1;\n  loop invariant n2 <= MAXDATA * 2 - n1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: 0 <= mc_i <= n2;\nloop invariant i2: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i3: MAXDATA > 0;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: cp1_off <= n1;\nloop invariant i6: n2 <= MAXDATA * 2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is preserved but not established.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\n\nloop invariant i2: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i3: MAXDATA > 0;\nloop invariant i4: n1 <= MAXDATA * 2;\nloop invariant i5: cp1_off <= n1;\nloop invariant i6: n2 <= MAXDATA * 2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, we note the preconditions and variable assignments:\n\n1. MAXDATA > 0\n2. n1 <= MAXDATA * 2\n3. cp1_off <= n1\n4. n2 <= MAXDATA * 2 - n1\n\nNow, let's analyze the loop body and loop condition:\n- Loop condition: mc_i < n2\n- Loop body: assert(cp1_off+mc_i < MAXDATA * 2)\n\nWe can derive the loop invariants as follows:\n\n1. mc_i >= 0 (mc_i is always non-negative)\n2. mc_i <= n2 (mc_i is always less than or equal to n2)\n3. cp1_off + mc_i <= MAXDATA * 2 (from the assertion)\n\nNow, we can write the loop invariants in a single code block:\n\n```\n/*@ \n    loop invariant mc_i >= 0;\n    loop invariant mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n1 = unknown();\n2. n2 = unknown();\n3. cp1_off = unknown();\n4. MAXDATA = unknown();\n5. if (MAXDATA > 0 );\n6. if (n1 <= MAXDATA * 2);\n7. if (cp1_off <= n1);\n8. if (n2 <= MAXDATA * 2 - n1);\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- for (mc_i = 0; mc_i < n2; mc_i++)\n\nNow let's output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant 0 <= cp1_off <= n1;\n    loop invariant 0 < MAXDATA;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- n1 = unknown();\n- n2 = unknown();\n- cp1_off = unknown();\n- MAXDATA = unknown();\n- MAXDATA > 0\n- n1 <= MAXDATA * 2\n- cp1_off <= n1\n- n2 <= MAXDATA*2 - n1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is mc_i < n2\n- The loop body contains an assertion: cp1_off + mc_i < MAXDATA * 2\n\nNow, let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's list the pre-conditions or variable assignments in the program:\n\n1. n1, n2, cp1_off, and MAXDATA are assigned unknown values.\n2. MAXDATA > 0.\n3. n1 <= MAXDATA * 2.\n4. cp1_off <= n1.\n5. n2 <= MAXDATA * 2 - n1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop iterates from mc_i = 0 to mc_i < n2.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant cp1_off <= n1;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n1. n1, n2, cp1_off, and MAXDATA are assigned non-deterministic values from the unknown() function.\n2. MAXDATA > 0\n3. n1 <= MAXDATA * 2\n4. cp1_off <= n1\n5. n2 <= MAXDATA*2 - n1\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is mc_i < n2.\n- The loop body contains an assertion: cp1_off + mc_i < MAXDATA * 2\n\nNow, let's find the loop invariants:\n- Loop invariant 1: 0 <= mc_i\n- Loop invariant 2: mc_i <= n2\n- Loop invariant 3: n2 <= MAXDATA * 2 - n1\n- Loop invariant 4: cp1_off <= n1\n- Loop invariant 5: n1 <= MAXDATA * 2\n- Loop invariant 6: 0 <= cp1_off\n- Loop invariant 7: cp1_off + mc_i < MAXDATA * 2\n\nThe loop invariants in ACSL annotation form are:\n```\n@{\n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant 0 <= cp1_off;\n    loop invariant cp1_off + mc_i < MAXDATA * 2;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. n1, n2, cp1_off, and MAXDATA are assigned with unknown values.\n2. MAXDATA > 0\n3. n1 <= MAXDATA * 2\n4. cp1_off <= n1\n5. n2 <= MAXDATA * 2 - n1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: mc_i < n2\n- Loop body: assert(cp1_off + mc_i < MAXDATA * 2)\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n1, n2, cp1_off, and MAXDATA are assigned non-deterministic values.\n2. The following conditions hold:\n   a. MAXDATA > 0\n   b. n1 <= MAXDATA * 2\n   c. cp1_off <= n1\n   d. n2 <= MAXDATA * 2 - n1\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nThe loop iterates from mc_i = 0 to mc_i < n2.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, mc_i = 0.\n2. In every iteration of the loop, mc_i increases by 1.\n3. After the loop termination, mc_i = n2.\n\nConsidering these points, we can output the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the preconditions and variable assignments in the program:\n\n1. n1, n2, cp1_off, and MAXDATA are assigned non-deterministic values.\n2. MAXDATA > 0\n3. n1 <= MAXDATA * 2\n4. cp1_off <= n1\n5. n2 <= MAXDATA * 2 - n1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: mc_i < n2\n- Loop body: assert(cp1_off + mc_i < MAXDATA * 2)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant 0 <= mc_i;\n  loop invariant mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/\n```\n\nHere is the explanation for each loop invariant:\n\n1. 0 <= mc_i: This loop invariant is true because mc_i is initialized to 0 and it is incremented by 1 in each iteration.\n2. mc_i <= n2: This loop invariant is true because the loop condition is mc_i < n2, and mc_i is incremented by 1 in each iteration.\n3. cp1_off + mc_i <= MAXDATA * 2: This loop invariant is true because it is the assertion that we want to check in each iteration. It is also true before the loop execution and after the loop termination due to the preconditions listed above."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n1 = unknown();\n2. n2 = unknown();\n3. cp1_off = unknown();\n4. MAXDATA = unknown();\n5. The following conditions must be met for the loop to execute:\n   - MAXDATA > 0\n   - n1 <= MAXDATA * 2\n   - cp1_off <= n1\n   - n2 <= MAXDATA*2 - n1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is: mc_i < n2\n- The loop body contains an assertion: cp1_off+mc_i < MAXDATA * 2\n\nWe can now output the loop invariants for the loop in the program:\n\n```c\n//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant (MAXDATA > 0) ==> (cp1_off + mc_i < MAXDATA * 2);\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n1, n2, cp1_off, and MAXDATA are assigned values from unknown() functions.\n2. The following conditions must be met for the loop to execute:\n   - MAXDATA > 0\n   - n1 <= MAXDATA * 2\n   - cp1_off <= n1\n   - n2 <= MAXDATA * 2 - n1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `mc_i < n2`\n- The loop body consists of an assertion: `cp1_off + mc_i < MAXDATA * 2`\n\nNow, let's output the loop invariants:\n\n```\n/*@\n  loop invariant 0 <= mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n  loop invariant MAXDATA > 0;\n  loop invariant n1 <= MAXDATA * 2;\n  loop invariant cp1_off <= n1;\n  loop invariant n2 <= MAXDATA * 2 - n1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant mc_i >= 0;\n    loop invariant mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
            "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant 0 <= cp1_off <= n1;\n    loop invariant 0 < MAXDATA;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
            "//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant cp1_off + mc_i <= MAXDATA * 2;\nloop invariant n1 <= MAXDATA * 2;\nloop invariant cp1_off <= n1;\nloop invariant n2 <= MAXDATA * 2 - n1;",
            "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant cp1_off <= n1;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/",
            "@{\n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant 0 <= cp1_off;\n    loop invariant cp1_off + mc_i < MAXDATA * 2;\n}",
            "/*@ \n    loop invariant 0 <= mc_i;\n    loop invariant mc_i <= n2;\n    loop invariant n2 <= MAXDATA * 2 - n1;\n    loop invariant cp1_off <= n1;\n    loop invariant n1 <= MAXDATA * 2;\n    loop invariant (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n*/",
            "/*@ \n    loop invariant 0 <= mc_i <= n2;\n    loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
            "/*@ \n  loop invariant 0 <= mc_i;\n  loop invariant mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n*/",
            "//@\nloop invariant 0 <= mc_i;\nloop invariant mc_i <= n2;\nloop invariant n2 <= MAXDATA * 2 - n1;\nloop invariant (MAXDATA > 0) ==> (cp1_off + mc_i < MAXDATA * 2);",
            "/*@\n  loop invariant 0 <= mc_i <= n2;\n  loop invariant cp1_off + mc_i <= MAXDATA * 2;\n  loop invariant MAXDATA > 0;\n  loop invariant n1 <= MAXDATA * 2;\n  loop invariant cp1_off <= n1;\n  loop invariant n2 <= MAXDATA * 2 - n1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: mc_i >= 0;\nloop invariant i2: mc_i <= n2;\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i4: 0 <= mc_i <= n2;\nloop invariant i5: 0 <= cp1_off <= n1;\nloop invariant i6: 0 < MAXDATA;\nloop invariant i7: n1 <= MAXDATA * 2;\nloop invariant i8: n2 <= MAXDATA * 2 - n1;\nloop invariant i9: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i10: 0 <= mc_i;\nloop invariant i11: mc_i <= n2;\nloop invariant i12: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i13: n1 <= MAXDATA * 2;\nloop invariant i14: cp1_off <= n1;\nloop invariant i15: n2 <= MAXDATA * 2 - n1;\nloop invariant i16: 0 <= mc_i <= n2;\nloop invariant i17: n1 <= MAXDATA * 2;\nloop invariant i18: cp1_off <= n1;\nloop invariant i19: n2 <= MAXDATA * 2 - n1;\nloop invariant i20: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\nloop invariant i21: 0 <= mc_i;\nloop invariant i22: mc_i <= n2;\nloop invariant i23: n2 <= MAXDATA * 2 - n1;\nloop invariant i24: cp1_off <= n1;\nloop invariant i25: n1 <= MAXDATA * 2;\nloop invariant i26: 0 <= cp1_off;\nloop invariant i27: cp1_off + mc_i < MAXDATA * 2;\nloop invariant i28: 0 <= mc_i;\nloop invariant i29: mc_i <= n2;\nloop invariant i30: n2 <= MAXDATA * 2 - n1;\nloop invariant i31: cp1_off <= n1;\nloop invariant i32: n1 <= MAXDATA * 2;\nloop invariant i33: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\nloop invariant i34: 0 <= mc_i <= n2;\nloop invariant i35: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i36: 0 <= mc_i;\nloop invariant i37: mc_i <= n2;\nloop invariant i38: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i39: 0 <= mc_i;\nloop invariant i40: mc_i <= n2;\nloop invariant i41: n2 <= MAXDATA * 2 - n1;\nloop invariant i42: (MAXDATA > 0) ==> (cp1_off + mc_i < MAXDATA * 2);\nloop invariant i43: 0 <= mc_i <= n2;\nloop invariant i44: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i45: MAXDATA > 0;\nloop invariant i46: n1 <= MAXDATA * 2;\nloop invariant i47: cp1_off <= n1;\nloop invariant i48: n2 <= MAXDATA * 2 - n1;\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is preserved but not established.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is preserved but not established.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is neither established nor preserved.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nloop invariant i40 is inductive.\nloop invariant i41 is inductive.\nloop invariant i42 is inductive.\nloop invariant i43 is inductive.\nloop invariant i44 is inductive.\nloop invariant i45 is inductive.\nloop invariant i46 is inductive.\nloop invariant i47 is inductive.\nloop invariant i48 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  /*@\nloop invariant i1: mc_i >= 0;\n\nloop invariant i3: cp1_off + mc_i <= MAXDATA * 2;\n\n\nloop invariant i6: 0 < MAXDATA;\nloop invariant i7: n1 <= MAXDATA * 2;\nloop invariant i8: n2 <= MAXDATA * 2 - n1;\nloop invariant i9: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i10: 0 <= mc_i;\n\nloop invariant i12: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i13: n1 <= MAXDATA * 2;\nloop invariant i14: cp1_off <= n1;\nloop invariant i15: n2 <= MAXDATA * 2 - n1;\n\nloop invariant i17: n1 <= MAXDATA * 2;\nloop invariant i18: cp1_off <= n1;\nloop invariant i19: n2 <= MAXDATA * 2 - n1;\n\n\n\n\n\n\n\n\n\n\nloop invariant i30: n2 <= MAXDATA * 2 - n1;\nloop invariant i31: cp1_off <= n1;\nloop invariant i32: n1 <= MAXDATA * 2;\nloop invariant i33: (0 <= mc_i && mc_i < n2) ==> (cp1_off + mc_i < MAXDATA * 2);\n\nloop invariant i35: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i36: 0 <= mc_i;\n\nloop invariant i38: cp1_off + mc_i <= MAXDATA * 2;\nloop invariant i39: 0 <= mc_i;\n\n\n\n\n\n\n\n\n\n*/\nfor (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i3 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nloop invariant i33 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i38 is inductive.\nloop invariant i39 is inductive.\nAssertion cp1_off + mc_i < MAXDATA * 2: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 99,
        "success_rate": 0.5959595959595959
    }
}