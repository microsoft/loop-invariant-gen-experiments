{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum04_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == 2 * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == 2 * (i - 1);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: 0 <= sn <= SIZE * a;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= SIZE + 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= SIZE * a;\nloop invariant i5: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn == a * (i - 1);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n- `int i` is an integer variable, uninitialized.\n- `int sn = 0` is an integer variable, initialized to 0.\n- `#define a (2)` is a macro that represents the value 2.\n- `#define SIZE 8` is a macro that represents the value 8.\n\nNow, let's analyze the loop condition and body:\n\n- The loop starts with `i = 1`.\n- The loop condition is `i <= SIZE` or `i <= 8`.\n- In each iteration, `sn` is incremented by `a` (2) and `i` is incremented by 1.\n\nConsidering the loop invariants that are true before the loop execution, during every iteration, and after loop termination, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == 2 * (i - 1);\n*/\n```\n\nThese loop invariants ensure that:\n\n1. `i` is always between 1 and `SIZE + 1`.\n2. `sn` is always equal to 2 times the current value of `i` minus 1.\n\nThese invariants hold true before the loop execution, in every iteration, and after the loop termination, and they imply the post-condition `sn == SIZE * a` or `sn == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n\n- `int i`: uninitialized, so it could have a garbage value before the loop.\n- `int sn = 0`: initialized to 0.\n\nNow, let's analyze the loop and make a note of the loop condition and body:\n\n- Loop condition: `i <= SIZE`\n- Loop body: `sn = sn + a`\n\nNow, let's output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n- `i` is initialized to 1\n- `sn` is initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i <= SIZE`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: `sn == 0`\n2. In every iteration of the loop:\n   - `i >= 1`\n   - `i <= SIZE + 1`\n   - `sn >= 0`\n   - `sn <= SIZE * a`\n   - `sn == (i - 1) * a`\n3. After the loop termination: `sn == SIZE * a`\n\nHere are the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. i is initialized to 1.\n2. sn is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `i <= SIZE`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: i = 1 and sn = 0.\n2. In every iteration of the loop: sn = (i - 1) * a.\n3. After the loop termination: i > SIZE, which means i = SIZE + 1.\n\nWith these findings, we can now write the loop invariants:\n\n```\n/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= SIZE.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- `int i, sn = 0;`\n- `i` is initialized to 1.\n- `sn` is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i <= SIZE`.\n- In each iteration of the loop, `sn` is incremented by `a`.\n\nNow, we can output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the variable assignments and pre-conditions in the program:\n- `int i` is initialized as 1.\n- `int sn` is initialized as 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `i <= SIZE`.\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants are true before the loop execution, during every iteration, and after the loop termination. They also imply the post-condition `sn == SIZE * a || sn == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i is assigned 1 before the loop starts.\n- sn is assigned 0 before the loop starts.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i <= SIZE`.\n- In each iteration of the loop, sn is incremented by `a`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution: i is 1, and sn is 0, so both invariants hold.\n2. In every iteration of the loop: the loop condition ensures that `i <= SIZE`, and sn is incremented by `a` in each iteration, so the invariants hold.\n3. After the loop termination: when the loop terminates, `i == SIZE + 1`, and sn is equal to `SIZE * a`, so the invariants hold, and they imply the post-condition `sn == SIZE * a || sn == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- i is initialized to 1\n- sn is initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= SIZE\n\nNow, output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int i` and `int sn = 0` are initialized.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i <= SIZE`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1);\n*/\n```\n\nThese loop invariants should help Frama-C verify the post-condition."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant 0 <= sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= SIZE * a;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == 2 * (i - 1);\nloop invariant i3: 1 <= i <= SIZE + 1;\nloop invariant i4: 0 <= sn <= SIZE * a;\nloop invariant i5: sn == (i - 1) * a;\nloop invariant i6: i >= 1;\nloop invariant i7: i <= SIZE + 1;\nloop invariant i8: sn >= 0;\nloop invariant i9: sn <= SIZE * a;\nloop invariant i10: sn == (i - 1) * a;\nloop invariant i11: 1 <= i <= SIZE + 1;\nloop invariant i12: sn == (i - 1) * a;\nloop invariant i13: 1 <= i <= SIZE + 1;\nloop invariant i14: sn >= 0;\nloop invariant i15: sn == (i - 1) * a;\nloop invariant i16: 1 <= i <= SIZE + 1;\nloop invariant i17: sn == (i - 1) * a;\nloop invariant i18: 1 <= i && i <= SIZE + 1;\nloop invariant i19: sn >= 0;\nloop invariant i20: sn == (i - 1) * a;\nloop invariant i21: 1 <= i && i <= SIZE + 1;\nloop invariant i22: sn == (i - 1) * a;\nloop invariant i23: 1 <= i && i <= SIZE + 1;\nloop invariant i24: sn >= 0;\nloop invariant i25: sn == (i - 1) * a;\nloop invariant i26: 1 <= i <= SIZE + 1;\nloop invariant i27: sn >= 0;\nloop invariant i28: sn == a * (i - 1);\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nAssertion sn == 8 * 2 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            7,
            9,
            10,
            11,
            12,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            43,
            44,
            46,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91
        ],
        "failure": [
            4,
            5,
            6,
            8,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            45,
            47,
            58,
            60,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 89,
        "success_rate": 0.5842696629213483
    }
}