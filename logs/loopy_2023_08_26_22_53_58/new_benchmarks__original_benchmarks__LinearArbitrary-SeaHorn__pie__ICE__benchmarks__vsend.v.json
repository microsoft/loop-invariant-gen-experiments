{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/vsend.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  while (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant idx_in >= 0;\n    loop invariant in[10] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: idx_in >= 0;\nloop invariant i3: in[10] == 0;\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: 0 <= i;\nloop invariant i3: c == in[idx_in];\nloop invariant i4: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is neither established nor preserved.\nloop invariant i4 is inductive.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: 0 <= i;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant 0 <= idx_in <= 10;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: 0 <= idx_in <= 10;\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is established but not preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: i >= 0;\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant c == in[idx_in];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: i >= 0;\nloop invariant i3: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i4: c == in[idx_in];\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is neither established nor preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: i >= 0;\n\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion i >= 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: 0 <= idx_in <= 10;\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\nloop invariant i4: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion i >= 0: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\n\nloop invariant i2: s == in;\nloop invariant i3: i >= 0;\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion i >= 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  while (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n\n- `in[10] = 0`\n- `idx_in = 0`\n- `s = in`\n- `i = 0`\n- `c = in[idx_in]`\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `('0' <= c) && (c <= '9')`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - `i >= 0`\n   - `idx_in >= 0`\n   - `in[10] == 0`\n2. In every iteration of the loop:\n   - `i >= 0`\n   - `idx_in >= 0`\n   - `in[10] == 0`\n3. After the loop termination:\n   - `i >= 0`\n   - `idx_in >= 0`\n   - `in[10] == 0`\n\nNow let's output all the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant idx_in >= 0;\n    loop invariant in[10] == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions, variable assignments, and the loop condition in the program:\n\nPre-conditions:\n- in[10] = 0\n- idx_in = 0\n- s = in\n- i = 0\n- c = in[idx_in]\n\nLoop condition:\n- ('0' <= c) && (c <= '9')\n\nNow, let's find the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. The program has an array `in` of 11 elements, where the last element is initialized to 0.\n2. The program has a pointer `s` pointing to the start of `in`.\n3. There are variables `c`, `i`, `j`, `idx_in`, `v1`, `v2`, and `v3`.\n4. The loop condition is `('0' <= c) && (c <= '9')`, which checks if the character `c` is a digit.\n5. Inside the loop, the program calculates the integer value of the digit, stores it in `j`, and updates `i` to be 10 times its previous value plus `j`.\n6. The loop also increments `idx_in` and updates `c` with the value of the next character in `in`.\n7. The variables `v1`, `v2`, and `v3` are assigned unknown integer values in the loop.\n\nNow, let's find the loop invariants:\n\n1. The value of `i` is always non-negative before, during, and after the loop execution.\n2. The value of `idx_in` is always between 0 and 10, inclusive, before, during, and after the loop execution.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant 0 <= idx_in <= 10;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n1. `in[10] = 0;`\n2. `idx_in = 0;`\n3. `s = in;`\n4. `i = 0;`\n5. `c = in[idx_in];`\n\nLoop condition: `('0' <= c) && (c <= '9')`\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant c == in[idx_in];\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `in[10] = 0;`\n2. `idx_in = 0;`\n3. `s = in;`\n4. `i = 0;`\n5. `c = in[idx_in];`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `('0' <= c) && (c <= '9')`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\n```\n\nThese loop invariants ensure that `idx_in` stays within the bounds of the `in` array, `s` remains pointing to `in`, `i` is always non-negative, and all the characters in the `in` array up to `idx_in` are digits. This ensures that the post-condition `i >= 0` holds after the loop terminates."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant idx_in >= 0;\n    loop invariant in[10] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant 0 <= i;\n    loop invariant c == in[idx_in];\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant 0 <= idx_in <= 10;\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n    loop invariant c == in[idx_in];\n*/",
            "/*@ \n    loop invariant 0 <= idx_in <= 10;\n    loop invariant s == in;\n    loop invariant i >= 0;\n    loop invariant \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: idx_in >= 0;\nloop invariant i3: in[10] == 0;\nloop invariant i4: 0 <= idx_in <= 10;\nloop invariant i5: 0 <= i;\nloop invariant i6: c == in[idx_in];\nloop invariant i7: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i8: i >= 0;\nloop invariant i9: 0 <= idx_in <= 10;\nloop invariant i10: 0 <= idx_in <= 10;\nloop invariant i11: i >= 0;\nloop invariant i12: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\nloop invariant i13: c == in[idx_in];\nloop invariant i14: 0 <= idx_in <= 10;\nloop invariant i15: s == in;\nloop invariant i16: i >= 0;\nloop invariant i17: \\forall integer k; 0 <= k < idx_in ==> '0' <= in[k] <= '9';\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}\n",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is neither established nor preserved.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nAssertion i >= 0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main (void)\n{\n  char in[11]; \n  char *s;\n  unsigned char c;\n  unsigned int i, j;\n  int idx_in;\n  int v1, v2, v3;\n  in[10] = 0;\n  idx_in = 0;\n  s = in;\n  i = 0;\n  c = in[idx_in];\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: idx_in >= 0;\nloop invariant i3: in[10] == 0;\n\nloop invariant i5: 0 <= i;\n\n\nloop invariant i8: i >= 0;\n\n\nloop invariant i11: i >= 0;\n\n\n\nloop invariant i15: s == in;\nloop invariant i16: i >= 0;\n\n*/\nwhile (('0' <= c) && (c <= '9'))\n  {\n    j = c - '0';\n    i = i * 10 + j;\n    idx_in++;\n    c = in[idx_in];\n    v1 = unknown_int();\n    v2 = unknown_int();\n    v3 = unknown_int();\n  }\n  \n  {;//@ assert(i >= 0);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i5 is inductive.\nloop invariant i8 is inductive.\nloop invariant i11 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nAssertion i >= 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207,
            215,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 246,
        "success_rate": 0.5528455284552846
    }
}