{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/nec40.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  while(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n    loop invariant \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= 100;\nloop invariant i2: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i3: \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i3: \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: y[i] == 0 || x[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i3: y[i] == 0 || x[i] == 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nAssertion 0 != 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i3: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 != 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  while(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- k is assigned an unknown integer value.\n- i is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n- The loop continues while x[i] != 0.\n- Inside the loop, y[i] is assigned the value of x[i], and i is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= i && i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n    loop invariant \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program and make a note of the pre-conditions, variable assignments, and the loop condition:\n\n1. Pre-conditions: None\n2. Variable assignments: `k = unknown_int();`\n3. Loop condition: `while(x[i] != 0)`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/\n```\n\nThese loop invariants can be used by Frama-C to verify the post-condition of the given program."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- `k` is assigned an unknown integer value.\n- `i` is initialized to 0 before the loop.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop continues as long as `x[i] != 0`.\n- In each iteration, `y[i]` is assigned the value of `x[i]`, and `i` is incremented by 1.\n\nBased on this, we can find the necessary loop invariants to help Frama-C verify the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\nFurthermore, the loop invariants imply the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n\n1. `k = unknown_int();` assigns an unknown integer value to `k`.\n2. `i = 0;` initializes `i` to 0.\n\nNow, analyze the loop body and make a note of the loop condition:\n\nThe loop condition is `x[i] != 0`.\n\nOutput loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/\n```\n\nHere are the explanations for the loop invariants:\n\n1. `0 <= i <= 100`: `i` is always non-negative and less than or equal to the size of the arrays `x` and `y`.\n2. `\\forall integer j; 0 <= j < i ==> y[j] == x[j]`: For all `j` from 0 to `i-1`, the value of `y[j]` is equal to `x[j]`.\n3. `y[i] == 0 || x[i] == 0`: Either `y[i]` is 0 or `x[i]` is 0. This invariant is true since the loop terminates when `x[i]` is 0, and `y[i]` is set to 0 after the loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- k is assigned an unknown integer value.\n- i is initialized to 0.\n\nNow, let's analyze the loop:\n- The loop condition is: `x[i] != 0`.\n- The loop body copies the value of `x[i]` to `y[i]` and increments `i`.\n\nWe can now output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i && i <= 100;\n    loop invariant \\forall integer n; 0 <= n < i ==> y[n] == x[n];\n    loop invariant \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n    loop invariant y[i] == 0 || x[i] == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] == y[j];\n    loop invariant \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= 100;\nloop invariant i2: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i3: \\forall integer n; i <= n < 100 ==> y[n] == y[n];\nloop invariant i4: 0 <= i <= 100;\nloop invariant i5: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i6: y[i] == 0 || x[i] == 0;\nloop invariant i7: 0 <= i <= 100;\nloop invariant i8: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i9: 0 <= i <= 100;\nloop invariant i10: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\nloop invariant i11: y[i] == 0 || x[i] == 0;\nloop invariant i12: 0 <= i <= 100;\nloop invariant i13: \\forall integer j; 0 <= j < i ==> x[j] == y[j];\nloop invariant i14: \\forall integer j; 0 <= j < i ==> x[j] != 0;\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is established but not preserved.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nAssertion 0 != 0: Unproven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\n  char x[100], y[100];\n  int i,j,k;\n\nint main() {  \n  k = unknown_int();\n  \n  i = 0;\n  /*@\n\nloop invariant i2: \\forall integer n; 0 <= n < i ==> y[n] == x[n];\nloop invariant i3: \\forall integer n; i <= n < 100 ==> y[n] == y[n];\n\nloop invariant i5: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n\nloop invariant i8: \\forall integer j; 0 <= j < i ==> y[j] == x[j];\n\n\n\n\n\n\n*/\nwhile(x[i] != 0){\n    y[i] = x[i];\n    i++;\n  }\n  y[i] = 0;\n  \n  if(k >= 0 && k < i)\n    if(y[k] != 0)\n      {{;//@ assert(0);\n}}\n\n  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i5 is inductive.\nloop invariant i8 is inductive.\nAssertion 0 != 0: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            7,
            13,
            14,
            20,
            24,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            46,
            48,
            49,
            50,
            51,
            53,
            59,
            61,
            62,
            63,
            64,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            96,
            97,
            98,
            99,
            100,
            101,
            107,
            108,
            109,
            110,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            126,
            127,
            128,
            130,
            131,
            135,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            195,
            197,
            198,
            201,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            216,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            275,
            276,
            279,
            281,
            282,
            287,
            290,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            309,
            311,
            312,
            313,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            338,
            340,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            363,
            364,
            365,
            366,
            367,
            370,
            371,
            373,
            374,
            375,
            376,
            377,
            378,
            379,
            380,
            381,
            382,
            383,
            386,
            387,
            389,
            390,
            391,
            392,
            393,
            394,
            397,
            400,
            401
        ],
        "failure": [
            2,
            3,
            4,
            5,
            6,
            8,
            9,
            10,
            11,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            45,
            47,
            52,
            54,
            55,
            56,
            57,
            58,
            60,
            65,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            94,
            95,
            102,
            103,
            104,
            105,
            106,
            111,
            118,
            120,
            121,
            123,
            124,
            129,
            132,
            133,
            134,
            136,
            144,
            145,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            192,
            193,
            194,
            196,
            199,
            200,
            207,
            215,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            256,
            263,
            267,
            269,
            270,
            271,
            273,
            274,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            310,
            314,
            315,
            316,
            317,
            318,
            319,
            320,
            323,
            326,
            327,
            329,
            331,
            339,
            341,
            348,
            368,
            369,
            372,
            384,
            385,
            388,
            395,
            396,
            398,
            399,
            402,
            403,
            404,
            405
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 402,
        "success_rate": 0.5746268656716418
    }
}