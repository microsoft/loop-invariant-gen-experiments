{
    "logs": {
        "file": "../data/benchmarks/code2inv/76.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
        "completions": [
            {
                "invariants": "@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n@}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant y >= 127 is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= (36 * y) + 36;\n    loop invariant c < 36 ==> z < (36 * y) + 36;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z <= (36 * y) + 36;\nloop invariant i4: c < 36 ==> z < (36 * y) + 36;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": false,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= (36 * y) + 36 is inductive.\nloop invariant c < 36 ==> z < (36 * y) + 36 is established but not preserved.\nAssertion c >= 36: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\n\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "checker_message_after_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant z - 36 * y == c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + 36;\nloop invariant i5: z - 36 * y == c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + 36 is inductive.\nloop invariant z - 36 * y == c is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == (36 * y) + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == (36 * y) + c;\nloop invariant i3: y >= 0;\nloop invariant i4: y >= 127;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == (36 * y) + c is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z - c == 36 * y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z - c == 36 * y;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z - c == 36 * y is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 0;\nloop invariant i4: y >= 127;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 36 * y;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: y >= 0;\nloop invariant i5: y >= 127;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n@}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: (c < 36) ==> (z == 36 * y + c);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant (c < 36) ==> (z == 36 * y + c) is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: (c < 36) ==> (z == 36 * y + c);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant (c < 36) ==> (z == 36 * y + c) is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\nloop invariant i4: z >= 36 * y;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant z >= 36 * y is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z >= 36 * c;\n    loop invariant c <= 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: z >= 36 * c;\nloop invariant i4: c <= 36;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z >= 36 * c is established but not preserved.\nloop invariant c <= 36 is inductive.\nAssertion c >= 36: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: z >= 36 * y;\n\nloop invariant i4: c <= 36;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant c <= 36 is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant c == (z - 36 * y);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + 36;\nloop invariant i5: c == (z - 36 * y);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + 36 is inductive.\nloop invariant c == (z - 36 * y) is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n    loop invariant c < 36 ==> z == 36 * y + c;\n    loop invariant c == 36 ==> z >= 4608;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\nloop invariant i5: c < 36 ==> z == 36 * y + c;\nloop invariant i6: c == 36 ==> z >= 4608;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": false,
                "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant c < 36 ==> z == 36 * y + c is inductive.\nloop invariant c == 36 ==> z >= 4608 is established but not preserved.\nAssertion c >= 36: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\nloop invariant i5: c < 36 ==> z == 36 * y + c;\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant c < 36 ==> z == 36 * y + c is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= c;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: c <= 36;\nloop invariant i3: z >= 36 * y;\nloop invariant i4: z <= 36 * y + c;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": true,
                "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + c is inductive.\nAssertion c >= 36: Valid\n"
            },
            {
                "invariants": "@{\n    loop invariant c >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36 * c;\n    loop invariant c <= 36;\n    loop invariant (unknown() ==> c < 36);\n@}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 127;\nloop invariant i4: z >= 36 * y;\nloop invariant i5: z <= 36 * y + 36 * c;\nloop invariant i6: c <= 36;\nloop invariant i7: (unknown() ==> c < 36);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "success": false,
                "checker_message": "Annotation error on line 25: unexpected token ')'",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: c >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: y >= 127;\nloop invariant i4: z >= 36 * y;\nloop invariant i5: z <= 36 * y + 36 * c;\nloop invariant i6: c <= 36;\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
                "checker_message_after_prune": "loop invariant c >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= 36 * y + 36 * c is inductive.\nloop invariant c <= 36 is inductive.\nAssertion c >= 36: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments in the program:\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNow let's analyze the loop body and make a note of the loop condition:\n- Loop condition: unknown() (non-deterministic)\n- Loop body: if (c < 36), then increment z and c by 1\n\nFinally, let's output the loop invariants:\n\n```\n@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n@}\n```"
                },
                {
                    "role": "assistant",
                    "content": "We have the following pre-conditions and variable assignments before the loop:\n\n1. `c = 0`\n2. `y >= 0`\n3. `y >= 127`\n4. `z = 36 * y`\n\nThe loop condition is `unknown()`, which is non-deterministic.\n\nNow, let's analyze the loop body and find the loop invariants:\n\n- `c` is only incremented inside the loop if `c < 36`. This means that `c` will always be in the range `[0, 36]`.\n\n- Since `c` can only be incremented inside the loop when `c < 36`, the maximum value of `z` when the loop terminates is `(36 * y) + 36`.\n\n- The value of `z` is always non-negative because it starts with `z = 36 * y` and is only incremented inside the loop.\n\n- If `c < 36` at the end of the loop, then the value of `z` must be smaller than `(36 * y) + 36`.\n\nTaking all these points into account, we can write the following loop invariants:\n\n```\n@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= (36 * y) + 36;\n    loop invariant c < 36 ==> z < (36 * y) + 36;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nLoop condition:\n- unknown()\n\nLet's find the loop invariants:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant z - 36 * y == c;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program.\n\n- c is initialized to 0.\n- y is assumed to be greater than or equal to 0 and greater than or equal to 127.\n- z is initialized to 36 * y.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\n- The loop condition is unknown(), which means we cannot determine when the loop will terminate.\n- If c is less than 36, z is incremented by 1, and c is incremented by 1.\n\nNow, let's output the loop invariants.\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == (36 * y) + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nNow let's analyze the loop body and condition:\n- The loop continues as long as unknown() returns a non-zero value. This function is not defined, so we cannot make any assumptions about when the loop will terminate.\n- Inside the loop, if c < 36, z is incremented by 1 and c is incremented by 1.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z - c == 36 * y;\n*/\n```\n\nExplanation:\n1. The variable c is initialized to 0 and incremented by 1 in each iteration, but only if c < 36. This means c is always in the range [0, 36].\n2. The variable z is initialized to 36 * y and incremented by 1 in each iteration, but only if c < 36. Since y >= 127, z is always greater than or equal to 36 * y.\n3. In every iteration, z - c remains equal to 36 * y since both z and c are incremented by 1 under the same condition (c < 36). This invariant holds before the loop execution, during each iteration, and after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\nLoop condition:\n- unknown()\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the initial assignments and preconditions:\n\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is unknown(), which is non-deterministic.\n\nNow, let's find the loop invariants for the while loop:\n\n1. Before the loop execution, c = 0 and z = 36 * y.\n2. In every iteration of the loop, if c < 36, then z is incremented by 1 and c is incremented by 1.\n3. After the loop termination, if z < 0 and z >= 4608, then c >= 36.\n\nBased on these observations, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 36 * y;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition in the program."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program:\n\n1. Variable `c` is initialized to 0.\n2. Variables `y` and `z` have some initial values that satisfy the assumptions `y >= 0`, `y >= 127`, and `z = 36 * y`.\n3. The loop condition is unknown, which means the loop may run any number of times, including zero.\n4. Inside the loop, if `c < 36`, then `z` is incremented by 1 and `c` is incremented by 1.\n5. After the loop, there is a condition `z < 0` and another condition `z >= 4608`. If both are true, then the assertion `c >= 36` should hold.\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n- `c` is initialized to 0.\n- `z` is initialized to `36 * y`.\n\n(ii) In every iteration of the loop:\n- If `c < 36`, `z` is incremented by 1, and `c` is incremented by 1.\n- `c` is always non-negative and bounded by 36.\n- `z` is always greater than or equal to `36 * y`.\n\n(iii) After the loop termination:\n- Since the loop may run zero times or more, the loop invariants should hold both before and after the loop execution.\n\nConsidering the points above, the loop invariants are:\n\n```\n@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n@}\n```\n\nThese loop invariants ensure that the post-condition `(c >= 36)` is true when the conditions `(z < 0)` and `(z >= 4608)` are both true."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the important pre-conditions and variable assignments:\n\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNext, let's analyze the loop body and loop condition:\n\n1. Loop condition: unknown() (non-deterministic)\n2. Loop body:\n   - If c < 36, then\n     - z = z + 1\n     - c = c + 1\n\nNow, let's find the loop invariants:\n\n1. Loop invariant 1: c >= 0 (this is true before the loop, during every iteration, and after the loop)\n2. Loop invariant 2: z >= 36 * y (this is true before the loop, during every iteration, and after the loop)\n3. Loop invariant 3: (c < 36) ==> (z == 36 * y + c) (this is true before the loop, during every iteration, and after the loop)\n\nPutting it all together, we have:\n\n```\n@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: unknown() (non-deterministic)\n2. Loop body: If c < 36, increment z and c\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "1. Pre-conditions and variable assignments:\n- c = 0\n- y >= 0\n- y >= 127\n- z = 36 * y\n\n2. Loop condition:\n- unknown()\n\nNow let's list the loop invariants:\n\n```\n/*@\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z >= 36 * c;\n    loop invariant c <= 36;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: unknown() (non-deterministic)\n\nLoop body:\n1. If c < 36, then:\n   a. z = z + 1\n   b. c = c + 1\n\nNow, we can output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant c == (z - 36 * y);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make note of the pre-conditions and variable assignments in the program:\n\n1. c = 0\n2. y >= 0\n3. y >= 127\n4. z = 36 * y\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is `unknown()` which means the loop could run for any number of iterations.\n- Inside the loop, if c < 36, then z is incremented by 1 and c is incremented by 1.\n\nNow let's find the loop invariants:\n\n1. Before loop execution, c = 0 and z = 36 * y.\n2. In every iteration of the loop, if c < 36, then z is incremented by 1 and c is incremented by 1.\n3. After loop termination, the loop invariants should imply the post-condition, which is (c >= 36) when (z < 0) and (z >= 4608).\n\nHere are the loop invariants:\n\n```\n@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n    loop invariant c < 36 ==> z == 36 * y + c;\n    loop invariant c == 36 ==> z >= 4608;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. c is assigned the value 0.\n2. y is assumed to be greater than or equal to 0 and 127.\n3. z is assigned the value 36 * y.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n- The loop continues while unknown() returns true.\n- Inside the loop, if c < 36, z is incremented by 1 and c is incremented by 1.\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/\n```\n\nHere's the explanation for each loop invariant:\n\n1. c is always greater than or equal to 0, as it is initialized to 0 and only incremented inside the loop.\n2. c is always less than or equal to 36, as it is incremented by 1 at most 36 times inside the loop.\n3. z is always greater than or equal to 36 * y, as it starts at this value and only increases inside the loop.\n4. z is always less than or equal to 36 * y + c, as it starts at 36 * y and increases by 1 when c increases by 1."
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given program step by step:\n\n1. Pre-conditions and variable assignments:\n   - c = 0\n   - y >= 0\n   - y >= 127\n   - z = 36 * y\n\n2. Loop condition:\n   - unknown() (non-deterministic)\n\n3. Loop body:\n   - If c < 36:\n     - z = z + 1\n     - c = c + 1\n\nNow, we can write the loop invariants:\n\n```\n@{\n    loop invariant c >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36 * c;\n    loop invariant c <= 36;\n    loop invariant (unknown() ==> c < 36);\n@}\n```"
                }
            ]
        ],
        "invariants": [
            "@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n@}",
            "@{\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= (36 * y) + 36;\n    loop invariant c < 36 ==> z < (36 * y) + 36;\n}",
            "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant z - 36 * y == c;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == (36 * y) + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z - c == 36 * y;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant z >= 36 * y;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n*/",
            "@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n@}",
            "@{\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant (c < 36) ==> (z == 36 * y + c);\n}",
            "/*@ \n    loop invariant 0 <= c <= 36;\n    loop invariant z == 36 * y + c;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n*/",
            "/*@\n    loop invariant c >= 0;\n    loop invariant z >= 36 * y;\n    loop invariant z >= 36 * c;\n    loop invariant c <= 36;\n*/",
            "/*@ \n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36;\n    loop invariant c == (z - 36 * y);\n*/",
            "@{\n    loop invariant c >= 0;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n    loop invariant c < 36 ==> z == 36 * y + c;\n    loop invariant c == 36 ==> z >= 4608;\n}",
            "/*@ \n    loop invariant 0 <= c;\n    loop invariant c <= 36;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + c;\n*/",
            "@{\n    loop invariant c >= 0;\n    loop invariant y >= 0;\n    loop invariant y >= 127;\n    loop invariant z >= 36 * y;\n    loop invariant z <= 36 * y + 36 * c;\n    loop invariant c <= 36;\n    loop invariant (unknown() ==> c < 36);\n@}"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\nloop invariant i4: 0 <= c <= 36;\nloop invariant i5: z >= 36 * y;\nloop invariant i6: z <= (36 * y) + 36;\nloop invariant i7: c < 36 ==> z < (36 * y) + 36;\nloop invariant i8: c >= 0;\nloop invariant i9: c <= 36;\nloop invariant i10: z >= 36 * y;\nloop invariant i11: z <= 36 * y + 36;\nloop invariant i12: z - 36 * y == c;\nloop invariant i13: 0 <= c <= 36;\nloop invariant i14: z == (36 * y) + c;\nloop invariant i15: y >= 0;\nloop invariant i16: y >= 127;\nloop invariant i17: 0 <= c <= 36;\nloop invariant i18: z >= 36 * y;\nloop invariant i19: z - c == 36 * y;\nloop invariant i20: 0 <= c <= 36;\nloop invariant i21: z == 36 * y + c;\nloop invariant i22: y >= 0;\nloop invariant i23: y >= 127;\nloop invariant i24: 0 <= c <= 36;\nloop invariant i25: z == 36 * y + c;\nloop invariant i26: z >= 36 * y;\nloop invariant i27: y >= 0;\nloop invariant i28: y >= 127;\nloop invariant i29: c >= 0;\nloop invariant i30: c <= 36;\nloop invariant i31: z >= 36 * y;\nloop invariant i32: (c < 36) ==> (z == 36 * y + c);\nloop invariant i33: c >= 0;\nloop invariant i34: z >= 36 * y;\nloop invariant i35: (c < 36) ==> (z == 36 * y + c);\nloop invariant i36: 0 <= c <= 36;\nloop invariant i37: z == 36 * y + c;\nloop invariant i38: y >= 127;\nloop invariant i39: z >= 36 * y;\nloop invariant i40: c >= 0;\nloop invariant i41: z >= 36 * y;\nloop invariant i42: z >= 36 * c;\nloop invariant i43: c <= 36;\nloop invariant i44: c >= 0;\nloop invariant i45: c <= 36;\nloop invariant i46: z >= 36 * y;\nloop invariant i47: z <= 36 * y + 36;\nloop invariant i48: c == (z - 36 * y);\nloop invariant i49: c >= 0;\nloop invariant i50: c <= 36;\nloop invariant i51: z >= 36 * y;\nloop invariant i52: z <= 36 * y + c;\nloop invariant i53: c < 36 ==> z == 36 * y + c;\nloop invariant i54: c == 36 ==> z >= 4608;\nloop invariant i55: 0 <= c;\nloop invariant i56: c <= 36;\nloop invariant i57: z >= 36 * y;\nloop invariant i58: z <= 36 * y + c;\nloop invariant i59: c >= 0;\nloop invariant i60: y >= 0;\nloop invariant i61: y >= 127;\nloop invariant i62: z >= 36 * y;\nloop invariant i63: z <= 36 * y + 36 * c;\nloop invariant i64: c <= 36;\nloop invariant i65: (unknown() ==> c < 36);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 83: unexpected token ')'",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\nloop invariant i5: z >= 36 * y;\nloop invariant i6: z <= (36 * y) + 36;\nloop invariant i7: c < 36 ==> z < (36 * y) + 36;\nloop invariant i8: c >= 0;\nloop invariant i9: c <= 36;\nloop invariant i11: z <= 36 * y + 36;\nloop invariant i12: z - 36 * y == c;\nloop invariant i14: z == (36 * y) + c;\nloop invariant i15: y >= 0;\nloop invariant i19: z - c == 36 * y;\nloop invariant i32: (c < 36) ==> (z == 36 * y + c);\nloop invariant i42: z >= 36 * c;\nloop invariant i48: c == (z - 36 * y);\nloop invariant i52: z <= 36 * y + c;\nloop invariant i53: c < 36 ==> z == 36 * y + c;\nloop invariant i54: c == 36 ==> z >= 4608;\nloop invariant i55: 0 <= c;\nloop invariant i63: z <= 36 * y + 36 * c;\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (z < 0) )\nif ( (z >= 4608) )\n{;\n//@ assert( (c >= 36) );\n}\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant z >= 36 * y is inductive.\nloop invariant z <= (36 * y) + 36 is inductive.\nloop invariant c < 36 ==> z < (36 * y) + 36 is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant c <= 36 is inductive.\nloop invariant z <= 36 * y + 36 is inductive.\nloop invariant z - 36 * y == c is inductive.\nloop invariant z == (36 * y) + c is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant z - c == 36 * y is inductive.\nloop invariant (c < 36) ==> (z == 36 * y + c) is inductive.\nloop invariant z >= 36 * c is inductive.\nloop invariant c == (z - 36 * y) is inductive.\nloop invariant z <= 36 * y + c is inductive.\nloop invariant c < 36 ==> z == 36 * y + c is inductive.\nloop invariant c == 36 ==> z >= 4608 is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant z <= 36 * y + 36 * c is inductive.\nAssertion c >= 36: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            15,
            17,
            18,
            19,
            20,
            21,
            22,
            24,
            29,
            34,
            35,
            36,
            37,
            38,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            57,
            58,
            59,
            67,
            70,
            72,
            73,
            75
        ],
        "failure": [
            2,
            14,
            16,
            23,
            25,
            26,
            27,
            28,
            30,
            31,
            32,
            33,
            39,
            55,
            56,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            68,
            69,
            71,
            74
        ],
        "skipped": [],
        "total": 76,
        "success_rate": 0.6578947368421053
    }
}