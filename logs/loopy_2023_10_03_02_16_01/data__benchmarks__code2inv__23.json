{
    "logs": {
        "file": "../data/benchmarks/code2inv/23.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
        "completions": [
            {
                "invariants": "@*/\n  loop invariant 1 <= i;\n  loop invariant i <= j + 1;\n  loop invariant i <= 21;\n  loop invariant j <= 20;\n  loop invariant (i - 1) % 2 == 0;\n  loop invariant (20 - j) % 2 == 0;",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: i <= j + 1;\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: (i - 1) % 2 == 0;\nloop invariant i6: (20 - j) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant i <= j + 1 is established but not preserved.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nloop invariant (20 - j) % 2 == 0 is established but not preserved.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: (i - 1) % 2 == 0;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i - 1;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\nloop invariant i2: j % 2 == 0;\nloop invariant i3: j >= i - 1;\nloop invariant i4: i <= 21;\nloop invariant i5: j <= 20;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant j >= i - 1 is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\n\n\nloop invariant i4: i <= 21;\nloop invariant i5: j <= 20;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i % 2 == 1 is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= j + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: i <= j + 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i <= j + 1 is established but not preserved.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 21;\nloop invariant i2: 0 <= j <= 20;\nloop invariant i3: j >= i - 2;\nloop invariant i4: (i - 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i - 2 is established but not preserved.\nloop invariant (i - 1) % 2 == 0 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 21;\nloop invariant i2: 0 <= j <= 20;\n\nloop invariant i4: (i - 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant 20 >= j;\n    loop invariant j >= i ==> j + i >= 21;\n    loop invariant j < i ==> j + i <= 21;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: 20 >= j;\nloop invariant i3: j >= i ==> j + i >= 21;\nloop invariant i4: j < i ==> j + i <= 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant 20 >= j is inductive.\nloop invariant j >= i ==> j + i >= 21 is inductive.\nloop invariant j < i ==> j + i <= 21 is established but not preserved.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: 20 >= j;\nloop invariant i3: j >= i ==> j + i >= 21;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i is inductive.\nloop invariant 20 >= j is inductive.\nloop invariant j >= i ==> j + i >= 21 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j <= 20;\n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant (20 - j) * 3 == i - 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\nloop invariant i2: j <= 20;\nloop invariant i3: i >= 1;\nloop invariant i4: j >= 0;\nloop invariant i5: (20 - j) * 3 == i - 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i % 2 == 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant (20 - j) * 3 == i - 1 is established but not preserved.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\nloop invariant i2: j <= 20;\nloop invariant i3: i >= 1;\nloop invariant i4: j >= 0;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i % 2 == 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j >= 0 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= j;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: i <= j;\nloop invariant i3: j <= 20;\nloop invariant i4: i % 2 == 1;\nloop invariant i5: j % 2 == 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant i <= j is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 1 is preserved but not established.\nAssertion j == 13: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: j <= 20;\nloop invariant i4: i % 2 == 1;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j == 20 - (i - 1)/2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: 1 <= j;\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: i % 2 == 1;\nloop invariant i6: j == 20 - (i - 1)/2;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant 1 <= j is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j == 20 - (i - 1)/2 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: 1 <= j;\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: i % 2 == 1;\nloop invariant i6: j == 20 - (i - 1)/2;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i is inductive.\nloop invariant 1 <= j is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j == 20 - (i - 1)/2 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\nloop invariant i2: j % 2 == 0;\nloop invariant i3: i <= j + 1;\nloop invariant i4: i >= 1;\nloop invariant i5: j <= 20;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 0 is established but not preserved.\nloop invariant i <= j + 1 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i % 2 == 1;\n\n\nloop invariant i4: i >= 1;\nloop invariant i5: j <= 20;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i % 2 == 1 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 20;\n    loop invariant 1 <= j <= 20;\n    loop invariant i <= j + 1;\n    loop invariant (i % 2) == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 20;\nloop invariant i2: 1 <= j <= 20;\nloop invariant i3: i <= j + 1;\nloop invariant i4: (i % 2) == 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i <= 20 is established but not preserved.\nloop invariant 1 <= j <= 20 is established but not preserved.\nloop invariant i <= j + 1 is established but not preserved.\nloop invariant (i % 2) == 1 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\n\n\n\nloop invariant i4: (i % 2) == 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant (i % 2) == 1 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 21;\n    loop invariant 0 <= j;\n    loop invariant j <= 20;\n    loop invariant j >= i ==> j + i <= 21;\n    loop invariant j < i ==> j == 13;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: i <= 21;\nloop invariant i3: 0 <= j;\nloop invariant i4: j <= 20;\nloop invariant i5: j >= i ==> j + i <= 21;\nloop invariant i6: j < i ==> j == 13;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= i ==> j + i <= 21 is established but not preserved.\nloop invariant j < i ==> j == 13 is established but not preserved.\nAssertion j == 13: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: 0 <= j;\nloop invariant i4: j <= 20;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j - i) % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: (j - i) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (j - i) % 2 == 0 is preserved but not established.\nAssertion j == 13: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 7;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: j >= i - 7;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= i - 7 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: j >= i - 7;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= i - 7 is inductive.\nAssertion j == 13: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i && i <= 21;\n  loop invariant 1 <= j && j <= 20;\n  loop invariant j >= i - 1;\n  loop invariant 2 * (i - 1) + j == 41;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i && i <= 21;\nloop invariant i2: 1 <= j && j <= 20;\nloop invariant i3: j >= i - 1;\nloop invariant i4: 2 * (i - 1) + j == 41;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i && i <= 21 is inductive.\nloop invariant 1 <= j && j <= 20 is inductive.\nloop invariant j >= i - 1 is inductive.\nloop invariant 2 * (i - 1) + j == 41 is preserved but not established.\nAssertion j == 13: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\n\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i ==> i % 2 == 1;\n    loop invariant j >= i ==> j % 2 == 0;\n    loop invariant j >= i ==> i + j == 21;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 21;\nloop invariant i2: 0 <= j <= 20;\nloop invariant i3: j >= i ==> i % 2 == 1;\nloop invariant i4: j >= i ==> j % 2 == 0;\nloop invariant i5: j >= i ==> i + j == 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i ==> i % 2 == 1 is inductive.\nloop invariant j >= i ==> j % 2 == 0 is established but not preserved.\nloop invariant j >= i ==> i + j == 21 is inductive.\nAssertion j == 13: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 21;\nloop invariant i2: 0 <= j <= 20;\nloop invariant i3: j >= i ==> i % 2 == 1;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
                "checker_message_after_prune": "loop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i ==> i % 2 == 1 is inductive.\nAssertion j == 13: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given code and gather some information about the pre-conditions, loop condition, and variable assignments.\n\n- Variable `i` is assigned the value `1`.\n- Variable `j` is assigned the value `20`.\n- The loop condition is `j >= i`.\n- Inside the loop body, `i` is incremented by `2` and `j` is decremented by `1`.\n- The post-condition is `j == 13`.\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination, such that these invariants imply the post-condition.\n\n```\n@*/\n  loop invariant 1 <= i;\n  loop invariant i <= j + 1;\n  loop invariant i <= 21;\n  loop invariant j <= 20;\n  loop invariant (i - 1) % 2 == 0;\n  loop invariant (20 - j) % 2 == 0;\n/*@```\n\nExplanation of the loop invariants:\n\n1. `1 <= i`: This invariant states that `i` is always greater than or equal to `1`. It is true before the loop since `i` is initialized to `1`. It is true during the loop since `i` is only incremented, never decremented.\n2. `i <= j + 1`: This invariant states that `i` is always less than or equal to `j + 1`. It is true before the loop since `i = 1` and `j = 20`. It is true during the loop since `i` is incremented by `2` and `j` is decremented by `1`.\n3. `i <= 21`: This invariant states that `i` is always less than or equal to `21`. It is true before the loop since `i = 1`. It is true during the loop since `i` is incremented by `2`, and the loop condition ensures that `j >= i`.\n4. `j <= 20`: This invariant states that `j` is always less than or equal to `20`. It is true before the loop since `j = 20`. It is true during the loop since `j` is only decremented, never incremented.\n5. `(i - 1) % 2 == 0`: This invariant states that `i` is always odd. It is true before the loop since `i = 1`. It is true during the loop since `i` is incremented by `2`, preserving its oddness.\n6. `(20 - j) % 2 == 0`: This invariant states that the difference between the initial value of `j` and its current value is always even. It is true before the loop since `j = 20`. It is true during the loop since `j` is decremented by `1` in each iteration.\n\nThese loop invariants imply the post-condition `j == 13` after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions / variable assignments:\n1. i = 1\n2. j = 20\n\nLoop condition:\nj >= i\n\nLoop body:\n1. i = i + 2\n2. j = j - 1\n\nPost-condition:\nj == 13\n\nNow, let's determine the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants should imply the post-condition.\n\nLoop invariants:\n1. i is always odd.\n2. j is always even.\n3. j >= i - 1\n4. i <= 21\n5. j <= 20\n\nHere's the loop invariant annotation for the while loop in the program:\n\n```\n/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i - 1;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- i is assigned 1\n- j is assigned 20\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (j >= i)\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= j + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments in the program:\n- i is assigned the value 1\n- j is assigned the value 20\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: j >= i\n- Loop body: i = i + 2; j = j - 1;\n\nNow, let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition. These invariants should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThe loop invariants for the given program are:\n```\n/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- i is initialized to 1\n- j is initialized to 20\n\nNow, let's analyze the loop condition and the loop body:\n- The loop condition is j >= i\n- In the loop body, i is incremented by 2, and j is decremented by 1\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant 20 >= j;\n    loop invariant j >= i ==> j + i >= 21;\n    loop invariant j < i ==> j + i <= 21;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- i = 1\n- j = 20\n\nLoop condition:\n- j >= i\n\nLet's find the loop invariants:\n\n1. i is always incremented by 2 in each iteration, so it is always odd.\n2. j is always decremented by 1 in each iteration, so it decreases monotonically.\n3. The difference between the initial values of i and j is 19. Since i increases by 2 and j decreases by 1 in each iteration, the difference between i and j decreases by 3 in each iteration.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j <= 20;\n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant (20 - j) * 3 == i - 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program. The pre-condition is the assignment of i and j:\n\n```\n(i = 1);\n(j = 20);\n```\n\nThe loop condition is:\n\n```\n(j >= i)\n```\n\nThe loop body updates i and j as follows:\n\n```\n(i  = (i + 2));\n(j  = (j - 1));\n```\n\nThe post-condition is:\n\n```\n(j == 13)\n```\n\nNow, let's find the loop invariants:\n\n1. i always increases by 2 in each loop iteration.\n2. j always decreases by 1 in each loop iteration.\n3. i starts from 1 and j starts from 20, so i is always less than or equal to j during the loop execution.\n4. i is always an odd number.\n5. j is initially an even number and decreases by 1, so j is always odd during the loop execution.\n\nSo, the loop invariants are:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= j;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make a note of the initial variable assignments and loop condition:\n\nInitial assignments:\n- i = 1\n- j = 20\n\nLoop condition:\n- j >= i\n\nNow let's find the loop invariants.\n\nBefore the loop execution:\n- i = 1\n- j = 20\n\nIn every iteration of the loop:\n- i increases by 2\n- j decreases by 1\n\nAfter the loop termination:\n- j < i\n\nWe also have the post-condition:\n- j == 13\n\nUsing this information, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j == 20 - (i - 1)/2;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is assigned the value 1.\n- j is assigned the value 20.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (j >= i).\n\nNow, let's find the necessary loop invariants for the while loop:\n- i is always odd, since it starts at 1 and increases by 2 in each iteration.\n- j is always even, since it starts at 20 and decreases by 1 in each iteration.\n- i <= j + 1, because the loop condition is (j >= i) and j decreases by 1 and i increases by 2 in each iteration.\n- The difference between j and i is decreasing in each iteration.\n\nThe loop invariants are:\n```\n/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the variable assignments before the loop:\n- i = 1\n- j = 20\n\nThen, analyze the loop body and loop condition:\n- Loop condition: j >= i\n- Loop body: i = i + 2, j = j - 1\n\nNow, output the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= 20;\n    loop invariant 1 <= j <= 20;\n    loop invariant i <= j + 1;\n    loop invariant (i % 2) == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is assigned 1\n- j is assigned 20\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: j >= i\n- In the loop body, i is incremented by 2 and j is decremented by 1\n\nNow, let's output the necessary loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 21;\n    loop invariant 0 <= j;\n    loop invariant j <= 20;\n    loop invariant j >= i ==> j + i <= 21;\n    loop invariant j < i ==> j == 13;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- i = 1\n- j = 20\n\nNow let's analyze the loop body and make a note of the loop condition:\n- Loop condition: j >= i\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j - i) % 2 == 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is assigned the value 1\n- j is assigned the value 20\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (j >= i)\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, i is equal to 1, j is equal to 20.\n2. In every iteration of the loop, i increases by 2 and j decreases by 1.\n3. After the loop termination, j must be equal to 13.\n\nBased on these observations, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 7;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\ni = 1;\nj = 20;\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nwhile (j >= i) {\n  i = i + 2;\n  j = j - 1;\n}\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition (j == 13):\n\n```\n/*@ \n  loop invariant 1 <= i && i <= 21;\n  loop invariant 1 <= j && j <= 20;\n  loop invariant j >= i - 1;\n  loop invariant 2 * (i - 1) + j == 41;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They are sufficient for Frama-C to verify the post-condition (j == 13) after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and gather the necessary information:\n\n1. Pre-conditions/Variable assignments:\n   - i is initialized to 1\n   - j is initialized to 20\n\n2. Loop condition:\n   - The loop executes as long as j >= i\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - i = 1\n   - j = 20\n\n2. In every iteration of the loop:\n   - i is always odd (i starts at 1 and increments by 2 in each iteration)\n   - j is always even (j starts at 20 and decrements by 1 in each iteration)\n   - j >= i at the beginning of each iteration\n   - i + j remains constant (i starts at 1, j starts at 20, and the sum remains 21 in each iteration)\n\n3. After the loop termination:\n   - The loop terminates when j < i, so the invariant j >= i is no longer true.\n\nConsidering all the invariants, here is the loop invariant annotation block for the given program:\n\n```\n/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i ==> i % 2 == 1;\n    loop invariant j >= i ==> j % 2 == 0;\n    loop invariant j >= i ==> i + j == 21;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "@*/\n  loop invariant 1 <= i;\n  loop invariant i <= j + 1;\n  loop invariant i <= 21;\n  loop invariant j <= 20;\n  loop invariant (i - 1) % 2 == 0;\n  loop invariant (20 - j) % 2 == 0;",
            "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i - 1;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n*/",
            "/*@\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= j + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 20 >= j;\n    loop invariant j >= i ==> j + i >= 21;\n    loop invariant j < i ==> j + i <= 21;\n*/",
            "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j <= 20;\n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant (20 - j) * 3 == i - 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= j;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i <= 21;\n    loop invariant j <= 20;\n    loop invariant i % 2 == 1;\n    loop invariant j == 20 - (i - 1)/2;\n*/",
            "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant i <= j + 1;\n    loop invariant i >= 1;\n    loop invariant j <= 20;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 20;\n    loop invariant 1 <= j <= 20;\n    loop invariant i <= j + 1;\n    loop invariant (i % 2) == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= 21;\n    loop invariant 0 <= j;\n    loop invariant j <= 20;\n    loop invariant j >= i ==> j + i <= 21;\n    loop invariant j < i ==> j == 13;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j - i) % 2 == 0;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 7;\n*/",
            "/*@ \n  loop invariant 1 <= i && i <= 21;\n  loop invariant 1 <= j && j <= 20;\n  loop invariant j >= i - 1;\n  loop invariant 2 * (i - 1) + j == 41;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 21;\n    loop invariant 0 <= j <= 20;\n    loop invariant j >= i ==> i % 2 == 1;\n    loop invariant j >= i ==> j % 2 == 0;\n    loop invariant j >= i ==> i + j == 21;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\nloop invariant i2: i <= j + 1;\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: (i - 1) % 2 == 0;\nloop invariant i6: (20 - j) % 2 == 0;\nloop invariant i7: i % 2 == 1;\nloop invariant i8: j % 2 == 0;\nloop invariant i9: j >= i - 1;\nloop invariant i10: i <= 21;\nloop invariant i11: j <= 20;\nloop invariant i12: i >= 1;\nloop invariant i13: j <= 20;\nloop invariant i14: i <= j + 1;\nloop invariant i15: 1 <= i <= 21;\nloop invariant i16: 0 <= j <= 20;\nloop invariant i17: j >= i - 2;\nloop invariant i18: (i - 1) % 2 == 0;\nloop invariant i19: 1 <= i;\nloop invariant i20: 20 >= j;\nloop invariant i21: j >= i ==> j + i >= 21;\nloop invariant i22: j < i ==> j + i <= 21;\nloop invariant i23: i % 2 == 1;\nloop invariant i24: j <= 20;\nloop invariant i25: i >= 1;\nloop invariant i26: j >= 0;\nloop invariant i27: (20 - j) * 3 == i - 1;\nloop invariant i28: 1 <= i;\nloop invariant i29: i <= j;\nloop invariant i30: j <= 20;\nloop invariant i31: i % 2 == 1;\nloop invariant i32: j % 2 == 1;\nloop invariant i33: 1 <= i;\nloop invariant i34: 1 <= j;\nloop invariant i35: i <= 21;\nloop invariant i36: j <= 20;\nloop invariant i37: i % 2 == 1;\nloop invariant i38: j == 20 - (i - 1)/2;\nloop invariant i39: i % 2 == 1;\nloop invariant i40: j % 2 == 0;\nloop invariant i41: i <= j + 1;\nloop invariant i42: i >= 1;\nloop invariant i43: j <= 20;\nloop invariant i44: 1 <= i <= 20;\nloop invariant i45: 1 <= j <= 20;\nloop invariant i46: i <= j + 1;\nloop invariant i47: (i % 2) == 1;\nloop invariant i48: 1 <= i;\nloop invariant i49: i <= 21;\nloop invariant i50: 0 <= j;\nloop invariant i51: j <= 20;\nloop invariant i52: j >= i ==> j + i <= 21;\nloop invariant i53: j < i ==> j == 13;\nloop invariant i54: i >= 1;\nloop invariant i55: j <= 20;\nloop invariant i56: (j - i) % 2 == 0;\nloop invariant i57: i >= 1;\nloop invariant i58: j <= 20;\nloop invariant i59: j >= i - 7;\nloop invariant i60: 1 <= i && i <= 21;\nloop invariant i61: 1 <= j && j <= 20;\nloop invariant i62: j >= i - 1;\nloop invariant i63: 2 * (i - 1) + j == 41;\nloop invariant i64: 1 <= i <= 21;\nloop invariant i65: 0 <= j <= 20;\nloop invariant i66: j >= i ==> i % 2 == 1;\nloop invariant i67: j >= i ==> j % 2 == 0;\nloop invariant i68: j >= i ==> i + j == 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant 1 <= i is inductive.\nloop invariant i <= j + 1 is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nloop invariant (20 - j) % 2 == 0 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 0 is inductive.\nloop invariant j >= i - 1 is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i <= j + 1 is inductive.\nloop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i - 2 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nloop invariant 1 <= i is inductive.\nloop invariant 20 >= j is inductive.\nloop invariant j >= i ==> j + i >= 21 is inductive.\nloop invariant j < i ==> j + i <= 21 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant (20 - j) * 3 == i - 1 is inductive.\nloop invariant 1 <= i is inductive.\nloop invariant i <= j is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 1 is preserved but not established.\nloop invariant 1 <= i is inductive.\nloop invariant 1 <= j is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j == 20 - (i - 1)/2 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant j % 2 == 0 is inductive.\nloop invariant i <= j + 1 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant 1 <= i <= 20 is inductive.\nloop invariant 1 <= j <= 20 is inductive.\nloop invariant i <= j + 1 is inductive.\nloop invariant (i % 2) == 1 is inductive.\nloop invariant 1 <= i is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= i ==> j + i <= 21 is inductive.\nloop invariant j < i ==> j == 13 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (j - i) % 2 == 0 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= i - 7 is inductive.\nloop invariant 1 <= i && i <= 21 is inductive.\nloop invariant 1 <= j && j <= 20 is inductive.\nloop invariant j >= i - 1 is inductive.\nloop invariant 2 * (i - 1) + j == 41 is inductive.\nloop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i ==> i % 2 == 1 is inductive.\nloop invariant j >= i ==> j % 2 == 0 is inductive.\nloop invariant j >= i ==> i + j == 21 is inductive.\nAssertion j == 13: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i;\n\nloop invariant i3: i <= 21;\nloop invariant i4: j <= 20;\nloop invariant i5: (i - 1) % 2 == 0;\n\nloop invariant i7: i % 2 == 1;\n\n\nloop invariant i12: i >= 1;\nloop invariant i15: 1 <= i <= 21;\nloop invariant i16: 0 <= j <= 20;\nloop invariant i17: j >= i - 2;\nloop invariant i20: 20 >= j;\nloop invariant i21: j >= i ==> j + i >= 21;\n\nloop invariant i26: j >= 0;\n\n\n\nloop invariant i34: 1 <= j;\nloop invariant i38: j == 20 - (i - 1)/2;\nloop invariant i44: 1 <= i <= 20;\nloop invariant i45: 1 <= j <= 20;\nloop invariant i47: (i % 2) == 1;\nloop invariant i50: 0 <= j;\n\nloop invariant i53: j < i ==> j == 13;\n\nloop invariant i59: j >= i - 7;\nloop invariant i60: 1 <= i && i <= 21;\nloop invariant i61: 1 <= j && j <= 20;\n\nloop invariant i66: j >= i ==> i % 2 == 1;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant 1 <= i is inductive.\nloop invariant i <= 21 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant (i - 1) % 2 == 0 is inductive.\nloop invariant i % 2 == 1 is inductive.\nloop invariant i >= 1 is inductive.\nloop invariant 1 <= i <= 21 is inductive.\nloop invariant 0 <= j <= 20 is inductive.\nloop invariant j >= i - 2 is inductive.\nloop invariant 20 >= j is inductive.\nloop invariant j >= i ==> j + i >= 21 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant 1 <= j is inductive.\nloop invariant j == 20 - (i - 1)/2 is inductive.\nloop invariant 1 <= i <= 20 is inductive.\nloop invariant 1 <= j <= 20 is inductive.\nloop invariant (i % 2) == 1 is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant j < i ==> j == 13 is inductive.\nloop invariant j >= i - 7 is inductive.\nloop invariant 1 <= i && i <= 21 is inductive.\nloop invariant 1 <= j && j <= 20 is inductive.\nloop invariant j >= i ==> i % 2 == 1 is inductive.\nAssertion j == 13: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            15,
            17,
            18,
            19,
            20,
            21,
            22
        ],
        "failure": [
            2,
            14,
            16
        ],
        "skipped": [],
        "total": 23,
        "success_rate": 0.8695652173913043
    }
}