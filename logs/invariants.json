{
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant x <= n - 1 ==> x < n;\n    loop invariant x > n - 1 ==> x == n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant (x <= n - 1) ==> (x == n - 1);\n    loop invariant (x > n - 1) ==> (x == n);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant n >= 0 ==> x <= n - 1;\n    loop invariant n < 0 ==> x == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= n;\n  loop invariant n <= n;\n*/",
            "@{\n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant x == 0 ==> x <= n - 1;\n}",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "@ loop invariant 0 <= x;\n@ loop invariant x <= n;",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n*/"
        ],
        "expressions": "(x <= n - 1) ==> (x == n - 1),
 (x > n - 1) ==> (x == n),
 0 <= x,
 0 <= x <= n,
 n < 0 ==> x == 0,
 n <= n,
 n >= 0 ==> x <= n - 1,
 x <= n,
 x <= n - 1 ==> x < n,
 x == 0 ==> x <= n - 1,
 x > n - 1 ==> x == n,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum03-2.c": {
        "completions": [
            "/*@ \n    loop invariant sn == x * a || sn == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn % a == 0 && sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn % a == 0;\n    loop invariant sn == x * a;\n    loop invariant sn >= x * a;\n    loop invariant x <= sn;\n*/",
            "/*@ \n    loop invariant sn == x * a || sn == 0;\n    loop invariant 0 <= x;\n    loop invariant 0 <= sn;\n*/",
            "/*@ \n    loop invariant sn % a == 0;\n    loop invariant sn == x * a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n    loop invariant x <= UINT_MAX / a;\n    loop invariant sn <= UINT_MAX - a;\n*/",
            "/*@\n    loop invariant sn == x * a || sn == 0;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn == x * a || sn == 0;\n*/",
            "/*@\n    loop invariant sn == x * a;\n    loop invariant x <= UINT_MAX;\n    loop invariant sn <= UINT_MAX - a;\n*/",
            "/*@ \n    loop invariant x * a <= sn;\n    loop invariant sn == x * a || sn == 0;\n*/",
            "/*@ \n    loop invariant sn % a == 0;\n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n    loop invariant x <= UINT_MAX;\n    loop invariant sn <= UINT_MAX - a + 1;\n*/",
            "/*@\n    loop invariant sn == x * a || sn == 0;\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n*/"
        ],
        "expressions": "0 <= sn,
 0 <= x,
 sn % a == 0,
 sn % a == 0 && sn >= 0,
 sn <= UINT_MAX - a,
 sn <= UINT_MAX - a + 1,
 sn == x * a,
 sn == x * a || sn == 0,
 sn >= 0,
 sn >= x * a,
 x * a <= sn,
 x <= UINT_MAX,
 x <= UINT_MAX / a,
 x <= sn,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c": {
        "completions": [
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant x + y >= -50;\n    loop invariant x < 0 ==> y > 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + 50 <= y * (y - 1) / 2;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= -49;\n    loop invariant x + y >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * y >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant x+y >= -50;\n    loop invariant y >= 1;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 == -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= \\at(y, Pre);\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 1;\n*/",
            "/*@ \n  loop invariant x <= 0;\n  loop invariant x+y >= 0;\n  loop invariant y >= 1 ==> x <= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant x + y * (y - 1) / 2 == -50;\n*/",
            "@{\n    loop invariant x < 0;\n    loop invariant y == \\at(y, Pre) + (loop iteration count);\n    loop invariant \\at(x, Pre) <= 0 ==> x == \\at(x, Pre) + (sum of y values over all iterations);\n}",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n    loop invariant y > 0;\n*/",
            "/*@\n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + 50 >= y;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nPre-conditions and variable assignments:\n- x is initialized to -50.\n- y is not initialized, so it has a garbage value.\n\nLoop condition: x < 0\n\nLet's find the necessary loop invariants.\n\n/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 == (-50) * y + 50 * 50 / 2;\n*/\nIn these loop invariants:\n- The first invariant ensures that x remains less than or equal to 0 during the loop execution, and it is true before the loop (since x is initialized to -50) and in every iteration.\n- The second invariant ensures that y is non-negative during the loop execution. This is true before the loop (since y has a garbage value, but it is incremented in every iteration of the loop) and in every iteration.\n- The third invariant represents the relation between x and y during the loop execution. It is true before the loop, in every iteration, and after the loop termination, and it implies the post-condition y > 0.",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; k >= 0 && k < y ==> x >= -50 + k * (k + 1) / 2;\n*/"
        ],
        "expressions": "-50 <= x,
 \\at(x, Pre) <= 0 ==> x == \\at(x, Pre) + (sum of y values over all iterations),
 \\forall integer k; k >= 0 && k < y ==> x >= -50 + k * (k + 1) / 2,
 x + 50 <= y * (y - 1) / 2,
 x + 50 >= y,
 x + y * (y - 1) / 2 == (-50) * y + 50 * 50 / 2,
 x + y * (y - 1) / 2 == -50,
 x + y * (y - 1) / 2 >= -50,
 x + y * y >= -50,
 x + y >= -50,
 x < 0,
 x < 0 ==> y > 0,
 x <= 0,
 x+y >= -50,
 x+y >= 0,
 y == \\at(y, Pre) + (loop iteration count),
 y > 0,
 y >= -49,
 y >= 0,
 y >= 1,
 y >= 1 ==> x <= -50,
 y >= \\at(y, Pre)"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c": {
        "completions": [
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * y >= -50;\n*/",
            "/*@ \n    loop invariant -50 <= x && x <= 0;\n    loop invariant x + y > -50;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 == -50;\n*/",
            "/*@\n  loop invariant x <= 0;\n  loop invariant y >= 0;\n  loop invariant x + y * y >= -50;\n  loop invariant x + y * y < 0 ==> x < 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -50 <= x;\n    loop invariant y >= 0;\n    loop invariant x+y >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant \\forall integer k; 0 <= k < y ==> x + k*y >= -50;\n*/",
            "/*@ \n  loop invariant x <= 0;\n  loop invariant y >= 0;\n  loop invariant \\old(y) <= y;\n*/",
            "/*@ \n    loop invariant x <= \\old(x) + y;\n    loop invariant y >= 0;\n*/"
        ],
        "expressions": "-50 <= x,
 -50 <= x && x <= 0,
 \\forall integer k; 0 <= k < y ==> x + k*y >= -50,
 \\old(y) <= y,
 x + y * (y - 1) / 2 == -50,
 x + y * (y - 1) / 2 >= -50,
 x + y * y < 0 ==> x < 0,
 x + y * y >= -50,
 x + y > -50,
 x <= 0,
 x <= \\old(x) + y,
 x+y >= 0,
 y >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/gsv2008.c": {
        "completions": [
            "/*@ \n  loop invariant -50 <= x < 0;\n  loop invariant -1000 < y <= LARGE_INT;\n  loop invariant y > 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y > -1000;\n    loop invariant y < LARGE_INT;\n    loop invariant x + y >= -50;\n*/",
            "/*@ \n    loop invariant x + y * (x < 0) >= -50;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant y > 0 ==> x >= 0;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant x+y*(y+1)/2 >= -50;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y && y <= LARGE_INT;\n    loop invariant x + 50 <= y * (y - 1) / 2;\n*/",
            "/*@ \n    loop invariant y >= -999 && y <= LARGE_INT;\n    loop invariant x + y * (LARGE_INT - y) >= 0 ==> x >= 0;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y <= x + 50;\n    loop invariant y <= LARGE_INT;\n*/",
            "/*@ \n    loop invariant x < 0 ==> x <= x + y;\n    loop invariant x < 0 ==> y > 0;\n    loop invariant x < 0 ==> y < y + 1;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant y >= \\at(y, Pre);\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant x < 0 ==> y > 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant y >= \\at(y, Pre);\n*/",
            "/*@ \n    loop invariant -50 <= x < 0;\n    loop invariant -1000 < y <= LARGE_INT;\n    loop invariant x + y * (1 - (x < 0)) >= 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant \\forall int k; 0 <= k < y ==> x+k < 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant y >= -999 && y <= LARGE_INT;\n    loop invariant x + y >= -50;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 <= 0;\n*/"
        ],
        "expressions": "-1000 < y,
 -1000 < y && y < LARGE_INT,
 -1000 < y && y <= LARGE_INT,
 -1000 < y <= LARGE_INT,
 -1000 < y <= x + 50,
 -50 <= x,
 -50 <= x < 0,
 \\forall int k; 0 <= k < y ==> x+k < 0,
 x + 50 <= y * (y - 1) / 2,
 x + y * (1 - (x < 0)) >= 0,
 x + y * (LARGE_INT - y) >= 0 ==> x >= 0,
 x + y * (x < 0) >= -50,
 x + y * (y - 1) / 2 <= 0,
 x + y >= -50,
 x < 0 ==> x <= x + y,
 x < 0 ==> y < y + 1,
 x < 0 ==> y > 0,
 x <= 0,
 x+y*(y+1)/2 >= -50,
 y < LARGE_INT,
 y <= LARGE_INT,
 y > -1000,
 y > 0,
 y > 0 ==> x >= 0,
 y >= -999 && y <= LARGE_INT,
 y >= \\at(y, Pre)"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_1.c": {
        "completions": [
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "//@\nloop invariant x == 0;",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@\n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "//@\nloop invariant x == 0;",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/"
        ],
        "expressions": "x == 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/while_infinite_loop_2.c": {
        "completions": [
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "//@\n    loop invariant x == 0;",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@\n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n  loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/",
            "/*@ \n    loop invariant x == 0;\n*/"
        ],
        "expressions": "x == 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gsv2008_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@\n    loop invariant -50 <= x;\n    loop invariant -1000 < y <= LARGE_INT;\n    loop invariant y < LARGE_INT ==> y > 0;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant y == (\\at(y, Pre) + (x - (-50)));\n*/",
            "/*@ \n    loop invariant x < 0;\n    loop invariant -1000 < y < LARGE_INT + 50;\n    loop invariant y > 0;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 <= 0 ==> x + 50 >= 0;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y <= LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -50 <= x;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant y >= (x + 50);\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant y >= 1;\n    loop invariant x + y >= -50;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant x + (y - 1) * (y - 1) >= -50;\n*/",
            "/*@ \n    loop invariant x + 50 <= y;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n*/",
            "/*@ \n    loop invariant x <= 0;\n    loop invariant -50 <= x;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant y <= y + x;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 <= 0;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y <= LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 <= 0;\n*/",
            "/*@ \n    loop invariant x + y > \\at(x, Pre) && x < 0;\n    loop invariant y >= \\at(y, Pre);\n    loop invariant -1000 < y && y < LARGE_INT;\n*/",
            "/*@ \n    loop invariant -50 <= x;\n    loop invariant -1000 < y && y < LARGE_INT;\n    loop invariant (x < 0) ==> y > 0;\n*/",
            "/*@ \n    loop invariant x + y * (y - 1) / 2 <= 0;\n    loop invariant -50 <= x;\n    loop invariant -1000 < y;\n    loop invariant y < LARGE_INT;\n    loop invariant x + y * (y - 1) / 2 < 0 ==> x < 0;\n*/"
        ],
        "expressions": "(x < 0) ==> y > 0,
 -1000 < y,
 -1000 < y && y < LARGE_INT,
 -1000 < y < LARGE_INT + 50,
 -1000 < y <= LARGE_INT,
 -50 <= x,
 x + (y - 1) * (y - 1) >= -50,
 x + 50 <= y,
 x + y * (y - 1) / 2 < 0 ==> x < 0,
 x + y * (y - 1) / 2 <= 0,
 x + y * (y - 1) / 2 <= 0 ==> x + 50 >= 0,
 x + y * (y - 1) / 2 >= -50,
 x + y > \\at(x, Pre) && x < 0,
 x + y >= -50,
 x < 0,
 x <= 0,
 y < LARGE_INT,
 y < LARGE_INT ==> y > 0,
 y <= y + x,
 y == (\\at(y, Pre) + (x - (-50))),
 y > 0,
 y >= (x + 50),
 y >= 1,
 y >= \\at(y, Pre)"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/overflow_1-1.c": {
        "completions": [
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "//@\nloop invariant x % 2 == 0;\nloop invariant x >= 10;",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n  loop invariant x >= 10;\n  loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "@{\n    loop invariant x % 2 == 0;\n}",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@\n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@\n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/"
        ],
        "expressions": "x % 2 == 0,
 x >= 10"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c": {
        "completions": [
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "//@\nloop invariant x >= 10;\nloop invariant x % 2 == 0;",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n    loop invariant \\forall integer i; 0 <= i < \\loop_iteration_number ==> x > \\at(x, LoopEntry) + 2 * i;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n */",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant (x - 10) % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 10;\n    loop variant x;\n*/",
            "/*@ \n  loop invariant x >= 10;\n  loop invariant x % 2 == 0;\n*/",
            "/*@ \n  loop invariant x >= 10;\n  loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x >= 10;\n    loop invariant x % 2 == 0;\n*/"
        ],
        "expressions": "(x - 10) % 2 == 0,
 \\forall integer i; 0 <= i < \\loop_iteration_number ==> x > \\at(x, LoopEntry) + 2 * i,
 x % 2 == 0,
 x >= 10"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c": {
        "completions": [
            "/*@ \n    loop invariant n >= 0;\n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant k >= 0;\n    loop invariant 2 * k == n - i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant n >= 0;\n    loop invariant i % 2 == 0;\n    loop invariant k + i/2 == \\at(k, Pre);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= n;\n    loop invariant k + i == n;\n    loop invariant 2*i + 2*k >= n;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant k == n - i/2;\n  loop invariant n%2 == 0 ==> i%2 == 0;\n  loop invariant n%2 != 0 ==> i%2 != 0;\n*/",
            "/*@ \n  loop invariant i >= 0;\n  loop invariant n >= 0;\n  loop invariant 2 * k + i == 2 * n;\n  loop invariant i <= n;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= k;\n    loop invariant 0 <= n;\n    loop invariant i <= n;\n    loop invariant k <= n;\n    loop invariant 2 * k + i == 2 * n;\n*/",
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant k + i == \\at(k, Pre) + \\at(i, Pre);\n    loop invariant (i % 2) == 0;\n*/",
            "/*@ \n  loop invariant i % 2 == 0;\n  loop invariant k + i / 2 == n;\n  loop invariant i <= n;\n  loop invariant k >= (n - i) / 2;\n*/",
            "//@\n  loop invariant 0 <= i;\n  loop invariant 0 <= k;\n  loop invariant i <= n;\n  loop invariant i + 2 * k == 2 * n;\n*/",
            "/*@ \n  loop invariant 0 <= i;\n  loop invariant 0 <= k;\n  loop invariant 0 <= n;\n  loop invariant k + i == n;\n  loop invariant i % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant k == n - i/2;\n    loop invariant n >= 0;\n*/",
            "while (i<n) {\n  k--;\n  i+=2;\n}",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k;\n    loop invariant i == 2*(n - k);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k >= n/2 - i/2;\n    loop invariant (i % 2 == 0) ==> (k % 2 == 0);\n    loop invariant (i % 2 != 0) ==> (k % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k + i == n;\n    loop invariant 0 <= k;\n*/"
        ],
        "expressions": "(i % 2 != 0) ==> (k % 2 != 0),
 (i % 2 == 0) ==> (k % 2 == 0),
 (i % 2) == 0,
 0 <= i,
 0 <= i && i <= n,
 0 <= i <= n,
 0 <= k,
 0 <= k <= n,
 0 <= n,
 2 * k + i == 2 * n,
 2 * k == n - i,
 2*i + 2*k >= n,
 i % 2 == 0,
 i + 2 * k == 2 * n,
 i <= n,
 i == 2*(n - k),
 i >= 0,
 k + i / 2 == n,
 k + i == \\at(k, Pre) + \\at(i, Pre),
 k + i == n,
 k + i/2 == \\at(k, Pre),
 k <= n,
 k == n - i/2,
 k >= (n - i) / 2,
 k >= 0,
 k >= n/2 - i/2,
 n >= 0,
 n%2 != 0 ==> i%2 != 0,
 n%2 == 0 ==> i%2 == 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invgen/MADWiFi-encode_ie_ok.c": {
        "completions": [
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n  loop invariant 0 <= p <= bufsize_0 - 2;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant i * 2 <= p <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= ielen;\n    loop invariant p < bufsize_0;\n    loop invariant 0 <= bufsize && bufsize < bufsize_0;\n    loop invariant i * 2 + leader_len == p;\n    loop invariant bufsize + p == bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= ielen;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2*(ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize <= bufsize_0 - leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p <= bufsize_0 - 2;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == 2 * i + leader_len;\n    loop invariant bufsize == bufsize_0 - (2 * i + leader_len);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "@{\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize > 2;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant p + 1 < bufsize_0;\n}",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize <= bufsize_0;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize + p == bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize <= bufsize_0;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant p == leader_len + 2 * i;\n*/"
        ],
        "expressions": "0 <= bufsize,
 0 <= bufsize && bufsize < bufsize_0,
 0 <= bufsize <= bufsize_0,
 0 <= bufsize <= bufsize_0 - leader_len,
 0 <= i && i <= ielen,
 0 <= i <= ielen,
 0 <= p <= bufsize_0,
 0 <= p <= bufsize_0 - 2,
 bufsize + p == bufsize_0,
 bufsize <= bufsize_0,
 bufsize == bufsize_0 - (2 * i + leader_len),
 bufsize == bufsize_0 - leader_len - 2 * i,
 bufsize == bufsize_0 - p,
 bufsize > 2,
 bufsize >= 2 * (ielen - i),
 bufsize >= 2*(ielen - i),
 bufsize_0 == bufsize + leader_len,
 i * 2 + leader_len == p,
 i * 2 <= p <= bufsize_0,
 p + 1 < bufsize_0,
 p < bufsize_0,
 p == 2 * i + leader_len,
 p == leader_len + 2 * i,
 p == leader_len + 2*i"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/invgen/MADWiFi-encode_ie_ok.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize_0 >= bufsize + 2 * i;\n    loop invariant bufsize > 2 ==> 0 <= p;\n    loop invariant bufsize > 2 ==> p + 1 < bufsize_0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= ielen;\n    loop invariant p >= leader_len;\n    loop invariant p <= leader_len + 2*i;\n    loop invariant bufsize >= 2;\n    loop invariant bufsize == bufsize_0 - leader_len - 2*i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant leader_len <= p < bufsize_0;\n    loop invariant bufsize >= 2;\n    loop invariant bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= ielen;\n    loop invariant 0 <= p && p < bufsize_0;\n    loop invariant p % 2 == 0;\n    loop invariant p <= bufsize_0 - 2*i;\n    loop invariant bufsize >= 2;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= bufsize_0;\n  loop invariant leader_len <= p <= leader_len + 2 * i;\n  loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n  loop invariant bufsize_0 - p == bufsize + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= ielen;\n    loop invariant 0 <= p && p <= bufsize_0 - 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant p >= leader_len;\n    loop invariant i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= ielen;\n    loop invariant 0 <= p;\n    loop invariant p < bufsize_0;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize <= bufsize_0;\n */",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize >= 0 && bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant 0 <= p <= bufsize_0 - 2;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2*i;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize > 2 ==> 0 <= p <= bufsize_0 - 2;\n  loop invariant bufsize > 2 ==> p+1 < bufsize_0;\n  loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize >= 0;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize + p == bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize <= bufsize_0;\n    loop invariant p + 2*i <= bufsize_0;\n    loop invariant p == leader_len + 2*i;\n*/"
        ],
        "expressions": "0 <= bufsize,
 0 <= bufsize <= bufsize_0,
 0 <= bufsize_0,
 0 <= i,
 0 <= i && i <= ielen,
 0 <= i <= ielen,
 0 <= p,
 0 <= p && p < bufsize_0,
 0 <= p && p <= bufsize_0 - 2 * i,
 0 <= p <= bufsize_0,
 0 <= p <= bufsize_0 - 2,
 bufsize + p == bufsize_0,
 bufsize <= bufsize_0,
 bufsize == bufsize_0 - leader_len - 2 * i,
 bufsize == bufsize_0 - leader_len - 2*i,
 bufsize > 2 ==> 0 <= p,
 bufsize > 2 ==> 0 <= p <= bufsize_0 - 2,
 bufsize > 2 ==> p + 1 < bufsize_0,
 bufsize > 2 ==> p+1 < bufsize_0,
 bufsize >= 0,
 bufsize >= 0 && bufsize == bufsize_0 - leader_len - 2 * i,
 bufsize >= 2,
 bufsize >= 2 * (ielen - i),
 bufsize_0 - p == bufsize + 2 * i,
 bufsize_0 == bufsize + leader_len,
 bufsize_0 >= bufsize + 2 * i,
 i <= ielen,
 i >= 0,
 i >= 0 && i <= ielen,
 leader_len <= p < bufsize_0,
 leader_len <= p <= leader_len + 2 * i,
 p % 2 == 0,
 p + 2*i <= bufsize_0,
 p < bufsize_0,
 p <= bufsize_0 - 2*i,
 p <= leader_len + 2*i,
 p == leader_len + 2 * i,
 p == leader_len + 2*i,
 p >= leader_len"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/invgen/MADWiFi-encode_ie_ok.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant p >= leader_len;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2*i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant p >= leader_len;\n    loop invariant i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p + 2*i <= bufsize_0;\n */",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 < bufsize <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0 - 1;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 0;\n    loop invariant bufsize_0 >= bufsize;\n    loop invariant p >= leader_len;\n    loop invariant p <= bufsize_0;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant 0 <= p;\n    loop invariant p + 1 < bufsize_0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant (bufsize > 2) ==> (p + 1 < bufsize_0);\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0 - 2*i;\n  loop invariant bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize >= 2 * (ielen - i);\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 >= bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant bufsize > 2 || i == ielen;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant i * 2 <= bufsize;\n    loop invariant p == leader_len + i * 2;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant bufsize > 2;\n*/"
        ],
        "expressions": "(bufsize > 2) ==> (p + 1 < bufsize_0),
 0 < bufsize <= bufsize_0,
 0 <= bufsize,
 0 <= i,
 0 <= i <= ielen,
 0 <= p,
 0 <= p <= bufsize_0 - 1,
 0 <= p <= bufsize_0 - 2*i,
 bufsize == bufsize_0 - leader_len - 2 * i,
 bufsize > 2,
 bufsize > 2 || i == ielen,
 bufsize >= 0,
 bufsize >= 2,
 bufsize >= 2 * (ielen - i),
 bufsize >= 2*i,
 bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len,
 bufsize_0 == bufsize + leader_len,
 bufsize_0 >= bufsize,
 bufsize_0 >= bufsize + leader_len,
 i * 2 <= bufsize,
 i <= ielen,
 i >= 0,
 p + 1 < bufsize_0,
 p + 2*i <= bufsize_0,
 p <= bufsize_0,
 p == leader_len + 2 * i,
 p == leader_len + 2*i,
 p == leader_len + i * 2,
 p >= leader_len"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@\n  loop invariant 0 <= i && i <= ielen;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant p == leader_len + 2*i;\n  loop invariant 0 <= p && p < bufsize_0;\n  loop invariant bufsize >= 2;\n  loop invariant bufsize > 2*(ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= bufsize;\n    loop invariant 0 <= p;\n    loop invariant bufsize + leader_len == bufsize_0;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n*/",
            "/*@\n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize_0 >= 2 * ielen;\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant 0 <= p;\n    loop invariant p <= bufsize_0 - 1;\n    loop invariant p == leader_len + 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize > 0;\n    loop invariant bufsize >= 2 * (ielen - i);\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize_0 == bufsize + leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize == bufsize_0 - leader_len - 2*i;\n    loop invariant bufsize > 2 || i == ielen;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant 0 <= p <= bufsize_0;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2 * i;\n    loop invariant bufsize == bufsize_0 - p;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant bufsize_0 == bufsize + leader_len;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant p == leader_len + 2*i;\n    loop invariant bufsize >= 2*(ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= p < bufsize_0;\n    loop invariant 0 <= i <= ielen;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant p == 2 * i + leader_len;\n    loop invariant bufsize_0 == bufsize + leader_len;\n    loop invariant bufsize >= 2 * (ielen - i);\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= ielen;\n    loop invariant 0 <= p;\n    loop invariant p+1 < bufsize_0;\n    loop invariant p == 2*i + leader_len;\n    loop invariant bufsize == bufsize_0 - 2*i - leader_len;\n*/",
            "/*@ \n    loop invariant 0 <= i <= ielen;\n    loop invariant leader_len <= p <= leader_len + 2*i;\n    loop invariant bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len;\n    loop invariant bufsize == bufsize_0 - p;\n*/",
            "/*@ \n  loop invariant 0 <= i <= ielen;\n  loop invariant 0 <= p <= bufsize_0;\n  loop invariant p == leader_len + 2 * i;\n  loop invariant bufsize == bufsize_0 - leader_len - 2 * i;\n  loop invariant bufsize >= 2 * (ielen - i);\n*/"
        ],
        "expressions": "0 <= bufsize,
 0 <= i,
 0 <= i && i <= ielen,
 0 <= i <= ielen,
 0 <= p,
 0 <= p && p < bufsize_0,
 0 <= p < bufsize_0,
 0 <= p <= bufsize_0,
 bufsize + leader_len == bufsize_0,
 bufsize == bufsize_0 - 2*i - leader_len,
 bufsize == bufsize_0 - leader_len - 2 * i,
 bufsize == bufsize_0 - leader_len - 2*i,
 bufsize == bufsize_0 - p,
 bufsize > 0,
 bufsize > 2 || i == ielen,
 bufsize > 2*(ielen - i),
 bufsize >= 2,
 bufsize >= 2 * (ielen - i),
 bufsize >= 2*(ielen - i),
 bufsize_0 - leader_len - 2*i <= bufsize <= bufsize_0 - leader_len,
 bufsize_0 == bufsize + leader_len,
 bufsize_0 >= 2 * ielen,
 i <= ielen,
 leader_len <= p <= leader_len + 2*i,
 p <= bufsize_0 - 1,
 p == 2 * i + leader_len,
 p == 2*i + leader_len,
 p == leader_len + 2 * i,
 p == leader_len + 2*i,
 p+1 < bufsize_0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/incn.v.c": {
        "completions": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant N < 0 ==> x == 0;\n*/",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant x <= N;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n*/",
            "/*@\n    loop invariant 0 <= x <= N;\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x <= N;",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N ==> 1 <= N;\n    loop invariant x == N || x < N;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N;\n*/",
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= N;\n*/",
            "@{\n    loop invariant 0 <= x;\n    loop invariant x <= N;\n    loop invariant N >= 0 ==> x == N;\n}",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N;\n    loop invariant (x == 0) ==> (N <= 0);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= N;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= N;\n*/"
        ],
        "expressions": "(x == 0) ==> (N <= 0),
 0 <= x,
 0 <= x <= N,
 N < 0 ==> x == 0,
 N >= 0 ==> x == N,
 x <= N,
 x <= N ==> 1 <= N,
 x == N || x < N,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/22.c": {
        "completions": [
            "/*@ \n    loop invariant x >= 0 && y >= 0 && z >= 0;\n    loop invariant y == z;\n    loop invariant k == (x + y + z);\n    loop invariant (k % 3 == 0) ==> (x == y);\n    loop invariant (k % 3 != 0) ==> (x == y - 1);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant 0 <= k;\n    loop invariant x <= y;\n    loop invariant y <= z;\n    loop invariant x + y <= k;\n    loop invariant (k % 3 == 0) ==> (x == y);\n    loop invariant (k % 3 != 0) ==> (x == y - 1);\n*/",
            "/*@ \n  loop invariant x <= y && y <= z;\n  loop invariant (k % 3 == 0) ==> (x >= 0 && x <= y && y == z);\n  loop invariant (k % 3 != 0) ==> (x >= 0 && x == y-1 && y == z);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= y;\n    loop invariant y == z;\n    loop invariant k == x + y + z;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= y && y <= z;\n    loop invariant k == x + y + z;\n    loop invariant (k % 3 == 0) ==> (x == y || x == z);\n */",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant y == z;\n    loop invariant x <= y;\n    loop invariant k == x + y + z;\n*/",
            "//@\nloop invariant x >= 0;\nloop invariant y >= 0;\nloop invariant z >= 0;\nloop invariant k >= 0;\nloop invariant x <= y;\nloop invariant y == z;\nloop invariant k == x + y + z;",
            "/*@ \n    loop invariant 0 <= x && x <= y;\n    loop invariant 0 <= y && y <= z;\n    loop invariant 0 <= z;\n    loop invariant k == x + y + z;\n    loop invariant (k % 3 == 0) ==> (x == y / 3);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant k >= 0;\n    loop invariant y == x || y == x+1;\n    loop invariant z == y;\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= y && y == z;\n    loop invariant (k % 3 == 0) ==> (k == 3*x);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant k >= 0;\n    loop invariant x <= y;\n    loop invariant y == z;\n*/",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant z >= 0;\n  loop invariant k >= 0;\n  loop invariant x <= y;\n  loop invariant y == z;\n  loop invariant k == x + y + z;\n*/",
            "int x = 0;\nint y = 0;\nint z = 0;\nint k = 0;",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= y;\n    loop invariant y == z;\n    loop invariant k == x + y + z;\n*/",
            "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= y;\n    loop invariant y == z;\n    loop invariant k == x + y + z;\n*/"
        ],
        "expressions": "(k % 3 != 0) ==> (x == y - 1),
 (k % 3 != 0) ==> (x >= 0 && x == y-1 && y == z),
 (k % 3 == 0) ==> (k == 3*x),
 (k % 3 == 0) ==> (x == y / 3),
 (k % 3 == 0) ==> (x == y || x == z),
 (k % 3 == 0) ==> (x == y),
 (k % 3 == 0) ==> (x >= 0 && x <= y && y == z),
 0 <= k,
 0 <= x,
 0 <= x && x <= y,
 0 <= x && x <= y && y == z,
 0 <= y,
 0 <= y && y <= z,
 0 <= z,
 k == (x + y + z),
 k == x + y + z,
 k >= 0,
 x + y <= k,
 x <= y,
 x <= y && y <= z,
 x >= 0,
 x >= 0 && y >= 0 && z >= 0,
 y <= z,
 y == x || y == x+1,
 y == z,
 y >= 0,
 z == y,
 z >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/even.c": {
        "completions": [
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n */",
            "/*@ \n    loop invariant x % 2 == 0;\n */",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop variant -1;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n  loop invariant x % 2 == 0;\n  loop invariant x <= UINT_MAX;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/",
            "/*@ \n    loop invariant x % 2 == 0;\n*/"
        ],
        "expressions": "x % 2 == 0,
 x <= UINT_MAX,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/mod4.c": {
        "completions": [
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n    loop variant (UINT_MAX - x);\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "//@\nloop invariant x % 4 == 0;\nloop invariant x >= 0;",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@\n    loop invariant x % 4 == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n  loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/",
            "/*@ \n    loop invariant x % 4 == 0;\n*/"
        ],
        "expressions": "x % 4 == 0,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-invariants/odd.c": {
        "completions": [
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n  loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n  loop invariant x % 2 == 1;\n*/",
            "/*@\n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x >= 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n  loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x >= 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x >= 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant x % 2 == 1;\n*/"
        ],
        "expressions": "x % 2 == 1,
 x >= 1"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop17_VeriMAP_true.c": {
        "completions": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= N;\n    loop invariant j >= 0;\n    loop invariant j <= N;\n    loop invariant j == i;\n    loop invariant k == (i < 1 ? 1 : 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i == 0) ==> (k == 1);\n    loop invariant (i > 0) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j;\n    loop invariant 0 <= k;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant j == i;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n  loop invariant i >= 0;\n  loop invariant j >= 0;\n  loop invariant k >= 0;\n  loop invariant i <= N;\n  loop invariant j == i;\n  loop invariant i < 1 ==> k == 1;\n  loop invariant i >= 1 ==> k == 0;\n*/",
            "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= N;\n    loop invariant i == j;\n    loop invariant (i < 1) ==> (k == 1);\n    loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@\n  loop invariant 0 <= i <= N;\n  loop invariant 0 <= j <= N;\n  loop invariant 0 <= k <= 1;\n  loop invariant i == j;\n  loop invariant (i < 1) ==> (k == 1);\n  loop invariant (i >= 1) ==> (k == 0);\n*/",
            "/*@\n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= j <= N;\n    loop invariant 0 <= k <= 1;\n    loop invariant i == j;\n    loop invariant k == 1 ==> i < 1;\n    loop invariant i >= 1 ==> k == 0;\n*/"
        ],
        "expressions": "(i < 1) ==> (k == 1),
 (i == 0) ==> (k == 1),
 (i > 0) ==> (k == 0),
 (i >= 1) ==> (k == 0),
 0 <= i && i <= N,
 0 <= i <= N,
 0 <= j,
 0 <= j <= N,
 0 <= k,
 0 <= k <= 1,
 i < 1 ==> k == 1,
 i <= N,
 i == j,
 i >= 0,
 i >= 1 ==> k == 0,
 j <= N,
 j == i,
 j >= 0,
 k == (i < 1 ? 1 : 0),
 k == 1 ==> i < 1,
 k >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop9_VeriMAP_true.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 1 && x <= 4;\n    loop invariant (x == 1) ==> (y == 5 || y == 6);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n*/",
            "//@\n  loop invariant 0 <= i <= 10;\n  loop invariant x >= 1 && x <= 4;\n  loop invariant (x == 1) ==> (y == 3);\n  loop invariant (x == 2) ==> (y == 4);\n  loop invariant (x == 3) ==> (y == 5);\n  loop invariant (x == 4) ==> (y == 6);",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, note the initial values of variables:\ni = 0;\nx = 1;\n\nThe loop condition is i<10.\n\nNow, let's find the loop invariants:\n\n/*@ \n  loop invariant 0 <= i <= 10;\n  loop invariant x == 1 ==> y == 5;\n  loop invariant x == 2 ==> y == 3;\n  loop invariant x == 3 ==> y == 4;\n  loop invariant x >= 1 && x <= 3;\n*/\n",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 10;\n    loop invariant x >= 1;\n    loop invariant x <= 4;\n    loop invariant (x == 1) ==> (y == 5);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 1 && x <= 4;\n    loop invariant x == 1 ==> y == 5;\n    loop invariant x == 2 ==> y == 3;\n    loop invariant x == 3 ==> y == 4;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= x <= 4;\n    loop invariant (x == 1) ==> (x == 2 && y == 3);\n    loop invariant (x == 2) ==> (x == 3 && y == 4);\n    loop invariant (x == 3) ==> (x == 1 && y == 5);\n    loop invariant (x == 4) ==> (x == 1 && y == 6);\n    loop invariant (!(x >= 1 && x <= 4)) ==> (x == 2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 1 && x <= 4;\n    loop invariant (x == 1) ==> (y == 5);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= x <= 4;\n    loop invariant (x == 1) ==> (y == 5);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= x <= 4;\n    loop invariant (x == 1) ==> (y == 5);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x == 1 ==> y == 3 || y == 5;\n    loop invariant x == 2 ==> y == 3;\n    loop invariant x == 3 ==> y == 4;\n    loop invariant x == 4 ==> y == 6;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant (x >= 1 && x <= 4) && (x != 4 ==> y >= 3 && y <= 6);\n    loop invariant x != 4;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 1 && x <= 4;\n    loop invariant (x == 1) ==> (y == 5 || y == 6);\n    loop invariant (x == 2) ==> y == 3;\n    loop invariant (x == 3) ==> y == 4;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= x <= 4;\n    loop invariant (x == 1) ==> (y == 5 || y == 3);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant 1 <= x <= 4;\n    loop invariant (x == 1) ==> (y == 5 || y == 6 || y == \\at(y, Pre));\n    loop invariant (x == 2) ==> (y == 3 || y == \\at(y, Pre));\n    loop invariant (x == 3) ==> (y == 4);\n    loop invariant (x == 4) ==> (y == 6);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 10;\n    loop invariant x >= 1 && x <= 4;\n    loop invariant (x == 1) ==> (y == 5 || y == 6);\n    loop invariant (x == 2) ==> (y == 3);\n    loop invariant (x == 3) ==> (y == 4);\n*/"
        ],
        "expressions": "(!(x >= 1 && x <= 4)) ==> (x == 2),
 (x == 1) ==> (x == 2 && y == 3),
 (x == 1) ==> (y == 3),
 (x == 1) ==> (y == 5 || y == 3),
 (x == 1) ==> (y == 5 || y == 6 || y == \\at(y, Pre)),
 (x == 1) ==> (y == 5 || y == 6),
 (x == 1) ==> (y == 5),
 (x == 2) ==> (x == 3 && y == 4),
 (x == 2) ==> (y == 3 || y == \\at(y, Pre)),
 (x == 2) ==> (y == 3),
 (x == 2) ==> (y == 4),
 (x == 2) ==> y == 3,
 (x == 3) ==> (x == 1 && y == 5),
 (x == 3) ==> (y == 4),
 (x == 3) ==> (y == 5),
 (x == 3) ==> y == 4,
 (x == 4) ==> (x == 1 && y == 6),
 (x == 4) ==> (y == 6),
 (x >= 1 && x <= 4) && (x != 4 ==> y >= 3 && y <= 6),
 0 <= i <= 10,
 1 <= x <= 4,
 i <= 10,
 i >= 0,
 x != 4,
 x <= 4,
 x == 1 ==> y == 3 || y == 5,
 x == 1 ==> y == 5,
 x == 2 ==> y == 3,
 x == 3 ==> y == 4,
 x == 4 ==> y == 6,
 x >= 1,
 x >= 1 && x <= 3,
 x >= 1 && x <= 4"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.c": {
        "completions": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n  loop invariant 1 <= i;\n  loop invariant i <= n + 1;\n  loop invariant sn >= 0;\n  loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant 0 <= sn;\n*/",
            "/*@\n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant (i > n) ==> (sn == n * a);\n    loop invariant (n <= 0) ==> (sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant 0 <= sn <= n*a;\n */",
            "//@\nloop invariant 1 <= i <= n + 1;\nloop invariant sn == (i - 1) * a || sn == 0;\nloop invariant 0 <= sn;",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant n >= 0 ==> sn >= 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= i*a;\n    loop invariant sn == (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn >= 0;\n*/",
            "//@\nloop invariant 1 <= i;\nloop invariant sn == (i - 1) * a;\nloop invariant sn <= n * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn == a*(i-1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant sn <= n * a;\n*/"
        ],
        "expressions": "(i > n) ==> (sn == n * a),
 (n <= 0) ==> (sn == 0),
 0 <= sn,
 0 <= sn <= i*a,
 0 <= sn <= n*a,
 1 <= i,
 1 <= i && i <= n+1,
 1 <= i <= n + 1,
 1 <= i <= n+1,
 i <= n + 1,
 i >= 1,
 n >= 0 ==> sn >= 0,
 sn <= n * a,
 sn == (i - 1) * a,
 sn == (i - 1) * a || sn == 0,
 sn == (i-1)*a,
 sn == a*(i-1),
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/svcomp/sum01_true.c": {
        "completions": [
            "/*@ \n    loop invariant sn == (i - 1) * a;\n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i-1) * a;\n    loop invariant i <= n+1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n    loop invariant sn >= 0;\n*/",
            "//@\n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1) * a;\n  loop invariant n >= 0 ==> sn >= 0;\n  loop invariant n < 0 ==> sn == 0;\n*/",
            "/*@\n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn == (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant n >= 0 ==> sn >= 0;\n*/",
            "/*@ \n  loop invariant 1 <= i;\n  loop invariant i <= n + 1;\n  loop invariant sn == (i - 1) * a;\n  loop invariant 0 <= sn;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant sn >= 0;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a;\n    loop invariant (i > n) ==> (sn == n * a);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a;\n    loop invariant (n < 1) ==> sn == 0;\n*/",
            "/*@ \n  loop invariant 1 <= i && i <= n+1;\n  loop invariant sn >= 0;\n  loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= n+1;\n*/"
        ],
        "expressions": "(i > n) ==> (sn == n * a),
 (n < 1) ==> sn == 0,
 0 <= sn,
 1 <= i,
 1 <= i && i <= n+1,
 1 <= i <= n + 1,
 1 <= i <= n+1,
 i <= n + 1,
 i <= n+1,
 n < 0 ==> sn == 0,
 n >= 0 ==> sn >= 0,
 sn == (i - 1) * a,
 sn == (i-1) * a,
 sn == (i-1)*a,
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01.v.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant sn == i - 1 ==> sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= n + 1;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n    loop invariant n >= 0 ==> sn >= 0;\n*/",
            "/*@ \n    loop invariant sn == (i - 1) * a;\n    loop invariant 1 <= i && i <= n+1;\n    loop invariant (n >= 1) ==> (i <= n);\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant n >= 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's note the pre-conditions or variable assignments in the program:\n- n is a non-deterministic integer.\n- sn is initialized to 0.\n- i is initialized to 1.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= n.\n- Inside the loop, sn is incremented by a (which is 1) in each iteration.\n- v1, v2, and v3 are assigned non-deterministic integer values in each iteration, but they are not used in the loop or post-condition, so we can ignore them in our loop invariants.\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition.",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant sn >= 0;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant n == 0 ==> sn == 0;\n*/",
            "/*@\n  loop invariant 1 <= i <= n+1;\n  loop invariant 0 <= sn <= n*a;\n  loop invariant sn == (i-1)*a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "  sn = sn + a;\n  v1 = unknown_int();\n  v2 = unknown_int();\n  v3 = unknown_int();"
        ],
        "expressions": "(n >= 1) ==> (i <= n),
 0 <= sn <= n*a,
 1 <= i,
 1 <= i && i <= n + 1,
 1 <= i && i <= n+1,
 1 <= i <= n+1,
 i <= n + 1,
 n == 0 ==> sn == 0,
 n >= 0,
 n >= 0 ==> sn >= 0,
 sn <= i - 1,
 sn == (i - 1) * a,
 sn == (i-1) * a,
 sn == (i-1)*a,
 sn == i - 1 ==> sn == (i - 1) * a,
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n  loop invariant 0 <= i && i <= SIZE + 1;\n  loop invariant 0 <= sn && sn <= SIZE * a;\n  loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant SIZE >= 0 ==> sn >= 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant sn >= 0;\n*/",
            "/*@ \n  loop invariant 1 <= i <= SIZE + 1;\n  loop invariant sn >= 0;\n  loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant 0 <= sn && sn <= SIZE;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n  loop invariant 1 <= i;\n  loop invariant i <= SIZE + 1;\n  loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n  loop invariant 1 <= i;\n  loop invariant sn == (i - 1) * a;\n  loop invariant 0 <= sn;\n  loop invariant sn <= SIZE * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n  loop invariant 1 <= i;\n  loop invariant sn == (i - 1) * a;\n  loop invariant 0 <= sn;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/"
        ],
        "expressions": "0 <= i && i <= SIZE + 1,
 0 <= sn,
 0 <= sn && sn <= SIZE,
 0 <= sn && sn <= SIZE * a,
 1 <= i,
 1 <= i && i <= SIZE + 1,
 1 <= i && i <= SIZE+1,
 1 <= i <= SIZE + 1,
 1 <= i <= SIZE+1,
 SIZE >= 0 ==> sn >= 0,
 i <= SIZE + 1,
 sn <= SIZE * a,
 sn == (i - 1) * a,
 sn == (i-1) * a,
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04n.v.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant 0 <= sn <= SIZE * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= (i - 1) * a;\n    loop invariant SIZE >= 0 ==> sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= SIZE + 1;\n    loop invariant 0 <= sn && sn <= i * a;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop invariant sn >= 0;\n*/",
            "//@\nloop invariant 1 <= i && i <= SIZE + 1;\nloop invariant sn >= 0 && sn <= SIZE * a;\nloop invariant sn == (i - 1) * a || sn == 0;",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE+1;\n    loop invariant sn >= 0;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= SIZE + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == a * (i - 1) || (SIZE <= 0 && sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn >= 0 && sn <= (i - 1) * a;\n    loop invariant (i > SIZE) ==> (sn == SIZE * a);\n*/"
        ],
        "expressions": "(i > SIZE) ==> (sn == SIZE * a),
 0 <= i && i <= SIZE + 1,
 0 <= sn && sn <= i * a,
 0 <= sn <= SIZE * a,
 1 <= i,
 1 <= i && i <= SIZE + 1,
 1 <= i && i <= SIZE+1,
 1 <= i <= SIZE + 1,
 SIZE >= 0 ==> sn == (i - 1) * a,
 i <= SIZE + 1,
 sn <= (i - 1) * a,
 sn == (i - 1) * a,
 sn == (i - 1) * a || sn == 0,
 sn == (i-1) * a,
 sn == a * (i - 1) || (SIZE <= 0 && sn == 0),
 sn >= 0,
 sn >= 0 && sn <= (i - 1) * a,
 sn >= 0 && sn <= SIZE * a"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-2.c": {
        "completions": [
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's note the pre-conditions and variable assignments:\n- n is assigned a value from unknown_int(), and we have a check that n < 1000 and n >= -1000.\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= n.\n- In each iteration, sn is incremented by a (which is 2), and i is incremented by 1.\n\nNow, let's find the loop invariants:\n\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1);\n    loop invariant sn >= 0;\n    loop invariant n < 1000;\n    loop invariant n >= -1000;\n*/\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (sn==n*a || sn == 0).",
            "/*@\n    loop invariant 1 <= i;\n    loop invariant sn >= 0;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant n >= -1000 && n < 1000;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant n < 1000 && n >= -1000;\n*/",
            "/*@ \n    loop invariant sn == a * (i - 1);\n    loop invariant 1 <= i;\n    loop invariant i <= n + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 0 <= sn;\n    loop invariant sn == (i - 1) * a;\n    loop invariant i <= n + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn == 2*(i-1);\n    loop invariant (i <= n) ==> (sn != n*a);\n    loop invariant (i > n) ==> (sn == n*a);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i-1) * a;\n    loop invariant 0 <= sn && sn <= (n * a);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == 2 * (i-1);\n  loop invariant n < 1000 && n >= -1000;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == (i-1)*a;\n    loop invariant -1000 <= n <= 1000;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant 0 <= sn;\n    loop invariant sn == (i-1)*a;\n*/",
            "/*@\n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == (i - 1) * a;\n*/"
        ],
        "expressions": "(i <= n) ==> (sn != n*a),
 (i > n) ==> (sn == n*a),
 -1000 <= n <= 1000,
 0 <= sn,
 0 <= sn && sn <= (n * a),
 1 <= i,
 1 <= i && i <= n + 1,
 1 <= i && i <= n+1,
 1 <= i <= n+1,
 i <= n + 1,
 i <= n+1,
 n < 1000,
 n < 1000 && n >= -1000,
 n >= -1000,
 n >= -1000 && n < 1000,
 sn == (i - 1) * a,
 sn == (i-1) * a,
 sn == (i-1)*a,
 sn == 2 * (i-1),
 sn == 2*(i-1),
 sn == a * (i - 1),
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_true-unreach-call_true-termination.i.annot.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn >= 0;\n    loop invariant sn == 2 * (i - 1);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == 2*(i-1);\n    loop invariant -1000 <= n < 1000;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == 2*(i-1);\n    loop invariant n < 1000 && n >= -1000;\n*/",
            "/*@ \n  loop invariant 1 <= i && i <= n + 1;\n  loop invariant sn >= 0 && sn <= 2 * n;\n  loop invariant sn == 2 * (i - 1);\n*/",
            "/*@\n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn == 2*(i-1);\n    loop invariant n < 1000 && n >= -1000;\n*/"
        ],
        "expressions": "-1000 <= n < 1000,
 1 <= i,
 1 <= i && i <= n + 1,
 1 <= i && i <= n+1,
 1 <= i <= n+1,
 i <= n+1,
 n < 1000 && n >= -1000,
 sn == 2 * (i - 1),
 sn == 2*(i-1),
 sn >= 0,
 sn >= 0 && sn <= 2 * n"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c": {
        "completions": [
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= 100;\n  loop invariant (x % 2) == (y % 2) ==> (x % 2 == 0) == (y % 2 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n    loop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x <= 99;\nloop invariant x % 2 == y % 2 ==> x % 2 == 0;\nloop invariant x % 2 != y % 2 ==> x % 2 == 1;",
            "/*@ \n  loop invariant x >= 0;\n  loop invariant x <= 99;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> x % 2 == 0;\n    loop invariant (x % 2) != (y % 2) ==> x % 2 == 1;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n*/",
            "/*@ \n  loop invariant 0 <= x <= 99;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n    loop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
            "/*@\n  loop invariant x <= 99;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n    loop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (x % 2) == (y % 2) ==> x % 2 == 0;\n    loop invariant (x % 2) != (y % 2) ==> x % 2 == 1;\n*/"
        ],
        "expressions": "(x % 2) != (y % 2) ==> (x % 2) == 1,
 (x % 2) != (y % 2) ==> x % 2 == 1,
 (x % 2) == (y % 2) ==> (x % 2 == 0) == (y % 2 == 0),
 (x % 2) == (y % 2) ==> (x % 2) == 0,
 (x % 2) == (y % 2) ==> x % 2 == 0,
 (y % 2 != 0) ==> (x % 2 != 0),
 (y % 2 != 0) ==> (x % 2 == 1),
 (y % 2 == 0) ==> (x % 2 == 0),
 0 <= x,
 0 <= x <= 100,
 0 <= x <= 99,
 x % 2 != y % 2 ==> x % 2 == 1,
 x % 2 == y % 2 ==> x % 2 == 0,
 x <= 100,
 x <= 99,
 x >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c": {
        "completions": [
            "/*@ \n  loop invariant x >= 0;\n  loop invariant x <= 99;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 == 1) ==> (x % 2 == 1);\n*/",
            "/*@\n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant x <= 2 * (y / 2);\n*/",
            "/*@\n  loop invariant 0 <= x <= 99;\n  loop invariant 0 <= y;\n  loop invariant x % 2 == 0 <==> y % 2 == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 100;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1 || x % 2 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n  loop invariant 0 <= x <= 99;\n  loop invariant 0 <= y;\n  loop invariant (x % 2) == (y % 2) ==> (x <= 98);\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant 0 <= y;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n    loop invariant (x % 2) != (y % 2) ==> (x % 2) == 1;\n*/",
            "/*@ \n  loop invariant 0 <= x && x <= 99;\n  loop invariant x % 2 == y % 2 || (x + 1) % 2 == y % 2;\n*/",
            "/*@ \n  loop invariant 0 <= x <= 99;\n  loop invariant x <= 100;\n  loop invariant (x % 2) == (y % 2) ==> (x <= 98);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant x <= 2 * (y / 2);\n    loop invariant (x % 2) == (y % 2) || x + 1 == 2 * (y / 2);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant x <= 100;\n    loop invariant (x % 2 == 0) ==> (y % 2 == 0);\n    loop invariant (x % 2 != 0) ==> (y % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant \\old(y) == y;\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant y % 2 == 0 ==> x % 2 == 0;\n    loop invariant y % 2 != 0 ==> x % 2 == 1;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant 0 <= y;\n    loop invariant x % 2 == 0 ==> y % 2 == 0;\n    loop invariant x % 2 == 1 ==> y % 2 == 1;\n*/"
        ],
        "expressions": "(x % 2 != 0) ==> (y % 2 != 0),
 (x % 2 == 0) ==> (y % 2 == 0),
 (x % 2) != (y % 2) ==> (x % 2) == 1,
 (x % 2) == (y % 2),
 (x % 2) == (y % 2) ==> (x % 2) == 0,
 (x % 2) == (y % 2) ==> (x <= 98),
 (x % 2) == (y % 2) || x + 1 == 2 * (y / 2),
 (y % 2 != 0) ==> (x % 2 != 0),
 (y % 2 != 0) ==> (x % 2 == 1 || x % 2 == 0),
 (y % 2 == 0) ==> (x % 2 == 0),
 (y % 2 == 1) ==> (x % 2 == 1),
 0 <= x,
 0 <= x && x <= 100,
 0 <= x && x <= 99,
 0 <= x <= 100,
 0 <= x <= 99,
 0 <= y,
 \\old(y) == y,
 x % 2 == 0 <==> y % 2 == 0,
 x % 2 == 0 ==> y % 2 == 0,
 x % 2 == 1 ==> y % 2 == 1,
 x % 2 == y % 2 || (x + 1) % 2 == y % 2,
 x <= 100,
 x <= 2 * (y / 2),
 x <= 99,
 x >= 0,
 y % 2 != 0 ==> x % 2 == 1,
 y % 2 == 0 ==> x % 2 == 0,
 y == \\at(y, LoopEntry)"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-new/half.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n == i/2;\n    loop invariant k <= LARGE_INT && k >= -LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n == (i+1)/2 || n == i/2;\n    loop invariant k <= LARGE_INT && k >= -LARGE_INT;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant n >= 0;\n    loop invariant n <= i/2;\n    loop invariant (i % 2 == 0) ==> (n == i/2);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 2*k;\n    loop invariant n >= 0;\n    loop invariant n <= k;\n    loop invariant (i % 2 == 0) ==> (n == i/2);\n    loop invariant (i % 2 != 0) ==> (n == (i-1)/2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n    loop invariant i % 2 != 0 ==> n == (i - 1) / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n == i/2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant 0 <= n <= k;\n    loop invariant n == i / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i/2;\n    loop invariant i % 2 != 0 ==> n == (i-1)/2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i % 2 == 0;\n    loop invariant n >= 0;\n    loop invariant n <= i / 2;\n    loop invariant i <= 2 * k;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant n >= 0;\n    loop invariant n <= k;\n    loop invariant n <= i / 2;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant i%2 == 0 ==> n == i/2;\n    loop invariant i%2 != 0 ==> n == (i-1)/2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant (i % 2 == 0) ==> (n == i/2);\n    loop invariant (i % 2 != 0) ==> (n == (i-1)/2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n <= k;\n    loop invariant n <= i/2;\n    loop invariant (k < 0) ==> (n == 0);\n*/"
        ],
        "expressions": "(i % 2 != 0) ==> (n == (i-1)/2),
 (i % 2 == 0) ==> (n == i/2),
 (k < 0) ==> (n == 0),
 0 <= i <= 2 * k,
 0 <= i <= 2*k,
 0 <= n <= k,
 i % 2 != 0 ==> n == (i - 1) / 2,
 i % 2 != 0 ==> n == (i-1)/2,
 i % 2 == 0,
 i % 2 == 0 ==> n == i / 2,
 i % 2 == 0 ==> n == i/2,
 i <= 2 * k,
 i <= 2*k,
 i >= 0,
 i%2 != 0 ==> n == (i-1)/2,
 i%2 == 0 ==> n == i/2,
 k <= LARGE_INT && k >= -LARGE_INT,
 n <= i / 2,
 n <= i/2,
 n <= k,
 n == (i+1)/2 || n == i/2,
 n == i / 2,
 n == i/2,
 n >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/half_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 2*k;\n    loop invariant n <= i/2;\n*/",
            "//@\nloop invariant 0 <= i;\nloop invariant i <= 2*k;\nloop invariant n >= 0;\nloop invariant n <= k;\nloop invariant i % 2 == 0 ==> n == i/2;",
            "/*@ \n    loop invariant 0 <= i && i <= 2 * k;\n    loop invariant 0 <= n && n <= k;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n    loop invariant i % 2 != 0 ==> n == (i - 1) / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n <= k;\n    loop invariant n >= 0;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n == i/2;\n    loop invariant (k <= LARGE_INT) && (k >= -LARGE_INT);\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= 2*k;\n    loop invariant 0 <= n && n <= k;\n    loop invariant (i % 2 == 0) ==> (n == (i / 2));\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant 0 <= n <= k;\n    loop invariant (i % 2 == 0) ==> (n == i / 2);\n    loop invariant (i % 2 != 0) ==> (n == (i - 1) / 2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant n == (\\sum integer j; 0 <= j < i && j % 2 == 0; 1);\n    loop invariant i % 2 == 0 ==> n == i/2;\n    loop invariant i % 2 == 1 ==> n == (i+1)/2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i/2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant 0 <= n <= k;\n    loop invariant (i % 2 == 0) ==> (n == i/2);\n    loop invariant (i % 2 != 0) ==> (n == (i-1)/2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2*k;\n    loop invariant n == (i+1)/2;\n    loop invariant (k >= 0 ==> n <= k) && (k < 0 ==> n == 0);\n*/",
            "/*@ \n  loop invariant 0 <= i <= 2 * k;\n  loop invariant n == i / 2;\n  loop invariant -LARGE_INT <= k <= LARGE_INT;\n*/",
            "/*@\n    loop invariant 0 <= i <= 2 * k;\n    loop invariant 0 <= n <= k;\n    loop invariant i % 2 == 0 ==> n == i / 2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant n <= i/2;\n    loop invariant i % 2 == 0 ==> n == i/2;\n */",
            "/*@ \n    loop invariant 0 <= i <= 2 * k;\n    loop invariant n == (i / 2);\n    loop invariant i % 2 == 0;\n*/"
        ],
        "expressions": "(i % 2 != 0) ==> (n == (i - 1) / 2),
 (i % 2 != 0) ==> (n == (i-1)/2),
 (i % 2 == 0) ==> (n == (i / 2)),
 (i % 2 == 0) ==> (n == i / 2),
 (i % 2 == 0) ==> (n == i/2),
 (k <= LARGE_INT) && (k >= -LARGE_INT),
 (k >= 0 ==> n <= k) && (k < 0 ==> n == 0),
 -LARGE_INT <= k <= LARGE_INT,
 0 <= i,
 0 <= i && i <= 2 * k,
 0 <= i && i <= 2*k,
 0 <= i <= 2 * k,
 0 <= i <= 2*k,
 0 <= n && n <= k,
 0 <= n <= k,
 i % 2 != 0 ==> n == (i - 1) / 2,
 i % 2 == 0,
 i % 2 == 0 ==> n == i / 2,
 i % 2 == 0 ==> n == i/2,
 i % 2 == 1 ==> n == (i+1)/2,
 i <= 2*k,
 i >= 0,
 n <= i/2,
 n <= k,
 n == (\\sum integer j; 0 <= j < i && j % 2 == 0; 1),
 n == (i / 2),
 n == (i+1)/2,
 n == i / 2,
 n == i/2,
 n >= 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/ddlm2013.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant j == a + i;\n    loop invariant (flag == 0) ==> (i % 2 == 1);\n    loop invariant (flag == 1) ==> (i % 2 == 0);\n    loop invariant (flag == 1) ==> (a == b);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant (flag ==> (i == a * 2)) && (!flag ==> (i == a * 2 + 1));\n    loop invariant b == a * (j - (flag ? 0 : 1));\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant (flag ==> i == 2 * a) && (!flag ==> i == 2 * a + 1);\n    loop invariant j == 2 * a + 1;\n    loop invariant b == a * (j - i);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant a <= b;\n    loop invariant (flag ==> i == 2 * a);\n    loop invariant (!flag ==> i == 2 * a + 1);\n    loop invariant j == i + 1 || j == i + 2;\n*/",
            "//@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant i <= 1 ==> j == 1;\n    loop invariant i >= 1 ==> j == i + 1;\n    loop invariant flag ==> a == b;",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant a <= UINT_MAX;\n    loop invariant b <= UINT_MAX;\n    loop invariant i <= UINT_MAX;\n    loop invariant j <= UINT_MAX;\n    loop invariant (i%2 == 0) ==> (j%2 == 1);\n    loop invariant (i%2 == 1) ==> (j%2 == 0);\n    loop invariant (flag == 1) ==> (i%2 == 0);\n    loop invariant (flag == 0) ==> (i%2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant a <= b;\n    loop invariant (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1);\n    loop invariant (i % 2 == 0) ==> (j % 2 == 1);\n    loop invariant (i % 2 == 1) ==> (j % 2 == 0);\n*/",
            "/*@\n    loop invariant (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1);\n    loop invariant a >= 0 && b >= 0;\n    loop invariant j >= 1;\n    loop invariant j == 2*a + 1;\n    loop invariant i == 2*a + (flag ? 0 : 1);\n    loop invariant b == a*(2*a - (flag ? 0 : 1));\n*/",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant i % 2 == 0 ==> j % 2 == 1;\n    loop invariant i % 2 == 1 ==> j % 2 == 0;\n    loop invariant flag ==> i % 2 == 0;\n    loop invariant !flag ==> i % 2 == 1;\n    loop invariant a * (i - j) + b * 2 == 0;\n*/",
            "/*@ \n    loop invariant a <= UINT_MAX;\n    loop invariant b <= UINT_MAX;\n    loop invariant j <= UINT_MAX;\n    loop invariant i <= UINT_MAX;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 1 <= j;\n    loop invariant i == 0 ==> flag != 0;\n    loop invariant i == 1 ==> flag == 0;\n    loop invariant (j - i) <= UINT_MAX;\n    loop invariant j >= i;\n    loop invariant (j % 2 == 0) ==> (i % 2 == 0);\n    loop invariant (j % 2 != 0) ==> (i % 2 != 0);\n*/",
            "//@\nloop invariant 0 <= a;\nloop invariant 0 <= b;\nloop invariant 0 <= i;\nloop invariant 1 <= j;\nloop invariant j <= i + 1;\nloop invariant (flag != 0) ==> (a * 2 == b + i);\nloop invariant (flag == 0) ==> (a * 2 == b + i - 1);",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant flag ==> i % 2 == 0;\n    loop invariant !flag ==> i % 2 == 1;\n    loop invariant j == 1 + i/2;\n    loop invariant flag ==> a == b;\n*/",
            "/*@ \n    loop invariant 0 <= a <= UINT_MAX;\n    loop invariant 0 <= b <= UINT_MAX;\n    loop invariant 0 <= i <= UINT_MAX;\n    loop invariant 1 <= j <= UINT_MAX;\n    loop invariant (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1);\n    loop invariant j == i + 1;\n    loop invariant b == a * (j - i);\n*/",
            "/*@ \n    loop invariant a >= 0 && a <= UINT_MAX;\n    loop invariant b >= 0 && b <= UINT_MAX;\n    loop invariant i >= 0 && i <= UINT_MAX;\n    loop invariant j >= 1 && j <= UINT_MAX;\n    loop invariant (i % 2 == 0) ==> j == i + 1;\n    loop invariant (i % 2 != 0) ==> j == i;\n    loop invariant (flag != 0) ==> a == b;\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant flag ==> (i % 2 == 0);\n    loop invariant !flag ==> (i % 2 == 1);\n    loop invariant (i % 2 == 0) ==> (j % 2 == 1);\n    loop invariant (i % 2 == 1) ==> (j % 2 == 0);\n    loop invariant a <= b;\n*/"
        ],
        "expressions": "!flag ==> (i % 2 == 1),
 !flag ==> i % 2 == 1,
 (!flag ==> i == 2 * a + 1),
 (flag != 0) ==> (a * 2 == b + i),
 (flag != 0) ==> a == b,
 (flag == 0) ==> (a * 2 == b + i - 1),
 (flag == 0) ==> (i % 2 == 1),
 (flag == 0) ==> (i%2 == 1),
 (flag == 1) ==> (a == b),
 (flag == 1) ==> (i % 2 == 0),
 (flag == 1) ==> (i%2 == 0),
 (flag ==> (i == a * 2)) && (!flag ==> (i == a * 2 + 1)),
 (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1),
 (flag ==> i == 2 * a),
 (flag ==> i == 2 * a) && (!flag ==> i == 2 * a + 1),
 (i % 2 != 0) ==> j == i,
 (i % 2 == 0) ==> (j % 2 == 1),
 (i % 2 == 0) ==> j == i + 1,
 (i % 2 == 1) ==> (j % 2 == 0),
 (i%2 == 0) ==> (j%2 == 1),
 (i%2 == 1) ==> (j%2 == 0),
 (j % 2 != 0) ==> (i % 2 != 0),
 (j % 2 == 0) ==> (i % 2 == 0),
 (j - i) <= UINT_MAX,
 0 <= a,
 0 <= a <= UINT_MAX,
 0 <= b,
 0 <= b <= UINT_MAX,
 0 <= i,
 0 <= i <= UINT_MAX,
 1 <= j,
 1 <= j <= UINT_MAX,
 a * (i - j) + b * 2 == 0,
 a <= UINT_MAX,
 a <= b,
 a >= 0,
 a >= 0 && a <= UINT_MAX,
 a >= 0 && b >= 0,
 b <= UINT_MAX,
 b == a * (j - (flag ? 0 : 1)),
 b == a * (j - i),
 b == a*(2*a - (flag ? 0 : 1)),
 b >= 0,
 b >= 0 && b <= UINT_MAX,
 flag ==> (i % 2 == 0),
 flag ==> a == b,
 flag ==> i % 2 == 0,
 i % 2 == 0 ==> j % 2 == 1,
 i % 2 == 1 ==> j % 2 == 0,
 i <= 1 ==> j == 1,
 i <= UINT_MAX,
 i == 0 ==> flag != 0,
 i == 1 ==> flag == 0,
 i == 2*a + (flag ? 0 : 1),
 i >= 0,
 i >= 0 && i <= UINT_MAX,
 i >= 1 ==> j == i + 1,
 j <= UINT_MAX,
 j <= i + 1,
 j == 1 + i/2,
 j == 2 * a + 1,
 j == 2*a + 1,
 j == a + i,
 j == i + 1,
 j == i + 1 || j == i + 2,
 j >= 0,
 j >= 1,
 j >= 1 && j <= UINT_MAX,
 j >= i"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/ddlm2013_true-unreach-call.c": {
        "completions": [
            "ERROR: Output does not contain at least 1 code block\nOutput:\nLet's first analyze the given program:\n\n1. Pre-conditions or variable assignments:\n   - flag is an unknown integer value\n   - a = 0\n   - b = 0\n   - j = 1\n   - i is assigned 0 if flag is non-zero, else i is assigned 1\n\n2. Loop condition:\n   - The while loop continues as long as unknown_int() returns a non-zero value.\n\nNow, let's derive the loop invariants:\n\n/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant i % 2 == 0 ==> j % 2 == 1;\n    loop invariant i % 2 == 1 ==> j % 2 == 0;\n    loop invariant flag ==> (b == a * (j - i));\n*/\n",
            "/*@\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant j >= 1;\n    loop invariant a <= UINT_MAX;\n    loop invariant b <= UINT_MAX;\n    loop invariant i <= UINT_MAX;\n    loop invariant j <= UINT_MAX;\n    loop invariant flag ==> (i == 0);\n    loop invariant !flag ==> (i == 1);\n    loop invariant (i == 0) ==> (j == 2*a + 1);\n    loop invariant (i == 1) ==> (j == 2*a);\n    loop invariant a*b <= UINT_MAX;\n*/",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant j <= i + 1;\n    loop invariant b == a * (j - i);\n    loop invariant flag ==> (i % 2 == 0);\n    loop invariant !flag ==> (i % 2 == 1);\n*/",
            "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant a <= b;\n    loop invariant (i % 2 == 0) ==> (j == i + 1);\n    loop invariant (i % 2 != 0) ==> (j == i);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant i % 2 == 0 ==> j % 2 == 1;\n    loop invariant i % 2 == 1 ==> j % 2 == 0;\n    loop invariant (flag && i == 0) || (!flag && i == 1) ==> a == b;\n*/",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant a <= b;\n    loop invariant j == a + i + 1;\n    loop invariant (flag != 0) ==> (i % 2 == 0);\n    loop invariant (flag == 0) ==> (i % 2 == 1);\n*/",
            "//@\nloop invariant a >= 0;\nloop invariant b >= 0;\nloop invariant j >= 1;\nloop invariant i >= 0;\nloop invariant i <= j;\nloop invariant (i % 2 == 0) ==> (j % 2 == 1);\nloop invariant (i % 2 == 1) ==> (j % 2 == 0);\nloop invariant flag ==> (i % 2 == 0);\nloop invariant !flag ==> (i % 2 == 1);\nloop invariant a == (b + (i * (j - i) / 2));",
            "/*@\n    loop invariant a >= 0;\n    loop invariant i%2 == 0 ==> j == i+1;\n    loop invariant i%2 == 1 ==> j == i;\n    loop invariant j > 0;\n*/",
            "/*@ \n    loop invariant a == \\at(a, Pre) + \\at(b, Pre) - \\at(i, Pre);\n    loop invariant i%2 == j%2;\n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n*/",
            "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1);\n    loop invariant (i % 2 == 0) ==> (j % 2 == 1);\n    loop invariant (i % 2 == 1) ==> (j % 2 == 0);\n    loop invariant (flag && i > 0) ==> (a == b + (i/2));\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i % 2 == 0 ==> j % 2 == 1;\n    loop invariant i % 2 == 1 ==> j % 2 == 0;\n    loop invariant flag ==> b == a * (a + 1) / 2;\n*/",
            "/*@ \n    loop invariant 0 <= a;\n    loop invariant 0 <= b;\n    loop invariant 0 <= i;\n    loop invariant 1 <= j;\n    loop invariant j == 2 * a + i;\n    loop invariant b == a * (j - i);\n    loop invariant (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1);\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant i%2 == 0 ==> j%2 == 1;\n    loop invariant i%2 == 1 ==> j%2 == 0;\n    loop invariant flag ==> (i == 2 * a) && (j == a + 1);\n    loop invariant !flag ==> (i == 2 * a + 1) && (j == a + 1);\n    loop invariant b == (a * (j - i/2));\n*/",
            "/*@ \n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant j >= 1;\n    loop invariant i >= 0;\n    loop invariant (flag == 1) ==> (i == 0) || (i%2 == 0);\n    loop invariant (flag == 0) ==> (i == 1) || (i%2 == 1);\n    loop invariant (i%2 == 0) ==> j == i + 1;\n    loop invariant (i%2 == 1) ==> j == i;\n    loop invariant (flag == 1) ==> a == b;\n*/",
            "/*@\n    loop invariant a >= 0;\n    loop invariant b >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 1;\n    loop invariant (i % 2 == 0) ==> (j % 2 == 1);\n    loop invariant (i % 2 == 1) ==> (j % 2 == 0);\n    loop invariant (flag != 0) ==> (i % 2 == 0);\n    loop invariant (flag == 0) ==> (i % 2 == 1);\n    loop invariant (flag != 0) ==> (a == b);\n*/"
        ],
        "expressions": "!flag ==> (i % 2 == 1),
 !flag ==> (i == 1),
 !flag ==> (i == 2 * a + 1) && (j == a + 1),
 (flag != 0) ==> (a == b),
 (flag != 0) ==> (i % 2 == 0),
 (flag && i == 0) || (!flag && i == 1) ==> a == b,
 (flag && i > 0) ==> (a == b + (i/2)),
 (flag == 0) ==> (i % 2 == 1),
 (flag == 0) ==> (i == 1) || (i%2 == 1),
 (flag == 1) ==> (i == 0) || (i%2 == 0),
 (flag == 1) ==> a == b,
 (flag ==> i % 2 == 0) && (!flag ==> i % 2 == 1),
 (i % 2 != 0) ==> (j == i),
 (i % 2 == 0) ==> (j % 2 == 1),
 (i % 2 == 0) ==> (j == i + 1),
 (i % 2 == 1) ==> (j % 2 == 0),
 (i == 0) ==> (j == 2*a + 1),
 (i == 1) ==> (j == 2*a),
 (i%2 == 0) ==> j == i + 1,
 (i%2 == 1) ==> j == i,
 0 <= a,
 0 <= b,
 0 <= i,
 0 <= j,
 1 <= j,
 a <= UINT_MAX,
 a <= b,
 a == (b + (i * (j - i) / 2)),
 a == \\at(a, Pre) + \\at(b, Pre) - \\at(i, Pre),
 a >= 0,
 a*b <= UINT_MAX,
 b <= UINT_MAX,
 b == (a * (j - i/2)),
 b == a * (j - i),
 b >= 0,
 flag ==> (b == a * (j - i)),
 flag ==> (i % 2 == 0),
 flag ==> (i == 0),
 flag ==> (i == 2 * a) && (j == a + 1),
 flag ==> b == a * (a + 1) / 2,
 i % 2 == 0 ==> j % 2 == 1,
 i % 2 == 1 ==> j % 2 == 0,
 i <= UINT_MAX,
 i <= j,
 i >= 0,
 i%2 == 0 ==> j == i+1,
 i%2 == 0 ==> j%2 == 1,
 i%2 == 1 ==> j == i,
 i%2 == 1 ==> j%2 == 0,
 i%2 == j%2,
 j <= UINT_MAX,
 j <= i + 1,
 j == 2 * a + i,
 j == a + i + 1,
 j > 0,
 j >= 1"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2 ==> x <= 98;\n    loop invariant y % 2 != 0 ==> x % 2 == 1;\n    loop invariant y % 2 == 0 ==> x % 2 == 0;\n*/",
            "//@\nloop invariant 0 <= x <= 100;\nloop invariant x % 2 == y % 2;\nloop invariant (y % 2 == 0) ==> (x % 4 == 0);\nloop invariant (y % 2 != 0) ==> (x % 4 == 2);",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant (x % 2 == 0) ==> (y % 2 == 0);\n    loop invariant (x % 2 == 1) ==> (y % 2 == 1);\n*/",
            "/*@ \n    loop invariant x <= 99;\n    loop invariant x % 2 == y % 2 ==> (x <= 96);\n    loop invariant y % 2 != 0 ==> (x % 2 == 1);\n*/",
            "@{\n    loop invariant x <= 100;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 0;\n    loop invariant (x % 2) == (y % 2) ==> (x % 2) == 1;\n}",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2 ==> x <= 98;\n    loop invariant x % 2 != y % 2 ==> x <= 99;\n*/",
            "//@\nloop invariant 0 <= x && x <= 100;\nloop invariant (y % 2 == 0) ==> ((x % 2) == 0);\nloop invariant (y % 2 != 0) ==> ((x % 2) == 1);",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant x % 2 == y % 2 ==> (x % 2 == 0) == (y % 2 == 0);\n*/",
            "@{\n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2 ==> x <= 98;\n    loop invariant x % 2 != y % 2 ==> x <= 99;\n}",
            "/*@ \n  loop invariant 0 <= x <= 100;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@\n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2 ==> x <= 99;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant (y % 2 == 0) ==> x % 2 == 0;\n    loop invariant (y % 2 != 0) ==> x % 2 != 0;\n*/",
            "/*@ \n  loop invariant 0 <= x;\n  loop invariant x <= 100;\n  loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n  loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/"
        ],
        "expressions": "(x % 2 == 0) ==> (y % 2 == 0),
 (x % 2 == 1) ==> (y % 2 == 1),
 (x % 2) == (y % 2) ==> (x % 2) == 0,
 (x % 2) == (y % 2) ==> (x % 2) == 1,
 (y % 2 != 0) ==> ((x % 2) == 1),
 (y % 2 != 0) ==> (x % 2 != 0),
 (y % 2 != 0) ==> (x % 2 == 1),
 (y % 2 != 0) ==> (x % 4 == 2),
 (y % 2 != 0) ==> x % 2 != 0,
 (y % 2 == 0) ==> ((x % 2) == 0),
 (y % 2 == 0) ==> (x % 2 == 0),
 (y % 2 == 0) ==> (x % 4 == 0),
 (y % 2 == 0) ==> x % 2 == 0,
 0 <= x,
 0 <= x && x <= 100,
 0 <= x <= 100,
 x % 2 != y % 2 ==> x <= 99,
 x % 2 == y % 2,
 x % 2 == y % 2 ==> (x % 2 == 0) == (y % 2 == 0),
 x % 2 == y % 2 ==> (x <= 96),
 x % 2 == y % 2 ==> x <= 98,
 x % 2 == y % 2 ==> x <= 99,
 x <= 100,
 x <= 99,
 x >= 0,
 y % 2 != 0 ==> (x % 2 == 1),
 y % 2 != 0 ==> x % 2 == 1,
 y % 2 == 0 ==> x % 2 == 0"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-acceleration/diamond_2-2.c": {
        "completions": [
            "/*@ \n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 == 1);\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x <= 99;\nloop invariant (x % 2) == (y % 2);",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 == 1) ==> (x % 2 == 1);\n*/",
            "//@\nloop invariant 0 <= x;\nloop invariant x < 100;\nloop invariant x % 2 == y % 2;",
            "/*@\n    loop invariant y == \\at(y, Pre);\n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 198;\n    loop invariant (x % 2) == (y % 2);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 110;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant x % 2 == y % 2;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == y % 2;\n    loop invariant x <= 198;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant (y % 2 == 0) ==> (x % 2 == 0);\n    loop invariant (y % 2 != 0) ==> (x % 2 != 0);\n*/"
        ],
        "expressions": "(x % 2) == (y % 2),
 (y % 2 != 0) ==> (x % 2 != 0),
 (y % 2 != 0) ==> (x % 2 == 1),
 (y % 2 == 0) ==> (x % 2 == 0),
 (y % 2 == 1) ==> (x % 2 == 1),
 0 <= x,
 0 <= x <= 198,
 0 <= x <= 99,
 x % 2 == y % 2,
 x < 100,
 x <= 110,
 x <= 198,
 x <= 99,
 x >= 0,
 y == \\at(y, Pre),
 y >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum01_safe.v.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant (i > n) ==> (sn == n);\n*/",
            "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant sn >= 0;\n    loop invariant n >= 0 ==> sn <= n;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == i - 1;\n    loop invariant (i <= n ==> sn < n);\n    loop invariant (i > n ==> sn == n);\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant sn <= i;\n    loop invariant sn == i || sn == 0;\n    loop invariant i <= n+1;\n*/",
            "/*@ \n    loop invariant 0 <= sn <= n;\n    loop invariant i - 1 == sn;\n    loop invariant 1 <= i <= n+1;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n + 1;\n    loop invariant 0 <= sn && sn <= n;\n    loop invariant sn == (i <= n ? i - 1 : n);\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= n+1;\n    loop invariant sn == i-1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == i-1;\n*/",
            "/*@\n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == i-1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant (n >= 0 ==> sn == n) || (n < 0 ==> sn == 0);\n*/",
            "/*@\n    loop invariant 1 <= i && i <= n + 1;\n    loop invariant sn == i - 1 || sn == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant sn == i-1;\n    loop invariant (n >= 1 && sn == n) || (n < 1 && sn == 0);\n*/",
            "/*@ \n    loop invariant 0 <= sn <= i-1;\n    loop invariant 0 <= i <= n+1;\n    loop invariant (i <= n+1) ==> (sn == i-1 || sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant 0 <= sn && sn <= n;\n    loop invariant sn == i-1 || sn == 0;\n*/",
            "  sn = sn + 1;\n  v1 = unknown_int();\n  v2 = unknown_int();\n  v3 = unknown_int();"
        ],
        "expressions": "(i <= n ==> sn < n),
 (i <= n+1) ==> (sn == i-1 || sn == 0),
 (i > n ==> sn == n),
 (i > n) ==> (sn == n),
 (n >= 0 ==> sn == n) || (n < 0 ==> sn == 0),
 (n >= 1 && sn == n) || (n < 1 && sn == 0),
 0 <= i && i <= n + 1,
 0 <= i <= n+1,
 0 <= sn && sn <= n,
 0 <= sn <= i-1,
 0 <= sn <= n,
 1 <= i,
 1 <= i && i <= n + 1,
 1 <= i && i <= n+1,
 1 <= i <= n + 1,
 1 <= i <= n+1,
 i - 1 == sn,
 i <= n+1,
 n >= 0 ==> sn <= n,
 sn <= i,
 sn == (i <= n ? i - 1 : n),
 sn == i - 1,
 sn == i - 1 || sn == 0,
 sn == i || sn == 0,
 sn == i-1,
 sn == i-1 || sn == 0,
 sn >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gj2007b_true-unreach-call_true-termination.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n    loop invariant x == n ==> m < n || n <= 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant x <= n ==> m <= x;\n    loop invariant x >= n ==> m < n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n    loop invariant x <= n ==> m < n;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant x <= n ==> m <= x;\n    loop invariant x >= n ==> m < n;\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= n;\n    loop invariant 0 <= m && m <= x;\n    loop invariant (unknown_int() && x == n) ==> (m == x - 1);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n    loop invariant (m == 0) ==> (x == 0 || n <= 0);\n*/",
            "/*@\n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant m >= 0;\n    loop invariant (x <= m) ==> (unknown_int() != 0);\n    loop invariant (x > m) ==> (unknown_int() == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= n;\n    loop invariant 0 <= m <= x;\n    loop invariant (x == 0) ==> (m == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= m;\n    loop invariant x <= n;\n    loop invariant m <= x;\n    loop invariant n <= 0 ==> m == 0;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant m >= 0;\n    loop invariant m <= x;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= n;\n    loop invariant 0 <= m;\n    loop invariant m <= x;\n*/"
        ],
        "expressions": "(m == 0) ==> (x == 0 || n <= 0),
 (unknown_int() && x == n) ==> (m == x - 1),
 (x <= m) ==> (unknown_int() != 0),
 (x == 0) ==> (m == 0),
 (x > m) ==> (unknown_int() == 0),
 0 <= m,
 0 <= m && m <= x,
 0 <= m <= x,
 0 <= x,
 0 <= x && x <= n,
 0 <= x <= n,
 m <= x,
 m >= 0,
 n <= 0 ==> m == 0,
 x <= n,
 x <= n ==> m < n,
 x <= n ==> m <= x,
 x == n ==> m < n || n <= 0,
 x >= n ==> m < n"
    },
    "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-lit/cggmp2005.c": {
        "completions": [
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 10 >= j;\n    loop invariant i + j == 11;\n    loop invariant i % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 0 <= j <= 10;\n    loop invariant i + j <= 11;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant (j - i) % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 11;\n    loop invariant 6 <= j <= 10;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j + i <= 21;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant (j - i) % 3 == 0;\n*/",
            "/*@\n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant (j - i) % 3 == 2;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 11;\n    loop invariant 0 <= j <= 10;\n    loop invariant j >= i - 1;\n    loop invariant (i % 2) == 1;\n    loop invariant (j % 2) == 0;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i ==> (j - i) % 3 == 2;\n*/",
            "/*@ \n  loop invariant i >= 1;\n  loop invariant j <= 10;\n  loop invariant (j - i) % 2 == 0;\n  loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 1 <= j <= 10;\n    loop invariant i + j <= 12;\n    loop invariant i % 2 == 1;\n*/",
            "//@\nloop invariant 1 <= i;\nloop invariant 6 <= j <= 10;\nloop invariant i + j == 11;",
            "i = 1;\nj = 10;",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i % 2 == 1;\n    loop invariant 6 <= j <= 10;\n    loop invariant i <= j + 1;\n*/",
            "/*@\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant i <= j + 3;\n    loop invariant i >= 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i <= j + 1;\n    loop invariant 10 <= j + i;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n*/"
        ],
        "expressions": "(i % 2) == 1,
 (j % 2) == 0,
 (j - i) % 2 == 0,
 (j - i) % 2 == 1,
 (j - i) % 3 == 0,
 (j - i) % 3 == 2,
 0 <= j <= 10,
 1 <= i,
 1 <= i <= 11,
 1 <= j,
 1 <= j <= 10,
 10 <= j + i,
 10 >= j,
 6 <= j <= 10,
 i % 2 == 1,
 i + j <= 11,
 i + j <= 12,
 i + j == 11,
 i + j == 11;i = 1,
 i <= j + 1,
 i <= j + 3,
 i >= 1,
 j % 2 == 0,
 j + i <= 21,
 j <= 10,
 j >= i - 1,
 j >= i - 2,
 j >= i ==> (j - i) % 3 == 2"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/cggmp2005_true-unreach-call.c": {
        "completions": [
            "/*@ \n    loop invariant i >= 1 && j >= 0;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant j >= i;\n    loop invariant (j - i) % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 10 >= j;\n    loop invariant i + j == 11;\n    loop invariant i % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant j >= i ==> j == 10 - 2*(i - 1);\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant j >= i;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 11;\n    loop invariant 0 <= j <= 10;\n    loop invariant j >= i ==> j <= 2*i - 2;\n    loop invariant j < i ==> j == 2*(i - 1) - 4;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant i <= j + 4;\n*/",
            "/*@ \n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant i <= j + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant i % 2 == 1;\n    loop invariant 10 >= j;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i ==> (j - i) % 3 == 0;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant i + j == 11;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant 2 * i - j <= 3;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i;\n    loop invariant (j - i) % 3 == 0;\n*/",
            "/*@ \n    loop invariant i >= 1 && i <= 19;\n    loop invariant j >= 6 && j <= 10;\n    loop invariant i % 2 == 1;\n    loop invariant j % 2 == 0;\n    loop invariant j >= i ==> i <= 10;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 0 <= j <= 10;\n    loop invariant j >= i ==> j == 2 * i - 4;\n    loop invariant j < i ==> j == 2 * i - 5;\n*/",
            "/*@ \n    loop invariant 1 <= i;\n    loop invariant 6 <= j <= 10;\n    loop invariant (j - i) % 3 == 2;\n*/"
        ],
        "expressions": "(j - i) % 2 == 1,
 (j - i) % 3 == 0,
 (j - i) % 3 == 2,
 0 <= j <= 10,
 1 <= i,
 1 <= i <= 11,
 10 >= j,
 2 * i - j <= 3,
 6 <= j <= 10,
 i % 2 == 1,
 i + j == 11,
 i <= j + 1,
 i <= j + 4,
 i >= 1,
 i >= 1 && i <= 19,
 i >= 1 && j >= 0,
 j % 2 == 0,
 j < i ==> j == 2 * i - 5,
 j < i ==> j == 2*(i - 1) - 4,
 j <= 10,
 j >= 6 && j <= 10,
 j >= i,
 j >= i - 2,
 j >= i ==> (j - i) % 3 == 0,
 j >= i ==> i <= 10,
 j >= i ==> j <= 2*i - 2,
 j >= i ==> j == 10 - 2*(i - 1),
 j >= i ==> j == 2 * i - 4"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c": {
        "completions": [
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 1;\n    loop invariant g1 >= 1;\n    loop invariant g2 >= 1;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 0;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant f2 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n  loop invariant n >= 0;\n  loop invariant f1 >= 0;\n  loop invariant f2 >= 1;\n  loop invariant g1 >= 1;\n  loop invariant g2 >= 1;\n  loop invariant h1 >= 0;\n  loop invariant h2 >= 0;\n  loop invariant f1 <= f2;\n  loop invariant g1 <= g2;\n  loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 <= g1;\n    loop invariant f2 <= g2;\n    loop invariant f2 == f1 + 1;\n    loop invariant g2 == g1 + 1;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n  loop invariant n >= 0;\n  loop invariant f1 >= 0;\n  loop invariant f2 >= 1;\n  loop invariant g1 >= 1;\n  loop invariant g2 >= 1;\n  loop invariant h1 >= 0;\n  loop invariant h2 >= 0;\n  loop invariant f2 >= f1;\n  loop invariant g2 >= g1;\n  loop invariant h2 >= h1;\n  loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 1;\n    loop invariant g1 >= 1;\n    loop invariant g2 >= 1;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 1;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 0;\n    loop invariant g1 >= 0;\n    loop invariant g2 >= 0;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 0;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@\n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 1;\n    loop invariant g1 >= 1;\n    loop invariant g2 >= 1;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 0;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant 0 <= f1 <= g1;\n    loop invariant 1 <= f2 <= g2;\n    loop invariant g1 == f1 + f2;\n    loop invariant g2 == f2 + h2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n  loop invariant 0 <= n;\n  loop invariant f1 <= h1;\n  loop invariant g1 <= h1;\n  loop invariant f2 <= h2;\n  loop invariant g2 <= h2;\n  loop invariant f1 + g1 == h1;\n  loop invariant f2 + g2 == h2;\n  loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 1;\n    loop invariant g1 >= 1;\n    loop invariant g2 >= 1;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 0;\n    loop invariant f1 <= f2;\n    loop invariant g1 <= g2;\n    loop invariant h1 <= h2;\n    loop invariant (n > 0) ==> (h2 == h1 + f1);\n*/",
            "/*@ \n  loop invariant 0 <= f1 && f1 <= h1;\n  loop invariant 1 <= f2 && f2 <= h2;\n  loop invariant 1 <= g1 && g1 <= h1;\n  loop invariant 1 <= g2 && g2 <= h2;\n  loop invariant h2 == h1 + f1;\n  loop invariant n >= 0;\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f2 == f1 + 1;\n    loop invariant g1 == f1 + 1;\n    loop invariant g2 == f2 + 1;\n    loop invariant h1 == f1 + g1;\n    loop invariant h2 == f2 + g2;\n    loop invariant h2 == h1 + f1;\n*/",
            "/*@ \n  loop invariant (n <= 0) ==> (h1 == 0 && h2 == 0);\n  loop invariant (n > 0) ==> (h2 == h1 + f1);\n  loop invariant (n > 0) ==> (h1 >= 0 && h2 >= 0 && f1 >= 0 && f2 >= 0 && g1 >= 0 && g2 >= 0);\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant f1 >= 0;\n    loop invariant f2 >= 1;\n    loop invariant g1 >= 1;\n    loop invariant g2 >= 1;\n    loop invariant h1 >= 0;\n    loop invariant h2 >= 0;\n    loop invariant h2 == h1 + f1;\n*/"
        ],
        "expressions": "(n <= 0) ==> (h1 == 0 && h2 == 0),
 (n > 0) ==> (h1 >= 0 && h2 >= 0 && f1 >= 0 && f2 >= 0 && g1 >= 0 && g2 >= 0),
 (n > 0) ==> (h2 == h1 + f1),
 0 <= f1 && f1 <= h1,
 0 <= f1 <= g1,
 0 <= n,
 1 <= f2 && f2 <= h2,
 1 <= f2 <= g2,
 1 <= g1 && g1 <= h1,
 1 <= g2 && g2 <= h2,
 f1 + g1 == h1,
 f1 <= f2,
 f1 <= g1,
 f1 <= h1,
 f1 >= 0,
 f2 + g2 == h2,
 f2 <= g2,
 f2 <= h2,
 f2 == f1 + 1,
 f2 >= 0,
 f2 >= 1,
 f2 >= f1,
 g1 <= g2,
 g1 <= h1,
 g1 == f1 + 1,
 g1 == f1 + f2,
 g1 >= 0,
 g1 >= 1,
 g2 <= h2,
 g2 == f2 + 1,
 g2 == f2 + h2,
 g2 == g1 + 1,
 g2 >= 0,
 g2 >= 1,
 g2 >= g1,
 h1 <= h2,
 h1 == f1 + g1,
 h1 >= 0,
 h2 == f2 + g2,
 h2 == h1 + f1,
 h2 >= 0,
 h2 >= 1,
 h2 >= h1,
 n >= 0"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/42.c": {
        "completions": [
            "/*@\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant a == x + y - flag || a == x + y + 1 - flag;\n*/",
            "/*@ \n  loop invariant 1 <= x;\n  loop invariant 1 <= y;\n  loop invariant (flag != 0) ==> (a == x + y - 1);\n  loop invariant (flag == 0) ==> (a == x + y);\n*/",
            "//@\nloop invariant 1 <= x;\nloop invariant 1 <= y;\nloop invariant 0 <= a <= x + y + 1;\nloop invariant flag ==> (a == x + y || a == x + y - 1);\nloop invariant !flag ==> (a == x + y + 1 || a == x + y);",
            "/*@ \n    loop invariant 1 <= x;\n    loop invariant 1 <= y;\n    loop invariant flag ==> a == x + y;\n    loop invariant !flag ==> a == x + y + 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant (flag ==> a == x + y) && (!flag ==> a == x + y + 1);\n    loop invariant a >= 1;\n*/",
            "/*@ \n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant (flag ==> a == x + y - 1) && (!flag ==> a == x + y);\n  loop invariant (a % 2 == 1) ==> (y % 2 == 0);\n  loop invariant (a % 2 == 0) ==> (x % 2 == 0);\n*/",
            "/*@ \n  loop invariant 1 <= x;\n  loop invariant 1 <= y;\n  loop invariant flag ==> a == x + y - 1;\n  loop invariant !flag ==> a == x + y;\n*/",
            "/*@ \n  loop invariant x >= 1 && y >= 1; // x and y are always positive\n  loop invariant a >= 1; // a is always positive\n  loop invariant flag == 0 ==> a == x + y + 1; // when flag is 0, a is updated to x + y + 1\n  loop invariant flag != 0 ==> a == x + y; // when flag is non-zero, a is updated to x + y\n  loop invariant a % 2 == 1 ==> y == \\at(y, LoopEntry) + 1; // if a is odd, y is incremented\n  loop invariant a % 2 == 0 ==> x == \\at(x, LoopEntry) + 1; // if a is even, x is incremented\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant a == x + y || a == x + y + 1;\n*/",
            "/*@\n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant a >= 0;\n    loop invariant flag ==> (a % 2 == 1);\n    loop invariant !flag ==> (a % 2 == 0);\n*/",
            "/*@ \n    loop invariant 0 <= x && 0 <= y;\n    loop invariant (flag ==> a == x + y - 1) && (!flag ==> a == x + y);\n    loop invariant (a % 2 == 1) ==> (y >= 2);\n*/",
            "/*@ \n  loop invariant flag == 0 || flag == 1;\n  loop invariant x >= 1 && y >= 1;\n  loop invariant (flag ==> a == x+y) && (!flag ==> a == x+y+1) || a >= 1;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant flag ==> (a == x + y - 1);\n    loop invariant !flag ==> (a == x + y);\n    loop invariant a >= 2;\n*/",
            "/*@ \n    loop invariant 1 <= x;\n    loop invariant 1 <= y;\n    loop invariant (flag ==> a == x + y - 1) && (!flag ==> a == x + y);\n*/",
            "/*@ \n  loop invariant x >= 1;\n  loop invariant y >= 1;\n  loop invariant (flag ==> (a == x + y)) && (!flag ==> (a == x + y + 1));\n  loop invariant (a % 2 == 1) ==> (y >= 1);\n*/"
        ],
        "expressions": "!flag ==> (a % 2 == 0),
 !flag ==> (a == x + y + 1 || a == x + y),
 !flag ==> (a == x + y),
 !flag ==> a == x + y,
 !flag ==> a == x + y + 1,
 (a % 2 == 0) ==> (x % 2 == 0),
 (a % 2 == 1) ==> (y % 2 == 0),
 (a % 2 == 1) ==> (y >= 1),
 (a % 2 == 1) ==> (y >= 2),
 (flag != 0) ==> (a == x + y - 1),
 (flag == 0) ==> (a == x + y),
 (flag ==> (a == x + y)) && (!flag ==> (a == x + y + 1)),
 (flag ==> a == x + y - 1) && (!flag ==> a == x + y),
 (flag ==> a == x + y) && (!flag ==> a == x + y + 1),
 (flag ==> a == x+y) && (!flag ==> a == x+y+1) || a >= 1,
 0 <= a <= x + y + 1,
 0 <= x,
 0 <= x && 0 <= y,
 0 <= y,
 1 <= x,
 1 <= y,
 a % 2 == 0 ==> x == \\at(x, LoopEntry) + 1,
 a % 2 == 1 ==> y == \\at(y, LoopEntry) + 1,
 a == x + y - flag || a == x + y + 1 - flag,
 a == x + y || a == x + y + 1,
 a >= 0,
 a >= 1,
 a >= 2,
 flag != 0 ==> a == x + y,
 flag == 0 ==> a == x + y + 1,
 flag == 0 || flag == 1,
 flag ==> (a % 2 == 1),
 flag ==> (a == x + y - 1),
 flag ==> (a == x + y || a == x + y - 1),
 flag ==> a == x + y,
 flag ==> a == x + y - 1,
 x >= 1,
 x >= 1 && y >= 1,
 y >= 1"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= j && j <= n;\n    loop invariant m >= 0 && m <= j;\n    loop invariant (j == 0 ==> x + y == k) && (j > 0 ==> (x + y <= k + j) && (x + y >= k - j));\n*/",
            "/*@ \n  loop invariant 0 <= j && j <= n;\n  loop invariant (j <= i && x + y == k + j) || (j > i && x + y == k - 1 + j);\n  loop invariant 0 <= m && m <= j;\n*/",
            "/*@ \n    loop invariant 0 <= j && j <= n;\n    loop invariant m == 0 || (0 <= m && m < j);\n    loop invariant (j != i ==> x + y == k) && (j == i ==> x + y == k + 1);\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y == k + j - m;\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y == k;\n    loop invariant m <= j;\n    loop invariant (j != i) ==> (x - j == \\at(x, LoopEntry));\n    loop invariant (j == i) ==> (x - j == \\at(x, LoopEntry) - 1);\n    loop invariant (j != i) ==> (y - j == \\at(y, LoopEntry));\n    loop invariant (j == i) ==> (y - j == \\at(y, LoopEntry) + 1);\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == k;\n    loop invariant (j <= i ==> x == \\at(x, Pre) + j - i) && (y == \\at(y, Pre) - j + i);\n    loop invariant (j > i ==> x == \\at(x, Pre) - j + i) && (y == \\at(y, Pre) + j - i);\n    loop invariant 0 <= m <= j;\n*/",
            "/*@ \n    loop invariant 0 <= j && j <= n;\n    loop invariant x + y == k;\n    loop invariant j == 0 ==> m == 0;\n    loop invariant 0 <= m && m <= j;\n*/",
            "/*@ \n  loop invariant 0 <= j <= n;\n  loop invariant x + y == k;\n  loop invariant -1 <= m <= n;\n*/",
            "/*@ \n    loop invariant 0 <= j && j <= n;\n    loop invariant x + y == k;\n    loop invariant m >= 0;\n    loop invariant m <= j;\n    loop invariant m <= n;\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant m >= 0 && m <= n;\n    loop invariant x + y == k + j;\n*/",
            "@ loop invariant 0 <= j <= n;\n@ loop invariant m >= 0;\n@ loop invariant x + y == k;\n@ loop invariant (j == i) ==> (x == \\at(x - 1, LoopEntry) + 1 && y == \\at(y + 1, LoopEntry) - 1);\n@ loop invariant (j != i) ==> (x == \\at(x + 1, LoopEntry) - 1 && y == \\at(y - 1, LoopEntry) + 1);",
            "/*@\n    loop invariant 0 <= j <= n;\n    loop invariant j == 0 || x + y == k + j - 2 * m;\n    loop invariant m <= j;\n    loop invariant 0 <= m <= n;\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant x + y == k;\n    loop invariant 0 <= m <= n;\n    loop invariant 0 <= m ==> j <= m;\n*/",
            "/*@ \n    loop invariant 0 <= j <= n;\n    loop invariant (x + y) == k;\n    loop invariant (j == n) ==> (m <= n - 1);\n*/",
            "/*@ \n  loop invariant 0 <= j && j <= n;\n  loop invariant m >= 0 && m <= j;\n  loop invariant x + y == k;\n*/"
        ],
        "expressions": "(j != i ==> x + y == k) && (j == i ==> x + y == k + 1),
 (j != i) ==> (x - j == \\at(x, LoopEntry)),
 (j != i) ==> (x == \\at(x + 1, LoopEntry) - 1 && y == \\at(y - 1, LoopEntry) + 1),
 (j != i) ==> (y - j == \\at(y, LoopEntry)),
 (j <= i && x + y == k + j) || (j > i && x + y == k - 1 + j),
 (j <= i ==> x == \\at(x, Pre) + j - i) && (y == \\at(y, Pre) - j + i),
 (j == 0 ==> x + y == k) && (j > 0 ==> (x + y <= k + j) && (x + y >= k - j)),
 (j == i) ==> (x - j == \\at(x, LoopEntry) - 1),
 (j == i) ==> (x == \\at(x - 1, LoopEntry) + 1 && y == \\at(y + 1, LoopEntry) - 1),
 (j == i) ==> (y - j == \\at(y, LoopEntry) + 1),
 (j == n) ==> (m <= n - 1),
 (j > i ==> x == \\at(x, Pre) - j + i) && (y == \\at(y, Pre) + j - i),
 (x + y) == k,
 -1 <= m <= n,
 0 <= j && j <= n,
 0 <= j <= n,
 0 <= m && m <= j,
 0 <= m <= j,
 0 <= m <= n,
 0 <= m ==> j <= m,
 j == 0 ==> m == 0,
 j == 0 || x + y == k + j - 2 * m,
 m <= j,
 m <= n,
 m == 0 || (0 <= m && m < j),
 m >= 0,
 m >= 0 && m <= j,
 m >= 0 && m <= n,
 x + y == k,
 x + y == k + j,
 x + y == k + j - m"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -2 <= y <= x;\n    loop invariant (flag < 1) ==> (y >= 0);\n    loop invariant (flag == 1) ==> (y == -2 && x == 99);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 99;\n    loop invariant y <= 49;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant flag == 0 ==> y >= 0;\n    loop invariant flag == 1 ==> y < 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -2;\n    loop invariant flag >= 0 && flag <= 1;\n    loop invariant (x < 50) ==> (y >= 0 && y <= x);\n    loop invariant (x >= 50) ==> (y >= -2 && y <= 49);\n    loop invariant (flag == 1) ==> (y < 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -2 <= y <= 49;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant y >= -2 ==> x >= (y + 1) * 2;\n    loop invariant x == 99 ==> y == -2;\n*/",
            "@{\n    loop invariant 0 <= x <= 99;\n    loop invariant y <= x;\n    loop invariant y >= -2;\n    loop invariant (y < 0) ==> (flag == 1);\n    loop invariant (x >= 50) ==> (y == x - 50 - 2);\n    loop invariant (x < 50)  ==> (y == x);\n}",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -2;\n    loop invariant x <= 99;\n    loop invariant (x >= 50) ==> (y == x - 52);\n    loop invariant (x < 50) ==> (y == x);\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 50;\n    loop invariant x == y || x == y - 1;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag == 1) ==> (y == -2 && x == 99);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 99;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag < 1) ==> (y >= 0);\n    loop invariant (flag == 1) ==> (y == -2 && x == 99);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 99;\n    loop invariant -2 <= y;\n    loop invariant (flag == 1) ==> (y < 0);\n    loop invariant (x < 50) ==> (y == x);\n    loop invariant (50 <= x) ==> (y == 100 - x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -2 <= y <= 49;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 50;\n    loop invariant 0 <= flag && flag <= 1;\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n    loop invariant x >= y;\n*/",
            "@*/\n  loop invariant x >= 0;\n  loop invariant y >= -2;\n  loop invariant x <= 99;\n  loop invariant y <= 2 * x + 1;\n  loop invariant flag == 0 || (flag == 1 && y < 0);\n/*@ ",
            "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 49;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n    loop invariant x + y <= 50;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= 50;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag == 1) ==> (y == -2 && x == 99);\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's note the pre-conditions and variable assignments:\n\n1. x = 0\n2. y = 0\n3. flag = 0\n\nNext, let's analyze the loop body and note the loop condition:\n\n1. Loop condition: flag < 1\n2. Inside the loop body:\n   a. If y < 0, then flag = 1\n   b. If flag < 1, then x = x + 1\n   c. If x < 50, then y = y + 1, else y = y - 1\n\nNow, let's find the loop invariants:\n\n/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -2 <= y <= 50;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant (flag == 1) ==> (y == -2 && x == 99);\n*/\n"
        ],
        "expressions": "(50 <= x) ==> (y == 100 - x),
 (flag < 1) ==> (y >= 0),
 (flag == 1) ==> (x == 99),
 (flag == 1) ==> (y < 0),
 (flag == 1) ==> (y == -2 && x == 99),
 (flag == 1) ==> (y == -2),
 (x < 50)  ==> (y == x),
 (x < 50) ==> (y == x),
 (x < 50) ==> (y >= 0 && y <= x),
 (x >= 50) ==> (y == x - 50 - 2),
 (x >= 50) ==> (y == x - 52),
 (x >= 50) ==> (y >= -2 && y <= 49),
 (y < 0) ==> (flag == 1),
 -1 <= y <= 50,
 -2 <= y,
 -2 <= y && y <= 49,
 -2 <= y && y <= 50,
 -2 <= y <= 49,
 -2 <= y <= 50,
 -2 <= y <= x,
 0 <= flag && flag <= 1,
 0 <= x,
 0 <= x && x <= 99,
 0 <= x <= 99,
 0 <= y,
 flag == 0 ==> y >= 0,
 flag == 0 || (flag == 1 && y < 0),
 flag == 0 || flag == 1,
 flag == 1 ==> y < 0,
 flag >= 0 && flag <= 1,
 x + y <= 50,
 x <= 50 ==> y == x,
 x <= 99,
 x == 99 ==> y == -2,
 x == y || x == y - 1,
 x > 50 ==> y == 100 - x,
 x >= 0,
 x >= y,
 y <= 2 * x + 1,
 y <= 49,
 y <= x,
 y >= -2,
 y >= -2 ==> x >= (y + 1) * 2"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant -50 <= y <= 52;\n    loop invariant 0 <= z <= 400;\n    loop invariant z >= x;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n*/",
            "/*@\n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 51;\n    loop invariant 0 <= z <= 400;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant x <= 25 ==> z == x * (x + 1) / 2;\n    loop invariant x > 25 ==> z == 325 + (x - 25) * 5;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n    loop invariant (x <= 25) ==> (z == x);\n    loop invariant (x > 25) ==> (z == 125 + 5 * (x - 25));\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 2 * x - 100 ==> x >= 50;\n    loop invariant y == x ==> x <= 50;\n    loop invariant z == x ==> x < 25;\n    loop invariant z == 5 * x - 100 ==> x >= 25;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z;\n    loop invariant (x <= 50 ==> y == x);\n    loop invariant (x > 50 ==> y == 100 - x);\n    loop invariant (x <= 25 ==> z == x);\n    loop invariant (x > 25 ==> z == 5 * (x - 25) + 25);\n*/",
            "/*@\n    loop invariant 0 <= x <= 100;\n    loop invariant y == (x <= 50 ? x : 100 - x);\n    loop invariant z == (x <= 25 ? x : 25 + 5 * (x - 25));\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= x;\n    loop invariant 0 <= z <= 5 * x;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant x < 25 ==> z == x;\n    loop invariant x >= 25 ==> z == 5 * x - 100;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 52;\n    loop invariant 0 <= z;\n    loop invariant x <= 100 ==> y == x - (x - 50 > 0 ? x - 50 : 0);\n    loop invariant x <= 25 ==> z == x;\n    loop invariant 25 <= x <= 100 ==> z == 25 + 5 * (x - 25);\n*/",
            "//@ loop invariant 0 <= x <= 100;\n//@ loop invariant 0 <= y <= 51;\n//@ loop invariant 0 <= z <= 400;\n//@ loop invariant x <= 50 ==> y == x;\n//@ loop invariant x > 50 ==> y == 100 - x;\n//@ loop invariant x < 25 ==> z == x;\n//@ loop invariant x >= 25 ==> z == 24 + 5 * (x - 24);",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant -50 <= y <= 51;\n    loop invariant 0 <= z <= 475;\n    loop invariant x <= y + 50;\n    loop invariant x >= y - 50;\n    loop invariant z >= x;\n    loop invariant x < 25 ==> z <= x + 25;\n    loop invariant x >= 25 ==> z >= 5 * x - 100;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= x;\n    loop invariant 0 <= z <= 5*x;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant x < 25 ==> z == x;\n    loop invariant x >= 25 ==> z == x + 5*(x - 25);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z <= 500;\n    loop invariant y == x - (x > 50 ? x - 50 : 0);\n    loop invariant z == (x <= 25 ? x : 25) + 5 * (x > 25 ? x - 25 : 0);\n*/",
            "/*@\n  loop invariant 0 <= x <= 100;\n  loop invariant -50 <= y <= 100;\n  loop invariant 0 <= z <= 475;\n  loop invariant x <= 50 ==> y == x;\n  loop invariant x > 50 ==> y == 100 - x;\n  loop invariant x <= 25 ==> z == x;\n  loop invariant x > 25 ==> z == 25 + 5 * (x - 25);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 52;\n    loop invariant 0 <= z <= 500;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant x < 25 ==> z == x;\n    loop invariant x >= 25 ==> z == 25 + 5 * (x - 25);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant 0 <= y <= 100;\n    loop invariant 0 <= z <= 500;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n    loop invariant x <= 25 ==> z == x;\n    loop invariant x > 25 ==> z == 25 + 5 * (x - 25);\n*/"
        ],
        "expressions": "(x <= 25 ==> z == x),
 (x <= 25) ==> (z == x),
 (x <= 50 ==> y == x),
 (x <= 50) ==> (y == x),
 (x > 25 ==> z == 5 * (x - 25) + 25),
 (x > 25) ==> (z == 125 + 5 * (x - 25)),
 (x > 50 ==> y == 100 - x),
 (x > 50) ==> (y == 100 - x),
 -50 <= y <= 100,
 -50 <= y <= 51,
 -50 <= y <= 52,
 0 <= x <= 100,
 0 <= y <= 100,
 0 <= y <= 51,
 0 <= y <= 52,
 0 <= y <= x,
 0 <= z,
 0 <= z <= 400,
 0 <= z <= 475,
 0 <= z <= 5 * x,
 0 <= z <= 5*x,
 0 <= z <= 500,
 25 <= x <= 100 ==> z == 25 + 5 * (x - 25),
 x < 25 ==> z <= x + 25,
 x < 25 ==> z == x,
 x <= 100 ==> y == x - (x - 50 > 0 ? x - 50 : 0),
 x <= 25 ==> z == x,
 x <= 25 ==> z == x * (x + 1) / 2,
 x <= 50 ==> y == x,
 x <= y + 50,
 x > 25 ==> z == 25 + 5 * (x - 25),
 x > 25 ==> z == 325 + (x - 25) * 5,
 x > 50 ==> y == 100 - x,
 x >= 25 ==> z == 24 + 5 * (x - 24),
 x >= 25 ==> z == 25 + 5 * (x - 25),
 x >= 25 ==> z == 5 * x - 100,
 x >= 25 ==> z == x + 5*(x - 25),
 x >= 25 ==> z >= 5 * x - 100,
 x >= y - 50,
 y == (x <= 50 ? x : 100 - x),
 y == 2 * x - 100 ==> x >= 50,
 y == x - (x > 50 ? x - 50 : 0),
 y == x ==> x <= 50,
 z == (x <= 25 ? x : 25 + 5 * (x - 25)),
 z == (x <= 25 ? x : 25) + 5 * (x > 25 ? x - 25 : 0),
 z == 5 * x - 100 ==> x >= 25,
 z == x ==> x < 25,
 z >= x"
    },
    "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/hola/21.c": {
        "completions": [
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= n * c1;\n    loop invariant k == i * c1 - (i * v) * (c1 - c2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k == (i * c1) + ((n - i) * c2) ==> i == n;\n    loop invariant k >= i * c2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= n * c1;\n    loop invariant k >= i * c2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k >= 0;\n    loop invariant k == (i * c1) + ((i - i * (v == 0)) * c2);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k >= i * c2;\n    loop invariant k <= i * c1;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant i <= n;\n    loop invariant k >= 0;\n    loop invariant k <= i * c1;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= n * c1;\n    loop invariant k >= i * c2;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant k >= i * c2;\n  loop invariant k <= i * c1;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= k <= i * c1;\n  loop invariant k == i * c1 - (i * c1 - k) / c2 * c2;\n*/",
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= (n * c1);\n    loop invariant k == (i * c1) + (c1 - c2) * \\count(unknown2()%2==0, 0, i-1);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k == (i * c1 + (i - (i % 2 == 0)) * c1) ==> (unknown2() % 2 == 0);\n    loop invariant k == (i * c2 + (i - (i % 2 != 0)) * c2) ==> (unknown2() % 2 != 0);\n    loop invariant k >= i * c2;\n*/",
            "/*@\n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= k <= i * c1;\n    loop invariant k >= i * c2;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant k == (i * c1) || k == (i * c2) || k == (i * (c1 + c2));\n    loop invariant k >= i * c2;\n*/",
            "//@\nloop invariant 0 <= i && i <= n;\nloop invariant k >= i * c2 && k <= i * c1;",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= n;\n    loop invariant k >= 0;\n    loop invariant k % c1 == 0 || k % c2 == 0;\n    loop invariant k >= n * c2;\n*/"
        ],
        "expressions": "0 <= i && i <= n,
 0 <= i <= n,
 0 <= k <= (n * c1),
 0 <= k <= i * c1,
 0 <= k <= n * c1,
 i <= n,
 i >= 0,
 k % c1 == 0 || k % c2 == 0,
 k <= i * c1,
 k == (i * c1 + (i - (i % 2 == 0)) * c1) ==> (unknown2() % 2 == 0),
 k == (i * c1) + ((i - i * (v == 0)) * c2),
 k == (i * c1) + ((n - i) * c2) ==> i == n,
 k == (i * c1) + (c1 - c2) * \\count(unknown2()%2==0, 0, i-1),
 k == (i * c1) || k == (i * c2) || k == (i * (c1 + c2)),
 k == (i * c2 + (i - (i % 2 != 0)) * c2) ==> (unknown2() % 2 != 0),
 k == i * c1 - (i * c1 - k) / c2 * c2,
 k == i * c1 - (i * v) * (c1 - c2),
 k >= 0,
 k >= i * c2,
 k >= i * c2 && k <= i * c1,
 k >= n * c2"
    },
    "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c": {
        "completions": [
            "/*@ \n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n    loop invariant 2 * v2 - v1 - v3 == 0;\n    loop invariant v1 - v3 >= 0;\n    loop invariant x1 == 100 + v1 * t;\n    loop invariant x2 == 75 + (v2 + t) * t;\n    loop invariant x3 == -50 + v3 * t;\n    loop invariant t >= 0;\n*/",
            "/*@ \n    loop invariant x1 == 100 + t * v1;\n    loop invariant x2 == 75 + t * v2;\n    loop invariant x3 == -50 + t * v3;\n    loop invariant 0 <= t;\n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5 + t;\n    loop invariant 2 * v2 - v1 - v3 == 2 * t;\n    loop invariant v1 - v3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 100;\n    loop invariant x2 >= 75;\n    loop invariant x3 <= -50;\n    loop invariant v3 >= 0;\n    loop invariant v1 <= 5;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 == 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 6;\n    loop invariant t >= 0;\n*/",
            "/*@ \n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n    loop invariant x1 == 100 + v1 * t;\n    loop invariant x3 == -50 + v3 * t;\n    loop invariant x2 == 75 + v2 * t;\n*/",
            "/*@ \n    loop invariant x1 == \\at(x1,Pre) + v1*t;\n    loop invariant x2 == \\at(x2,Pre) + v2*t;\n    loop invariant x3 == \\at(x3,Pre) + v3*t;\n    loop invariant t >= 0;\n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5 + t;\n    loop invariant 2*v2 - v1 - v3 == -2*t;\n */",
            "//@\nloop invariant x1 == 100 + t * v1;\nloop invariant x2 == 75 + t * v2;\nloop invariant x3 == -50 + t * v3;\nloop invariant v2 + 5 >= 0;\nloop invariant v2 <= 5;\nloop invariant v3 >= 0;\nloop invariant v1 <= 5;\nloop invariant v1 - v3 >= 0;\nloop invariant 2 * v2 - v1 - v3 == 0;\nloop invariant t >= 0;",
            "/*@ \n    loop invariant x1 == \\at(x1, Pre) + t * v1;\n    loop invariant x2 == \\at(x2, Pre) + t * v2;\n    loop invariant x3 == \\at(x3, Pre) + t * v3;\n    loop invariant 2 * v2 - v1 - v3 == 0;\n    loop invariant v1 <= 5;\n    loop invariant v1 - v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant t >= 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, let's note the pre-conditions and variable assignments in the program:\n\n1. x1 = 100\n2. x2 = 75\n3. x3 = -50\n4. v3 >= 0\n5. v1 <= 5\n6. v1 - v3 >= 0\n7. 2 * v2 - v1 - v3 == 0\n8. v2 + 5 >= 0\n9. v2 <= 5\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is `unknown_int()`, which is a non-deterministic function. We will use implication in our loop invariants for this condition.\n\nNow let's find the loop invariants:\n\n/*@ \n    loop invariant x1 == \\at(x1, Pre) + t * v1;\n    loop invariant x2 == \\at(x2, Pre) + t * v2;\n    loop invariant x3 == \\at(x3, Pre) + t * v3;\n    loop invariant t >= 0;\n    loop invariant v2 <= 6;\n    loop invariant v2 >= -1;\n    loop invariant v3 >= 0;\n    loop invariant v1 <= 5;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 + 2 * t == 0;\n*/\n",
            "/*@ \n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n    loop invariant 2 * x2 - x1 - x3 >= 0 ==> v2 >= 0;\n    loop invariant 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5;\n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 == 0;\n*/",
            "/*@ \n    loop invariant 100 <= x1;\n    loop invariant x1 <= 100 + 5 * t;\n    loop invariant x2 == 75 + t * v2 - t * (t - 1) / 2;\n    loop invariant x3 == -50 + t * v3;\n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n    loop invariant t >= 0;\n    loop invariant 2 * v2 - v1 - v3 == -2 * t;\n*/",
            "/*@ \n    loop invariant 100 <= x1;\n    loop invariant 75 <= x2;\n    loop invariant x3 <= -50;\n    loop invariant v3 >= 0;\n    loop invariant v1 <= 5;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 == 2 * (v2 - t) - v1 - v3;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5 + t;\n    loop invariant t >= 0;\n*/",
            "/*@ \n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 == 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 6;\n    loop invariant x1 == 100 + (t * v1);\n    loop invariant x2 == 75 + (t * v2);\n    loop invariant x3 == -50 + (t * v3);\n    loop invariant t >= 0;\n*/",
            "@*/\n  loop invariant v1 <= 5;\n  loop invariant v3 >= 0;\n  loop invariant v1 - v3 >= 0;\n  loop invariant 2 * v2 - v1 - v3 == 2 * t;\n  loop invariant v2 + 5 >= 0;\n  loop invariant v2 <= 5 + t;\n  loop invariant t >= 0;\n  loop invariant x1 == 100 + t * v1;\n  loop invariant x2 == 75 + t * v2;\n  loop invariant x3 == -50 + t * v3;\n/*@ ",
            "/*@ \n    loop invariant x1 == 100 + t * v1;\n    loop invariant x2 == 75 + t * (v2 + t);\n    loop invariant x3 == -50 + t * v3;\n    loop invariant t >= 0;\n    loop invariant v1 <= 5;\n    loop invariant v3 >= 0;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 6;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 + 2 * t == 0;\n*/",
            "/*@ \n    loop invariant x1 == 100 + t * v1;\n    loop invariant x2 == 75 + t * (v2 + 1);\n    loop invariant x3 == -50 + t * v3;\n    loop invariant 0 <= t;\n    loop invariant 0 <= v3;\n    loop invariant v1 <= 5;\n    loop invariant v1 - v3 >= 0;\n    loop invariant 2 * v2 - v1 - v3 == 2 * t;\n    loop invariant v2 + 5 >= 0;\n    loop invariant v2 <= 5;\n*/"
        ],
        "expressions": "0 <= t,
 0 <= v3,
 100 <= x1,
 2 * v2 - v1 - v3 + 2 * t == 0,
 2 * v2 - v1 - v3 == -2 * t,
 2 * v2 - v1 - v3 == 0,
 2 * v2 - v1 - v3 == 2 * (v2 - t) - v1 - v3,
 2 * v2 - v1 - v3 == 2 * t,
 2 * x2 - x1 - x3 <= 0 ==> v2 <= 5,
 2 * x2 - x1 - x3 >= 0 ==> v2 >= 0,
 2*v2 - v1 - v3 == -2*t,
 75 <= x2,
 t >= 0,
 v1 - v3 >= 0,
 v1 <= 5,
 v2 + 5 >= 0,
 v2 <= 5,
 v2 <= 5 + t,
 v2 <= 6,
 v2 >= -1,
 v3 >= 0,
 x1 <= 100 + 5 * t,
 x1 == 100 + (t * v1),
 x1 == 100 + t * v1,
 x1 == 100 + v1 * t,
 x1 == \\at(x1, Pre) + t * v1,
 x1 == \\at(x1,Pre) + v1*t,
 x1 >= 100,
 x2 == 75 + (t * v2),
 x2 == 75 + (v2 + t) * t,
 x2 == 75 + t * (v2 + 1),
 x2 == 75 + t * (v2 + t),
 x2 == 75 + t * v2,
 x2 == 75 + t * v2 - t * (t - 1) / 2,
 x2 == 75 + v2 * t,
 x2 == \\at(x2, Pre) + t * v2,
 x2 == \\at(x2,Pre) + v2*t,
 x2 >= 75,
 x3 <= -50,
 x3 == -50 + (t * v3),
 x3 == -50 + t * v3,
 x3 == -50 + v3 * t,
 x3 == \\at(x3, Pre) + t * v3,
 x3 == \\at(x3,Pre) + v3*t"
    }
}