{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  while( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x < 50 ? 0 : x - 50);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= 150;\n    loop invariant y == x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant x <= y;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 || y == x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + x - (x > 50 ? x - 50 : 0);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 || (x >= 50 && y == x);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x < 50 ? 0 : x - 50);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= 150;\n    loop invariant y == x + 50;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant x <= y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 || y == x;\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= x + 50;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + x - (x > 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 || (x >= 50 && y == x);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: y == 50 + (x > 50 ? x - 50 : 0);\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant y == 50 + (x < 50 ? 0 : x - 50);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant y == 50 + (x < 50 ? 0 : x - 50) is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: y == 50 + (x < 50 ? 0 : x - 50);\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= x + 50 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\nloop invariant i4: y <= x + 50;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= 150;\n    loop invariant y == x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100 is inductive.\nloop invariant y >= 50 && y <= 150 is inductive.\nloop invariant y == x + 50 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + (x > 50 ? x - 50 : 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nAssertion \\false: Valid"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is inductive.\nloop invariant y == x + 50 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant x <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is established but not preserved.\nloop invariant x <= y is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\n\nloop invariant i5: x <= y;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= x + 50 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\nloop invariant i4: y <= x + 50;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 || y == x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 || y == x is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100;\n    loop invariant y >= 50 && y <= x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100 is inductive.\nloop invariant y >= 50 && y <= x + 50 is inductive.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0 && x <= 100;\nloop invariant i2: y >= 50 && y <= x + 50;\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y == 50 + x - (x > 50 ? x - 50 : 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + x - (x > 50 ? x - 50 : 0) is established but not preserved.\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 50;\n    loop invariant x <= 100;\n    loop invariant y <= 150;\n    loop invariant y == x + 50;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is inductive.\nloop invariant y == x + 50 is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: x <= 100;\n\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 100;\n    loop invariant y == 50 || (x >= 50 && y == x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 100 is inductive.\nloop invariant y == 50 || (x >= 50 && y == x) is established but not preserved.\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: 0 <= x <= 100;\n\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nloop invariant 0 <= x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant y == 50 + (x < 50 ? 0 : x - 50) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= x + 50 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nloop invariant x >= 0 && x <= 100 is inductive.\nloop invariant y >= 50 && y <= 150 is inductive.\nloop invariant y == x + 50 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + (x > 50 ? x - 50 : 0) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is inductive.\nloop invariant y == x + 50 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is inductive.\nloop invariant x <= y is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= x + 50 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 || y == x is inductive.\nloop invariant x >= 0 && x <= 100 is inductive.\nloop invariant y >= 50 && y <= x + 50 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y == 50 + x - (x > 50 ? x - 50 : 0) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 50 is inductive.\nloop invariant x <= 100 is inductive.\nloop invariant y <= 150 is inductive.\nloop invariant y == x + 50 is inductive.\nloop invariant 0 <= x <= 100 is inductive.\nloop invariant y == 50 || (x >= 50 && y == x) is inductive.\nAssertion \\false: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i4: 0 <= x <= 100;\nloop invariant i5: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 50;\nloop invariant i8: y == 50 + (x < 50 ? 0 : x - 50);\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 50;\nloop invariant i11: x <= 100;\nloop invariant i12: y <= x + 50;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 50;\nloop invariant i15: x <= 100;\nloop invariant i16: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i17: x >= 0 && x <= 100;\nloop invariant i18: y >= 50 && y <= 150;\nloop invariant i19: y == x + 50;\nloop invariant i20: x >= 0;\nloop invariant i21: y >= 50;\nloop invariant i22: x <= 100;\nloop invariant i23: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 50;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 150;\nloop invariant i28: y == x + 50;\nloop invariant i29: x >= 0;\nloop invariant i30: y >= 50;\nloop invariant i31: x <= 100;\nloop invariant i32: y <= 150;\nloop invariant i33: x <= y;\nloop invariant i34: x >= 0;\nloop invariant i35: y >= 50;\nloop invariant i36: x <= 100;\nloop invariant i37: y <= x + 50;\nloop invariant i38: x >= 0;\nloop invariant i39: y >= 50;\nloop invariant i40: x <= 100;\nloop invariant i41: y == 50 || y == x;\nloop invariant i42: x >= 0 && x <= 100;\nloop invariant i43: y >= 50 && y <= x + 50;\nloop invariant i44: x >= 0;\nloop invariant i45: y >= 50;\nloop invariant i46: x <= 100;\nloop invariant i47: y == 50 + x - (x > 50 ? x - 50 : 0);\nloop invariant i48: x >= 0;\nloop invariant i49: y >= 50;\nloop invariant i50: x <= 100;\nloop invariant i51: y <= 150;\nloop invariant i52: y == x + 50;\nloop invariant i53: 0 <= x <= 100;\nloop invariant i54: y == 50 || (x >= 50 && y == x);\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n   int x, y;\n\n   x = 0;\n   y = 50;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 50;\nloop invariant i3: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i4: 0 <= x <= 100;\nloop invariant i5: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i6: x >= 0;\nloop invariant i7: y >= 50;\nloop invariant i8: y == 50 + (x < 50 ? 0 : x - 50);\nloop invariant i9: x >= 0;\nloop invariant i10: y >= 50;\nloop invariant i11: x <= 100;\nloop invariant i12: y <= x + 50;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 50;\nloop invariant i15: x <= 100;\nloop invariant i16: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i17: x >= 0 && x <= 100;\nloop invariant i18: y >= 50 && y <= 150;\n\nloop invariant i20: x >= 0;\nloop invariant i21: y >= 50;\nloop invariant i22: x <= 100;\nloop invariant i23: y == 50 + (x > 50 ? x - 50 : 0);\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 50;\nloop invariant i26: x <= 100;\nloop invariant i27: y <= 150;\n\nloop invariant i29: x >= 0;\nloop invariant i30: y >= 50;\nloop invariant i31: x <= 100;\nloop invariant i32: y <= 150;\nloop invariant i33: x <= y;\nloop invariant i34: x >= 0;\nloop invariant i35: y >= 50;\nloop invariant i36: x <= 100;\nloop invariant i37: y <= x + 50;\nloop invariant i38: x >= 0;\nloop invariant i39: y >= 50;\nloop invariant i40: x <= 100;\nloop invariant i41: y == 50 || y == x;\nloop invariant i42: x >= 0 && x <= 100;\nloop invariant i43: y >= 50 && y <= x + 50;\nloop invariant i44: x >= 0;\nloop invariant i45: y >= 50;\nloop invariant i46: x <= 100;\n\nloop invariant i48: x >= 0;\nloop invariant i49: y >= 50;\nloop invariant i50: x <= 100;\nloop invariant i51: y <= 150;\n\nloop invariant i53: 0 <= x <= 100;\nloop invariant i54: y == 50 || (x >= 50 && y == x);\n*/\nwhile( x < 100 ) {\n    if( x < 50 ) {\n      x = x+1;\n    } else {\n      x = x+1;\n      y = y+1;\n    }\n  }\n\n  if( y > 100 || y < 100 )\n    goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/ken-imp.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-CPA-example_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-singleloop2-pepm-proc.c_VeriMAP_true.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-disj_VeriMAP_true.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-interpolants_needed-pepm-proc.c_VeriMAP_true.c"
        ],
        "skipped": [],
        "total": 19,
        "success_count": 8,
        "failure_count": 11,
        "success_rate": 0.42105263157894735
    }
}