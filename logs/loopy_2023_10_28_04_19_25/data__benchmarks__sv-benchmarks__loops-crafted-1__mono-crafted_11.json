{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  while (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x - 1) % 2 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x < 10000000 && x % 2 == 1);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/\n```",
            "```\n/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0 && x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || ((x - 10000000) % 2 == 0);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x - 1) % 2 == 0;\n*/",
            "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/",
            "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x < 10000000 && x % 2 == 1);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant x >= 0 && x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || ((x - 10000000) % 2 == 0);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x - 1) % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is established but not preserved.\nloop invariant x % 2 == 0 || (x - 1) % 2 == 0 is inductive.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: x % 2 == 0 || (x - 1) % 2 == 0;\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 100000000 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x >= 10000000 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x >= 10000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 100000000 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x >= 10000000 is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || (x < 10000000 && x % 2 == 1);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || (x < 10000000 && x % 2 == 1) is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 100000000 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x <= 100000000;\n    loop invariant x >= 0;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x <= 100000000 is established but not preserved.\nloop invariant x >= 0 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\n\nloop invariant i2: x >= 0;\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is established but not preserved.\nloop invariant (x <= 10000000) || (x % 2 == 1) is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= x is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0 && x <= 100000000;\n    loop invariant x % 2 == 0 || x < 10000000;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 && x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nAssertion x % 2 == 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || (x % 2 == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is established but not preserved.\nloop invariant (x <= 10000000) || (x % 2 == 1) is established but not preserved.\nAssertion x % 2 == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= 100000000;\n    loop invariant (x <= 10000000) || ((x - 10000000) % 2 == 0);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant (x <= 10000000) || ((x - 10000000) % 2 == 0) is inductive.\nAssertion x % 2 == 0: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || (x - 1) % 2 == 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x >= 10000000 is established but not preserved.\nloop invariant x <= 100000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x >= 10000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || (x < 10000000 && x % 2 == 1) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is established but not preserved.\nloop invariant x <= 100000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant x >= 0 && x <= 100000000 is inductive.\nloop invariant x % 2 == 0 || x < 10000000 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant (x <= 10000000) || (x % 2 == 1) is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant x <= 100000000 is inductive.\nloop invariant (x <= 10000000) || ((x - 10000000) % 2 == 0) is inductive.\nAssertion x % 2 == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100000000;\nloop invariant i3: x % 2 == 0 || (x - 1) % 2 == 0;\nloop invariant i4: x <= 100000000;\nloop invariant i5: x >= 0;\nloop invariant i6: x % 2 == 0 || x >= 10000000;\nloop invariant i7: x <= 100000000;\nloop invariant i8: x >= 0;\nloop invariant i9: x % 2 == 0 || x >= 10000000;\nloop invariant i10: x >= 0;\nloop invariant i11: x <= 100000000;\nloop invariant i12: x % 2 == 0 || (x < 10000000 && x % 2 == 1);\nloop invariant i13: x >= 0;\nloop invariant i14: x <= 100000000;\nloop invariant i15: x % 2 == 0 || x < 10000000;\nloop invariant i16: x >= 0;\nloop invariant i17: x % 2 == 0 || x < 10000000;\nloop invariant i18: x <= 100000000;\nloop invariant i19: x >= 0;\nloop invariant i20: (x <= 10000000) || (x % 2 == 1);\nloop invariant i21: x <= 100000000;\nloop invariant i22: x >= 0;\nloop invariant i23: (x <= 10000000) || (x % 2 == 1);\nloop invariant i24: x >= 0;\nloop invariant i25: x <= 100000000;\nloop invariant i26: x % 2 == 0 || x < 10000000;\nloop invariant i27: x >= 0;\nloop invariant i28: x <= 100000000;\nloop invariant i29: (x <= 10000000) || (x % 2 == 1);\nloop invariant i30: 0 <= x;\nloop invariant i31: x <= 100000000;\nloop invariant i32: x % 2 == 0 || x < 10000000;\nloop invariant i33: 0 <= x;\nloop invariant i34: x <= 100000000;\nloop invariant i35: x % 2 == 0 || x < 10000000;\nloop invariant i36: x >= 0 && x <= 100000000;\nloop invariant i37: x % 2 == 0 || x < 10000000;\nloop invariant i38: x >= 0;\nloop invariant i39: x <= 100000000;\nloop invariant i40: (x <= 10000000) || (x % 2 == 1);\nloop invariant i41: x >= 0;\nloop invariant i42: x <= 100000000;\nloop invariant i43: (x <= 10000000) || ((x - 10000000) % 2 == 0);\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  unsigned int x = 0;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 100000000;\nloop invariant i3: x % 2 == 0 || (x - 1) % 2 == 0;\nloop invariant i4: x <= 100000000;\nloop invariant i5: x >= 0;\n\nloop invariant i7: x <= 100000000;\nloop invariant i8: x >= 0;\n\nloop invariant i10: x >= 0;\nloop invariant i11: x <= 100000000;\nloop invariant i12: x % 2 == 0 || (x < 10000000 && x % 2 == 1);\nloop invariant i13: x >= 0;\nloop invariant i14: x <= 100000000;\nloop invariant i15: x % 2 == 0 || x < 10000000;\nloop invariant i16: x >= 0;\nloop invariant i17: x % 2 == 0 || x < 10000000;\nloop invariant i18: x <= 100000000;\nloop invariant i19: x >= 0;\n\nloop invariant i21: x <= 100000000;\nloop invariant i22: x >= 0;\n\nloop invariant i24: x >= 0;\nloop invariant i25: x <= 100000000;\nloop invariant i26: x % 2 == 0 || x < 10000000;\nloop invariant i27: x >= 0;\nloop invariant i28: x <= 100000000;\n\nloop invariant i30: 0 <= x;\nloop invariant i31: x <= 100000000;\nloop invariant i32: x % 2 == 0 || x < 10000000;\nloop invariant i33: 0 <= x;\nloop invariant i34: x <= 100000000;\nloop invariant i35: x % 2 == 0 || x < 10000000;\nloop invariant i36: x >= 0 && x <= 100000000;\nloop invariant i37: x % 2 == 0 || x < 10000000;\nloop invariant i38: x >= 0;\nloop invariant i39: x <= 100000000;\n\nloop invariant i41: x >= 0;\nloop invariant i42: x <= 100000000;\nloop invariant i43: (x <= 10000000) || ((x - 10000000) % 2 == 0);\n*/\nwhile (x < 100000000) {\n    if (x < 10000000) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x%2)==0);\n}\n\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c"
        ],
        "skipped": [],
        "total": 4,
        "success_count": 2,
        "failure_count": 2,
        "success_rate": 0.5
    }
}