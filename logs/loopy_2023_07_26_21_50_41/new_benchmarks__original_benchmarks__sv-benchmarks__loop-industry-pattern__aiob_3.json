{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-industry-pattern/aiob_3.c",
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Do not make assumptions about variables that are not initialized.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- To get the value of a variable at the beginning of the loop, use the given pre-conditions."
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\nvoid reach_error() { __assert_fail(\"0\", \"aiob_3.c\", 3, \"reach_error\"); }\nextern unsigned int __VERIFIER_nondet_uint(void) ;\nstruct Velocity_Mode;\nstruct PCMode;\nstruct DeviceControl;\nstruct _IO_FILE;\nstruct _IO_marker;\ntypedef struct DeviceControl DEV_CNTRL;\ntypedef struct _IO_FILE FILE;\ntypedef struct _IO_FILE __FILE;\ntypedef struct _IO_FILE _IO_FILE;\ntypedef long  __off_t;\ntypedef long long  __quad_t;\ntypedef __quad_t __off64_t;\ntypedef void  _IO_lock_t;\ntypedef struct PCMode POS_CTRL_MODE;\ntypedef struct Velocity_Mode VLMODE;\ntypedef unsigned int  size_t;\nstruct _IO_FILE{\nint  Id_MCDC_0;\nchar * Id_MCDC_1;\nchar * Id_MCDC_2;\nchar * Id_MCDC_3;\nchar * Id_MCDC_4;\nchar * Id_MCDC_5;\nchar * Id_MCDC_6;\nchar * Id_MCDC_7;\nchar * Id_MCDC_8;\nchar * Id_MCDC_9;\nchar * Id_MCDC_10;\nchar * Id_MCDC_11;\nstruct _IO_marker* Id_MCDC_12;\nstruct _IO_FILE* Id_MCDC_13;\nint  Id_MCDC_14;\nint  Id_MCDC_15;\n__off_t Id_MCDC_16;\nunsigned short  Id_MCDC_17;\nsigned char  Id_MCDC_18;\nchar  Id_MCDC_19 [1];\n_IO_lock_t* Id_MCDC_20;\n__off64_t Id_MCDC_21;\nvoid * Id_MCDC_22;\nvoid * Id_MCDC_23;\nvoid * Id_MCDC_24;\nvoid * Id_MCDC_25;\nsize_t Id_MCDC_26;\nint  Id_MCDC_27;\nchar  Id_MCDC_28 [40];\n} ;\ntypedef unsigned char  UINT8;\ntypedef unsigned short  UINT16;\ntypedef unsigned int  UINT32;\ntypedef unsigned long long  UINT64;\ntypedef char  INT8;\ntypedef char  CHAR;\ntypedef char * STRING;\ntypedef short  INT16;\nstruct DeviceControl{\nINT8* Id_MCDC_29;\nUINT16* Id_MCDC_30;\nUINT16* Id_MCDC_31;\nINT16* Id_MCDC_32;\nINT16* Id_MCDC_33;\nINT16* Id_MCDC_34;\nINT16* Id_MCDC_35;\nINT16* Id_MCDC_36;\nINT8* Id_MCDC_37;\n} ;\ntypedef int  INT32;\nstruct PCMode{\nINT16* Id_MCDC_38;\nINT32* Id_MCDC_39;\nINT32* Id_MCDC_40;\nINT32* Id_MCDC_41;\nUINT16* Id_MCDC_42;\nUINT32* Id_MCDC_43;\nUINT16* Id_MCDC_44;\nINT32* Id_MCDC_45;\nINT32* Id_MCDC_46;\n} ;\nstruct Velocity_Mode{\nINT16* Id_MCDC_47;\nINT16* Id_MCDC_48;\nINT16* Id_MCDC_49;\nINT16* Id_MCDC_50;\nINT16* Id_MCDC_51;\nUINT32* Id_MCDC_52;\nINT32* Id_MCDC_53;\nINT32* Id_MCDC_54;\nINT32* Id_MCDC_55;\nINT32* Id_MCDC_56;\nUINT8* Id_MCDC_57;\nUINT32* Id_MCDC_58;\nUINT32* Id_MCDC_59;\nUINT32* Id_MCDC_60;\nUINT32* Id_MCDC_61;\nUINT32* Id_MCDC_62;\nUINT32* Id_MCDC_63;\nUINT32* Id_MCDC_64;\nUINT32* Id_MCDC_65;\nUINT32* Id_MCDC_66;\nUINT32* Id_MCDC_67;\nUINT32* Id_MCDC_68;\nUINT32* Id_MCDC_69;\nUINT32* Id_MCDC_70;\nUINT32* Id_MCDC_71;\nUINT32* Id_MCDC_72;\nUINT32* Id_MCDC_73;\nUINT32* Id_MCDC_74;\nUINT32* Id_MCDC_75;\nUINT32* Id_MCDC_76;\nUINT16* Id_MCDC_77;\nUINT32* Id_MCDC_78;\nUINT16* Id_MCDC_79;\nUINT32* Id_MCDC_80;\nUINT16* Id_MCDC_81;\nUINT32* Id_MCDC_82;\nUINT32* Id_MCDC_83;\nUINT32* Id_MCDC_84;\nINT16* Id_MCDC_85;\nINT16* Id_MCDC_86;\nINT16* Id_MCDC_87;\n} ;\ntypedef long  INT64;\ntypedef float  REAL32;\nUINT32 Id_MCDC_92(UINT16 Id_MCDC_88, UINT8 Id_MCDC_89, UINT32 Id_MCDC_93, void * Id_MCDC_91)\n{\n\tUINT32 x=__VERIFIER_nondet_uint();\n\treturn x;\n}\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94);\nextern FILE* fopen(char  const* Id_MCDC_96, char  const* Id_MCDC_97);\nint  main();\nvoid  __VERIFIER_assert(int  Id_MCDC_98);\nunsigned int  Id_MCDC_99;\n\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94)\n{\nvoid * Id_MCDC_100 [41]={Id_MCDC_94->Id_MCDC_47, Id_MCDC_94->Id_MCDC_48, Id_MCDC_94->Id_MCDC_49, Id_MCDC_94->Id_MCDC_50, Id_MCDC_94->Id_MCDC_51, Id_MCDC_94->Id_MCDC_52, Id_MCDC_94->Id_MCDC_53, Id_MCDC_94->Id_MCDC_54, Id_MCDC_94->Id_MCDC_55, Id_MCDC_94->Id_MCDC_56, Id_MCDC_94->Id_MCDC_57, Id_MCDC_94->Id_MCDC_58, Id_MCDC_94->Id_MCDC_59, Id_MCDC_94->Id_MCDC_60, Id_MCDC_94->Id_MCDC_61, Id_MCDC_94->Id_MCDC_62, Id_MCDC_94->Id_MCDC_63, Id_MCDC_94->Id_MCDC_64, Id_MCDC_94->Id_MCDC_65, Id_MCDC_94->Id_MCDC_66, Id_MCDC_94->Id_MCDC_67, Id_MCDC_94->Id_MCDC_68, Id_MCDC_94->Id_MCDC_69, Id_MCDC_94->Id_MCDC_70, Id_MCDC_94->Id_MCDC_71, Id_MCDC_94->Id_MCDC_72, Id_MCDC_94->Id_MCDC_73, Id_MCDC_94->Id_MCDC_74, Id_MCDC_94->Id_MCDC_75, Id_MCDC_94->Id_MCDC_76, Id_MCDC_94->Id_MCDC_77, Id_MCDC_94->Id_MCDC_78, Id_MCDC_94->Id_MCDC_79, Id_MCDC_94->Id_MCDC_80, Id_MCDC_94->Id_MCDC_81, Id_MCDC_94->Id_MCDC_82, Id_MCDC_94->Id_MCDC_83, Id_MCDC_94->Id_MCDC_84, Id_MCDC_94->Id_MCDC_85, Id_MCDC_94->Id_MCDC_86, Id_MCDC_94->Id_MCDC_87};\nUINT32 const Id_MCDC_101 [42] [3]={{( UINT16 ) 0x6042, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6043, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6053, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6054, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6055, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604E, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604C, ( UINT8 ) 0x01, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604C, ( UINT8 ) 0x02, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604B, ( UINT8 ) 0x01, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604B, ( UINT8 ) 0x02, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604D, ( UINT8 ) 0x00, ( UINT32 ) 0x02}, {( UINT16 ) 0x6046, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6046, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x6049, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6049, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604A, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604A, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604F, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6050, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6051, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6044, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6045, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6052, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {0x00, 0x00, 0x00}};\nUINT32 Id_MCDC_102=0;\nwhile(Id_MCDC_101[Id_MCDC_102][0] != 0x00)\n{\nId_MCDC_92(Id_MCDC_101[Id_MCDC_102][0], Id_MCDC_101[Id_MCDC_102][1], (Id_MCDC_99 = Id_MCDC_102 , (\"17_6632_4294986969\" , __VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))) , Id_MCDC_101[Id_MCDC_99])[2], Id_MCDC_100[Id_MCDC_102]);\nId_MCDC_102++ ;\n}\n}\nint  main()\n{\nvoid * Id_MCDC_103;\nvoid * Id_MCDC_104;\nvoid * Id_MCDC_105;\nvoid * Id_MCDC_106;\nvoid * Id_MCDC_107;\nvoid * Id_MCDC_108;\nint  Id_MCDC_109;\nint  Id_MCDC_110;\nint  Id_MCDC_111;\nint  Id_MCDC_112;\nint  Id_MCDC_113;\nint  Id_MCDC_114;\nint  Id_MCDC_115;\nshort  Id_MCDC_116;\nshort  Id_MCDC_117;\nFILE* Id_MCDC_118;\nunsigned short  Id_MCDC_119;\nunsigned short  Id_MCDC_120;\nunsigned short  Id_MCDC_121=0;\nunsigned short  Id_MCDC_122=0;\nchar  Id_MCDC_123;\nchar  Id_MCDC_124;\nVLMODE Id_MCDC_125;\nPOS_CTRL_MODE Id_MCDC_126;\nDEV_CNTRL Id_MCDC_127;\nId_MCDC_118 = fopen(\"in.eds\", \"r\");\nif(Id_MCDC_118 == (( void * ) 0))\n{\nreturn 1;\n}\n;\nId_MCDC_95( & Id_MCDC_125);\n}\nvoid  __VERIFIER_assert(int  Id_MCDC_98)\n{\nif( ! (Id_MCDC_98))\n{\nERROR : {reach_error();abort();}\n}\nreturn ;\n}\n\n```\nOutput the loop invariants for the while loop.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "Pre-conditions/Variable assignments:\n- UINT32 Id_MCDC_102=0\n\nLoop condition:\n- Id_MCDC_101[Id_MCDC_102][0] != 0x00\n\nPost-condition:\n- For all elements i in range [0, 42), if Id_MCDC_101[i][0] != 0x00, then Id_MCDC_92 is called with parameters Id_MCDC_101[i][0], Id_MCDC_101[i][1], Id_MCDC_101[i][2], and Id_MCDC_100[i].\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_92(Id_MCDC_101[i][0], Id_MCDC_101[i][1], Id_MCDC_101[i][2], Id_MCDC_100[i]);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- `Id_MCDC_102` is initialized to 0.\n- `Id_MCDC_101` is a constant 2D array of size 42x3.\n- `Id_MCDC_100` is an array of pointers with 41 elements.\n\nLoop condition: `Id_MCDC_101[Id_MCDC_102][0] != 0x00`\n\nPost-condition: After the loop, all elements in `Id_MCDC_100` have been processed.\n\nLoop invariants:\n```\n@ loop invariant 0 <= Id_MCDC_102 <= 42;\n@ loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n```\n\nThese loop invariants ensure that:\n(i) `Id_MCDC_102` is within the valid range of the `Id_MCDC_101` array.\n(ii) All elements in `Id_MCDC_101` have been processed for indices in the range of `[0, Id_MCDC_102)`."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n\n1. `UINT32 const Id_MCDC_101 [42] [3]` is a constant 2-dimensional array containing data.\n2. `UINT32 Id_MCDC_102=0` is the loop counter.\n3. `Id_MCDC_101[Id_MCDC_102][0] != 0x00` is the loop condition.\n\nLoop body:\n\n1. `Id_MCDC_92(Id_MCDC_101[Id_MCDC_102][0], Id_MCDC_101[Id_MCDC_102][1], (Id_MCDC_99 = Id_MCDC_102 , (\"17_6632_4294986969\" , __VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))) , Id_MCDC_101[Id_MCDC_99])[2], Id_MCDC_100[Id_MCDC_102]);`\n2. `Id_MCDC_102++ ;`\n\nBased on the above information, the loop invariants are:\n\n```\n@{\n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions or variable assignments in the program:\n- UINT32 Id_MCDC_102=0;\n\nNext, analyze the loop body and make a note of the loop condition:\n- while(Id_MCDC_101[Id_MCDC_102][0] != 0x00)\n\nNow, we can determine the loop invariants that hold before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- `UINT32 Id_MCDC_102=0;`\n- Array `Id_MCDC_101` is a constant 2D array with 42 rows and 3 columns.\n\nLoop condition:\n- `Id_MCDC_101[Id_MCDC_102][0] != 0x00`\n\nPost-condition to be verified:\n- `__VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))`\n\nLoop invariants:\n```\n@ loop invariant 0 <= Id_MCDC_102 <= 42;\n@ loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n```"
                }
            ]
        ],
        "final_code_outputs": [
            "/*@ \n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_92(Id_MCDC_101[i][0], Id_MCDC_101[i][1], Id_MCDC_101[i][2], Id_MCDC_100[i]);\n*/",
            "@ loop invariant 0 <= Id_MCDC_102 <= 42;\n@ loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;",
            "@{\n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n}",
            "/*@ \n    loop invariant 0 <= Id_MCDC_102 <= 42;\n    loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n*/",
            "@ loop invariant 0 <= Id_MCDC_102 <= 42;\n@ loop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;"
        ],
        "checker_input_without_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\nvoid reach_error() { __assert_fail(\"0\", \"aiob_3.c\", 3, \"reach_error\"); }\nextern unsigned int unknown_uint(void) ;\nstruct Velocity_Mode;\nstruct PCMode;\nstruct DeviceControl;\nstruct _IO_FILE;\nstruct _IO_marker;\ntypedef struct DeviceControl DEV_CNTRL;\ntypedef struct _IO_FILE FILE;\ntypedef struct _IO_FILE __FILE;\ntypedef struct _IO_FILE _IO_FILE;\ntypedef long  __off_t;\ntypedef long long  __quad_t;\ntypedef __quad_t __off64_t;\ntypedef void  _IO_lock_t;\ntypedef struct PCMode POS_CTRL_MODE;\ntypedef struct Velocity_Mode VLMODE;\ntypedef unsigned int  size_t;\nstruct _IO_FILE{\nint  Id_MCDC_0;\nchar * Id_MCDC_1;\nchar * Id_MCDC_2;\nchar * Id_MCDC_3;\nchar * Id_MCDC_4;\nchar * Id_MCDC_5;\nchar * Id_MCDC_6;\nchar * Id_MCDC_7;\nchar * Id_MCDC_8;\nchar * Id_MCDC_9;\nchar * Id_MCDC_10;\nchar * Id_MCDC_11;\nstruct _IO_marker* Id_MCDC_12;\nstruct _IO_FILE* Id_MCDC_13;\nint  Id_MCDC_14;\nint  Id_MCDC_15;\n__off_t Id_MCDC_16;\nunsigned short  Id_MCDC_17;\nsigned char  Id_MCDC_18;\nchar  Id_MCDC_19 [1];\n_IO_lock_t* Id_MCDC_20;\n__off64_t Id_MCDC_21;\nvoid * Id_MCDC_22;\nvoid * Id_MCDC_23;\nvoid * Id_MCDC_24;\nvoid * Id_MCDC_25;\nsize_t Id_MCDC_26;\nint  Id_MCDC_27;\nchar  Id_MCDC_28 [40];\n} ;\ntypedef unsigned char  UINT8;\ntypedef unsigned short  UINT16;\ntypedef unsigned int  UINT32;\ntypedef unsigned long long  UINT64;\ntypedef char  INT8;\ntypedef char  CHAR;\ntypedef char * STRING;\ntypedef short  INT16;\nstruct DeviceControl{\nINT8* Id_MCDC_29;\nUINT16* Id_MCDC_30;\nUINT16* Id_MCDC_31;\nINT16* Id_MCDC_32;\nINT16* Id_MCDC_33;\nINT16* Id_MCDC_34;\nINT16* Id_MCDC_35;\nINT16* Id_MCDC_36;\nINT8* Id_MCDC_37;\n} ;\ntypedef int  INT32;\nstruct PCMode{\nINT16* Id_MCDC_38;\nINT32* Id_MCDC_39;\nINT32* Id_MCDC_40;\nINT32* Id_MCDC_41;\nUINT16* Id_MCDC_42;\nUINT32* Id_MCDC_43;\nUINT16* Id_MCDC_44;\nINT32* Id_MCDC_45;\nINT32* Id_MCDC_46;\n} ;\nstruct Velocity_Mode{\nINT16* Id_MCDC_47;\nINT16* Id_MCDC_48;\nINT16* Id_MCDC_49;\nINT16* Id_MCDC_50;\nINT16* Id_MCDC_51;\nUINT32* Id_MCDC_52;\nINT32* Id_MCDC_53;\nINT32* Id_MCDC_54;\nINT32* Id_MCDC_55;\nINT32* Id_MCDC_56;\nUINT8* Id_MCDC_57;\nUINT32* Id_MCDC_58;\nUINT32* Id_MCDC_59;\nUINT32* Id_MCDC_60;\nUINT32* Id_MCDC_61;\nUINT32* Id_MCDC_62;\nUINT32* Id_MCDC_63;\nUINT32* Id_MCDC_64;\nUINT32* Id_MCDC_65;\nUINT32* Id_MCDC_66;\nUINT32* Id_MCDC_67;\nUINT32* Id_MCDC_68;\nUINT32* Id_MCDC_69;\nUINT32* Id_MCDC_70;\nUINT32* Id_MCDC_71;\nUINT32* Id_MCDC_72;\nUINT32* Id_MCDC_73;\nUINT32* Id_MCDC_74;\nUINT32* Id_MCDC_75;\nUINT32* Id_MCDC_76;\nUINT16* Id_MCDC_77;\nUINT32* Id_MCDC_78;\nUINT16* Id_MCDC_79;\nUINT32* Id_MCDC_80;\nUINT16* Id_MCDC_81;\nUINT32* Id_MCDC_82;\nUINT32* Id_MCDC_83;\nUINT32* Id_MCDC_84;\nINT16* Id_MCDC_85;\nINT16* Id_MCDC_86;\nINT16* Id_MCDC_87;\n} ;\ntypedef long  INT64;\ntypedef float  REAL32;\nUINT32 Id_MCDC_92(UINT16 Id_MCDC_88, UINT8 Id_MCDC_89, UINT32 Id_MCDC_93, void * Id_MCDC_91)\n{\n\tUINT32 x=unknown_uint();\n\treturn x;\n}\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94);\nextern FILE* fopen(char  const* Id_MCDC_96, char  const* Id_MCDC_97);\nint  main();\nvoid  //@ assert(int  Id_MCDC_98);\n\nunsigned int  Id_MCDC_99;\n\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94)\n{\nvoid * Id_MCDC_100 [41]={Id_MCDC_94->Id_MCDC_47, Id_MCDC_94->Id_MCDC_48, Id_MCDC_94->Id_MCDC_49, Id_MCDC_94->Id_MCDC_50, Id_MCDC_94->Id_MCDC_51, Id_MCDC_94->Id_MCDC_52, Id_MCDC_94->Id_MCDC_53, Id_MCDC_94->Id_MCDC_54, Id_MCDC_94->Id_MCDC_55, Id_MCDC_94->Id_MCDC_56, Id_MCDC_94->Id_MCDC_57, Id_MCDC_94->Id_MCDC_58, Id_MCDC_94->Id_MCDC_59, Id_MCDC_94->Id_MCDC_60, Id_MCDC_94->Id_MCDC_61, Id_MCDC_94->Id_MCDC_62, Id_MCDC_94->Id_MCDC_63, Id_MCDC_94->Id_MCDC_64, Id_MCDC_94->Id_MCDC_65, Id_MCDC_94->Id_MCDC_66, Id_MCDC_94->Id_MCDC_67, Id_MCDC_94->Id_MCDC_68, Id_MCDC_94->Id_MCDC_69, Id_MCDC_94->Id_MCDC_70, Id_MCDC_94->Id_MCDC_71, Id_MCDC_94->Id_MCDC_72, Id_MCDC_94->Id_MCDC_73, Id_MCDC_94->Id_MCDC_74, Id_MCDC_94->Id_MCDC_75, Id_MCDC_94->Id_MCDC_76, Id_MCDC_94->Id_MCDC_77, Id_MCDC_94->Id_MCDC_78, Id_MCDC_94->Id_MCDC_79, Id_MCDC_94->Id_MCDC_80, Id_MCDC_94->Id_MCDC_81, Id_MCDC_94->Id_MCDC_82, Id_MCDC_94->Id_MCDC_83, Id_MCDC_94->Id_MCDC_84, Id_MCDC_94->Id_MCDC_85, Id_MCDC_94->Id_MCDC_86, Id_MCDC_94->Id_MCDC_87};\nUINT32 const Id_MCDC_101 [42] [3]={{( UINT16 ) 0x6042, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6043, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6053, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6054, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6055, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604E, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604C, ( UINT8 ) 0x01, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604C, ( UINT8 ) 0x02, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604B, ( UINT8 ) 0x01, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604B, ( UINT8 ) 0x02, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604D, ( UINT8 ) 0x00, ( UINT32 ) 0x02}, {( UINT16 ) 0x6046, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6046, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x6049, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6049, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604A, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604A, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604F, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6050, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6051, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6044, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6045, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6052, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {0x00, 0x00, 0x00}};\nUINT32 Id_MCDC_102=0;\nwhile(Id_MCDC_101[Id_MCDC_102][0] != 0x00)\n{\nId_MCDC_92(Id_MCDC_101[Id_MCDC_102][0], Id_MCDC_101[Id_MCDC_102][1], (Id_MCDC_99 = Id_MCDC_102 , (\"17_6632_4294986969\" , __VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))) , Id_MCDC_101[Id_MCDC_99])[2], Id_MCDC_100[Id_MCDC_102]);\nId_MCDC_102++ ;\n}\n}\nint  main()\n{\nvoid * Id_MCDC_103;\nvoid * Id_MCDC_104;\nvoid * Id_MCDC_105;\nvoid * Id_MCDC_106;\nvoid * Id_MCDC_107;\nvoid * Id_MCDC_108;\nint  Id_MCDC_109;\nint  Id_MCDC_110;\nint  Id_MCDC_111;\nint  Id_MCDC_112;\nint  Id_MCDC_113;\nint  Id_MCDC_114;\nint  Id_MCDC_115;\nshort  Id_MCDC_116;\nshort  Id_MCDC_117;\nFILE* Id_MCDC_118;\nunsigned short  Id_MCDC_119;\nunsigned short  Id_MCDC_120;\nunsigned short  Id_MCDC_121=0;\nunsigned short  Id_MCDC_122=0;\nchar  Id_MCDC_123;\nchar  Id_MCDC_124;\nVLMODE Id_MCDC_125;\nPOS_CTRL_MODE Id_MCDC_126;\nDEV_CNTRL Id_MCDC_127;\nId_MCDC_118 = fopen(\"in.eds\", \"r\");\nif(Id_MCDC_118 == (( void * ) 0))\n{\nreturn 1;\n}\n;\nId_MCDC_95( & Id_MCDC_125);\n}\nvoid  __VERIFIER_assert(int  Id_MCDC_98)\n{\nif( ! (Id_MCDC_98))\n{\nERROR : {reach_error();abort();}\n}\nreturn ;\n}\n",
        "checker_input_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\nvoid reach_error() { __assert_fail(\"0\", \"aiob_3.c\", 3, \"reach_error\"); }\nextern unsigned int unknown_uint(void) ;\nstruct Velocity_Mode;\nstruct PCMode;\nstruct DeviceControl;\nstruct _IO_FILE;\nstruct _IO_marker;\ntypedef struct DeviceControl DEV_CNTRL;\ntypedef struct _IO_FILE FILE;\ntypedef struct _IO_FILE __FILE;\ntypedef struct _IO_FILE _IO_FILE;\ntypedef long  __off_t;\ntypedef long long  __quad_t;\ntypedef __quad_t __off64_t;\ntypedef void  _IO_lock_t;\ntypedef struct PCMode POS_CTRL_MODE;\ntypedef struct Velocity_Mode VLMODE;\ntypedef unsigned int  size_t;\nstruct _IO_FILE{\nint  Id_MCDC_0;\nchar * Id_MCDC_1;\nchar * Id_MCDC_2;\nchar * Id_MCDC_3;\nchar * Id_MCDC_4;\nchar * Id_MCDC_5;\nchar * Id_MCDC_6;\nchar * Id_MCDC_7;\nchar * Id_MCDC_8;\nchar * Id_MCDC_9;\nchar * Id_MCDC_10;\nchar * Id_MCDC_11;\nstruct _IO_marker* Id_MCDC_12;\nstruct _IO_FILE* Id_MCDC_13;\nint  Id_MCDC_14;\nint  Id_MCDC_15;\n__off_t Id_MCDC_16;\nunsigned short  Id_MCDC_17;\nsigned char  Id_MCDC_18;\nchar  Id_MCDC_19 [1];\n_IO_lock_t* Id_MCDC_20;\n__off64_t Id_MCDC_21;\nvoid * Id_MCDC_22;\nvoid * Id_MCDC_23;\nvoid * Id_MCDC_24;\nvoid * Id_MCDC_25;\nsize_t Id_MCDC_26;\nint  Id_MCDC_27;\nchar  Id_MCDC_28 [40];\n} ;\ntypedef unsigned char  UINT8;\ntypedef unsigned short  UINT16;\ntypedef unsigned int  UINT32;\ntypedef unsigned long long  UINT64;\ntypedef char  INT8;\ntypedef char  CHAR;\ntypedef char * STRING;\ntypedef short  INT16;\nstruct DeviceControl{\nINT8* Id_MCDC_29;\nUINT16* Id_MCDC_30;\nUINT16* Id_MCDC_31;\nINT16* Id_MCDC_32;\nINT16* Id_MCDC_33;\nINT16* Id_MCDC_34;\nINT16* Id_MCDC_35;\nINT16* Id_MCDC_36;\nINT8* Id_MCDC_37;\n} ;\ntypedef int  INT32;\nstruct PCMode{\nINT16* Id_MCDC_38;\nINT32* Id_MCDC_39;\nINT32* Id_MCDC_40;\nINT32* Id_MCDC_41;\nUINT16* Id_MCDC_42;\nUINT32* Id_MCDC_43;\nUINT16* Id_MCDC_44;\nINT32* Id_MCDC_45;\nINT32* Id_MCDC_46;\n} ;\nstruct Velocity_Mode{\nINT16* Id_MCDC_47;\nINT16* Id_MCDC_48;\nINT16* Id_MCDC_49;\nINT16* Id_MCDC_50;\nINT16* Id_MCDC_51;\nUINT32* Id_MCDC_52;\nINT32* Id_MCDC_53;\nINT32* Id_MCDC_54;\nINT32* Id_MCDC_55;\nINT32* Id_MCDC_56;\nUINT8* Id_MCDC_57;\nUINT32* Id_MCDC_58;\nUINT32* Id_MCDC_59;\nUINT32* Id_MCDC_60;\nUINT32* Id_MCDC_61;\nUINT32* Id_MCDC_62;\nUINT32* Id_MCDC_63;\nUINT32* Id_MCDC_64;\nUINT32* Id_MCDC_65;\nUINT32* Id_MCDC_66;\nUINT32* Id_MCDC_67;\nUINT32* Id_MCDC_68;\nUINT32* Id_MCDC_69;\nUINT32* Id_MCDC_70;\nUINT32* Id_MCDC_71;\nUINT32* Id_MCDC_72;\nUINT32* Id_MCDC_73;\nUINT32* Id_MCDC_74;\nUINT32* Id_MCDC_75;\nUINT32* Id_MCDC_76;\nUINT16* Id_MCDC_77;\nUINT32* Id_MCDC_78;\nUINT16* Id_MCDC_79;\nUINT32* Id_MCDC_80;\nUINT16* Id_MCDC_81;\nUINT32* Id_MCDC_82;\nUINT32* Id_MCDC_83;\nUINT32* Id_MCDC_84;\nINT16* Id_MCDC_85;\nINT16* Id_MCDC_86;\nINT16* Id_MCDC_87;\n} ;\ntypedef long  INT64;\ntypedef float  REAL32;\nUINT32 Id_MCDC_92(UINT16 Id_MCDC_88, UINT8 Id_MCDC_89, UINT32 Id_MCDC_93, void * Id_MCDC_91)\n{\n\tUINT32 x=unknown_uint();\n\treturn x;\n}\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94);\nextern FILE* fopen(char  const* Id_MCDC_96, char  const* Id_MCDC_97);\nint  main();\nvoid  //@ assert(int  Id_MCDC_98);\n\nunsigned int  Id_MCDC_99;\n\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94)\n{\nvoid * Id_MCDC_100 [41]={Id_MCDC_94->Id_MCDC_47, Id_MCDC_94->Id_MCDC_48, Id_MCDC_94->Id_MCDC_49, Id_MCDC_94->Id_MCDC_50, Id_MCDC_94->Id_MCDC_51, Id_MCDC_94->Id_MCDC_52, Id_MCDC_94->Id_MCDC_53, Id_MCDC_94->Id_MCDC_54, Id_MCDC_94->Id_MCDC_55, Id_MCDC_94->Id_MCDC_56, Id_MCDC_94->Id_MCDC_57, Id_MCDC_94->Id_MCDC_58, Id_MCDC_94->Id_MCDC_59, Id_MCDC_94->Id_MCDC_60, Id_MCDC_94->Id_MCDC_61, Id_MCDC_94->Id_MCDC_62, Id_MCDC_94->Id_MCDC_63, Id_MCDC_94->Id_MCDC_64, Id_MCDC_94->Id_MCDC_65, Id_MCDC_94->Id_MCDC_66, Id_MCDC_94->Id_MCDC_67, Id_MCDC_94->Id_MCDC_68, Id_MCDC_94->Id_MCDC_69, Id_MCDC_94->Id_MCDC_70, Id_MCDC_94->Id_MCDC_71, Id_MCDC_94->Id_MCDC_72, Id_MCDC_94->Id_MCDC_73, Id_MCDC_94->Id_MCDC_74, Id_MCDC_94->Id_MCDC_75, Id_MCDC_94->Id_MCDC_76, Id_MCDC_94->Id_MCDC_77, Id_MCDC_94->Id_MCDC_78, Id_MCDC_94->Id_MCDC_79, Id_MCDC_94->Id_MCDC_80, Id_MCDC_94->Id_MCDC_81, Id_MCDC_94->Id_MCDC_82, Id_MCDC_94->Id_MCDC_83, Id_MCDC_94->Id_MCDC_84, Id_MCDC_94->Id_MCDC_85, Id_MCDC_94->Id_MCDC_86, Id_MCDC_94->Id_MCDC_87};\nUINT32 const Id_MCDC_101 [42] [3]={{( UINT16 ) 0x6042, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6043, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6053, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6054, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6055, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604E, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604C, ( UINT8 ) 0x01, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604C, ( UINT8 ) 0x02, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604B, ( UINT8 ) 0x01, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604B, ( UINT8 ) 0x02, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604D, ( UINT8 ) 0x00, ( UINT32 ) 0x02}, {( UINT16 ) 0x6046, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6046, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x6049, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6049, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604A, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604A, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604F, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6050, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6051, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6044, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6045, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6052, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {0x00, 0x00, 0x00}};\n/*@\n\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_92(Id_MCDC_101[i][0], Id_MCDC_101[i][1], Id_MCDC_101[i][2], Id_MCDC_100[i]);\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n\n*/\nwhile(Id_MCDC_101[Id_MCDC_102][0] != 0x00)\n{\nId_MCDC_92(Id_MCDC_101[Id_MCDC_102][0], Id_MCDC_101[Id_MCDC_102][1], (Id_MCDC_99 = Id_MCDC_102 , (\"17_6632_4294986969\" , __VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))) , Id_MCDC_101[Id_MCDC_99])[2], Id_MCDC_100[Id_MCDC_102]);\nId_MCDC_102++ ;\n}\n}\nint  main()\n{\nvoid * Id_MCDC_103;\nvoid * Id_MCDC_104;\nvoid * Id_MCDC_105;\nvoid * Id_MCDC_106;\nvoid * Id_MCDC_107;\nvoid * Id_MCDC_108;\nint  Id_MCDC_109;\nint  Id_MCDC_110;\nint  Id_MCDC_111;\nint  Id_MCDC_112;\nint  Id_MCDC_113;\nint  Id_MCDC_114;\nint  Id_MCDC_115;\nshort  Id_MCDC_116;\nshort  Id_MCDC_117;\nFILE* Id_MCDC_118;\nunsigned short  Id_MCDC_119;\nunsigned short  Id_MCDC_120;\nunsigned short  Id_MCDC_121=0;\nunsigned short  Id_MCDC_122=0;\nchar  Id_MCDC_123;\nchar  Id_MCDC_124;\nVLMODE Id_MCDC_125;\nPOS_CTRL_MODE Id_MCDC_126;\nDEV_CNTRL Id_MCDC_127;\nId_MCDC_118 = fopen(\"in.eds\", \"r\");\nif(Id_MCDC_118 == (( void * ) 0))\n{\nreturn 1;\n}\n;\nId_MCDC_95( & Id_MCDC_125);\n}\nvoid  __VERIFIER_assert(int  Id_MCDC_98)\n{\nif( ! (Id_MCDC_98))\n{\nERROR : {reach_error();abort();}\n}\nreturn ;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 138: unexpected token 'Id_MCDC_98'",
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\nvoid reach_error() { __assert_fail(\"0\", \"aiob_3.c\", 3, \"reach_error\"); }\nextern unsigned int unknown_uint(void) ;\nstruct Velocity_Mode;\nstruct PCMode;\nstruct DeviceControl;\nstruct _IO_FILE;\nstruct _IO_marker;\ntypedef struct DeviceControl DEV_CNTRL;\ntypedef struct _IO_FILE FILE;\ntypedef struct _IO_FILE __FILE;\ntypedef struct _IO_FILE _IO_FILE;\ntypedef long  __off_t;\ntypedef long long  __quad_t;\ntypedef __quad_t __off64_t;\ntypedef void  _IO_lock_t;\ntypedef struct PCMode POS_CTRL_MODE;\ntypedef struct Velocity_Mode VLMODE;\ntypedef unsigned int  size_t;\nstruct _IO_FILE{\nint  Id_MCDC_0;\nchar * Id_MCDC_1;\nchar * Id_MCDC_2;\nchar * Id_MCDC_3;\nchar * Id_MCDC_4;\nchar * Id_MCDC_5;\nchar * Id_MCDC_6;\nchar * Id_MCDC_7;\nchar * Id_MCDC_8;\nchar * Id_MCDC_9;\nchar * Id_MCDC_10;\nchar * Id_MCDC_11;\nstruct _IO_marker* Id_MCDC_12;\nstruct _IO_FILE* Id_MCDC_13;\nint  Id_MCDC_14;\nint  Id_MCDC_15;\n__off_t Id_MCDC_16;\nunsigned short  Id_MCDC_17;\nsigned char  Id_MCDC_18;\nchar  Id_MCDC_19 [1];\n_IO_lock_t* Id_MCDC_20;\n__off64_t Id_MCDC_21;\nvoid * Id_MCDC_22;\nvoid * Id_MCDC_23;\nvoid * Id_MCDC_24;\nvoid * Id_MCDC_25;\nsize_t Id_MCDC_26;\nint  Id_MCDC_27;\nchar  Id_MCDC_28 [40];\n} ;\ntypedef unsigned char  UINT8;\ntypedef unsigned short  UINT16;\ntypedef unsigned int  UINT32;\ntypedef unsigned long long  UINT64;\ntypedef char  INT8;\ntypedef char  CHAR;\ntypedef char * STRING;\ntypedef short  INT16;\nstruct DeviceControl{\nINT8* Id_MCDC_29;\nUINT16* Id_MCDC_30;\nUINT16* Id_MCDC_31;\nINT16* Id_MCDC_32;\nINT16* Id_MCDC_33;\nINT16* Id_MCDC_34;\nINT16* Id_MCDC_35;\nINT16* Id_MCDC_36;\nINT8* Id_MCDC_37;\n} ;\ntypedef int  INT32;\nstruct PCMode{\nINT16* Id_MCDC_38;\nINT32* Id_MCDC_39;\nINT32* Id_MCDC_40;\nINT32* Id_MCDC_41;\nUINT16* Id_MCDC_42;\nUINT32* Id_MCDC_43;\nUINT16* Id_MCDC_44;\nINT32* Id_MCDC_45;\nINT32* Id_MCDC_46;\n} ;\nstruct Velocity_Mode{\nINT16* Id_MCDC_47;\nINT16* Id_MCDC_48;\nINT16* Id_MCDC_49;\nINT16* Id_MCDC_50;\nINT16* Id_MCDC_51;\nUINT32* Id_MCDC_52;\nINT32* Id_MCDC_53;\nINT32* Id_MCDC_54;\nINT32* Id_MCDC_55;\nINT32* Id_MCDC_56;\nUINT8* Id_MCDC_57;\nUINT32* Id_MCDC_58;\nUINT32* Id_MCDC_59;\nUINT32* Id_MCDC_60;\nUINT32* Id_MCDC_61;\nUINT32* Id_MCDC_62;\nUINT32* Id_MCDC_63;\nUINT32* Id_MCDC_64;\nUINT32* Id_MCDC_65;\nUINT32* Id_MCDC_66;\nUINT32* Id_MCDC_67;\nUINT32* Id_MCDC_68;\nUINT32* Id_MCDC_69;\nUINT32* Id_MCDC_70;\nUINT32* Id_MCDC_71;\nUINT32* Id_MCDC_72;\nUINT32* Id_MCDC_73;\nUINT32* Id_MCDC_74;\nUINT32* Id_MCDC_75;\nUINT32* Id_MCDC_76;\nUINT16* Id_MCDC_77;\nUINT32* Id_MCDC_78;\nUINT16* Id_MCDC_79;\nUINT32* Id_MCDC_80;\nUINT16* Id_MCDC_81;\nUINT32* Id_MCDC_82;\nUINT32* Id_MCDC_83;\nUINT32* Id_MCDC_84;\nINT16* Id_MCDC_85;\nINT16* Id_MCDC_86;\nINT16* Id_MCDC_87;\n} ;\ntypedef long  INT64;\ntypedef float  REAL32;\nUINT32 Id_MCDC_92(UINT16 Id_MCDC_88, UINT8 Id_MCDC_89, UINT32 Id_MCDC_93, void * Id_MCDC_91)\n{\n\tUINT32 x=unknown_uint();\n\treturn x;\n}\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94);\nextern FILE* fopen(char  const* Id_MCDC_96, char  const* Id_MCDC_97);\nint  main();\nvoid  //@ assert(int  Id_MCDC_98);\n\nunsigned int  Id_MCDC_99;\n\nvoid  Id_MCDC_95(VLMODE* Id_MCDC_94)\n{\nvoid * Id_MCDC_100 [41]={Id_MCDC_94->Id_MCDC_47, Id_MCDC_94->Id_MCDC_48, Id_MCDC_94->Id_MCDC_49, Id_MCDC_94->Id_MCDC_50, Id_MCDC_94->Id_MCDC_51, Id_MCDC_94->Id_MCDC_52, Id_MCDC_94->Id_MCDC_53, Id_MCDC_94->Id_MCDC_54, Id_MCDC_94->Id_MCDC_55, Id_MCDC_94->Id_MCDC_56, Id_MCDC_94->Id_MCDC_57, Id_MCDC_94->Id_MCDC_58, Id_MCDC_94->Id_MCDC_59, Id_MCDC_94->Id_MCDC_60, Id_MCDC_94->Id_MCDC_61, Id_MCDC_94->Id_MCDC_62, Id_MCDC_94->Id_MCDC_63, Id_MCDC_94->Id_MCDC_64, Id_MCDC_94->Id_MCDC_65, Id_MCDC_94->Id_MCDC_66, Id_MCDC_94->Id_MCDC_67, Id_MCDC_94->Id_MCDC_68, Id_MCDC_94->Id_MCDC_69, Id_MCDC_94->Id_MCDC_70, Id_MCDC_94->Id_MCDC_71, Id_MCDC_94->Id_MCDC_72, Id_MCDC_94->Id_MCDC_73, Id_MCDC_94->Id_MCDC_74, Id_MCDC_94->Id_MCDC_75, Id_MCDC_94->Id_MCDC_76, Id_MCDC_94->Id_MCDC_77, Id_MCDC_94->Id_MCDC_78, Id_MCDC_94->Id_MCDC_79, Id_MCDC_94->Id_MCDC_80, Id_MCDC_94->Id_MCDC_81, Id_MCDC_94->Id_MCDC_82, Id_MCDC_94->Id_MCDC_83, Id_MCDC_94->Id_MCDC_84, Id_MCDC_94->Id_MCDC_85, Id_MCDC_94->Id_MCDC_86, Id_MCDC_94->Id_MCDC_87};\nUINT32 const Id_MCDC_101 [42] [3]={{( UINT16 ) 0x6042, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6043, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6053, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6054, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6055, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604E, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604C, ( UINT8 ) 0x01, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604C, ( UINT8 ) 0x02, ( UINT32 ) 0x0004}, {( UINT16 ) 0x604B, ( UINT8 ) 0x01, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604B, ( UINT8 ) 0x02, ( UINT32 ) 0x0003}, {( UINT16 ) 0x604D, ( UINT8 ) 0x00, ( UINT32 ) 0x02}, {( UINT16 ) 0x6046, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6046, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6047, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6058, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6059, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6056, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x02, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0003, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6057, ( UINT8 ) 0x0004, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6048, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x6049, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6049, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604A, ( UINT8 ) 0x01, ( UINT32 ) 0x0007}, {( UINT16 ) 0x604A, ( UINT8 ) 0x02, ( UINT32 ) 0x0006}, {( UINT16 ) 0x604F, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6050, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6051, ( UINT8 ) 0x00, ( UINT32 ) 0x0007}, {( UINT16 ) 0x6044, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6045, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {( UINT16 ) 0x6052, ( UINT8 ) 0x00, ( UINT32 ) 0x0003}, {0x00, 0x00, 0x00}};\n/*@\n\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_92(Id_MCDC_101[i][0], Id_MCDC_101[i][1], Id_MCDC_101[i][2], Id_MCDC_100[i]);\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\nloop invariant 0 <= Id_MCDC_102 <= 42;\nloop invariant \\forall integer i; 0 <= i < Id_MCDC_102 ==> Id_MCDC_101[i][0] != 0x00;\n\n*/\nwhile(Id_MCDC_101[Id_MCDC_102][0] != 0x00)\n{\nId_MCDC_92(Id_MCDC_101[Id_MCDC_102][0], Id_MCDC_101[Id_MCDC_102][1], (Id_MCDC_99 = Id_MCDC_102 , (\"17_6632_4294986969\" , __VERIFIER_assert((Id_MCDC_99 >= 0 && Id_MCDC_99 < 42))) , Id_MCDC_101[Id_MCDC_99])[2], Id_MCDC_100[Id_MCDC_102]);\nId_MCDC_102++ ;\n}\n}\nint  main()\n{\nvoid * Id_MCDC_103;\nvoid * Id_MCDC_104;\nvoid * Id_MCDC_105;\nvoid * Id_MCDC_106;\nvoid * Id_MCDC_107;\nvoid * Id_MCDC_108;\nint  Id_MCDC_109;\nint  Id_MCDC_110;\nint  Id_MCDC_111;\nint  Id_MCDC_112;\nint  Id_MCDC_113;\nint  Id_MCDC_114;\nint  Id_MCDC_115;\nshort  Id_MCDC_116;\nshort  Id_MCDC_117;\nFILE* Id_MCDC_118;\nunsigned short  Id_MCDC_119;\nunsigned short  Id_MCDC_120;\nunsigned short  Id_MCDC_121=0;\nunsigned short  Id_MCDC_122=0;\nchar  Id_MCDC_123;\nchar  Id_MCDC_124;\nVLMODE Id_MCDC_125;\nPOS_CTRL_MODE Id_MCDC_126;\nDEV_CNTRL Id_MCDC_127;\nId_MCDC_118 = fopen(\"in.eds\", \"r\");\nif(Id_MCDC_118 == (( void * ) 0))\n{\nreturn 1;\n}\n;\nId_MCDC_95( & Id_MCDC_125);\n}\nvoid  __VERIFIER_assert(int  Id_MCDC_98)\n{\nif( ! (Id_MCDC_98))\n{\nERROR : {reach_error();abort();}\n}\nreturn ;\n}",
        "checker_output_after_prune": false,
        "checker_message_after_prune": "Annotation error on line 138: unexpected token 'Id_MCDC_98'",
        "error": "[Errno 2] No such file or directory: 'logs/loopy_2023_07_26_21_50_41/../new_benchmarks/original_benchmarks/sv-benchmarks/loop-industry-pattern/aiob_3.json'"
    },
    "stats": {
        "success": [
            0,
            7,
            176,
            179,
            224,
            225,
            226,
            227,
            228,
            229,
            231,
            232,
            233,
            234,
            239,
            241,
            242,
            243,
            250,
            251,
            258,
            259,
            260,
            261,
            265,
            271,
            272,
            274,
            304,
            306,
            307,
            314,
            323,
            330,
            332
        ],
        "failure": [
            0,
            1,
            1,
            2,
            2,
            3,
            3,
            4,
            4,
            5,
            5,
            6,
            7,
            8,
            8,
            9,
            9,
            10,
            10,
            11,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            74,
            75,
            75,
            76,
            77,
            78,
            79,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            127,
            128,
            129,
            129,
            130,
            130,
            131,
            132,
            133,
            134,
            134,
            135,
            136,
            136,
            137,
            137,
            138,
            139,
            140,
            140,
            141,
            141,
            142,
            143,
            144,
            144,
            145,
            145,
            146,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            153,
            154,
            154,
            155,
            155,
            156,
            156,
            157,
            158,
            159,
            160,
            160,
            161,
            161,
            162,
            162,
            163,
            164,
            164,
            165,
            165,
            166,
            166,
            167,
            168,
            168,
            169,
            170,
            170,
            171,
            172,
            172,
            173,
            173,
            174,
            174,
            175,
            175,
            176,
            177,
            177,
            178,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188,
            189,
            190,
            191,
            192,
            193,
            194,
            195,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            210,
            210,
            211,
            211,
            212,
            212,
            213,
            213,
            214,
            214,
            215,
            216,
            217,
            218,
            219,
            220,
            221,
            222,
            222,
            223,
            223,
            224,
            225,
            226,
            227,
            228,
            229,
            230,
            230,
            231,
            232,
            233,
            234,
            235,
            235,
            236,
            236,
            237,
            237,
            238,
            239,
            240,
            240,
            241,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            251,
            252,
            253,
            254,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            262,
            263,
            263,
            264,
            265,
            266,
            266,
            267,
            268,
            269,
            270,
            271,
            272,
            273,
            274,
            275,
            275,
            276,
            277,
            278,
            279,
            280,
            281,
            282,
            283,
            284,
            284,
            285,
            286,
            287,
            288,
            288,
            289,
            290,
            291,
            292,
            293,
            294,
            295,
            295,
            296,
            296,
            297,
            297,
            298,
            298,
            299,
            299,
            300,
            301,
            302,
            303,
            303,
            304,
            305,
            305,
            306,
            307,
            308,
            308,
            309,
            309,
            310,
            310,
            311,
            311,
            312,
            312,
            313,
            313,
            314,
            315,
            315,
            316,
            316,
            317,
            317,
            318,
            318,
            319,
            319,
            320,
            320,
            321,
            321,
            322,
            323,
            324,
            325,
            325,
            326,
            326,
            327,
            327,
            328,
            328,
            329,
            329,
            330,
            331,
            331,
            332,
            333,
            333,
            334,
            334,
            335,
            335,
            336,
            336,
            337,
            337,
            338,
            338,
            339,
            339,
            340,
            341,
            341,
            342,
            343,
            344,
            345,
            345,
            346,
            346,
            347
        ],
        "total": 479
    }
}