{
    "logs": {
        "file": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}",
        "ground_truth": false,
        "completions": [
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            }
        ],
        "label": 1.0
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21,
            24,
            25,
            30,
            32,
            40,
            42,
            45,
            46,
            50,
            51,
            52,
            53,
            55,
            56,
            58,
            60,
            61,
            63,
            64,
            65,
            66,
            67,
            69,
            70,
            72,
            79,
            80,
            81,
            86,
            89,
            91,
            94,
            96,
            97,
            100,
            101,
            102,
            103,
            105,
            107,
            109,
            111,
            112,
            113,
            114,
            116,
            118,
            119,
            120,
            122,
            124,
            130,
            132,
            133,
            135,
            138,
            139,
            141,
            142,
            143,
            145,
            146,
            148,
            149,
            150,
            151,
            153
        ],
        "failure": [
            0,
            4,
            12,
            18,
            37,
            41,
            49,
            73,
            76,
            77,
            88,
            92,
            123,
            125,
            126,
            140
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20,
            22,
            23,
            26,
            27,
            28,
            29,
            33,
            34,
            35,
            36,
            38,
            39,
            43,
            44,
            47,
            48,
            54,
            57,
            59,
            62,
            68,
            71,
            74,
            75,
            78,
            82,
            83,
            84,
            85,
            87,
            90,
            93,
            95,
            98,
            99,
            104,
            106,
            108,
            110,
            115,
            117,
            121,
            127,
            128,
            129,
            134,
            136,
            137,
            144,
            147,
            152
        ],
        "skipped": [
            17,
            31,
            131
        ],
        "total": 151,
        "success_rate": 0.5099337748344371
    }
}