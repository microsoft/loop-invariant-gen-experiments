{
    "logs": {
        "file": [
            "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
        "ground_truth": true,
        "completions": [
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            }
        ],
        "label": 1.0
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10
        ],
        "failure": [
            0,
            4
        ],
        "partial": [
            1,
            6,
            7,
            8
        ],
        "skipped": [],
        "total": 11,
        "success_rate": 0.45454545454545453
    }
}