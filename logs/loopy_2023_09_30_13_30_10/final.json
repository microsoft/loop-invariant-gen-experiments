{
    "params": {
        "config_file": "../config/classification.yaml",
        "checker": "frama-c",
        "model": "gpt-4",
        "temperature": 0.7,
        "num_completions": 1,
        "benchmark_dir": "benchmarks/",
        "benchmark_file": "benchmarks.txt",
        "repair_input": "",
        "recheck_input": "",
        "output_dir": "../logs/loopy_2023_09_30_13_30_10/",
        "prompt_file": "",
        "repair_input_2": "",
        "repair_retries": 5,
        "repair_from_k": 0,
        "max_benchmarks": 200,
        "start_index": 0,
        "problem_ids": [],
        "provider": "azure-open-ai",
        "secondary_nudge": false,
        "secondary_nudge_text": "",
        "benchmark_features": "one_loop_one_method",
        "debug": true,
        "ground_truth": false,
        "json_output": true,
        "local_llm_output": "",
        "classify": true,
        "ground_truth_file": "../experiments/classification.json"
    },
    "logs": [
        {
            "file": [
                "../data/benchmarks/code2inv/10.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 2));\n  assume((y <= 2));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 2));\n    (y  = (y + 2));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 4) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/cav/substring1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; \n//@ assert(\\false);\n};\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\nif (j >= 101)\n  goto ERROR;\n\n  return;\n\nERROR:{; \n//@ assert(\\false);\n};\n\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark18_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((i==0) && (k==0) && (n>0))) return 0;\n  while (i < n) {\n    i++;k++;\n  }\n  {;\n//@ assert((i == k) && (k == n));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  if (!((i==0) && (k==0) && (n>0))) return 0;\n  while (i < n) {\n    i++;k++;\n  }\n  {;\n//@ assert((i == k) && (k == n));\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-new/count_by_1_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i < LARGE_INT; i++) ;\n    {;\n//@ assert(i == LARGE_INT);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/dagger/ex1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;\n//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_loop_int.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\n\nint main ()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (__BLAST_NONDET) goto END;\n    }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\nint MAXPATHLEN;\n\nint main ()\n{\n  \n  int buf_off;\n  int pattern_off;\n  int bound_off;\n\n  int glob3_pathbuf_off;\n  int glob3_pathend_off;\n  int glob3_pathlim_off;\n  int glob3_pattern_off;\n  int glob3_dc;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  buf_off = 0;\n  pattern_off = 0;\n\n  bound_off = 0 + (MAXPATHLEN + 1) - 1;\n\n  glob3_pathbuf_off = buf_off;\n  glob3_pathend_off = buf_off;\n  glob3_pathlim_off = bound_off;\n  glob3_pattern_off = pattern_off;\n\n  glob3_dc = 0;\n  for (;;)\n    if (glob3_pathend_off + glob3_dc >= glob3_pathlim_off) break;\n    else {\n      \n      glob3_dc++;\n      \n      {;\n//@ assert(0 <= glob3_dc);\n}{;\n//@ assert(glob3_dc < MAXPATHLEN + 1);\n}\n      if (__BLAST_NONDET) goto END;\n    }\n\n END:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/87.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (x = y);\n  (lock = 1);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.5
        },
        {
            "file": [
                "../data/benchmarks/code2inv/19.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 0;\n    int m = 0;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 0) {\n       {;\n//@ assert(m < n);\n}\n       \n    }\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.2
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark24_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==n && n>=0)) return 0;\n  while (i<n) {\n    k--;\n    i+=2;\n  }\n  {;\n//@ assert(2*k>=n-1);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark35_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  if (!(x>=0)) return 0;\n  while ((x>=0) && (x<10)) {\n    x=x+1;\n  }\n  {;\n//@ assert(x>=10);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/NetBSD_loop.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main ()\n{\n  \n  int MAXPATHLEN = unknown ();\n  int pathbuf_off = unknown ();\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  if(MAXPATHLEN > 0); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n} {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n    \n  }\n\n END:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x == 6);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/04.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int x,y;\n\n  x = -50;\n  \n  while( x < 0 ) {\n\tx = x+y;\n\ty++;\n  }\n  {;\n//@ assert(y>0);\n}\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-lit/gr2006.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x,y;\n    x = 0;\n    y = 0;\n    while (1) {\n        if (x < 50) {\n            y++;\n        } else {\n            y--;\n        }\n        if (y < 0) break;\n        x++;\n    }\n    {;\n//@ assert(x == 100);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/jm2006_variant_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-lit/cggmp2005_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop15_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i = 0;\n  int N = 100;\n\n  while (i<N) {\n    i++;\n  }\n\n  {;\n//@ assert(!( i>N ));\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main()\n{\n  int i = 0;\n  int N = 100;\n\n  while (i<N) {\n    i++;\n  }\n\n  {;\n//@ assert(!( i>N ));\n}\n\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;\n//@ assert(lo == hi);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [],
            "error": "division by zero"
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig9.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\n\tint x, y;\n\tx = 0;\n\ty = 0;\n\n\twhile(y >= 0) {\n\n\t\ty = y + x;\n\t\n\t}\n\n\t{;\n//@ assert(0 == 1);\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/bind_expands_vars2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nextern int unknown();\n\nint main() {\n  \n  int cp1_off, n1, n2, mc_i;\n  n1 = unknown();\n  n2 = unknown();\n  cp1_off = unknown();\n\n  int MAXDATA = unknown();\n  if (MAXDATA > 0 ); else goto END;\n\n  if ((n1 <= MAXDATA * 2)); else goto END;\n\n  if ((cp1_off <= n1)); else goto END;\n\n  if ((n2 <= MAXDATA*2 - n1)); else goto END;\n\n  for (mc_i = 0; mc_i < n2; mc_i++) {\n    \n    {;\n//@ assert(cp1_off+mc_i < MAXDATA * 2);\n}\n    \n  }\n\n END:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/code2inv/34.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/60.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.5
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/cav/gulv.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.25
        },
        {
            "file": [
                "../data/benchmarks/code2inv/70.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int n, v1, v2, v3;\n    int x = 1;\n    int y;\n\n    while (x <= n) {\n        y = n - x;\n        x = x +1;\n    }\n\n    if (n > 0) {\n      \n      {;\n//@ assert(y < n);\n}\n    }\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-new/half.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int n = 0;\n    int k = unknown_int();\n    if (!(k <= LARGE_INT && k >= -LARGE_INT)) return 0;\n    for(i = 0; i < 2*k; i++) {\n        if (i % 2 == 0) {\n            n ++;\n        }\n    }\n    {;\n//@ assert(k < 0 || n == k);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/css2003_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i,j,k;\n    i = 1;\n    j = 1;\n    k = unknown_int();\n    if (!(0 <= k && k <= 1)) return 0;\n    while (i < LARGE_INT) {\n\ti = i + 1;\n\tj = j + k;\n\tk = k - 1;\n\t{;\n//@ assert(1 <= i + k && i + k <= 2 && i >= 1);\n}\n    }\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark12_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  int t = unknown_int();\n  \n  if (!(x!=y && y==t)) return 0;\n  while (unknown_bool()) {\n    if(x>0) y=y+x;\n  }\n  {;\n//@ assert(y>=t);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/code2inv/63.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 1;\n    int y;\n\n    while (x <= 10) {\n        y = 10 - x;\n        x = x +1;\n    }\n\n    {;\n//@ assert(y >= 0);\n}\n    \n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/code2inv/29.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 0)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 0) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-invgen/NetBSD_loop.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int MAXPATHLEN;\n  int pathbuf_off;\n\n  int bound_off;\n\n  int glob2_p_off;\n  int glob2_pathbuf_off;\n  int glob2_pathlim_off;\n\n  MAXPATHLEN = unknown_int();\n  if(MAXPATHLEN > 0 && MAXPATHLEN < 2147483647); else goto END;\n\n  pathbuf_off = 0;\n  bound_off = pathbuf_off + (MAXPATHLEN + 1) - 1;\n\n  glob2_pathbuf_off = pathbuf_off;\n  glob2_pathlim_off = bound_off;\n\n  for (glob2_p_off = glob2_pathbuf_off;\n      glob2_p_off <= glob2_pathlim_off;\n      glob2_p_off++) {\n    \n    {;\n//@ assert(0 <= glob2_p_off );\n}\n    {;\n//@ assert(glob2_p_off < MAXPATHLEN + 1);\n}\n  }\n\n END:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/118.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
            "ground_truth": true,
            "completions": [],
            "error": "division by zero"
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark45_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(y>0 || x>0)) return 0;\n  while (unknown_bool()) {\n    if (x>0) {\n      x++;\n    } else {\n      y++;\n    }\n  }\n  {;\n//@ assert(x>0 || y>0);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/code2inv/22.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main()\n{\n    int z1,z2,z3;\n    int x = 1;\n    int m = 1;\n    int n;\n\n    while (x < n) {\n        if (unknown()) {\n            m = x;\n        }\n        x = x + 1;\n    }\n\n    if(n > 1) {\n       \n       {;\n//@ assert(m >= 1);\n}\n    }\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/invgen/NetBSD_g_Ctoc.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint BASE_SZ;\nint __BLAST_NONDET;\nint main ()\n{\n  \n  int i;\n  int j;\n  int len = BASE_SZ;\n\n  if(BASE_SZ > 0 ); else goto END;\n\n  {;\n//@ assert( 0 <= BASE_SZ-1 );\n}\n\n  if (len == 0)\n    goto END; \n  \n  i = 0;\n  j = 0;\n  while (1) {\n    if ( len == 0 ){ \n      goto END;\n    } else {\n      {;\n//@ assert( 0<= j );\n} {;\n//@ assert(j < BASE_SZ);\n}\n      {;\n//@ assert( 0<= i );\n} {;\n//@ assert(i < BASE_SZ );\n}\n      \n      if ( __BLAST_NONDET ) {\n        i++;\n        j++;\n        goto END;\n      }\n    }\n    i ++;\n    j ++;\n    len --;\n  }\n\n END:  return 0;\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\t{;\n//@ assert(y==2);\n}\n\t{;\n//@ assert(x==100);\n}\n\treturn 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x, y, z;\n\tx=0;y=0;z=0;\n\twhile (x<100) {\n\t\tif(x<=50)\n               \t\ty=y+1;\n       \t\telse\n               \t\ty=y-1;\n       \n       \t\tif(x<25)\n               \t\tz=z+1;\n       \t\telse\n               \t\tz=z+5;\n       \n       \t\tx=x+1;\n\t}\n\t{;\n//@ assert(z==400);\n}\n\t{;\n//@ assert(y==2);\n}\n\t{;\n//@ assert(x==100);\n}\n\treturn 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;\n//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x += 2;\n    else x++;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.2
        },
        {
            "file": [
                "../data/benchmarks/code2inv/45.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != n) )\n{;\n//@ assert( (c >= 0) );\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/fig1.v.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\n\tint x = -50;\n\tint y, v1,v2,v3;\n\n \twhile (x < 0) {\n\t\tx = x + y;\n\t\ty++;\n\t\tv1 = unknown_int();\n\t\tv2 = unknown_int();\n\t\tv3 = unknown_int();\n\t\n\t}\n\t{;\n//@ assert(y > 0);\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/103.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 0);\n  \n  while ((x < 100)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 100) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  \n  (x = 0);\n  \n  while ((x < 100)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x == 100) );\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/while_infinite_loop_1_true-unreach-call_false-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x!=0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  x=0;\n\n  while(1)\n  {\n    {;\n//@ assert(x==0);\n}\n  }\n\n  {;\n//@ assert(x!=0);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/dagger/efm.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;\n//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;\n//@ assert(X4 + X5 <= 1);\n}\n\t{;\n//@ assert(X5  >= 0);\n}\n\t{;\n//@ assert(X4  >= 0);\n}\n\t{;\n//@ assert(X3  >= 0);\n}\n\t{;\n//@ assert(X2  >= 0);\n}\n\t{;\n//@ assert(X1 + X5 >= 1);\n}\n\t{;\n//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;\n//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main()\n{\n\tint X1;\n\tint X2;\n\tint X3;\n\tint X4;\n\tint X5;\n\tint X6;\n\n\tif (! (X1>=1)) return 0;\n\tif (! (X2==0)) return 0;\n\tif (! (X3==0)) return 0;\n\tif (! (X4==1)) return 0;\n\tif (! (X5==0)) return 0;\n\tif (! (X6==0)) return 0;\n\n\twhile(unknown_int())\n\t{\n\t\tif (unknown_int())\n\t\t{\n\t\t\tif (! (X1 >= 1)) return 0;\n\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\tX1=X1-1;\n\t\t\tX4=X4-1;\n\t\t\tX2=X2+1;\n\t\t\tX5=X5+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (unknown_int())\n\t\t\t{\n\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\tif (! (X6 >= 1)) return 0;\n\t\t\t\tX2=X2-1;\n\t\t\t\tX3=X3+1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (unknown_int())\n\t\t\t\t{\n\t\t\t\t\tif (! (X4 >= 1)) return 0;\n\t\t\t\t\tif (! (X3 >= 1)) return 0;\n\t\t\t\t\tX3=X3-1;\n\t\t\t\t\tX2=X2+1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (unknown_int())\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X3>=1)) return 0;\n\t\t\t\t\t\tX3=X3-1;\n\t\t\t\t\t\tX1=X1+1;\n\t\t\t\t\t\tX6=X6+X5;\n\t\t\t\t\t\tX5=0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (! (X2 >= 1)) return 0;\n\t\t\t\t\t\tX2 = X2 - 1;\n\t\t\t\t\t\tX1 = X1 + 1;\n\t\t\t\t\t\tX4 = X4 + X6;\n\t\t\t\t\t\tX6 = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t{;\n//@ assert(X4 + X5 + X6 -1 >= 0);\n} \n\t{;\n//@ assert(X4 + X5 + X6 -1 <= 0);\n} \n\t{;\n//@ assert(X4 + X5 <= 1);\n}\n\t{;\n//@ assert(X5  >= 0);\n}\n\t{;\n//@ assert(X4  >= 0);\n}\n\t{;\n//@ assert(X3  >= 0);\n}\n\t{;\n//@ assert(X2  >= 0);\n}\n\t{;\n//@ assert(X1 + X5 >= 1);\n}\n\t{;\n//@ assert(X1 + X2 >= X4 + X5);\n}\n\t{;\n//@ assert(X1 + X2 + X3 >= 1);\n}\n\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.3333333333333333
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-lit/gj2007.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int x = 0;\n    int y = 50;\n    while(x < 100) {\n\tif (x < 50) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y == 100);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x >= 0x0fffffff);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/code2inv/98.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/dagger/fig2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nvoid main () {\n\nint x, y, z, w;\nx=y=z=w=0;\n\nwhile (unknown_int() ) {\n\nif (unknown_int()) {x++; y = y+2;}\nelse if (unknown_int()) {\n\tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n}\nelse if (x >= z && w > y) {x = -x; y = -y; }\n\n}\n\n{;\n//@ assert(3*x >= y);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop16_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(int N)\n{\n  int i, x;\n\n  x = 1;\n  i = 0;\n\n  while (i<N) {\n    if (x==1) {\n      x=2;\n    } else {\n      x=1;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x>2 ));\n}\n\n  return;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-lit/jm2006_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i, j;\n    i = unknown_int();\n    j = unknown_int();\n\n    if (!(i >= 0 && i <= LARGE_INT)) return 0;\n    if (!(j >= 0)) return 0;\n    int x = i;\n    int y = j;\n    int z = 0;\n    while(x != 0) {\n        x --;\n        y -= 2;\n        z ++;\n    }\n    if (i == j) {\n        {;\n//@ assert(y == -z);\n}\n    }\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop1_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  x=0;\n  i=0;\n\n  if (NONDET > 0) a=1; else a=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >0 ));\n}\n  return;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/97.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.3333333333333333
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 0);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop6_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main()\n{\n  int i,x,y,NONDET,z;\n\n  x=0;\n  z=1;\n  y = unknown_uint();\n\n  assume( y>=0 );\n  i = 0;\n  while (i < 10) {\n    if (NONDET > 0) {\n      x = x;\n    } else {\n      x++;\n    }\n\n    {;\n//@ assert(!( y < 0 ));\n}\n    i++;\n  }\n  {;\n//@ assert(!( z<0 ));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/invgen/sendmail-mime-fromqp.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint __BLAST_NONDET;\n\nint main (void)\n{\n  int outfilelen;\n  \n  int nchar = 0;\n\n  int out = 0; \n\n  if(outfilelen > 0); else goto RETURN;\n\n  while(__BLAST_NONDET)\n  {\n    \n    if(__BLAST_NONDET)\n    {\n      \n      if(__BLAST_NONDET)\n\t\n\tgoto AFTERLOOP; \n\n      if(__BLAST_NONDET)\n      {\n\tout = 0;\n\tnchar = 0;\n\tgoto LOOPEND;\n      }\n      else\n      {\n\t\n\tif(__BLAST_NONDET)  goto AFTERLOOP;\n\n\tnchar++;\n\tif (nchar >= outfilelen)\n\t  goto AFTERLOOP;\n\n\t{;\n//@ assert(0<=out);\n}\n\t{;\n//@ assert(out<outfilelen);\n}\n\t\n\tout++;\n      }\n    }\n    else\n    {\n      \n      nchar++;\n      if (nchar >= outfilelen)\n\tgoto AFTERLOOP;\n\n      {;\n//@ assert(0<=out);\n}\n      {;\n//@ assert(out<outfilelen);\n}\n      \n      out++;\n\n      if(__BLAST_NONDET) goto AFTERLOOP;\n    }\n  LOOPEND:;\n  }\n AFTERLOOP:\n\n  {;\n//@ assert(0<=out);\n}\n  {;\n//@ assert(out<outfilelen);\n}\n  \n  out++;\n RETURN:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark17_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int k = unknown_int();\n  int n = unknown_int();\n  \n  if (!(i==0 && k==0)) return 0;\n  while (i<n) {\n    i++;\n    k++;\n  }\n  {;\n//@ assert(k>=n);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/loopv1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint SIZE = 50000001;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int n,i,j;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  i = 0; j=0;\n  while(i<n){ \n \n    if(unknown_int())\t  \n      i = i + 6; \n    else\n     i = i + 3;    \n  }\n  {;\n//@ assert( (i%3) == 0 );\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum03-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  unsigned int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/fib_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\n\nvoid main() {\n\tint n = unknown();\n  int f1 = 0;   \n  int f2 = 1;  \n  int g1 = 1, g2 = 1;\n  int h1 = 0, h2 = 0;\n\n  while((n > 0)) {\n    h1 = f1 + g1;\n    f1 = g1;\n    g1 = h1;\n    n --;\n\n    h2 = f2 + g2;\n    f2 = g2;\n    g2 = h2;\n\n\t{;\n//@ assert(h2==h1+f1);\n}\n  }\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-invariants/eq1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int w = unknown_uint();\n  unsigned int x = w;\n  unsigned int y = unknown_uint();\n  unsigned int z = y;\n  while (unknown_uint()) {\n    if (unknown_uint()) {\n      ++w; ++x;\n    } else {\n      --y; --z;\n    }\n  }\n  {;\n//@ assert(w == x && y == z);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/trex03-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 || x2==0 || x3==0);\n}\n  return 0;\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_12.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=0;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz=z+2;\n\t\tx++;\n\t}\n  {;\n//@ assert(!(z%2));\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=0;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz=z+2;\n\t\tx++;\n\t}\n  {;\n//@ assert(!(z%2));\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark20_conjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int sum = unknown_int();\n  \n  if (!(i==0 && n>=0 && n<=100 && sum==0)) return 0;\n  while (i<n) {\n    sum = sum + i;\n    i++;\n  }\n  {;\n//@ assert(sum>=0);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/dagger/substring1.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\n{;\n//@ assert(j <= 100);\n}\n\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main () {\nint i, j;\nint from;\nint to;\nint k;\n\nif (!(k >= 0)) return;\nif (!(k <= 100)) return;\n\nif (!(from >= 0)) return;\nif (!(from <= k)) return;\n\ni = from;\nj = 0;\n\nwhile (i < k) {\ni++;\nj++;\n}\n\n{;\n//@ assert(j <= 100);\n}\n\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe2_merged_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n    }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n = unknown();\n    int x1 = 0;\n    int x2 = 0;\n\n    int i1 = 0; \n    int i2 = 1; \n\twhile (1)\n\t{\n    \tif ( i1 <= n) {\n\t        x1 = x1 + i1;\n    \t    i1++;\n\t    }\n\n\t\tif ( i2 <= n) {\n\t        x2 = x2 + i2;\n    \t    i2++;\n\t\t}\n\n\t\tif (i1>n && i2>n) break;\n\t\t{;\n//@ assert(x2==x1+i1);\n}\n    }\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/code2inv/101.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = 0);\n  \n  while ((x < n)) {\n    {\n    (x  = (x + 1));\n    }\n\n  }\n  \nif ( (x != n) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-new/count_by_1_variant.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\n\nint main() {\n    int i;\n    for (i = 0; i != LARGE_INT; i++) {\n\t{;\n//@ assert(i <= LARGE_INT);\n}\n    }\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/invgen/split.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  int k = 100;\n  int b;\n  int i;\n  int j;\n  int n;\n  i = j;\n  for( n = 0 ; n < 2*k ; n++ ) {\n        \n    if(b) {\n      i++;\n    } else {\n      j++;\n    }\n    b = !b;\n  }\n  {;\n//@ assert(i == j);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03_safe.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + 1;\n    x++;\n    {;\n//@ assert(sn==x*1 || sn == 0);\n}\n  }\n}\n",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/sendmail-close-angle_true-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main ()\n{\n  int in;\n  int inlen = unknown_int();\n  int bufferlen = unknown_int();\n  int buf;\n  int buflim;\n\n  if(bufferlen >1);else goto END;\n  if(inlen > 0);else goto END;\n  if(bufferlen < inlen);else goto END;\n\n  buf = 0;\n  in = 0;\n  buflim = bufferlen - 2;\n\n  while (unknown_int())\n  {\n    if (buf == buflim)\n      break;\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n} \n    buf++;\nout:\n    in++;\n    {;\n//@ assert(0<=in);\n}\n    {;\n//@ assert(in<inlen);\n}\n  }\n\n    {;\n//@ assert(0<=buf);\n}\n    {;\n//@ assert(buf<bufferlen);\n}\n    buf++;\n\n  {;\n//@ assert(0<=buf);\n}\n  {;\n//@ assert(buf<bufferlen);\n}\n\n  buf++;\n\n END:  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/37.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\nextern int unknown2();\n\nvoid main() {\n  int x= 0;\n  int m=0;\n  int n = unknown1();\n  while(x<n) {\n     if(unknown2()) {\n\tm = x;\n     }\n     x= x+1;\n  }\n  if(n>0) {;\n//@ assert(0<=m && m<n);\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.5
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-new/count_by_nondet.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int i = 0;\n    int k = 0;\n    while(i < LARGE_INT) {\n        int j = unknown_int();\n        if (!(1 <= j && j < LARGE_INT)) return 0;\n        i = i + j;\n        k ++;\n    }\n    {;\n//@ assert(k <= LARGE_INT);\n}\n    return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/code2inv/36.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c <= 40) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 40) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 40) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 40) )\n{;\n//@ assert( (c <= 40) );\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/57.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark47_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if (x < 0) x = x + 7;\n    else x = x + 10;\n    if (y < 0) y = y - 10;\n    else y = y + 3;\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if (x < 0) x = x + 7;\n    else x = x + 10;\n    if (y < 0) y = y - 10;\n    else y = y + 3;\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "false",
                    "success": false
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "false",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop4_VeriMAP_true.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n  int x,N;\n  int a;\n\n  a=0;\n  N =10;\n  x = 0;\n  do {\n    x=x+1;\n  } while (x != N);\n\n  {;\n//@ assert(!( a > 1 ));\n}\n}",
            "ground_truth": true,
            "completions": [
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                },
                {
                    "label": "true",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/llreve/barthe_merged_unsafe.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n, c;\n\tint i;\n\tint j1, j2;\n\tint x1, x2;\n\n\tn = unknown();\n\tc = unknown();\n\ti = 0;\n\tj1 = 0; \n\tx1 = 0;\n\tj2 = c; \n\tx2 = 0;\n\n\twhile( i < n) {\n\t\tj1 = 5*i + c;\n\n\t\tx1 = x1 + j1;\n\t\tx2 = x2 + j2;\n\t\t{;\n//@ assert(x1==x2);\n}\n\n\t\tj2 = j2 + 5;\n\t\tif (i == 10) {\n\t\t  j2 = 10;\n\t\t}\n\t\ti++;\n\t}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid assert (int cond) { if (!cond) __VERIFIER_error (); }\nvoid main() {\n\tint n, c;\n\tint i;\n\tint j1, j2;\n\tint x1, x2;\n\n\tn = unknown();\n\tc = unknown();\n\ti = 0;\n\tj1 = 0; \n\tx1 = 0;\n\tj2 = c; \n\tx2 = 0;\n\n\twhile( i < n) {\n\t\tj1 = 5*i + c;\n\n\t\tx1 = x1 + j1;\n\t\tx2 = x2 + j2;\n\t\t{;\n//@ assert(x1==x2);\n}\n\n\t\tj2 = j2 + 5;\n\t\tif (i == 10) {\n\t\t  j2 = 10;\n\t\t}\n\t\ti++;\n\t}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_2-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = unknown_uint();\n\n  if (!(y > 0)) return 0;\n\n  while (x < y) {\n    if (x < y / x) {\n      x *= x;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert(x != y);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.5
        },
        {
            "file": [
                "../data/benchmarks/code2inv/26.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int  x=0;\n  while(1){\n      if(x<10){\n          sn = sn +(2);\n      }\n      x++;\n      {;\n//@ assert(sn==x*(2)|| sn == 0);\n}\n  }\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_sum01_bug02_base.case_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    sn = sn +(2);\n    if(i==4)sn=-10;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/32.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/34.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int m=10;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i==m) {;\n//@ assert(x==2*y);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown();\n\nvoid main()\n{\n  int x=0;\n  int y=0;\n  int i=0;\n  int m=10;\n  int n = unknown();\n  \n  while(i<n) {\n    i++;\n    x++;\n    if(i%2 == 0) y++;\n  }\n  \n  if(i==m) {;\n//@ assert(x==2*y);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 64);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(y != 64);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n    assume( nlen  ==  idBitLength / 32 );\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n    \n  }\n  \n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n    assume( nlen  ==  idBitLength / 32 );\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n    \n  }\n  \n  return;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop27-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,n,x,NONDET;\n\n  i=0;x=0;\n  while (i < 1){\n     x++;\n    if (NONDET > 0 ){\n      x--;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x !=0 ));\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nvoid errorFn() {ERROR: goto ERROR;}\nint main(){\n  int i,n,x,NONDET;\n\n  i=0;x=0;\n  while (i < 1){\n     x++;\n    if (NONDET > 0 ){\n      x--;\n    }\n    i++;\n  }\n\n  {;\n//@ assert(!( x !=0 ));\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true (or false)",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_bug02_sum01_bug02_base.case_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/pie/hola/35.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int n = unknown1();\n  int x= 0;\n  while(x<n) {\n    x++;\n  } \n  if(n>0) {;\n//@ assert(x==n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nextern int unknown1();\n\nvoid main() {\n  int n = unknown1();\n  int x= 0;\n  while(x<n) {\n    x++;\n  } \n  if(n>0) {;\n//@ assert(x==n);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.5
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n  unsigned int y = x + 1;\n\n  while (x < 100) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x;\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono4_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n    int x = 0;\n    int y = 500000;\n    while(x < 1000000) {\n\tif (x < 500000) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y!=x);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main() {\n    int x = 0;\n    int y = 500000;\n    while(x < 1000000) {\n\tif (x < 500000) {\n\t    x = x + 1;\n\t} else {\n\t    x = x + 1;\n\t    y = y + 1;\n\t}\n    }\n    {;\n//@ assert(y!=x);\n}\n    return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/trex03_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#define bool int\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\n#define bool int\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/underapprox_2-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/count_up_down_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_02_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int  z=unknown_int();\n\n  while(x<100 && 100<z)\n  {\n    int  tmp=unknown_bool();\n    if(tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }\n\n  {;\n//@ assert(0);\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int  z=unknown_int();\n\n  while(x<100 && 100<z)\n  {\n    int  tmp=unknown_bool();\n    if(tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }\n\n  {;\n//@ assert(0);\n}\n\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/for_bounded_loop1_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  int  i=0,  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\nassume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main(){\n  int  i=0,  x=0,  y=0;\n  int  n=unknown_int();\nassume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\nassume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.75
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/const_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 1024) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/106.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    assume(a <= m);\n    assume(j < 1);\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a >= m);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,m,j,k;\n\n    assume(a <= m);\n    assume(j < 1);\n    k = 0;\n\n    while ( k < 1) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a >= m);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N;\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_4-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum01_bug02_sum01_bug02_base.case.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    sn = sn + a;\n    if (i==4) sn=-10;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_bug02_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  j=10,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<j)\n    sn = sn +(2);\n    j--;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  j=10,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<j)\n    sn = sn +(2);\n    j--;\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    \n    if (y % 2 == 0) x++;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 2;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 4;\n\n    if (y % 2 == 0) x += 2;\n    else x += 2;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n\n    if (y % 2 == 0) x += 2;\n    else x -= 4;\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop3-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x > 1 ));\n}\n  return;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop28-unsafe_VeriMAP_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nvoid assert(int cond) {if (!cond) __VERIFIER_error();}\nint unknown() {int x; return x;}\nint main(){\n  int i,n,x, NONDET;\n\n  x=0;\n  i=0;\n  while (i<n) {\n    if (unknown() >0){\n      {;\n//@ assert(!( x>0 ));\n}\n    }\n    else{\n      x = 1;\n    }\n    i++;\n  }\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nvoid assert(int cond) {if (!cond) __VERIFIER_error();}\nint unknown() {int x; return x;}\nint main(){\n  int i,n,x, NONDET;\n\n  x=0;\n  i=0;\n  while (i<n) {\n    if (unknown() >0){\n      {;\n//@ assert(!( x>0 ));\n}\n    }\n    else{\n      x = 1;\n    }\n    i++;\n  }\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-lit/gcnr2008.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum01_bug02.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, j=10, n=unknown_uint(), sn=0;\n  if (n==2147483647) {\n    return 0;\n  }\n  for(i=1; i<=n; i++) {\n    if (i<j) \n    sn = sn + a;\n    j--;\n  }\n  {;\n//@ assert(sn==((long long) n)*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_1-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/phases_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/count_up_down-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int x=n, y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(x != 6);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/multivar_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x + 1;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n  unsigned int y = x + 1;\n\n  while (x < 1024) {\n    x++;\n    y++;\n  }\n\n  {;\n//@ assert(x == y);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark44_disjunctive.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if ((x<0 && y<0)) {\n      x=x+7; y=y-10;\n    }\n    if ((x<0 && y>=0)) {\n      x=x+7; y=y+3;\n    } else {\n      x=x+10; y=y+3;\n    }\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int x = unknown_int();\n  int y = unknown_int();\n  if (!(x<y)) return 0;\n  while (x<y) {\n    if ((x<0 && y<0)) {\n      x=x+7; y=y-10;\n    }\n    if ((x<0 && y>=0)) {\n      x=x+7; y=y+3;\n    } else {\n      x=x+10; y=y+3;\n    }\n  }\n  {;\n//@ assert(x >= y && x <= y + 16);\n}\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum04_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    if(i<4)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n  int  i,  sn=0;\n  for(i=1; i<=8; i++){\n    if(i<4)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==8*(2)|| sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 1;\n  unsigned int y = 0;\n\n  while (y < 10) {\n    x = 0;\n    y++;\n  }\n\n  {;\n//@ assert(x == 1);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/invgen/id_trans.c",
                {
                    "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown ();\n  idBitLength = unknown ();\n  material_length = unknown ();\n\n  if (!( nlen  ==  idBitLength / 32 )) return;\n\n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j / 4);\n}\n    {;\n//@ assert( j / 4 < nlen);\n}\n    \n  }\n\n  return;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nvoid main() {\n  \n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown ();\n  idBitLength = unknown ();\n  material_length = unknown ();\n\n  if (!( nlen  ==  idBitLength / 32 )) return;\n\n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j / 4);\n}\n    {;\n//@ assert( j / 4 < nlen);\n}\n    \n  }\n\n  return;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-invgen/id_trans_false-unreach-call_true-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int idBitLength, material_length, nlen;\n  int j, k;\n\n  nlen = unknown_int();\n  idBitLength = unknown_int();\n  material_length = unknown_int();\n    if (!( nlen  ==  idBitLength / 32 )) return 0;\n    \n  for (j = 0; (j < idBitLength / 8) && (j < material_length); j++) {\n    {;\n//@ assert( 0 <= j);\n}\n    {;\n//@ assert( j < material_length );\n}\n    {;\n//@ assert( 0 <= j/4 );\n}\n    {;\n//@ assert( j/4 < nlen);\n}\n  }\n  \n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n\n  while (x < 0x0fffffff) {\n    if (x < 0xfff1) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert(!(x % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark28_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  if (!(i * i < j * j)) return 0;\n  while (i < j) {\n    j = j - i;\n    if (j < i) {j = j + i;\n    i = j - i;\n    j = j - i;}\n  }\n  {;\n//@ assert(j == i);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  if (!(i * i < j * j)) return 0;\n  while (i < j) {\n    j = j - i;\n    if (j < i) {j = j + i;\n    i = j - i;\n    j = j - i;}\n  }\n  {;\n//@ assert(j == i);\n}\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/code2inv/31.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (x != 1) )\n{;\n//@ assert( (n < 0) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/count_up_down_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n  unsigned int n = unknown_uint();\n  unsigned int  x=n,  y=0;\n  while(x>0)\n  {\n    x--;\n    y++;\n  }\n  {;\n//@ assert(y!=n);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/75.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int x1;\n  int x2;\n  int x3;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "ground_truth": false,
            "completions": [],
            "error": "division by zero"
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/sum01_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/for_bounded_loop1_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    assume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  assume(n>0);\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    assume(y!=0);\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/27.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int n;\n  int x;\n  \n  (x = n);\n  \n  while ((x > 1)) {\n    {\n    (x  = (x - 1));\n    }\n\n  }\n  \nif ( (n >= 0) )\n{;\n//@ assert( (x == 1) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum01-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==n*a || sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/72.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z < 4608) );\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/code2inv/62.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n > -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 10;\n\n  while (x >= 10) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum04-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/terminator_03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int  x=unknown_int();\n  int  y=unknown_int();\n\n  if(y>0)\n  {\n    while(x<100)\n    {\n      x=x+y;\n     }\n  }\n  {;\n//@ assert(y<=0 ||(y<0 && x>=100));\n}\n\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n  int  x=unknown_int();\n  int  y=unknown_int();\n\n  if(y>0)\n  {\n    while(x<100)\n    {\n      x=x+y;\n     }\n  }\n  {;\n//@ assert(y<=0 ||(y<0 && x>=100));\n}\n\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/terminator_02_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/sum04_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (2)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    if (i<4)\n    sn = sn + a;\n  }\n  {;\n//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_3-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned short unknown_ushort(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned short N = unknown_ushort();\n\n  while (x < N) {\n    x += 2;\n  }\n\n  {;\n//@ assert(x % 2);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(!(y % 3));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 1;\n\n  while (x < 6) {\n    x++;\n    y *= 2;\n  }\n\n  {;\n//@ assert(!(y % 3));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.6
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/terminator_02-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n  int z=unknown_int();\n\n  while(x<100 && 100<z) \n  {\n    _Bool tmp=unknown_bool();\n    if (tmp)\n   {\n     x++;\n   }\n   else\n   {\n     x--;\n     z--;\n   }\n  }                       \n    \n  {;\n//@ assert(0);\n}    \n\n  return 0;\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/svcomp/sum03_false.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    if (x<10)\n      sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    if (x<10)\n      sn = sn + a;\n    x++;\n    {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/for_bounded_loop1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    if (!(y!=0)) return 0;\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint main() {\n  int i=0, x=0, y=0;\n  int n=unknown_int();\n  if (!(n>0)) return 0;\n  for(i=0; i<n; i++)\n  {\n    x = x-y;\n    {;\n//@ assert(x==0);\n}\n    y = unknown_int();\n    if (!(y!=0)) return 0;\n    x = x+y;\n    {;\n//@ assert(x!=0);\n}\n  }\n  {;\n//@ assert(x==0);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono5_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz--;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=0);\n}\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/sum01_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<10)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main(){\n  int  i,  n=unknown_uint(),  sn=0;\n  for(i=1; i<=n; i++){\n    if(i<10)\n    sn = sn +(2);\n  }\n  {;\n//@ assert(sn==n*(2)|| sn == 0);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/code2inv/61.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c == n) )\n{;\n//@ assert( (n <= -1) );\n}\n\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/gcnr2008_false-unreach-call_false-termination.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x,y,z,w;\n    x = y = z = w = 0;\n    while (unknown_int() && y < 10000) {\n\tif (unknown_int()) {\n\t    x = x + 1;\n\t    y = y + 100;\n\t} else if (unknown_int()) {\n\t    if (x >= 4) {\n\t\tx = x + 1;\n\t\ty = y + 1;\n\t    }\n\t} else if (y > 10*w && z >= 100*x) {\n\t    y = -y;\n\t}\n\tw = w + 1;\n\tz = z + 10;\n    }\n    {;\n//@ assert(x >= 4 && y <= 2);\n}\n    return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/simple_2-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = unknown_uint();\n\n  while (x < 0x0fffffff) {\n    x++;\n  }\n\n  {;\n//@ assert(x > 0x0fffffff);\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.2
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono6_1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\nunsigned int x = 0;\nunsigned int y = 10000000;\nunsigned int z=5000000;\n\twhile(x<y){\t\n\t\tif(x>=5000000)\n\t\t\tz++;\n\t\tx++;\n\t}\n  {;\n//@ assert(z!=x);\n}\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-zilu/benchmark07_linear.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\nextern _Bool unknown_bool(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int n = unknown_int();\n  int k = unknown_int();\n  \n  _Bool flag = unknown_bool();\n  i=0;\n  if (!(n>0 && n<10)) return 0;\n  while (i<n) {\n    i++;\n    if(flag) k+=4000;\n    else k+=2000;\n  }\n  {;\n//@ assert(k>n);\n}\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "true",
                    "success": false
                }
            ],
            "label": 0.4
        },
        {
            "file": [
                "../data/benchmarks/LinearArbitrary-SeaHorn/loops/loops/trex03_false-unreach-call_true-termination.i.annot.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nint main()\n{\n  unsigned int  x1=unknown_uint(),  x2=unknown_uint(),  x3=unknown_uint();\n  unsigned int  d1=1,  d2=1,  d3=1;\n  int  c1=unknown_bool(),  c2=unknown_bool();\n  while(x1>0 && x2>0 && x3>0)\n  {\n    if(c1)x1=x1-d1;\n    else if(c2)x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/trex03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\nextern _Bool unknown_bool(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  unsigned int x1=unknown_uint(), x2=unknown_uint(), x3=unknown_uint();\n  unsigned int d1=1, d2=1, d3=1;\n  _Bool c1=unknown_bool(), c2=unknown_bool();\n  \n  while(x1>0 && x2>0 && x3>0)\n  {\n    if (c1) x1=x1-d1;\n    else if (c2) x2=x2-d2;\n    else x3=x3-d3;\n    c1=unknown_bool();\n    c2=unknown_bool();\n  }\n\n  {;\n//@ assert(x1==0 && x2==0 && x3==0);\n}\n  return 0;\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loops/sum03-1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n      if (x<10) {\n          sn = sn + a;\n      }\n      x++;\n      {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n      if (x<10) {\n          sn = sn + a;\n      }\n      x++;\n      {;\n//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.8
        },
        {
            "file": [
                "../data/benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y;\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 1.0
        },
        {
            "file": [
                "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-2.c",
                {
                    "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
                }
            ],
            "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x++;\n    } else {\n      x += 2;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
            "ground_truth": false,
            "completions": [
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "true",
                    "success": false
                },
                {
                    "label": "false",
                    "success": true
                },
                {
                    "label": "false",
                    "success": true
                }
            ],
            "label": 0.75
        }
    ],
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21,
            24,
            25,
            30,
            32,
            40,
            42,
            45,
            46,
            50,
            51,
            52,
            53,
            55,
            56,
            58,
            60,
            61,
            63,
            64,
            65,
            66,
            67,
            69,
            70,
            72,
            79,
            80,
            81,
            86,
            89,
            91,
            94,
            96,
            97,
            100,
            101,
            102,
            103,
            105,
            107,
            109,
            111,
            112,
            113,
            114,
            116,
            118,
            119,
            120,
            122,
            124,
            130,
            132,
            133,
            135,
            138,
            139,
            141,
            142,
            143,
            145,
            146,
            148,
            149,
            150,
            151,
            153,
            155,
            158
        ],
        "failure": [
            0,
            4,
            12,
            18,
            37,
            41,
            49,
            73,
            76,
            77,
            88,
            92,
            123,
            125,
            126,
            140
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20,
            22,
            23,
            26,
            27,
            28,
            29,
            33,
            34,
            35,
            36,
            38,
            39,
            43,
            44,
            47,
            48,
            54,
            57,
            59,
            62,
            68,
            71,
            74,
            75,
            78,
            82,
            83,
            84,
            85,
            87,
            90,
            93,
            95,
            98,
            99,
            104,
            106,
            108,
            110,
            115,
            117,
            121,
            127,
            128,
            129,
            134,
            136,
            137,
            144,
            147,
            152,
            154,
            156,
            157,
            159
        ],
        "skipped": [
            17,
            31,
            131
        ],
        "total": 157,
        "success_rate": 0.5031847133757962,
        "success_count": 79,
        "failure_count": 16,
        "partial_count": 62,
        "skipped_count": 3
    }
}