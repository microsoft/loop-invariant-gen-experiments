{
    "logs": {
        "file": [
            "../data/benchmarks/sv-benchmarks/loops/terminator_03-1.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main()\n{\n  int x=unknown_int();\n  int y=unknown_int();\n\n  if (y>0)\n  {\n    while(x<100) \n    {\n      x=x+y;\n     }\n  }                           \n  {;\n//@ assert(y<=0 || (y<0 && x>=100));\n}     \n\n  return 0;\n}\n",
        "ground_truth": false,
        "completions": [
            {
                "label": "true",
                "success": false
            },
            {
                "label": "true",
                "success": false
            },
            {
                "label": "true",
                "success": false
            },
            {
                "label": "true",
                "success": false
            },
            {
                "label": "true",
                "success": false
            }
        ],
        "label": 0.0
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21,
            24,
            25,
            30,
            32,
            40,
            42,
            45,
            46,
            50,
            51,
            52,
            53,
            55,
            56,
            58,
            60,
            61,
            63,
            64,
            65,
            66,
            67,
            69,
            70,
            72,
            79,
            80,
            81,
            86
        ],
        "failure": [
            0,
            4,
            12,
            18,
            37,
            41,
            49,
            73,
            76,
            77,
            88
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20,
            22,
            23,
            26,
            27,
            28,
            29,
            33,
            34,
            35,
            36,
            38,
            39,
            43,
            44,
            47,
            48,
            54,
            57,
            59,
            62,
            68,
            71,
            74,
            75,
            78,
            82,
            83,
            84,
            85,
            87
        ],
        "skipped": [
            17,
            31
        ],
        "total": 87,
        "success_rate": 0.4482758620689655
    }
}