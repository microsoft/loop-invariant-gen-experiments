{
    "logs": {
        "file": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/sumt6.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nextern void abort(void);\nvoid assume_abort_if_not(int cond) {\n  if(!cond) {abort();}\n}\n\nint SIZE = 20000001;\n\nint main() {\n  unsigned int n=0,i=0,k=0,j=0,l=0;\n  unsigned int v2=0, v3=0, v4=0;\n  n = unknown_int();\n  if (!(n <= SIZE)) return 0;\n  while( l < n ) {\n\t\n\t  if(!(l%6))\n\t    v2 = v2 + 1;\n\t  else if(!(l%5))\n\t    v3 = v3 + 1;\n\t  else if(!(l%4))\n\t    v4 = v4 + 1;\n\t  else if(!(l%3))\n\t    i = i + 1;\n\t  else if(!(l%2)) \n\t\t  j = j+1;\n\t  else \n\t    k = k+1;\n    l = l+1;\n  }\n  {;\n//@ assert((i+j+k+v4+v3+v2) == l);\n}\n  return 0;\n}\n",
        "ground_truth": true,
        "completions": [
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            }
        ],
        "label": 1.0
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21
        ],
        "failure": [
            0,
            4,
            12,
            18
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20
        ],
        "skipped": [
            17
        ],
        "total": 21,
        "success_rate": 0.47619047619047616
    }
}