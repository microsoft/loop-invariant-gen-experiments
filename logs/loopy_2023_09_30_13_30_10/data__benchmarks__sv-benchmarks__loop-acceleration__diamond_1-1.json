{
    "logs": {
        "file": [
            "../data/benchmarks/sv-benchmarks/loop-acceleration/diamond_1-1.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\nextern void __assert_fail(const char *, const char *, unsigned int, const char *) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = unknown_uint();\n\n  while (x < 99) {\n    if (y % 2 == 0) {\n      x += 2;\n    } else {\n      x++;\n    }\n  }\n\n  {;\n//@ assert((x % 2) == (y % 2));\n}\n}",
        "ground_truth": true,
        "completions": [
            {
                "label": "true",
                "success": true
            },
            {
                "label": "true",
                "success": true
            },
            {
                "label": "false",
                "success": false
            },
            {
                "label": "true",
                "success": true
            }
        ],
        "label": 0.75
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21,
            24,
            25,
            30,
            32,
            40,
            42,
            45,
            46,
            50,
            51,
            52,
            53,
            55,
            56,
            58
        ],
        "failure": [
            0,
            4,
            12,
            18,
            37,
            41,
            49
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20,
            22,
            23,
            26,
            27,
            28,
            29,
            33,
            34,
            35,
            36,
            38,
            39,
            43,
            44,
            47,
            48,
            54,
            57,
            59
        ],
        "skipped": [
            17,
            31
        ],
        "total": 58,
        "success_rate": 0.43103448275862066
    }
}