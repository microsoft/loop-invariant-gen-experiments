{
    "logs": {
        "file": [
            "../data/benchmarks/accelerating_invariant_generation/cav/f2.c",
            {
                "code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nvoid main () {\n\n  int x, y, z, w;\n  x=y=z=w=0;\n\n  while (unknown_int() ) {\n\n    if (unknown_int()) {x++; y = y+2;}\n    else if (unknown_int()) {\n      \tif (x >= 4) {x++; y = y+3; z = z+10; w = w+10;}\n    }\n    else if (x >= z && w >= y+1) {x = -x; y = -y; }\n    x = x;  \n  }\n\n  if (3*x <= y-1)\n    goto ERROR;\n\n  return;\nERROR:{; \n//@ assert(\\false);\n};\n}",
        "ground_truth": false,
        "completions": [
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            },
            {
                "label": "false",
                "success": true
            }
        ],
        "label": 1.0
    },
    "stats": {
        "success": [
            2,
            3,
            5,
            9,
            10,
            11,
            14,
            15,
            16,
            21,
            24,
            25,
            30,
            32,
            40,
            42,
            45,
            46,
            50,
            51,
            52,
            53,
            55,
            56,
            58,
            60,
            61,
            63,
            64,
            65,
            66,
            67,
            69,
            70,
            72,
            79,
            80,
            81
        ],
        "failure": [
            0,
            4,
            12,
            18,
            37,
            41,
            49,
            73,
            76,
            77
        ],
        "partial": [
            1,
            6,
            7,
            8,
            13,
            19,
            20,
            22,
            23,
            26,
            27,
            28,
            29,
            33,
            34,
            35,
            36,
            38,
            39,
            43,
            44,
            47,
            48,
            54,
            57,
            59,
            62,
            68,
            71,
            74,
            75,
            78
        ],
        "skipped": [
            17,
            31
        ],
        "total": 80,
        "success_rate": 0.475
    }
}