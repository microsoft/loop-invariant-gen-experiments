{
    "logs": {
        "file": "../data/benchmarks/code2inv/7.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: \\false;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x % 10 == 0;\nloop invariant i5: y % 10 == 0;\nloop invariant i6: x <= 20;\nloop invariant i7: y <= 20;\nloop invariant i8: (x == 20) ==> (y != 0);\nloop invariant i9: x >= 0 && x <= 20;\nloop invariant i10: y >= 0 && y <= 20;\nloop invariant i11: (unknown() ==> (x == y));\nloop invariant i12: (unknown() ==> (x >= 10 && x <= 20));\nloop invariant i13: (unknown() ==> (y >= 10 && y <= 20));\nloop invariant i14: (!unknown() && x == 20 ==> y != 0);\nloop invariant i15: (x >= 0) && (x <= 20);\nloop invariant i16: (y >= 0) && (y <= 20);\nloop invariant i17: \\forall int t; (0 <= t <= 10) ==> (x != t);\nloop invariant i18: x <= 10 * (1 + \\loop_count);\nloop invariant i19: y <= 10 * (1 + \\loop_count);\nloop invariant i20: x <= y + 10;\nloop invariant i21: y <= x + 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: 0 <= x <= 20;\nloop invariant i2: 0 <= y <= 20;\nloop invariant i3: x >= 10 ==> y >= 10;\nloop invariant i4: (x >= 0) && (x <= 20);\nloop invariant i5: (y >= 0) && (y <= 20);\nloop invariant i6: \\forall int t; (0 <= t <= 10) ==> (x != t);\nloop invariant i7: (x == 20) ==> (y != 0);\nloop invariant i8: x >= 0;\nloop invariant i9: y >= 0;\nloop invariant i10: x <= 10 * (1 + \\loop_nest);\nloop invariant i11: y <= 10 * (1 + \\loop_nest);\nloop invariant i12: x >= 10 * \\loop_nest;\nloop invariant i13: y >= 10 * \\loop_nest;\nloop invariant i14: (unknown() ==> (x >= 10 && x <= 20));\nloop invariant i15: (unknown() ==> (y >= 10 && y <= 20));\nloop invariant i16: (!unknown() && x == 20 ==> y != 0);\nloop invariant i17: x >= 0 && x <= 20;\nloop invariant i18: y >= 0 && y <= 20;\nloop invariant i19: (unknown() ==> (x == y));\nloop invariant i20: x <= 20;\nloop invariant i21: y <= 20;\nloop invariant i22: (unknown() ==> (x == 10 && y == 10)) || (!unknown() ==> (x == 0 && y == 0));\nloop invariant i23: \\false;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}