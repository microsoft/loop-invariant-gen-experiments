{
    "logs": {
        "file": "../data/benchmarks/code2inv/2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  while ((y < 1000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  /*@\nloop invariant i1: 0 <= y <= 1000;\nloop invariant i2: x >= y;\nloop invariant i3: x >= 1;\nloop invariant i4: y >= 0;\nloop invariant i5: y <= 1000;\nloop invariant i6: 0 <= y;\nloop invariant i7: x - y == 1;\nloop invariant i8: 0 <= y && y <= 1000;\nloop invariant i9: x == 1 + y * (y - 1) / 2;\n*/\nwhile ((y < 1000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  (y = 0);\n  \n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x >= y;\nloop invariant i3: y <= 1000;\nloop invariant i4: 0 <= y <= 1000;\nloop invariant i5: x >= 1;\nloop invariant i6: 0 <= y;\nloop invariant i7: x - y == 1;\n*/\nwhile ((y < 1000)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= y) );\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}