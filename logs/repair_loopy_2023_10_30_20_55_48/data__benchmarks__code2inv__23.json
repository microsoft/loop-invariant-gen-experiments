{
    "logs": {
        "file": "../data/benchmarks/code2inv/23.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 20;\nloop invariant i2: 1 <= j <= 20;\nloop invariant i3: i <= j + 1;\nloop invariant i4: (i % 2) == 1;\nloop invariant i5: i >= 1;\nloop invariant i6: j <= 20;\nloop invariant i7: j >= i - 7;\nloop invariant i8: 1 <= i;\nloop invariant i9: i <= 21;\nloop invariant i10: (i - 1) % 2 == 0;\nloop invariant i11: (20 - j) % 2 == 0;\nloop invariant i12: 1 <= i <= 21;\nloop invariant i13: 0 <= j <= 20;\nloop invariant i14: j >= i - 2;\nloop invariant i15: i % 2 == 1;\nloop invariant i16: j >= 0;\nloop invariant i17: (20 - j) * 3 == i - 1;\nloop invariant i18: 1 <= i && i <= 21;\nloop invariant i19: 1 <= j && j <= 20;\nloop invariant i20: j >= i - 1;\nloop invariant i21: 2 * (i - 1) + j == 41;\nloop invariant i22: 1 <= j;\nloop invariant i23: j == 20 - (i - 1)/2;\nloop invariant i24: j >= i ==> i % 2 == 1;\nloop invariant i25: j >= i ==> j % 2 == 0;\nloop invariant i26: j >= i ==> i + j == 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: 1 <= i <= 21;\nloop invariant i2: 0 <= j <= 20;\nloop invariant i3: j >= i - 2;\nloop invariant i4: (i - 1) % 2 == 0;\nloop invariant i5: i >= 1;\nloop invariant i6: j <= 20;\nloop invariant i7: j >= i - 7;\nloop invariant i8: 1 <= i && i <= 21;\nloop invariant i9: 1 <= j && j <= 20;\nloop invariant i10: j >= i - 1;\nloop invariant i11: 2 * (i - 1) + j == 41;\nloop invariant i12: j >= i ==> i % 2 == 1;\nloop invariant i13: j >= i ==> j % 2 == 0;\nloop invariant i14: j >= i ==> i + j == 21;\nloop invariant i15: i % 2 == 1;\nloop invariant i16: j >= 0;\nloop invariant i17: (20 - j) * 3 == i - 1;\nloop invariant i18: 1 <= i;\nloop invariant i19: 20 >= j;\nloop invariant i20: j >= i ==> j + i >= 21;\nloop invariant i21: j < i ==> j + i <= 21;\nloop invariant i22: j % 2 == 0;\nloop invariant i23: i <= 21;\nloop invariant i24: 1 <= i <= 20;\nloop invariant i25: 1 <= j <= 20;\nloop invariant i26: i <= j + 1;\nloop invariant i27: (i % 2) == 1;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c"
        ],
        "repair_success": [
            "../data/benchmarks/code2inv/15.c"
        ],
        "repair_failure": [
            "../data/benchmarks/code2inv/17.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 2,
        "gen_success_count": 15,
        "repair_success_count": 1,
        "repair_failure_count": 1,
        "gen_skipped_count": 0,
        "repair_skipped_count": 0
    }
}