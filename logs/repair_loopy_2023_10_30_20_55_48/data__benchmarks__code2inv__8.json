{
    "logs": {
        "file": "../data/benchmarks/code2inv/8.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 10 * (unknown() ? 1 : 0) + 10;\nloop invariant i4: y <= 10 * (unknown() ? 1 : 0) + 10;\nloop invariant i5: 0 <= x <= 20;\nloop invariant i6: 0 <= y <= 20;\nloop invariant i7: x % 10 == y % 10;\nloop invariant i8: (y == 0) ==> (x != 20);\nloop invariant i9: x <= 10 + 10 * (x / 10);\nloop invariant i10: y <= 10 + 10 * (y / 10);\nloop invariant i11: x % 10 == \\at(x, LoopEntry) % 10;\nloop invariant i12: y % 10 == \\at(y, LoopEntry) % 10;\nloop invariant i13: x <= y + 10;\nloop invariant i14: y <= x + 10;\nloop invariant i15: x % 10 == 0;\nloop invariant i16: y % 10 == 0;\nloop invariant i17: x - y == \\at(x, Pre) - \\at(y, Pre);\nloop invariant i18: x <= 10 + 10 * loop_count;\nloop invariant i19: y <= 10 + 10 * loop_count;\nloop invariant i20: x == \\old(x) + 10 * loop_count;\nloop invariant i21: y == \\old(y) + 10 * loop_count;\nloop invariant i22: x <= 10 + 10 * (x - \\at(x, Pre)) / 10;\nloop invariant i23: y <= 10 + 10 * (y - \\at(y, Pre)) / 10;\nloop invariant i24: x == \\at(x, Pre) + 10 * (y - \\at(y, Pre)) / 10;\nloop invariant i25: y == \\at(y, Pre) + 10 * (x - \\at(x, Pre)) / 10;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x <= 10 + 10 * (unknown() ==> 1);\nloop invariant i4: y <= 10 + 10 * (unknown() ==> 1);\nloop invariant i5: (y == 0) ==> (x != 20);\nloop invariant i6: 0 <= x <= 20;\nloop invariant i7: 0 <= y <= 20;\nloop invariant i8: x % 10 == y % 10;\nloop invariant i9: x <= 10 + 10 * (y / 10);\nloop invariant i10: y <= 10 + 10 * (x / 10);\nloop invariant i11: x <= y + 10;\nloop invariant i12: y <= x + 10;\nloop invariant i13: x <= 10 + 10 * (x / 10);\nloop invariant i14: y <= 10 + 10 * (y / 10);\nloop invariant i15: x % 10 == \\at(x, LoopEntry) % 10;\nloop invariant i16: y % 10 == \\at(y, LoopEntry) % 10;\nloop invariant i17: x <= 10 + 10 * (loop iteration count);\nloop invariant i18: y <= 10 + 10 * (loop iteration count);\nloop invariant i19: x == \\at(x, Pre) + 10 * (loop iteration count);\nloop invariant i20: y == \\at(y, Pre) + 10 * (loop iteration count);\nloop invariant i21: x <= 20;\nloop invariant i22: y <= 20;\nloop invariant i23: (x - y) >= 0;\nloop invariant i24: (x - y) <= 10;\nloop invariant i25: (y != 0) ==> (x != 20);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (y == 0) )\n{;\n//@ assert( (x != 20) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}