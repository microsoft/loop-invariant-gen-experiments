{
    "logs": {
        "file": "../data/benchmarks/code2inv/11.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  while (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: x <= 20;\nloop invariant i3: y >= 0;\nloop invariant i4: y <= 20;\nloop invariant i5: x >= y;\nloop invariant i6: x - y <= 10;\nloop invariant i7: x <= 10 * (1 + \\loop_nest);\nloop invariant i8: y <= 10 * (1 + \\loop_nest);\nloop invariant i9: x == \\at(x, Pre) + 10 * \\loop_nest;\nloop invariant i10: y == \\at(y, Pre) + 10 * \\loop_nest;\nloop invariant i11: x == \\at(x, LoopEntry) + 10 * \\at(y, LoopEntry);\nloop invariant i12: y == \\at(y, LoopEntry) + 10 * \\at(x, LoopEntry);\nloop invariant i13: x % 10 == 0;\nloop invariant i14: y % 10 == 0;\nloop invariant i15: 0 <= x;\nloop invariant i16: 0 <= y;\nloop invariant i17: x == y;\nloop invariant i18: x <= 10 * (1 + \\loop_iteration_count);\nloop invariant i19: y <= 10 * (1 + \\loop_iteration_count);\nloop invariant i20: x <= y + 10;\nloop invariant i21: x <= 10 * (1 + \\loop_variant);\nloop invariant i22: y <= 10 * (1 + \\loop_variant);\nloop invariant i23: x <= 10 * \\loop_nesting_depth + 10;\nloop invariant i24: y <= 10 * \\loop_nesting_depth + 10;\nloop invariant i25: x - y == \\at(x - y, LoopEntry);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  assume((x >= 0));\n  assume((x <= 10));\n  assume((y <= 10));\n  assume((y >= 0));\n  \n  /*@\nloop invariant i1: x >= 0 && x <= 20;\nloop invariant i2: y >= 0 && y <= 20;\nloop invariant i3: x >= y;\nloop invariant i4: (x == 20) ==> (y != 0);\nloop invariant i5: x >= 0;\nloop invariant i6: x <= 10 + 10 * (x / 10);\nloop invariant i7: y >= 0;\nloop invariant i8: y <= 10 + 10 * (y / 10);\nloop invariant i9: x <= 10 * (1 + \\loop_nest);\nloop invariant i10: y <= 10 * (1 + \\loop_nest);\nloop invariant i11: x % 10 == 0;\nloop invariant i12: y % 10 == 0;\nloop invariant i13: x - y == \\at(x, Pre) - \\at(y, Pre);\nloop invariant i14: x <= 20;\nloop invariant i15: y <= 20;\nloop invariant i16: x == \\at(x, LoopEntry) + 10 * \\at(y, LoopEntry);\nloop invariant i17: y == \\at(y, LoopEntry) + 10 * \\at(x, LoopEntry);\nloop invariant i18: (x - y) % 10 == 0;\nloop invariant i19: x <= 10 * (1 + loop_variant);\nloop invariant i20: y <= 10 * (1 + loop_variant);\nloop invariant i21: x <= 10 + 10 * loop_count;\nloop invariant i22: y <= 10 + 10 * loop_count;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 10));\n    (y  = (y + 10));\n    }\n\n  }\n  \nif ( (x == 20) )\n{;\n//@ assert( (y != 0) );\n}\n\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}