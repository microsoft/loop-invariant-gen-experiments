{
    "logs": {
        "file": "../data/benchmarks/code2inv/5.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    while(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x <= size;\nloop invariant i3: size <= INT_MAX;\nloop invariant i4: size >= 0 ==> x == 0 || (z >= y);\nloop invariant i5: 0 <= x <= size;\nloop invariant i6: size > 0 ==> x < size;\nloop invariant i7: size <= 0 ==> x == 0;\nloop invariant i8: z <= y ==> y == \\min(y, z);\nloop invariant i9: x < size ==> y >= z;\nloop invariant i10: x <= size ==> y >= z;\nloop invariant i11: \\forall integer i; 0 <= i < x ==> z <= y;\nloop invariant i12: size >= 0 ==> z >= y;\nloop invariant i13: (x > 0) ==> (z >= y);\nloop invariant i14: x >= 0;\nloop invariant i15: size > 0 ==> x <= size;\nloop invariant i16: z <= y ==> y == \\old(y);\n*/\nwhile(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}",
            "#define assume(e) if(!(e)) return 0;\n\nint main()\n{\n    int x = 0;\n    int size;\n    int y, z;\n\n    /*@\nloop invariant i1: 0 <= x <= size;\nloop invariant i2: size > 0 ==> x <= size;\nloop invariant i3: size == 0 ==> x == 0;\nloop invariant i4: z <= y ==> y <= \\max(y, z);\nloop invariant i5: 0 <= x;\nloop invariant i6: x <= size;\nloop invariant i7: size >= 0 ==> z >= y;\nloop invariant i8: \\forall integer i; 0 <= i < x ==> z <= y;\nloop invariant i9: size > 0 ==> x < size;\nloop invariant i10: size <= 0 ==> x == 0;\nloop invariant i11: z <= y ==> y == \\min(y, z);\nloop invariant i12: x <= size ==> y >= z;\nloop invariant i13: x >= 0;\nloop invariant i14: x > 0 ==> y <= \\min(z, Pre);\nloop invariant i15: size <= INT_MAX;\nloop invariant i16: x < size ==> y >= z;\nloop invariant i17: size >= 0 ==> x == 0 || (z >= y);\n*/\nwhile(x < size) {\n       x += 1;\n       if( z <= y) {\n          y = z;\n       }\n    }\n\n    if(size > 0) {\n       {;\n//@ assert(z >= y);\n}\n    }\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}