{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  while(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  /*@\nloop invariant i1: 0 <= x && x <= n;\nloop invariant i2: 0 <= y && y <= n;\nloop invariant i3: y == m + x - (x > m ? 1 : 0);\nloop invariant i4: 0 <= x <= n;\nloop invariant i5: 0 <= m <= n - 1;\nloop invariant i6: y == m + x - (m < x ? m : x);\nloop invariant i7: 0 <= m <= n-1;\nloop invariant i8: 0 <= y <= n;\nloop invariant i9: y == m + (x > m);\nloop invariant i10: m <= y <= n;\nloop invariant i11: x <= y;\nloop invariant i12: y == m + (x - m > 0 ? x - m : 0);\nloop invariant i13: x >= 0 && x <= n;\nloop invariant i14: y >= m && y <= n;\nloop invariant i15: y >= x + m - n;\nloop invariant i16: y == m + (x - (m >= x ? x : m));\nloop invariant i17: n >= 0;\nloop invariant i18: m >= 0;\nloop invariant i19: x <= y <= n;\nloop invariant i20: y >= m;\nloop invariant i21: x >= m ==> y == x;\nloop invariant i22: x < m ==> y == m;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n}",
            "#define assume(e) if(!(e)) return;\nextern int unknown(void);\n\nint unknown1(){\n    int x; return x;\n}\n\nint unknown2(){\n    int x; return x;\n}\n\nint unknown3();\nint unknown4();\n\nint n, m;\n\nvoid main()\n{\n  n = unknown1();\n  m = unknown2();\n  int x=0; \n  int y;\n  y = m;\n  if(n < 0)\n    return;\n  if(m < 0)\n    return;\n  if(m > n-1)\n    return;\n  /*@\nloop invariant i1: 0 <= x <= n;\nloop invariant i2: m <= y <= n;\nloop invariant i3: x <= y;\nloop invariant i4: y == m + (x - (m >= x ? x : m));\nloop invariant i5: y >= m;\nloop invariant i6: x <= m ==> y == m;\nloop invariant i7: x > m ==> y == x;\nloop invariant i8: 0 <= x && x <= n;\nloop invariant i9: 0 <= y && y <= n;\nloop invariant i10: y == m + x - (x > m ? 1 : 0);\nloop invariant i11: 0 <= m <= n - 1;\nloop invariant i12: n >= 0;\nloop invariant i13: m >= 0;\nloop invariant i14: 0 <= y <= n;\nloop invariant i15: y == m + (x - m) * (x > m);\nloop invariant i16: y == m + x - (m + 1 < x ? x - m - 1 : 0);\nloop invariant i17: y == m + x - (x >= m + 1 ? m + 1 : x);\nloop invariant i18: x <= y <= n;\nloop invariant i19: x >= m ==> y == x;\nloop invariant i20: x < m ==> y == m;\n*/\nwhile(x<=n-1) {\n    x++;\n    if(x>=m+1) y++;\n    else if(x > m) return;\n    x = x;\n  }\n  if(x < n)\n    return;\n  if(y >= n+1)\n  {goto ERROR; ERROR:{; //@ assert(\\false);\n};}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c"
        ],
        "repair_success": [],
        "repair_failure": [],
        "gen_skipped": [],
        "repair_skipped": [],
        "total": 0
    }
}