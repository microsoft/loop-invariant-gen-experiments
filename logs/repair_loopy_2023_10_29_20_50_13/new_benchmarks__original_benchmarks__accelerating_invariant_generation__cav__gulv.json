{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: -100 * x <= y <= 100 * x;\nloop invariant i3: 0 <= w;\nloop invariant i4: z == 10 * w;\nloop invariant i5: 0 <= y;\nloop invariant i6: 0 <= z;\nloop invariant i7: x <= w;\nloop invariant i8: 10*w <= z;\nloop invariant i9: z <= 10*w + 10;\nloop invariant i10: \\forall integer k; 0 <= k < x ==> y <= 100*k + 100 || y >= -100*k - 100;\nloop invariant i11: x < 4 ==> y <= 100*x;\nloop invariant i12: x >= 0;\nloop invariant i13: y >= -10000;\nloop invariant i14: w >= 0;\nloop invariant i15: z >= 0;\nloop invariant i16: y <= 100 * x;\nloop invariant i17: z <= 10 * w;\nloop invariant i18: x >= 4 ==> y >= 2;\nloop invariant i19: z >= 0 && z == 10 * w;\nloop invariant i20: (x >= 4) ==> (y > 2);\nloop invariant i21: 0 <= x * 100;\nloop invariant i22: 10 * w <= z;\nloop invariant i23: w <= z / 10;\nloop invariant i24: y <= x * 100 + 2;\nloop invariant i25: x <= 4 ==> y <= x * 100;\nloop invariant i26: 100*x <= z;\nloop invariant i27: (\\forall int k; 0 <= k < x; y >= 100*k);\nloop invariant i28: (\\forall int k; x >= 4 && 4 <= k < x; y >= k);\nloop invariant i29: w <= z/10;\nloop invariant i30: x*100 <= z;\nloop invariant i31: y <= 100*x + z/10;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet();\n\nint main(){\n  int x = 0, y = 0, w = 0, z = 0;\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: 0 <= w;\nloop invariant i4: 0 <= z;\nloop invariant i5: z == 10 * w;\nloop invariant i6: x * 100 <= z;\nloop invariant i7: x >= 0;\nloop invariant i8: y >= -100*w;\nloop invariant i9: w >= 0;\nloop invariant i10: z >= 10*w;\nloop invariant i11: z <= 10*w + 10;\nloop invariant i12: z >= 100*x;\nloop invariant i13: w <= z/10;\nloop invariant i14: x*100 <= z;\nloop invariant i15: y <= 100*x + z/10;\nloop invariant i16: x <= y/100 + 1;\nloop invariant i17: y <= 100*x;\nloop invariant i18: z == 10*w;\nloop invariant i19: y <= 10*w;\nloop invariant i20: 0 <= x * 100;\nloop invariant i21: 10 * w <= z;\nloop invariant i22: w <= z / 10;\nloop invariant i23: y <= x * 100 + 2;\nloop invariant i24: x <= 4 ==> y <= x * 100;\nloop invariant i25: y >= -10*w;\nloop invariant i26: x <= w;\nloop invariant i27: (x >= 4 && y <= 2) ==> (w == 0);\nloop invariant i28: y >= 0;\nloop invariant i29: z >= 0;\nloop invariant i30: y <= 100 * x + 100 * (w - x);\nloop invariant i31: z <= 10 * w;\nloop invariant i32: w >= x;\nloop invariant i33: y >= -10000;\n*/\nwhile (unknown_int()) {\n   if (unknown_int())\n     {x = x+1; y = y+100;}\n   else if (unknown_int()){\n     if (x >= 4)\n       {x = x+1; y = y+1;}\n   }\n else if (y > 10*w && z >= 100*x)\n     {y = -y;}\n   w = w+1; z = z+10;\n  x = x; \n \n}\nif (x >= 4 && y <= 2)\n  goto ERROR;\n\nreturn 0;\nERROR:{; //@ assert(\\false);\n};\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 2,
        "gen_success_count": 5,
        "repair_success_count": 0,
        "repair_failure_count": 2,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}