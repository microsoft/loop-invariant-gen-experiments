{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: xa == x - 2*y;\nloop invariant i2: ya == 2*x + y;\nloop invariant i3: x == xa + 2*ya;\nloop invariant i4: y == -2*xa + ya;\nloop invariant i5: (xa == x - 2 * y);\nloop invariant i6: (ya == 2 * x + y);\nloop invariant i7: xa >= 0;\nloop invariant i8: ya >= 0;\nloop invariant i9: x == xa + 2*ya || x == xa + 2*ya + 1;\nloop invariant i10: y == -2*xa + ya || y == -2*xa + ya + x || y == -2*xa + ya - x;\nloop invariant i11: xa + 2*ya == x + y;\nloop invariant i12: xa == 0;\nloop invariant i13: ya == 0;\nloop invariant i14: xa == x - 2 * y;\nloop invariant i15: ya == 2 * x + y;\nloop invariant i16: \\forall integer k; 0 <= k < \\loop_iteration_nb ==> xa + 2*ya >= 0;\nloop invariant i17: xa >= -2*ya;\nloop invariant i18: xa <= 2*ya;\nloop invariant i19: (unknown_int() == 0) ==> (xa + 2*ya >= 0);\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n",
            "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet_int();\n\nint main () {\n\nint x;\nint y;\nint xa = 0;\nint ya = 0;\n\n/*@\nloop invariant i1: xa + 2 * ya >= 0;\nloop invariant i2: xa == 0 && ya == 0 ==> xa + 2 * ya == 0;\nloop invariant i3: xa >= 0;\nloop invariant i4: ya >= 0;\nloop invariant i5: x == xa + 2*ya || x == xa + 2*ya + 1;\nloop invariant i6: y == -2*xa + ya || y == -2*xa + ya + x || y == -2*xa + ya - x;\nloop invariant i7: xa == x - 2*y;\nloop invariant i8: ya == 2*x + y;\nloop invariant i9: xa + 2*ya == x + y;\nloop invariant i10: xa == x - 2 * y;\nloop invariant i11: ya == 2 * x + y;\nloop invariant i12: xa + 2*ya >= 0;\nloop invariant i13: xa == -2 * ya;\nloop invariant i14: (unknown_int() ==> x == xa + 2 * ya + 1) && (!unknown_int() ==> x == xa + 2 * ya + 1);\nloop invariant i15: (unknown_int() ==> y == -2 * xa + ya + x) && (!unknown_int() ==> y == -2 * xa + ya - x);\nloop invariant i16: (unknown_int() ==> xa == x - 2 * (y + x)) && (!unknown_int() ==> xa == x - 2 * (y - x));\nloop invariant i17: (unknown_int() ==> ya == 2 * x + y + x) && (!unknown_int() ==> ya == 2 * x + y - x);\nloop invariant i18: (unknown_int() == 0) ==> (xa + 2*ya >= 0);\nloop invariant i19: xa == 0;\nloop invariant i20: ya == 0;\nloop invariant i21: x == xa + 2*ya;\nloop invariant i22: y == -2*xa + ya;\n*/\nwhile (unknown_int()) {\n\tx = xa + 2*ya;\n\ty = -2*xa + ya;\n\n\tx++;\n\tif (unknown_int()) y\t= y+x;\n\telse y = y-x;\n\n\txa = x - 2*y;\n\tya = 2*x + y;\n}\n\n{;//@ assert(xa + 2*ya >= 0);\n}\nreturn 0;\n}\n"
        ]
    },
    "stats": {
        "gen_success": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/05.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/07.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/19.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/37.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/39.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/gulv_simp.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/pldi082_unbounded.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/substring1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe3.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_safe4.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbr.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/barbrprime.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bk-nat.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/bkley.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/efm.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/ex1.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/35.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/f2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/const_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_safe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/diamond_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/multivar_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/overflow_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/phases_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe3.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_safe1.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/underapprox_unsafe2.c",
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/dagger/cars.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/20.c"
        ],
        "total": 18,
        "gen_success_count": 23,
        "repair_success_count": 0,
        "repair_failure_count": 18,
        "gen_skipped_count": 0,
        "repair_skipped_count": 1
    }
}