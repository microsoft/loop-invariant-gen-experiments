{
    "logs": {
        "file": "../data/benchmarks/code2inv/24.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 6;\n    loop invariant j <= 10;\n    loop invariant (j - i) <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 1;\n    loop invariant (i + j) % 2 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant 1 <= i && i <= 11;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant j + i <= 12;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant (j - i) % 3 == 0;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j - i <= 9;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 6;\n    loop invariant j <= 10;\n    loop invariant (j - i) <= 9;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 1;\n    loop invariant (i + j) % 2 == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= 11;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant j + i <= 12;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant (j - i) % 3 == 0;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j - i <= 9;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i + j <= 11 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 11;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i + j <= 11 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n    loop invariant (i - 1) % 2 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nloop invariant (i - 1) % 2 == 0 is partially proven to be inductive.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\nloop invariant i4: (i - 1) % 2 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 6;\n    loop invariant j <= 10;\n    loop invariant (j - i) <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 6 is established but not preserved.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: j <= 10;\nloop invariant i4: (j - i) <= 9;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 1;\n    loop invariant (i + j) % 2 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 1 is established but not preserved.\nloop invariant (i + j) % 2 == 1 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1 <= i && i <= 11;\n    loop invariant 0 <= j && j <= 10;\n    loop invariant j + i <= 12;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i && i <= 11 is partially proven to be inductive.\nloop invariant 0 <= j && j <= 10 is partially proven to be inductive.\nloop invariant j + i <= 12 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\n\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i + j <= 12 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant (j - i) % 3 == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is inductive.\nloop invariant j <= 10 is inductive.\nloop invariant (j - i) % 3 == 0 is inductive.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\nloop invariant i3: (j - i) % 3 == 0;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j - i <= 9;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is inductive.\nloop invariant j <= 10 is inductive.\nloop invariant j - i <= 9 is inductive.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\nloop invariant i3: j - i <= 9;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 10;\n    loop invariant i + j <= 12;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant i + j <= 12 is established but not preserved.\nAssertion j == 6: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 10 is partially proven to be inductive.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant i + j <= 11 is established but not preserved.\nloop invariant (i - 1) % 2 == 0 is partially proven to be inductive.\nloop invariant j >= 6 is established but not preserved.\nloop invariant (j - i) <= 9 is partially proven to be inductive.\nloop invariant j >= i - 1 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 1 is partially proven to be inductive.\nloop invariant 1 <= i && i <= 11 is partially proven to be inductive.\nloop invariant 0 <= j && j <= 10 is partially proven to be inductive.\nloop invariant j + i <= 12 is partially proven to be inductive.\nloop invariant i + j <= 12 is partially proven to be inductive.\nloop invariant (j - i) % 3 == 0 is partially proven to be inductive.\nloop invariant j - i <= 9 is partially proven to be inductive.\nAssertion j == 6: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\nloop invariant i3: j >= i - 2;\nloop invariant i4: i + j <= 11;\nloop invariant i5: (i - 1) % 2 == 0;\nloop invariant i6: j >= 6;\nloop invariant i7: (j - i) <= 9;\nloop invariant i8: j >= i - 1;\nloop invariant i9: (i + j) % 2 == 1;\nloop invariant i10: 1 <= i && i <= 11;\nloop invariant i11: 0 <= j && j <= 10;\nloop invariant i12: j + i <= 12;\nloop invariant i13: i + j <= 12;\nloop invariant i14: (j - i) % 3 == 0;\nloop invariant i15: j - i <= 9;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 10);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 10;\n\n\nloop invariant i5: (i - 1) % 2 == 0;\n\nloop invariant i7: (j - i) <= 9;\n\n\nloop invariant i10: 1 <= i && i <= 11;\nloop invariant i11: 0 <= j && j <= 10;\n\n\nloop invariant i14: (j - i) % 3 == 0;\nloop invariant i15: j - i <= 9;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 6) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/24.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 15,
        "failure_count": 9,
        "success_rate": 0.625
    }
}