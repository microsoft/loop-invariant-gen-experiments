{
    "logs": {
        "file": "../data/benchmarks/code2inv/127.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n*/\n```",
            "```\n/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n    loop invariant x == i - (j - y);\n*/\n```",
            "```\n/*@ \n    loop invariant i == x + j;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant i == x + i;\n    loop invariant j == y + i;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```",
            "```\n/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```",
            "```\n/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```",
            "```\n/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n    loop invariant z1 == x;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```",
            "```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n*/",
            "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n    loop invariant x == i - (j - y);\n*/",
            "/*@ \n    loop invariant i == x + j;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant i == x + i;\n    loop invariant j == y + i;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n    loop invariant z1 == x;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y == j - (i - x) is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\nloop invariant i2: y == j - (i - x);\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i - x == j - y is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: i - x == j - y;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y == j - (i - x);\n    loop invariant x == i - (j - y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y == j - (i - x) is partially proven to be inductive.\nloop invariant x == i - (j - y) is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\nloop invariant i2: y == j - (i - x);\nloop invariant i3: x == i - (j - y);\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == x + j;\n    loop invariant y >= 0;\n    loop invariant x >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == x + j is neither established nor preserved.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nAssertion i != j: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == x + i;\n    loop invariant j == y + i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == x + i is preserved but not established.\nloop invariant j == y + i is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i - x == j - y is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: i - x == j - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i - x == j - y is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: i - x == j - y;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == x + j is neither established nor preserved.\nloop invariant j == y + z1 is preserved but not established.\nAssertion i != j: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i - x == j - y is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: i - x == j - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i - x == j - y is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: i - x == j - y;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i - x == j - y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i - x == j - y is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: i - x == j - y;\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i - x == j - y is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: i - x == j - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i == x + j;\n    loop invariant j == y + z1;\n    loop invariant z1 == x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == x + j is neither established nor preserved.\nloop invariant j == y + z1 is preserved but not established.\nloop invariant z1 == x is preserved but not established.\nAssertion i != j: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i - x == j - y is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: i - x == j - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i - x == j - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i - x == j - y is partially proven to be inductive.\nAssertion i != j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\nloop invariant i3: i - x == j - y;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y == j - (i - x) is partially proven to be inductive.\nloop invariant i - x == j - y is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant x == i - (j - y) is partially proven to be inductive.\nloop invariant i == x + j is preserved but not established.\nloop invariant i == x + i is preserved but not established.\nloop invariant j == y + i is partially proven to be inductive.\nloop invariant j == y + z1 is preserved but not established.\nloop invariant z1 == x is partially proven to be inductive.\nAssertion i != j: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y == j - (i - x);\nloop invariant i3: i - x == j - y;\nloop invariant i4: y >= 0;\nloop invariant i5: x == i - (j - y);\nloop invariant i6: i == x + j;\nloop invariant i7: i == x + i;\nloop invariant i8: j == y + i;\nloop invariant i9: j == y + z1;\nloop invariant i10: z1 == x;\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\nloop invariant i2: y == j - (i - x);\nloop invariant i3: i - x == j - y;\n\nloop invariant i5: x == i - (j - y);\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (y != 0) )\n{;\n//@ assert( (i != j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c",
            "../data/benchmarks/code2inv/127.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/112.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c"
        ],
        "skipped": [],
        "total": 127,
        "success_count": 72,
        "failure_count": 55,
        "success_rate": 0.5669291338582677
    }
}