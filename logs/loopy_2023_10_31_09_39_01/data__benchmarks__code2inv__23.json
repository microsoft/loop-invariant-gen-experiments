{
    "logs": {
        "file": "../data/benchmarks/code2inv/23.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  while ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + 2*i) <= 42;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= 2 * j + 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1 && i <= 21;\n    loop invariant j >= 0 && j <= 20;\n    loop invariant j == 20 - (i - 1)/2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i + j) % 2 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + i) % 2 == 0;\n    loop invariant 20 - j == (i - 1) / 2;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= -i + 21;\n*/\n```",
            "```\n/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant j <= 20;\n    loop invariant i <= 21;\n    loop invariant (i - 1) + (20 - j) == 19;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + 2*i) <= 42;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= 2 * j + 1;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
            "/*@ \n    loop invariant i >= 1 && i <= 21;\n    loop invariant j >= 0 && j <= 20;\n    loop invariant j == 20 - (i - 1)/2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i + j) % 2 == 1;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + i) % 2 == 0;\n    loop invariant 20 - j == (i - 1) / 2;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= -i + 21;\n*/",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant j <= 20;\n    loop invariant i <= 21;\n    loop invariant (i - 1) + (20 - j) == 19;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant i + j <= 21 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + 2*i) <= 42;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant (j + 2*i) <= 42 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 || j == 13 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 || j == 13 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i <= 2 * j + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant i <= 2 * j + 1 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 || j == 13 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2 || j == 13;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 || j == 13 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 1 && i <= 21;\n    loop invariant j >= 0 && j <= 20;\n    loop invariant j == 20 - (i - 1)/2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 && i <= 21 is inductive.\nloop invariant j >= 0 && j <= 20 is inductive.\nloop invariant j == 20 - (i - 1)/2 is inductive.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1 && i <= 21;\nloop invariant i2: j >= 0 && j <= 20;\nloop invariant i3: j == 20 - (i - 1)/2;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n    loop invariant (i + j) % 2 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 1 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= i - 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant j >= i - 2 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant (j + i) % 2 == 0;\n    loop invariant 20 - j == (i - 1) / 2;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant (j + i) % 2 == 0 is preserved but not established.\nloop invariant 20 - j == (i - 1) / 2 is partially proven to be inductive.\nAssertion j == 13: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\nloop invariant i4: 20 - j == (i - 1) / 2;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant i + j <= 21;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant i + j <= 21 is established but not preserved.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j <= 20;\n    loop invariant j >= -i + 21;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is inductive.\nloop invariant j <= 20 is inductive.\nloop invariant j >= -i + 21 is inductive.\nAssertion j == 13: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: j >= -i + 21;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant j >= 0;\n    loop invariant j <= 20;\n    loop invariant i <= 21;\n    loop invariant (i - 1) + (20 - j) == 19;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant i <= 21 is partially proven to be inductive.\nloop invariant (i - 1) + (20 - j) == 19 is preserved but not established.\nAssertion j == 13: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j >= 0;\nloop invariant i3: j <= 20;\n\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant j <= 20 is partially proven to be inductive.\nloop invariant i + j <= 21 is partially proven to be inductive.\nloop invariant (j + 2*i) <= 42 is partially proven to be inductive.\nloop invariant j >= i - 2 is partially proven to be inductive.\nloop invariant j >= i - 2 || j == 13 is partially proven to be inductive.\nloop invariant i <= 2 * j + 1 is partially proven to be inductive.\nloop invariant i >= 1 && i <= 21 is partially proven to be inductive.\nloop invariant j >= 0 && j <= 20 is partially proven to be inductive.\nloop invariant j == 20 - (i - 1)/2 is partially proven to be inductive.\nloop invariant (i + j) % 2 == 1 is partially proven to be inductive.\nloop invariant (j + i) % 2 == 0 is preserved but not established.\nloop invariant 20 - j == (i - 1) / 2 is partially proven to be inductive.\nloop invariant j >= -i + 21 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= 21 is partially proven to be inductive.\nloop invariant (i - 1) + (20 - j) == 19 is partially proven to be inductive.\nAssertion j == 13: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\nloop invariant i3: i + j <= 21;\nloop invariant i4: (j + 2*i) <= 42;\nloop invariant i5: j >= i - 2;\nloop invariant i6: j >= i - 2 || j == 13;\nloop invariant i7: i <= 2 * j + 1;\nloop invariant i8: i >= 1 && i <= 21;\nloop invariant i9: j >= 0 && j <= 20;\nloop invariant i10: j == 20 - (i - 1)/2;\nloop invariant i11: (i + j) % 2 == 1;\nloop invariant i12: (j + i) % 2 == 0;\nloop invariant i13: 20 - j == (i - 1) / 2;\nloop invariant i14: j >= -i + 21;\nloop invariant i15: j >= 0;\nloop invariant i16: i <= 21;\nloop invariant i17: (i - 1) + (20 - j) == 19;\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  \n  (i = 1);\n  (j = 20);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: j <= 20;\n\n\n\nloop invariant i6: j >= i - 2 || j == 13;\nloop invariant i7: i <= 2 * j + 1;\nloop invariant i8: i >= 1 && i <= 21;\nloop invariant i9: j >= 0 && j <= 20;\nloop invariant i10: j == 20 - (i - 1)/2;\n\n\nloop invariant i13: 20 - j == (i - 1) / 2;\nloop invariant i14: j >= -i + 21;\nloop invariant i15: j >= 0;\nloop invariant i16: i <= 21;\n\n*/\nwhile ((j >= i)) {\n    {\n    (i  = (i + 2));\n    (j  = (j - 1));\n    }\n\n  }\n  \n{;\n//@ assert( (j == 13) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 15,
        "failure_count": 8,
        "success_rate": 0.6521739130434783
    }
}