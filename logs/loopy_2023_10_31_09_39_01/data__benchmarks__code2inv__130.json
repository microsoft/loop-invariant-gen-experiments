{
    "logs": {
        "file": "../data/benchmarks/code2inv/130.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": ""
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    while( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}\n```\n\nOutput the loop invariants for the loop in the program above.\nOutput all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```"
            },
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -d2;\n    loop invariant x3 >= -d3;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -1;\n    loop invariant x3 >= -1;\n*/\n",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```",
            "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -d2;\n    loop invariant x3 >= -d3;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -1;\n    loop invariant x3 >= -1;\n*/\n"
            ],
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
            "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant d1 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\n\n\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -d2;\n    loop invariant x3 >= -d3;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= -d2 is preserved but not established.\nloop invariant x3 >= -d3 is preserved but not established.\nAssertion x2 >= 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant d1 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\n\n\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "```\n/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= -1;\n    loop invariant x3 >= -1;\n*/\n",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant d1 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\n\n\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n    loop invariant d1 == 1;\n    loop invariant d2 == 1;\n    loop invariant d3 == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant d1 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\n\n\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x1 >= 0;\n    loop invariant x2 >= 0;\n    loop invariant x3 >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x1 >= 0 is established but not preserved.\nloop invariant x2 >= 0 is neither established nor preserved.\nloop invariant x3 >= 0 is neither established nor preserved.\nAssertion x2 >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\n\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x1 >= 0 is partially proven to be inductive.\nloop invariant x2 >= 0 is preserved but not established.\nloop invariant x3 >= 0 is preserved but not established.\nloop invariant d1 == 1 is partially proven to be inductive.\nloop invariant d2 == 1 is partially proven to be inductive.\nloop invariant d3 == 1 is partially proven to be inductive.\nloop invariant x2 >= -d2 is partially proven to be inductive.\nloop invariant x3 >= -d3 is partially proven to be inductive.\nAssertion x2 >= 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\nloop invariant i2: x2 >= 0;\nloop invariant i3: x3 >= 0;\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\nloop invariant i7: x2 >= -d2;\nloop invariant i8: x3 >= -d3;\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int d1 = 1;\n    int d2 = 1;\n    int d3 = 1;\n    int x1 = 1;\n    int x2,x3;\n\n    /*@\nloop invariant i1: x1 >= 0;\n\n\nloop invariant i4: d1 == 1;\nloop invariant i5: d2 == 1;\nloop invariant i6: d3 == 1;\n\n\n*/\nwhile( x1 > 0) {\n        if(x2 > 0) {\n            if(x3 > 0) {\n                x1 = x1 - d1;\n                x2 = x2 - d2;\n                x3 = x3 - d3;\n            }\n        }\n    }\n\n    {;\n//@ assert(x2 >= 0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c",
            "../data/benchmarks/code2inv/127.c",
            "../data/benchmarks/code2inv/128.c",
            "../data/benchmarks/code2inv/129.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/112.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c",
            "../data/benchmarks/code2inv/130.c"
        ],
        "skipped": [],
        "total": 130,
        "success_count": 74,
        "failure_count": 56,
        "success_rate": 0.5692307692307692
    }
}