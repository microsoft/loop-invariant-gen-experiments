{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/ex23.v.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= (y + 1) * 36;\n    loop invariant z == y * 36 + counter;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: y * 36 <= z <= (y + 1) * 36;\nloop invariant i3: z == y * 36 + counter;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: y * 36 <= z <= (y + 1) * 36;\nloop invariant i3: z == y * 36 + counter;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter && counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y && y <= 127;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter && counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y && y <= 127;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= z < 4608;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == (y * 36) + counter;\nloop invariant i3: 0 <= z < 4608;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == (y * 36) + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion 0 == 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\nloop invariant i3: z == y * 36 + counter;\nloop invariant i4: 0 <= z <= 4608 - 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: 0 <= y <= 127;\nloop invariant i3: z == y * 36 + counter;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 127 * 36;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y <= 127;\nloop invariant i4: 0 <= z <= 127 * 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is established but not preserved.\nAssertion 0 == 1: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: 0 <= y <= 127;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion 0 == 1: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \twhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. `y` is assigned a value from `unknown_int()`.\n2. `z` is assigned a value from `unknown_int()`.\n3. The program checks if `y` is between 0 and 127 (inclusive), otherwise it returns 0.\n4. `z` is assigned `y * 36`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is `counter < 36`.\n2. Inside the loop, `x[z]` is assigned 0, `z` is incremented by 1, and `counter` is incremented by 1.\n3. Three variables `v1`, `v2`, and `v3` are assigned values from `unknown_int()` in each iteration, but these do not affect the main logic of the loop.\n\nGiven this information, we can output the loop invariants:\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/\n```\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- y is an integer, 0 <= y <= 127\n- counter is initially 0\n- z is an integer, y * 36 <= z < (y + 1) * 36\n- x is an array of integers with 4608 elements\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is: counter < 36\n- Inside the loop, we update z and counter\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= (y + 1) * 36;\n    loop invariant z == y * 36 + counter;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- y is an integer with a value between 0 and 127 (inclusive).\n- z is initialized to y * 36.\n- counter is initialized to 0.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is \"counter < 36\".\n\nNow, find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `y` is assigned an unknown integer value.\n2. The program returns if `y` is not within the range [0, 127].\n3. `z` is initialized as `y * 36`.\n4. `counter` is initialized as 0.\n\nNow, let's analyze the loop body and loop condition:\n\n1. The loop condition is `counter < 36`.\n2. Inside the loop, `x[z]` is set to 0, `z` is incremented by 1, and `counter` is incremented by 1.\n3. `v1`, `v2`, and `v3` are assigned unknown integer values, but they don't affect the loop behavior.\n\nFinally, let's output the loop invariants:\n\n```\n@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n}\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also help in verifying the post-condition (the array `x` is modified in the specified range without causing any index out of bounds issues)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `y` is assigned an unknown integer value.\n2. `z` is assigned an unknown integer value.\n3. The program checks if `y` is within the range [0, 127]. If not, it returns 0.\n4. `z` is assigned `y * 36`.\n5. `counter` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `counter < 36`.\n\nNow, let's find the necessary loop invariants:\n\n1. `counter` is non-negative and less than or equal to 36.\n2. `z` is equal to the initial value of `z` plus `counter`.\n3. `z` is within the range [0, 4608 - 36] during the loop execution.\n\nTaking these invariants into account, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- y is a non-negative integer and less than or equal to 127\n- z = y * 36\n- counter starts at 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is \"counter < 36\"\n- Inside the loop, z is incremented by 1, and counter is incremented by 1 in each iteration.\n\nNow, let's find the loop invariants:\n\n```c\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution, as z is initialized as y * 36 and counter is 0,\n(ii) in every iteration of the loop, as z and counter are incremented by 1 in each iteration, and\n(iii) after the loop termination, as counter will be 36 and the value of z will be y * 36 + 36, which is within the valid range of the array x."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `y` is assigned an unknown integer value.\n- `z` is assigned `y * 36`.\n- `counter` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `counter < 36`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= counter && counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y && y <= 127;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n1. y is non-negative and less than or equal to 127.\n2. z is initially assigned to y * 36.\n3. counter is initialized to 0.\n\nNow, let's analyze the loop:\n1. The loop condition is counter < 36.\n2. In each iteration, z is incremented by 1 and counter is incremented by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= z < 4608;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and identify the pre-conditions, variable assignments, and the loop condition.\n\n1. Pre-conditions or variable assignments:\n   - `y` is assigned an unknown integer value, and it is constrained to be between 0 and 127 (inclusive).\n   - `counter` is initialized to 0.\n   - `z` is assigned an unknown integer value, and then it is set to `y * 36`.\n\n2. Loop condition: `counter < 36`\n\nNow, we will find the loop invariants for the while loop.\n\n```\n/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/\n```\n\nExplanation:\n\n1. `0 <= counter <= 36`: \n   - Before the loop execution: counter is initialized to 0.\n   - In every iteration of the loop: counter is incremented by 1.\n   - After the loop termination: counter is less than or equal to 36.\n\n2. `0 <= y <= 127`: \n   - This is given as a pre-condition in the program and does not change during the loop execution.\n\n3. `z == y * 36 + counter`: \n   - Before the loop execution: z is set to `y * 36`, and counter is 0.\n   - In every iteration of the loop: z is incremented by 1, and counter is also incremented by 1.\n   - After the loop termination: This relation still holds.\n\n4. `0 <= z <= 4608 - 36`: \n   - Before the loop execution: z is set to `y * 36`, and since 0 <= y <= 127, z is between 0 and 4608 - 36.\n   - In every iteration of the loop: z is incremented by 1, and counter is incremented by 1, so z remains within this range.\n   - After the loop termination: z is still within this range."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int y = unknown_int();`\n- `int counter = 0;`\n- `int z = unknown_int(), v1, v2, v3;`\n- `if ( 127 < y) return 0;`\n- `if ( y < 0) return 0;`\n- `z = y * 36;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- `while (counter < 36)`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 127 * 36;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\n*/",
            "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant y * 36 <= z <= (y + 1) * 36;\n    loop invariant z == y * 36 + counter;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/",
            "@{\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n}",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z < 4608;\n*/",
            "/*@ \n    loop invariant 0 <= counter && counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y && y <= 127;\n*/",
            "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant z == (y * 36) + counter;\n    loop invariant 0 <= z < 4608;\n*/",
            "/*@\n    loop invariant 0 <= counter <= 36;\n    loop invariant 0 <= y <= 127;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= z <= 4608 - 36;\n*/",
            "/*@ \n    loop invariant 0 <= counter <= 36;\n    loop invariant z == y * 36 + counter;\n    loop invariant 0 <= y <= 127;\n    loop invariant 0 <= z <= 127 * 36;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: y * 36 <= z <= (y + 1) * 36;\nloop invariant i6: z == y * 36 + counter;\nloop invariant i7: 0 <= counter <= 36;\nloop invariant i8: z == y * 36 + counter;\nloop invariant i9: 0 <= z < 4608;\nloop invariant i10: 0 <= counter <= 36;\nloop invariant i11: z == y * 36 + counter;\nloop invariant i12: 0 <= z <= 4608 - 36;\nloop invariant i13: 0 <= counter <= 36;\nloop invariant i14: z == y * 36 + counter;\nloop invariant i15: 0 <= z <= 4608 - 36;\nloop invariant i16: 0 <= counter <= 36;\nloop invariant i17: z == y * 36 + counter;\nloop invariant i18: 0 <= z < 4608;\nloop invariant i19: 0 <= counter && counter <= 36;\nloop invariant i20: z == y * 36 + counter;\nloop invariant i21: 0 <= y && y <= 127;\nloop invariant i22: 0 <= counter <= 36;\nloop invariant i23: z == (y * 36) + counter;\nloop invariant i24: 0 <= z < 4608;\nloop invariant i25: 0 <= counter <= 36;\nloop invariant i26: 0 <= y <= 127;\nloop invariant i27: z == y * 36 + counter;\nloop invariant i28: 0 <= z <= 4608 - 36;\nloop invariant i29: 0 <= counter <= 36;\nloop invariant i30: z == y * 36 + counter;\nloop invariant i31: 0 <= y <= 127;\nloop invariant i32: 0 <= z <= 127 * 36;\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is established but not preserved.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i32 is inductive.\nAssertion 0 == 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint x[4608];\n\nint main() {\n   \n\tint y = unknown_int();\n\tint counter = 0;\n\tint z = unknown_int(), v1,v2,v3;\n\n   \tif ( 127 < y) return 0;\n   \tif ( y < 0) return 0;\n   \tz = y * 36;\n   \n   \t/*@\nloop invariant i1: 0 <= counter <= 36;\nloop invariant i2: z == y * 36 + counter;\nloop invariant i3: \\forall integer k; y * 36 <= k < y * 36 + counter ==> x[k] == 0;\nloop invariant i4: 0 <= counter <= 36;\nloop invariant i5: y * 36 <= z <= (y + 1) * 36;\nloop invariant i6: z == y * 36 + counter;\nloop invariant i7: 0 <= counter <= 36;\nloop invariant i8: z == y * 36 + counter;\n\nloop invariant i10: 0 <= counter <= 36;\nloop invariant i11: z == y * 36 + counter;\n\nloop invariant i13: 0 <= counter <= 36;\nloop invariant i14: z == y * 36 + counter;\n\nloop invariant i16: 0 <= counter <= 36;\nloop invariant i17: z == y * 36 + counter;\n\nloop invariant i19: 0 <= counter && counter <= 36;\nloop invariant i20: z == y * 36 + counter;\nloop invariant i21: 0 <= y && y <= 127;\nloop invariant i22: 0 <= counter <= 36;\nloop invariant i23: z == (y * 36) + counter;\n\nloop invariant i25: 0 <= counter <= 36;\nloop invariant i26: 0 <= y <= 127;\nloop invariant i27: z == y * 36 + counter;\n\nloop invariant i29: 0 <= counter <= 36;\nloop invariant i30: z == y * 36 + counter;\nloop invariant i31: 0 <= y <= 127;\n\n*/\nwhile (counter < 36){\n\n\t\tif(z < 0 || z >= 4608)\n\t\t\t{;//@ assert( 0 == 1 );\n}\n\n      \t\tx[z] = 0;\n      \t\tz++;\n      \t\tcounter++;\n  \t\tv1 = unknown_int();\n  \t\tv2 = unknown_int();\n  \t\tv3 = unknown_int();\n   \t}\n\n   \treturn 1;\n\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nAssertion 0 == 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 212,
        "success_rate": 0.5613207547169812
    }
}