{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/crafted/simple_unsafe4.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: 0 <= x;\nloop invariant i2: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (x - 0x0ffffff1) % 2 == 0;\n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: (x - 0x0ffffff1) % 2 == 0;\nloop invariant i2: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: (x - 0x0ffffff1) % 2 == 0;\nloop invariant i2: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 0 <= x <= 0x0ffffff1;\n  loop invariant x % 2 == 0x0ffffff1 % 2;\n  loop variant x;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0ffffff1;\nloop invariant i2: x % 2 == 0x0ffffff1 % 2;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: 0 <= x <= 0x0ffffff1;\nloop invariant i2: x % 2 == 0x0ffffff1 % 2;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x % 2 == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion x % 2 == 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  while (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make notes as per the instructions:\n\n1. Pre-conditions or variable assignments: x is initialized with the value 0x0ffffff1.\n2. Loop condition: x > 1\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: x is an odd number (since 0x0ffffff1 is odd).\n2. In every iteration of the loop: x remains an odd number (since x is decremented by 2).\n3. After the loop termination: x must be an odd number and satisfy the condition x <= 1.\n\nBased on the analysis above, we can output the loop invariants as follows:\n```\n/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and the loop condition:\n- The variable x is assigned to 0x0ffffff1.\n- The loop condition is x > 1.\n\nNow, let's find the loop invariants:\n- Before the loop execution, x is an odd number.\n- In every iteration of the loop, x remains an odd number.\n- After the loop termination, x must be either 0 or 1, and still odd.\n\nLet's express these loop invariants in ACSL:\n\n```\n/*@ \n    loop invariant x % 2 == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-condition and variable assignments in the program:\n- `unsigned int x = 0x0ffffff1;` initializes `x` with the value `0x0ffffff1`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x > 1`.\n- In the loop body, `x` is decremented by `2`.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant x % 2 == 1;\n*/\n```\n\nThese loop invariants are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition `!(x % 2)`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- unsigned int x = 0x0ffffff1;\n\nNext, analyze the loop body and make a note of the loop condition:\n- while (x > 1)\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@\n    loop invariant x % 2 == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `unsigned int x = 0x0ffffff1;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- `while (x > 1)`\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- x is assigned the value 0x0ffffff1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x > 1)\n- In the loop body, x is decremented by 2 in every iteration\n\nGiven this information, we can now output the loop invariants:\n\n```\n/*@ \n    loop invariant (x - 0x0ffffff1) % 2 == 0;\n    loop invariant x % 2 == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- unsigned int x = 0x0ffffff1;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- while (x > 1)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant x % 2 == 1;\n*/\n```\n\nThis loop invariant states that x is always odd during the loop execution. It holds before the loop execution since x is initialized to an odd value (0x0ffffff1). It is maintained in every iteration since x is decreased by 2, which keeps it odd. Finally, after the loop termination, x is either 0 or 1, which implies that it is not divisible by 2, satisfying the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `unsigned int x = 0x0ffffff1;` initializes x to a large odd number.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x > 1`.\n- In the loop body, x is decremented by 2 in each iteration.\n\nNow, let's find the loop invariants:\n\nThe loop invariants are as follows:\n```\n/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also help Frama-C to verify that the post-condition `!(x % 2)` holds after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- unsigned int x = 0x0ffffff1;\n\nNow let's analyze the loop body and make a note of the loop condition:\n- while (x > 1)\n\nFinally, let's output the necessary loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= x <= 0x0ffffff1;\n  loop invariant x % 2 == 0x0ffffff1 % 2;\n  loop variant x;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n- unsigned int x = 0x0ffffff1;\n\nNext, analyze the loop body and make a note of the loop condition:\n- while (x > 1)\n\nNow, output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x % 2 == 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@\n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant 0 <= x;\n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant (x - 0x0ffffff1) % 2 == 0;\n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n    loop invariant x <= 0x0ffffff1;\n*/",
            "/*@ \n  loop invariant 0 <= x <= 0x0ffffff1;\n  loop invariant x % 2 == 0x0ffffff1 % 2;\n  loop variant x;\n*/",
            "/*@ \n    loop invariant x % 2 == 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\nloop invariant i3: x % 2 == 1;\nloop invariant i4: x % 2 == 1;\nloop invariant i5: x % 2 == 1;\nloop invariant i6: 0 <= x;\nloop invariant i7: x % 2 == 1;\nloop invariant i8: (x - 0x0ffffff1) % 2 == 0;\nloop invariant i9: x % 2 == 1;\nloop invariant i10: x % 2 == 1;\nloop invariant i11: x % 2 == 1;\nloop invariant i12: x <= 0x0ffffff1;\nloop invariant i13: 0 <= x <= 0x0ffffff1;\nloop invariant i14: x % 2 == 0x0ffffff1 % 2;\nloop invariant i15: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nAssertion x % 2 == 0: Unproven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0x0ffffff1;\n\n  /*@\nloop invariant i1: x % 2 == 1;\nloop invariant i2: x <= 0x0ffffff1;\nloop invariant i3: x % 2 == 1;\nloop invariant i4: x % 2 == 1;\nloop invariant i5: x % 2 == 1;\nloop invariant i6: 0 <= x;\nloop invariant i7: x % 2 == 1;\nloop invariant i8: (x - 0x0ffffff1) % 2 == 0;\nloop invariant i9: x % 2 == 1;\nloop invariant i10: x % 2 == 1;\nloop invariant i11: x % 2 == 1;\nloop invariant i12: x <= 0x0ffffff1;\nloop invariant i13: 0 <= x <= 0x0ffffff1;\nloop invariant i14: x % 2 == 0x0ffffff1 % 2;\nloop invariant i15: x % 2 == 1;\n*/\nwhile (x > 1) {\n    x -= 2;\n  }\n\n  {;//@ assert(!(x % 2));\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nAssertion x % 2 == 0: Unproven\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33
        ],
        "skipped": [],
        "total": 34,
        "success_rate": 0.38235294117647056
    }
}