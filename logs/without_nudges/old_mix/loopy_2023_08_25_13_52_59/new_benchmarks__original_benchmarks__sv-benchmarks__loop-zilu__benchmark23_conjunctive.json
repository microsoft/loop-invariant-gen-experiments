{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark23_conjunctive.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2*i;\n    loop invariant i <= 100;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2*i;\nloop invariant i3: i <= 100;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0 && i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: 0 <= i <= 100;\nloop invariant i2: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion j == 200: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  while (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int i = unknown_int();`\n- `int j = unknown_int();`\n- `if (!(i==0 && j==0)) return 0;` (This means that `i` and `j` are both initially 0)\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- `while (i < 100)`\n\nNow let's find the necessary loop invariants for the while loop:\n\nLoop Invariants:\n- Before the loop execution: `i == 0` and `j == 0`\n- In every iteration of the loop: `j == 2 * i`\n- After the loop termination: `i == 100` and `j == 200`\n\nSo the loop invariants in ACSL notation are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the pre-conditions or variable assignments in the program:\n- `int i = unknown_int();`\n- `int j = unknown_int();`\n- `if (!(i==0 && j==0)) return 0;` (This is essentially a precondition, as it implies i and j are both 0)\n\nNow, we analyze the loop body and make a note of the loop condition:\n- `while (i<100) { ... }`\n\nWe can now output the necessary loop invariants for the while loop:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2*i;\n    loop invariant i <= 100;\n*/\n```\nThese loop invariants are true before the loop execution, during each iteration of the loop, and after the loop termination. They are also sufficient for Frama-C to verify the post-condition `j == 200`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's list the pre-conditions or variable assignments in the program:\n- i and j are both initialized with unknown_int() calls. However, we have the condition (i==0 && j==0) that must hold true for the program to continue. So, i and j are both initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is (i < 100). In each iteration of the loop, j is incremented by 2 and i is incremented by 1.\n\nFinally, output the necessary loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (j == 200).\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```\n\nThese loop invariants hold true before the loop execution (i=0 and j=0), during every iteration (j is incremented by 2 for each increment of i), and after loop termination (when i=100, j=200)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int i = unknown_int();`\n- `int j = unknown_int();`\n- `if (!(i==0 && j==0)) return 0;` (This means i and j are both 0 before the loop starts)\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `i < 100`.\n- In each iteration, `j` is incremented by 2 and `i` is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (`j == 200`).\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n\n1. i = unknown_int();\n2. j = unknown_int();\n3. if (!(i==0 && j==0)) return 0; (This is equivalent to assuming i==0 && j==0 as the pre-condition)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: i < 100\n- Loop body: j += 2; i++;\n\nFinally, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int i = unknown_int();`\n- `int j = unknown_int();`\n- `if (!(i==0 && j==0)) return 0;` (i.e., i and j are both initially 0)\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: `i < 100`\n- Loop body:\n  - `j += 2;`\n  - `i++;`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n- i is assigned an unknown integer value.\n- j is assigned an unknown integer value.\n- The program returns if i is not 0 and j is not 0, so we can assume that i and j are both 0 at the beginning of the loop.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is i < 100.\n- In each iteration, j is incremented by 2 and i is incremented by 1.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\nPre-conditions:\n- i and j are assigned with the return values of unknown_int() function calls. The function definitions are not given, so we cannot make any assumptions about their initial values.\n- The program continues only if i == 0 and j == 0, so we know that both i and j are initially 0.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\nLoop condition:\n- The loop continues while i < 100.\n\nNow, we need to find the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```\n\nExplanation:\n- The first loop invariant states that i is always between 0 and 100, inclusive. This is true before the loop execution, in every iteration of the loop, and after the loop termination.\n- The second loop invariant states that j is always equal to 2 * i. This is also true before the loop execution (both i and j are 0), in every iteration of the loop (j is incremented by 2 when i is incremented by 1), and after the loop termination. This loop invariant also implies the post-condition j == 200, because when the loop terminates, i == 100, and therefore j == 2 * 100 == 200."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n```\nint i = unknown_int();\nint j = unknown_int();\n```\nAs we do not know the values of `i` and `j` from the unknown functions, we cannot make any assumptions about them. However, the program has a condition that i and j should both be 0, otherwise, the program will return 0. So we have:\n```\nif (!(i==0 && j==0)) return 0;\n```\nNow let's analyze the loop body and make a note of the loop condition:\n```\nwhile (i<100) {\n    j+=2;\n    i++;\n}\n```\nThe loop condition is `i < 100`. In the loop body, the value of `j` is incremented by 2, and the value of `i` is incremented by 1.\n\nNow, let's output the loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/\n```\nThe above invariants satisfy the conditions mentioned, and after the loop termination, they imply the post condition `j==200`."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions or variable assignments in the program:\n1. `int i = unknown_int();`\n2. `int j = unknown_int();`\n3. `if (!(i==0 && j==0)) return 0;` (i.e., i and j are both initialized to 0)\n\nLoop condition: `while (i<100)`\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2*i;\n    loop invariant i <= 100;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant i >= 0 && i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j == 2 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i <= 100;\n    loop invariant j == 2 * i;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int i = unknown_int();\n  int j = unknown_int();\n  \n  if (!(i==0 && j==0)) return 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j == 2 * i;\nloop invariant i3: i >= 0;\nloop invariant i4: j == 2*i;\nloop invariant i5: i <= 100;\nloop invariant i6: 0 <= i <= 100;\nloop invariant i7: j == 2 * i;\nloop invariant i8: 0 <= i <= 100;\nloop invariant i9: j == 2 * i;\nloop invariant i10: i <= 100;\nloop invariant i11: j == 2 * i;\nloop invariant i12: 0 <= i <= 100;\nloop invariant i13: j == 2 * i;\nloop invariant i14: i >= 0 && i <= 100;\nloop invariant i15: j == 2 * i;\nloop invariant i16: 0 <= i <= 100;\nloop invariant i17: j == 2 * i;\nloop invariant i18: i >= 0;\nloop invariant i19: j == 2 * i;\nloop invariant i20: 0 <= i <= 100;\nloop invariant i21: j == 2 * i;\n*/\nwhile (i<100) {\n    j+=2;\n    i++;\n  }\n  {;//@ assert(j==200);\n}\n  return 0;\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nAssertion j == 200: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242,
            243,
            244,
            245,
            246,
            247,
            248,
            249,
            250,
            255,
            256,
            257,
            258,
            259,
            260,
            261,
            262,
            264,
            265,
            266,
            268,
            272,
            274,
            275,
            276,
            279,
            281,
            282,
            287,
            293,
            295,
            299,
            301,
            303,
            305,
            307,
            308,
            311,
            312,
            313,
            319,
            321,
            322,
            324,
            325,
            328,
            330,
            332,
            333,
            334,
            335,
            336,
            337,
            342,
            343,
            344,
            345,
            346,
            347,
            349,
            350,
            351,
            352,
            353,
            354,
            355,
            356,
            357,
            358,
            359,
            360,
            361,
            362,
            364
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241,
            251,
            252,
            253,
            254,
            263,
            267,
            269,
            270,
            271,
            273,
            277,
            278,
            280,
            283,
            284,
            285,
            286,
            288,
            289,
            290,
            291,
            292,
            294,
            296,
            297,
            298,
            300,
            302,
            304,
            306,
            309,
            310,
            314,
            315,
            316,
            317,
            318,
            320,
            323,
            326,
            327,
            329,
            331,
            338,
            339,
            340,
            341,
            348,
            363
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 361,
        "success_rate": 0.5761772853185596
    }
}