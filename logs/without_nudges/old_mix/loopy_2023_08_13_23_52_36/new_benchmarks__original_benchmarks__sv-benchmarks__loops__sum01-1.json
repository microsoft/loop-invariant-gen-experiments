{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/sv-benchmarks/loops/sum01-1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 0 <= i <= n+1;\nloop invariant sn == (i-1) * a;\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i - 1) * 2 on line 14: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 20: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= 18;\n    loop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= 18;\nloop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn >= 0 on line 14: Partially proven\nInvariant sn <= 18 on line 15: Partially proven\nInvariant sn == 2 * (i <= 10? i - 1: 9) on line 16: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\nloop invariant sn >= 0;\nloop invariant sn <= 18;\nloop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn >= 0 on line 14: Valid\nInvariant sn <= 18 on line 15: Valid\nInvariant sn == 2 * (i <= 10? i - 1: 9) on line 16: Valid\nPost-condition sn == n * 2 || sn == 0 on line 22: Unknown\n"
            },
            {
                "invariants": "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*a || (sn == 0 && i >= 10);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i-1)*a || (sn == 0 && i >= 10);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i - 1) * 2 || (sn == 0 && i >= 10) on line 14: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 20: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant 0 <= sn <= 2*n;\n    loop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 0 <= i <= n+1;\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 0 <= i <= n + 1 on line 13: Unknown\nInvariant 0 <= sn <= 2 * n on line 14: Partially proven\nInvariant sn == 2 * (i - 1) || (i >= 10 && sn == 18) on line 15: Unknown\nPost-condition sn == n * 2 || sn == 0 on line 21: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 1 <= i && i <= n+1;\nloop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "success": false,
                "checker_message": "Invariant 1 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i <= 10? 2 * (i - 1): 2 * 9) on line 14: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 20: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\nloop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
                "checker_message_after_prune": "Invariant sn == (i <= 10? 2 * (i - 1): 2 * 9) on line 14: Valid\nPost-condition sn == n * 2 || sn == 0 on line 20: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  for(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int i, n = unknown_uint(), sn = 0;`\n- `i` is the loop counter, `n` is an unknown unsigned integer, and `sn` is initialized to 0.\n\nNow, let's analyze the loop and make a note of the loop condition:\n- The loop condition is `i <= n`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n*/\n```\n\nExplanation:\n- The loop invariant `0 <= i <= n+1` ensures that `i` is within the range [0, n+1] during the loop execution.\n- The loop invariant `sn == (i-1) * a` ensures that `sn` is equal to `(i-1) * a` at the beginning of each iteration, which helps to deduce the post-condition `sn == n * a || sn == 0` after the loop termination."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unknown unsigned integer\n- sn is initialized to 0\n- i is the loop counter, starting from 1\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop runs from i = 1 to i = n (inclusive)\n- Inside the loop, sn is incremented by a (2) if i < 10\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= 18;\n    loop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n*/\n```\n\nExplanation:\n- i starts from 1 and increments by 1 in each iteration, so it will always be in the range [1, n+1]. (inclusive)\n- sn is always incremented by a (2) or remains the same, so it will always be non-negative.\n- sn will be at most 18 because it increments by a (2) only when i < 10, and there are at most 9 such values for i.\n- sn is equal to 2 times the number of iterations where i < 10. If i <= 10, then it's equal to 2 * (i - 1), otherwise it's equal to 2 * 9 (since there are 9 iterations where i < 10)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- `int i, n=unknown_uint(), sn=0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n- `for(i=1; i<=n; i++)`\n\nNow, we can output the necessary loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*a || (sn == 0 && i >= 10);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is an unsigned integer, with an unknown value.\n- i is an integer initialized to 1.\n- sn is an integer initialized to 0.\n- a is a constant integer with the value 2.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= n.\n- Inside the loop, if i < 10, sn is incremented by a (which is 2).\n\nNow, we can find the necessary loop invariants for the while loop to help Frama-C verify the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant 0 <= sn <= 2*n;\n    loop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition sn == n*a || sn == 0."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions:\n- n is an unknown unsigned integer\n- i is initialized to 1\n- sn is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i <= n`\n- Inside the loop, if `i < 10`, then `sn` is incremented by `a` (which is 2)\n\nNow, let's find the necessary loop invariants that are true before, during, and after the loop:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/\n```\n\nExplanation:\n- `1 <= i && i <= n+1` ensures that i is within the valid range throughout the loop. Before the loop starts, i is 1, and after the loop terminates, i is at most n+1.\n- `sn == (i <= 10 ? 2 * (i - 1) : 2 * 9)` represents the value of sn at any iteration of the loop. If i is less than or equal to 10, sn will be 2 times (i-1), and if i is greater than 10, sn will be 2 times 9 (which is the maximum value it can take since after i = 10, sn will not be updated anymore)."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= 18;\n    loop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n*/",
            "/*@ \n  loop invariant 1 <= i <= n+1;\n  loop invariant sn == (i-1)*a || (sn == 0 && i >= 10);\n*/",
            "/*@ \n    loop invariant 0 <= i <= n+1;\n    loop invariant 0 <= sn <= 2*n;\n    loop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= n+1;\n    loop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\nloop invariant 0 <= i <= n+1;\nloop invariant sn == (i-1) * a;\nloop invariant 1 <= i && i <= n+1;\nloop invariant sn >= 0;\nloop invariant sn <= 18;\nloop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\nloop invariant 1 <= i <= n+1;\nloop invariant sn == (i-1)*a || (sn == 0 && i >= 10);\nloop invariant 0 <= sn <= 2*n;\nloop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\nloop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= i <= n + 1 on line 13: Unknown\nInvariant sn == (i - 1) * 2 on line 14: Unknown\nInvariant 1 <= i <= n + 1 on line 15: Partially proven\nInvariant sn >= 0 on line 16: Partially proven\nInvariant sn <= 18 on line 17: Partially proven\nInvariant sn == 2 * (i <= 10? i - 1: 9) on line 18: Partially proven\nInvariant 1 <= i <= n + 1 on line 19: Partially proven\nInvariant sn == (i - 1) * 2 || (sn == 0 && i >= 10) on line 20: Partially proven\nInvariant 0 <= sn <= 2 * n on line 21: Partially proven\nInvariant sn == 2 * (i - 1) || (i >= 10 && sn == 18) on line 22: Partially proven\nInvariant sn == (i <= 10? 2 * (i - 1): 2 * 9) on line 23: Partially proven\nPost-condition sn == n * 2 || sn == 0 on line 29: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nextern void abort(void);\n#include <assert.h>\n\n#define a (2)\n\nint main() { \n  int i, n=unknown_uint(), sn=0;\n  /*@\n\n\n\nloop invariant sn >= 0;\nloop invariant sn <= 18;\nloop invariant sn == 2 * (i <= 10 ? i - 1 : 9);\n\n\n\nloop invariant sn == 2*(i-1) || (i >= 10 && sn == 18);\nloop invariant sn == (i <= 10 ? 2 * (i - 1) : 2 * 9);\n*/\nfor(i=1; i<=n; i++) {\n    if (i<10)\n    sn = sn + a;\n  }\n  {;//@ assert(sn==n*a || sn == 0);\n}\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant sn >= 0 on line 16: Valid\nInvariant sn <= 18 on line 17: Valid\nInvariant sn == 2 * (i <= 10? i - 1: 9) on line 18: Valid\nInvariant sn == 2 * (i - 1) || (i >= 10 && sn == 18) on line 22: Valid\nInvariant sn == (i <= 10? 2 * (i - 1): 2 * 9) on line 23: Valid\nPost-condition sn == n * 2 || sn == 0 on line 29: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 405,
        "success_rate": 0.5753086419753086
    }
}