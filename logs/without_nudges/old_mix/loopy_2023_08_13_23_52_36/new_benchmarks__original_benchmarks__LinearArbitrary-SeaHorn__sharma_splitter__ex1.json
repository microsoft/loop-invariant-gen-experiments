{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/sharma_splitter/ex1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 50;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant flag == 1 ==> y == -2 && x == 99;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant 0 <= x && x <= 99;\nloop invariant -2 <= y && y <= 50;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 1 ==> y == -2 && x == 99;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 99 on line 9: Unknown\nInvariant -2 <= y <= 50 on line 10: Unknown\nInvariant flag == 0 || flag == 1 on line 11: Partially proven\nInvariant flag == 1 ==> y == -2 && x == 99 on line 12: Unknown\nPost-condition y == -2 on line 27: Partially proven\nPost-condition x == 99 on line 29: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant flag == 0 || flag == 1;\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "Invariant flag == 0 || flag == 1 on line 11: Valid\nPost-condition y == -2 on line 27: Unknown\nPost-condition x == 99 on line 29: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -2;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (x <= 49) ==> (y == x);\n    loop invariant (x >= 50) ==> (y == 98 - x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant x >= 0;\nloop invariant y >= -2;\nloop invariant (flag == 0) || (flag == 1);\nloop invariant (flag == 1) ==> (y == -2);\nloop invariant (x <= 49) ==> (y == x);\nloop invariant (x >= 50) ==> (y == 98 - x);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Invariant x >= 0 on line 9: Partially proven\nInvariant y >= -2 on line 10: Unknown\nInvariant flag == 0 || flag == 1 on line 11: Partially proven\nInvariant flag == 1 ==> y == -2 on line 12: Partially proven\nInvariant x <= 49 ==> y == x on line 13: Partially proven\nInvariant x >= 50 ==> y == 98 - x on line 14: Unknown\nPost-condition y == -2 on line 29: Partially proven\nPost-condition x == 99 on line 31: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant x >= 0;\n\nloop invariant (flag == 0) || (flag == 1);\n\nloop invariant (x <= 49) ==> (y == x);\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "Invariant x >= 0 on line 9: Valid\nInvariant flag == 0 || flag == 1 on line 11: Valid\nInvariant x <= 49 ==> y == x on line 13: Valid\nPost-condition y == -2 on line 29: Unknown\nPost-condition x == 99 on line 31: Unknown\n"
            },
            {
                "invariants": "/*@\n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= x;\n    loop invariant flag == 0 || flag == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant 0 <= x <= 99;\nloop invariant -1 <= y <= x;\nloop invariant flag == 0 || flag == 1;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 99 on line 9: Unknown\nInvariant -1 <= y <= x on line 10: Unknown\nInvariant flag == 0 || flag == 1 on line 11: Partially proven\nPost-condition y == -2 on line 26: Unknown\nPost-condition x == 99 on line 28: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant flag == 0 || flag == 1;\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "Invariant flag == 0 || flag == 1 on line 11: Valid\nPost-condition y == -2 on line 26: Unknown\nPost-condition x == 99 on line 28: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y == x - 2 * (x >= 50 ? x - 50 : 0);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant x >= 0;\nloop invariant y == x - 2 * (x >= 50 ? x - 50 : 0);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Invariant x >= 0 on line 9: Partially proven\nInvariant y == x - 2 * (x >= 50? x - 50: 0) on line 10: Unknown\nPost-condition y == -2 on line 25: Unknown\nPost-condition x == 99 on line 27: Unknown\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant x >= 0;\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "Invariant x >= 0 on line 9: Valid\nPost-condition y == -2 on line 25: Unknown\nPost-condition x == 99 on line 27: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= 50;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant 0 <= x <= 99;\nloop invariant -1 <= y <= 50;\nloop invariant (flag == 0) || (flag == 1);\nloop invariant (flag == 1) ==> (y == -2);\nloop invariant (flag == 1) ==> (x == 99);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "success": false,
                "checker_message": "Invariant 0 <= x <= 99 on line 9: Unknown\nInvariant -1 <= y <= 50 on line 10: Unknown\nInvariant flag == 0 || flag == 1 on line 11: Partially proven\nInvariant flag == 1 ==> y == -2 on line 12: Unknown\nInvariant flag == 1 ==> x == 99 on line 13: Partially proven\nPost-condition y == -2 on line 28: Partially proven\nPost-condition x == 99 on line 30: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant (flag == 0) || (flag == 1);\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
                "checker_message_after_prune": "Invariant flag == 0 || flag == 1 on line 11: Valid\nPost-condition y == -2 on line 28: Unknown\nPost-condition x == 99 on line 30: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       while(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. x = 0\n2. y = 0\n3. flag = 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: flag < 1\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 50;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant flag == 1 ==> y == -2 && x == 99;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x = 0\n- y = 0\n- flag = 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: flag < 1\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -2;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (x <= 49) ==> (y == x);\n    loop invariant (x >= 50) ==> (y == 98 - x);\n*/\n```\n\nThese loop invariants hold throughout the loop execution and ensure that the post conditions `y == -2` and `x == 99` are met."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n1. x = 0;\n2. y = 0;\n3. flag = 0;\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: flag < 1\n\nNow let's output the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= x;\n    loop invariant flag == 0 || flag == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Before analyzing the loop, let's note the pre-conditions and variable assignments:\n\n1. x = 0\n2. y = 0\n3. flag = 0\n\nNow, let's analyze the loop condition and the loop body:\n\n- The loop condition is `flag < 1`.\n- Inside the loop:\n  - If `y < 0`, `flag` is set to 1.\n  - If `flag < 1`, `x` is incremented by 1.\n  - If `x < 50`, `y` is incremented by 1; otherwise, `y` is decremented by 1.\n\nNow, let's find the loop invariants:\n\n1. Loop invariant for the value of `x`:\n   - Before the loop: `x == 0`.\n   - In every iteration: `x` is incremented by 1.\n   - After the loop termination: The post-condition states `x == 99`.\n\n2. Loop invariant for the value of `y`:\n   - Before the loop: `y == 0`.\n   - In every iteration: If `x < 50`, `y` is incremented by 1; otherwise, `y` is decremented by 1.\n   - After the loop termination: The post-condition states `y == -2`.\n\nBased on these observations, we can write the loop invariants as follows:\n\n```c\n/*@ \n    loop invariant x >= 0;\n    loop invariant y == x - 2 * (x >= 50 ? x - 50 : 0);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- x is initialized to 0.\n- y is initialized to 0.\n- flag is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n- The loop condition is `flag < 1`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= 50;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= x && x <= 99;\n    loop invariant -2 <= y && y <= 50;\n    loop invariant flag == 0 || flag == 1;\n    loop invariant flag == 1 ==> y == -2 && x == 99;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= -2;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (x <= 49) ==> (y == x);\n    loop invariant (x >= 50) ==> (y == 98 - x);\n*/",
            "/*@\n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= x;\n    loop invariant flag == 0 || flag == 1;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y == x - 2 * (x >= 50 ? x - 50 : 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 99;\n    loop invariant -1 <= y <= 50;\n    loop invariant (flag == 0) || (flag == 1);\n    loop invariant (flag == 1) ==> (y == -2);\n    loop invariant (flag == 1) ==> (x == 99);\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\nloop invariant 0 <= x && x <= 99;\nloop invariant -2 <= y && y <= 50;\nloop invariant flag == 0 || flag == 1;\nloop invariant flag == 1 ==> y == -2 && x == 99;\nloop invariant x >= 0;\nloop invariant y >= -2;\nloop invariant (flag == 0) || (flag == 1);\nloop invariant (flag == 1) ==> (y == -2);\nloop invariant (x <= 49) ==> (y == x);\nloop invariant (x >= 50) ==> (y == 98 - x);\nloop invariant 0 <= x <= 99;\nloop invariant -1 <= y <= x;\nloop invariant y == x - 2 * (x >= 50 ? x - 50 : 0);\nloop invariant -1 <= y <= 50;\nloop invariant (flag == 1) ==> (x == 99);\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant 0 <= x <= 99 on line 9: Partially proven\nInvariant -2 <= y <= 50 on line 10: Partially proven\nInvariant flag == 0 || flag == 1 on line 11: Partially proven\nInvariant flag == 1 ==> y == -2 && x == 99 on line 12: Partially proven\nInvariant x >= 0 on line 13: Partially proven\nInvariant y >= -2 on line 14: Partially proven\nInvariant flag == 0 || flag == 1 on line 15: Partially proven\nInvariant flag == 1 ==> y == -2 on line 16: Partially proven\nInvariant x <= 49 ==> y == x on line 17: Partially proven\nInvariant x >= 50 ==> y == 98 - x on line 18: Partially proven\nInvariant 0 <= x <= 99 on line 19: Partially proven\nInvariant -1 <= y <= x on line 20: Partially proven\nInvariant y == x - 2 * (x >= 50? x - 50: 0) on line 21: Unknown\nInvariant -1 <= y <= 50 on line 22: Partially proven\nInvariant flag == 1 ==> x == 99 on line 23: Partially proven\nPost-condition y == -2 on line 38: Partially proven\nPost-condition x == 99 on line 40: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(){\n       int x, y, flag;\n       x=0;\n       y=0;\n       flag=0;\n       /*@\n\n\nloop invariant flag == 0 || flag == 1;\n\nloop invariant x >= 0;\n\nloop invariant (flag == 0) || (flag == 1);\n\nloop invariant (x <= 49) ==> (y == x);\n\n\n\n\n\n\n*/\nwhile(flag<1) {\n               if (y<0){\n                        flag=1;\n               }\n               if(flag<1) \n                        x=x+1;\n               \n               if (x<50) \n                       y=y+1;\n               else\n                       y=y-1;\n               \n       }\n\t{;//@ assert(y==-2);\n}\n\t{;//@ assert(x==99);\n}\n\treturn 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "Invariant flag == 0 || flag == 1 on line 11: Valid\nInvariant x >= 0 on line 13: Valid\nInvariant flag == 0 || flag == 1 on line 15: Valid\nInvariant x <= 49 ==> y == x on line 17: Valid\nPost-condition y == -2 on line 38: Unknown\nPost-condition x == 99 on line 40: Unknown\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 252,
        "success_rate": 0.5277777777777778
    }
}