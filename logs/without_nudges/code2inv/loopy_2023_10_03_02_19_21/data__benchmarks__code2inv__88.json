{
    "logs": {
        "file": "../data/benchmarks/code2inv/88.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant y == x + 1 || (lock == 0 && y == x + 2);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || (lock == 0 && y == x + 2);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y == x + 1 || (lock == 0 && y == x + 2) is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (y == x + 1) || (y > x);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: (y == x + 1) || (y > x);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant (y == x + 1) || (y > x) is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "@{\n    loop invariant y == x + 1 || (y > x && lock == 0);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || (y > x && lock == 0);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y == x + 1 || (y > x && lock == 0) is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (y == x + 1) || (lock == 0);\n    loop invariant (lock == 0) || (lock == 1);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: (y == x + 1) || (lock == 0);\nloop invariant i2: (lock == 0) || (lock == 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant (y == x + 1) || (lock == 0) is established but not preserved.\nloop invariant (lock == 0) || (lock == 1) is inductive.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: (lock == 0) || (lock == 1);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant (lock == 0) || (lock == 1) is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (y == (x + 1)) || (lock == 1 && y == x);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: (y == (x + 1)) || (lock == 1 && y == x);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": true,
                "checker_message": "loop invariant (y == (x + 1)) || (lock == 1 && y == x) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant (y == x + 1) || (y == x);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: (lock == 0) || (lock == 1);\nloop invariant i2: (y == x + 1) || (y == x);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant (lock == 0) || (lock == 1) is inductive.\nloop invariant (y == x + 1) || (y == x) is inductive.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: (lock == 0) || (lock == 1);\nloop invariant i2: (y == x + 1) || (y == x);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant (lock == 0) || (lock == 1) is inductive.\nloop invariant (y == x + 1) || (y == x) is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x <= y;\n    loop invariant y >= 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: x <= y;\nloop invariant i2: y >= 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant x <= y is inductive.\nloop invariant y >= 1 is preserved but not established.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: x <= y;\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant x <= y is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant y == x + 1 || (lock == 0 && y > x);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || (lock == 0 && y > x);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y == x + 1 || (lock == 0 && y > x) is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant y == x + 1 || lock == 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || lock == 1;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": true,
                "checker_message": "loop invariant y == x + 1 || lock == 1 is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant y == x + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (lock == 1) ==> (x == y);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1;\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: (lock == 1) ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y == x + 1 is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (lock == 1) ==> (x == y) is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: (lock == 1) ==> (x == y);\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (lock == 1) ==> (x == y) is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "@{\n    loop invariant y >= x;\n    loop invariant lock == 0 || lock == 1;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y >= x;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y >= x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y >= x;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant y >= x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant x <= y;\n    loop invariant lock == 1 ==> x == y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: x <= y;\nloop invariant i3: lock == 1 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant lock == 0 || lock == 1 is inductive.\nloop invariant x <= y is inductive.\nloop invariant lock == 1 ==> x == y is inductive.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: lock == 0 || lock == 1;\nloop invariant i2: x <= y;\nloop invariant i3: lock == 1 ==> x == y;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nloop invariant x <= y is inductive.\nloop invariant lock == 1 ==> x == y is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant y >= x + 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y >= x + 1;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y >= x + 1 is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant y == x + 1 || y == x;\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || y == x;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": false,
                "checker_message": "loop invariant y == x + 1 || y == x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || y == x;\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "checker_message_after_prune": "loop invariant y == x + 1 || y == x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant y == x + 1 || (y >= x && lock == 1);\n    loop invariant lock == 0 || lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || (y >= x && lock == 1);\nloop invariant i2: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
                "success": true,
                "checker_message": "loop invariant y == x + 1 || (y >= x && lock == 1) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  while ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- y = x + 1\n- lock = 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: x != y\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. The loop invariants should imply the post-condition: lock == 1.\n\n```\n/*@ \n    loop invariant y == x + 1 || (lock == 0 && y == x + 2);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `y = x + 1`\n- `lock = 0`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `x != y`\n- Inside the loop, there are two branches:\n  - If `unknown()` is true, then `lock = 1` and `x = y`\n  - If `unknown()` is false, then `lock = 0`, `x = y`, and `y = y + 1`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant (y == x + 1) || (y > x);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- y is assigned (x + 1)\n- lock is assigned 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is (x != y)\n\nNow, let's find the necessary loop invariants:\n- Before the loop execution, y = x + 1 and lock = 0\n- In every iteration of the loop:\n  - If unknown() is true, lock = 1 and x = y\n  - If unknown() is false, lock = 0, x = y, and y = y + 1\n- After the loop termination, x == y, which means the loop terminates when lock = 1.\n\nWith these observations, we can write the following loop invariants:\n```\n@{\n    loop invariant y == x + 1 || (y > x && lock == 0);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. `int lock;`\n2. `int x;`\n3. `int y;`\n4. `(y = (x + 1));`\n5. `(lock = 0);`\n\nNext, analyze the loop body and make a note of the loop condition:\n`while ((x != y))`\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant (y == x + 1) || (lock == 0);\n    loop invariant (lock == 0) || (lock == 1);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are not initialized but y is assigned the value (x + 1).\n- lock is assigned 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x != y).\n\nHere are the loop invariants for the while loop:\n```\n/*@ \n    loop invariant (y == (x + 1)) || (lock == 1 && y == x);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the initial variable assignments:\n- y = x + 1\n- lock = 0\n\nNext, analyze the loop body and note the loop condition:\n- Loop condition: x != y\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@\n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant (y == x + 1) || (y == x);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, note the initial variable assignments and pre-conditions:\n- y = x + 1\n- lock = 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: x != y\n\nNow, output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant y >= 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. `y = (x + 1);`\n2. `lock = 0;`\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x != y`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `lock` is 0, and `y = x + 1`.\n2. In every iteration of the loop, the value of `x` is set to `y`, and either `lock` is set to 1, or `lock` is set to 0 and `y` is incremented by 1.\n3. After the loop termination, the value of `x` is equal to `y`, and `lock` is 1.\n\nBased on the above information, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant y == x + 1 || (lock == 0 && y > x);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n- `int lock;`\n- `int x;`\n- `int y;`\n- `y = (x + 1);`\n- `lock = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\n- `while (x != y)`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant y == x + 1 || lock == 1;\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and preconditions before the loop:\n\n1. y = x + 1\n2. lock = 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: x != y\n\nNow, let's find the necessary loop invariants of the while loop:\n\n1. Before the loop execution: y = x + 1 and lock = 0\n2. In every iteration of the loop: \n   - If unknown() is true, lock = 1 and x = y\n   - If unknown() is false, lock = 0, x = y, and y = y + 1\n3. After the loop termination: x == y\n\nNow, let's express these invariants in ACSL notation:\n\n```\n/*@ \n    loop invariant y == x + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (lock == 1) ==> (x == y);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- y is assigned the value of (x + 1) before entering the loop.\n- lock is assigned the value of 0 before entering the loop.\n\nNext, let's analyze the loop body and the loop condition:\n- The loop condition is (x != y).\n- In the loop body, there are two cases depending on the result of the unknown() function call:\n  1. If unknown() is true, lock is assigned the value of 1, and x is assigned the value of y.\n  2. If unknown() is false, lock is assigned the value of 0, x is assigned the value of y, and y is incremented by 1.\n\nNow, let's find the necessary loop invariants for the while loop:\n1. Loop invariant: The value of y is always greater than or equal to the value of x.\n2. Loop invariant: The value of lock is either 0 or 1.\n\nThe loop invariants are:\n```\n@{\n    loop invariant y >= x;\n    loop invariant lock == 0 || lock == 1;\n}\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n1. `int lock;`\n2. `int x;`\n3. `int y;`\n4. `(y = (x + 1));`\n5. `(lock = 0);`\n\nNext, we analyze the loop body and make a note of the loop condition:\n- Loop condition: `while ((x != y))`\n\nNow, let's find the loop invariants:\n\n1. `lock` is either 0 or 1.\n2. `x` is always less than or equal to `y`.\n3. When `lock` is 1, `x` is equal to `y`.\n\nWith these invariants, we can write the loop invariants in ACSL annotations:\n\n```c\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant x <= y;\n    loop invariant lock == 1 ==> x == y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- y = x + 1\n- lock = 0\n\nLoop condition:\n- x != y\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant y >= x + 1;\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, we note the variable assignments and pre-conditions in the program:\n\n- `y = x + 1`\n- `lock = 0`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x != y`\n\nFinally, we can state the loop invariants that are true before the loop execution, in every iteration, and after the loop termination:\n\n```\n/*@ \n    loop invariant y == x + 1 || y == x;\n    loop invariant lock == 0 || lock == 1;\n*/\n```\n\nThese invariants hold at the beginning of the loop, during its execution, and after its termination, implying the post-condition `(lock == 1)`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `int lock;`\n2. `int x;`\n3. `int y;`\n4. `(y = (x + 1));`\n5. `(lock = 0);`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n`while ((x != y))`\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@\n    loop invariant y == x + 1 || (y >= x && lock == 1);\n    loop invariant lock == 0 || lock == 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant y == x + 1 || (lock == 0 && y == x + 2);\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant (y == x + 1) || (y > x);\n    loop invariant lock == 0 || lock == 1;\n*/",
            "@{\n    loop invariant y == x + 1 || (y > x && lock == 0);\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant (y == x + 1) || (lock == 0);\n    loop invariant (lock == 0) || (lock == 1);\n*/",
            "/*@ \n    loop invariant (y == (x + 1)) || (lock == 1 && y == x);\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@\n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant (y == x + 1) || (y == x);\n*/",
            "/*@ \n    loop invariant x <= y;\n    loop invariant y >= 1;\n*/",
            "/*@ \n    loop invariant y == x + 1 || (lock == 0 && y > x);\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant y == x + 1 || lock == 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant y == x + 1;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant (lock == 1) ==> (x == y);\n*/",
            "@{\n    loop invariant y >= x;\n    loop invariant lock == 0 || lock == 1;\n}",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant x <= y;\n    loop invariant lock == 1 ==> x == y;\n*/",
            "/*@ \n    loop invariant y >= x + 1;\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@ \n    loop invariant y == x + 1 || y == x;\n    loop invariant lock == 0 || lock == 1;\n*/",
            "/*@\n    loop invariant y == x + 1 || (y >= x && lock == 1);\n    loop invariant lock == 0 || lock == 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\nloop invariant i1: y == x + 1 || (lock == 0 && y == x + 2);\nloop invariant i2: lock == 0 || lock == 1;\nloop invariant i3: (y == x + 1) || (y > x);\nloop invariant i4: lock == 0 || lock == 1;\nloop invariant i5: y == x + 1 || (y > x && lock == 0);\nloop invariant i6: lock == 0 || lock == 1;\nloop invariant i7: (y == x + 1) || (lock == 0);\nloop invariant i8: (lock == 0) || (lock == 1);\nloop invariant i9: (y == (x + 1)) || (lock == 1 && y == x);\nloop invariant i10: lock == 0 || lock == 1;\nloop invariant i11: (lock == 0) || (lock == 1);\nloop invariant i12: (y == x + 1) || (y == x);\nloop invariant i13: x <= y;\nloop invariant i14: y >= 1;\nloop invariant i15: y == x + 1 || (lock == 0 && y > x);\nloop invariant i16: lock == 0 || lock == 1;\nloop invariant i17: y == x + 1 || lock == 1;\nloop invariant i18: lock == 0 || lock == 1;\nloop invariant i19: y == x + 1;\nloop invariant i20: lock == 0 || lock == 1;\nloop invariant i21: (lock == 1) ==> (x == y);\nloop invariant i22: y >= x;\nloop invariant i23: lock == 0 || lock == 1;\nloop invariant i24: lock == 0 || lock == 1;\nloop invariant i25: x <= y;\nloop invariant i26: lock == 1 ==> x == y;\nloop invariant i27: y >= x + 1;\nloop invariant i28: lock == 0 || lock == 1;\nloop invariant i29: y == x + 1 || y == x;\nloop invariant i30: lock == 0 || lock == 1;\nloop invariant i31: y == x + 1 || (y >= x && lock == 1);\nloop invariant i32: lock == 0 || lock == 1;\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
        "checker_output": false,
        "checker_message": "loop invariant y == x + 1 || (lock == 0 && y == x + 2) is established but not preserved.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (y == x + 1) || (y > x) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant y == x + 1 || (y > x && lock == 0) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (y == x + 1) || (lock == 0) is inductive.\nloop invariant (lock == 0) || (lock == 1) is inductive.\nloop invariant (y == (x + 1)) || (lock == 1 && y == x) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (lock == 0) || (lock == 1) is inductive.\nloop invariant (y == x + 1) || (y == x) is inductive.\nloop invariant x <= y is inductive.\nloop invariant y >= 1 is preserved but not established.\nloop invariant y == x + 1 || (lock == 0 && y > x) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant y == x + 1 || lock == 1 is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant y == x + 1 is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (lock == 1) ==> (x == y) is inductive.\nloop invariant y >= x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant x <= y is inductive.\nloop invariant lock == 1 ==> x == y is inductive.\nloop invariant y >= x + 1 is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant y == x + 1 || y == x is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nloop invariant y == x + 1 || (y >= x && lock == 1) is inductive.\nloop invariant lock == 0 || lock == 1 is inductive.\nAssertion lock == 1: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int lock;\n  int x;\n  int y;\n  \n  (y = (x + 1));\n  (lock = 0);\n  \n  /*@\n\nloop invariant i2: lock == 0 || lock == 1;\n\n\n\nloop invariant i8: (lock == 0) || (lock == 1);\nloop invariant i9: (y == (x + 1)) || (lock == 1 && y == x);\n\nloop invariant i13: x <= y;\n\n\n\n\nloop invariant i21: (lock == 1) ==> (x == y);\nloop invariant i22: y >= x;\nloop invariant i26: lock == 1 ==> x == y;\n\n\n\n*/\nwhile ((x != y)) {\n    {\n      if ( unknown() ) {\n        {\n        (lock  = 1);\n        (x  = y);\n        }\n      } else {\n        {\n        (lock  = 0);\n        (x  = y);\n        (y  = (y + 1));\n        }\n      }\n\n    }\n\n  }\n  \n{;\n//@ assert( (lock == 1) );\n}\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant lock == 0 || lock == 1 is inductive.\nloop invariant (lock == 0) || (lock == 1) is inductive.\nloop invariant (y == (x + 1)) || (lock == 1 && y == x) is inductive.\nloop invariant x <= y is inductive.\nloop invariant (lock == 1) ==> (x == y) is inductive.\nloop invariant y >= x is inductive.\nloop invariant lock == 1 ==> x == y is inductive.\nAssertion lock == 1: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            9,
            11,
            13,
            15,
            17,
            19,
            21,
            24,
            29,
            34,
            35,
            36,
            37,
            38,
            39,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            57,
            59,
            70,
            72,
            73,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            86,
            87
        ],
        "failure": [
            8,
            10,
            12,
            14,
            16,
            18,
            20,
            22,
            23,
            25,
            26,
            27,
            28,
            30,
            31,
            32,
            33,
            40,
            45,
            55,
            56,
            58,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            71,
            74,
            82,
            83,
            84,
            85
        ],
        "skipped": [],
        "total": 88,
        "success_rate": 0.5681818181818182
    }
}