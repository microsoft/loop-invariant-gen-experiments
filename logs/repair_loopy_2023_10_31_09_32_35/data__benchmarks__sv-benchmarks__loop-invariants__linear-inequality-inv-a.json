{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: i <= n ==> 0 <= s + v <= 65025;\nloop invariant i5: s >= i * 255 ==> n == i;\nloop invariant i6: s < i * 255 ==> n > i;\nloop invariant i7: s >= i * v;\nloop invariant i8: 0 <= i && i <= n;\nloop invariant i9: 0 <= s && s <= 65025;\nloop invariant i10: 0 <= v && v <= 255;\nloop invariant i11: 0 <= s;\nloop invariant i12: s <= i * 255;\nloop invariant i13: i <= n;\nloop invariant i14: s <= 255 * i;\nloop invariant i15: i <= n ==> s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
            "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: s >= i * 255 ==> n == i;\nloop invariant i5: s < i * 255 ==> n > i;\nloop invariant i6: 0 <= s;\nloop invariant i7: i <= n;\nloop invariant i8: s <= 255 * i;\nloop invariant i9: i <= n ==> s <= i * 255;\nloop invariant i10: s >= i * v;\nloop invariant i11: s <= i * 255;\nloop invariant i12: s >= i*v_min ==> s >= i;\nloop invariant i13: s <= i*v_max ==> s <= i*255;\nloop invariant i14: 0 <= i && i <= n;\nloop invariant i15: 0 <= v && v <= s;\nloop invariant i16: i <= n ==> 0 <= s + v <= 65025;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c"
        ],
        "total": 6,
        "gen_success_count": 1,
        "repair_success_count": 0,
        "repair_failure_count": 6,
        "gen_skipped_count": 0,
        "repair_skipped_count": 2
    }
}