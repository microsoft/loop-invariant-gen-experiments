{
    "logs": {
        "file": "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   while( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
        "success": true,
        "repair_tries": [],
        "candidates": [
            "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: a >= 0 && b >= 0;\nloop invariant i3: a + b == 3 * i;\nloop invariant i4: 0 <= a <= 2*n;\nloop invariant i5: 0 <= b <= 2*n;\nloop invariant i6: a + b == 3*i;\nloop invariant i7: 0 <= a <= 2 * i;\nloop invariant i8: 0 <= b <= 2 * i;\nloop invariant i9: 0 <= a <= 2 * n;\nloop invariant i10: 0 <= b <= 2 * n;\nloop invariant i11: 0 <= i && i <= n;\nloop invariant i12: 0 <= a && a <= 2*n;\nloop invariant i13: 0 <= b && b <= 2*n;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}",
            "#define assume(e) if(!(e)) return;\nextern int unknown_int(void);\n\n;\n\nvoid main(){\n\n   int i, n, a, b;\n   n = unknown_int();\n   assume( n>= 0 );\n\n   i = 0; \n   a = 0; \n   b = 0;\n\n   /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= a <= 2*n;\nloop invariant i3: 0 <= b <= 2*n;\nloop invariant i4: a + b == 3*i;\nloop invariant i5: 0 <= a <= 2*i;\nloop invariant i6: 0 <= b <= 2*i;\nloop invariant i7: 0 <= i && i <= n;\nloop invariant i8: 0 <= a && a <= 2*n;\nloop invariant i9: 0 <= b && b <= 2*n;\nloop invariant i10: a >= 0 && b >= 0;\nloop invariant i11: a + b == 3 * i;\nloop invariant i12: a >= 0;\nloop invariant i13: b >= 0;\nloop invariant i14: 0 <= a <= 2 * i;\nloop invariant i15: 0 <= b <= 2 * i;\n*/\nwhile( i < n ){\n      if(unknown_int()) {\n         a = a+1;\n         b = b+2;\n      } else {\n         a = a+2;\n         b = b+1;\n      }\n      i = i+1;\n   }\n\n   if ( a+b != 3*n)\n      goto ERROR;\n\nreturn;\n\n{ ERROR: {; \n//@ assert(\\false);\n}\n}\n}"
        ]
    },
    "stats": {
        "gen_success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1.c",
            "../data/benchmarks/LinearArbitrary-SeaHorn/VeriMAP/MAP-forward_VeriMAP_true.c"
        ],
        "repair_success": [],
        "repair_failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-1.c"
        ],
        "gen_skipped": [],
        "repair_skipped": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c"
        ],
        "total": 8,
        "gen_success_count": 3,
        "repair_success_count": 0,
        "repair_failure_count": 8,
        "gen_skipped_count": 0,
        "repair_skipped_count": 2
    }
}