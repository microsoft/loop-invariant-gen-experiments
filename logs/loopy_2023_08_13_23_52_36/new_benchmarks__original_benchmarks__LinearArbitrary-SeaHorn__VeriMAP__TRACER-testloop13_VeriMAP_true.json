{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop13_VeriMAP_true.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant old + 1 <= new;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> new == old;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old + 1 <= new;\nloop invariant lock == 0 || lock == 1;\nloop invariant lock == 1 ==> new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant old + 1 <= new on line 17: Unknown\nInvariant lock == 0 || lock == 1 on line 18: Partially proven\nInvariant lock == 1 ==> new == old on line 19: Partially proven\nPost-condition !(lock == 0) on line 30: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant lock == 0 || lock == 1;\nloop invariant lock == 1 ==> new == old;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 0 || lock == 1 on line 18: Valid\nInvariant lock == 1 ==> new == old on line 19: Valid\nPost-condition !(lock == 0) on line 30: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new >= old + 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant (lock == 0) || (lock == 1);\nloop invariant new >= old;\nloop invariant new == old + 1 || new >= old + 2;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant lock == 0 || lock == 1 on line 17: Partially proven\nInvariant new >= old on line 18: Partially proven\nInvariant new == old + 1 || new >= old + 2 on line 19: Unknown\nPost-condition !(lock == 0) on line 30: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant (lock == 0) || (lock == 1);\nloop invariant new >= old;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 0 || lock == 1 on line 17: Valid\nInvariant new >= old on line 18: Valid\nPost-condition !(lock == 0) on line 30: Unknown\n"
            },
            {
                "invariants": "/*@ \n    loop invariant new != old ==> lock == 1;\n    loop invariant new == old ==> lock == 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant new != old ==> lock == 1;\nloop invariant new == old ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant new != old ==> lock == 1 on line 17: Unknown\nInvariant new == old ==> lock == 1 on line 18: Partially proven\nPost-condition !(lock == 0) on line 29: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant new == old ==> lock == 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant new == old ==> lock == 1 on line 18: Valid\nPost-condition !(lock == 0) on line 29: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant \\forall integer k; 0 <= k <= 1 ==> lock == k;\n  loop invariant new >= old + 1;\n  loop invariant (new - old - 1) % 2 == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant \\forall integer k; 0 <= k <= 1 ==> lock == k;\nloop invariant new >= old + 1;\nloop invariant (new - old - 1) % 2 == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant \\forall integer k; 0 <= k <= 1 ==> lock == k on line 17: Unknown\nInvariant new >= old + 1 on line 18: Partially proven\nInvariant ((new - old) - 1) % 2 == 0 on line 19: Partially proven\nPost-condition !(lock == 0) on line 30: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant lock == 0 || lock == 1;\nloop invariant new >= old + 1;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "Invariant lock == 0 || lock == 1 on line 17: Partially proven\nInvariant new >= old + 1 on line 18: Unknown\nPost-condition !(lock == 0) on line 29: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant lock == 0 || lock == 1;\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
                "checker_message_after_prune": "Invariant lock == 0 || lock == 1 on line 17: Valid\nPost-condition !(lock == 0) on line 29: Unknown\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  while (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `old` is assigned an unknown unsigned integer value.\n2. `lock` is assigned the value 0.\n3. `new` is assigned the value `old + 1`.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: `new != old`\n\nNow let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant old + 1 <= new;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> new == old;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition `!(lock == 0)`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int lock, old, new;`\n- `old = unknown_uint();`\n- `lock = 0;`\n- `new = old + 1;`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `new != old`\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new >= old + 2;\n*/\n```\n\nThese invariants hold before the loop execution, during every iteration, and after loop termination, such that they imply the post condition `(!(lock == 0))`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program:\n\nPre-conditions:\n1. `old` is initialized with an unknown unsigned integer value.\n2. `lock` is initialized to 0.\n3. `new` is initialized to `old + 1`.\n\nLoop condition: `new != old`.\n\nNow let's find the loop invariants:\n\n1. `lock` is always 1 before the condition `if (unknown())` in every iteration.\n2. Whenever the `if (unknown())` condition is true, `lock` is set to 0 and `new` is incremented by 2.\n3. If the loop terminates, it means `new == old`, and `lock` must be 1.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant new != old ==> lock == 1;\n    loop invariant new == old ==> lock == 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- old is assigned an unknown unsigned integer value.\n- lock is initialized to 0.\n- new is assigned the value of old + 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is \"new != old\".\n- Inside the loop, lock is set to 1, old is set to new, and if the unknown() function returns a non-zero value, lock is set to 0 and new is incremented by 2.\n\nHere are the necessary loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant \\forall integer k; 0 <= k <= 1 ==> lock == k;\n  loop invariant new >= old + 1;\n  loop invariant (new - old - 1) % 2 == 0;\n*/\n```\n\nThese invariants are true:\n\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\n\nand they imply the post-condition \"!(lock == 0)\"."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. old is assigned an unknown unsigned integer value.\n2. lock is initialized to 0.\n3. new is assigned the value of old + 1.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is new != old.\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution: `lock` is 0.\n2. In every iteration of the loop: \n   a. If `unknown()` returns non-zero, then `lock` is set to 0 and `new` is incremented by 2.\n   b. If `unknown()` returns 0, then `lock` is set to 1.\n3. After the loop termination: `new == old` and `lock` must be 1.\n\nWith this information, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old + 1;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant old + 1 <= new;\n    loop invariant lock == 0 || lock == 1;\n    loop invariant lock == 1 ==> new == old;\n*/",
            "/*@ \n    loop invariant (lock == 0) || (lock == 1);\n    loop invariant new >= old;\n    loop invariant new == old + 1 || new >= old + 2;\n*/",
            "/*@ \n    loop invariant new != old ==> lock == 1;\n    loop invariant new == old ==> lock == 1;\n*/",
            "/*@ \n  loop invariant \\forall integer k; 0 <= k <= 1 ==> lock == k;\n  loop invariant new >= old + 1;\n  loop invariant (new - old - 1) % 2 == 0;\n*/",
            "/*@ \n    loop invariant lock == 0 || lock == 1;\n    loop invariant new >= old + 1;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\nloop invariant old + 1 <= new;\nloop invariant lock == 0 || lock == 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant (lock == 0) || (lock == 1);\nloop invariant new >= old;\nloop invariant new == old + 1 || new >= old + 2;\nloop invariant new != old ==> lock == 1;\nloop invariant new == old ==> lock == 1;\nloop invariant \\forall integer k; 0 <= k <= 1 ==> lock == k;\nloop invariant new >= old + 1;\nloop invariant (new - old - 1) % 2 == 0;\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "Invariant old + 1 <= new on line 17: Partially proven\nInvariant lock == 0 || lock == 1 on line 18: Partially proven\nInvariant lock == 1 ==> new == old on line 19: Partially proven\nInvariant lock == 0 || lock == 1 on line 20: Partially proven\nInvariant new >= old on line 21: Partially proven\nInvariant new == old + 1 || new >= old + 2 on line 22: Partially proven\nInvariant new != old ==> lock == 1 on line 23: Unknown\nInvariant new == old ==> lock == 1 on line 24: Partially proven\nInvariant \\forall integer k; 0 <= k <= 1 ==> lock == k on line 25: Partially proven\nInvariant new >= old + 1 on line 26: Partially proven\nInvariant ((new - old) - 1) % 2 == 0 on line 27: Partially proven\nPost-condition !(lock == 0) on line 38: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint unknown(){int x; return x;}\n\nvoid errorFn() {ERROR: goto ERROR;}\n\nint main()\n{\n  int lock, old, new;\n  old = unknown_uint();\n  lock=0;\n  new=old+1;\n\n  /*@\n\nloop invariant lock == 0 || lock == 1;\nloop invariant lock == 1 ==> new == old;\nloop invariant (lock == 0) || (lock == 1);\nloop invariant new >= old;\n\n\nloop invariant new == old ==> lock == 1;\n\n\n\n*/\nwhile (new != old) {\n    lock = 1;\n    old = new;\n    if (unknown()) {\n      lock = 0;\n      new+=2;\n    }\n  }\n\n  {;//@ assert(!( lock==0 ));\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "Invariant lock == 0 || lock == 1 on line 18: Valid\nInvariant lock == 1 ==> new == old on line 19: Valid\nInvariant lock == 0 || lock == 1 on line 20: Valid\nInvariant new >= old on line 21: Valid\nInvariant new == old ==> lock == 1 on line 24: Valid\nPost-condition !(lock == 0) on line 38: Valid\n"
    },
    "stats": {
        "success": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "failure": [
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4,
            4
        ],
        "skipped": [
            0,
            0
        ],
        "total": 262,
        "success_rate": 0.5419847328244275
    }
}