{
    "logs": {
        "file": [
            "../data/new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/VeriMAP/TRACER-testloop2_VeriMAP_true.c",
            {
                "code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
            },
            {
                "role": "user",
                "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  while (i<N){\n    i=i+1;\n  }\n\n  {;//@ assert(!( x >2 ));\n}\n  return;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of a single statement: `i=i+1;`. This statement updates the value of `i` by adding 1 to it.\n\nLoop Condition:\nThe loop condition is `i<N`. This condition checks if the value of `i` is less than `N`.\n\nLoop Invariants:\n\n1. The loop invariant for the while loop is `i <= N`. This invariant is true before the loop execution, in every iteration of the loop, and after the loop termination.\n2. The loop invariant `i >= 0` is also true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nNote that we cannot use the variable `x` as a loop invariant because it is not defined in the loop body.\n\nTherefore, the loop invariants for the while loop in the given program are:\n```\n/*@\n  loop invariant i <= N;\n  loop invariant i >= 0;\n*/\n```\nThese loop invariants imply the post-condition `! (x > 2)`, which is the desired property that we want to verify."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\nThe loop body is executed as long as the condition `i<N` is true. The loop body consists of a single statement: `i=i+1;`.\n\nThe loop condition is `i<N`.\n\nFrom the loop body and the loop condition, we can deduce the following loop invariants:\n\n1. Before the loop execution, `i` is less than or equal to `N`.\n2. In every iteration of the loop, `i` is less than or equal to `N`.\n3. After the loop termination, `i` is equal to `N`.\n\nTo express these loop invariants in ACSL annotations, we can use the following code block:\n```\n/*@\n    loop invariant i <= N;\n    loop invariant i < N;\n    loop invariant i == N;\n*/\n```\nNote that we have used the less-than-or-equal-to (`<=`) and equality (`==`) operators to express the loop invariants. These operators are supported in ACSL annotations for loops.\n\nAlso, we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also avoided using non-deterministic function calls."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants, we need to analyze the loop body and the loop condition. The loop body consists of a single statement:\n```\ni=i+1;\n```\nThis statement increments the value of `i` by 1. The loop condition is `i<N`.\n\nBased on the loop body and the loop condition, we can identify the following loop invariants:\n\n(i) Before the loop execution, the value of `i` is less than `N`. This is because the loop condition is `i<N`, and the loop body increments the value of `i` by 1.\n\n(ii) In every iteration of the loop, the value of `i` is less than `N`. This is because the loop condition is `i<N`, and the loop body increments the value of `i` by 1.\n\n(iii) After the loop termination, the value of `i` is equal to `N`. This is because the loop condition is `i<N`, and the loop body increments the value of `i` by 1 until it reaches `N`.\n\nTherefore, the loop invariants for the loop in the program are:\n```\n/*@\n    loop invariant i < N;\n    loop invariant i <= N;\n    loop invariant i == N;\n*/\n```\nNote that the loop invariants are expressed as ACSL annotations, which are used by Frama-C to verify the properties of the program. The loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, respectively."
            },
            {
                "role": "assistant",
                "content": " The program above has a single loop, which is the while loop that iterates over the variable `i` as long as it is less than `N`. The loop body consists of a single statement, which is an increment of `i` by 1.\n\nTo find the loop invariants, we need to analyze the loop body and the loop condition. The loop body is simple, it just increments `i` by 1. The loop condition is `i < N`, which means that the loop will continue to iterate as long as `i` is less than `N`.\n\nBased on this analysis, we can identify three loop invariants for the loop:\n\n1. Before the loop execution, `i` is equal to 0.\n2. In every iteration of the loop, `i` is less than `N`.\n3. After the loop termination, `i` is equal to `N`.\n\nThese loop invariants are necessary to verify the post-condition of the loop, which is `!(x > 2)`.\n\nHere is the code block that contains the loop invariants:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/\n```\nNote that we have used the `==` operator to represent equality between variables, and the `!` operator to represent negation."
            },
            {
                "role": "assistant",
                "content": " Sure, I can help you with that.\n\nFirst, let's identify the loop in the program. The loop is the `while` loop with the condition `i < N`.\n\nNext, let's identify the loop invariants. A loop invariant is a condition that is true before the loop starts, remains true during each iteration of the loop, and is still true after the loop terminates.\n\nIn this case, we can identify two loop invariants:\n\n1. `i >= 0`\n2. `N > 0`\n\nThese loop invariants are true before the loop starts, remain true during each iteration of the loop, and are still true after the loop terminates.\n\nTo prove that these loop invariants imply the post-condition `x > 2`, we need to show that if the loop invariants are true, then the post-condition must also be true.\n\nLet's assume that the loop invariants `i >= 0` and `N > 0` are true. We can see that the loop body increments `i` by 1 in each iteration, so after the loop terminates, we have `i = N`.\n\nSince `N > 0`, we know that `N >= 2`. Therefore, we have `i >= 2`.\n\nNow, let's consider the post-condition `x > 2`. We can see that the loop body does not modify the value of `x`, so the value of `x` after the loop terminates is the same as it was before the loop started.\n\nSince `x` was initialized to either 1 or 2, we know that `x` is either 1 or 2 after the loop terminates.\n\nTherefore, we have shown that if the loop invariants `i >= 0` and `N > 0` are true, then the post-condition `x > 2` must also be true.\n\nSo, the necessary loop invariants to help Frama-C verify the post-condition `x > 2` are `i >= 0` and `N > 0`."
            },
            {
                "role": "assistant",
                "content": " Sure, I can help you with that.\n\nTo find the loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of a single statement: `i=i+1;`. This statement increments the variable `i` by 1.\n\nThe loop condition is `i<N`. This condition checks whether the variable `i` is less than the variable `N`.\n\nNow, let's think about the loop invariants. A loop invariant is a condition that remains true before, during, and after the loop execution. In other words, it is a condition that is preserved throughout the loop.\n\nFrom the loop body and the loop condition, we can identify two loop invariants:\n\n1. `i` is less than or equal to `N`\n2. `x` is equal to 1 or 2\n\nThese loop invariants can be written in ACSL annotations as follows:\n```\n/*@ loop invariant i <= N;\n    loop invariant x == 1 || x == 2;\n*/\n```\nNote that the loop invariants should be true before the loop execution, during each iteration of the loop, and after the loop termination. Also, the loop invariants should imply the post-condition of the loop.\n\nIn this case, the loop invariants imply that the post-condition `! (x > 2)` is true, which is the desired outcome.\n\nI hope this helps! Let me know if you have any questions or need further clarification."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants of the while loop in the program, we need to analyze the loop body and the loop condition.\n\nThe loop body is:\n```\n  i=i+1;\n```\nThis increments the variable `i` by 1 in each iteration.\n\nThe loop condition is:\n```\ni<N\n```\nThis condition is true as long as `i` is less than `N`.\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution, we have:\n```\n  assume(N > 0);\n```\nThis is a pre-condition of the program, and it is true before the loop execution.\n\n(ii) In every iteration of the loop, we have:\n```\n  assume(i >= 0);\n  assume(i < N);\n```\nThese are the loop invariants, and they are true in every iteration of the loop.\n\n(iii) After the loop termination, we have:\n```\n  assume(i == N);\n```\nThis is the post-condition of the loop, and it is true after the loop termination.\n\nNow, let's combine all the loop invariants into one code block:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/\n```\nThis code block contains all the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also avoided using keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, let's identify the loop condition:\n\nThe loop condition is `i<N`.\n\nNext, let's identify the loop body:\n\nThe loop body consists of the following statement:\n```\ni=i+1;\n```\nNow, let's find the loop invariants:\n\nA loop invariant is a condition that is true before the loop starts, remains true during each iteration of the loop, and is still true after the loop terminates.\n\nBased on the loop condition and the loop body, we can identify the following loop invariants:\n\n1. `i` is a valid index into the array `a`\n2. `N` is the length of the array `a`\n3. `i` is less than `N`\n4. `a[i]` is a valid value\n\nHere's the code block with the loop invariants:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant a[i] == a[i-1] + 1;\n*/\n```\nNote that we have assumed that `a` is an array of integers, and that `a[i]` is a valid value for each `i`. We have also assumed that `N` is the length of the array `a`.\n\nNow, let's verify the post-condition:\n\nThe post-condition is `x > 2`.\n\nWe can prove that the post-condition is true if the loop invariants are true.\n\nFirst, let's prove that the loop invariants are true:\n\n1. `i` is a valid index into the array `a`\n\nThis is true because `i` is initialized to 0, and it is incremented by 1 in each iteration of the loop. Therefore, `i` is always a valid index into the array `a`.\n\n2. `N` is the length of the array `a`\n\nThis is true because `N` is initialized to the length of the array `a` before the loop starts.\n\n3. `i` is less than `N`\n\nThis is true because `i` is incremented by 1 in each iteration of the loop, and it is less than `N` before the loop starts.\n\n4. `a[i]` is a valid value\n\nThis is true because `a` is an array of integers, and `a[i]` is a valid value for each `i`.\n\nNow, let's prove that the post-condition is true if the loop invariants are true:\n\nWe know that `x > 2` is true if `a[i] > 2` is true for all `i` such that `0 <= i < N`.\n\nWe also know that `a[i] > 2` is true if `a[i] == a[i-1] + 1` is true for all `i` such that `1 <= i < N`.\n\nTherefore, we can conclude that `x > 2` is true if the loop invariants are true.\n\nIn conclusion, we have found the necessary loop invariants for the loop in the given program, and we have verified the post-condition using those loop invariants."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nFirst, let's note the pre-conditions and variable assignments in the program:\n\n* `NONDET` is a non-deterministic value that can be either positive or negative.\n* `i` is initialized to 0.\n* `N` is a non-deterministic value that can be either positive or negative.\n* `a` is not used in the loop.\n* `x` is initialized to 1 if `NONDET` is positive, and 2 otherwise.\n\nNext, let's analyze the loop body:\n\n* The loop body consists of a single statement: `i = i + 1`.\n* The loop body does not modify the value of `x`.\n\nNow, let's find the loop invariants:\n\n* Before the loop execution, we know that `i == 0` and `x == 1` if `NONDET` is positive, and `x == 2` otherwise.\n* In every iteration of the loop, we know that `i` is incremented by 1, and `x` remains unchanged.\n* After the loop termination, we know that `i == N` and `x` remains unchanged.\n\nFinally, we can use the loop invariants to verify the post-condition:\n\n* The post-condition is `!(x > 2)`.\n* We can use the loop invariants to prove that the post-condition is satisfied.\n* The loop invariants imply that `x` is either 1 or 2, and therefore `x > 2` cannot be true.\n\nHere are the loop invariants in ACSL notation:\n```\n/*@\n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n    loop invariant i4;\n*/\n```\nNote that we have used the `i1` to `i4` notation to refer to the four loop invariants. The `i1` to `i4` notation is not required, but it makes the loop invariants easier to read and understand."
            },
            {
                "role": "assistant",
                "content": " The loop in the program is:\n```\nwhile (i<N){\n    i=i+1;\n}\n```\nTo find the loop invariants, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body is simply incrementing the variable `i` by 1 in each iteration.\n\nLoop Condition:\nThe loop condition is `i<N`.\n\nLoop Invariants:\n\n1. Before the loop execution, the variable `i` must be less than `N`.\n2. In every iteration of the loop, the variable `i` must be less than `N`.\n3. After the loop termination, the variable `i` must be equal to `N`.\n\nTherefore, the loop invariants are:\n```\n/*@ loop invariant i < N; @*/\n```\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. Additionally, we have not used any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of a single statement: `i=i+1;`. This statement increments the value of `i` by 1 in each iteration of the loop.\n2. Loop Condition:\nThe loop condition is `i<N`. This condition checks whether `i` is less than `N` or not. If `i` is less than `N`, the loop continues to execute. Otherwise, the loop terminates.\n\nBased on the above analysis, we can identify the following loop invariants:\n\n1. Before the loop execution, the value of `i` is 0.\n2. In every iteration of the loop, the value of `i` is incremented by 1.\n3. After the loop termination, the value of `i` is equal to `N`.\n\nWe can express these loop invariants in ACSL notation as follows:\n```\n/*@\n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/\n```\nNote that we have assumed that the variable `N` is a positive integer. If `N` can be negative or zero, we need to modify the loop invariants accordingly."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of a single statement: `i = i + 1;`. This statement increments the value of `i` by 1 in each iteration of the loop.\n\nLoop Condition:\nThe loop condition is `i < N`. This condition checks if the value of `i` is less than the value of `N`. If this condition is true, the loop continues to execute. If it is false, the loop terminates.\n\nLoop Invariants:\nA loop invariant is a condition that remains true before, during, and after each iteration of the loop. To find the loop invariants for this loop, we need to identify the conditions that are true before the loop starts, during each iteration of the loop, and after the loop terminates.\n\nBefore the loop starts, the value of `i` is 0, since it is initialized to 0 at the beginning of the program. We can also assume that the value of `N` is a positive integer, since it is used in the loop condition.\n\nDuring each iteration of the loop, the value of `i` is incremented by 1. Therefore, the loop invariant that is true during each iteration of the loop is `i <= N`. This invariant states that the value of `i` is less than or equal to the value of `N`.\n\nAfter the loop terminates, the value of `i` is equal to `N`. Therefore, the loop invariant that is true after the loop terminates is `i == N`. This invariant states that the value of `i` is equal to the value of `N`.\n\nFinally, we can combine these loop invariants to get a single loop invariant that is true before, during, and after each iteration of the loop: `i <= N && i == N`. This loop invariant states that the value of `i` is less than or equal to the value of `N`, and the value of `i` is equal to the value of `N`.\n\nHere is the loop invariant in ACSL notation:\n```\n/*@\n    loop invariant i <= N && i == N;\n*/\n```\nThis loop invariant can be used to verify the post-condition of the loop, which is that the value of `i` is equal to the value of `N`."
            },
            {
                "role": "assistant",
                "content": " Sure! Let's find the loop invariants for the loop in the program.\n\nStep 1: Identify the loop.\nThe loop in the program is the while loop with the condition `i<N`.\n\nStep 2: Analyze the loop body.\nThe loop body consists of the statement `i=i+1;`. This statement increments the value of `i` by 1.\n\nStep 3: Identify the loop invariants.\nA loop invariant is a condition that remains true before, during, and after the loop execution. To find the loop invariants, we need to analyze the loop body and the loop condition.\n\nBased on the loop body and the loop condition, we can identify the following loop invariants:\n\n1. `i` is a non-negative integer.\n2. `N` is a positive integer.\n3. `i` is less than or equal to `N`.\n\nStep 4: Output the loop invariants.\nThe loop invariants can be output using ACSL annotations. Here's the code block with the loop invariants:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant N > 0;\n    loop invariant i <= N;\n*/\n```\nNote that we've assumed that `N` is a positive integer, as it is not explicitly initialized in the program. Also, we've used the `>=` and `<=` operators instead of `>` and `<` to ensure that the loop invariants are true before and after the loop execution."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given C program, we need to analyze the loop body and the loop condition.\n\n1. Pre-condition:\nThe pre-condition for the while loop is `i < N`.\n2. Loop condition:\nThe loop condition is `i < N`.\n3. Loop body:\nThe loop body is `i = i + 1`.\n4. Post-condition:\nThe post-condition is `x > 2`.\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n\n* `i < N`: This is the pre-condition.\n* `x > 2`: This is the post-condition.\n\n(ii) In every iteration of the loop:\n\n* `i < N`: This is the loop condition.\n* `i = i + 1`: This is the loop body.\n\n(iii) After the loop termination:\n\n* `i < N`: This is the loop condition.\n* `x > 2`: This is the post-condition.\n\nThe loop invariants are:\n```\n/*@ \n    loop invariant i < N;\n    loop invariant x > 2;\n*/\n```\nThese loop invariants imply the post-condition `x > 2`, which means that the loop will terminate when `x > 2`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\n1. The loop condition is `i<N`. This implies that the loop will execute until `i` is greater than or equal to `N`.\n2. The loop body increments `i` by 1 in each iteration.\n3. The loop invariant should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBased on the above analysis, we can identify the following loop invariants:\n\n1. `i >= 0` (before the loop execution)\n2. `i < N` (in every iteration of the loop)\n3. `i >= N` (after the loop termination)\n\nThese loop invariants imply the post-condition `!(x > 2)`, which is the property that we want to verify.\n\nTherefore, the loop invariants for the while loop in the given program are:\n```\n/*@\n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i >= N;\n*/\n```\nNote that we have used the `assume` macro to assume that the value of `NONDET` is greater than 0. This is because the loop condition `i<N` relies on the value of `NONDET`, and we need to assume that it is greater than 0 to ensure that the loop executes at least once."
            }
        ],
        "invariants": [
            "/*@\n  loop invariant i <= N;\n  loop invariant i >= 0;\n*/",
            "/*@\n    loop invariant i <= N;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
            "/*@\n    loop invariant i < N;\n    loop invariant i <= N;\n    loop invariant i == N;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\n Sure, I can help you with that.\n\nFirst, let's identify the loop in the program. The loop is the `while` loop with the condition `i < N`.\n\nNext, let's identify the loop invariants. A loop invariant is a condition that is true before the loop starts, remains true during each iteration of the loop, and is still true after the loop terminates.\n\nIn this case, we can identify two loop invariants:\n\n1. `i >= 0`\n2. `N > 0`\n\nThese loop invariants are true before the loop starts, remain true during each iteration of the loop, and are still true after the loop terminates.\n\nTo prove that these loop invariants imply the post-condition `x > 2`, we need to show that if the loop invariants are true, then the post-condition must also be true.\n\nLet's assume that the loop invariants `i >= 0` and `N > 0` are true. We can see that the loop body increments `i` by 1 in each iteration, so after the loop terminates, we have `i = N`.\n\nSince `N > 0`, we know that `N >= 2`. Therefore, we have `i >= 2`.\n\nNow, let's consider the post-condition `x > 2`. We can see that the loop body does not modify the value of `x`, so the value of `x` after the loop terminates is the same as it was before the loop started.\n\nSince `x` was initialized to either 1 or 2, we know that `x` is either 1 or 2 after the loop terminates.\n\nTherefore, we have shown that if the loop invariants `i >= 0` and `N > 0` are true, then the post-condition `x > 2` must also be true.\n\nSo, the necessary loop invariants to help Frama-C verify the post-condition `x > 2` are `i >= 0` and `N > 0`.",
            "/*@ loop invariant i <= N;\n    loop invariant x == 1 || x == 2;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant a[i] == a[i-1] + 1;\n*/",
            "/*@\n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n    loop invariant i4;\n*/",
            "/*@ loop invariant i < N; @*/",
            "/*@\n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
            "/*@\n    loop invariant i <= N && i == N;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant N > 0;\n    loop invariant i <= N;\n*/",
            "/*@ \n    loop invariant i < N;\n    loop invariant x > 2;\n*/",
            "/*@\n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i >= N;\n*/"
        ],
        "completions": [
            {
                "invariants": "/*@\n  loop invariant i <= N;\n  loop invariant i >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: i >= 0;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i <= N is preserved but not established.\nloop invariant i >= 0 is preserved but not established.\nAssertion !(x > 2): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i <= N;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: i < N;\nloop invariant i3: i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i <= N is preserved but not established.\nloop invariant i < N is preserved but not established.\nloop invariant i == N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i < N;\n    loop invariant i <= N;\n    loop invariant i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i < N;\nloop invariant i2: i <= N;\nloop invariant i3: i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i < N is preserved but not established.\nloop invariant i <= N is inductive.\nloop invariant i == N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: i < N;\nloop invariant i3: i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i == 0 is preserved but not established.\nloop invariant i < N is preserved but not established.\nloop invariant i == N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ loop invariant i <= N;\n    loop invariant x == 1 || x == 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: x == 1 || x == 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i <= N is preserved but not established.\nloop invariant x == 1 || x == 2 is inductive.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\nloop invariant i2: x == 1 || x == 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "loop invariant x == 1 || x == 2 is inductive.\nAssertion !(x > 2): Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i < N;\nloop invariant i3: i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 0 is preserved but not established.\nloop invariant i < N is preserved but not established.\nloop invariant i == N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant a[i] == a[i-1] + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i < N;\nloop invariant i3: a[i] == a[i-1] + 1;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "Annotation error on line 16: subscripted value is neither array nor pointer. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i1;\n    loop invariant i2;\n    loop invariant i3;\n    loop invariant i4;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i1;\nloop invariant i2: i2;\nloop invariant i3: i3;\nloop invariant i4: i4;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "Annotation error on line 14: unbound logic variable i1. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ loop invariant i < N; @*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i < N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i < N is neither established nor preserved.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i == 0;\n    loop invariant i < N;\n    loop invariant i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: i < N;\nloop invariant i3: i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i == 0 is preserved but not established.\nloop invariant i < N is preserved but not established.\nloop invariant i == N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i <= N && i == N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i <= N && i == N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i <= N && i == N is preserved but not established.\nAssertion !(x > 2): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant N > 0;\n    loop invariant i <= N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: N > 0;\nloop invariant i3: i <= N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 0 is preserved but not established.\nloop invariant N > 0 is preserved but not established.\nloop invariant i <= N is preserved but not established.\nAssertion !(x > 2): Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant i < N;\n    loop invariant x > 2;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i < N;\nloop invariant i2: x > 2;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i < N is preserved but not established.\nloop invariant x > 2 is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant i >= 0;\n    loop invariant i < N;\n    loop invariant i >= N;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: i < N;\nloop invariant i3: i >= N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "success": false,
                "checker_message": "loop invariant i >= 0 is preserved but not established.\nloop invariant i < N is preserved but not established.\nloop invariant i >= N is preserved but not established.\nAssertion !(x > 2): Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\nloop invariant i1: i <= N;\nloop invariant i2: i >= 0;\nloop invariant i3: i <= N;\nloop invariant i4: i < N;\nloop invariant i5: i == N;\nloop invariant i6: i < N;\nloop invariant i7: i <= N;\nloop invariant i8: i == N;\nloop invariant i9: i == 0;\nloop invariant i10: i < N;\nloop invariant i11: i == N;\nloop invariant i12: i <= N;\nloop invariant i13: x == 1 || x == 2;\nloop invariant i14: i >= 0;\nloop invariant i15: i < N;\nloop invariant i16: i == N;\nloop invariant i17: i >= 0;\nloop invariant i18: i < N;\nloop invariant i19: a[i] == a[i-1] + 1;\nloop invariant i20: i1;\nloop invariant i21: i2;\nloop invariant i22: i3;\nloop invariant i23: i4;\nloop invariant i24: i < N;\nloop invariant i25: i == 0;\nloop invariant i26: i < N;\nloop invariant i27: i == N;\nloop invariant i28: i <= N && i == N;\nloop invariant i29: i >= 0;\nloop invariant i30: N > 0;\nloop invariant i31: i <= N;\nloop invariant i32: i < N;\nloop invariant i33: x > 2;\nloop invariant i34: i >= 0;\nloop invariant i35: i < N;\nloop invariant i36: i >= N;\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 32: subscripted value is neither array nor pointer. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return;\n\nvoid errorFn() {ERROR: goto ERROR;}\nvoid main(){\n\n  int NONDET;\n  int i,N;\n  int a;\n  int x;\n\n  if (NONDET > 0) x=1; else x=2;\n\n  /*@\n\n\n\n\n\nloop invariant i13: x == 1 || x == 2;\n\n\n\n\n\n\n\n\n\n*/\nwhile (i<N){\n    i=i+1;\n  }\n\n  {;\n//@ assert(!( x >2 ));\n}\n  return;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant x == 1 || x == 2 is inductive.\nAssertion !(x > 2): Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            6,
            9,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            37,
            38,
            39,
            40,
            43,
            49,
            52,
            58,
            60,
            63,
            64,
            65,
            66,
            68,
            72,
            73,
            79,
            83,
            85,
            86,
            87,
            88,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            115,
            118,
            128,
            129,
            130,
            137,
            138,
            144,
            148,
            150,
            153,
            154,
            155,
            162,
            167,
            171,
            172,
            173,
            182,
            189,
            190,
            191,
            196,
            197,
            199,
            200,
            201,
            202,
            208,
            210,
            215,
            216,
            217,
            218,
            219,
            221,
            226,
            227,
            228,
            229,
            232,
            234,
            236,
            238,
            241,
            242
        ],
        "failure": [
            2,
            3,
            4,
            5,
            7,
            8,
            10,
            11,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            35,
            36,
            41,
            42,
            44,
            45,
            46,
            47,
            48,
            50,
            51,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            67,
            69,
            70,
            71,
            74,
            75,
            76,
            77,
            78,
            80,
            81,
            82,
            84,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            114,
            116,
            117,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            131,
            132,
            133,
            134,
            135,
            136,
            139,
            140,
            141,
            142,
            143,
            145,
            146,
            147,
            149,
            151,
            152,
            156,
            157,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            168,
            169,
            170,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            183,
            184,
            185,
            186,
            187,
            188,
            192,
            193,
            194,
            195,
            198,
            203,
            204,
            205,
            206,
            207,
            209,
            211,
            212,
            213,
            214,
            220,
            222,
            223,
            224,
            225,
            230,
            231,
            233,
            235,
            237,
            239,
            240
        ],
        "skipped": [],
        "total": 243,
        "success_rate": 0.35390946502057613
    }
}