{
    "logs": {
        "file": [
            "../data/new_benchmarks/original_benchmarks/sv-benchmarks/loop-zilu/benchmark50_linear.c",
            {
                "code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}"
            }
        ],
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
            },
            {
                "role": "user",
                "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  while (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;//@ assert(ya >= 0);\n}\n  return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of two statements: `xa--;` and `ya++;`. These statements update the values of `xa` and `ya` respectively.\n2. Loop Condition:\nThe loop condition is `xa > 0`. This condition is checked before each iteration of the loop, and if it is true, the loop continues.\n\nBased on the loop body and loop condition, we can identify the following loop invariants:\n\n1. Before the loop execution:\n* `xa` and `ya` are initialized to some values.\n* `xa` is greater than or equal to 0.\n2. In every iteration of the loop:\n* `xa` is decremented by 1.\n* `ya` is incremented by 1.\n3. After the loop termination:\n* `xa` is equal to 0.\n* `ya` is greater than or equal to 0.\n\nThese loop invariants can be used to verify the post-condition of the program, which is `ya >= 0`. By analyzing the loop invariants, we can determine that the loop will terminate when `xa` becomes 0, and the post-condition will be satisfied.\n\nTherefore, the loop invariants for the while loop in the program are:\n```\n/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/\n```"
            },
            {
                "role": "assistant",
                "content": " The loop in the program is:\n```\nwhile (xa > 0) {\n  xa--;\n  ya++;\n}\n```\nTo find the loop invariants, we need to analyze the loop body and the loop condition.\n\nFirst, let's consider the loop condition. The loop continues to execute as long as `xa` is greater than 0. This means that `xa` is non-negative at the start of each iteration of the loop. We can express this as a loop invariant:\n```\nloop invariant: xa >= 0;\n```\nNext, let's consider the loop body. The loop body decrements `xa` and increments `ya`. We can express this as a loop invariant:\n```\nloop invariant: xa - ya > 0;\n```\nFinally, let's consider the post-condition of the loop. The post-condition is that `ya` is greater than or equal to 0. We can express this as a loop invariant:\n```\nloop invariant: ya >= 0;\n```\nSo, the necessary loop invariants for the loop in the program are:\n```\nloop invariant: xa >= 0;\nloop invariant: xa - ya > 0;\nloop invariant: ya >= 0;\n```\nThese loop invariants together imply that the post-condition of the loop is satisfied."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given C program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of two statements: `xa--;` and `ya++;`. These statements are executed repeatedly as long as the loop condition is true.\n2. Loop Condition:\nThe loop condition is `xa > 0`. This means that the loop will terminate when `xa` becomes less than or equal to 0.\n3. Loop Invariants:\nBased on the loop body and the loop condition, we can identify the following loop invariants:\n\n(i) Before the loop execution, the value of `xa` is greater than 0.\n\n(ii) In every iteration of the loop, the value of `xa` decreases by 1, and the value of `ya` increases by 1.\n\n(iii) After the loop termination, the value of `ya` is greater than or equal to 0.\n\nHere are the loop invariants in ACSL syntax:\n```\n/*@ \n    loop invariant xa > 0;\n    loop invariant xa - 1 == ya - 1;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have used the `loop invariant` keyword to specify the loop invariants. The `loop invariant` keyword is used to specify a condition that is true before the loop execution, in every iteration of the loop, and after the loop termination."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the program, we need to analyze the loop body and the loop condition.\n\n1. The loop body consists of two statements: `xa--;` and `ya++;`. This means that the value of `xa` is decreased by 1 in every iteration of the loop, and the value of `ya` is increased by 1.\n2. The loop condition is `xa > 0`. This means that the loop will continue to execute as long as the value of `xa` is greater than 0.\n3. The loop invariant is a condition that is true before the loop execution, in every iteration of the loop, and after the loop termination. In this case, the loop invariant is `ya >= 0`. This is because the value of `ya` is increased by 1 in every iteration of the loop, and the loop condition is `xa > 0`, which means that the value of `xa` is greater than 0. Therefore, the value of `ya` will always be greater than or equal to 0.\n\nHere are the loop invariants for the loop in the program:\n```\n/*@ \n    loop invariant ya >= 0;\n*/\n```\nNote that we have used the `@` symbol to indicate that this is an ACSL annotation. The `loop invariant` keyword is used to specify the loop invariant, and the `ya >= 0` condition is the loop invariant itself."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of two statements: `xa--;` and `ya++;`. The loop condition is `xa > 0`.\n\nHere are the loop invariants that we can deduce:\n\n1. Before the loop execution, `xa` is greater than or equal to 0. This is because the loop condition is `xa > 0`, and `xa` is initialized to a non-negative value before the loop.\n2. In every iteration of the loop, `xa` is decremented by 1, and `ya` is incremented by 1. This means that `xa` is always greater than or equal to 0, and `ya` is always greater than or equal to 0.\n3. After the loop termination, `xa` is equal to 0, and `ya` is greater than or equal to 0. This is because the loop condition is `xa > 0`, and the loop body ensures that `xa` is decremented by 1 in each iteration.\n\nTherefore, the necessary loop invariants for the while loop are:\n\n* `xa >= 0` before the loop execution\n* `xa >= 0` and `ya >= 0` in every iteration of the loop\n* `xa == 0` and `ya >= 0` after the loop termination\n\nThese loop invariants can be used to verify the post-condition of the program, which is `ya >= 0`."
            },
            {
                "role": "assistant",
                "content": " To find the necessary loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of two statements: `xa--;` and `ya++;`. This means that the value of `xa` is decremented by 1 in each iteration, and the value of `ya` is incremented by 1.\n\nLoop Condition:\nThe loop condition is `xa > 0`. This means that the loop will continue to execute as long as the value of `xa` is greater than 0.\n\nNow, let's think about the loop invariants. A loop invariant is a condition that remains true before, during, and after the loop execution. In this case, we need to find the loop invariants that imply the post-condition `ya >= 0`.\n\nHere are the necessary loop invariants for the while loop:\n\n1. `xa >= 0`: This invariant is true before the loop execution, as the value of `xa` is initialized to a non-negative value. It is also true in every iteration of the loop, as the value of `xa` is decremented by 1 in each iteration. Finally, it is true after the loop termination, as the loop will only terminate when `xa` becomes 0.\n2. `ya >= 0`: This invariant is true before the loop execution, as the value of `ya` is initialized to a non-negative value. It is also true in every iteration of the loop, as the value of `ya` is incremented by 1 in each iteration. Finally, it is true after the loop termination, as the loop will only terminate when `xa` becomes 0.\n\nSo, the necessary loop invariants for the while loop are `xa >= 0` and `ya >= 0`. We can output these loop invariants in the following code block:\n```\n/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also avoided using any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\n1. Loop body: The loop body consists of two statements: `xa--;` and `ya++;`. These statements update the values of `xa` and `ya` in each iteration of the loop.\n2. Loop condition: The loop condition is `xa > 0`. The loop continues to execute as long as `xa` is greater than 0.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we can say that `xa` is greater than or equal to 0. This is because the loop condition is `xa > 0`, which implies that `xa` is non-negative.\n2. In every iteration of the loop, we can say that `xa` is strictly decreasing and `ya` is strictly increasing. This is because the loop body updates `xa` and `ya` in a way that ensures their values are always strictly decreasing and increasing, respectively.\n3. After the loop termination, we can say that `xa` is equal to 0 and `ya` is greater than or equal to 0. This is because the loop condition is `xa > 0`, which means that `xa` will eventually become 0, and the loop will terminate when `xa` is 0. Since `ya` is strictly increasing, it must be greater than or equal to 0.\n\nHere are the loop invariants for the while loop in the program:\n```\n/*@\n    loop invariant xa >= 0;\n    loop invariant xa - ya > 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that the first loop invariant is not necessary, as it is implied by the second loop invariant. Therefore, we can simplify the loop invariants to:\n```\n/*@\n    loop invariant xa - ya > 0;\n    loop invariant ya >= 0;\n*/\n```"
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the given C program, we need to analyze the loop body and the loop condition.\n\n1. The loop condition is `xa > 0`. This means that the loop will execute as long as `xa` is positive.\n2. The loop body decrements `xa` by 1 and increments `ya` by 1.\n3. The loop invariants should be true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nBased on the above analysis, we can identify the following loop invariants:\n\n1. `xa` is positive before the loop execution.\n2. `xa` is non-negative in every iteration of the loop.\n3. `ya` is non-negative in every iteration of the loop.\n4. `ya` is greater than or equal to `xa` after the loop termination.\n\nHere are the loop invariants in the form of ACSL annotations:\n```\n/*@\n    loop invariant xa > 0;\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant ya >= xa;\n*/\n```\nNote that we have used the `>=` operator instead of `>` to ensure that the loop invariants are true before the loop execution and after the loop termination."
            },
            {
                "role": "assistant",
                "content": " Sure! Let's find the loop invariants for the while loop in the given C program.\n\n1. Before the loop execution:\nThe loop condition is `xa > 0`, so before the loop execution, we know that `xa` is positive.\n2. In every iteration of the loop:\nThe loop body decrements `xa` and increments `ya`. So, in every iteration of the loop, we know that `xa` is decreasing and `ya` is increasing.\n3. After the loop termination:\nThe loop terminates when `xa` becomes 0. So, after the loop termination, we know that `xa` is 0 and `ya` is at least 0.\n\nBased on the above analysis, we can write the loop invariants as follows:\n```\n/*@\n    loop invariant xa > 0;\n    loop invariant ya >= 0;\n    loop invariant xa - ya > 0;\n*/\n```\nThe first two loop invariants are obvious, but the third loop invariant is a bit more complex. It states that the difference between `xa` and `ya` is always positive. This is because `xa` is decreasing and `ya` is increasing, so the difference between them is also decreasing.\n\nNote that we have not used any variables or functions that are not declared in the program. We have also not made any assumptions about functions whose definitions are not given. Finally, we have not used any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants of the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body consists of two statements: `xa--;` and `ya++;`. These statements update the values of `xa` and `ya` respectively.\n\nLoop Condition:\nThe loop condition is `xa > 0`. This means that the loop will continue to execute as long as `xa` is greater than 0.\n\nLoop Invariants:\nBased on the analysis of the loop body and the loop condition, we can identify the following loop invariants:\n\n1. `xa >= 0`\n2. `ya >= 0`\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition of the loop, which is `ya >= 0`.\n\nHere is the code block with the loop invariants:\n```\n/*@\n  loop invariant xa >= 0;\n  loop invariant ya >= 0;\n*/\n```\nNote that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also followed the rules of ACSL annotations for loops, and we have not used any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the while loop in the program, we need to analyze the loop body and the loop condition.\n\n1. Loop Body: The loop body consists of two statements: `xa--;` and `ya++;`. These statements update the values of `xa` and `ya` respectively.\n2. Loop Condition: The loop condition is `xa > 0`.\n\nNow, let's find the loop invariants for the while loop:\n\n(i) Before the loop execution:\n\n* `xa` and `ya` are both non-negative integers.\n* `xa + ya` is a non-negative integer.\n\n(ii) In every iteration of the loop:\n\n* `xa` is decreased by 1.\n* `ya` is increased by 1.\n* `xa + ya` is unchanged.\n\n(iii) After the loop termination:\n\n* `xa` is 0.\n* `ya` is greater than or equal to 0.\n\nThese loop invariants imply the post-condition `ya >= 0`, which is the desired property to be verified by Frama-C.\n\nHere are the loop invariants in ACSL notation:\n```\n/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant xa + ya >= 0;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have used the `assume` macro to ensure that the loop invariants are true before the loop execution and after the loop termination. We have also used the `assert` macro to verify the post-condition `ya >= 0`."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants for the loop in the given program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of two statements: `xa--;` and `ya++;`. These statements update the values of `xa` and `ya`, respectively.\n\nThe loop condition is `xa > 0`. This condition checks whether `xa` is greater than 0. If the condition is true, the loop continues to execute. If the condition is false, the loop terminates.\n\nNow, let's think about the loop invariants. A loop invariant is a condition that is true before the loop execution, in every iteration of the loop, and after the loop termination. In other words, a loop invariant is a condition that is preserved throughout the execution of the loop.\n\nBased on the loop body and the loop condition, we can identify three loop invariants:\n\n1. Before the loop execution, `xa` is greater than or equal to 0.\n2. In every iteration of the loop, `xa` is greater than or equal to 0.\n3. After the loop termination, `ya` is greater than or equal to 0.\n\nThese loop invariants can be used to verify the post-condition of the program. The post-condition is `ya >= 0`, which is the condition that is true after the loop execution.\n\nHere is the code block with the loop invariants:\n```\n/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have not used any variables or functions that are not declared in the program. We have also not made any assumptions about functions whose definitions are not given. Finally, we have not used any keywords that are not supported in ACSL annotations for loops."
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants, we need to analyze the loop body and the loop condition.\n\n1. Loop Body:\nThe loop body consists of two statements:\n```c\nxa--;\nya++;\n```\nThese statements update the values of `xa` and `ya` in each iteration of the loop.\n2. Loop Condition:\nThe loop condition is `xa > 0`. This means that the loop will continue executing as long as `xa` is greater than 0.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, the loop invariant is `xa >= 0 && ya >= 0`. This is because the loop condition `xa > 0` implies that `xa` is non-negative, and the initialization of `ya` to `unknown_int()` means that `ya` can be any integer.\n2. In every iteration of the loop, the loop invariant is `xa >= 0 && ya >= 0`. This is because the loop body only updates the values of `xa` and `ya` in a way that preserves their non-negativity.\n3. After the loop termination, the loop invariant is `ya >= 0`. This is because the loop condition `xa > 0` is not satisfied, which means that the loop has terminated, and the value of `ya` is not updated anymore.\n\nTherefore, the loop invariants for the loop in the program are:\n```c\n/*@ \n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have split the conjunction of the loop invariants into its parts to make it easier to read and understand."
            },
            {
                "role": "assistant",
                "content": " The given program has a while loop that iterates while `xa > 0`. The loop body decrements `xa` and increments `ya`. The loop invariant is `xa >= 0`.\n\nThe loop invariant is true before the loop execution because `xa` is initialized to a non-negative value.\n\nThe loop invariant is true in every iteration of the loop because the loop body decrements `xa` and increments `ya`, which keeps `xa` non-negative.\n\nThe loop invariant is true after the loop termination because the loop terminates when `xa` becomes 0, and the loop invariant is `xa >= 0`.\n\nTherefore, the necessary loop invariants for the while loop are `xa >= 0` and `ya >= 0`.\n\nHere are the loop invariants in ACSL syntax:\n```\n/*@\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/\n```"
            },
            {
                "role": "assistant",
                "content": " To find the loop invariants, we need to analyze the loop body and the loop condition.\n\nLoop Body:\nThe loop body contains two statements:\n```c\nxa--;\nya++;\n```\nThese statements decrease the value of `xa` by 1 and increase the value of `ya` by 1.\n\nLoop Condition:\nThe loop condition is `xa > 0`.\n\nLoop Invariants:\n\n(i) Before the loop execution:\n\n* `xa` is not equal to 0.\n* `ya` is not equal to 0.\n\n(ii) In every iteration of the loop:\n\n* `xa` is decreased by 1.\n* `ya` is increased by 1.\n\n(iii) After the loop termination:\n\n* `xa` is equal to 0.\n* `ya` is greater than or equal to 0.\n\nTherefore, the loop invariants for the while loop are:\n```\n/*@ \n    loop invariant xa != 0;\n    loop invariant ya != 0;\n    loop invariant xa - 1 == xa;\n    loop invariant ya + 1 == ya;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/\n```\nNote that we have used the `@` symbol to indicate that these are ACSL annotations, and we have used the `==` operator to indicate that the expressions are equal.\n\nAlso, note that we have not used any variables or functions that are not declared in the program, and we have not made any assumptions about functions whose definitions are not given. We have also not used any keywords that are not supported in ACSL annotations for loops."
            }
        ],
        "invariants": [
            "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
            "while (xa > 0) {\n  xa--;\n  ya++;\n}",
            "/*@ \n    loop invariant xa > 0;\n    loop invariant xa - 1 == ya - 1;\n    loop invariant ya >= 0;\n*/",
            "/*@ \n    loop invariant ya >= 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\n To find the necessary loop invariants for the while loop in the given program, we need to analyze the loop body and the loop condition.\n\nThe loop body consists of two statements: `xa--;` and `ya++;`. The loop condition is `xa > 0`.\n\nHere are the loop invariants that we can deduce:\n\n1. Before the loop execution, `xa` is greater than or equal to 0. This is because the loop condition is `xa > 0`, and `xa` is initialized to a non-negative value before the loop.\n2. In every iteration of the loop, `xa` is decremented by 1, and `ya` is incremented by 1. This means that `xa` is always greater than or equal to 0, and `ya` is always greater than or equal to 0.\n3. After the loop termination, `xa` is equal to 0, and `ya` is greater than or equal to 0. This is because the loop condition is `xa > 0`, and the loop body ensures that `xa` is decremented by 1 in each iteration.\n\nTherefore, the necessary loop invariants for the while loop are:\n\n* `xa >= 0` before the loop execution\n* `xa >= 0` and `ya >= 0` in every iteration of the loop\n* `xa == 0` and `ya >= 0` after the loop termination\n\nThese loop invariants can be used to verify the post-condition of the program, which is `ya >= 0`.",
            "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
            "/*@\n    loop invariant xa >= 0;\n    loop invariant xa - ya > 0;\n    loop invariant ya >= 0;\n*/",
            "/*@\n    loop invariant xa > 0;\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant ya >= xa;\n*/",
            "/*@\n    loop invariant xa > 0;\n    loop invariant ya >= 0;\n    loop invariant xa - ya > 0;\n*/",
            "/*@\n  loop invariant xa >= 0;\n  loop invariant ya >= 0;\n*/",
            "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant xa + ya >= 0;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/",
            "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
            "/*@ \n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant ya >= 0;\n*/",
            "/*@\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
            "/*@ \n    loop invariant xa != 0;\n    loop invariant ya != 0;\n    loop invariant xa - 1 == xa;\n    loop invariant ya + 1 == ya;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/"
        ],
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "while (xa > 0) {\n  xa--;\n  ya++;\n}",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "No invariants found.",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants/variants found"
            },
            {
                "invariants": "/*@ \n    loop invariant xa > 0;\n    loop invariant xa - 1 == ya - 1;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa > 0;\nloop invariant i2: xa - 1 == ya - 1;\nloop invariant i3: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa > 0 is neither established nor preserved.\nloop invariant xa - 1 == ya - 1 is neither established nor preserved.\nloop invariant ya >= 0 is inductive.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant xa >= 0;\n    loop invariant xa - ya > 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: xa - ya > 0;\nloop invariant i3: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant xa - ya > 0 is neither established nor preserved.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant xa > 0;\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant ya >= xa;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa > 0;\nloop invariant i2: xa >= 0;\nloop invariant i3: ya >= 0;\nloop invariant i4: ya >= xa;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa > 0 is neither established nor preserved.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is preserved but not established.\nloop invariant ya >= xa is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant xa > 0;\n    loop invariant ya >= 0;\n    loop invariant xa - ya > 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa > 0;\nloop invariant i2: ya >= 0;\nloop invariant i3: xa - ya > 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa > 0 is neither established nor preserved.\nloop invariant ya >= 0 is preserved but not established.\nloop invariant xa - ya > 0 is neither established nor preserved.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n  loop invariant xa >= 0;\n  loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n    loop invariant xa + ya >= 0;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\nloop invariant i3: xa + ya >= 0;\nloop invariant i4: xa == 0;\nloop invariant i5: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nloop invariant xa + ya >= 0 is inductive.\nloop invariant xa == 0 is preserved but not established.\nloop invariant ya >= 0 is inductive.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant xa >= 0 && ya >= 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0 && ya >= 0;\nloop invariant i2: xa >= 0 && ya >= 0;\nloop invariant i3: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 && ya >= 0 is preserved but not established.\nloop invariant xa >= 0 && ya >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@\n    loop invariant xa >= 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            },
            {
                "invariants": "/*@ \n    loop invariant xa != 0;\n    loop invariant ya != 0;\n    loop invariant xa - 1 == xa;\n    loop invariant ya + 1 == ya;\n    loop invariant xa == 0;\n    loop invariant ya >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa != 0;\nloop invariant i2: ya != 0;\nloop invariant i3: xa - 1 == xa;\nloop invariant i4: ya + 1 == ya;\nloop invariant i5: xa == 0;\nloop invariant i6: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "success": false,
                "checker_message": "loop invariant xa != 0 is preserved but not established.\nloop invariant ya != 0 is preserved but not established.\nloop invariant xa - 1 == xa is preserved but not established.\nloop invariant ya + 1 == ya is inductive.\nloop invariant xa == 0 is inductive.\nloop invariant ya >= 0 is inductive.\nAssertion ya >= 0: Partially proven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
                "checker_message_after_prune": "No invariants found."
            }
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\nloop invariant i1: xa >= 0;\nloop invariant i2: ya >= 0;\nloop invariant i3: xa > 0;\nloop invariant i4: xa - 1 == ya - 1;\nloop invariant i5: ya >= 0;\nloop invariant i6: ya >= 0;\nloop invariant i7: xa >= 0;\nloop invariant i8: ya >= 0;\nloop invariant i9: xa >= 0;\nloop invariant i10: xa - ya > 0;\nloop invariant i11: ya >= 0;\nloop invariant i12: xa > 0;\nloop invariant i13: xa >= 0;\nloop invariant i14: ya >= 0;\nloop invariant i15: ya >= xa;\nloop invariant i16: xa > 0;\nloop invariant i17: ya >= 0;\nloop invariant i18: xa - ya > 0;\nloop invariant i19: xa >= 0;\nloop invariant i20: ya >= 0;\nloop invariant i21: xa >= 0;\nloop invariant i22: ya >= 0;\nloop invariant i23: xa + ya >= 0;\nloop invariant i24: xa == 0;\nloop invariant i25: ya >= 0;\nloop invariant i26: xa >= 0;\nloop invariant i27: ya >= 0;\nloop invariant i28: xa >= 0 && ya >= 0;\nloop invariant i29: xa >= 0 && ya >= 0;\nloop invariant i30: ya >= 0;\nloop invariant i31: xa >= 0;\nloop invariant i32: ya >= 0;\nloop invariant i33: xa != 0;\nloop invariant i34: ya != 0;\nloop invariant i35: xa - 1 == xa;\nloop invariant i36: ya + 1 == ya;\nloop invariant i37: xa == 0;\nloop invariant i38: ya >= 0;\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
        "checker_output": false,
        "checker_message": "loop invariant xa >= 0 is preserved but not established.\nloop invariant ya >= 0 is preserved but not established.\nloop invariant xa > 0 is preserved but not established.\nloop invariant xa - 1 == ya - 1 is preserved but not established.\nloop invariant ya >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant xa - ya > 0 is preserved but not established.\nloop invariant ya >= 0 is inductive.\nloop invariant xa > 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant ya >= xa is inductive.\nloop invariant xa > 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa - ya > 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa + ya >= 0 is inductive.\nloop invariant xa == 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 && ya >= 0 is inductive.\nloop invariant xa >= 0 && ya >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa >= 0 is inductive.\nloop invariant ya >= 0 is inductive.\nloop invariant xa != 0 is inductive.\nloop invariant ya != 0 is inductive.\nloop invariant xa - 1 == xa is inductive.\nloop invariant ya + 1 == ya is inductive.\nloop invariant xa == 0 is inductive.\nloop invariant ya >= 0 is inductive.\nAssertion ya >= 0: Partially proven\n",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\n#include <assert.h>\n\nint main() {\n  int xa = unknown_int();\n  int ya = unknown_int();\n  if (!(xa + ya > 0)) return 0;\n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (xa > 0) {\n    xa--;\n    ya++;\n  }\n  {;\n//@ assert(ya >= 0);\n}\n  return 0;\n}",
        "checker_output_after_combine_and_prune": false,
        "checker_message_after_combine_and_prune": "No invariants found."
    },
    "stats": {
        "success": [
            0,
            1,
            6,
            9,
            12,
            19,
            25,
            26,
            27,
            28,
            34,
            37,
            38,
            39,
            40,
            43,
            49,
            52,
            58,
            60,
            63,
            64,
            65,
            66,
            68,
            72,
            73,
            79,
            83,
            85,
            86,
            87,
            88,
            96,
            100,
            101,
            102,
            104,
            109,
            112,
            115,
            118,
            128,
            129,
            130,
            137,
            138,
            144,
            148,
            150,
            153,
            154,
            155,
            162,
            167,
            171,
            172,
            173,
            182,
            189,
            190,
            191,
            196,
            197,
            199,
            200,
            201,
            202,
            208,
            210,
            215,
            216,
            217,
            218,
            219,
            221,
            226,
            227,
            228,
            229,
            232,
            234,
            236,
            238,
            241,
            242,
            245,
            246,
            253,
            259,
            261,
            262,
            265,
            267,
            271,
            272,
            276,
            277,
            278,
            284,
            287,
            290,
            297,
            300,
            301,
            302,
            304,
            307,
            308,
            311,
            312,
            314,
            316,
            317,
            318,
            319,
            320,
            321,
            322,
            323,
            324,
            326,
            327,
            332,
            333,
            336,
            338,
            341,
            342,
            344,
            345,
            346,
            347,
            348,
            349,
            354,
            355
        ],
        "failure": [
            2,
            3,
            4,
            5,
            7,
            8,
            10,
            11,
            13,
            14,
            15,
            16,
            17,
            18,
            20,
            21,
            22,
            23,
            24,
            29,
            30,
            31,
            32,
            33,
            35,
            36,
            41,
            42,
            44,
            45,
            46,
            47,
            48,
            50,
            51,
            53,
            54,
            55,
            56,
            57,
            59,
            61,
            62,
            67,
            69,
            70,
            71,
            74,
            75,
            76,
            77,
            78,
            80,
            81,
            82,
            84,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            97,
            98,
            99,
            103,
            105,
            106,
            107,
            108,
            110,
            111,
            113,
            114,
            116,
            117,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            131,
            132,
            133,
            134,
            135,
            136,
            139,
            140,
            141,
            142,
            143,
            145,
            146,
            147,
            149,
            151,
            152,
            156,
            157,
            158,
            159,
            160,
            161,
            163,
            164,
            165,
            166,
            168,
            169,
            170,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            183,
            184,
            185,
            186,
            187,
            188,
            192,
            193,
            194,
            195,
            198,
            203,
            204,
            205,
            206,
            207,
            209,
            211,
            212,
            213,
            214,
            220,
            222,
            223,
            224,
            225,
            230,
            231,
            233,
            235,
            237,
            239,
            240,
            243,
            244,
            247,
            248,
            249,
            250,
            251,
            252,
            254,
            255,
            256,
            257,
            258,
            260,
            263,
            264,
            266,
            268,
            269,
            270,
            273,
            274,
            275,
            279,
            280,
            281,
            282,
            283,
            285,
            286,
            288,
            289,
            291,
            292,
            293,
            294,
            295,
            296,
            298,
            299,
            303,
            305,
            306,
            309,
            310,
            313,
            315,
            325,
            328,
            329,
            330,
            331,
            334,
            335,
            337,
            339,
            340,
            343,
            350,
            351,
            352,
            353,
            356
        ],
        "skipped": [],
        "total": 357,
        "success_rate": 0.38375350140056025
    }
}