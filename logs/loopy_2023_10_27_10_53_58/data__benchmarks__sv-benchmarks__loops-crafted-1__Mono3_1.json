{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  while (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  while (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- `unsigned int x = 0;`\n- `unsigned int y = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x < 1000000`\n- Loop body:\n  - If `x < 500000`, increment `y`\n  - Else, decrement `y`\n  - Increment `x`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 1000000 - y;\n*/\n```\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition `y != 0`.",
            "First, let's note the pre-conditions and variable assignments:\n\n- x is initialized to 0\n- y is initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n\n- The loop condition is x < 1000000.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= 1000000 ==> y <= 500000;\n    loop invariant x >= 500000 ==> y >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition (y != 0).",
            "First, let's note the pre-conditions and variable assignments in the program:\n1. x is initialized to 0.\n2. y is initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is x < 1000000.\n\nNow, let's output the loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition.\n\n```c\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x >= y;\n    loop invariant x <= 2 * y;\n*/\n```\n\nThese loop invariants hold before the loop, during every iteration, and after loop termination. They are useful for Frama-C to verify the post-condition `y != 0` after the loop terminates.",
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `unsigned int x = 0;`\n2. `unsigned int y = 0;`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: `x < 1000000`\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x && x <= 1000000;\n    loop invariant 0 <= y && y <= 1000000;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/\n```\n\nThese loop invariants help Frama-C verify the post-condition in the given program.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x is initialized to 0\n- y is initialized to 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `x < 1000000`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - `x == 0`\n   - `y == 0`\n\n2. In every iteration of the loop:\n   - If `x < 500000`, then `y` is incremented.\n   - If `x >= 500000`, then `y` is decremented.\n\n3. After the loop termination:\n   - `x == 1000000`\n   - `y != 0` (as mentioned in the post-condition)\n\nConsidering the above points, we can write the loop invariants as follows:\n\n```\n@{\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n  @}\n```",
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- x is initialized to 0\n- y is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is x < 1000000.\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution, x and y are both initialized to 0.\n2. In every iteration of the loop, x is incremented by 1.\n3. In every iteration of the loop, y is incremented by 1 if x < 500000, and decremented by 1 if x >= 500000.\n4. After the loop termination, the post-condition states that y should not be equal to 0.\n\nWith this information, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 500000 ==> y == x;\n    loop invariant x > 500000 ==> y == 1000000 - x;\n */\n```",
            "Pre-conditions and variable assignments:\n- x and y are initialized to 0.\n\nLoop condition:\n- x < 1000000\n\nWe can now determine the loop invariants:\n\n```c\n/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 1000000 - y;\n  loop invariant (x < 500000) ==> (y == x);\n  loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition `y != 0`.",
            "First, let's make a note of the initial variable assignments and the loop condition:\n\n- x is initialized to 0\n- y is initialized to 0\n- The loop condition is x < 1000000\n\nNow let's analyze the loop body:\n- If x < 500000, y is incremented by 1\n- If x >= 500000, y is decremented by 1\n- x is incremented by 1 in every iteration\n\nLet's write the loop invariants that hold before the loop, during every iteration, and after the loop termination:\n\n```\n/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 500000 ==> y == x;\n  loop invariant x > 500000 ==> y == 1000000 - x;\n*/\n```",
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- x and y are initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition is x < 1000000.\n- Inside the loop, if x < 500000, y is incremented, else y is decremented.\n- x is incremented at the end of each iteration.\n\nNow, let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/\n```",
            "First, let's note the pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is initialized to 0.\n\nNext, let's analyze the loop condition and loop body:\n- The loop condition is x < 1000000.\n- If x is less than 500000, y is incremented.\n- If x is greater than or equal to 500000, y is decremented.\n- x is incremented in every iteration.\n\nNow, let's find the loop invariants:\n\n1. x is always non-negative and less than or equal to 1000000.\n2. y is always non-negative.\n3. If x is less than 500000, y is incremented, otherwise, y is decremented.\n4. After the loop, x is equal to 1000000.\n\nHere are the loop invariants in ACSL annotation format:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant y >= 0;\n    loop invariant (x < 500000) ==> (y == x);\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/\n```",
            "First, let's analyze the given program:\n1. Pre-conditions and variable assignments:\n   - x is initialized to 0.\n   - y is initialized to 0.\n\n2. Loop condition:\n   - The loop continues while x < 1000000.\n\n3. Loop body:\n   - If x < 500000, y is incremented by 1.\n   - If x >= 500000, y is decremented by 1.\n   - x is incremented by 1 in each iteration.\n\n4. Post-condition:\n   - assert(y != 0);\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= y + 1000000;\n*/\n```\n\nExplanation of loop invariants:\n\n1. `0 <= x <= 1000000`: This invariant states that x is always between 0 and 1000000, inclusive. It is true before the loop execution since x is initialized to 0, true during every iteration because x is incremented by 1, and true after the loop termination because the loop stops when x reaches 1000000.\n\n2. `0 <= y <= x`: This invariant states that y is always between 0 and x, inclusive. It is true before the loop execution since both x and y are initialized to 0, true during every iteration because y is incremented or decremented based on x's value, and true after the loop termination since y can never be greater than x.\n\n3. `x <= y + 1000000`: This invariant states that x is always less than or equal to y plus 1000000. It is true before the loop execution since x is initialized to 0, true during every iteration because x is incremented by 1 and y is incremented or decremented based on x's value, and true after the loop termination because the maximum value of x is 1000000. This invariant, combined with the previous one, implies the post-condition (y != 0) after the loop termination.",
            "First, let's note the pre-conditions and variable assignments in the program:\n- x = 0\n- y = 0\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: x < 1000000\n\nNow, let's find the loop invariants:\n\n1. x is always between 0 and 1000000 (inclusive) during loop execution.\n2. y is always between 0 and 500000 (inclusive) during loop execution.\n3. When x < 500000, y is equal to x.\n4. When x >= 500000, y is equal to 1000000 - x.\n\nLet's write down the loop invariants using ACSL annotations:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. x is initialized to 0.\n2. y is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is \"x < 1000000\".\n2. Inside the loop, if x < 500000, y is incremented; otherwise, y is decremented.\n3. x is incremented in every iteration.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y >= 0);\n*/\n```",
            "First, let's make a note of the variable assignments and the loop condition:\n- x is initialized to 0.\n- y is initialized to 0.\n- The loop condition is (x < 1000000).\n\nNow, let's analyze the loop body:\n- If x < 500000, y is incremented.\n- Otherwise, y is decremented.\n- x is incremented at the end of each iteration.\n\nWe can now derive the loop invariants. We need invariants that are true before the loop execution, during every iteration, and after the loop termination. These invariants must imply the post-condition (y != 0).\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/\n```\n\nHere's the explanation for the invariants:\n- `0 <= x <= 1000000`: x starts at 0 and is incremented in every iteration until it reaches 1000000, at which point the loop terminates.\n- `0 <= y <= 500000`: y starts at 0, increases by 1 for the first 500000 iterations, and decreases by 1 for the remaining iterations, never exceeding 500000.\n- `x <= y + 500000`: This relation holds true because when x < 500000, y increases and when x >= 500000, y decreases, maintaining the relation.\n- `(x >= 500000) ==> (y == 1000000 - x)`: When x >= 500000, y starts decreasing by 1, and it decreases exactly as many times as required to reach the value (1000000 - x) at the end of the loop.",
            "First, let's note the variable assignments and the loop condition:\n\n- Variables: x = 0, y = 0\n- Loop condition: x < 1000000\n\nNow, let's analyze the loop body and find the loop invariants:\n\n1. x increases by 1 in every iteration.\n2. y increases by 1 when x is less than 500000.\n3. y decreases by 1 when x is greater than or equal to 500000.\n\nBased on these observations, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= 1000000 ==> y <= x;\n    loop invariant x >= 500000 ==> y <= 1000000 - x;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 1000000 - y;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= 1000000 ==> y <= 500000;\n    loop invariant x >= 500000 ==> y >= 0;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x >= y;\n    loop invariant x <= 2 * y;\n*/",
            "/*@ \n    loop invariant 0 <= x && x <= 1000000;\n    loop invariant 0 <= y && y <= 1000000;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/",
            "@{\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n  @}",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 500000 ==> y == x;\n    loop invariant x > 500000 ==> y == 1000000 - x;\n */",
            "/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 1000000 - y;\n  loop invariant (x < 500000) ==> (y == x);\n  loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
            "/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 500000 ==> y == x;\n  loop invariant x > 500000 ==> y == 1000000 - x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant y >= 0;\n    loop invariant (x < 500000) ==> (y == x);\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= y + 1000000;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y >= 0);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
            "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= 1000000 ==> y <= x;\n    loop invariant x >= 500000 ==> y <= 1000000 - x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 1000000 - y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is established but not preserved.\nloop invariant x <= 1000000 - y is established but not preserved.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= 1000000 ==> y <= 500000;\n    loop invariant x >= 500000 ==> y >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is established but not preserved.\nloop invariant x <= 1000000 ==> y <= 500000 is established but not preserved.\nloop invariant x >= 500000 ==> y >= 0 is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\nloop invariant i4: x >= 500000 ==> y >= 0;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x >= y;\n    loop invariant x <= 2 * y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x >= y is inductive.\nloop invariant x <= 2 * y is established but not preserved.\nAssertion y != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\n\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x && x <= 1000000;\n    loop invariant 0 <= y && y <= 1000000;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x && x <= 1000000 is inductive.\nloop invariant 0 <= y && y <= 1000000 is inductive.\nloop invariant (x <= 500000) ==> (y == x) is inductive.\nloop invariant (x > 500000) ==> (y == 1000000 - x) is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x && x <= 1000000;\nloop invariant i2: 0 <= y && y <= 1000000;\nloop invariant i3: (x <= 500000) ==> (y == x);\nloop invariant i4: (x > 500000) ==> (y == 1000000 - x);\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "@{\n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n  @}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x < 500000 ==> y == x is inductive.\nloop invariant x >= 500000 ==> y == 1000000 - x is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x < 500000 ==> y == x;\nloop invariant i4: x >= 500000 ==> y == 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= 500000 ==> y == x;\n    loop invariant x > 500000 ==> y == 1000000 - x;\n */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 500000 ==> y == x is inductive.\nloop invariant x > 500000 ==> y == 1000000 - x is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x <= 500000 ==> y == x;\nloop invariant i4: x > 500000 ==> y == 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 1000000 - y;\n  loop invariant (x < 500000) ==> (y == x);\n  loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 1000000 - y is inductive.\nloop invariant (x < 500000) ==> (y == x) is inductive.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x <= 1000000 - y;\nloop invariant i4: (x < 500000) ==> (y == x);\nloop invariant i5: (x >= 500000) ==> (y == 1000000 - x);\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant 0 <= x <= 1000000;\n  loop invariant 0 <= y <= 1000000;\n  loop invariant x <= 500000 ==> y == x;\n  loop invariant x > 500000 ==> y == 1000000 - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 500000 ==> y == x is inductive.\nloop invariant x > 500000 ==> y == 1000000 - x is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x <= 500000 ==> y == x;\nloop invariant i4: x > 500000 ==> y == 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant (x <= 500000) ==> (y == x);\n    loop invariant (x > 500000) ==> (y == 1000000 - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is inductive.\nloop invariant (x <= 500000) ==> (y == x) is inductive.\nloop invariant (x > 500000) ==> (y == 1000000 - x) is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= x;\nloop invariant i3: (x <= 500000) ==> (y == x);\nloop invariant i4: (x > 500000) ==> (y == 1000000 - x);\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant y >= 0;\n    loop invariant (x < 500000) ==> (y == x);\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant (x < 500000) ==> (y == x) is inductive.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: y >= 0;\nloop invariant i3: (x < 500000) ==> (y == x);\nloop invariant i4: (x >= 500000) ==> (y == 1000000 - x);\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= x;\n    loop invariant x <= y + 1000000;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is established but not preserved.\nloop invariant x <= y + 1000000 is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\nloop invariant i3: x <= y + 1000000;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x < 500000 ==> y == x;\n    loop invariant x >= 500000 ==> y == 1000000 - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is inductive.\nloop invariant x < 500000 ==> y == x is inductive.\nloop invariant x >= 500000 ==> y == 1000000 - x is inductive.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 500000;\nloop invariant i3: x < 500000 ==> y == x;\nloop invariant i4: x >= 500000 ==> y == 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 1000000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y >= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is established but not preserved.\nloop invariant x <= y + 500000 is established but not preserved.\nloop invariant (x >= 500000) ==> (y >= 0) is inductive.\nAssertion y != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\nloop invariant i4: (x >= 500000) ==> (y >= 0);\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= y + 500000;\n    loop invariant (x >= 500000) ==> (y == 1000000 - x);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant x <= y + 500000 is established but not preserved.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is established but not preserved.\nAssertion y != 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\n\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= x <= 1000000;\n    loop invariant 0 <= y <= 500000;\n    loop invariant x <= 1000000 ==> y <= x;\n    loop invariant x >= 500000 ==> y <= 1000000 - x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is established but not preserved.\nloop invariant x <= 1000000 ==> y <= x is inductive.\nloop invariant x >= 500000 ==> y <= 1000000 - x is established but not preserved.\nAssertion y != 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\n\n\n\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 1000000 - y is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is inductive.\nloop invariant x <= 1000000 ==> y <= 500000 is inductive.\nloop invariant x >= 500000 ==> y >= 0 is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x >= y is inductive.\nloop invariant x <= 2 * y is established but not preserved.\nloop invariant 0 <= x && x <= 1000000 is inductive.\nloop invariant 0 <= y && y <= 1000000 is inductive.\nloop invariant (x <= 500000) ==> (y == x) is inductive.\nloop invariant (x > 500000) ==> (y == 1000000 - x) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x < 500000 ==> y == x is inductive.\nloop invariant x >= 500000 ==> y == 1000000 - x is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 500000 ==> y == x is inductive.\nloop invariant x > 500000 ==> y == 1000000 - x is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 1000000 - y is inductive.\nloop invariant (x < 500000) ==> (y == x) is inductive.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= 500000 ==> y == x is inductive.\nloop invariant x > 500000 ==> y == 1000000 - x is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is inductive.\nloop invariant (x <= 500000) ==> (y == x) is inductive.\nloop invariant (x > 500000) ==> (y == 1000000 - x) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant (x < 500000) ==> (y == x) is inductive.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= x is inductive.\nloop invariant x <= y + 1000000 is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is inductive.\nloop invariant x < 500000 ==> y == x is inductive.\nloop invariant x >= 500000 ==> y == 1000000 - x is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 1000000 is inductive.\nloop invariant x <= y + 500000 is inductive.\nloop invariant (x >= 500000) ==> (y >= 0) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is inductive.\nloop invariant x <= y + 500000 is inductive.\nloop invariant (x >= 500000) ==> (y == 1000000 - x) is inductive.\nloop invariant 0 <= x <= 1000000 is inductive.\nloop invariant 0 <= y <= 500000 is inductive.\nloop invariant x <= 1000000 ==> y <= x is inductive.\nloop invariant x >= 500000 ==> y <= 1000000 - x is inductive.\nAssertion y != 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x <= 1000000 - y;\nloop invariant i4: 0 <= x <= 1000000;\nloop invariant i5: 0 <= y <= x;\nloop invariant i6: x <= 1000000 ==> y <= 500000;\nloop invariant i7: x >= 500000 ==> y >= 0;\nloop invariant i8: 0 <= x <= 1000000;\nloop invariant i9: 0 <= y <= 1000000;\nloop invariant i10: x >= y;\nloop invariant i11: x <= 2 * y;\nloop invariant i12: 0 <= x && x <= 1000000;\nloop invariant i13: 0 <= y && y <= 1000000;\nloop invariant i14: (x <= 500000) ==> (y == x);\nloop invariant i15: (x > 500000) ==> (y == 1000000 - x);\nloop invariant i16: 0 <= x <= 1000000;\nloop invariant i17: 0 <= y <= 1000000;\nloop invariant i18: x < 500000 ==> y == x;\nloop invariant i19: x >= 500000 ==> y == 1000000 - x;\nloop invariant i20: 0 <= x <= 1000000;\nloop invariant i21: 0 <= y <= 1000000;\nloop invariant i22: x <= 500000 ==> y == x;\nloop invariant i23: x > 500000 ==> y == 1000000 - x;\nloop invariant i24: 0 <= x <= 1000000;\nloop invariant i25: 0 <= y <= 1000000;\nloop invariant i26: x <= 1000000 - y;\nloop invariant i27: (x < 500000) ==> (y == x);\nloop invariant i28: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i29: 0 <= x <= 1000000;\nloop invariant i30: 0 <= y <= 1000000;\nloop invariant i31: x <= 500000 ==> y == x;\nloop invariant i32: x > 500000 ==> y == 1000000 - x;\nloop invariant i33: 0 <= x <= 1000000;\nloop invariant i34: 0 <= y <= x;\nloop invariant i35: (x <= 500000) ==> (y == x);\nloop invariant i36: (x > 500000) ==> (y == 1000000 - x);\nloop invariant i37: 0 <= x <= 1000000;\nloop invariant i38: y >= 0;\nloop invariant i39: (x < 500000) ==> (y == x);\nloop invariant i40: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i41: 0 <= x <= 1000000;\nloop invariant i42: 0 <= y <= x;\nloop invariant i43: x <= y + 1000000;\nloop invariant i44: 0 <= x <= 1000000;\nloop invariant i45: 0 <= y <= 500000;\nloop invariant i46: x < 500000 ==> y == x;\nloop invariant i47: x >= 500000 ==> y == 1000000 - x;\nloop invariant i48: 0 <= x <= 1000000;\nloop invariant i49: 0 <= y <= 1000000;\nloop invariant i50: x <= y + 500000;\nloop invariant i51: (x >= 500000) ==> (y >= 0);\nloop invariant i52: 0 <= x <= 1000000;\nloop invariant i53: 0 <= y <= 500000;\nloop invariant i54: x <= y + 500000;\nloop invariant i55: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i56: 0 <= x <= 1000000;\nloop invariant i57: 0 <= y <= 500000;\nloop invariant i58: x <= 1000000 ==> y <= x;\nloop invariant i59: x >= 500000 ==> y <= 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main(void) {\n  unsigned int x = 0;\n  unsigned int y = 0;\n  /*@\nloop invariant i1: 0 <= x <= 1000000;\nloop invariant i2: 0 <= y <= 1000000;\nloop invariant i3: x <= 1000000 - y;\nloop invariant i4: 0 <= x <= 1000000;\nloop invariant i5: 0 <= y <= x;\nloop invariant i6: x <= 1000000 ==> y <= 500000;\nloop invariant i7: x >= 500000 ==> y >= 0;\nloop invariant i8: 0 <= x <= 1000000;\nloop invariant i9: 0 <= y <= 1000000;\nloop invariant i10: x >= y;\n\nloop invariant i12: 0 <= x && x <= 1000000;\nloop invariant i13: 0 <= y && y <= 1000000;\nloop invariant i14: (x <= 500000) ==> (y == x);\nloop invariant i15: (x > 500000) ==> (y == 1000000 - x);\nloop invariant i16: 0 <= x <= 1000000;\nloop invariant i17: 0 <= y <= 1000000;\nloop invariant i18: x < 500000 ==> y == x;\nloop invariant i19: x >= 500000 ==> y == 1000000 - x;\nloop invariant i20: 0 <= x <= 1000000;\nloop invariant i21: 0 <= y <= 1000000;\nloop invariant i22: x <= 500000 ==> y == x;\nloop invariant i23: x > 500000 ==> y == 1000000 - x;\nloop invariant i24: 0 <= x <= 1000000;\nloop invariant i25: 0 <= y <= 1000000;\nloop invariant i26: x <= 1000000 - y;\nloop invariant i27: (x < 500000) ==> (y == x);\nloop invariant i28: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i29: 0 <= x <= 1000000;\nloop invariant i30: 0 <= y <= 1000000;\nloop invariant i31: x <= 500000 ==> y == x;\nloop invariant i32: x > 500000 ==> y == 1000000 - x;\nloop invariant i33: 0 <= x <= 1000000;\nloop invariant i34: 0 <= y <= x;\nloop invariant i35: (x <= 500000) ==> (y == x);\nloop invariant i36: (x > 500000) ==> (y == 1000000 - x);\nloop invariant i37: 0 <= x <= 1000000;\nloop invariant i38: y >= 0;\nloop invariant i39: (x < 500000) ==> (y == x);\nloop invariant i40: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i41: 0 <= x <= 1000000;\nloop invariant i42: 0 <= y <= x;\nloop invariant i43: x <= y + 1000000;\nloop invariant i44: 0 <= x <= 1000000;\nloop invariant i45: 0 <= y <= 500000;\nloop invariant i46: x < 500000 ==> y == x;\nloop invariant i47: x >= 500000 ==> y == 1000000 - x;\nloop invariant i48: 0 <= x <= 1000000;\nloop invariant i49: 0 <= y <= 1000000;\n\nloop invariant i51: (x >= 500000) ==> (y >= 0);\nloop invariant i52: 0 <= x <= 1000000;\nloop invariant i53: 0 <= y <= 500000;\n\nloop invariant i55: (x >= 500000) ==> (y == 1000000 - x);\nloop invariant i56: 0 <= x <= 1000000;\nloop invariant i57: 0 <= y <= 500000;\nloop invariant i58: x <= 1000000 ==> y <= x;\nloop invariant i59: x >= 500000 ==> y <= 1000000 - x;\n*/\nwhile (x < 1000000) {\n    if (x<500000) {\n\ty++;\n    } else {\n\ty--;\n    }\n\tx++;\n  }\n  {;\n//@ assert(y!=0);\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c"
        ],
        "skipped": [],
        "total": 8,
        "success_count": 2,
        "failure_count": 6,
        "success_rate": 0.25
    }
}