{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  while (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's take note of the pre-conditions and variable assignments:\n\n1. `n` is a non-deterministic unsigned char from the `unknown_uchar()` function.\n2. The loop will not execute if `n == 0`.\n3. `v` is initialized to 0.\n4. `s` is initialized to 0.\n5. `i` is initialized to 0.\n\nNow, let's analyze the loop body and loop condition:\n\n1. Loop condition: `i < n`\n2. Loop body: `v` is assigned a new non-deterministic unsigned char value from `unknown_uchar()`, `s` is updated by adding `v` to it, and `i` is incremented by 1.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, in every iteration of the loop, and after the loop termination, `0 <= i`.\n2. Before the loop execution, in every iteration of the loop, and after the loop termination, `i <= n`.\n3. Before the loop execution, in every iteration of the loop, and after the loop termination, `0 <= v`.\n4. Before the loop execution, in every iteration of the loop, and after the loop termination, `v <= 255`. (since v is an unsigned char)\n5. Before the loop execution, in every iteration of the loop, and after the loop termination, `0 <= s`.\n\nNow we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant 0 <= v;\n    loop invariant v <= 255;\n    loop invariant 0 <= s;\n*/\n```",
            "Let's first analyze the given program and identify the pre-conditions, loop condition, and post-conditions.\n\nPre-conditions and variable assignments:\n1. n is an unsigned char and is assigned an unknown value.\n2. If n == 0, the program returns 0.\n3. v is initialized to 0.\n4. s is initialized to 0.\n5. i is initialized to 0.\n\nLoop condition: i < n\n\nPost-conditions:\n1. If s < v, the program returns 1 (assert(\\false)).\n2. If s > 65025, the program returns 1 (assert(\\false)).\n3. Else, the program returns 0.\n\nNow let's find the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= s <= 65025;\n  loop invariant 0 <= v <= 255;\n  loop invariant s >= i * v;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition by ensuring:\n1. i is always between 0 and n (inclusive).\n2. s is always between 0 and 65025 (inclusive).\n3. v is always between 0 and 255 (inclusive).\n4. s is always greater than or equal to the product of i and v.",
            "1. Pre-conditions and variable assignments:\n- n is assigned an unknown unsigned char value.\n- v is initialized to 0.\n- s and i are initialized to 0.\n\n2. Loop condition and body analysis:\n- Loop condition: i < n\n- Loop body: v is assigned an unknown unsigned char value, s is incremented by v, and i is incremented by 1.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i*v_min ==> s >= i;\n  loop invariant s <= i*v_max ==> s <= i*255;\n*/\n```\n\nExplanation:\n- i1: i is always between 0 and n (inclusive).\n- i2: v is an unsigned char, so it is always between 0 and 255 (inclusive).\n- i3: s is the sum of unsigned char values, so it is always between 0 and 65025 (inclusive).\n- i4: If s >= i*v_min (v_min = 0 for unsigned char), then s >= i. This invariant holds true before the loop, during the loop, and after the loop.\n- i5: If s <= i*v_max (v_max = 255 for unsigned char), then s <= i*255. This invariant holds true before the loop, during the loop, and after the loop.",
            "First, let's note the pre-conditions and variable assignments:\n- n is an unsigned char with an unknown value\n- If n == 0, the program returns 0\n- v is an unsigned char initialized to 0\n- s is an unsigned int initialized to 0\n- i is an unsigned int initialized to 0\n\nNow, let's analyze the loop:\n- The loop condition is i < n\n- Inside the loop, v is assigned an unknown value from the unknown_uchar() function\n- s is incremented by v\n- i is incremented by 1\n\nNow, let's determine the loop invariants:\n\n1. Loop invariant for i:\n- i starts at 0, increments by 1 every iteration, and the loop stops when i >= n.\n- So, i is always non-negative and less than or equal to n.\n\n2. Loop invariant for s:\n- s starts at 0 and is incremented by v in each iteration.\n- Since v is an unsigned char, its minimum value is 0 and its maximum value is 255.\n- In each iteration, s += v, so the maximum value of s is 65025 (255 * 255) for the maximum value of n (255).\n\n3. Loop invariant for v:\n- v is assigned an unknown value from the unknown_uchar() function in each iteration.\n- Since it's an unsigned char, v is always in the range of 0 to 255.\n\nConsidering these invariants, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant 0 <= v && v <= 255;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n1. `unsigned char n = unknown_uchar();` (n is a non-deterministic value from 0 to 255)\n2. `unsigned char v = 0;`\n3. `unsigned int  s = 0;`\n4. `unsigned int  i = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\nLoop condition: `i < n`\n\nNow, let's find the necessary loop invariants of the while loop.\n\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant s >= i * 255 ==> s - i * 255 <= 255 * (n - i);\n    loop invariant s < i * 255 ==> 255 * i - s <= 255 * n;\n*/\n```",
            "Before diving into the loop invariants, let's analyze the program:\n\n1. Pre-conditions: n is assigned a value from unknown_uchar() and is an unsigned char. If n is 0, the program returns 0.\n2. Variable assignments: v is initialized to 0, s and i are initialized to 0.\n3. Loop condition: i < n\n\nNow, let's find the loop invariants:\n\n1. i is always non-negative and less than or equal to n.\n2. s is an unsigned int and will be non-negative.\n3. v is an unsigned char and will be in the range of 0 to 255.\n\nConsidering these observations, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v <= 255;\n*/\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n- n is assigned a value from the unknown_uchar() function and is an unsigned char.\n- If n is 0, the function returns 0, so we only need to consider the case where n > 0.\n- v is initialized to 0 and is an unsigned char.\n- s is initialized to 0 and is an unsigned int.\n- i is initialized to 0 and is an unsigned int.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (i < n).\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> 0 <= s + v <= 65025;\n*/\n```\n\nIn the loop invariants:\n- i is always between 0 and n (inclusive).\n- v is always between 0 and 255 (inclusive) since it is an unsigned char.\n- s is always between 0 and 65025 (inclusive) since it accumulates the sum of unsigned char values.\n- If i is less than n, the sum of s and v is also between 0 and 65025 (inclusive) since both s and v are bounded.",
            "First, let's note the pre-conditions and variable assignments:\n\n1. n is an unsigned char from unknown_uchar().\n2. If n is 0, the program returns 0.\n3. v is initialized as an unsigned char with value 0.\n4. s is initialized as an unsigned int with value 0.\n5. i is initialized as an unsigned int with value 0.\n\nNow, let's analyze the loop body and note the loop condition:\nThe loop condition is (i < n).\n\nLet's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition:\n\nLoop invariant 1: i <= n\nLoop invariant 2: s <= 255 * i\n\nThe loop invariants are:\n\n```\n/*@ \n    loop invariant i <= n;\n    loop invariant s <= 255 * i;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n\n- n is assigned an unknown value from unknown_uchar() and is an unsigned char\n- v is initialized to 0 and is an unsigned char\n- s is initialized to 0 and is an unsigned int\n- i is initialized to 0 and is an unsigned int\n- The loop condition is \"i < n\"\n\nNow, let's find the necessary loop invariants:\n\n- i is always non-negative and less than or equal to n\n- s is always non-negative\n- v is always non-negative and less than or equal to s\n\nHere are the loop invariants:\n```\n/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v && v <= s;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments:\n\n- n is assigned a value from unknown_uchar(). Since unsigned char ranges from 0 to 255, n is in the range [0, 255].\n- If n is 0, the program terminates early.\n- v and s are initialized to 0.\n- i is initialized to 0.\n\nNow let's analyze the loop condition and body:\n\n- The loop condition is (i < n).\n- Inside the loop, v is assigned a value from unknown_uchar(). Since unsigned char ranges from 0 to 255, v is in the range [0, 255].\n- s is incremented by v.\n- i is incremented by 1.\n\nBased on this analysis, we can write the loop invariants as follows:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i * (i - 1) / 2;\n  loop invariant s <= i * 255;\n*/\n```\n\nExplanation:\n- i starts from 0 and increments by 1 each iteration, so it stays within the range [0, n].\n- v is assigned a value from unknown_uchar(), which is in the range [0, 255].\n- s is the sum of unsigned char values, so it stays within the range [0, 65025].\n- The minimum value of v in each iteration is 0, so the minimum value of s after i iterations is i * (i - 1) / 2, which is the sum of integers from 0 to i-1.\n- The maximum value of v in each iteration is 255, so the maximum value of s after i iterations is i * 255.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. n is a non-deterministic unsigned char, and the loop only executes if n > 0.\n2. v is initialized to 0.\n3. s is initialized to 0.\n4. i is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is `i < n`.\n\nNow, let's output the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * v;\n    loop invariant s <= i * 255;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n1. n is a non-deterministic unsigned char value.\n2. v is an unsigned char value initialized to 0.\n3. s is an unsigned int value initialized to 0.\n4. i is an unsigned int value initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition:\nThe loop condition is `i < n`.\n\nNow, let's find the loop invariants:\n\nBefore the loop execution:\n1. i is 0.\n2. s is 0.\n\nIn every iteration of the loop:\n1. i is always less than or equal to n.\n2. v is always a non-deterministic unsigned char value.\n3. s is always less than or equal to 65025.\n\nAfter the loop termination:\n1. i is equal to n.\n\nConsidering all these invariants, the loop invariants for the while loop are:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant s <= 65025;\n*/\n```",
            "Before the loop execution, we have the following pre-conditions or variable assignments:\n\n1. `n` is assigned the value of `unknown_uchar()`.\n2. If `n == 0`, the program returns 0.\n3. `v` is initialized to 0.\n4. `s` is initialized to 0.\n5. `i` is initialized to 0.\n\nThe loop condition is `i < n`.\n\nBased on the given rules, let's find the necessary loop invariants:\n\n```\n/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant i <= n ==> s <= i * 255;\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: `i` is 0, `v` is 0, and `s` is 0.\n2. In every iteration of the loop: `i` increases by 1, `v` gets a new value from `unknown_uchar()`, and `s` is increased by `v`.\n3. After the loop termination: `i` is equal to `n`, and `s` is the sum of the `unknown_uchar()` values added during the loop iterations.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. unsigned char n = unknown_uchar();\n2. unsigned char v = 0;\n3. unsigned int  s = 0;\n4. unsigned int  i = 0;\n\nNow, analyze the loop body and make a note of the loop condition:\n\n- Loop condition: i < n\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= i * 255;\n*/\n```\n\nThe loop invariants imply the post-condition.",
            "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. `n` is assigned an unknown unsigned char value.\n2. If `n` is 0, the program returns 0.\n3. `v` is initialized to 0.\n4. `s` is initialized to 0.\n5. `i` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i < n`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * 255 ==> n == i;\n    loop invariant s < i * 255 ==> n > i;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `0 <= i <= n`: The loop variable `i` is always between 0 and `n` (inclusive).\n2. `0 <= v <= 255`: The variable `v` is an unsigned char, so its value is always between 0 and 255 (inclusive).\n3. `0 <= s <= 65025`: The variable `s` is the sum of `v` values, and since there can be at most `n` iterations, the maximum possible value of `s` is `n * 255`. As `n` is an unsigned char, the maximum value of `n` is 255, so the maximum value of `s` is `255 * 255 = 65025`.\n4. `s >= i * 255 ==> n == i`: If the sum `s` is greater than or equal to `i * 255`, it means that we have reached the maximum possible value for the sum in `i` iterations, so the number of iterations `n` must be equal to `i`.\n5. `s < i * 255 ==> n > i`: If the sum `s` is less than `i * 255`, it means that there is still room for the sum to increase, so the number of iterations `n` must be greater than `i`."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant 0 <= v;\n    loop invariant v <= 255;\n    loop invariant 0 <= s;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= s <= 65025;\n  loop invariant 0 <= v <= 255;\n  loop invariant s >= i * v;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i*v_min ==> s >= i;\n  loop invariant s <= i*v_max ==> s <= i*255;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant 0 <= v && v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant s >= i * 255 ==> s - i * 255 <= 255 * (n - i);\n    loop invariant s < i * 255 ==> 255 * i - s <= 255 * n;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v <= 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> 0 <= s + v <= 65025;\n*/",
            "/*@ \n    loop invariant i <= n;\n    loop invariant s <= 255 * i;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v && v <= s;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i * (i - 1) / 2;\n  loop invariant s <= i * 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * v;\n    loop invariant s <= i * 255;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant s <= 65025;\n*/",
            "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant i <= n ==> s <= i * 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= i * 255;\n*/",
            "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * 255 ==> n == i;\n    loop invariant s < i * 255 ==> n > i;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant 0 <= v;\n    loop invariant v <= 255;\n    loop invariant 0 <= s;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant 0 <= v is inductive.\nloop invariant v <= 255 is inductive.\nloop invariant 0 <= s is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: 0 <= v;\nloop invariant i4: v <= 255;\nloop invariant i5: 0 <= s;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= s <= 65025;\n  loop invariant 0 <= v <= 255;\n  loop invariant s >= i * v;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s <= 65025 is established but not preserved.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant s >= i * v is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\nloop invariant i3: 0 <= v <= 255;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i*v_min ==> s >= i;\n  loop invariant s <= i*v_max ==> s <= i*255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic variable v_min. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\n\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant 0 <= v && v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= s && s <= 65025 is established but not preserved.\nloop invariant 0 <= v && v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\n\nloop invariant i3: 0 <= v && v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= v && v <= 255;\n    loop invariant 0 <= s && s <= 65025;\n    loop invariant s >= i * 255 ==> s - i * 255 <= 255 * (n - i);\n    loop invariant s < i * 255 ==> 255 * i - s <= 255 * n;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= v && v <= 255 is inductive.\nloop invariant 0 <= s && s <= 65025 is established but not preserved.\nloop invariant s >= i * 255 ==> s - i * 255 <= 255 * (n - i) is established but not preserved.\nloop invariant s < i * 255 ==> 255 * i - s <= 255 * n is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= v && v <= 255;\n\n\nloop invariant i5: s < i * 255 ==> 255 * i - s <= 255 * n;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v <= 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= s is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= s;\nloop invariant i3: 0 <= v <= 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> 0 <= s + v <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is established but not preserved.\nloop invariant i <= n ==> 0 <= s + v <= 65025 is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i <= n;\n    loop invariant s <= 255 * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i <= n is inductive.\nloop invariant s <= 255 * i is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: i <= n;\nloop invariant i2: s <= 255 * i;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i && i <= n;\n    loop invariant 0 <= s;\n    loop invariant 0 <= v && v <= s;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i && i <= n is inductive.\nloop invariant 0 <= s is inductive.\nloop invariant 0 <= v && v <= s is established but not preserved.\nAssertion \\false: Partially proven\nAssertion \\false: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i && i <= n;\nloop invariant i2: 0 <= s;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant s >= i * (i - 1) / 2;\n  loop invariant s <= i * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant s >= i * (i - 1) / 2 is established but not preserved.\nloop invariant s <= i * 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\nloop invariant i5: s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * v;\n    loop invariant s <= i * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant s >= i * v is established but not preserved.\nloop invariant s <= i * 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\n\nloop invariant i5: s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant s <= 65025;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant s <= 65025 is established but not preserved.\nAssertion \\false: Unproven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant 0 <= i <= n;\n  loop invariant 0 <= v <= 255;\n  loop invariant 0 <= s <= 65025;\n  loop invariant i <= n ==> s <= i * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant i <= n ==> s <= i * 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: i <= n ==> s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant i <= n ==> s <= i * 255;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant i <= n ==> s <= i * 255 is inductive.\nAssertion \\false: Unproven\nAssertion \\false: Valid",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\nloop invariant i3: 0 <= s <= 65025;\nloop invariant i4: i <= n ==> s <= i * 255;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= v <= 255;\n    loop invariant 0 <= s <= 65025;\n    loop invariant s >= i * 255 ==> n == i;\n    loop invariant s < i * 255 ==> n > i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= n is inductive.\nloop invariant 0 <= v <= 255 is inductive.\nloop invariant 0 <= s <= 65025 is inductive.\nloop invariant s >= i * 255 ==> n == i is preserved but not established.\nloop invariant s < i * 255 ==> n > i is inductive.\nAssertion \\false: Partially proven\nAssertion \\false: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i <= n;\nloop invariant i2: 0 <= v <= 255;\n\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 25: unbound logic variable v_min. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: 0 <= v;\nloop invariant i4: v <= 255;\nloop invariant i5: 0 <= s;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: 0 <= s <= 65025;\nloop invariant i8: 0 <= v <= 255;\nloop invariant i9: s >= i * v;\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: 0 <= v <= 255;\nloop invariant i12: 0 <= s <= 65025;\nloop invariant i13: s >= i*v_min ==> s >= i;\nloop invariant i14: s <= i*v_max ==> s <= i*255;\nloop invariant i15: 0 <= i && i <= n;\nloop invariant i16: 0 <= s && s <= 65025;\nloop invariant i17: 0 <= v && v <= 255;\nloop invariant i18: 0 <= i && i <= n;\nloop invariant i19: 0 <= v && v <= 255;\nloop invariant i20: 0 <= s && s <= 65025;\nloop invariant i21: s >= i * 255 ==> s - i * 255 <= 255 * (n - i);\nloop invariant i22: s < i * 255 ==> 255 * i - s <= 255 * n;\nloop invariant i23: 0 <= i <= n;\nloop invariant i24: 0 <= s;\nloop invariant i25: 0 <= v <= 255;\nloop invariant i26: 0 <= i <= n;\nloop invariant i27: 0 <= v <= 255;\nloop invariant i28: 0 <= s <= 65025;\nloop invariant i29: i <= n ==> 0 <= s + v <= 65025;\nloop invariant i30: i <= n;\nloop invariant i31: s <= 255 * i;\nloop invariant i32: 0 <= i && i <= n;\nloop invariant i33: 0 <= s;\nloop invariant i34: 0 <= v && v <= s;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: 0 <= v <= 255;\nloop invariant i37: 0 <= s <= 65025;\nloop invariant i38: s >= i * (i - 1) / 2;\nloop invariant i39: s <= i * 255;\nloop invariant i40: 0 <= i <= n;\nloop invariant i41: 0 <= v <= 255;\nloop invariant i42: 0 <= s <= 65025;\nloop invariant i43: s >= i * v;\nloop invariant i44: s <= i * 255;\nloop invariant i45: 0 <= i <= n;\nloop invariant i46: s <= 65025;\nloop invariant i47: 0 <= i <= n;\nloop invariant i48: 0 <= v <= 255;\nloop invariant i49: 0 <= s <= 65025;\nloop invariant i50: i <= n ==> s <= i * 255;\nloop invariant i51: 0 <= i <= n;\nloop invariant i52: 0 <= v <= 255;\nloop invariant i53: 0 <= s <= 65025;\nloop invariant i54: i <= n ==> s <= i * 255;\nloop invariant i55: 0 <= i <= n;\nloop invariant i56: 0 <= v <= 255;\nloop invariant i57: 0 <= s <= 65025;\nloop invariant i58: s >= i * 255 ==> n == i;\nloop invariant i59: s < i * 255 ==> n > i;\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern unsigned char unknown_uchar(void);\n\nint main() {\n  unsigned char n = unknown_uchar();\n  if (n == 0) {\n    return 0;\n  }\n  unsigned char v = 0;\n  unsigned int  s = 0;\n  unsigned int  i = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: i <= n;\nloop invariant i3: 0 <= v;\nloop invariant i4: v <= 255;\nloop invariant i5: 0 <= s;\nloop invariant i6: 0 <= i <= n;\nloop invariant i7: 0 <= s <= 65025;\nloop invariant i8: 0 <= v <= 255;\n\nloop invariant i10: 0 <= i <= n;\nloop invariant i11: 0 <= v <= 255;\nloop invariant i12: 0 <= s <= 65025;\n\n\nloop invariant i15: 0 <= i && i <= n;\nloop invariant i16: 0 <= s && s <= 65025;\nloop invariant i17: 0 <= v && v <= 255;\nloop invariant i18: 0 <= i && i <= n;\nloop invariant i19: 0 <= v && v <= 255;\nloop invariant i20: 0 <= s && s <= 65025;\nloop invariant i21: s >= i * 255 ==> s - i * 255 <= 255 * (n - i);\nloop invariant i22: s < i * 255 ==> 255 * i - s <= 255 * n;\nloop invariant i23: 0 <= i <= n;\nloop invariant i24: 0 <= s;\nloop invariant i25: 0 <= v <= 255;\nloop invariant i26: 0 <= i <= n;\nloop invariant i27: 0 <= v <= 255;\nloop invariant i28: 0 <= s <= 65025;\n\nloop invariant i30: i <= n;\nloop invariant i31: s <= 255 * i;\nloop invariant i32: 0 <= i && i <= n;\nloop invariant i33: 0 <= s;\nloop invariant i34: 0 <= v && v <= s;\nloop invariant i35: 0 <= i <= n;\nloop invariant i36: 0 <= v <= 255;\nloop invariant i37: 0 <= s <= 65025;\n\nloop invariant i39: s <= i * 255;\nloop invariant i40: 0 <= i <= n;\nloop invariant i41: 0 <= v <= 255;\nloop invariant i42: 0 <= s <= 65025;\n\nloop invariant i44: s <= i * 255;\nloop invariant i45: 0 <= i <= n;\nloop invariant i46: s <= 65025;\nloop invariant i47: 0 <= i <= n;\nloop invariant i48: 0 <= v <= 255;\nloop invariant i49: 0 <= s <= 65025;\nloop invariant i50: i <= n ==> s <= i * 255;\nloop invariant i51: 0 <= i <= n;\nloop invariant i52: 0 <= v <= 255;\nloop invariant i53: 0 <= s <= 65025;\nloop invariant i54: i <= n ==> s <= i * 255;\nloop invariant i55: 0 <= i <= n;\nloop invariant i56: 0 <= v <= 255;\nloop invariant i57: 0 <= s <= 65025;\n\n\n*/\nwhile (i < n) {\n    v = unknown_uchar();\n    s += v;\n    ++i;\n  }\n  if (s < v) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  if (s > 65025) {\n    {; \n//@ assert(\\false);\n};\n    return 1;\n  }\n  return 0;\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c"
        ],
        "skipped": [],
        "total": 10,
        "success_count": 3,
        "failure_count": 7,
        "success_rate": 0.3
    }
}