{
    "logs": {
        "file": "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\twhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `float x = unknown_float();`\n2. `float octant1 = 0;`\n3. `float octant2 = pi/8;`\n4. `assume(x > octant1 && x < octant2);`\n5. `float oddExp = x;`\n6. `float evenExp = 1.0;`\n7. `float term = x;`\n8. `unsigned int count = 2;`\n9. `int multFactor = 0;`\n10. `int temp;`\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop is a while(1) loop, so it's an infinite loop with a break statement inside.\n- The break statement depends on the value of `temp`, which is assigned by `unknown_int()`.\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant term > 0.0;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition `evenExp >= oddExp`, which helps Frama-C verify the program's correctness.",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `float x = unknown_float();`\n2. `float octant1 = 0;`\n3. `float octant2 = pi/8;`\n4. `assume(x > octant1 && x < octant2);`\n5. `float oddExp = x;`\n6. `float evenExp = 1.0;`\n7. `float term = x;`\n8. `unsigned int count = 2;`\n9. `int multFactor = 0;`\n10. `int temp;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop is a `while(1)` loop, which means it will run indefinitely until a break statement is encountered.\n\nNow, let's output the loop invariants for the while loop:\n\n```\n//@\nloop invariant 0.0 <= octant1 <= x;\nloop invariant x <= octant2 <= pi/8;\nloop invariant term >= 0.0;\nloop invariant count >= 2;\nloop invariant count % 2 == 0;\nloop invariant multFactor == 1 || multFactor == -1;\nloop invariant evenExp >= 1.0;\nloop invariant oddExp >= x;\nloop invariant evenExp >= oddExp;\nloop assigns term, multFactor, evenExp, oddExp, count, temp;\n```",
            "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. float x = unknown_float();\n2. float octant1 = 0;\n3. float octant2 = pi/8;\n4. assume(x > octant1 && x < octant2);\n\nNext, analyze the loop body and make a note of the loop condition:\n1. The loop condition is \"while(1)\", which is an infinite loop, but it breaks out when \"temp == 0\".\n2. The loop body updates the variables term, count, multFactor, evenExp, and oddExp.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0.0 <= octant1;\n    loop invariant octant1 < octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant term >= 0.0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1.0;\n    loop invariant oddExp >= x;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n- `x` is assigned an unknown float value.\n- `octant1` is assigned the value 0.\n- `octant2` is assigned the value `pi/8`.\n- The program assumes `x > octant1 && x < octant2`.\n- `oddExp` is assigned the value `x`.\n- `evenExp` is assigned the value 1.0.\n- `term` is assigned the value `x`.\n- `count` is initialized to 2.\n- `multFactor` and `temp` have no initial values, but they are assigned values within the loop.\n\nNow let's analyze the loop body and make a note of the loop condition:\n- The loop has no explicit loop condition, it continues until a break statement is executed when `temp == 0`.\n\nNow we can output the loop invariants:\n```\n/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant oddExp >= evenExp;\n    loop invariant evenExp >= 1;\n*/\n```",
            "First, note the pre-conditions and variable assignments:\n- x is a non-deterministic float value between octant1 (0) and octant2 (pi/8).\n- oddExp is initially equal to x.\n- evenExp is initially equal to 1.0.\n- term is initially equal to x.\n- count is initially equal to 2.\n- multFactor is initially 0.\n\nNow, analyze the loop body and make a note of the loop condition:\n- The loop is a while(1) loop, which means it will run indefinitely until a break statement is executed.\n- The break statement is executed when temp (an unknown integer) is equal to 0.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n@{\n    loop invariant count >= 2;\n    loop invariant term >= 0.0;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1 && oddExp <= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp - oddExp <= evenExp;\n@}\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post condition \"evenExp >= oddExp\".",
            "First, let's note the initial variable assignments and the loop condition:\n- `float x = unknown_float();`\n- `float octant1 = 0;`\n- `float octant2 = pi/8;`\n- `assume(x > octant1 && x < octant2);`\n- `float oddExp = x;`\n- `float evenExp = 1.0;`\n- `float term = x;`\n- `unsigned int count = 2;`\n- `int multFactor = 0;`\n- Loop condition: `while(1)` (infinite loop with a break inside)\n\nNow, let's find the loop invariants:\n```\n/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant term >= 0;\n    loop invariant oddExp >= evenExp;\n*/\n```",
            "First, let's note the pre-conditions and variable assignments:\n\n1. x is an unknown float value.\n2. octant1 = 0.\n3. octant2 = pi/8.\n4. The assumption states that x > octant1 and x < octant2.\n5. oddExp = x.\n6. evenExp = 1.0.\n7. term = x.\n8. count = 2.\n9. multFactor and temp are uninitialized.\n\nNow, let's analyze the loop body and note the loop condition:\n\n1. The loop has no explicit condition and runs infinitely until a break statement is executed.\n2. term is updated in each iteration.\n3. multFactor is calculated based on count.\n4. evenExp and oddExp are updated based on term and multFactor.\n5. count is incremented twice in each iteration.\n6. temp is an unknown integer value and is used to break the loop when it is 0.\n\nHere are the loop invariants:\n\n```\n/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= oddExp;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition, which is evenExp >= oddExp.",
            "First, let's note the pre-conditions and variable assignments before the loop:\n\n1. x is a float with an unknown value.\n2. octant1 = 0 and octant2 = pi/8.\n3. x > octant1 and x < octant2 (pre-condition).\n4. oddExp = x and evenExp = 1.0.\n5. term = x.\n6. count = 2.\n7. multFactor = 0.\n\nNow, let's analyze the loop condition and body:\n\nThe loop is a while(1) loop, which means it's an infinite loop that relies on an internal break statement. The break statement is controlled by the variable temp, which is assigned an unknown integer value in every iteration. The break statement is executed when temp is equal to 0.\n\nWe can now determine the loop invariants:\n\n```\n/*@ \n    loop invariant x > 0 && x < pi/8;\n    loop invariant term >= 0;\n    loop invariant 2 <= count;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp >= 1.0;\n*/\n```\n\nThese loop invariants are true:\n\n1. Before the loop execution: as given by the pre-conditions and variable assignments.\n2. In every iteration of the loop: as they hold during the loop body execution.\n3. After the loop termination: as they still hold when the loop breaks, ensuring the post-condition `evenExp >= oddExp` is met.",
            "Let's analyze the given program.\n\nPre-conditions and variable assignments:\n1. x is a non-deterministic float.\n2. octant1 = 0, octant2 = pi/8.\n3. We assume (x > octant1 && x < octant2).\n4. oddExp = x, evenExp = 1.0, term = x, count = 2, multFactor = 0.\n\nLoop condition:\n1. The loop is a while(1) loop, which means it will continue executing until a break statement is encountered.\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1;\n    loop invariant evenExp >= 1.0;\n    loop invariant term >= 0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant \\forall unsigned int k; 2 <= k < count ==> term * x / k <= oddExp && term * x / k <= evenExp;\n    loop invariant temp == 0 ==> (evenExp >= oddExp);\n*/\n```",
            "First, let's make a note of the pre-conditions, variable assignments, and loop condition:\n\n- Pre-condition: `x > octant1 && x < octant2`\n- Variable assignments:\n  - `float oddExp = x;`\n  - `float evenExp = 1.0;`\n  - `float term = x;`\n  - `unsigned int count = 2;`\n  - `int multFactor = 0;`\n- Loop condition: `while(1)` (infinite loop with a break statement)\n\nNow let's find the loop invariants:\n\n```\n/*@\n    loop invariant count >= 2;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant term >= 0.0;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant \\forall integer k; 0 <= k < count/2 ==> oddExp >= x*(1 - pow(x, 2*k)/(2*k)!) && evenExp >= 1 - x*(pow(x, 2*k-1)/(2*k-1)!);\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: since `count` is initialized to 2, `multFactor` to 0, `term` to x, `oddExp` to x, and `evenExp` to 1.0.\n2. In every iteration of the loop: the loop body maintains the invariants by updating the variables accordingly.\n3. After the loop termination: the loop invariants imply the post-condition `evenExp >= oddExp`.",
            "First, let's note the pre-conditions and variable assignments:\n- x is a non-deterministic float value, but we know it's between octant1 (0) and octant2 (pi/8).\n- oddExp is initially assigned the value of x.\n- evenExp is initially assigned the value of 1.0.\n- term is initially assigned the value of x.\n- count is initially assigned the value of 2.\n- multFactor is initially 0, but it will be updated in the loop.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop is a while(1) loop, which means it is an infinite loop with a break statement.\n- The break statement is executed when temp is 0, where temp is a non-deterministic integer value.\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant evenExp >= oddExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (\\forall integer k; 0 <= k < count/2; multFactor == (k % 2 == 0) ? 1 : -1);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThey help Frama-C verify the post-condition `evenExp >= oddExp`.",
            "First, note the variable assignments and pre-conditions in the program:\n\n1. `x` is assigned an unknown float value.\n2. `octant1` is assigned the value 0.\n3. `octant2` is assigned the value `pi/8`.\n4. The pre-condition is `x > octant1 && x < octant2`.\n\nNext, analyze the loop body and note the loop condition:\n\nThe loop condition is `1`, which means the loop will continue executing until a `break` statement is encountered.\n\nNow, let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant oddExp > evenExp;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1;\n    loop invariant \\forall integer k; 0 <= k < count ==> evenExp + oddExp * (multFactor * term) > evenExp;\n*/\n```\n\nThese loop invariants hold true:\n\n1. Before the loop execution.\n2. In every iteration of the loop.\n3. After the loop termination.\n\nAnd they imply the post-condition: `evenExp >= oddExp`.",
            "First, let's note down the pre-conditions and variable assignments:\n\n1. x > octant1 and x < octant2\n2. octant1 = 0\n3. octant2 = pi/8\n4. oddExp = x\n5. evenExp = 1.0\n6. term = x\n7. count = 2\n8. multFactor is either 1 or -1 depending on count\n\nNow, let's analyze the loop body and the loop condition:\n\n- The loop condition is \"while(1)\", meaning it is an infinite loop with a break statement inside.\n- Inside the loop, the term is updated by multiplying with x/count in each iteration.\n- The count variable is incremented in each iteration.\n- The multFactor is updated depending on the count value.\n- The evenExp and oddExp variables are updated by adding or subtracting the term depending on the multFactor.\n- The loop breaks when temp is 0.\n\nNow, let's derive the loop invariants:\n\n```\n/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (temp != 0) ==> (evenExp >= oddExp);\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition (evenExp >= oddExp) when the loop breaks (temp == 0).",
            "First, let's analyze the given code and make notes of the pre-conditions, variable assignments, and the loop condition:\n\n- Pre-conditions: x > octant1 && x < octant2\n- Variable assignments: x = unknown_float(), octant1 = 0, octant2 = pi/8, oddExp = x, evenExp = 1.0, term = x, count = 2, multFactor = 0\n- Loop condition: The loop is a \"while(1)\" loop, which means it is an infinite loop that only breaks when temp == 0.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= octant1;\n    loop invariant octant1 <= x;\n    loop invariant x <= octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 0 ==> evenExp >= oddExp;\n    loop invariant multFactor != 0 ==> evenExp <= oddExp;\n*/\n```\n\nThe above loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. These invariants help Frama-C verify the post-condition \"evenExp >= oddExp\" as mentioned in the assert statement.",
            "First, let's make a note of the pre-conditions and variable assignments:\n1. x is an unknown float.\n2. octant1 = 0\n3. octant2 = pi/8\n4. x > octant1 and x < octant2\n5. oddExp = x\n6. evenExp = 1.0\n7. term = x\n8. count = 2\n9. multFactor is initially 0 but will be updated in the loop.\n\nNow let's analyze the loop condition and body:\n1. The loop runs until temp == 0.\n2. term is updated in each iteration: term = term * (x/count).\n3. multFactor is updated in each iteration: multFactor = (count>>1 % 2 == 0) ? 1 : -1.\n4. evenExp and oddExp are updated in each iteration based on multFactor and term.\n5. count is incremented by 2 in each iteration.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant oddExp <= evenExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant term > 0.0;\n*/",
            "//@\nloop invariant 0.0 <= octant1 <= x;\nloop invariant x <= octant2 <= pi/8;\nloop invariant term >= 0.0;\nloop invariant count >= 2;\nloop invariant count % 2 == 0;\nloop invariant multFactor == 1 || multFactor == -1;\nloop invariant evenExp >= 1.0;\nloop invariant oddExp >= x;\nloop invariant evenExp >= oddExp;\nloop assigns term, multFactor, evenExp, oddExp, count, temp;",
            "/*@ \n    loop invariant 0.0 <= octant1;\n    loop invariant octant1 < octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant term >= 0.0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1.0;\n    loop invariant oddExp >= x;\n*/",
            "/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant oddExp >= evenExp;\n    loop invariant evenExp >= 1;\n*/",
            "@{\n    loop invariant count >= 2;\n    loop invariant term >= 0.0;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1 && oddExp <= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp - oddExp <= evenExp;\n@}",
            "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant term >= 0;\n    loop invariant oddExp >= evenExp;\n*/",
            "/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= oddExp;\n*/",
            "/*@ \n    loop invariant x > 0 && x < pi/8;\n    loop invariant term >= 0;\n    loop invariant 2 <= count;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp >= 1.0;\n*/",
            "/*@\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1;\n    loop invariant evenExp >= 1.0;\n    loop invariant term >= 0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant \\forall unsigned int k; 2 <= k < count ==> term * x / k <= oddExp && term * x / k <= evenExp;\n    loop invariant temp == 0 ==> (evenExp >= oddExp);\n*/",
            "/*@\n    loop invariant count >= 2;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant term >= 0.0;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant \\forall integer k; 0 <= k < count/2 ==> oddExp >= x*(1 - pow(x, 2*k)/(2*k)!) && evenExp >= 1 - x*(pow(x, 2*k-1)/(2*k-1)!);\n*/",
            "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant evenExp >= oddExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (\\forall integer k; 0 <= k < count/2; multFactor == (k % 2 == 0) ? 1 : -1);\n*/",
            "/*@ \n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant oddExp > evenExp;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1;\n    loop invariant \\forall integer k; 0 <= k < count ==> evenExp + oddExp * (multFactor * term) > evenExp;\n*/",
            "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (temp != 0) ==> (evenExp >= oddExp);\n*/",
            "/*@ \n    loop invariant 0 <= octant1;\n    loop invariant octant1 <= x;\n    loop invariant x <= octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 0 ==> evenExp >= oddExp;\n    loop invariant multFactor != 0 ==> evenExp <= oddExp;\n*/",
            "/*@ \n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant oddExp <= evenExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant term > 0.0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > octant1 is inductive.\nloop invariant x < octant2 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= oddExp is inductive.\nloop invariant term > 0.0 is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > octant1;\nloop invariant i2: x < octant2;\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "//@\nloop invariant 0.0 <= octant1 <= x;\nloop invariant x <= octant2 <= pi/8;\nloop invariant term >= 0.0;\nloop invariant count >= 2;\nloop invariant count % 2 == 0;\nloop invariant multFactor == 1 || multFactor == -1;\nloop invariant evenExp >= 1.0;\nloop invariant oddExp >= x;\nloop invariant evenExp >= oddExp;\nloop assigns term, multFactor, evenExp, oddExp, count, temp;",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0.0 <= octant1 <= x is inductive.\nloop invariant x <= octant2 <= pi/8 is inductive.\nloop invariant term >= 0.0 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant count % 2 == 0 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= 1.0 is inductive.\nloop invariant oddExp >= x is inductive.\nloop invariant evenExp >= oddExp is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: 0.0 <= octant1 <= x;\nloop invariant i2: x <= octant2 <= pi/8;\n\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 0.0 <= octant1;\n    loop invariant octant1 < octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant x > octant1;\n    loop invariant x < octant2;\n    loop invariant term >= 0.0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1.0;\n    loop invariant oddExp >= x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0.0 <= octant1 is inductive.\nloop invariant octant1 < octant2 is inductive.\nloop invariant octant2 <= pi/8 is inductive.\nloop invariant x > octant1 is inductive.\nloop invariant x < octant2 is inductive.\nloop invariant term >= 0.0 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= 1.0 is inductive.\nloop invariant oddExp >= x is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: 0.0 <= octant1;\nloop invariant i2: octant1 < octant2;\nloop invariant i3: octant2 <= pi/8;\nloop invariant i4: x > octant1;\nloop invariant i5: x < octant2;\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant oddExp >= evenExp;\n    loop invariant evenExp >= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > 0 && x < pi/8 is inductive.\nloop invariant octant1 == 0 is inductive.\nloop invariant octant2 == pi/8 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant term > 0 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant oddExp >= evenExp is inductive.\nloop invariant evenExp >= 1 is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > 0 && x < pi/8;\nloop invariant i2: octant1 == 0;\nloop invariant i3: octant2 == pi/8;\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "@{\n    loop invariant count >= 2;\n    loop invariant term >= 0.0;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1 && oddExp <= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp - oddExp <= evenExp;\n@}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant count >= 2 is established but not preserved.\nloop invariant term >= 0.0 is established but not preserved.\nloop invariant 0 <= multFactor <= 1 is established but not preserved.\nloop invariant octant1 == 0 is inductive.\nloop invariant octant2 == pi/8 is inductive.\nloop invariant x > octant1 && x < octant2 is inductive.\nloop invariant oddExp >= octant1 && oddExp <= x is established but not preserved.\nloop invariant evenExp >= 1.0 is established but not preserved.\nloop invariant evenExp >= oddExp is established but not preserved.\nloop invariant evenExp - oddExp <= evenExp is inductive.\nAssertion evenExp >= oddExp: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\n\n\n\nloop invariant i4: octant1 == 0;\nloop invariant i5: octant2 == pi/8;\nloop invariant i6: x > octant1 && x < octant2;\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant term >= 0;\n    loop invariant oddExp >= evenExp;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant octant1 == 0 is inductive.\nloop invariant octant2 == pi/8 is inductive.\nloop invariant x > octant1 && x < octant2 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant term >= 0 is inductive.\nloop invariant oddExp >= evenExp is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: octant1 == 0;\nloop invariant i2: octant2 == pi/8;\nloop invariant i3: x > octant1 && x < octant2;\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant x > 0 && x < pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= oddExp;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > 0 && x < pi/8 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant term >= 0 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= 1 is inductive.\nloop invariant oddExp >= x is inductive.\nloop invariant evenExp >= oddExp is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > 0 && x < pi/8;\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant x > 0 && x < pi/8;\n    loop invariant term >= 0;\n    loop invariant 2 <= count;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= oddExp;\n    loop invariant evenExp >= 1.0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > 0 && x < pi/8 is inductive.\nloop invariant term >= 0 is inductive.\nloop invariant 2 <= count is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= oddExp is inductive.\nloop invariant evenExp >= 1.0 is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > 0 && x < pi/8;\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant x > octant1 && x < octant2;\n    loop invariant oddExp >= octant1;\n    loop invariant evenExp >= 1.0;\n    loop invariant term >= 0;\n    loop invariant count >= 2;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant \\forall unsigned int k; 2 <= k < count ==> term * x / k <= oddExp && term * x / k <= evenExp;\n    loop invariant temp == 0 ==> (evenExp >= oddExp);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x > octant1 && x < octant2 is inductive.\nloop invariant oddExp >= octant1 is inductive.\nloop invariant evenExp >= 1.0 is inductive.\nloop invariant term >= 0 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant \\forall unsigned int k; 2 <= k < count ==> term * x / k <= oddExp && term * x / k <= evenExp is inductive.\nloop invariant temp == 0 ==> (evenExp >= oddExp) is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > octant1 && x < octant2;\n\n\n\n\n\n\nloop invariant i8: temp == 0 ==> (evenExp >= oddExp);\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant count >= 2;\n    loop invariant 0 <= multFactor <= 1;\n    loop invariant term >= 0.0;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1.0;\n    loop invariant evenExp >= oddExp;\n    loop invariant \\forall integer k; 0 <= k < count/2 ==> oddExp >= x*(1 - pow(x, 2*k)/(2*k)!) && evenExp >= 1 - x*(pow(x, 2*k-1)/(2*k-1)!);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token '!'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant x > octant1 && x < octant2;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant evenExp >= oddExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (\\forall integer k; 0 <= k < count/2; multFactor == (k % 2 == 0) ? 1 : -1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 27: unexpected token ';'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: octant1 == 0;\nloop invariant i2: octant2 == pi/8;\nloop invariant i3: x > octant1 && x < octant2;\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant count >= 2;\n    loop invariant term > 0;\n    loop invariant oddExp > evenExp;\n    loop invariant oddExp >= x;\n    loop invariant evenExp >= 1;\n    loop invariant \\forall integer k; 0 <= k < count ==> evenExp + oddExp * (multFactor * term) > evenExp;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant count >= 2 is inductive.\nloop invariant term > 0 is inductive.\nloop invariant oddExp > evenExp is preserved but not established.\nloop invariant oddExp >= x is inductive.\nloop invariant evenExp >= 1 is inductive.\nloop invariant \\forall integer k; 0 <= k < count ==> evenExp + oddExp * (multFactor * term) > evenExp is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant octant1 == 0;\n    loop invariant octant2 == pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant (temp != 0) ==> (evenExp >= oddExp);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant octant1 == 0 is inductive.\nloop invariant octant2 == pi/8 is inductive.\nloop invariant count >= 2 is inductive.\nloop invariant term >= 0 is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant (temp != 0) ==> (evenExp >= oddExp) is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: octant1 == 0;\nloop invariant i2: octant2 == pi/8;\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= octant1;\n    loop invariant octant1 <= x;\n    loop invariant x <= octant2;\n    loop invariant octant2 <= pi/8;\n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant multFactor == 0 ==> evenExp >= oddExp;\n    loop invariant multFactor != 0 ==> evenExp <= oddExp;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= octant1 is inductive.\nloop invariant octant1 <= x is inductive.\nloop invariant x <= octant2 is inductive.\nloop invariant octant2 <= pi/8 is inductive.\nloop invariant count >= 2 is established but not preserved.\nloop invariant term >= 0 is established but not preserved.\nloop invariant multFactor == 0 ==> evenExp >= oddExp is inductive.\nloop invariant multFactor != 0 ==> evenExp <= oddExp is established but not preserved.\nAssertion evenExp >= oddExp: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: 0 <= octant1;\nloop invariant i2: octant1 <= x;\nloop invariant i3: x <= octant2;\nloop invariant i4: octant2 <= pi/8;\n\n\nloop invariant i7: multFactor == 0 ==> evenExp >= oddExp;\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant count >= 2;\n    loop invariant term >= 0;\n    loop invariant oddExp <= evenExp;\n    loop invariant multFactor == 1 || multFactor == -1;\n    loop invariant evenExp >= 1;\n    loop invariant oddExp >= x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant count >= 2 is inductive.\nloop invariant term >= 0 is inductive.\nloop invariant oddExp <= evenExp is inductive.\nloop invariant multFactor == 1 || multFactor == -1 is preserved but not established.\nloop invariant evenExp >= 1 is inductive.\nloop invariant oddExp >= x is inductive.\nAssertion evenExp >= oddExp: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 97: unexpected token '!'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > octant1;\nloop invariant i2: x < octant2;\nloop invariant i3: count >= 2;\nloop invariant i4: multFactor == 1 || multFactor == -1;\nloop invariant i5: evenExp >= oddExp;\nloop invariant i6: term > 0.0;\nloop invariant i7: 0.0 <= octant1 <= x;\nloop invariant i8: x <= octant2 <= pi/8;\nloop invariant i9: term >= 0.0;\nloop invariant i10: count >= 2;\nloop invariant i11: count % 2 == 0;\nloop invariant i12: multFactor == 1 || multFactor == -1;\nloop invariant i13: evenExp >= 1.0;\nloop invariant i14: oddExp >= x;\nloop invariant i15: evenExp >= oddExp;\nloop invariant i16: 0.0 <= octant1;\nloop invariant i17: octant1 < octant2;\nloop invariant i18: octant2 <= pi/8;\nloop invariant i19: x > octant1;\nloop invariant i20: x < octant2;\nloop invariant i21: term >= 0.0;\nloop invariant i22: count >= 2;\nloop invariant i23: multFactor == 1 || multFactor == -1;\nloop invariant i24: evenExp >= 1.0;\nloop invariant i25: oddExp >= x;\nloop invariant i26: x > 0 && x < pi/8;\nloop invariant i27: octant1 == 0;\nloop invariant i28: octant2 == pi/8;\nloop invariant i29: count >= 2;\nloop invariant i30: term > 0;\nloop invariant i31: multFactor == 1 || multFactor == -1;\nloop invariant i32: oddExp >= evenExp;\nloop invariant i33: evenExp >= 1;\nloop invariant i34: count >= 2;\nloop invariant i35: term >= 0.0;\nloop invariant i36: 0 <= multFactor <= 1;\nloop invariant i37: octant1 == 0;\nloop invariant i38: octant2 == pi/8;\nloop invariant i39: x > octant1 && x < octant2;\nloop invariant i40: oddExp >= octant1 && oddExp <= x;\nloop invariant i41: evenExp >= 1.0;\nloop invariant i42: evenExp >= oddExp;\nloop invariant i43: evenExp - oddExp <= evenExp;\nloop invariant i44: octant1 == 0;\nloop invariant i45: octant2 == pi/8;\nloop invariant i46: x > octant1 && x < octant2;\nloop invariant i47: count >= 2;\nloop invariant i48: multFactor == 1 || multFactor == -1;\nloop invariant i49: term >= 0;\nloop invariant i50: oddExp >= evenExp;\nloop invariant i51: x > 0 && x < pi/8;\nloop invariant i52: count >= 2;\nloop invariant i53: term >= 0;\nloop invariant i54: multFactor == 1 || multFactor == -1;\nloop invariant i55: evenExp >= 1;\nloop invariant i56: oddExp >= x;\nloop invariant i57: evenExp >= oddExp;\nloop invariant i58: x > 0 && x < pi/8;\nloop invariant i59: term >= 0;\nloop invariant i60: 2 <= count;\nloop invariant i61: multFactor == 1 || multFactor == -1;\nloop invariant i62: evenExp >= oddExp;\nloop invariant i63: evenExp >= 1.0;\nloop invariant i64: x > octant1 && x < octant2;\nloop invariant i65: oddExp >= octant1;\nloop invariant i66: evenExp >= 1.0;\nloop invariant i67: term >= 0;\nloop invariant i68: count >= 2;\nloop invariant i69: multFactor == 1 || multFactor == -1;\nloop invariant i70: \\forall unsigned int k; 2 <= k < count ==> term * x / k <= oddExp && term * x / k <= evenExp;\nloop invariant i71: temp == 0 ==> (evenExp >= oddExp);\nloop invariant i72: count >= 2;\nloop invariant i73: 0 <= multFactor <= 1;\nloop invariant i74: term >= 0.0;\nloop invariant i75: oddExp >= x;\nloop invariant i76: evenExp >= 1.0;\nloop invariant i77: evenExp >= oddExp;\nloop invariant i78: \\forall integer k; 0 <= k < count/2 ==> oddExp >= x*(1 - pow(x, 2*k)/(2*k)!) && evenExp >= 1 - x*(pow(x, 2*k-1)/(2*k-1)!);\nloop invariant i79: octant1 == 0;\nloop invariant i80: octant2 == pi/8;\nloop invariant i81: x > octant1 && x < octant2;\nloop invariant i82: count >= 2;\nloop invariant i83: term >= 0;\nloop invariant i84: evenExp >= oddExp;\nloop invariant i85: multFactor == 1 || multFactor == -1;\nloop invariant i86: (\\forall integer k; 0 <= k < count/2; multFactor == (k % 2 == 0) ? 1 : -1);\nloop invariant i87: count >= 2;\nloop invariant i88: term > 0;\nloop invariant i89: oddExp > evenExp;\nloop invariant i90: oddExp >= x;\nloop invariant i91: evenExp >= 1;\nloop invariant i92: \\forall integer k; 0 <= k < count ==> evenExp + oddExp * (multFactor * term) > evenExp;\nloop invariant i93: octant1 == 0;\nloop invariant i94: octant2 == pi/8;\nloop invariant i95: count >= 2;\nloop invariant i96: term >= 0;\nloop invariant i97: multFactor == 1 || multFactor == -1;\nloop invariant i98: (temp != 0) ==> (evenExp >= oddExp);\nloop invariant i99: 0 <= octant1;\nloop invariant i100: octant1 <= x;\nloop invariant i101: x <= octant2;\nloop invariant i102: octant2 <= pi/8;\nloop invariant i103: count >= 2;\nloop invariant i104: term >= 0;\nloop invariant i105: multFactor == 0 ==> evenExp >= oddExp;\nloop invariant i106: multFactor != 0 ==> evenExp <= oddExp;\nloop invariant i107: count >= 2;\nloop invariant i108: term >= 0;\nloop invariant i109: oddExp <= evenExp;\nloop invariant i110: multFactor == 1 || multFactor == -1;\nloop invariant i111: evenExp >= 1;\nloop invariant i112: oddExp >= x;\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
        "combined_annotation_num_solver_calls": 11,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nfloat pi = 3.14159 ;\n\nint main()\n{\n\tfloat x = unknown_float() ;\n\tfloat octant1 = 0 ;\n\tfloat octant2 = pi/8 ;\n\tassume(x > octant1 && x < octant2) ;\n\tfloat oddExp = x ;\n\tfloat evenExp = 1.0 ;\n\tfloat term = x ;\n\tunsigned int count = 2 ;\n\tint multFactor = 0 ;\n\tint temp ;\n\n\t/*@\nloop invariant i1: x > octant1;\nloop invariant i2: x < octant2;\n\n\n\n\nloop invariant i7: 0.0 <= octant1 <= x;\nloop invariant i8: x <= octant2 <= pi/8;\n\n\n\n\n\n\n\nloop invariant i16: 0.0 <= octant1;\nloop invariant i17: octant1 < octant2;\nloop invariant i18: octant2 <= pi/8;\nloop invariant i19: x > octant1;\nloop invariant i20: x < octant2;\n\n\n\n\n\nloop invariant i26: x > 0 && x < pi/8;\nloop invariant i27: octant1 == 0;\nloop invariant i28: octant2 == pi/8;\n\n\n\n\n\n\n\n\nloop invariant i37: octant1 == 0;\nloop invariant i38: octant2 == pi/8;\nloop invariant i39: x > octant1 && x < octant2;\n\n\n\n\nloop invariant i44: octant1 == 0;\nloop invariant i45: octant2 == pi/8;\nloop invariant i46: x > octant1 && x < octant2;\n\n\n\n\nloop invariant i51: x > 0 && x < pi/8;\n\n\n\n\n\n\nloop invariant i58: x > 0 && x < pi/8;\n\n\n\n\n\nloop invariant i64: x > octant1 && x < octant2;\n\n\n\n\n\n\nloop invariant i71: temp == 0 ==> (evenExp >= oddExp);\n\n\n\n\n\n\n\nloop invariant i79: octant1 == 0;\nloop invariant i80: octant2 == pi/8;\nloop invariant i81: x > octant1 && x < octant2;\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i93: octant1 == 0;\nloop invariant i94: octant2 == pi/8;\n\n\n\n\nloop invariant i99: 0 <= octant1;\nloop invariant i100: octant1 <= x;\nloop invariant i101: x <= octant2;\nloop invariant i102: octant2 <= pi/8;\n\n\nloop invariant i105: multFactor == 0 ==> evenExp >= oddExp;\n\n\n\n\n\n\n\n*/\nwhile(1)\n\t{\n\t\tterm = term * (x/count) ;\n\t\tmultFactor = (count>>1 % 2 == 0) ? 1 : -1 ;\n\n\t\tevenExp = evenExp + multFactor*term ;\n\n\t\tcount++ ;\n\n\t\tterm = term * (x/count) ;\t\t\n\t\t\n\t\toddExp = oddExp + multFactor*term ;\n\t\t\n\t\tcount++ ;\n\n\t\ttemp = unknown_int() ;\n\t\tif(temp == 0) break ;\n\t}\n\n\t{;\n//@ assert( evenExp >= oddExp );\n}\n\n\treturn 0 ;\n}\t",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-2.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/mono-crafted_11.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-a.c"
        ],
        "failure": [
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop1-2.c",
            "../data/benchmarks/sv-benchmarks/loop-simple/nested_1b.c",
            "../data/benchmarks/sv-benchmarks/loop-invariants/linear-inequality-inv-b.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono1_1-1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-1.c",
            "../data/benchmarks/sv-benchmarks/loops-crafted-1/Mono3_1.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop2-2.c",
            "../data/benchmarks/sv-benchmarks/loop-floats-scientific-comp/loop3.c"
        ],
        "skipped": [],
        "total": 11,
        "success_count": 3,
        "failure_count": 8,
        "success_rate": 0.2727272727272727
    }
}