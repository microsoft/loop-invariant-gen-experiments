{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum03.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant sn == x * a || sn == 0;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n"
            },
            {
                "invariants": "/*@\n    loop invariant sn == x * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\nloop invariant i2: x >= 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == x * a || sn == 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion sn == x * 1 || sn == 0: Unproven\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  while(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n\n1. sn is initialized to 0.\n2. loop1 and n1 are assigned with unknown_uint(), which means they have arbitrary non-negative values.\n3. x is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nThe loop condition is just \"1\", which means the loop will run indefinitely as there's no break or exit condition inside the loop.\n\nWe need to find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination. However, in this case, the loop never terminates. Nevertheless, we can still find loop invariants that hold true before and during the loop execution.\n\nHere are the loop invariants:\n```\n/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution and in every iteration of the loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\n1. Pre-conditions/variable assignments:\n   - sn is initialized to 0.\n   - loop1, n1, and x are initialized with unknown_uint().\n2. Loop condition:\n   - The loop is a while(1) loop, which means it is an infinite loop.\n3. Post-condition (from the assert statement):\n   - sn == x * a || sn == 0\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - sn == 0\n   - x == 0\n2. In every iteration of the loop:\n   - sn == x * a || sn == 0\n3. After loop termination:\n   - The loop is an infinite loop, so it does not terminate.\n\nThe loop invariants for the given program are:\n\n```\n/*@\n    loop invariant sn == x * a || sn == 0;\n    loop invariant x >= 0;\n*/\n```\nHowever, please note that this loop is infinite and will never terminate, so the post-condition will never be reached."
                },
                {
                    "role": "assistant",
                    "content": "Let's analyze the given code:\n\nPre-conditions or variable assignments:\n- sn is initialized to 0\n- loop1, n1, and x are initialized with unknown_uint() (unknown values, but they are unsigned integers)\n- a is defined as 1\n\nLoop condition: \n- The loop is a while(1), which means it is an infinite loop.\n\nNow, let's find the necessary loop invariants:\n\n1. sn is always equal to x * a.\n2. x is always an unsigned integer.\n\nHere are the loop invariants for the given program:\n```\n/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int sn = 0;`\n- `unsigned int loop1 = unknown_uint();`\n- `unsigned int n1 = unknown_uint();`\n- `unsigned int x = 0;`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop is a `while(1)` loop, which means it is an infinite loop. However, we can still reason about the loop invariants.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition (the assertion inside the loop):\n\n```\n/*@ \n    loop invariant sn == x * a;\n*/\n```\n\nThis loop invariant states that `sn` is always equal to `x` multiplied by `a` (which is defined as 1). Since `sn` starts at 0 and `x` starts at 0, the invariant holds before the loop execution. In every iteration of the loop, `sn` is incremented by `a` and `x` is incremented by 1, so the invariant holds during the loop execution. Although the loop does not terminate, the loop invariant still implies the post-condition (the assertion inside the loop)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n- `int sn = 0;`\n- `unsigned int loop1 = unknown_uint();`\n- `unsigned int n1 = unknown_uint();`\n- `unsigned int x = 0;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `while(1)` (infinite loop)\n- Loop body: \n  - `sn = sn + a;`\n  - `x++;`\n\nNow let's find the necessary loop invariants for the while loop to help Frama-C verify the post-condition (`sn==x*a || sn == 0`).\n\n```\n/*@ \n    loop invariant sn == x * a || sn == 0;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination (although in this case the loop never terminates),\nsuch that the loop invariants imply the post condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments in the program:\n- sn = 0\n- loop1 and n1 are assigned unknown unsigned integer values\n- x = 0\n\nNow, let's analyze the loop body and note the loop condition:\n- The loop is an infinite loop (while(1))\n\nFinally, let's derive the loop invariants:\n- Before the loop execution: sn = 0, x = 0\n- In every iteration of the loop: sn = sn + a, x = x + 1\n- After the loop termination: The loop does not terminate.\n\nNow, let's write the loop invariants:\n```\n/*@\n    loop invariant sn == x * a;\n*/\n```\nThis loop invariant is true before the loop execution, in every iteration of the loop, and after the loop termination (which does not occur). The loop invariant implies the assertion inside the loop body, since sn == x * a, the assertion `sn == x * a || sn == 0` holds."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nVariable assignments:\n1. sn = 0\n2. loop1 and n1 are assigned values from unknown_uint() (values are unknown)\n3. x = 0\n\nLoop condition: The while loop has the condition \"1\", which means it is an infinite loop.\n\nNow, let's find the loop invariants:\n\n1. sn is always equal to x * a in every iteration of the loop.\n2. x is always non-negative.\n\nThe loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/\n```\nHowever, keep in mind that this loop is an infinite loop, so these invariants will always hold true within the loop."
                },
                {
                    "role": "assistant",
                    "content": "We need to find loop invariants for the while loop that will help Frama-C verify the post-condition of the program. The while loop has no explicit loop condition, so it runs indefinitely (i.e., while(1)). The loop body increments the variables 'sn' and 'x' by 'a' and 1, respectively.\n\nLet's find the loop invariants:\n\n1. Before the loop execution, 'sn' is initialized to 0 and 'x' is initialized to 0.\n2. In every iteration of the loop, 'sn' is incremented by 'a' and 'x' is incremented by 1.\n3. After the loop termination, which is not happening in this case, the loop invariant should still hold.\n\nConsidering these observations, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant sn == x * a;\n*/\n```\n\nThis loop invariant states that at any point in the loop, the value of 'sn' is equal to the value of 'x' multiplied by 'a'. This invariant holds before the loop execution, during every iteration of the loop, and after the loop termination (if it were to happen)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions:\n\n1. sn = 0\n2. loop1 = unknown_uint()\n3. n1 = unknown_uint()\n4. x = 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- Loop condition: while(1) (infinite loop)\n- Loop body: sn = sn + a; x++;\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n1. sn == x * a (after each iteration, sn is incremented by a and x is incremented by 1, so the relation between sn and x is maintained)\n\nHere's the loop invariants in ACSL notation:\n\n```\n/*@ \n    loop invariant sn == x * a;\n*/\n```\nNote that the loop is an infinite loop, so there is no post-condition to verify as the loop does not terminate."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the program and make a note of pre-conditions, variable assignments, and loop conditions.\n\nPre-conditions or variable assignments:\n1. sn = 0\n2. loop1, n1, and x are assigned values from unknown functions. We don't have any information about these values.\n\nLoop condition:\n1. There is a while(1) loop, which is an infinite loop. There is no termination condition for this loop.\n\nNow, let's find the loop invariants for the while loop:\n\n- sn = sn + a; (sn is updated in every iteration)\n- x is incremented by 1 in every iteration (x++)\n- sn is always equal to x * a or 0 (sn == x * a || sn == 0)\n\nHere are the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant sn == x * a || sn == 0;\n*/\n```\n\nThe main loop is infinite and has no termination condition, so there is no need to consider loop invariants after loop termination."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
            "/*@\n    loop invariant sn == x * a || sn == 0;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn == x * a || sn == 0;\n*/",
            "/*@\n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n    loop invariant x >= 0;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn == x * a;\n*/",
            "/*@ \n    loop invariant sn == x * a || sn == 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\n#define a (1)\n\nint main() { \n  int sn=0;\n  unsigned int loop1=unknown_uint(), n1=unknown_uint();\n  unsigned int x=0;\n\n  /*@\nloop invariant i1: sn == x * a;\nloop invariant i2: x >= 0;\nloop invariant i3: sn == x * a || sn == 0;\nloop invariant i4: x >= 0;\nloop invariant i5: sn == x * a;\nloop invariant i6: x >= 0;\nloop invariant i7: sn == x * a;\nloop invariant i8: sn == x * a || sn == 0;\nloop invariant i9: sn == x * a;\nloop invariant i10: sn == x * a;\nloop invariant i11: x >= 0;\nloop invariant i12: sn == x * a;\nloop invariant i13: sn == x * a;\nloop invariant i14: sn == x * a || sn == 0;\n*/\nwhile(1){\n    sn = sn + a;\n    x++;\n    {;//@ assert(sn==x*a || sn == 0);\n}\n  }\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nAssertion sn == x * 1 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 232,
        "success_rate": 0.5603448275862069
    }
}