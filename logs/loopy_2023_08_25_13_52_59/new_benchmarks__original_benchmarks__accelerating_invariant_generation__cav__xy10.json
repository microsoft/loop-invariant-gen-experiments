{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/accelerating_invariant_generation/cav/xy10.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x == 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x == 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant x == 10 * y;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": false,
                "checker_message": "loop invariant i1 is inductive.\nAssertion \\false: Unproven\n",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nAssertion \\false: Unproven\n"
            },
            {
                "invariants": "/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x == 10 * y;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion \\false: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  while (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments:\n- x is initialized to 0\n- y is initialized to 0\n- z is not initialized\n\nNow, analyze the loop body and make a note of the loop condition:\n- The loop continues as long as unknown_int() returns a non-zero value.\n- In each loop iteration, x is incremented by 10, and y is incremented by 1.\n\nNow, let's find the loop invariants:\n1. x and y are always non-negative.\n2. x = 10 * y, which holds true before the loop, during the loop, and after the loop.\n\nOutput the loop invariants in a code block:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- x is initialized to 0.\n- y is initialized to 0.\n- z contains a garbage value (we can't make any assumptions about it).\n\nNext, we analyze the loop condition and body:\n- The loop runs while `unknown_int()` returns a non-zero value.\n- In each iteration, x is incremented by 10, and y is incremented by 1.\n\nNow, let's find the loop invariants that hold before the loop execution, during every iteration, and after the loop termination:\n\n```\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```\n\nThese invariants hold because:\n- Before the loop: x and y are both 0, so x == 10 * y is true.\n- During the loop: For every iteration, x is increased by 10 and y is increased by 1, maintaining the x == 10 * y invariant. Also, x and y are non-negative as they only increase in value.\n- After the loop: When the loop terminates, x and y still satisfy the invariants as they are not modified outside the loop."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `int x = 0;`\n2. `int y = 0;`\n3. `int z;` (uninitialized, so it has a garbage value)\n\nNow, let's analyze the loop condition and the loop body:\n\n- Loop condition: `unknown_int()`\n- Loop body: `x += 10;` and `y += 1;`\n\nNow, let's find the necessary loop invariants:\n\n(i) true before the loop execution,\n(ii) true in every iteration of the loop, and\n(iii) true after the loop termination.\n\nThe loop invariants are as follows:\n\n```c\n/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions and variable assignments:\n- int x = 0;\n- int y = 0;\n- int z;\n\nLoop condition:\n- while (unknown_int())\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program and make notes of the relevant information:\n\n1. Pre-conditions and variable assignments: `int x = 0; int y = 0; int z;`\n2. Loop condition: `unknown_int()`\n\nNow, we need to find loop invariants that are true before the loop execution, during each iteration, and after the loop termination.\n\nHere are the loop invariants for the while loop in the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/\n```\n\nThese loop invariants express that:\n1. `x` is always non-negative.\n2. `y` is always non-negative.\n3. `x` is always 10 times the value of `y`.\n\nThese invariants hold true before the loop execution, during each iteration, and after the loop termination, and can be used to verify the post-condition."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- `int x = 0;`\n- `int y = 0;`\n- `int z;` (uninitialized, so we won't make any assumptions about it)\n\nNext, let's analyze the loop body and make a note of the loop condition.\n- The loop condition is `unknown_int()`, which is not defined in the program. We cannot make any assumptions about it.\n- In the loop body, `x` is incremented by 10 and `y` is incremented by 1 in each iteration.\n\nNow, let's output the loop invariants:\n```\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, make a note of the pre-conditions or variable assignments in the program:\n\n- x is initialized to 0\n- y is initialized to 0\n- z is uninitialized and contains a garbage value\n\nAnalyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown_int() which is an external function. We cannot make any assumptions about its behavior.\n- Inside the loop, x is incremented by 10 and y is incremented by 1.\n\nOutput the loop invariants:\n\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. The first invariant ensures that x is always 10 times y, and the other two invariants ensure that both x and y are non-negative."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n- `int x = 0;`\n- `int y = 0;`\n- `int z;` (undefined)\n\nNext, we analyze the loop body and make a note of the loop condition:\n- Loop condition: `unknown_int()`\n- Loop body: `x += 10;` and `y += 1;`\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. `int x = 0;`\n2. `int y = 0;`\n3. `int z;` (uninitialized, we cannot make any assumptions about its value)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `unknown_int()`\n- Loop body: `x += 10; y += 1;`\n\nNow, let's determine the loop invariants:\n1. Before the loop execution: `x == 0`, `y == 0`\n2. In every iteration of the loop: `x == 10 * y`\n3. After the loop termination: `x == 10 * y`\n\nFinally, let's output the loop invariants in ACSL format:\n```\n/*@ \n    loop invariant x == 10 * y;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note down the necessary information from the program:\n\nPre-conditions and variable assignments:\n1. `int x = 0;`\n2. `int y = 0;`\n3. `int z;` // z is uninitialized and contains garbage value. We will not use it in our loop invariants.\n\nLoop condition: `unknown_int()`\nThe loop continues as long as the function `unknown_int()` returns a non-zero value. We don't have any information about this function, so we can't make any assumptions about its behavior.\n\nNow let's analyze the loop body and find the loop invariants:\n\n1. In each iteration of the loop, `x` is incremented by 10, and `y` is incremented by 1.\n2. The relationship between `x` and `y` is maintained throughout the loop: `x = 10 * y`.\n\nConsidering the above information, we can now define the loop invariants:\n\n```\n/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/\n```\n\nThese loop invariants hold true before the loop execution, during every iteration of the loop, and after the loop termination."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/",
            "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x == 10 * y;\n*/",
            "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "ERROR: Output does not contain at least 1 code block\nOutput:\nFirst, make a note of the pre-conditions or variable assignments in the program:\n\n- x is initialized to 0\n- y is initialized to 0\n- z is uninitialized and contains a garbage value\n\nAnalyze the loop body and make a note of the loop condition:\n\n- The loop condition is unknown_int() which is an external function. We cannot make any assumptions about its behavior.\n- Inside the loop, x is incremented by 10 and y is incremented by 1.\n\nOutput the loop invariants:\n\n/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. The first invariant ensures that x is always 10 times y, and the other two invariants ensure that both x and y are non-negative.",
            "/*@ \n    loop invariant x == 10 * y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
            "/*@ \n    loop invariant x == 10 * y;\n*/",
            "/*@ \n  loop invariant x == 10 * y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint nondet(){\n  int x;\n  return x;\n}\n\nint main ()\n{\n  int x = 0;\n  int y = 0;\n  int z;\n\n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: x == 10 * y;\nloop invariant i4: x == 10 * y;\nloop invariant i5: x >= 0;\nloop invariant i6: y >= 0;\nloop invariant i7: x == 10 * y;\nloop invariant i8: x >= 0;\nloop invariant i9: y >= 0;\nloop invariant i10: x == 10 * y;\nloop invariant i11: x >= 0;\nloop invariant i12: y >= 0;\nloop invariant i13: x >= 0;\nloop invariant i14: y >= 0;\nloop invariant i15: x == 10 * y;\nloop invariant i16: x == 10 * y;\nloop invariant i17: x >= 0;\nloop invariant i18: y >= 0;\nloop invariant i19: x == 10 * y;\nloop invariant i20: x >= 0;\nloop invariant i21: y >= 0;\nloop invariant i22: x == 10 * y;\nloop invariant i23: x == 10 * y;\nloop invariant i24: x >= 0;\nloop invariant i25: y >= 0;\n*/\nwhile (unknown_int()){\n    x += 10;\n    y += 1;\n  }\n\n  if (x <= z && y >= z + 1)\n    goto ERROR;\n\n    return 0;\n\n  ERROR:{; //@ assert(\\false);\n};\n}",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nAssertion \\false: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12
        ],
        "skipped": [],
        "total": 14,
        "success_rate": 0.5
    }
}