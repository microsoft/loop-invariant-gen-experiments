{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/pie/ICE/benchmarks/sum04_safe.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 0 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE+1;\nloop invariant i2: sn == (i-1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant sn == (i - 1) * a;\n    loop invariant 1 <= i <= SIZE + 1;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: sn == (i - 1) * a;\nloop invariant i2: 1 <= i <= SIZE + 1;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop variant SIZE - i;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  for(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n- `int i, sn=0;`\n- `for(i=1; i<=SIZE; i++)`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i<=SIZE`.\n- The loop body updates `sn` by adding `a` in each iteration: `sn = sn + a;`\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- int i, sn=0;\n- i is assigned with values from 1 to SIZE (inclusive) in the loop.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is i <= SIZE.\n\nNow we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the variable assignments and pre-conditions in the program:\n- `int i` is declared and initialized to 1\n- `int sn` is declared and initialized to 0\n- `#define a (1)` and `#define SIZE 8` are constants\n\nThe loop condition is `i <= SIZE`.\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution: `sn` is 0 and `i` is 1.\n2. In every iteration of the loop: `sn` is incremented by `a` and `i` is incremented by 1.\n3. After the loop termination: The loop terminates when `i > SIZE`.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They imply the post-condition `sn == SIZE * a || sn == 0`."
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is initialized to 1\n- sn is initialized to 0\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (i <= SIZE)\n- Inside the loop, sn is updated as sn = sn + a\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese loop invariants ensure that:\n1. i is always within the range [1, SIZE+1].\n2. sn is equal to the sum of `a` for each iteration (i-1 times, as i starts from 1).\nAfter the loop, i will be equal to SIZE + 1, and sn will be equal to SIZE * a, which implies the post condition (sn == SIZE * a || sn == 0)."
                },
                {
                    "role": "assistant",
                    "content": "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n- `i` is an integer variable used as a loop counter, initially set to 1.\n- `sn` is an integer variable initially set to 0.\n- `a` is a constant integer value of 1.\n- `SIZE` is a constant integer value of 8.\n\nLoop body and condition:\n- The loop iterates from `i = 1` to `i <= SIZE` (inclusive).\n- In each iteration, `sn` is incremented by `a`.\n\nPost-condition to be verified:\n- `sn == SIZE * a || sn == 0`\n\nNow, let's find the necessary loop invariants:\n\nLoop Invariants:\n1. `sn == (i - 1) * a` (This indicates the sum is correctly calculated in each iteration)\n2. `1 <= i <= SIZE + 1` (This indicates the loop counter `i` is within the valid range)\n\nNow, output the loop invariants in the required format:\n```\n/*@ \n    loop invariant sn == (i - 1) * a;\n    loop invariant 1 <= i <= SIZE + 1;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- `int i` and `int sn=0` are the variables declared and initialized.\n- The loop condition is `i<=SIZE`.\n\nNow, let's analyze the loop body and derive the loop invariants:\n- `sn` is updated in each iteration as `sn = sn + a`.\n- At the beginning of the loop, `sn = 0`.\n- After the loop termination, `sn = SIZE * a`.\n\nHere are the loop invariants for the while loop:\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's take note of the pre-conditions and variable assignments in the program:\n- i is initialized to 1.\n- sn is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= SIZE.\n- In each iteration, sn is incremented by a (which is 1), and i is incremented by 1.\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program.\n- a is a constant defined as 1.\n- SIZE is a constant defined as 8.\n- i is the loop variable, initially set to 1.\n- sn is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n- The loop condition is `i <= SIZE`.\n- The loop body is `sn = sn + a;`\n\nWe can now output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */\n```\n\nThese invariants hold because:\n- Before the loop execution (i = 1), both invariants are true: 1 <= 1 && 1 <= 8 + 1 and sn == (1 - 1) * a == 0.\n- In every iteration of the loop, the invariants are preserved: i increases by 1 and sn increases by a, so sn == (i - 1) * a holds.\n- After the loop termination (i = SIZE + 1), the invariants imply the post condition: sn == (SIZE + 1 - 1) * a == SIZE * a."
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the variable assignments and pre-conditions in the program:\n- `int i` is the loop counter, initialized to 1.\n- `int sn` is the sum, initialized to 0.\n- The loop has a condition `i <= SIZE`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop increments `sn` by `a` in each iteration.\n- The loop condition is `i <= SIZE`.\n\nBased on this analysis, we can output the necessary loop invariants as follows:\n\n```\n/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop variant SIZE - i;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments:\n- `i` is initialized to 1\n- `sn` is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i <= SIZE`\n- In each iteration, `i` is incremented by 1 and `sn` is incremented by `a`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/\n```\n\nThese invariants hold:\n1. Before the loop execution, `i = 1` and `sn = 0`, which satisfies both invariants.\n2. In every iteration of the loop, `i` increases by 1 and `sn` increases by `a`. The invariants still hold true.\n3. After the loop termination, `i = SIZE + 1` and `sn = SIZE * a`. The post condition `sn==SIZE*a || sn == 0` is implied by the invariants."
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 0 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE+1;\n    loop invariant sn == (i-1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant sn == (i - 1) * a;\n    loop invariant 1 <= i <= SIZE + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/",
            "/*@ \n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n */",
            "/*@\n    loop invariant 1 <= i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n    loop variant SIZE - i;\n*/",
            "/*@ \n    loop invariant 1 <= i && i <= SIZE + 1;\n    loop invariant sn == (i - 1) * a;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\n#define a (1)\n#define SIZE 8\nint main() { \n  int i, sn=0;\n  /*@\nloop invariant i1: 1 <= i && i <= SIZE + 1;\nloop invariant i2: sn == (i - 1) * a;\nloop invariant i3: 0 <= i && i <= SIZE + 1;\nloop invariant i4: sn == (i - 1) * a;\nloop invariant i5: 1 <= i <= SIZE+1;\nloop invariant i6: sn == (i-1) * a;\nloop invariant i7: 1 <= i <= SIZE + 1;\nloop invariant i8: sn == (i - 1) * a;\nloop invariant i9: sn == (i - 1) * a;\nloop invariant i10: 1 <= i <= SIZE + 1;\nloop invariant i11: 1 <= i && i <= SIZE + 1;\nloop invariant i12: sn == (i - 1) * a;\nloop invariant i13: 1 <= i <= SIZE + 1;\nloop invariant i14: sn == (i - 1) * a;\nloop invariant i15: 1 <= i && i <= SIZE + 1;\nloop invariant i16: sn == (i - 1) * a;\nloop invariant i17: 1 <= i <= SIZE + 1;\nloop invariant i18: sn == (i - 1) * a;\nloop invariant i19: 1 <= i && i <= SIZE + 1;\nloop invariant i20: sn == (i - 1) * a;\n*/\nfor(i=1; i<=SIZE; i++) {\n    sn = sn + a;\n  }\n  {;//@ assert(sn==SIZE*a || sn == 0);\n}\n}\n",
        "checker_output": true,
        "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i12 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nAssertion sn == 8 * 1 || sn == 0: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130,
            131,
            134,
            135,
            136,
            138,
            139,
            140,
            141,
            142,
            143,
            145,
            148,
            150,
            151,
            157,
            159,
            161,
            163,
            165,
            166,
            167,
            168,
            171,
            172,
            173,
            174,
            175,
            177,
            179,
            180,
            181,
            184,
            185,
            186,
            191,
            192,
            195,
            197,
            198,
            202,
            203,
            204,
            205,
            206,
            208,
            209,
            210,
            211,
            212,
            213,
            214,
            215,
            218,
            219,
            220,
            221,
            222,
            223,
            224,
            225,
            226,
            228,
            235,
            236,
            237,
            238,
            239,
            242
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129,
            132,
            133,
            137,
            144,
            146,
            147,
            149,
            152,
            153,
            154,
            156,
            158,
            160,
            162,
            164,
            169,
            170,
            176,
            178,
            182,
            183,
            187,
            188,
            189,
            190,
            193,
            194,
            196,
            199,
            200,
            201,
            207,
            216,
            217,
            227,
            229,
            230,
            231,
            232,
            233,
            234,
            240,
            241
        ],
        "skipped": [
            77,
            78,
            80,
            155
        ],
        "total": 239,
        "success_rate": 0.5648535564853556
    }
}