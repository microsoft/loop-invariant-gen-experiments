{
    "logs": {
        "file": "../new_benchmarks/original_benchmarks/LinearArbitrary-SeaHorn/loops/loop-lit/cggmp2005_variant_true-unreach-call_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "completions": [
            {
                "invariants": "/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == lo + 2 * mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: lo >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == lo + 2 * mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi - lo == 2 * mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= lo;\nloop invariant i4: hi - lo == 2 * mid;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre);\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= lo;\nloop invariant i4: hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre);\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "Annotation error on line 17: unbound logic variable mid. Ignoring loop annotation",
                "success_after_prune": false,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\n\n\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nAssertion lo == hi: Unproven\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == (2 * mid) + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: lo >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == (2 * mid) + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant 2*mid + lo == hi;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= lo;\nloop invariant i4: 2*mid + lo == hi;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n    loop variant mid;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= lo <= mid;\nloop invariant i2: 0 <= mid <= LARGE_INT;\nloop invariant i3: hi == 2*mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": false,
                "checker_message": "loop invariant i1 is established but not preserved.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion lo == hi: Partially proven\n",
                "success_after_prune": true,
                "pruned_code": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\n\nloop invariant i2: 0 <= mid <= LARGE_INT;\nloop invariant i3: hi == 2*mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "checker_message_after_prune": "loop invariant i2 is inductive.\nloop invariant i3 is inductive.\nAssertion lo == hi: Valid\n"
            },
            {
                "invariants": "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/",
                "code_with_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: lo >= 0;\nloop invariant i2: mid >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
                "success": true,
                "checker_message": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nAssertion lo == hi: Valid\n"
            }
        ],
        "llm_conversation": [
            [
                {
                    "role": "system",
                    "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**\n"
                }
            ],
            [
                {
                    "role": "user",
                    "content": "\n\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    while (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}\n```\nOutput the loop invariants for the loop in the program above.\nLet's think step by step."
                }
            ],
            [
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program.\n- lo = 0;\n- mid = unknown_int();\n- if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n- hi = 2 * mid;\n\nNext, analyze the loop body and make a note of the loop condition.\n- while (mid > 0) {\n    - lo = lo + 1;\n    - hi = hi - 1;\n    - mid = mid - 1;\n  }\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == lo + 2 * mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- lo is initialized to 0.\n- mid is assigned an unknown integer value, with the constraint that mid > 0 and mid <= LARGE_INT.\n- hi is initialized to 2 * mid.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is mid > 0.\n- In each iteration, lo is incremented by 1, hi is decremented by 1, and mid is decremented by 1.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi - lo == 2 * mid;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions or variable assignments in the program:\n\n1. lo = 0;\n2. mid = unknown_int(); (with the constraint mid > 0 && mid <= LARGE_INT)\n3. hi = 2 * mid;\n\nNext, we analyze the loop condition and body:\n\n- Loop condition: mid > 0\n- Loop body: \n  - lo = lo + 1;\n  - hi = hi - 1;\n  - mid = mid - 1;\n\nNow, let's find the loop invariants:\n\n1. Loop invariant: lo >= 0\n2. Loop invariant: mid >= 0\n3. Loop invariant: hi >= lo\n4. Loop invariant: hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre)\n\nPutting it all together, the loop invariants are:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre);\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's identify the pre-conditions and variable assignments in the program:\n- lo = 0\n- mid = unknown_int()\n- hi = 2 * mid\n\nLoop condition: mid > 0\n\nNow let's determine the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n1. lo is initialized to 0.\n2. mid is assigned an unknown integer value.\n3. There is a condition checking if mid > 0 and mid <= LARGE_INT.\n4. hi is initialized to 2 * mid.\n\nNow let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is mid > 0.\n2. Inside the loop, lo is incremented by 1, hi is decremented by 1, and mid is decremented by 1 in each iteration.\n\nNow let's find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments:\n- lo = 0\n- mid is an unknown integer, but we know mid > 0 && mid <= LARGE_INT\n- hi = 2 * mid\n\nNow, let's analyze the loop body and condition:\n- Loop condition: mid > 0\n- Loop body:\n  - lo = lo + 1\n  - hi = hi - 1\n  - mid = mid - 1\n\nBased on the information above, here are the loop invariants:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions and variable assignments in the program:\n- Pre-condition: `mid > 0 && mid <= LARGE_INT`\n- Variable assignments: \n  - `lo = 0`\n  - `hi = 2 * mid`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `mid > 0`\n- Loop body:\n  - `lo = lo + 1`\n  - `hi = hi - 1`\n  - `mid = mid - 1`\n\nFinally, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition `lo == hi`:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant 2*mid + lo == hi;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's make a note of the pre-conditions or variable assignments in the program:\n- lo is initialized to 0.\n- mid is assigned a value from unknown_int() and is checked to be greater than 0 and less than or equal to LARGE_INT.\n- hi is initialized to 2 * mid.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is mid > 0.\n- Inside the loop, lo is incremented by 1, hi is decremented by 1, and mid is decremented by 1.\n\nNow, we need to find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition (lo == hi):\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n    loop variant mid;\n*/\n```\n\nThese loop invariants are:\n- lo is always greater than or equal to 0.\n- mid is always greater than or equal to 0.\n- hi is always equal to 2 * mid + lo.\n\nThe loop variant mid ensures the termination of the loop as mid is strictly decreasing in each iteration."
                },
                {
                    "role": "assistant",
                    "content": "Pre-conditions or variable assignments in the program:\n1. lo = 0\n2. mid = unknown_int()\n3. hi = 2 * mid\n\nLoop condition: mid > 0\n\nPost-condition: lo == hi\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/\n```"
                },
                {
                    "role": "assistant",
                    "content": "First, let's note the pre-conditions and variable assignments in the program:\n- lo = 0;\n- mid = unknown_int();\n- hi = 2*mid;\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is mid > 0.\n- In the loop body, we have:\n  - lo = lo + 1;\n  - hi = hi - 1;\n  - mid = mid - 1;\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/\n```"
                }
            ]
        ],
        "invariants": [
            "/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == lo + 2 * mid;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi - lo == 2 * mid;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre);\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/",
            "/*@ \n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant lo >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == (2 * mid) + lo;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= lo;\n    loop invariant 2*mid + lo == hi;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi == 2 * mid + lo;\n    loop variant mid;\n*/",
            "/*@ \n    loop invariant 0 <= lo <= mid;\n    loop invariant 0 <= mid <= LARGE_INT;\n    loop invariant hi == 2*mid + lo;\n*/",
            "/*@ \n    loop invariant lo >= 0;\n    loop invariant mid >= 0;\n    loop invariant hi >= 0;\n    loop invariant hi == 2 * mid + lo;\n*/"
        ],
        "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: lo >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == lo + 2 * mid;\nloop invariant i5: lo >= 0;\nloop invariant i6: mid >= 0;\nloop invariant i7: hi >= lo;\nloop invariant i8: hi - lo == 2 * mid;\nloop invariant i9: lo >= 0;\nloop invariant i10: mid >= 0;\nloop invariant i11: hi >= lo;\nloop invariant i12: hi + mid == 2 * \\at(mid, Pre) - \\at(lo, Pre);\nloop invariant i13: lo >= 0;\nloop invariant i14: mid >= 0;\nloop invariant i15: hi >= 0;\nloop invariant i16: hi == (2 * mid) + lo;\nloop invariant i17: 0 <= mid <= LARGE_INT;\nloop invariant i18: lo >= 0;\nloop invariant i19: hi >= 0;\nloop invariant i20: hi == 2 * mid + lo;\nloop invariant i21: lo >= 0;\nloop invariant i22: mid >= 0;\nloop invariant i23: hi >= 0;\nloop invariant i24: hi == (2 * mid) + lo;\nloop invariant i25: lo >= 0;\nloop invariant i26: mid >= 0;\nloop invariant i27: hi >= lo;\nloop invariant i28: 2*mid + lo == hi;\nloop invariant i29: lo >= 0;\nloop invariant i30: mid >= 0;\nloop invariant i31: hi == 2 * mid + lo;\nloop invariant i32: 0 <= lo <= mid;\nloop invariant i33: 0 <= mid <= LARGE_INT;\nloop invariant i34: hi == 2*mid + lo;\nloop invariant i35: lo >= 0;\nloop invariant i36: mid >= 0;\nloop invariant i37: hi >= 0;\nloop invariant i38: hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output": false,
        "checker_message": "Annotation error on line 25: unbound logic variable mid. Ignoring loop annotation",
        "code_after_combine_and_prune": "#define assume(e) if(!(e)) return 0;\n#define LARGE_INT 1000000\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int lo, mid, hi;\n    lo = 0;\n    mid = unknown_int();\n    if (!(mid > 0 && mid <= LARGE_INT)) return 0;\n    hi = 2*mid;\n    \n    /*@\nloop invariant i1: 0 <= mid <= LARGE_INT;\nloop invariant i2: lo >= 0;\nloop invariant i3: hi >= 0;\nloop invariant i4: hi == lo + 2 * mid;\nloop invariant i5: lo >= 0;\nloop invariant i6: mid >= 0;\nloop invariant i7: hi >= lo;\nloop invariant i8: hi - lo == 2 * mid;\nloop invariant i9: lo >= 0;\nloop invariant i10: mid >= 0;\nloop invariant i11: hi >= lo;\n\nloop invariant i13: lo >= 0;\nloop invariant i14: mid >= 0;\nloop invariant i15: hi >= 0;\nloop invariant i16: hi == (2 * mid) + lo;\nloop invariant i17: 0 <= mid <= LARGE_INT;\nloop invariant i18: lo >= 0;\nloop invariant i19: hi >= 0;\nloop invariant i20: hi == 2 * mid + lo;\nloop invariant i21: lo >= 0;\nloop invariant i22: mid >= 0;\nloop invariant i23: hi >= 0;\nloop invariant i24: hi == (2 * mid) + lo;\nloop invariant i25: lo >= 0;\nloop invariant i26: mid >= 0;\nloop invariant i27: hi >= lo;\nloop invariant i28: 2*mid + lo == hi;\nloop invariant i29: lo >= 0;\nloop invariant i30: mid >= 0;\nloop invariant i31: hi == 2 * mid + lo;\n\nloop invariant i33: 0 <= mid <= LARGE_INT;\nloop invariant i34: hi == 2*mid + lo;\nloop invariant i35: lo >= 0;\nloop invariant i36: mid >= 0;\nloop invariant i37: hi >= 0;\nloop invariant i38: hi == 2 * mid + lo;\n*/\nwhile (mid > 0) {\n        lo = lo + 1;\n        hi = hi - 1;\n        mid = mid - 1;\n    }\n    {;//@ assert(lo == hi);\n}\n    return 0;\n}",
        "checker_output_after_combine_and_prune": true,
        "checker_message_after_combine_and_prune": "loop invariant i1 is inductive.\nloop invariant i2 is inductive.\nloop invariant i3 is inductive.\nloop invariant i4 is inductive.\nloop invariant i5 is inductive.\nloop invariant i6 is inductive.\nloop invariant i7 is inductive.\nloop invariant i8 is inductive.\nloop invariant i9 is inductive.\nloop invariant i10 is inductive.\nloop invariant i11 is inductive.\nloop invariant i13 is inductive.\nloop invariant i14 is inductive.\nloop invariant i15 is inductive.\nloop invariant i16 is inductive.\nloop invariant i17 is inductive.\nloop invariant i18 is inductive.\nloop invariant i19 is inductive.\nloop invariant i20 is inductive.\nloop invariant i21 is inductive.\nloop invariant i22 is inductive.\nloop invariant i23 is inductive.\nloop invariant i24 is inductive.\nloop invariant i25 is inductive.\nloop invariant i26 is inductive.\nloop invariant i27 is inductive.\nloop invariant i28 is inductive.\nloop invariant i29 is inductive.\nloop invariant i30 is inductive.\nloop invariant i31 is inductive.\nloop invariant i33 is inductive.\nloop invariant i34 is inductive.\nloop invariant i35 is inductive.\nloop invariant i36 is inductive.\nloop invariant i37 is inductive.\nloop invariant i38 is inductive.\nAssertion lo == hi: Valid\n"
    },
    "stats": {
        "success": [
            0,
            1,
            3,
            7,
            8,
            11,
            13,
            14,
            20,
            26,
            27,
            28,
            29,
            35,
            36,
            38,
            39,
            40,
            41,
            44,
            45,
            48,
            49,
            50,
            51,
            53,
            54,
            59,
            61,
            62,
            63,
            65,
            66,
            67,
            68,
            69,
            71,
            73,
            75,
            76,
            79,
            89,
            91,
            94,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            107,
            108,
            109,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            119,
            122,
            125,
            127,
            128,
            130
        ],
        "failure": [
            2,
            4,
            5,
            6,
            9,
            10,
            12,
            15,
            16,
            17,
            18,
            19,
            21,
            22,
            23,
            24,
            25,
            30,
            31,
            32,
            33,
            34,
            37,
            42,
            43,
            46,
            47,
            52,
            55,
            56,
            57,
            58,
            60,
            64,
            70,
            72,
            74,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            90,
            92,
            93,
            95,
            103,
            104,
            105,
            106,
            110,
            118,
            120,
            121,
            123,
            124,
            126,
            129
        ],
        "skipped": [
            77,
            78,
            80
        ],
        "total": 128,
        "success_rate": 0.5234375
    }
}