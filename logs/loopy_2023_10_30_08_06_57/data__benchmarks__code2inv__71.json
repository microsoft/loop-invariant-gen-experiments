{
    "logs": {
        "file": "../data/benchmarks/code2inv/71.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  while (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable assignments:\n- The variable `c` is initialized to 0.\n- The variable `z` is assigned the value of `36 * y`.\n\nLoop condition:\n- The loop continues as long as the function `unknown()` returns a non-zero value.\n\nPost-condition:\n- If `c` is less than 36, then `z` is greater than or equal to 0.\n\nLoop invariants:\n```\n/*@ \nloop invariant 0 <= c <= 36;\nloop invariant z == 36 * y + c;\nloop invariant y >= 127;\nloop invariant c < 36 ==> z >= 0;\n*/\n```\nExplanation:\n- The first loop invariant states that `c` is always between 0 and 36, inclusive.\n- The second loop invariant states that `z` is always equal to `36 * y + c`.\n- The third loop invariant states that `y` is always greater than or equal to 127.\n- The fourth loop invariant states that if `c` is less than 36, then `z` is greater than or equal to 0. This is the same as the post-condition, but with the guard condition (`c < 36`) included as an implication. \n\nNote that `unknown()` is a non-deterministic function and we cannot make any assumptions about its behavior. Therefore, we do not include any loop invariants that depend on the value returned by `unknown()`.",
            "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable bounds:\n- `c` is between 0 and 36 inclusive.\n- `z` is greater than or equal to 36 times `y`.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= c <= 36;\nloop invariant z >= 36 * y;\nloop invariant c <= 36 ==> z >= 0;\nloop invariant c < 36 && unknown() ==> z < 36 * y + c + 1;\nloop invariant c == 36 ==> z >= 0;\nloop invariant c >= 36 ==> z >= 36 * y + 36;\nloop invariant y >= 0;\nloop invariant y >= 127;\n*/\n```\n\nExplanation:\n- The first loop invariant ensures that `c` stays between 0 and 36 inclusive.\n- The second loop invariant ensures that `z` is always greater than or equal to 36 times `y`.\n- The third loop invariant ensures that if `c` is less than 36, then `z` is greater than or equal to 0.\n- The fourth loop invariant ensures that if `c` is less than 36 and the loop condition holds, then `z` is less than 36 times `y` plus `c` plus 1. This is because in each iteration of the loop, either `c` increases by 1 or the loop condition fails. \n- The fifth loop invariant ensures that if `c` is equal to 36, then `z` is greater than or equal to 0. This is because the loop terminates when `c` is equal to 36 and the assertion is only checked at that point.\n- The sixth loop invariant ensures that if `c` is greater than or equal to 36, then `z` is greater than or equal to 36 times `y` plus 36. This is because `c` can only increase by 1 in each iteration of the loop, and the loop continues until `unknown()` returns 0.\n- The seventh loop invariant ensures that `y` is non-negative.\n- The eighth loop invariant ensures that `y` is greater than or equal to 127.",
            "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable assignments:\n- The variable `c` is assigned 0.\n- The variable `z` is assigned 36 times the value of `y`.\n\nLoop condition:\n- The loop executes while the function `unknown()` returns a non-zero value.\n\nPost-condition:\n- If `c` is less than 36 at the end of the loop, then `z` is greater than or equal to 0.\n\nLoop Invariants:\n- Before the loop execution, `z` is greater than or equal to 36 times `y`, since `z` is assigned 36 times `y` before the loop.\n- Before the loop execution, `c` is equal to 0, since `c` is assigned 0 before the loop.\n- In every iteration of the loop, `c` is less than or equal to 36, since `c` is incremented by 1 in each iteration of the loop as long as it is less than 36.\n- In every iteration of the loop, `z` is greater than or equal to 36 times `y`, since `z` is incremented by 1 in each iteration of the loop as long as `c` is less than 36, and `z` is initially assigned 36 times `y`.\n- After the loop termination, if `c` is less than 36, then `z` is greater than or equal to 36 times `y`, since the loop invariant holds for all iterations of the loop and the loop continues until `c` is less than 36. Therefore, if `c` is less than 36 at the end of the loop, then `z` is greater than or equal to 36 times `y`, which implies that `z` is greater than or equal to 0 since `y` is non-negative. \n\nPutting it all together:\n```\n/*@ \n    loop invariant z >= 36*y;\n    loop invariant c == 0;\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36*y + c;\n    loop invariant (c < 36) ==> (z >= 0);\n*/\n```",
            "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable assignments:\n- The variable `c` is initialized to 0.\n- The variable `z` is assigned the value of `36 * y`.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nPost-condition:\n- If the loop terminates and `c < 36` holds, then `z >= 0`.\n\nLoop invariants:\n- Before the loop execution:\n    - `c == 0`\n    - `z == 36 * y`\n    - `y >= 0`\n    - `y >= 127`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `(c < 36) ==> (z >= 36*y + c)`\n- After the loop termination:\n    - `(c >= 36) || (z >= 36*y + c)`\n    - `c < 36 ==> z >= 0`\n\nExplanation:\n- Before the loop execution, we know that `c` is 0 and `z` is equal to `36 * y`. We also know that `y` is non-negative and greater than or equal to 127. Since `z` is calculated as a positive integer times a non-negative integer, it must also be non-negative.\n- In every iteration of the loop, we know that `c` is less than 36 (because of the loop condition) and we want to show that `z` is greater than or equal to `36 * y + c`. We can do this using implication, because if `c` is less than 36, then `z` is incremented by 1, so `z` must be greater than or equal to `36 * y + c`.\n- After the loop termination, we know that `c` is either greater than or equal to 36 (if the loop terminated normally) or less than 36 (if the loop terminated because `unknown()` returned 0). If `c` is greater than or equal to 36, then the post-condition is vacuously true. If `c` is less than 36, then we know that `z` is greater than or equal to `36 * y + c`, which implies that `z` is greater than or equal to 0.",
            "Pre-conditions and variable assignments:\n- `c`, `y`, and `z` are integer variables.\n- `c` is assigned the value 0.\n- `y` is assumed to be greater than or equal to 0.\n- `y` is assumed to be greater than or equal to 127.\n- `z` is assigned the value 36 times `y`.\n\nLoop condition:\n- The loop executes as long as the result of the function `unknown()` is non-zero.\n\nLoop invariants:\n- Before the loop execution, `z` is equal to 36 times `y`, and `c` is equal to 0.\n```\n/*@ \n    loop invariant z == 36 * y;\n    loop invariant c == 0;\n*/\n```\n- In every iteration of the loop, if `c` is less than 36, then `z` is incremented by 1 and `c` is incremented by 1.\n```\n/*@ \n    loop invariant z == 36 * y + c;\n    loop invariant c >= 0 && c <= 36;\n    loop invariant (c < 36) ==> (z == (\\at(z, LoopEntry) + (\\at(c, LoopEntry) - c)));\n*/\n```\n- After the loop termination, if `c` is less than 36, then `z` is greater than or equal to 0.\n```\n/*@ \n    loop invariant z == 36 * y + c;\n    loop invariant c >= 0 && c <= 36;\n    loop invariant ((c < 36) && (!unknown())) ==> (z >= 0);\n*/\n```\nNote that we have used the `LoopEntry` keyword to access the value of `z` and `c` at the beginning of the loop. This is because their values may change during the loop execution, and we want to compare their current values to their initial values."
        ],
        "annotation_blocks": [
            "/*@ \nloop invariant 0 <= c <= 36;\nloop invariant z == 36 * y + c;\nloop invariant y >= 127;\nloop invariant c < 36 ==> z >= 0;\n*/",
            "/*@\nloop invariant 0 <= c <= 36;\nloop invariant z >= 36 * y;\nloop invariant c <= 36 ==> z >= 0;\nloop invariant c < 36 && unknown() ==> z < 36 * y + c + 1;\nloop invariant c == 36 ==> z >= 0;\nloop invariant c >= 36 ==> z >= 36 * y + 36;\nloop invariant y >= 0;\nloop invariant y >= 127;\n*/",
            "/*@ \n    loop invariant z >= 36*y;\n    loop invariant c == 0;\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36*y + c;\n    loop invariant (c < 36) ==> (z >= 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable assignments:\n- The variable `c` is initialized to 0.\n- The variable `z` is assigned the value of `36 * y`.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nPost-condition:\n- If the loop terminates and `c < 36` holds, then `z >= 0`.\n\nLoop invariants:\n- Before the loop execution:\n    - `c == 0`\n    - `z == 36 * y`\n    - `y >= 0`\n    - `y >= 127`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `(c < 36) ==> (z >= 36*y + c)`\n- After the loop termination:\n    - `(c >= 36) || (z >= 36*y + c)`\n    - `c < 36 ==> z >= 0`\n\nExplanation:\n- Before the loop execution, we know that `c` is 0 and `z` is equal to `36 * y`. We also know that `y` is non-negative and greater than or equal to 127. Since `z` is calculated as a positive integer times a non-negative integer, it must also be non-negative.\n- In every iteration of the loop, we know that `c` is less than 36 (because of the loop condition) and we want to show that `z` is greater than or equal to `36 * y + c`. We can do this using implication, because if `c` is less than 36, then `z` is incremented by 1, so `z` must be greater than or equal to `36 * y + c`.\n- After the loop termination, we know that `c` is either greater than or equal to 36 (if the loop terminated normally) or less than 36 (if the loop terminated because `unknown()` returned 0). If `c` is greater than or equal to 36, then the post-condition is vacuously true. If `c` is less than 36, then we know that `z` is greater than or equal to `36 * y + c`, which implies that `z` is greater than or equal to 0."
            ],
            "/*@ \n    loop invariant z == 36 * y;\n    loop invariant c == 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \nloop invariant 0 <= c <= 36;\nloop invariant z == 36 * y + c;\nloop invariant y >= 127;\nloop invariant c < 36 ==> z >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= c <= 36 is inductive.\nloop invariant z == 36 * y + c is inductive.\nloop invariant y >= 127 is inductive.\nloop invariant c < 36 ==> z >= 0 is inductive.\nAssertion z >= 0: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= c <= 36;\nloop invariant z >= 36 * y;\nloop invariant c <= 36 ==> z >= 0;\nloop invariant c < 36 && unknown() ==> z < 36 * y + c + 1;\nloop invariant c == 36 ==> z >= 0;\nloop invariant c >= 36 ==> z >= 36 * y + 36;\nloop invariant y >= 0;\nloop invariant y >= 127;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z >= 36 * y;\nloop invariant i3: c <= 36 ==> z >= 0;\n\nloop invariant i5: c == 36 ==> z >= 0;\n\nloop invariant i7: y >= 0;\nloop invariant i8: y >= 127;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant z >= 36*y;\n    loop invariant c == 0;\n    loop invariant 0 <= c <= 36;\n    loop invariant z >= 36*y + c;\n    loop invariant (c < 36) ==> (z >= 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant z >= 36*y is partially proven to be inductive.\nloop invariant c == 0 is established but not preserved.\nloop invariant 0 <= c <= 36 is partially proven to be inductive.\nloop invariant z >= 36*y + c is partially proven to be inductive.\nloop invariant (c < 36) ==> (z >= 0) is partially proven to be inductive.\nAssertion z >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: z >= 36*y;\n\nloop invariant i3: 0 <= c <= 36;\nloop invariant i4: z >= 36*y + c;\nloop invariant i5: (c < 36) ==> (z >= 0);\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The variable `y` is non-negative.\n- The variable `y` is greater than or equal to 127.\n\nVariable assignments:\n- The variable `c` is initialized to 0.\n- The variable `z` is assigned the value of `36 * y`.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nPost-condition:\n- If the loop terminates and `c < 36` holds, then `z >= 0`.\n\nLoop invariants:\n- Before the loop execution:\n    - `c == 0`\n    - `z == 36 * y`\n    - `y >= 0`\n    - `y >= 127`\n    - `z >= 0`\n- In every iteration of the loop:\n    - `(c < 36) ==> (z >= 36*y + c)`\n- After the loop termination:\n    - `(c >= 36) || (z >= 36*y + c)`\n    - `c < 36 ==> z >= 0`\n\nExplanation:\n- Before the loop execution, we know that `c` is 0 and `z` is equal to `36 * y`. We also know that `y` is non-negative and greater than or equal to 127. Since `z` is calculated as a positive integer times a non-negative integer, it must also be non-negative.\n- In every iteration of the loop, we know that `c` is less than 36 (because of the loop condition) and we want to show that `z` is greater than or equal to `36 * y + c`. We can do this using implication, because if `c` is less than 36, then `z` is incremented by 1, so `z` must be greater than or equal to `36 * y + c`.\n- After the loop termination, we know that `c` is either greater than or equal to 36 (if the loop terminated normally) or less than 36 (if the loop terminated because `unknown()` returned 0). If `c` is greater than or equal to 36, then the post-condition is vacuously true. If `c` is less than 36, then we know that `z` is greater than or equal to `36 * y + c`, which implies that `z` is greater than or equal to 0.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant z == 36 * y;\n    loop invariant c == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant z == 36 * y is established but not preserved.\nloop invariant c == 0 is partially proven to be inductive.\nAssertion z >= 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\n\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\nloop invariant i4: c < 36 ==> z >= 0;\nloop invariant i5: z >= 36 * y;\nloop invariant i6: c <= 36 ==> z >= 0;\nloop invariant i7: c < 36 && unknown() ==> z < 36 * y + c + 1;\nloop invariant i8: c == 36 ==> z >= 0;\nloop invariant i9: c >= 36 ==> z >= 36 * y + 36;\nloop invariant i10: y >= 0;\nloop invariant i11: z >= 36*y;\nloop invariant i12: c == 0;\nloop invariant i13: z >= 36*y + c;\nloop invariant i14: (c < 36) ==> (z >= 0);\nloop invariant i15: z == 36 * y;\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int y;\n  int z;\n  \n  (c = 0);\n  assume((y >= 0));\n  assume((y >= 127));\n  (z = (36 * y));\n  \n  /*@\nloop invariant i1: 0 <= c <= 36;\nloop invariant i2: z == 36 * y + c;\nloop invariant i3: y >= 127;\nloop invariant i4: c < 36 ==> z >= 0;\nloop invariant i5: z >= 36 * y;\nloop invariant i6: c <= 36 ==> z >= 0;\n\nloop invariant i8: c == 36 ==> z >= 0;\nloop invariant i9: c >= 36 ==> z >= 36 * y + 36;\nloop invariant i10: y >= 0;\nloop invariant i11: z >= 36*y;\n\nloop invariant i13: z >= 36*y + c;\nloop invariant i14: (c < 36) ==> (z >= 0);\n\n*/\nwhile (unknown()) {\n    if ( (c < 36) )\n    {\n    (z  = (z + 1));\n    (c  = (c + 1));\n    }\n\n  }\n  \nif ( (c < 36) )\n{;\n//@ assert( (z >= 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c"
        ],
        "total": 63,
        "success_count": 39,
        "failure_count": 24,
        "success_rate": 0.6190476190476191
    }
}