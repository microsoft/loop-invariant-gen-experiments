{
    "logs": {
        "file": "../data/benchmarks/code2inv/55.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variable `n` should be greater than zero.\n\nLoop condition:\n- The loop runs as long as `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `0 <= c <= n` (since `c` is initialized to 0 and can be incremented by at most 1 in each iteration of the loop, and it should not exceed `n`)\n- `v1 = c`\n- `v2 = n`\n- `v3 = unknown()`\n- `((v3 != 0) ==> (v1 <= v2))` (if `v3` is non-zero, `c` should not exceed `n`)\n- `((v3 == 0) ==> (v1 < v2))` (if `v3` is zero, `c` should be strictly less than `n`)\n- `(v1 < 0) ==> (v1 == v2)` (if `c` becomes negative, it should be equal to `n` according to the post-condition)\n- `(v1 > v2) ==> (v1 == n)` (if `c` becomes greater than `n`, it should be equal to `1` according to the post-condition)\n\nUsing these loop invariants, we can show that the post-condition `(c == n)` holds at the end of the loop. \n\nHere is the code block for the loop invariants:\n```\n/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant v1 == c;\n    loop invariant v2 == n;\n    loop invariant v3 == unknown();\n    loop invariant ((v3 != 0) ==> (v1 <= v2));\n    loop invariant ((v3 == 0) ==> (v1 < v2));\n    loop invariant ((v1 < 0) ==> (v1 == v2));\n    loop invariant ((v1 > v2) ==> (v1 == 1));\n*/\n```",
            "Preconditions:\n- The variable `n` is greater than 0.\n\nLoop Invariant(s):\n- `c` is always greater than or equal to 0 and less than or equal to `n`.\n- If `c` is equal to `n`, then the loop condition is false (i.e., `unknown()` returns false).\n- If `c` is greater than `n`, then the loop condition is false (i.e., `unknown()` returns false).\n- If `c` is less than or equal to `n`, then the loop condition is true (i.e., `unknown()` returns true).\n- If the loop is not executed at all, then the post-condition is trivially satisfied.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n  loop invariant 0 <= c <= n;\n  loop invariant (c == n) ==> !unknown();\n  loop invariant (c > n) ==> !unknown();\n  loop invariant (c <= n) ==> unknown();\n  loop invariant !unknown() ==> (c >= 0 && c <= n);\n*/\n```",
            "Pre-conditions:\n- The value of variable `n` is greater than 0.\n\nVariable Assignments:\n- `c` is initialized to 0.\n\nLoop Condition:\n- The loop executes while the value of `unknown()` is non-zero.\n\nLoop Invariants:\n- `c` is always greater than or equal to 0 and less than or equal to `n`.\n- If `unknown()` is non-zero, then `c` can only be incremented and not set to a value less than 1 or greater than `n`. So, if `unknown()` is non-zero, then `c` is always greater than or equal to 1 and less than or equal to `n`.\n- If `unknown()` is zero, then `c` can only be set to 1 and not to a value less than 1 or greater than `n`. So, if `unknown()` is zero, then `c` is always equal to 1.\n- After the loop terminates, if `c` is less than 0 or greater than `n`, then it must be equal to `n`.\n\nPutting it all together, the loop invariants are:\n```\n/*@\n  loop invariant 0 <= c <= n;\n  loop invariant unknown() && (c > n) ==> (c == \\old(c) + 1);\n  loop invariant unknown() && (c <= n) ==> (c >= 1);\n  loop invariant !unknown() ==> (c == 1);\n*/\n```",
            "Pre-conditions:\n- The program has 5 integer variables `c`, `n`, `v1`, `v2`, and `v3`.\n- The variable `c` is initialized to `0`.\n- The variable `n` is a positive integer.\n\nLoop condition:\n- The loop executes while the function call `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `0 <= c <= n` (since `c` is initialized to `0` and it is incremented by `1` in each iteration of the loop, and the loop continues until `unknown()` returns a non-zero value).\n- If the loop is executed `k` times, then `1 <= c <= n` at the beginning of the `(k+1)`-th iteration (since `c` is reset to `1` when it reaches `n` and it is incremented by `1` in each iteration).\n- If the loop is executed `k` times and `c > n`, then `c` is incremented by `1` at the beginning of the `(k+1)`-th iteration (since `c` is reset to `1` when it reaches `n`).\n- If the loop is executed `k` times and `c <= n`, then `c` does not change at the beginning of the `(k+1)`-th iteration.\n- If the loop terminates and `c < 0` or `c > n`, then `c` must be equal to `n`.\n\nPutting all these together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) ==> (1 <= c <= n) ==> (1 <= \\at(c, Here) <= n));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c > n ==> \\at(c, Here) == (\\at(c, Pre) + 1));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c <= n ==> \\at(c, Here) == \\at(c, Pre));\n    loop invariant ((\\at(unknown(), Here) == 0) ==> (c < 0 ==> c == n) && (c > n ==> c == n));\n*/\n```",
            "Pre-conditions:\n- The variable `n` is greater than 0.\n\nVariable Assignments:\n- The variable `c` is initialized to 0.\n\nLoop Condition:\n- The loop continues as long as the function `unknown()` returns a non-zero value.\n\nLoop Invariants:\n- The value of `c` is always greater than or equal to 0 and less than or equal to `n`.\n    - `(c >= 0) && (c <= n)`\n- The loop invariant implies that the condition `(c > n)` in the program cannot hold.\n- If the loop terminates, then the loop invariant implies that the condition `(c < 0) || (c > n)` cannot hold.\n- If `(c == n)` holds, then the loop invariant implies that the loop will terminate.\n- If `(c == n)` holds, then the loop invariant implies that the next value of `c` will be equal to 1.\n- If `(c < n)` holds, then the loop invariant implies that the next value of `c` will be greater than the current value of `c`.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant (c >= 0) && (c <= n);\n    loop invariant (c <= n) ==> !unknown();\n    loop invariant ((c < n) && (c > 0)) ==> unknown() ==> (c == \\old(c) + 1);\n    loop invariant (c == n) ==> !unknown();\n    loop invariant (c == n) ==> (c == 1);\n    loop invariant (c < 0) || (c > n) ==> !unknown();\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant v1 == c;\n    loop invariant v2 == n;\n    loop invariant v3 == unknown();\n    loop invariant ((v3 != 0) ==> (v1 <= v2));\n    loop invariant ((v3 == 0) ==> (v1 < v2));\n    loop invariant ((v1 < 0) ==> (v1 == v2));\n    loop invariant ((v1 > v2) ==> (v1 == 1));\n*/",
            "/*@ \n  loop invariant 0 <= c <= n;\n  loop invariant (c == n) ==> !unknown();\n  loop invariant (c > n) ==> !unknown();\n  loop invariant (c <= n) ==> unknown();\n  loop invariant !unknown() ==> (c >= 0 && c <= n);\n*/",
            "/*@\n  loop invariant 0 <= c <= n;\n  loop invariant unknown() && (c > n) ==> (c == \\old(c) + 1);\n  loop invariant unknown() && (c <= n) ==> (c >= 1);\n  loop invariant !unknown() ==> (c == 1);\n*/",
            "/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) ==> (1 <= c <= n) ==> (1 <= \\at(c, Here) <= n));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c > n ==> \\at(c, Here) == (\\at(c, Pre) + 1));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c <= n ==> \\at(c, Here) == \\at(c, Pre));\n    loop invariant ((\\at(unknown(), Here) == 0) ==> (c < 0 ==> c == n) && (c > n ==> c == n));\n*/",
            "/*@ \n    loop invariant (c >= 0) && (c <= n);\n    loop invariant (c <= n) ==> !unknown();\n    loop invariant ((c < n) && (c > 0)) ==> unknown() ==> (c == \\old(c) + 1);\n    loop invariant (c == n) ==> !unknown();\n    loop invariant (c == n) ==> (c == 1);\n    loop invariant (c < 0) || (c > n) ==> !unknown();\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant v1 == c;\n    loop invariant v2 == n;\n    loop invariant v3 == unknown();\n    loop invariant ((v3 != 0) ==> (v1 <= v2));\n    loop invariant ((v3 == 0) ==> (v1 < v2));\n    loop invariant ((v1 < 0) ==> (v1 == v2));\n    loop invariant ((v1 > v2) ==> (v1 == 1));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n  loop invariant 0 <= c <= n;\n  loop invariant (c == n) ==> !unknown();\n  loop invariant (c > n) ==> !unknown();\n  loop invariant (c <= n) ==> unknown();\n  loop invariant !unknown() ==> (c >= 0 && c <= n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@\n  loop invariant 0 <= c <= n;\n  loop invariant unknown() && (c > n) ==> (c == \\old(c) + 1);\n  loop invariant unknown() && (c <= n) ==> (c >= 1);\n  loop invariant !unknown() ==> (c == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= c <= n;\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) ==> (1 <= c <= n) ==> (1 <= \\at(c, Here) <= n));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c > n ==> \\at(c, Here) == (\\at(c, Pre) + 1));\n    loop invariant (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c <= n ==> \\at(c, Here) == \\at(c, Pre));\n    loop invariant ((\\at(unknown(), Here) == 0) ==> (c < 0 ==> c == n) && (c > n ==> c == n));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant (c >= 0) && (c <= n);\n    loop invariant (c <= n) ==> !unknown();\n    loop invariant ((c < n) && (c > 0)) ==> unknown() ==> (c == \\old(c) + 1);\n    loop invariant (c == n) ==> !unknown();\n    loop invariant (c == n) ==> (c == 1);\n    loop invariant (c < 0) || (c > n) ==> !unknown();\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: (c >= 0) && (c <= n);\n\n\n\nloop invariant i5: (c == n) ==> (c == 1);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\nloop invariant i2: v1 == c;\nloop invariant i3: v2 == n;\nloop invariant i4: v3 == unknown();\nloop invariant i5: ((v3 != 0) ==> (v1 <= v2));\nloop invariant i6: ((v3 == 0) ==> (v1 < v2));\nloop invariant i7: ((v1 < 0) ==> (v1 == v2));\nloop invariant i8: ((v1 > v2) ==> (v1 == 1));\nloop invariant i9: (c == n) ==> !unknown();\nloop invariant i10: (c > n) ==> !unknown();\nloop invariant i11: (c <= n) ==> unknown();\nloop invariant i12: !unknown() ==> (c >= 0 && c <= n);\nloop invariant i13: unknown() && (c > n) ==> (c == \\old(c) + 1);\nloop invariant i14: unknown() && (c <= n) ==> (c >= 1);\nloop invariant i15: !unknown() ==> (c == 1);\nloop invariant i16: (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) ==> (1 <= c <= n) ==> (1 <= \\at(c, Here) <= n));\nloop invariant i17: (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c > n ==> \\at(c, Here) == (\\at(c, Pre) + 1));\nloop invariant i18: (\\forall integer k; 0 <= k <= \\at(unknown(), Pre) && c <= n ==> \\at(c, Here) == \\at(c, Pre));\nloop invariant i19: ((\\at(unknown(), Here) == 0) ==> (c < 0 ==> c == n) && (c > n ==> c == n));\nloop invariant i20: (c >= 0) && (c <= n);\nloop invariant i21: (c <= n) ==> !unknown();\nloop invariant i22: ((c < n) && (c > 0)) ==> unknown() ==> (c == \\old(c) + 1);\nloop invariant i23: (c == n) ==> (c == 1);\nloop invariant i24: (c < 0) || (c > n) ==> !unknown();\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 19,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  int v1;\n  int v2;\n  int v3;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: 0 <= c <= n;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nloop invariant i20: (c >= 0) && (c <= n);\n\n\nloop invariant i23: (c == n) ==> (c == 1);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c < 0) )\nif ( (c > n) )\n{;\n//@ assert( (c == n) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c"
        ],
        "total": 47,
        "success_count": 31,
        "failure_count": 16,
        "success_rate": 0.6595744680851063
    }
}