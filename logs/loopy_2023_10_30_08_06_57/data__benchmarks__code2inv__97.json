{
    "logs": {
        "file": "../data/benchmarks/code2inv/97.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program does not take any input.\n- The variables i, j, x, and y are uninitialized and contain garbage values.\n\nVariable bounds:\n- i, j, x, y >= 0\n\nLoop condition:\n- i <= x\n\nPost-condition:\n- If y == 1, then i == j.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= j <= (x*y);\n    loop invariant (i == 0) ==> (j == 0);\n    loop invariant (i > x) ==> (i == j);\n*/\n```\nExplanation:\n- The first loop invariant states that i is always greater than or equal to 0 and less than or equal to x.\n- The second loop invariant states that j is always greater than or equal to 0 and less than or equal to x*y. This is because j is updated by adding y in each iteration of the loop.\n- The third loop invariant states that if i is 0, then j is also 0. This is because j is initialized to 0 and then incremented by y in each iteration of the loop.\n- The fourth loop invariant states that if i is greater than x, then i is equal to j. This is because j is incremented by y in each iteration of the loop and i is incremented by 1. Therefore, the total value of j after x iterations would be y*x, which is equal to the value of i. This loop invariant is conditional and is only relevant if the post-condition is satisfied.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- j = 0\n- i = 0\n- y = 2\n\nLoop Condition:\n- i <= x\n\nPost-condition:\n- If y == 1, then i == j\n\nLoop Invariants:\n- i >= 0\n- j >= 0\n- y == 2 ==> x >= 0\n- i <= x + 1\n- j == y * i\n- y != 1 ==> true\n- y == 1 ==> (i == j)\n\nExplanation:\n- The first two loop invariants ensure that i and j are non-negative.\n- The third loop invariant states that if y equals 2, then x must be non-negative.\n- The fourth loop invariant states that i is less than or equal to x plus 1. Since i is incremented by 1 at each iteration of the loop, this invariant ensures that the loop eventually terminates when i becomes greater than x.\n- The fifth loop invariant states that j is always equal to y times i.\n- The sixth loop invariant states that if y is not equal to 1, then the invariant is trivially true. This is because the post-condition only applies when y equals 1.\n- The seventh loop invariant is the post-condition itself, but with a guard condition. If y is not equal to 1, then the post-condition does not apply, so the invariant is trivially true. If y is equal to 1, then the invariant states that i and j are equal.",
            "We start with some pre-conditions and variable assignments:\n```\n(i <= x)\nj = 0\ni = 0\ny = 2\n```\nWe analyze the loop body and find the loop condition `(i <= x)`. \n\nTo prove the post-condition `assert(i == j)` we need to find loop invariants `I` such that `pre-condition ==> I`, `I && loop-condition ==> I'` and `I && !(loop-condition) ==> post-condition`. \n\nHere are some possible loop invariants:\n```\n/*@ \nloop invariant (i <= x + 1);\nloop invariant (j == y * i);\nloop invariant (y > 0);\nloop invariant (y <= 2);\n*/\n```\nLet's verify that these invariants hold:\n\n- `(i <= x + 1)` holds as `i` is incremented by 1 in every loop iteration and the loop stops when `i > x`, so the last value of `i` is `x+1`.\n- `(j == y * i)` holds as `j` is incremented by `y` in every loop iteration and the initial value of `j` is 0, so after `i` iterations, `j` should be `y*i`.\n- `(y > 0)` and `(y <= 2)` hold as the initial value of `y` is 2 and it is not changed in the loop.\n\nUsing these loop invariants, we can prove the post-condition:\n```\n(i <= x + 1) && (j == y * i) && (y > 0) && (y <= 2) && !(i <= x) ==> (i == j)\n```\nwhich simplifies to\n```\n(i == j)\n```\nThis implies that the assertion holds when `(y == 1)`. We can add this condition to the loop invariant:\n```\n/*@ \nloop invariant (i <= x + 1);\nloop invariant (j == y * i);\nloop invariant (y > 0);\nloop invariant (y <= 2);\nloop invariant ((y != 1) ==> (i == j));\n*/\n```",
            "Before we start, let's make a note of the pre-conditions and variable assignments in the program:\n\n- The program does not have any explicit pre-conditions.\n- Variables `i`, `j`, `x`, and `y` are declared and assigned garbage values.\n- Variable `j` is assigned a value of 0.\n- Variable `i` is assigned a value of 0.\n- Variable `y` is assigned a value of 2.\n\nNow, let's analyze the loop body:\n\n- `i` is incremented by 1 in each iteration of the loop.\n- `j` is incremented by `y` in each iteration of the loop.\n\nThe loop condition is `i <= x`.\n\nSince there are no bounds on the values of `x` and the loop variable `i`, we cannot directly state that `i` will eventually become greater than `x` and the loop will terminate.\n\nHowever, we can use the fact that `i` is incremented by 1 in each iteration of the loop to our advantage. We can state that `i` will eventually become greater than `x` and the loop will terminate.\n\nTherefore, a possible loop invariant for the given program is:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/\n```\n\nWe can prove that this loop invariant holds true:\n\n- Before the loop execution, `i` is assigned the value 0 and `j` is assigned the value 0. Therefore, the first two loop invariants hold true. Also, since `y` is assigned the value 2, the third loop invariant holds true.\n- In every iteration of the loop, `i` is incremented by 1 and `j` is incremented by `y`. Therefore, the first and third loop invariants hold true. Also, since `i <= x` is the loop condition, we have `i <= x + 1`. Therefore, the second loop invariant also holds true.\n- After the loop termination, we have `i > x` and `j == y * i`. Therefore, we have `i == j / y`. If `y` is equal to 1, then the assertion holds true trivially. Otherwise, we have `y > 1` and `i == j / y < j`. Since `j == y * i`, we have `i < j`. Therefore, the assertion holds true in this case as well. \n\nTherefore, the loop invariant we have provided implies the post-condition of the program.",
            "First, let's note the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- None\n\nVariable Assignments:\n- `j` is assigned the value `0`\n- `i` is assigned the value `0`\n- `y` is assigned the value `2`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n```\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n}\n```\nThe loop condition is `i <= x`.\n\nNow, let's output the necessary loop invariants:\n\n```\n/*@\n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant 0 <= j;\n    loop invariant (\\forall integer k; 0 <= k < i ==> j == k*y);\n    loop invariant (i > x ==> y == 1 ==> i == j);\n*/\n```\n\nExplanation:\n\n- `0 <= i;` and `i <= x + 1;` ensure that `i` is always within the bounds of `[0, x+1]` at the beginning and end of each loop iteration.\n- `0 <= j;` ensures that `j` is always non-negative at the beginning and end of each loop iteration.\n- `(\\forall integer k; 0 <= k < i ==> j == k*y);` ensures that `j` is always a multiple of `y` at the beginning and end of each loop iteration. This is because `j` is updated by adding `y` in each iteration. So, `j` should always be equal to `y` times the number of times the loop has executed so far.\n- `(i > x ==> y == 1 ==> i == j);` is an implication that handles the conditional assertion. If `i > x` is true, then the loop has terminated. If `y == 1` is also true, then the assertion `(i == j)` must hold. This implication is true because if `y != 1`, then the assertion does not need to hold."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= j <= (x*y);\n    loop invariant (i == 0) ==> (j == 0);\n    loop invariant (i > x) ==> (i == j);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- j = 0\n- i = 0\n- y = 2\n\nLoop Condition:\n- i <= x\n\nPost-condition:\n- If y == 1, then i == j\n\nLoop Invariants:\n- i >= 0\n- j >= 0\n- y == 2 ==> x >= 0\n- i <= x + 1\n- j == y * i\n- y != 1 ==> true\n- y == 1 ==> (i == j)\n\nExplanation:\n- The first two loop invariants ensure that i and j are non-negative.\n- The third loop invariant states that if y equals 2, then x must be non-negative.\n- The fourth loop invariant states that i is less than or equal to x plus 1. Since i is incremented by 1 at each iteration of the loop, this invariant ensures that the loop eventually terminates when i becomes greater than x.\n- The fifth loop invariant states that j is always equal to y times i.\n- The sixth loop invariant states that if y is not equal to 1, then the invariant is trivially true. This is because the post-condition only applies when y equals 1.\n- The seventh loop invariant is the post-condition itself, but with a guard condition. If y is not equal to 1, then the post-condition does not apply, so the invariant is trivially true. If y is equal to 1, then the invariant states that i and j are equal."
            ],
            "/*@ \nloop invariant (i <= x + 1);\nloop invariant (j == y * i);\nloop invariant (y > 0);\nloop invariant (y <= 2);\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/",
            "/*@\n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant 0 <= j;\n    loop invariant (\\forall integer k; 0 <= k < i ==> j == k*y);\n    loop invariant (i > x ==> y == 1 ==> i == j);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= j <= (x*y);\n    loop invariant (i == 0) ==> (j == 0);\n    loop invariant (i > x) ==> (i == j);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i <= x is neither established nor preserved.\nloop invariant 0 <= j <= (x*y) is established but not preserved.\nloop invariant (i == 0) ==> (j == 0) is partially proven to be inductive.\nloop invariant (i > x) ==> (i == j) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- j = 0\n- i = 0\n- y = 2\n\nLoop Condition:\n- i <= x\n\nPost-condition:\n- If y == 1, then i == j\n\nLoop Invariants:\n- i >= 0\n- j >= 0\n- y == 2 ==> x >= 0\n- i <= x + 1\n- j == y * i\n- y != 1 ==> true\n- y == 1 ==> (i == j)\n\nExplanation:\n- The first two loop invariants ensure that i and j are non-negative.\n- The third loop invariant states that if y equals 2, then x must be non-negative.\n- The fourth loop invariant states that i is less than or equal to x plus 1. Since i is incremented by 1 at each iteration of the loop, this invariant ensures that the loop eventually terminates when i becomes greater than x.\n- The fifth loop invariant states that j is always equal to y times i.\n- The sixth loop invariant states that if y is not equal to 1, then the invariant is trivially true. This is because the post-condition only applies when y equals 1.\n- The seventh loop invariant is the post-condition itself, but with a guard condition. If y is not equal to 1, then the post-condition does not apply, so the invariant is trivially true. If y is equal to 1, then the invariant states that i and j are equal.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \nloop invariant (i <= x + 1);\nloop invariant (j == y * i);\nloop invariant (y > 0);\nloop invariant (y <= 2);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (i <= x + 1) is preserved but not established.\nloop invariant (j == y * i) is partially proven to be inductive.\nloop invariant (y > 0) is partially proven to be inductive.\nloop invariant (y <= 2) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\nloop invariant i2: (j == y * i);\nloop invariant i3: (y > 0);\nloop invariant i4: (y <= 2);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant j == y * i;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nloop invariant j == y * i is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: j == y * i;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@\n    loop invariant 0 <= i;\n    loop invariant i <= x + 1;\n    loop invariant 0 <= j;\n    loop invariant (\\forall integer k; 0 <= k < i ==> j == k*y);\n    loop invariant (i > x ==> y == 1 ==> i == j);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nloop invariant 0 <= j is established but not preserved.\nloop invariant (\\forall integer k; 0 <= k < i ==> j == k*y) is established but not preserved.\nloop invariant (i > x ==> y == 1 ==> i == j) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\n\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant 0 <= i <= x is neither established nor preserved.\nloop invariant 0 <= j <= (x*y) is partially proven to be inductive.\nloop invariant (i == 0) ==> (j == 0) is partially proven to be inductive.\nloop invariant (i > x) ==> (i == j) is partially proven to be inductive.\nloop invariant (i <= x + 1) is partially proven to be inductive.\nloop invariant (j == y * i) is partially proven to be inductive.\nloop invariant (y > 0) is partially proven to be inductive.\nloop invariant (y <= 2) is partially proven to be inductive.\nloop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= x + 1 is partially proven to be inductive.\nloop invariant j == y * i is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant (\\forall integer k; 0 <= k < i ==> j == k*y) is established but not preserved.\nloop invariant (i > x ==> y == 1 ==> i == j) is partially proven to be inductive.\nAssertion i == j: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\nloop invariant i1: 0 <= i <= x;\nloop invariant i2: 0 <= j <= (x*y);\nloop invariant i3: (i == 0) ==> (j == 0);\nloop invariant i4: (i > x) ==> (i == j);\nloop invariant i5: (i <= x + 1);\nloop invariant i6: (j == y * i);\nloop invariant i7: (y > 0);\nloop invariant i8: (y <= 2);\nloop invariant i9: 0 <= i;\nloop invariant i10: i <= x + 1;\nloop invariant i11: j == y * i;\nloop invariant i12: 0 <= j;\nloop invariant i13: (\\forall integer k; 0 <= k < i ==> j == k*y);\nloop invariant i14: (i > x ==> y == 1 ==> i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 2);\n  \n  /*@\n\n\nloop invariant i3: (i == 0) ==> (j == 0);\n\n\nloop invariant i6: (j == y * i);\nloop invariant i7: (y > 0);\nloop invariant i8: (y <= 2);\nloop invariant i9: 0 <= i;\n\nloop invariant i11: j == y * i;\nloop invariant i12: 0 <= j;\n\nloop invariant i14: (i > x ==> y == 1 ==> i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c"
        ],
        "total": 86,
        "success_count": 59,
        "failure_count": 27,
        "success_rate": 0.686046511627907
    }
}