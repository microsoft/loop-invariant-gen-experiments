{
    "logs": {
        "file": "../data/benchmarks/code2inv/85.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n\nNone.\n\nVariable Assignments:\n\n- x is assigned the value -15000.\n- y, z1, z2, and z3 are uninitialized and may contain garbage values.\n\nLoop Condition:\n\n- The loop continues as long as x is less than 0.\n\nLoop Invariants:\n\n- Before the loop execution, y is greater than or equal to 0, since it is uninitialized.\n```\n/*@ loop invariant y >= 0; */\n```\n- Before the loop execution, x is less than or equal to -15000, since it is assigned -15000.\n```\n/*@ loop invariant x <= -15000; */\n```\n- In every iteration of the loop, x is decreasing or staying the same, and y is increasing by 1.\n```\n/*@ loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant (x + y) <= -15000;\n*/\n```\n- After the loop termination, x is greater than or equal to 0, since the loop condition is !(x < 0) and x is an integer.\n```\n/*@ assert x >= 0 ==> y > 0; */\n```\n- Since z1, z2, and z3 are not used in the loop or assertion, they do not need any loop invariants.\n\nPutting it all together, we have:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  while ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n/*@ assert x >= 0 ==> y > 0; */\n\n/*@ loop invariant x <= 0;\n    loop invariant y >= 0;\n    loop invariant (x + y) <= -15000;\n*/\n}\n\n}\n```",
            "Pre-conditions:\n- All variables are uninitialized except for `x` which is initialized to `-15000`.\n\nLoop condition:\n- The loop continues while `x` is less than `0`.\n\nPost-condition:\n- `y` is greater than `0`.\n\nLoop invariants:\n- Before the loop execution:\n    - `x <= -15000`\n    - `y == 0`\n- In every iteration of the loop:\n    - `x < 0`\n    - `y >= 0`\n    - `y <= \\max(y)`, where `\\max(y)` is the maximum possible value of `y` (since `y` is incremented by `1` in each iteration, its maximum value is `INT_MAX`).\n    - `x + y <= 0`\n- After the loop termination:\n    - `y > 0` ==> `y >= 1` (since `y` is incremented by `1` in each iteration and it starts at `0`)\n\nPutting it all together:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n    loop invariant x <= -15000;\n    loop invariant y == 0;\n    loop invariant x < 0 ==> y >= 0;\n    loop invariant x < 0 ==> y <= INT_MAX;\n    loop invariant x + y <= 0;\n  */\n  while ((x < 0)) {\n    {\n      (x  = (x + y));\n      (y  = (y + 1));\n    }\n  }\n  \n  /*@\n    loop invariant y > 0 ==> y >= 1;\n  */\n  {;\n    //@ assert( (y > 0) );\n  }\n\n}\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is initialized to -15000\n- y, z1, z2, z3 are uninitialized and may contain garbage values\n\nLoop condition:\n- x < 0\n\nLoop invariants:\n- At the beginning of the loop:\n    - x < 0  (since it is the loop condition)\n    - y >= 0\n- In every iteration of the loop:\n    - x + y <= -15000  (since x starts at -15000 and decreases with each iteration while y increases)\n    - y >= 0\n- At the end of the loop:\n    - x >= 0 ==> y > 0  (since the loop terminates when x is non-negative and the assertion is that y is positive)\n\nPutting it all together:\n```\n/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant x + y <= -15000;\n    loop invariant y >= 0;\n    loop assigns x, y;\n*/\nwhile (x < 0) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n}\n/*@ \n    loop invariant x >= 0 ==> y > 0;\n*/\n{;\n//@ assert( (y > 0) );\n}\n```",
            "Pre-conditions and variable assignments:\n- x is assigned the value -15000.\n- y, z1, z2 and z3 are uninitialized and may contain garbage values.\n\nLoop condition:\n- The loop executes while x is less than 0.\n\nLoop invariants:\n- Before the loop execution, y is non-negative.\n- In every iteration of the loop, y is non-negative and x + y is less than or equal to 0.\n- After the loop termination, y is positive.\n\nExplanation:\n- Before the loop execution, y is uninitialized and may contain a garbage value. However, since y is incremented by 1 in each iteration of the loop, it will eventually become non-negative.\n- In every iteration of the loop, x is negative and y is non-negative. Therefore, x + y is less than or equal to 0.\n- After the loop termination, x is non-negative and y is the smallest non-negative integer that satisfies x + y greater than or equal to 0. Therefore, y is positive.\n\nCode:\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant y >= 0 && x + y <= 0;\n    loop invariant y > 0 ==> y > 0;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value -15000 at the beginning of the program.\n\nLoop condition:\n- The loop executes while x is less than 0.\n\nLoop invariants:\n- Before the loop execution:\n    - y >= 0\n    - x <= -15000\n    - x + y <= -15000\n- In every iteration of the loop:\n    - x < 0\n    - y >= 0\n    - x + y <= -15000\n- After the loop termination:\n    - y >= 0\n    - x >= 0 ==> y > 0\n\nExplanation of loop invariants:\n- Before the loop execution:\n    - y >= 0: Since y is incremented by 1 in each iteration of the loop, it must be non-negative at the beginning.\n    - x <= -15000: This is given in the variable assignment.\n    - x + y <= -15000: This is true before the loop execution because x is initialized to -15000 and y is non-negative.\n- In every iteration of the loop:\n    - x < 0: This is the loop condition.\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x + y <= -15000: This is true in every iteration because x becomes more negative and y becomes more positive in each iteration.\n- After the loop termination:\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x >= 0 ==> y > 0: The assertion is guarded by the condition x >= 0. If x is greater than or equal to 0, then the loop condition is false and the loop is not executed. Therefore, we only need to consider the case where x is less than 0 after the loop terminates. In this case, we know that x + y is less than or equal to -15000 from the loop invariant. Since x is less than 0 and y is non-negative, we know that y must be greater than 0. Therefore, the assertion holds in this case. If x is greater than or equal to 0 after the loop terminates, then the assertion trivially holds because the loop is not executed."
        ],
        "annotation_blocks": [
            "/*@ loop invariant y >= 0; */",
            "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n    loop invariant x <= -15000;\n    loop invariant y == 0;\n    loop invariant x < 0 ==> y >= 0;\n    loop invariant x < 0 ==> y <= INT_MAX;\n    loop invariant x + y <= 0;\n  */\n  while ((x < 0)) {\n    {\n      (x  = (x + y));\n      (y  = (y + 1));\n    }\n  }\n  \n  /*@\n    loop invariant y > 0 ==> y >= 1;\n  */\n  {;\n    //@ assert( (y > 0) );\n  }\n\n}",
            "/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant x + y <= -15000;\n    loop invariant y >= 0;\n    loop assigns x, y;\n*/\nwhile (x < 0) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n}\n/*@ \n    loop invariant x >= 0 ==> y > 0;\n*/\n{;\n//@ assert( (y > 0) );\n}",
            "/*@ \n    loop invariant y >= 0;\n    loop invariant y >= 0 && x + y <= 0;\n    loop invariant y > 0 ==> y > 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value -15000 at the beginning of the program.\n\nLoop condition:\n- The loop executes while x is less than 0.\n\nLoop invariants:\n- Before the loop execution:\n    - y >= 0\n    - x <= -15000\n    - x + y <= -15000\n- In every iteration of the loop:\n    - x < 0\n    - y >= 0\n    - x + y <= -15000\n- After the loop termination:\n    - y >= 0\n    - x >= 0 ==> y > 0\n\nExplanation of loop invariants:\n- Before the loop execution:\n    - y >= 0: Since y is incremented by 1 in each iteration of the loop, it must be non-negative at the beginning.\n    - x <= -15000: This is given in the variable assignment.\n    - x + y <= -15000: This is true before the loop execution because x is initialized to -15000 and y is non-negative.\n- In every iteration of the loop:\n    - x < 0: This is the loop condition.\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x + y <= -15000: This is true in every iteration because x becomes more negative and y becomes more positive in each iteration.\n- After the loop termination:\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x >= 0 ==> y > 0: The assertion is guarded by the condition x >= 0. If x is greater than or equal to 0, then the loop condition is false and the loop is not executed. Therefore, we only need to consider the case where x is less than 0 after the loop terminates. In this case, we know that x + y is less than or equal to -15000 from the loop invariant. Since x is less than 0 and y is non-negative, we know that y must be greater than 0. Therefore, the assertion holds in this case. If x is greater than or equal to 0 after the loop terminates, then the assertion trivially holds because the loop is not executed."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ loop invariant y >= 0; */",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nAssertion y > 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n    loop invariant x <= -15000;\n    loop invariant y == 0;\n    loop invariant x < 0 ==> y >= 0;\n    loop invariant x < 0 ==> y <= INT_MAX;\n    loop invariant x + y <= 0;\n  */\n  while ((x < 0)) {\n    {\n      (x  = (x + y));\n      (y  = (y + 1));\n    }\n  }\n  \n  /*@\n    loop invariant y > 0 ==> y >= 1;\n  */\n  {;\n    //@ assert( (y > 0) );\n  }\n\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 17: unbound logic variable INT_MAX. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\nloop invariant i6: y > 0 ==> y >= 1;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x < 0;\n    loop invariant y >= 0;\n    loop invariant x + y <= -15000;\n    loop invariant y >= 0;\n    loop assigns x, y;\n*/\nwhile (x < 0) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n}\n/*@ \n    loop invariant x >= 0 ==> y > 0;\n*/\n{;\n//@ assert( (y > 0) );\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x < 0 is partially proven to be inductive.\nloop invariant y >= 0 is preserved but not established.\nloop invariant x + y <= -15000 is neither established nor preserved.\nloop invariant x >= 0 ==> y > 0 is partially proven to be inductive.\nAssertion y > 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\nloop invariant i4: x >= 0 ==> y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant y >= 0;\n    loop invariant y >= 0 && x + y <= 0;\n    loop invariant y > 0 ==> y > 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y >= 0 is preserved but not established.\nloop invariant y >= 0 && x + y <= 0 is neither established nor preserved.\nloop invariant y > 0 ==> y > 0 is partially proven to be inductive.\nAssertion y > 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\nloop invariant i3: y > 0 ==> y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value -15000 at the beginning of the program.\n\nLoop condition:\n- The loop executes while x is less than 0.\n\nLoop invariants:\n- Before the loop execution:\n    - y >= 0\n    - x <= -15000\n    - x + y <= -15000\n- In every iteration of the loop:\n    - x < 0\n    - y >= 0\n    - x + y <= -15000\n- After the loop termination:\n    - y >= 0\n    - x >= 0 ==> y > 0\n\nExplanation of loop invariants:\n- Before the loop execution:\n    - y >= 0: Since y is incremented by 1 in each iteration of the loop, it must be non-negative at the beginning.\n    - x <= -15000: This is given in the variable assignment.\n    - x + y <= -15000: This is true before the loop execution because x is initialized to -15000 and y is non-negative.\n- In every iteration of the loop:\n    - x < 0: This is the loop condition.\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x + y <= -15000: This is true in every iteration because x becomes more negative and y becomes more positive in each iteration.\n- After the loop termination:\n    - y >= 0: As mentioned earlier, y is incremented by 1 in each iteration of the loop, so it remains non-negative.\n    - x >= 0 ==> y > 0: The assertion is guarded by the condition x >= 0. If x is greater than or equal to 0, then the loop condition is false and the loop is not executed. Therefore, we only need to consider the case where x is less than 0 after the loop terminates. In this case, we know that x + y is less than or equal to -15000 from the loop invariant. Since x is less than 0 and y is non-negative, we know that y must be greater than 0. Therefore, the assertion holds in this case. If x is greater than or equal to 0 after the loop terminates, then the assertion trivially holds because the loop is not executed.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 18: unbound logic variable INT_MAX. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\nloop invariant i1: y >= 0;\nloop invariant i2: x <= -15000;\nloop invariant i3: y == 0;\nloop invariant i4: x < 0 ==> y >= 0;\nloop invariant i5: x < 0 ==> y <= INT_MAX;\nloop invariant i6: x + y <= 0;\nloop invariant i7: y > 0 ==> y >= 1;\nloop invariant i8: x < 0;\nloop invariant i9: x + y <= -15000;\nloop invariant i10: x >= 0 ==> y > 0;\nloop invariant i11: y >= 0 && x + y <= 0;\nloop invariant i12: y > 0 ==> y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = -15000);\n  \n  /*@\n\n\n\n\n\n\nloop invariant i7: y > 0 ==> y >= 1;\n\n\nloop invariant i10: x >= 0 ==> y > 0;\n\nloop invariant i12: y > 0 ==> y > 0;\n*/\nwhile ((x < 0)) {\n    {\n    (x  = (x + y));\n    (y  = (y + 1));\n    }\n\n  }\n  \n{;\n//@ assert( (y > 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 76,
        "success_count": 49,
        "failure_count": 27,
        "success_rate": 0.6447368421052632
    }
}