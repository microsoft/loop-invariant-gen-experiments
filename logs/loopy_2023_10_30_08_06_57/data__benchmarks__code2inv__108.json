{
    "logs": {
        "file": "../data/benchmarks/code2inv/108.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "We can start by analyzing the program and making notes of the pre-conditions and variable assignments. From the given program, we can observe the following:\n- The program defines a macro `assume` that returns 0 if the given expression is false.\n- The program has variables `a`, `c`, `m`, `j`, and `k`.\n- The program assumes that `a` is less than or equal to `m`.\n- The program initializes `j` and `k` to 0.\n- The program has a while loop that runs as long as `k` is less than `c`.\n- The loop body condition does not change the values of `a` and `m`. It only changes the value of `k`.\n- The loop body sets `m` to `a` if `m` is less than `a`.\n- The program has an assertion that `a` is less than or equal to `m`.\n\nNow, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nHere are some possible loop invariants:\n```\n/*@ \n    loop invariant k >= 0 && k <= c;\n    loop invariant a <= m;\n    loop invariant m >= \\max(k, a, m_old);\n    loop invariant m <= \\max(c, a, m_old);\n*/\n```\nLet's break down each loop invariant:\n- `k >= 0 && k <= c;` - This ensures that `k` is always within the bounds of 0 and `c` and is true before, during and after the loop.\n- `a <= m;` - This ensures that `a` is always less than or equal to `m` and is true before, during and after the loop.\n- `m >= \\max(k, a, m_old);` - This ensures that `m` is always greater than or equal to the maximum of `k`, `a` and the old value of `m` (i.e., the value of `m` before the loop iteration) and is true during and after the loop. This is because the loop body sets `m` to `a` if `m` is less than `a`, and this invariant ensures that `m` never goes below this value.\n- `m <= \\max(c, a, m_old);` - This ensures that `m` is always less than or equal to the maximum of `c`, `a` and the old value of `m` and is true during and after the loop. This is because `m` can only be updated to a new value if `m` is less than `a`, and this invariant ensures that `m` never goes above this value.\n\nFinally, we can use implication to take care of the conditional nature of the code. The assertion is guarded by the condition `k >= c`, so we can add an implication to the loop invariant for `m`:\n```\n/*@ \n    loop invariant k >= 0 && k <= c;\n    loop invariant a <= m;\n    loop invariant m >= \\max(k, a, m_old) ==> k >= c;\n    loop invariant m <= \\max(c, a, m_old);\n*/\n```\nThis ensures that if the loop invariant for `m` is true, then `k` must be greater than or equal to `c`, which implies that the assertion is true.\n\nTherefore, these are the necessary loop invariants for the given program that help Frama-C verify the post-condition.",
            "Pre-conditions or variable assignments:\n\n- Integer variables `a`, `c`, `m`, `j`, and `k` are declared.\n- The macro `assume(e)` is defined to return `0` if `e` is false.\n- `a` is assumed to be less than or equal to `m`.\n\nLoop condition:\n\n- The loop executes while `k` is less than `c`.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant j == 0;\n    loop invariant a <= m;\n    loop invariant (forall integer i; 0 <= i < k ==> m >= a);\n    loop invariant (forall integer i; 0 <= i < k ==> k > 0);\n    loop invariant (m >= a ==> (forall integer i; 0 <= i < k ==> m >= \\at(m, LoopEntry)));\n    loop invariant (m < a ==> (forall integer i; 0 <= i < k ==> m < \\at(a, LoopEntry)));\n*/\n```\n\nExplanation of loop invariants:\n\n- `0 <= k <= c` ensures that `k` remains within its bounds throughout the loop.\n- `j == 0` ensures that `j` remains zero throughout the loop.\n- `a <= m` ensures that `m` is always greater than or equal to `a`.\n- `(forall integer i; 0 <= i < k ==> m >= a)` ensures that `m` is always greater than or equal to `a` during each iteration of the loop.\n- `(forall integer i; 0 <= i < k ==> k > 0)` ensures that `k` remains positive throughout the loop.\n- `(m >= a ==> (forall integer i; 0 <= i < k ==> m >= \\at(m, LoopEntry)))` ensures that `m` remains greater than or equal to its initial value `m` at the start of the loop if `m` is greater than or equal to `a`.\n- `(m < a ==> (forall integer i; 0 <= i < k ==> m < \\at(a, LoopEntry)))` ensures that `m` remains less than `a` throughout the loop if `m` is less than `a`. \n\nThe loop invariants imply the post-condition `a <= m` because `(forall integer i; 0 <= i < k ==> m >= a)` ensures that `m` is always greater than or equal to `a` during each iteration of the loop, and the loop continues until `k` reaches `c`. Therefore, at the end of the loop, `m` is guaranteed to be greater than or equal to `a`.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- None\n\nLoop Condition:\n- k < c\n\nLoop Invariants:\n- i1: a <= m\n- i2: 0 <= j <= k\n- i3: 0 <= k <= c\n- i4: (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a)\n\nExplanation:\n- i1: The value of m is always greater than or equal to a.\n- i2: The values of j and k are always between 0 and c, inclusive.\n- i3: The value of k is always between 0 and c, inclusive.\n- i4: If the condition (m < a) holds, then for all iterations of the loop up to k, the value of m is greater than or equal to a. This is because if m is smaller than a, we update m to be equal to a. Thus, after this update, m can never be smaller than a. \n\nPost-condition:\n- a <= m\n\nThe loop invariants hold true:\n- Before the loop execution: i1, i2, i3\n- In every iteration of the loop: i2, i3, i4\n- After the loop termination: i1, i3, i4\n\nTherefore, we can add the following loop invariants to the program:\n```\n/*@ \n    loop invariant a <= m;\n    loop invariant 0 <= j <= k;\n    loop invariant 0 <= k <= c;\n    loop invariant (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/\n```",
            "Pre-conditions: None.\n\nVariable Assignments:\n- `a` is an integer variable.\n- `c` is an integer variable.\n- `m` is an integer variable.\n- `j` is an integer variable initialized to 0.\n- `k` is an integer variable initialized to 0.\n\nLoop Condition: `k < c`\n\nLoop Invariants:\n- Before the loop execution:\n    - `a <= m`\n    - `k == 0`\n    - `j == 0`\n- In every iteration of the loop:\n    - `a <= m`\n    - `k >= 0`\n    - `k <= c`\n- After the loop termination:\n    - `a <= m`\n    - `k >= c`\n    - `j == 0`\n\nExplanation:\n- `a <= m` is a pre-condition and is also true before the loop execution. It is also maintained throughout the loop because the only time `m` can change is when `m < a` which implies that `a <= m` after the change. Therefore, it is also true after the loop termination.\n- `k == 0` and `j == 0` are true before the loop execution and do not change during the loop. Therefore, they are also true after the loop termination.\n- `k >= 0` is always true because `k` is initialized to 0 and incremented by 1 in every iteration of the loop.\n- `k <= c` is true because `k` starts from 0 and is incremented by 1 in every iteration until it reaches `c`.\n- `k >= c` is true after the loop termination because `k` cannot be less than `c` after the loop terminates.\n- Since `j` is not modified during the loop, `j == 0` is true after the loop termination.",
            "Pre-conditions:\n- The values of `a`, `c`, and `m` are initially undefined and may contain garbage values.\n\nVariable assignments:\n- `j` and `k` are initialized to 0.\n\nLoop condition:\n- The loop continues as long as `k` is less than `c`.\n\nLoop body:\n- If `m` is less than `a`, then `m` is updated to the value of `a`.\n- `k` is incremented by 1 in each iteration of the loop.\n\nPost-condition:\n- After the loop terminates, `a` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution, `m` is greater than or equal to `a`. (`m >= a`)\n- In every iteration of the loop, `m` is greater than or equal to `a`. (`m >= a`)\n- After the loop termination, `m` is greater than or equal to `a`, and `k` is greater than or equal to `c`. (`m >= a && k >= c`)\n- If `k` is less than `c`, then `m` is greater than or equal to `a`. (`k < c ==> m >= a`) \n\nWe also note that `j` is not used in the loop or the post-condition, so we do not need to include it in our invariants."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant k >= 0 && k <= c;\n    loop invariant a <= m;\n    loop invariant m >= \\max(k, a, m_old);\n    loop invariant m <= \\max(c, a, m_old);\n*/",
            "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant j == 0;\n    loop invariant a <= m;\n    loop invariant (forall integer i; 0 <= i < k ==> m >= a);\n    loop invariant (forall integer i; 0 <= i < k ==> k > 0);\n    loop invariant (m >= a ==> (forall integer i; 0 <= i < k ==> m >= \\at(m, LoopEntry)));\n    loop invariant (m < a ==> (forall integer i; 0 <= i < k ==> m < \\at(a, LoopEntry)));\n*/",
            "/*@ \n    loop invariant a <= m;\n    loop invariant 0 <= j <= k;\n    loop invariant 0 <= k <= c;\n    loop invariant (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions: None.\n\nVariable Assignments:\n- `a` is an integer variable.\n- `c` is an integer variable.\n- `m` is an integer variable.\n- `j` is an integer variable initialized to 0.\n- `k` is an integer variable initialized to 0.\n\nLoop Condition: `k < c`\n\nLoop Invariants:\n- Before the loop execution:\n    - `a <= m`\n    - `k == 0`\n    - `j == 0`\n- In every iteration of the loop:\n    - `a <= m`\n    - `k >= 0`\n    - `k <= c`\n- After the loop termination:\n    - `a <= m`\n    - `k >= c`\n    - `j == 0`\n\nExplanation:\n- `a <= m` is a pre-condition and is also true before the loop execution. It is also maintained throughout the loop because the only time `m` can change is when `m < a` which implies that `a <= m` after the change. Therefore, it is also true after the loop termination.\n- `k == 0` and `j == 0` are true before the loop execution and do not change during the loop. Therefore, they are also true after the loop termination.\n- `k >= 0` is always true because `k` is initialized to 0 and incremented by 1 in every iteration of the loop.\n- `k <= c` is true because `k` starts from 0 and is incremented by 1 in every iteration until it reaches `c`.\n- `k >= c` is true after the loop termination because `k` cannot be less than `c` after the loop terminates.\n- Since `j` is not modified during the loop, `j == 0` is true after the loop termination."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The values of `a`, `c`, and `m` are initially undefined and may contain garbage values.\n\nVariable assignments:\n- `j` and `k` are initialized to 0.\n\nLoop condition:\n- The loop continues as long as `k` is less than `c`.\n\nLoop body:\n- If `m` is less than `a`, then `m` is updated to the value of `a`.\n- `k` is incremented by 1 in each iteration of the loop.\n\nPost-condition:\n- After the loop terminates, `a` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution, `m` is greater than or equal to `a`. (`m >= a`)\n- In every iteration of the loop, `m` is greater than or equal to `a`. (`m >= a`)\n- After the loop termination, `m` is greater than or equal to `a`, and `k` is greater than or equal to `c`. (`m >= a && k >= c`)\n- If `k` is less than `c`, then `m` is greater than or equal to `a`. (`k < c ==> m >= a`) \n\nWe also note that `j` is not used in the loop or the post-condition, so we do not need to include it in our invariants."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant k >= 0 && k <= c;\n    loop invariant a <= m;\n    loop invariant m >= \\max(k, a, m_old);\n    loop invariant m <= \\max(c, a, m_old);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: unbound logic variable m_old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    /*@\n\nloop invariant i2: a <= m;\n\n\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant j == 0;\n    loop invariant a <= m;\n    loop invariant (forall integer i; 0 <= i < k ==> m >= a);\n    loop invariant (forall integer i; 0 <= i < k ==> k > 0);\n    loop invariant (m >= a ==> (forall integer i; 0 <= i < k ==> m >= \\at(m, LoopEntry)));\n    loop invariant (m < a ==> (forall integer i; 0 <= i < k ==> m < \\at(a, LoopEntry)));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unexpected token 'integer'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    /*@\n\nloop invariant i2: j == 0;\nloop invariant i3: a <= m;\n\n\n\n\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant a <= m;\n    loop invariant 0 <= j <= k;\n    loop invariant 0 <= k <= c;\n    loop invariant (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant a <= m is partially proven to be inductive.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant 0 <= k <= c is preserved but not established.\nloop invariant (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a) is partially proven to be inductive.\nAssertion a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: a <= m;\nloop invariant i2: 0 <= j <= k;\n\nloop invariant i4: (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions: None.\n\nVariable Assignments:\n- `a` is an integer variable.\n- `c` is an integer variable.\n- `m` is an integer variable.\n- `j` is an integer variable initialized to 0.\n- `k` is an integer variable initialized to 0.\n\nLoop Condition: `k < c`\n\nLoop Invariants:\n- Before the loop execution:\n    - `a <= m`\n    - `k == 0`\n    - `j == 0`\n- In every iteration of the loop:\n    - `a <= m`\n    - `k >= 0`\n    - `k <= c`\n- After the loop termination:\n    - `a <= m`\n    - `k >= c`\n    - `j == 0`\n\nExplanation:\n- `a <= m` is a pre-condition and is also true before the loop execution. It is also maintained throughout the loop because the only time `m` can change is when `m < a` which implies that `a <= m` after the change. Therefore, it is also true after the loop termination.\n- `k == 0` and `j == 0` are true before the loop execution and do not change during the loop. Therefore, they are also true after the loop termination.\n- `k >= 0` is always true because `k` is initialized to 0 and incremented by 1 in every iteration of the loop.\n- `k <= c` is true because `k` starts from 0 and is incremented by 1 in every iteration until it reaches `c`.\n- `k >= c` is true after the loop termination because `k` cannot be less than `c` after the loop terminates.\n- Since `j` is not modified during the loop, `j == 0` is true after the loop termination.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The values of `a`, `c`, and `m` are initially undefined and may contain garbage values.\n\nVariable assignments:\n- `j` and `k` are initialized to 0.\n\nLoop condition:\n- The loop continues as long as `k` is less than `c`.\n\nLoop body:\n- If `m` is less than `a`, then `m` is updated to the value of `a`.\n- `k` is incremented by 1 in each iteration of the loop.\n\nPost-condition:\n- After the loop terminates, `a` is less than or equal to `m`.\n\nLoop invariants:\n- Before the loop execution, `m` is greater than or equal to `a`. (`m >= a`)\n- In every iteration of the loop, `m` is greater than or equal to `a`. (`m >= a`)\n- After the loop termination, `m` is greater than or equal to `a`, and `k` is greater than or equal to `c`. (`m >= a && k >= c`)\n- If `k` is less than `c`, then `m` is greater than or equal to `a`. (`k < c ==> m >= a`) \n\nWe also note that `j` is not used in the loop or the post-condition, so we do not need to include it in our invariants.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 17: unexpected token 'integer'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: k >= 0 && k <= c;\nloop invariant i2: a <= m;\nloop invariant i3: m >= \\max(k, a, m_old);\nloop invariant i4: m <= \\max(c, a, m_old);\nloop invariant i5: 0 <= k <= c;\nloop invariant i6: j == 0;\nloop invariant i7: (forall integer i; 0 <= i < k ==> m >= a);\nloop invariant i8: (forall integer i; 0 <= i < k ==> k > 0);\nloop invariant i9: (m >= a ==> (forall integer i; 0 <= i < k ==> m >= \\at(m, LoopEntry)));\nloop invariant i10: (m < a ==> (forall integer i; 0 <= i < k ==> m < \\at(a, LoopEntry)));\nloop invariant i11: 0 <= j <= k;\nloop invariant i12: (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    assume(a <= m);\n    j = 0;\n    k = 0;\n\n    /*@\n\nloop invariant i2: a <= m;\n\n\n\nloop invariant i6: j == 0;\n\n\n\n\nloop invariant i11: 0 <= j <= k;\nloop invariant i12: (m < a) ==> (\\forall integer p; 0 <= p < k ==> m >= a);\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    {;\n//@ assert( a <=  m);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c"
        ],
        "total": 93,
        "success_count": 63,
        "failure_count": 30,
        "success_rate": 0.6774193548387096
    }
}