{
    "logs": {
        "file": "../data/benchmarks/code2inv/95.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- j = 0\n- i = 0\n- y = 1\n\nLoop Condition:\n- i <= x\n\nPost-condition:\n- If y equals 1, then i must equal j.\n\nLoop Invariants:\n- Since x is not initialized, we cannot make any assumptions about its value. Therefore, we cannot use it in our loop invariants.\n- Before the loop execution:\n    - i == 0\n    - j == 0\n    - y == 1\n- In every iteration of the loop:\n    - i <= x\n    - j == (i-1)*y\n- After the loop termination:\n    - i > x\n    - j == x*y OR x < 0 (since i is incremented by 1 in each iteration, if x is negative, the loop will never execute and j will remain 0)\n- Implications:\n    - In the post-condition, the assertion is guarded by (y==1), so we need to add this condition to the implication:\n        - (y==1) ==> (i==j)\n    - We do not have any non-deterministic variables in this program. Therefore, we do not need any implications to make the invariants trivially true.\n\nPutting it all together:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant y == 1;\n    \n    loop invariant i <= x;\n    loop invariant j == (i-1)*y;\n    \n    loop invariant i > x ==> (j == x*y || x < 0);\n    \n    loop invariant (y == 1) ==> (i == j);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- j is assigned 0\n- i is assigned 0\n- y is assigned 1\n\nLoop Condition:\n- i <= x\n\nLoop Invariants:\n- The value of j is the sum of all y values up to (i-1). This implies that j is equal to i-1 when the loop terminates.\n```\n/*@ \n    loop invariant j == (\\sum int k; 0 <= k < i; y);\n*/\n\n- i is always greater than or equal to 0.\n```\n/*@ \n    loop invariant i >= 0;\n*/\n\n- j is always greater than or equal to 0.\n```\n/*@ \n    loop invariant j >= 0;\n*/\n\n- If the loop is not executed at all, then the assertion trivially holds. Otherwise, if y == 1, then i == j.\n```\n/*@ \n    loop invariant (i <= x) ==> (i == j || y != 1);\n*/\n\n- x is always greater than or equal to i.\n```\n/*@ \n    loop invariant x >= i;\n*/\n\n- i always increases by 1 in each iteration of the loop.\n```\n/*@ \n    loop invariant i - \\at(i, LoopEntry) == 1;\n*/\n\n- j increases by y in each iteration of the loop.\n```\n/*@ \n    loop invariant j - \\at(j, LoopEntry) == y;\n*/\n\n- y is always equal to 1.\n```\n/*@ \n    loop invariant y == 1;\n*/\n```\nNote that since we are not given a pre-condition for x, we cannot make any assumptions about its value and therefore we cannot specify any bounds on x.",
            "Before analyzing the loop, let's first note down the pre-conditions and variable assignments in the program:\n- The program defines a macro `assume(e)` which takes a boolean expression `e` and returns 0 if `e` is false.\n- The `main` function initializes four integer variables `i`, `j`, `x`, and `y`.\n- The initial value of `j` is 0, the initial value of `i` is 0, and the initial value of `y` is 1.\n\nNow, let's analyze the loop:\n- The loop condition is `(i <= x)`.\n- The loop body contains two statements: increment `i` by 1 and increment `j` by `y`.\n\nFinally, let's consider the post-condition:\n- The assertion `assert(i == j)` is guarded by the condition `(y == 1)`.\n\nWe can now come up with the necessary loop invariants:\n```\n/*@\n    loop invariant 0 <= j;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y == 1 ==> i == j;\n    loop invariant i <= x + 1;\n    loop invariant j == (i - 1) * y;\n*/\n```\nExplanation of loop invariants:\n- `0 <= j` - `j` is always non-negative.\n- `i >= 0` - `i` is always non-negative.\n- `x >= 0` - `x` is always non-negative.\n- `y == 1 ==> i == j` - If `y` is equal to 1, then `i` is equal to `j`.\n- `i <= x + 1` - `i` is always less than or equal to `x + 1`.\n- `j == (i - 1) * y` - `j` is always equal to `(i - 1) * y`.\n\nThe first three loop invariants follow from the initialization of the variables. The fourth loop invariant is a conditional implication which follows from the assertion in the post-condition. The fifth loop invariant follows from the loop condition. The sixth loop invariant follows from the loop body. \n\nNote that we did not add any invariants that bound the maximum or minimum values of the variables, as there is no such information available in the program.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `j` is assigned the value 0.\n- `i` is assigned the value 0.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues while `i` is less than or equal to `x`.\n\nPost-condition:\n- If `y` is equal to 1, then `i` is equal to `j`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `j == 0`\n  - `i == 0`\n  - `y == 1`\n\n- In every iteration of the loop:\n  - `i <= x + 1`\n  - `j == y * ((i - 1) / 1)`\n\n- After the loop termination:\n  - `i > x`\n  - `(y != 1) ==> true`\n  - `(y == 1) ==> (i == j)`\n\nExplanation:\n- Before the loop execution, we know that `j` is assigned 0, `i` is assigned 0, and `y` is assigned 1.\n- In every iteration of the loop, `i` is incremented by 1 and `j` is incremented by `y`. So, we know that `i` is less than or equal to `x + 1`, and `j` is equal to `y * ((i - 1) / 1)`. Note that we use integer division to get the floor value of `i - 1` divided by 1.\n- After the loop termination, we know that `i` is greater than `x`. If `y` is not equal to 1, then the implication is trivially true. If `y` is equal to 1, then we know that `i` is equal to `j`.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `j` is assigned the value `0`\n- `i` is assigned the value `0`\n- `y` is assigned the value `1`\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to `x`\n\nPost-condition:\n- If `y` equals `1`, then `i` equals `j`\n\nLoop invariants:\n```\n/*@\n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= x + 1;\n    loop invariant j <= (i - 1) * y;\n    loop invariant y == 1 ==> i == j;\n*/\n```\nExplanation:\n- `i` and `j` are always non-negative\n- `i` is less than or equal to `x + 1` because it is incremented by 1 in each iteration\n- `j` is less than or equal to `(i - 1) * y` because `y` is always equal to `1`\n- If `y` is equal to `1`, then `i` and `j` must always be equal, since `j` is always equal to the sum of all previous values of `y`, which is equal to the number of iterations of the loop so far."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant y == 1;\n    \n    loop invariant i <= x;\n    loop invariant j == (i-1)*y;\n    \n    loop invariant i > x ==> (j == x*y || x < 0);\n    \n    loop invariant (y == 1) ==> (i == j);\n*/",
            "/*@ \n    loop invariant j == (\\sum int k; 0 <= k < i; y);\n*/\n\n- i is always greater than or equal to 0.",
            "/*@\n    loop invariant 0 <= j;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y == 1 ==> i == j;\n    loop invariant i <= x + 1;\n    loop invariant j == (i - 1) * y;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- `j` is assigned the value 0.\n- `i` is assigned the value 0.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues while `i` is less than or equal to `x`.\n\nPost-condition:\n- If `y` is equal to 1, then `i` is equal to `j`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `j == 0`\n  - `i == 0`\n  - `y == 1`\n\n- In every iteration of the loop:\n  - `i <= x + 1`\n  - `j == y * ((i - 1) / 1)`\n\n- After the loop termination:\n  - `i > x`\n  - `(y != 1) ==> true`\n  - `(y == 1) ==> (i == j)`\n\nExplanation:\n- Before the loop execution, we know that `j` is assigned 0, `i` is assigned 0, and `y` is assigned 1.\n- In every iteration of the loop, `i` is incremented by 1 and `j` is incremented by `y`. So, we know that `i` is less than or equal to `x + 1`, and `j` is equal to `y * ((i - 1) / 1)`. Note that we use integer division to get the floor value of `i - 1` divided by 1.\n- After the loop termination, we know that `i` is greater than `x`. If `y` is not equal to 1, then the implication is trivially true. If `y` is equal to 1, then we know that `i` is equal to `j`."
            ],
            "/*@\n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= x + 1;\n    loop invariant j <= (i - 1) * y;\n    loop invariant y == 1 ==> i == j;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant j == 0;\n    loop invariant y == 1;\n    \n    loop invariant i <= x;\n    loop invariant j == (i-1)*y;\n    \n    loop invariant i > x ==> (j == x*y || x < 0);\n    \n    loop invariant (y == 1) ==> (i == j);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is partially proven to be inductive.\nloop invariant j == 0 is partially proven to be inductive.\nloop invariant y == 1 is partially proven to be inductive.\nloop invariant i <= x is preserved but not established.\nloop invariant j == (i-1)*y is preserved but not established.\nloop invariant i > x ==> (j == x*y || x < 0) is partially proven to be inductive.\nloop invariant (y == 1) ==> (i == j) is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1;\n\n\n\nloop invariant i7: (y == 1) ==> (i == j);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant j == (\\sum int k; 0 <= k < i; y);\n*/\n\n- i is always greater than or equal to 0.",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token 'int'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= j;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y == 1 ==> i == j;\n    loop invariant i <= x + 1;\n    loop invariant j == (i - 1) * y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= j is partially proven to be inductive.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y == 1 ==> i == j is partially proven to be inductive.\nloop invariant i <= x + 1 is partially proven to be inductive.\nloop invariant j == (i - 1) * y is preserved but not established.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\nloop invariant i2: i >= 0;\n\nloop invariant i4: y == 1 ==> i == j;\n\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- `j` is assigned the value 0.\n- `i` is assigned the value 0.\n- `y` is assigned the value 1.\n\nLoop condition:\n- The loop continues while `i` is less than or equal to `x`.\n\nPost-condition:\n- If `y` is equal to 1, then `i` is equal to `j`.\n\nLoop Invariants:\n- Before the loop execution:\n  - `j == 0`\n  - `i == 0`\n  - `y == 1`\n\n- In every iteration of the loop:\n  - `i <= x + 1`\n  - `j == y * ((i - 1) / 1)`\n\n- After the loop termination:\n  - `i > x`\n  - `(y != 1) ==> true`\n  - `(y == 1) ==> (i == j)`\n\nExplanation:\n- Before the loop execution, we know that `j` is assigned 0, `i` is assigned 0, and `y` is assigned 1.\n- In every iteration of the loop, `i` is incremented by 1 and `j` is incremented by `y`. So, we know that `i` is less than or equal to `x + 1`, and `j` is equal to `y * ((i - 1) / 1)`. Note that we use integer division to get the floor value of `i - 1` divided by 1.\n- After the loop termination, we know that `i` is greater than `x`. If `y` is not equal to 1, then the implication is trivially true. If `y` is equal to 1, then we know that `i` is equal to `j`.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= x + 1;\n    loop invariant j <= (i - 1) * y;\n    loop invariant y == 1 ==> i == j;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant 0 <= j is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nloop invariant j <= (i - 1) * y is preserved but not established.\nloop invariant y == 1 ==> i == j is partially proven to be inductive.\nAssertion i == j: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\n\n\nloop invariant i5: y == 1 ==> i == j;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token 'int'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i == 0;\nloop invariant i2: j == 0;\nloop invariant i3: y == 1;\nloop invariant i4: i <= x;\nloop invariant i5: j == (i-1)*y;\nloop invariant i6: i > x ==> (j == x*y || x < 0);\nloop invariant i7: (y == 1) ==> (i == j);\nloop invariant i8: j == (\\sum int k; 0 <= k < i; y);\nloop invariant i9: 0 <= j;\nloop invariant i10: i >= 0;\nloop invariant i11: x >= 0;\nloop invariant i12: y == 1 ==> i == j;\nloop invariant i13: i <= x + 1;\nloop invariant i14: j == (i - 1) * y;\nloop invariant i15: 0 <= i;\nloop invariant i16: j <= (i - 1) * y;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\n\n\nloop invariant i3: y == 1;\n\n\n\nloop invariant i7: (y == 1) ==> (i == j);\n\nloop invariant i9: 0 <= j;\nloop invariant i10: i >= 0;\n\nloop invariant i12: y == 1 ==> i == j;\n\n\nloop invariant i15: 0 <= i;\n\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (y == 1) )\n{;\n//@ assert( (i == j) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c"
        ],
        "total": 84,
        "success_count": 57,
        "failure_count": 27,
        "success_rate": 0.6785714285714286
    }
}