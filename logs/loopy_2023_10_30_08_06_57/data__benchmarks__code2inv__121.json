{
    "logs": {
        "file": "../data/benchmarks/code2inv/121.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- `i` and `sn` are declared as integers.\n- `sn` and `i` are initialized to 0 and 1, respectively.\n\nLoop condition:\n- The loop iterates as long as `i` is less than or equal to 8.\n\nLoop invariants:\n- `i` is always between 1 and 9, inclusive. `1 <= i <= 9`\n- `sn` is always between 0 and 8, inclusive. `0 <= sn <= 8`\n- In each iteration of the loop, `sn` is incremented by 1. `(sn + 1) == \\old(sn) + 1`\n- In each iteration of the loop, `i` is incremented by 1. `(i + 1) == \\old(i) + 1`\n- The loop terminates when `i` is greater than 8. Therefore, after the loop termination, `i` is equal to 9. `i == 9`\n- Since `sn` is incremented by 1 in each iteration and the loop iterates 8 times, after the loop termination, `sn` is equal to 8. `sn == 8`\n\nPutting all of these together, the loop invariants are:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 8;\n    loop invariant (sn + 1) == \\old(sn) + 1;\n    loop invariant (i + 1) == \\old(i) + 1;\n*/\n``` \nand \n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 8;\n    loop invariant i > 8 ==> (sn == 8);\n*/\n```",
            "Pre-conditions and variable assignments:\n- The program does not have any pre-conditions.\n- The variable `i` is initialized to 1.\n- The variable `sn` is initialized to 0.\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to 8.\n\nLoop invariants:\n- Before the loop: None needed.\n- In every iteration of the loop:\n    - `1 <= i <= 9`\n    - `0 <= sn <= i-1`\n- After the loop:\n    - `(i == 9) ==> (sn == 8)`\n\nExplanation:\n- Before the loop starts, there are no loop invariants to be established.\n- In every iteration of the loop, `i` is incremented by 1 and `sn` is incremented by 1, so `1 <= i <= 9` is true and `0 <= sn <= i-1` holds because `sn` starts at 0 and is incremented by 1 in each iteration.\n- After the loop terminates, `i` is no longer less than or equal to 8, so `i` must be 9. Therefore, `(i == 9) ==> (sn == 8)` is a valid invariant. If `i` is not 9, then the implication is trivially true. If `i` is 9, then `sn` must be equal to 8 because it was incremented in each iteration of the loop. \n\nPutting it all together:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn` is assigned the value 0\n- `i` is assigned the value 1\n\nLoop condition:\n- `i <= 8`\n\nLoop body:\n- `i` is incremented by 1\n- `sn` is incremented by 1\n\nPost-condition:\n- `sn == 8`\n\nLoop invariants:\n- `i >= 1`\n- `i <= 9`\n- `sn >= 0`\n- `sn <= 8`\n- For all iterations of the loop:\n    - `i - 1 <= 8`\n    - `sn == (i - 1)`\n- Implication to handle non-deterministic values of `sn` and `i`:\n    - `(i == 1 && sn == 0) ==> (sn == (i - 1))`\n    - `(i > 8) ==> (sn == 8)`\n- Implication to handle the conditional assertion:\n    - `(sn != 0) ==> (sn == 8)` \n\nPutting all the loop invariants together, we get:\n\n```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant 0 <= sn <= 8;\nloop invariant i - 1 <= 8;\nloop invariant sn == i - 1;\nloop invariant (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant (i > 8) ==> (sn == 8);\nloop invariant (sn != 0) ==> (sn == 8);\n*/\n``` \n\nNote that the loop invariant `sn == i - 1` implies the post-condition `sn == 8` since the loop condition is `i <= 8`, which means `i` is incremented up to 9 and `sn` is incremented up to 8.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `sn` is assigned the value 0.\n- `i` is assigned the value 1.\n\nLoop Condition:\n- `i <= 8`\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i <= 9) ==> (sn == (i-1));\n*/\n```\n\nExplanation:\n- The loop invariant `1 <= i <= 9` holds true since `i` is initialized to 1 and the loop condition is `i <= 8`.\n- The loop invariant `0 <= sn <= i-1` holds true since `sn` is initialized to 0 and in each iteration of the loop, `sn` is incremented by 1. Hence, at the end of the loop, `sn` would have been incremented 8 times and would have the value `i-1`.\n- The loop invariant `(i <= 9) ==> (sn == (i-1))` holds true since `i` is incremented by 1 in each iteration of the loop and the loop condition is `i <= 8`. Therefore, when the loop terminates, `i` would have the value 9 and `sn` would have the value 8, satisfying the implication.",
            "Pre-conditions: None\n\nVariable Assignments: \n- `i` is assigned the value `1`\n- `sn` is assigned the value `0`\n\nLoop Condition: `i <= 8`\n\nWe need to find loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition.\n\nLet's start with the loop invariants:\n```\n/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn <= i - 1;\nloop invariant i - 1 <= sn + 7;\nloop invariant i <= 9 ==> sn <= 8;\nloop invariant (sn != 0) ==> (sn == 8);\n*/\n```\nExplanation:\n- The first invariant ensures that `i` is always between `1` and `9`.\n- The second invariant ensures that `sn` is always less than or equal to `i-1`.\n- The third invariant ensures that `i-1` is always less than or equal to `sn+7`.\n- The fourth invariant ensures that if `i` is less than or equal to `9`, then `sn` is less than or equal to `8`.\n- The fifth invariant ensures that if `sn` is not equal to `0`, then it must be equal to `8`, which implies that `sn` is always equal to `8`.\n\nThe first three invariants are true before the loop execution. \n\nThe fourth invariant is true in every iteration of the loop because we increment the value of `i` by `1` in each iteration. Therefore, if `i` is less than or equal to `9`, then `i+1` is also less than or equal to `9`. So, the invariant holds in every iteration.\n\nThe fifth invariant is true after the loop termination because if `sn` is not equal to `0`, then it must be equal to `8`, which implies that `sn` is always equal to `8`. Therefore, the post-condition `sn == 8` holds. \n\nFinally, we have used implication to take care of the conditional nature of the code."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 8;\n    loop invariant (sn + 1) == \\old(sn) + 1;\n    loop invariant (i + 1) == \\old(i) + 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/",
            "/*@\nloop invariant 1 <= i <= 9;\nloop invariant 0 <= sn <= 8;\nloop invariant i - 1 <= 8;\nloop invariant sn == i - 1;\nloop invariant (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant (i > 8) ==> (sn == 8);\nloop invariant (sn != 0) ==> (sn == 8);\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i <= 9) ==> (sn == (i-1));\n*/",
            "/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn <= i - 1;\nloop invariant i - 1 <= sn + 7;\nloop invariant i <= 9 ==> sn <= 8;\nloop invariant (sn != 0) ==> (sn == 8);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= 8;\n    loop invariant (sn + 1) == \\old(sn) + 1;\n    loop invariant (i + 1) == \\old(i) + 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\n\n\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant 0 <= sn <= i-1 is partially proven to be inductive.\nloop invariant (i == 9) ==> (sn == 8) is established but not preserved.\nAssertion sn == 8: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= i-1;\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\nloop invariant 1 <= i <= 9;\nloop invariant 0 <= sn <= 8;\nloop invariant i - 1 <= 8;\nloop invariant sn == i - 1;\nloop invariant (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant (i > 8) ==> (sn == 8);\nloop invariant (sn != 0) ==> (sn == 8);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant 0 <= sn <= 8 is partially proven to be inductive.\nloop invariant i - 1 <= 8 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i == 1 && sn == 0) ==> (sn == i - 1) is partially proven to be inductive.\nloop invariant (i > 8) ==> (sn == 8) is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == 8) is established but not preserved.\nAssertion sn == 8: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= 8;\nloop invariant i3: i - 1 <= 8;\nloop invariant i4: sn == i - 1;\nloop invariant i5: (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant i6: (i > 8) ==> (sn == 8);\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i <= 9) ==> (sn == (i-1));\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is inductive.\nloop invariant 0 <= sn <= i-1 is inductive.\nloop invariant (i <= 9) ==> (sn == (i-1)) is inductive.\nAssertion sn == 8: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 1 <= i <= 9;\nloop invariant sn <= i - 1;\nloop invariant i - 1 <= sn + 7;\nloop invariant i <= 9 ==> sn <= 8;\nloop invariant (sn != 0) ==> (sn == 8);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i - 1 <= sn + 7 is partially proven to be inductive.\nloop invariant i <= 9 ==> sn <= 8 is partially proven to be inductive.\nloop invariant (sn != 0) ==> (sn == 8) is established but not preserved.\nAssertion sn == 8: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: sn <= i - 1;\nloop invariant i3: i - 1 <= sn + 7;\nloop invariant i4: i <= 9 ==> sn <= 8;\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 14: \\old undefined in this context. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= 8;\nloop invariant i3: (sn + 1) == \\old(sn) + 1;\nloop invariant i4: (i + 1) == \\old(i) + 1;\nloop invariant i5: 0 <= sn <= i-1;\nloop invariant i6: (i == 9) ==> (sn == 8);\nloop invariant i7: i - 1 <= 8;\nloop invariant i8: sn == i - 1;\nloop invariant i9: (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant i10: (i > 8) ==> (sn == 8);\nloop invariant i11: (sn != 0) ==> (sn == 8);\nloop invariant i12: (i <= 9) ==> (sn == (i-1));\nloop invariant i13: sn <= i - 1;\nloop invariant i14: i - 1 <= sn + 7;\nloop invariant i15: i <= 9 ==> sn <= 8;\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= 8;\n\n\nloop invariant i5: 0 <= sn <= i-1;\nloop invariant i6: (i == 9) ==> (sn == 8);\nloop invariant i7: i - 1 <= 8;\nloop invariant i8: sn == i - 1;\nloop invariant i9: (i == 1 && sn == 0) ==> (sn == i - 1);\nloop invariant i10: (i > 8) ==> (sn == 8);\n\nloop invariant i12: (i <= 9) ==> (sn == (i-1));\nloop invariant i13: sn <= i - 1;\nloop invariant i14: i - 1 <= sn + 7;\nloop invariant i15: i <= 9 ==> sn <= 8;\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == 8) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/121.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 104,
        "success_count": 69,
        "failure_count": 35,
        "success_rate": 0.6634615384615384
    }
}