{
    "logs": {
        "file": "../data/benchmarks/code2inv/79.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- `x` and `y` are non-negative integers.\n- `x >= y`\n- `i` is an integer.\n\nLoop condition: `unknown()`\n\nPost-condition: `i >= y` (guarded by `(i >= x) && (i < 0)`)\n\nLoop Invariants:\n- `i >= 0`\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n- `(i < y) ==> (i + 1 <= y)`\n- `(i >= x) ==> (i >= y)`\n- `(i >= x) && (i < 0) ==> (i >= y)`\n\nExplanation:\n- `i >= 0` - `i` is always non-negative.\n- `x >= 0` - `x` is non-negative (given).\n- `y >= 0` - `y` is non-negative (given).\n- `x >= y` - `x` is greater than or equal to `y` (given).\n- `(i < y) ==> (i + 1 <= y)` - If `i < y`, then `i+1` is less than or equal to `y`. This is because `i` increments by 1 in each iteration if `i < y`.\n- `(i >= x) ==> (i >= y)` - If `i >= x`, then `i` is greater than or equal to `y`. This is because `x >= y`, so if `i` is greater than or equal to `x`, then it is also greater than or equal to `y`.\n- `(i >= x) && (i < 0) ==> (i >= y)` - If `i` is negative and greater than or equal to `x`, then it is also greater than or equal to `y`. This is because `x >= y`, so if `i` is negative and greater than or equal to `x`, then it is also greater than or equal to `y`.\n\nFinally, we can output the loop invariants as follows:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= x) ==> (i >= y);\n    loop invariant ((i >= x) && (i < 0)) ==> (i >= y);\n*/\n```",
            "Pre-conditions:\n- `x` and `y` are non-negative integers.\n- `x` is greater than or equal to `y`.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nLoop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= y) ==> (i >= y);\n    loop invariant (i >= x) ==> (i >= y);\n*/\n```\nExplanation:\n- The first loop invariant states that `i` is always non-negative and less than or equal to `x`.\n- The second and third loop invariants state that `x` and `y` are non-negative integers.\n- The fourth loop invariant states that `x` is greater than or equal to `y`.\n- The fifth loop invariant states that if `i` is less than `y`, then `i+1` is less than or equal to `y`.\n- The sixth loop invariant states that if `i` is greater than or equal to `y`, then `i` is greater than or equal to `y`.\n- The seventh loop invariant states that if `i` is greater than or equal to `x`, then `i` is greater than or equal to `y`.\n- The post-condition is `i >= y`. Since the loop invariant `(i >= x) ==> (i >= y)` is true and the loop ends when `i` is non-negative and less than or equal to `x`, the post-condition is implied by the loop invariant.",
            "Pre-conditions:\n- `x` and `y` are non-negative integers.\n- `x >= y`.\n- `i` is initialized to 0.\n\nLoop condition:\n- `unknown()` returns a non-zero value.\n\nPost-condition:\n- If `(i >= x)` and `(0 > i)`, then `(i >= y)`.\n\nLoop Invariants:\n- `(i >= 0)`\n- `(x >= 0)`\n- `(y >= 0)`\n- `(x >= y)`\n- `(i >= y)` ==> This should be added in the loop invariant because it implies the post-condition.\n- `(i < y)` ==> This should be added in the loop invariant because it is checked in the loop body.\n- `(i < x)` ==> This should be added in the loop invariant because it is used in the post-condition.\n- `(i >= x) ==> (i >= y)` ==> This should also be added in the loop invariant because it is used in the post-condition and it is a direct implication of the post-condition.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i >= y;\n    loop invariant i < y;\n    loop invariant i < x;\n    loop invariant (i >= x) ==> (i >= y);\n*/\n```",
            "Pre-conditions:\n- i is initialized to 0.\n- x and y are non-negative integers.\n- x is greater than or equal to y.\n\nLoop condition:\n- The loop continues while the value returned by the unknown function is non-zero.\n\nPost-condition:\n- If i is greater than or equal to x and less than 0, then i must be greater than or equal to y.\n\nLoop invariants:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= x ==> i >= y;\n    loop invariant i >= y ==> i < x || i >= 0;\n*/\n```\nExplanation:\n- The first three loop invariants ensure that i, x, and y are non-negative integers.\n- The fourth loop invariant ensures that x is greater than or equal to y.\n- The fifth loop invariant states that if i is less than or equal to x, then i must be greater than or equal to y. This is because the post-condition requires i to be greater than or equal to y when i is greater than or equal to x and less than 0. \n- The sixth loop invariant states that if i is greater than or equal to y, then either i is less than x or i is greater than or equal to 0. This is because the loop condition is non-deterministic, and the value of i may be non-deterministic at the end of the loop. Therefore, we use an implication to make the invariant trivially true.",
            "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nLoop condition: `unknown()`\n\nPost-condition: `i >= y`\n\nLoop Invariants:\n- Before the loop execution:\n    - `i == 0`\n    - `x >= 0`\n    - `y >= 0`\n    - `x >= y`\n- In every iteration of the loop:\n    - `i >= 0`\n    - `i <= y`\n- After the loop termination:\n    - `i >= y`\n    - `i >= x ==> i >= y` (implication used because the assertion is guarded by a condition)\n\nWe can also add the following conjunctions to bound the maximum and minimum values of variables:\n- `i >= 0 && i <= y`\n- `x >= 0 && y >= 0`\n- `x >= y`\n\nWe do not need to add any implications for non-deterministic variables since all variables are explicitly initialized in this program."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= x) ==> (i >= y);\n    loop invariant ((i >= x) && (i < 0)) ==> (i >= y);\n*/",
            "/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= y) ==> (i >= y);\n    loop invariant (i >= x) ==> (i >= y);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i >= y;\n    loop invariant i < y;\n    loop invariant i < x;\n    loop invariant (i >= x) ==> (i >= y);\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= x ==> i >= y;\n    loop invariant i >= y ==> i < x || i >= 0;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nLoop condition: `unknown()`\n\nPost-condition: `i >= y`\n\nLoop Invariants:\n- Before the loop execution:\n    - `i == 0`\n    - `x >= 0`\n    - `y >= 0`\n    - `x >= y`\n- In every iteration of the loop:\n    - `i >= 0`\n    - `i <= y`\n- After the loop termination:\n    - `i >= y`\n    - `i >= x ==> i >= y` (implication used because the assertion is guarded by a condition)\n\nWe can also add the following conjunctions to bound the maximum and minimum values of variables:\n- `i >= 0 && i <= y`\n- `x >= 0 && y >= 0`\n- `x >= y`\n\nWe do not need to add any implications for non-deterministic variables since all variables are explicitly initialized in this program."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= x) ==> (i >= y);\n    loop invariant ((i >= x) && (i < 0)) ==> (i >= y);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x >= y is inductive.\nloop invariant (i < y) ==> (i + 1 <= y) is inductive.\nloop invariant (i >= x) ==> (i >= y) is inductive.\nloop invariant ((i >= x) && (i < 0)) ==> (i >= y) is inductive.\nAssertion i >= y: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i <= x;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i + 1 <= y);\n    loop invariant (i >= y) ==> (i >= y);\n    loop invariant (i >= x) ==> (i >= y);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= x is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x >= y is inductive.\nloop invariant (i < y) ==> (i + 1 <= y) is inductive.\nloop invariant (i >= y) ==> (i >= y) is inductive.\nloop invariant (i >= x) ==> (i >= y) is inductive.\nAssertion i >= y: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i >= y;\n    loop invariant i < y;\n    loop invariant i < x;\n    loop invariant (i >= x) ==> (i >= y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i >= y is preserved but not established.\nloop invariant i < y is preserved but not established.\nloop invariant i < x is partially proven to be inductive.\nloop invariant (i >= x) ==> (i >= y) is partially proven to be inductive.\nAssertion i >= y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\n\n\n\nloop invariant i8: (i >= x) ==> (i >= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= x ==> i >= y;\n    loop invariant i >= y ==> i < x || i >= 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant i <= x ==> i >= y is preserved but not established.\nloop invariant i >= y ==> i < x || i >= 0 is partially proven to be inductive.\nAssertion i >= y: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\n\nloop invariant i6: i >= y ==> i < x || i >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nLoop condition: `unknown()`\n\nPost-condition: `i >= y`\n\nLoop Invariants:\n- Before the loop execution:\n    - `i == 0`\n    - `x >= 0`\n    - `y >= 0`\n    - `x >= y`\n- In every iteration of the loop:\n    - `i >= 0`\n    - `i <= y`\n- After the loop termination:\n    - `i >= y`\n    - `i >= x ==> i >= y` (implication used because the assertion is guarded by a condition)\n\nWe can also add the following conjunctions to bound the maximum and minimum values of variables:\n- `i >= 0 && i <= y`\n- `x >= 0 && y >= 0`\n- `x >= y`\n\nWe do not need to add any implications for non-deterministic variables since all variables are explicitly initialized in this program.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant y >= 0 is partially proven to be inductive.\nloop invariant x >= y is partially proven to be inductive.\nloop invariant (i < y) ==> (i + 1 <= y) is partially proven to be inductive.\nloop invariant (i >= x) ==> (i >= y) is partially proven to be inductive.\nloop invariant ((i >= x) && (i < 0)) ==> (i >= y) is partially proven to be inductive.\nloop invariant 0 <= i <= x is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant 0 <= y is partially proven to be inductive.\nloop invariant (i >= y) ==> (i >= y) is partially proven to be inductive.\nloop invariant i >= y is preserved but not established.\nloop invariant i < y is preserved but not established.\nloop invariant i < x is partially proven to be inductive.\nloop invariant i <= x ==> i >= y is partially proven to be inductive.\nloop invariant i >= y ==> i < x || i >= 0 is partially proven to be inductive.\nAssertion i >= y: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: (i < y) ==> (i + 1 <= y);\nloop invariant i6: (i >= x) ==> (i >= y);\nloop invariant i7: ((i >= x) && (i < 0)) ==> (i >= y);\nloop invariant i8: 0 <= i <= x;\nloop invariant i9: 0 <= x;\nloop invariant i10: 0 <= y;\nloop invariant i11: (i >= y) ==> (i >= y);\nloop invariant i12: i >= y;\nloop invariant i13: i < y;\nloop invariant i14: i < x;\nloop invariant i15: i <= x ==> i >= y;\nloop invariant i16: i >= y ==> i < x || i >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 3,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: (i < y) ==> (i + 1 <= y);\nloop invariant i6: (i >= x) ==> (i >= y);\nloop invariant i7: ((i >= x) && (i < 0)) ==> (i >= y);\nloop invariant i8: 0 <= i <= x;\nloop invariant i9: 0 <= x;\nloop invariant i10: 0 <= y;\nloop invariant i11: (i >= y) ==> (i >= y);\n\n\n\n\nloop invariant i16: i >= y ==> i < x || i >= 0;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i >= x) )\nif ( (0 > i) )\n{;\n//@ assert( (i >= y) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 70,
        "success_count": 44,
        "failure_count": 26,
        "success_rate": 0.6285714285714286
    }
}