{
    "logs": {
        "file": "../data/benchmarks/code2inv/120.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume(e)` which takes a Boolean expression `e` and returns 0 if `e` evaluates to false.\n- The program defines two integer variables `i` and `sn`.\n- The program initializes `sn` to 0 and `i` to 1.\n\nLoop condition:\n- The while loop runs as long as `i` is less than or equal to 8.\n\nLoop invariants:\n- The loop invariant `i >= 1` holds before the loop execution because `i` is initialized to 1.\n- The loop invariant `i <= 9` holds before the loop execution because the loop condition is `i <= 8`.\n- The loop invariant `sn >= 0` holds before the loop execution because `sn` is initialized to 0.\n- The loop invariant `sn <= i - 1` holds before the loop execution because `sn` is incremented by 1 in each iteration of the loop and `i` is incremented by 1 as well.\n- The loop invariant `i >= 1 && i <= 9` holds in every iteration of the loop because `i` is incremented by 1 in each iteration and it starts from 1 and stops at 9.\n- The loop invariant `sn >= 0` holds in every iteration of the loop because `sn` is incremented by 1 in each iteration and it starts from 0.\n- The loop invariant `sn <= i - 1` holds in every iteration of the loop because `sn` is incremented by 1 in each iteration and `i` is incremented by 1 as well.\n- The loop invariant `(sn == 8) ==> (i == 9)` holds after the loop termination because if `sn` is equal to 8, then the loop must have run 8 times and `i` must be equal to 9.\n- The loop invariant `(sn != 8) ==> (sn == 0)` holds after the loop termination because if `sn` is not equal to 8, then it must be less than 8, and since `sn` is incremented by 1 in each iteration, it can only be 0. \n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (sn == 8) ==> (i == 9);\n    loop invariant (sn != 8) ==> (sn == 0);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `sn` is assigned the value 0.\n- `i` is assigned the value 1.\n\nLoop Condition:\n- `i <= 8`\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/\n```\nExplanation:\n- The first loop invariant ensures that `i` stays within the bounds of 1 and 9, inclusive.\n- The second loop invariant ensures that `sn` stays within the bounds of 0 and `i-1`, inclusive. Since `i` starts with the value 1, the lower bound is trivially true for the first iteration.\n- The third loop invariant states that if `i` is equal to 9 (i.e., the loop has completed all 8 iterations), then `sn` must be equal to 8. This is because `sn` is incremented by 1 in each iteration, starting from 0. Thus, at the end of the loop, `sn` must be equal to 8. This invariant is true only after the loop has terminated. \n\nFinally, since the assertion is guarded by `(sn != 8)`, we can use implication to include this condition in the invariant:\n```\n/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n    loop invariant (sn != 8) ==> (sn == 0);\n*/\n```\nThis covers all necessary loop invariants to help Frama-C verify the post-condition.",
            "Pre-conditions: None.\n\nVariable assignments:\n- `sn` is assigned the value 0.\n- `i` is assigned the value 1.\n\nLoop condition: `(i <= 8)`\n\nPost-condition: `(sn == 0)`\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 1 <= i <= 9; \n    loop invariant 0 <= sn <= 8; \n    loop invariant (sn + (i - 1)) == ((i * (i - 1)) / 2); \n*/\n```\n\nExplanation:\n- The first loop invariant (`1 <= i <= 9`) bounds the value of `i` within the range of 1 to 9, which covers the entire loop execution. \n- The second loop invariant (`0 <= sn <= 8`) bounds the value of `sn` within the range of 0 to 8, which covers the entire loop execution. \n- The third loop invariant (`(sn + (i - 1)) == ((i * (i - 1)) / 2)`) is the loop variant that is true before the loop execution, in every iteration of the loop and after the loop termination. This loop invariant implies that the sum of the first `i-1` positive integers is equal to `sn`. \n\nUsing implication, we can show that the loop invariants imply the post-condition as follows:\n```\n(sn != 8) ==> (sn + (i - 1)) == ((i * (i - 1)) / 2) // from loop invariant 3\n(sn != 8) ==> (sn == 0) // since the sum of the first 8 positive integers is 36, which is not equal to 0\n``` \n\nThus, the loop invariants imply the post-condition.",
            "Pre-conditions: None.\n\nVariable assignments:\n- sn is assigned 0.\n- i is assigned 1.\n\nLoop condition: i <= 8\n\nWe need to find loop invariants that are true:\n- before the loop execution, \n- in every iteration of the loop, and \n- after the loop termination, \n\nsuch that the loop invariants imply the post-condition.\n\nLet's start with the pre-loop invariant. Before the loop starts, we know that:\n- sn is assigned 0.\n- i is assigned 1.\n\nSo, the pre-loop invariant is:\n```\n/*@ \n    loop invariant i == 1;\n    loop invariant sn == 0;\n*/\n```\n\nNow, let's think about the invariants that hold in every iteration of the loop. In each iteration, the following statements are executed:\n- i = i + 1\n- sn = sn + 1\n\nLet's assume that the loop has executed k times. Then, before the k-th iteration, we know that:\n- i == k+1\n- sn == k\n\nAfter executing the k-th iteration, we have:\n- i == k+2\n- sn == k+1\n\nSo, the loop invariant that holds in every iteration of the loop is:\n```\n/*@ \n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn >= 0 && sn <= 8;\n    loop invariant i == sn + 1;\n*/\n```\nExplanation of the loop invariants:\n- The first loop invariant ensures that i is between 1 and 8 inclusive.\n- The second loop invariant ensures that sn is between 0 and 8 inclusive.\n- The third loop invariant relates i and sn. Since i is incremented by 1 in each iteration, and sn is incremented by 1 in each iteration, we have i == sn + 1.\n\nFinally, we need to find a loop invariant that implies the post-condition. The post-condition is:\n- if sn != 8, then sn == 0\n\nThe loop invariant that implies the post-condition is:\n```\n/*@ \n    loop invariant sn <= 8;\n    loop invariant (sn != 8) ==> (sn == 0);\n*/\n```\nExplanation of the loop invariants:\n- The first loop invariant ensures that sn is between 0 and 8 inclusive.\n- The second loop invariant says that if sn is not equal to 8, then it must be equal to 0 after the loop terminates.\n\nPutting everything together, the complete set of loop invariants for the given program is:\n```\n/*@ \n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn >= 0 && sn <= 8;\n    loop invariant i == sn + 1;\n    loop invariant sn <= 8;\n    loop invariant (sn != 8) ==> (sn == 0);\n*/\n```",
            "Preconditions: None\n\nVariable assignments:\n- `sn` is assigned the value 0.\n- `i` is assigned the value 1.\n\nLoop condition: `(i <= 8)`\n\nWe need to find loop invariants that are true:\n- Before the loop execution\n- In every iteration of the loop\n- After the loop termination\n\nLet's start with the loop invariants that are true before the loop execution:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/\n```\nThese loop invariants are straightforward as they reflect the initial assignments of `sn` and `i`.\n\nNow let's think about the loop invariants that are true in every iteration of the loop. The loop body assigns new values to `i` and `sn` using the expressions `(i + 1)` and `(sn + 1)` respectively. We need to find loop invariants that capture the relationship between `i` and `sn` during each iteration of the loop. \n\nOne way to do this is to use an implication. We know that before the loop starts, `sn` is equal to 0 and `i` is equal to 1. In each iteration of the loop, `i` is incremented by 1 and `sn` is incremented by 1. Therefore, after `k` iterations of the loop, we have:\n```\nsn == k\ni == k + 1\n```\nWe can use these equations to formulate the loop invariant:\n```\n/*@ \n    loop invariant i <= 9;\n    loop invariant (i - sn) == 1;\n*/\n```\nThe first loop invariant bounds the maximum value of `i` to 9, which is one more than the maximum value of `sn`. The second loop invariant states that the difference between `i` and `sn` is always 1, which holds true for every iteration of the loop.\n\nFinally, we need to find loop invariants that are true after the loop termination. The assertion checks if `sn` is not equal to 8, and if it is not, then the assertion `(sn == 0)` should hold. This means that if the loop terminates normally, then `sn` should be equal to 8. We can use this fact to formulate the loop invariant:\n```\n/*@ \n    loop invariant (i == 9) ==> (sn == 8);\n*/\n```\nThis loop invariant states that if `i` is equal to 9, then `sn` should be equal to 8.\n\nPutting it all together, we have the following loop invariants:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant i <= 9;\n    loop invariant (i - sn) == 1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (sn == 8) ==> (i == 9);\n    loop invariant (sn != 8) ==> (sn == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/",
            "/*@ \n    loop invariant 1 <= i <= 9; \n    loop invariant 0 <= sn <= 8; \n    loop invariant (sn + (i - 1)) == ((i * (i - 1)) / 2); \n*/",
            "/*@ \n    loop invariant i == 1;\n    loop invariant sn == 0;\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant i >= 1 && i <= 9;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (sn == 8) ==> (i == 9);\n    loop invariant (sn != 8) ==> (sn == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i >= 1 && i <= 9 is partially proven to be inductive.\nloop invariant (sn == 8) ==> (i == 9) is partially proven to be inductive.\nloop invariant (sn != 8) ==> (sn == 0) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 9;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: i >= 1 && i <= 9;\nloop invariant i6: (sn == 8) ==> (i == 9);\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9;\n    loop invariant 0 <= sn <= i-1;\n    loop invariant (i == 9) ==> (sn == 8);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant 0 <= sn <= i-1 is partially proven to be inductive.\nloop invariant (i == 9) ==> (sn == 8) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\nloop invariant i2: 0 <= sn <= i-1;\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1 <= i <= 9; \n    loop invariant 0 <= sn <= 8; \n    loop invariant (sn + (i - 1)) == ((i * (i - 1)) / 2); \n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant 0 <= sn <= 8 is partially proven to be inductive.\nloop invariant (sn + (i - 1)) == ((i * (i - 1)) / 2) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: 1 <= i <= 9;\n\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == 1;\n    loop invariant sn == 0;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 1 is established but not preserved.\nloop invariant sn == 0 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nloop invariant i == 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= 9 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant i >= 1 && i <= 9 is partially proven to be inductive.\nloop invariant (sn == 8) ==> (i == 9) is partially proven to be inductive.\nloop invariant (sn != 8) ==> (sn == 0) is established but not preserved.\nloop invariant 1 <= i <= 9 is partially proven to be inductive.\nloop invariant 0 <= sn <= i-1 is partially proven to be inductive.\nloop invariant (i == 9) ==> (sn == 8) is partially proven to be inductive.\nloop invariant 0 <= sn <= 8 is partially proven to be inductive.\nloop invariant (sn + (i - 1)) == ((i * (i - 1)) / 2) is partially proven to be inductive.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant sn == 0 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 9;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: i >= 1 && i <= 9;\nloop invariant i6: (sn == 8) ==> (i == 9);\nloop invariant i7: (sn != 8) ==> (sn == 0);\nloop invariant i8: 1 <= i <= 9;\nloop invariant i9: 0 <= sn <= i-1;\nloop invariant i10: (i == 9) ==> (sn == 8);\nloop invariant i11: 0 <= sn <= 8;\nloop invariant i12: (sn + (i - 1)) == ((i * (i - 1)) / 2);\nloop invariant i13: i == 1;\nloop invariant i14: sn == 0;\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 6,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= 9;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: i >= 1 && i <= 9;\nloop invariant i6: (sn == 8) ==> (i == 9);\n\nloop invariant i8: 1 <= i <= 9;\nloop invariant i9: 0 <= sn <= i-1;\n\nloop invariant i11: 0 <= sn <= 8;\n\n\n\n*/\nwhile ((i <= 8)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 8) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 103,
        "success_count": 68,
        "failure_count": 35,
        "success_rate": 0.6601941747572816
    }
}