{
    "logs": {
        "file": "../data/benchmarks/code2inv/111.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn = 0`: initializes the variable `sn` to zero.\n- `i = 1`: initializes the variable `i` to one.\n\nLoop condition:\n- `i <= n`: the loop executes while `i` is less than or equal to `n`.\n\nPost-condition:\n- `sn == n`: the variable `sn` is equal to `n`.\n\nLoop invariants:\n- `i >= 1`: The variable `i` is always greater than or equal to 1.\n- `sn >= 0`: The variable `sn` is always greater than or equal to 0.\n- `(i <= n + 1)`: The variable `i` is always less than or equal to `n + 1`. This is because `i` is incremented by 1 in every iteration of the loop, so it will eventually become greater than `n` and the loop will terminate.\n- `(sn == i - 1)`: The variable `sn` is always equal to `i - 1`. This is because `sn` is incremented by 1 in every iteration of the loop, starting from 0, so it will eventually become equal to `i - 1`.\n- `(sn != 0) ==> (i > 1)`: If `sn` is not zero, then `i` must be greater than 1. This is because `i` is initialized to 1 and is incremented by 1 in every iteration of the loop, so if `sn` is not zero, the loop must have executed at least once, and therefore `i` must be greater than 1.\n- `(i > n) ==> (sn == n)`: If `i` is greater than `n`, then `sn` must be equal to `n`. This is because `sn` is incremented by 1 in every iteration of the loop, starting from 0, so it will eventually become equal to `n` when `i` becomes greater than `n`. \n\nPutting it all together:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant (sn != 0) ==> (i > 1);\n    loop invariant (i > n) ==> (sn == n);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- Initialize `sn` to 0\n- Initialize `i` to 1\n\nLoop Condition:\n- `i <= n`\n\nLoop Invariants:\n- `sn >= 0`: `sn` is always non-negative.\n- `i > 0`: `i` is always positive.\n- `sn <= i`: `sn` is always less than or equal to `i`.\n- `sn == (i - 1)`: `sn` is always equal to `i-1`.\n\nExplanation:\n- `sn >= 0`: `sn` is initialized to 0 and is incremented by a positive integer in each iteration of the loop. Therefore, it is always non-negative.\n- `i > 0`: `i` is initialized to 1 and incremented by 1 in each iteration of the loop. Therefore, it is always positive.\n- `sn <= i`: `sn` is incremented by 1 in each iteration of the loop while `i` is incremented by 1. Therefore, `sn` is always less than or equal to `i`.\n- `sn == (i - 1)`: `sn` is incremented by 1 in each iteration of the loop while `i` is incremented by 1. Therefore, `sn` is always equal to `i-1`.\n\nPost-condition:\n- `sn == n`: `sn` should be equal to `n` after the loop terminates.\n\nLoop Invariants Imply Post-condition:\n- `(sn == (i - 1))`: This loop invariant implies that `sn` is equal to the number of iterations of the loop. Therefore, if we assume that the loop terminates, we have `sn == n`. Using implication, we can write this as `(sn == (i - 1)) ==> (sn == n)`.\n- `i <= n`: This is the negation of the loop condition. It is true before the loop execution and true in every iteration of the loop. This implies that `i` is always less than or equal to `n`. Therefore, after the loop terminates, we have either `i == n+1` or `i <= n`. The first case is not possible because it violates the loop condition. Therefore, we have `i <= n`. Using implication, we can write this as `i <= n ==> (sn == n)`.\n\nPutting everything together, we get the following loop invariants:\n```\n/*@ \n    loop invariant sn >= 0;\n    loop invariant i > 0;\n    loop invariant sn <= i;\n    loop invariant sn == (i - 1);\n    loop invariant (sn == (i - 1)) ==> (sn == n);\n    loop invariant i <= n ==> (sn == n);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn` is assigned a value of 0\n- `i` is assigned a value of 1\n\nLoop condition:\n- `i <= n`\n\nPost-condition:\n- `sn == n`\n\nLoop Invariants:\n- Before the loop:\n    - `sn == 0`\n    - `i == 1`\n    - `n >= 0`\n- In every iteration:\n    - `i <= n + 1`\n    - `sn == i - 1`\n- After the loop:\n    - `sn == n`\n\nExplanation:\n- Before the loop: We know that `sn` is assigned a value of 0 and `i` is assigned a value of 1 before the loop begins.\n    - `sn == 0` ensures that `sn` has the correct initial value before the loop begins.\n    - `i == 1` ensures that `i` has the correct initial value before the loop begins.\n    - `n >= 0` ensures that `n` is non-negative before the loop begins.\n- In every iteration: We know that the loop condition is `i <= n`. Since `i` is incremented by 1 in each iteration, we can infer that `i <= n + 1` will hold in every iteration. Also, since `sn` is incremented by 1 in each iteration, we can infer that `sn == i - 1` will hold in every iteration.\n- After the loop: We know that the loop terminates when `i > n`. At this point, `i` will have a value of `n + 1` and `sn` will have a value of `n`. Therefore, `sn == n` will hold after the loop.\n\nTherefore, the loop invariants can be written as:\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n >= 0;\n    \n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    \n    loop invariant (i > n) ==> (sn == n);\n*/\n```",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program defines three integer variables `i`, `n`, and `sn`.\n- `sn` and `i` are assigned initial values of 0 and 1, respectively.\n\nLoop condition:\n- The while loop executes while `i` is less than or equal to `n`.\n\nLoop invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant n >= 0;\n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/\n```\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant i <= n+1;\n    loop invariant sn == i-1;\n*/\n```\n- After the loop termination:\n```\n/*@ \n    loop invariant sn == i-1;\n    loop invariant (sn != 0) ==> (sn == n);\n*/\n```\nExplanation:\n- Before the loop execution:\n    - `n` must be non-negative.\n    - `sn` is initially 0.\n    - `i` is initially 1.\n- In every iteration of the loop:\n    - `i` is always greater than or equal to 1.\n    - `i` is always less than or equal to `n+1` because the loop terminates when `i` becomes greater than `n`.\n    - `sn` is always equal to `i-1`.\n- After the loop termination:\n    - `sn` is equal to `i-1` because the loop terminates when `i` becomes greater than `n`.\n    - If `sn` is not equal to 0, then it must be equal to `n` because `sn` is incremented by 1 in each iteration of the loop, and the loop executes `n` times.",
            "Before analyzing the loop, let's first look at the pre-conditions and variable assignments in the program:\n\nPre-conditions:\nNone.\n\nVariable assignments:\n- `sn` is assigned 0.\n- `i` is assigned 1.\n\nNow, let's analyze the loop:\n\nLoop condition: `(i <= n)`\n\nLoop body:\n```\n(i = (i + 1));\n(sn = (sn + 1));\n```\n\nLoop invariants:\n```\n/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n;\n    loop invariant sn == i-1;\n*/\n```\nExplanation:\n- The first loop invariant states that `i` is always between 1 and `n+1` (inclusive) before and during the execution of the loop. This is true before the loop starts as `i` is initialized to 1 and the loop condition includes `i <= n`. This is also true in every iteration of the loop because the loop body increments `i` by 1 and the loop condition includes `i <= n`.\n- The second loop invariant states that `sn` is always between 0 and `n` (inclusive) before and during the execution of the loop. This is true before the loop starts as `sn` is initialized to 0. This is also true in every iteration of the loop because the loop body increments `sn` by 1 and `sn` is always less than or equal to `n`.\n- The third loop invariant states that `sn` is always equal to `i-1` before and during the execution of the loop. This is true before the loop starts as `i` is initialized to 1 and `sn` is initialized to 0. This is also true in every iteration of the loop because the loop body increments both `i` and `sn` by 1.\n\nNow let's use implication to verify the post-condition:\n```\n(sn != 0) ==> (sn == i-1)     // from loop invariant\n(sn != 0) ==> (sn == n)       // from loop invariant and i <= n+1\n(sn == 0) ==> (sn == 0)       // trivially true\n```\nThe post-condition is only guaranteed to hold if `sn` is not equal to 0. Therefore, we use implication to handle this case separately.\n\nPutting everything together:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  assume(n >= 0);\n  \n  sn = 0;\n  i = 1;\n  \n  /*@ \n      loop invariant 1 <= i <= n+1;\n      loop invariant 0 <= sn <= n;\n      loop invariant sn == i-1;\n  */\n  while (i <= n) {\n    i = i + 1;\n    sn = sn + 1;\n  }\n  \n  assume(sn != 0);\n  \n  //@ assert (sn == n);\n\n  return 0;\n}\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant (sn != 0) ==> (i > 1);\n    loop invariant (i > n) ==> (sn == n);\n*/",
            "/*@ \n    loop invariant sn >= 0;\n    loop invariant i > 0;\n    loop invariant sn <= i;\n    loop invariant sn == (i - 1);\n    loop invariant (sn == (i - 1)) ==> (sn == n);\n    loop invariant i <= n ==> (sn == n);\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n >= 0;\n    \n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    \n    loop invariant (i > n) ==> (sn == n);\n*/",
            "/*@ \n    loop invariant n >= 0;\n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/",
            "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n;\n    loop invariant sn == i-1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant sn >= 0;\n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    loop invariant (sn != 0) ==> (i > 1);\n    loop invariant (i > n) ==> (sn == n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (sn != 0) ==> (i > 1) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == n) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\nloop invariant i5: (sn != 0) ==> (i > 1);\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sn >= 0;\n    loop invariant i > 0;\n    loop invariant sn <= i;\n    loop invariant sn == (i - 1);\n    loop invariant (sn == (i - 1)) ==> (sn == n);\n    loop invariant i <= n ==> (sn == n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn == n) is preserved but not established.\nloop invariant i <= n ==> (sn == n) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: i > 0;\nloop invariant i3: sn <= i;\nloop invariant i4: sn == (i - 1);\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant n >= 0;\n    \n    loop invariant i <= n + 1;\n    loop invariant sn == i - 1;\n    \n    loop invariant (i > n) ==> (sn == n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 is established but not preserved.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant n >= 0 is preserved but not established.\nloop invariant i <= n + 1 is partially proven to be inductive.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == n) is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n\nloop invariant i5: sn == i - 1;\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant n >= 0;\n    loop invariant sn == 0;\n    loop invariant i == 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant n >= 0 is preserved but not established.\nloop invariant sn == 0 is established but not preserved.\nloop invariant i == 1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant 1 <= i <= n+1;\n    loop invariant 0 <= sn <= n;\n    loop invariant sn == i-1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= n+1 is preserved but not established.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i-1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\nloop invariant i3: sn == i-1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant i <= n + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nloop invariant (sn != 0) ==> (i > 1) is partially proven to be inductive.\nloop invariant (i > n) ==> (sn == n) is partially proven to be inductive.\nloop invariant i > 0 is partially proven to be inductive.\nloop invariant sn <= i is partially proven to be inductive.\nloop invariant sn == (i - 1) is partially proven to be inductive.\nloop invariant (sn == (i - 1)) ==> (sn == n) is preserved but not established.\nloop invariant i <= n ==> (sn == n) is partially proven to be inductive.\nloop invariant sn == 0 is partially proven to be inductive.\nloop invariant i == 1 is partially proven to be inductive.\nloop invariant n >= 0 is partially proven to be inductive.\nloop invariant 1 <= i <= n+1 is partially proven to be inductive.\nloop invariant 0 <= sn <= n is partially proven to be inductive.\nloop invariant sn == i-1 is partially proven to be inductive.\nAssertion sn == n: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\nloop invariant i3: i <= n + 1;\nloop invariant i4: sn == i - 1;\nloop invariant i5: (sn != 0) ==> (i > 1);\nloop invariant i6: (i > n) ==> (sn == n);\nloop invariant i7: i > 0;\nloop invariant i8: sn <= i;\nloop invariant i9: sn == (i - 1);\nloop invariant i10: (sn == (i - 1)) ==> (sn == n);\nloop invariant i11: i <= n ==> (sn == n);\nloop invariant i12: sn == 0;\nloop invariant i13: i == 1;\nloop invariant i14: n >= 0;\nloop invariant i15: 1 <= i <= n+1;\nloop invariant i16: 0 <= sn <= n;\nloop invariant i17: sn == i-1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int n;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: sn >= 0;\n\nloop invariant i4: sn == i - 1;\nloop invariant i5: (sn != 0) ==> (i > 1);\n\nloop invariant i7: i > 0;\nloop invariant i8: sn <= i;\nloop invariant i9: sn == (i - 1);\n\n\n\n\n\n\n\nloop invariant i17: sn == i-1;\n*/\nwhile ((i <= n)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != 0) )\n{;\n//@ assert( (sn == n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c"
        ],
        "total": 95,
        "success_count": 63,
        "failure_count": 32,
        "success_rate": 0.6631578947368421
    }
}