{
    "logs": {
        "file": "../data/benchmarks/code2inv/109.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    while ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `j = 0`\n- `k = 0`\n\nLoop condition:\n- `k < c`\n\nLoop body:\n- `if(m < a) { m = a; }`\n- `k = k + 1;`\n\nPost-condition:\n- `a <= m`, if `c > 0`\n\nLoop invariants:\n- `k >= 0`: `k` is non-negative at the beginning of the loop, as it is initialized to `0`.\n- `m >= a`: `m` is always greater than or equal to `a` in every iteration of the loop, because if `m < a`, then `m` is updated to `a`.\n- `k <= c`: `k` is always less than or equal to `c` in every iteration of the loop, because the loop condition is `k < c`.\n- `m >= a && k >= c ==> a <= m`: If `m >= a` and `k >= c`, then `m` has the maximum value of `a` after the loop terminates (because `k >= c` implies that the loop has executed at least `c` times), which satisfies the post-condition. Therefore, if `m >= a` and `k >= c`, then `a <= m`. \n\nPutting it all together:\n```\n/*@\n    loop invariant k >= 0;\n    loop invariant m >= a;\n    loop invariant k <= c;\n    loop invariant (m >= a && k >= c) ==> a <= m;\n*/\n```\nNote: We do not need to add any implications for non-deterministic values because all variables in this program are initialized to `0`, and we are not making any assumptions about the values of `a`, `c`, or `m`.",
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- `j = 0;`\n- `k = 0;`\n\nLoop condition:\n- `k < c`\n\nLoop body:\n- ```\n  if(m < a) {\n      m = a;\n  }\n  k = k + 1;\n  ```\n\nPost-condition:\n- `if( c > 0 ) { a <= m; }`\n\nLoop invariants:\n- Before the loop execution:\n  - None.\n\n- In every iteration of the loop:\n  - `0 <= k <= c`\n  - `a <= m`\n  - If `k == 0`, then `m <= a`.\n  - If `k > 0` and `m < a`, then `m <= \\old(a)`.\n\n- After the loop termination:\n  - `k == c`\n  - `a <= m`\n  - If `c == 0`, then `a <= m`.\n  - If `c > 0` and `m < a`, then `m <= \\old(a)`.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant a <= m;\n    loop invariant (k == 0 ==> m <= a);\n    loop invariant (k > 0 && m < a ==> m <= \\old(a));\n*/\nwhile (k < c) {\n    if (m < a) {\n        m = a;\n    }\n    k = k + 1;\n}\n/*@ \n    loop invariant k == c;\n    loop invariant a <= m;\n    loop invariant (c == 0 ==> a <= m);\n    loop invariant (c > 0 && m < a ==> m <= \\old(a));\n*/\nif (c > 0) {\n    assume(a <= m);\n}\n```",
            "Pre-conditions:\n- The program does not take any input and hence no pre-conditions.\n\nVariable Assignments:\n- `a`, `c`, `m`, `j`, and `k` are integer variables.\n- `j` and `k` are initialized to 0.\n\nLoop Condition:\n- The loop runs while `k < c`.\n\nLoop Invariants:\n- `0 <= j <= k` (initially true)\n- `m >= a` (initially true)\n- `m >= \\max_{0\\le i < k} a_i` (true in each iteration)\n- `k <= c` (true in each iteration)\n- If `c > 0`, then `a <= m` (true after the loop termination)\n\nExplanation:\n- Since `j` and `k` are initialized to 0, `0 <= j <= k` is true before the loop execution.\n- Since `m` is initially assigned the value of `a` and then updated only if `a` is greater than `m`, `m >= a` is true before the loop execution.\n- In each iteration of the loop, `k` is incremented by 1, and hence `k` is always less than or equal to `c`.\n- In each iteration of the loop, if `a` is greater than `m`, then `m` is updated to `a`. Hence, `m` is always greater than or equal to the maximum of all the previous values of `a` encountered so far.\n- After the loop termination, `k` is greater than or equal to `c`. Hence, if `c` is greater than 0, then at least one iteration of the loop must have executed. Therefore, the maximum value of `a` encountered in the loop would be greater than or equal to `a`. Hence, `a <= m`.\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 0 <= j <= k;\n    loop invariant m >= a;\n    loop invariant m >= \\max_{0\\le i < k} a_i;\n    loop invariant k <= c;\n    loop invariant (c > 0 ==> a <= m);\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- None\n\nVariable Assignments:\n- a, c, m, j, k are declared as integers\n- j is assigned the value 0\n- k is assigned the value 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n- k < c\n\nNow, let's output the necessary loop invariants for the while loop:\n\nLoop Invariants:\n```\n/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant 0 <= j <= k;\n    loop invariant j == 0 ==> m == a;\n    loop invariant j > 0 ==> a <= m;\n*/\n```\n\nExplanation:\n- The first loop invariant states that k is always between 0 and c.\n- The second loop invariant states that j is always between 0 and k.\n- The third loop invariant states that if j is 0, then m is equal to a. This is because m has not been updated yet, and a is the maximum value seen so far (which is also the initial value of m). \n- The fourth loop invariant states that if j is greater than 0, then a is less than or equal to m. This is because m has been updated at least once and is now the maximum value seen so far, which must be greater than or equal to the previous maximum value a.\n\nFinally, let's add an implication to take care of the conditional assertion:\n\n```\n/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant 0 <= j <= k;\n    loop invariant j == 0 ==> m == a;\n    loop invariant j > 0 ==> a <= m;\n    loop invariant c <= 0 ==> a <= m;\n*/\n```\n\nExplanation:\n- The last loop invariant states that if c is less than or equal to 0, then the assertion trivially holds. This is because the loop condition will not be satisfied and the loop body will not execute, meaning that m will remain equal to a (which is the maximum value seen so far) and the assertion will hold.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `j = 0;`\n- `k = 0;`\n\nLoop condition:\n- `k < c`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration of the loop: \n    - `j == 0`\n    - `0 <= k <= c`\n    - `m >= a`\n- After the loop:\n    - `c <= 0 ==> a <= m`\n\nExplanation:\n- Before the loop, there are no loop invariants to state.\n- In every iteration of the loop:\n    - `j` is always assigned the value 0 before the loop, and it is never modified inside the loop. Therefore, `j == 0` holds throughout the loop.\n    - `k` is initialized to 0 before the loop, and incremented by 1 in every iteration. Therefore, `0 <= k` holds throughout the loop. Also, the loop condition is `k < c`, so `k` is strictly less than `c` when the loop terminates. Therefore, `k <= c` holds throughout the loop.\n    - `m` is assigned the value of `a` if `m` is less than `a`. Therefore, `m >= a` holds throughout the loop.\n- After the loop:\n    - The assertion is guarded by the condition `c > 0`. Therefore, we can use implication to state the loop invariant: `c <= 0 ==> a <= m`. If `c` is not greater than 0, then the assertion does not need to hold, so the implication is true. If `c` is greater than 0, then the assertion needs to hold, which means `a` must be less than or equal to `m`. Therefore, the implication is also true in this case."
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant k >= 0;\n    loop invariant m >= a;\n    loop invariant k <= c;\n    loop invariant (m >= a && k >= c) ==> a <= m;\n*/",
            "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant a <= m;\n    loop invariant (k == 0 ==> m <= a);\n    loop invariant (k > 0 && m < a ==> m <= \\old(a));\n*/\nwhile (k < c) {\n    if (m < a) {\n        m = a;\n    }\n    k = k + 1;\n}\n/*@ \n    loop invariant k == c;\n    loop invariant a <= m;\n    loop invariant (c == 0 ==> a <= m);\n    loop invariant (c > 0 && m < a ==> m <= \\old(a));\n*/\nif (c > 0) {\n    assume(a <= m);\n}",
            "/*@ \n    loop invariant 0 <= j <= k;\n    loop invariant m >= a;\n    loop invariant m >= \\max_{0\\le i < k} a_i;\n    loop invariant k <= c;\n    loop invariant (c > 0 ==> a <= m);\n*/",
            "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant 0 <= j <= k;\n    loop invariant j == 0 ==> m == a;\n    loop invariant j > 0 ==> a <= m;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- `j = 0;`\n- `k = 0;`\n\nLoop condition:\n- `k < c`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration of the loop: \n    - `j == 0`\n    - `0 <= k <= c`\n    - `m >= a`\n- After the loop:\n    - `c <= 0 ==> a <= m`\n\nExplanation:\n- Before the loop, there are no loop invariants to state.\n- In every iteration of the loop:\n    - `j` is always assigned the value 0 before the loop, and it is never modified inside the loop. Therefore, `j == 0` holds throughout the loop.\n    - `k` is initialized to 0 before the loop, and incremented by 1 in every iteration. Therefore, `0 <= k` holds throughout the loop. Also, the loop condition is `k < c`, so `k` is strictly less than `c` when the loop terminates. Therefore, `k <= c` holds throughout the loop.\n    - `m` is assigned the value of `a` if `m` is less than `a`. Therefore, `m >= a` holds throughout the loop.\n- After the loop:\n    - The assertion is guarded by the condition `c > 0`. Therefore, we can use implication to state the loop invariant: `c <= 0 ==> a <= m`. If `c` is not greater than 0, then the assertion does not need to hold, so the implication is true. If `c` is greater than 0, then the assertion needs to hold, which means `a` must be less than or equal to `m`. Therefore, the implication is also true in this case."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n    loop invariant k >= 0;\n    loop invariant m >= a;\n    loop invariant k <= c;\n    loop invariant (m >= a && k >= c) ==> a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant k >= 0 is partially proven to be inductive.\nloop invariant m >= a is preserved but not established.\nloop invariant k <= c is preserved but not established.\nloop invariant (m >= a && k >= c) ==> a <= m is partially proven to be inductive.\nAssertion a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: k >= 0;\n\n\nloop invariant i4: (m >= a && k >= c) ==> a <= m;\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant a <= m;\n    loop invariant (k == 0 ==> m <= a);\n    loop invariant (k > 0 && m < a ==> m <= \\old(a));\n*/\nwhile (k < c) {\n    if (m < a) {\n        m = a;\n    }\n    k = k + 1;\n}\n/*@ \n    loop invariant k == c;\n    loop invariant a <= m;\n    loop invariant (c == 0 ==> a <= m);\n    loop invariant (c > 0 && m < a ==> m <= \\old(a));\n*/\nif (c > 0) {\n    assume(a <= m);\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\n\n\n\n\n\n\n\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= j <= k;\n    loop invariant m >= a;\n    loop invariant m >= \\max_{0\\le i < k} a_i;\n    loop invariant k <= c;\n    loop invariant (c > 0 ==> a <= m);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token '0'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: 0 <= j <= k;\n\n\n\n\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 0 <= k <= c;\n    loop invariant 0 <= j <= k;\n    loop invariant j == 0 ==> m == a;\n    loop invariant j > 0 ==> a <= m;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= k <= c is preserved but not established.\nloop invariant 0 <= j <= k is partially proven to be inductive.\nloop invariant j == 0 ==> m == a is preserved but not established.\nloop invariant j > 0 ==> a <= m is partially proven to be inductive.\nAssertion a <= m: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\n\nloop invariant i2: 0 <= j <= k;\n\nloop invariant i4: j > 0 ==> a <= m;\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- `j = 0;`\n- `k = 0;`\n\nLoop condition:\n- `k < c`\n\nLoop invariants:\n- Before the loop: None\n- In every iteration of the loop: \n    - `j == 0`\n    - `0 <= k <= c`\n    - `m >= a`\n- After the loop:\n    - `c <= 0 ==> a <= m`\n\nExplanation:\n- Before the loop, there are no loop invariants to state.\n- In every iteration of the loop:\n    - `j` is always assigned the value 0 before the loop, and it is never modified inside the loop. Therefore, `j == 0` holds throughout the loop.\n    - `k` is initialized to 0 before the loop, and incremented by 1 in every iteration. Therefore, `0 <= k` holds throughout the loop. Also, the loop condition is `k < c`, so `k` is strictly less than `c` when the loop terminates. Therefore, `k <= c` holds throughout the loop.\n    - `m` is assigned the value of `a` if `m` is less than `a`. Therefore, `m >= a` holds throughout the loop.\n- After the loop:\n    - The assertion is guarded by the condition `c > 0`. Therefore, we can use implication to state the loop invariant: `c <= 0 ==> a <= m`. If `c` is not greater than 0, then the assertion does not need to hold, so the implication is true. If `c` is greater than 0, then the assertion needs to hold, which means `a` must be less than or equal to `m`. Therefore, the implication is also true in this case.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 22: unexpected token '0'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: k >= 0;\nloop invariant i2: m >= a;\nloop invariant i3: k <= c;\nloop invariant i4: (m >= a && k >= c) ==> a <= m;\nloop invariant i5: 0 <= k <= c;\nloop invariant i6: a <= m;\nloop invariant i7: (k == 0 ==> m <= a);\nloop invariant i8: (k > 0 && m < a ==> m <= \\old(a));\nloop invariant i9: k == c;\nloop invariant i10: (c == 0 ==> a <= m);\nloop invariant i11: (c > 0 && m < a ==> m <= \\old(a));\nloop invariant i12: 0 <= j <= k;\nloop invariant i13: m >= \\max_{0\\le i < k} a_i;\nloop invariant i14: (c > 0 ==> a <= m);\nloop invariant i15: j == 0 ==> m == a;\nloop invariant i16: j > 0 ==> a <= m;\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
        "combined_annotation_num_solver_calls": 8,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n    int a,c,m,j,k;\n\n    j = 0;\n    k = 0;\n\n    /*@\nloop invariant i1: k >= 0;\n\n\nloop invariant i4: (m >= a && k >= c) ==> a <= m;\n\n\n\n\n\n\n\nloop invariant i12: 0 <= j <= k;\n\n\n\nloop invariant i16: j > 0 ==> a <= m;\n*/\nwhile ( k < c) {\n        if(m < a) {\n            m = a;\n        }\n        k = k + 1;\n    }\n\n    if( c > 0 ) {\n        {;\n//@ assert( a <=  m);\n}\n\n    }\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c"
        ],
        "total": 94,
        "success_count": 63,
        "failure_count": 31,
        "success_rate": 0.6702127659574468
    }
}