{
    "logs": {
        "file": "../data/benchmarks/code2inv/96.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  while ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which is not used in this program.\n- The program declares and initializes four integer variables `i`, `j`, `x`, and `y`.\n\nLoop condition:\n- The while loop condition is `(i <= x)`.\n\nLoop invariants:\n- Before the loop execution, the following loop invariants hold:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y >= 1;\n*/\n```\n- In every iteration of the loop, the following loop invariants hold:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y >= 1;\n    loop invariant i <= x + 1;\n*/\n```\n- After the loop termination, the following loop invariants hold:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y >= 1;\n    loop invariant i > x ==> i == j;\n    loop invariant i <= x + 1 ==> i != j ==> y != 1;\n*/\n```\nExplanation:\n- Since `i` and `j` are incremented by `1` in each iteration of the loop, they should always be greater than or equal to `0`.\n- Since `y` is initialized to `1`, it should always be greater than or equal to `1`.\n- Since the loop condition is `(i <= x)`, and `i` is incremented by `1` in each iteration of the loop, the loop invariant `i <= x + 1` holds.\n- After the loop terminates, if `i` is greater than `x`, then `i` should be equal to `j`, because `j` is incremented by `y` in each iteration of the loop, and `y` is not changed inside the loop.\n- If `i` is less than or equal to `x` and `i` is not equal to `j`, then `y` should not be equal to `1`. This is because `y` is multiplied by itself in each iteration of the loop, and if it is equal to `1`, then it will always be equal to `1`. Therefore, if `i` is not equal to `j`, then `y` must be greater than `1`.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `j` is assigned 0\n- `i` is assigned 0\n- `y` is assigned 1\n\nLoop condition:\n- `i <= x`\n\nPost-condition:\n- If `i` is not equal to `j`, then `y` is not equal to 1.\n\nLoop invariants:\n```\n/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= y;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant i <= x+1;\nloop invariant j == (\\sum integer k; 0 <= k < i; y);\nloop invariant i == x+1 ==> i == j;\nloop invariant i != j ==> y != 1;\n*/\n```\nExplanation:\n- The first three invariants state that `i`, `j` and `y` are non-negative.\n- The fourth invariant states that if `i` is non-negative, then `j` is non-negative.\n- The fifth invariant states that `i` is less than or equal to `x+1`.\n- The sixth invariant states that `j` is equal to the sum of `y` from `0` to `i-1`.\n- The seventh invariant states that if `i` is equal to `x+1`, then `i` is equal to `j`.\n- The eighth invariant states that if `i` is not equal to `j`, then `y` is not equal to 1. \n\nNote that we have used implication to handle the condition in the post-condition. Also, there are no non-deterministic variables in this program.",
            "Pre-conditions:\n\nNone.\n\nVariable Assignments:\n\n- `j = 0`\n- `i = 0`\n- `y = 1`\n\nLoop condition:\n\n- `(i <= x)`\n\nPost-condition:\n\n- `i == j ==> y != 1`\n\nLoop invariants:\n```\n//@ loop invariant 0 <= i;\n//@ loop invariant i <= x+1;\n//@ loop invariant 0 <= j;\n//@ loop invariant (\\forall integer k; 0 <= k < i ==> j >= k+1);\n//@ loop invariant y == 1 ==> i == j;\n//@ loop invariant i != j ==> y != 1;\n```\n\nExplanation:\n\n- The first two loop invariants describe the range of values that `i` can take in each iteration of the loop.\n- The third loop invariant describes the range of values that `j` can take in each iteration of the loop.\n- The fourth loop invariant states that for all values of `k` less than `i`, `j` is greater than or equal to `k+1`. This is because in each iteration of the loop, `j` is incremented by `y`, which is always 1.\n- The fifth loop invariant states that if `y` is equal to 1, then `i` and `j` must be equal, since `j` is incremented by 1 in each iteration of the loop.\n- The sixth loop invariant is an implication that states that if `i` is not equal to `j`, then `y` must not be equal to 1, which is the post-condition of the program.\n\nNote that we do not need to add any loop invariants to handle non-determinism, since all variables are explicitly initialized before the loop.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `j = 0`\n- `i = 0`\n- `y = 1`\n\nLoop Condition:\n- `i <= x`\n\nPost-condition:\n- `(i != j) ==> (y != 1)`\n\nLoop Invariants:\n- `i >= 0`\n- `j >= 0`\n- `y == 1 ==> j == i`\n- `i <= x + 1`\n- `i > x ==> (i != j) ==> (y != 1)`\n\nExplanation:\n- `i >= 0` and `j >= 0` are true before the loop execution and after the loop termination, as `i` and `j` are assigned values greater than or equal to 0 at the beginning of the program and their values never become negative.\n- `y == 1 ==> j == i` is true before the loop execution and in every iteration of the loop, as `y` is assigned the value 1 at the beginning of the program and `j` is always equal to the sum of `y`'s powers up to the current value of `i`, which is the same as `i` if `y` is equal to 1.\n- `i <= x + 1` is true before the loop execution and in every iteration of the loop, as `i` is incremented by 1 in every iteration and the loop terminates when `i` becomes greater than `x`. Therefore, `i` can be at most `x + 1`.\n- `i > x ==> (i != j) ==> (y != 1)` is true after the loop termination, as the post-condition implies that if `i` is not equal to `j`, then `y` must be not equal to 1. Therefore, if `i` becomes greater than `x`, then the post-condition must hold. The implication makes the invariant trivially true during the loop execution when `i` is not greater than `x`. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 1 ==> j == i;\n    loop invariant i <= x + 1;\n    loop invariant i > x ==> (i != j) ==> (y != 1);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- j = 0\n- i = 0\n- y = 1\n\nLoop condition:\n- i <= x\n\nPost-condition:\n- if (i != j) then (y != 1)\n\nLoop invariants:\n- Before loop: None\n- In every iteration: \n    - i >= 0\n    - j >= 0\n    - y == 1 ==> j == (i-1)\n    - y != 1 ==> j == ((pow(y, i)-1)/(y-1))\n- After loop: \n    - i > x ==> (i != j) ==> (y != 1)\n\nExplanation:\n- Before loop: None needed\n- In every iteration:\n    - i and j are incremented by 1 in every iteration, so both i and j are non-negative.\n    - When y is equal to 1, j must be equal to (i-1) since j is the sum of the first i terms of the geometric series with common ratio y=1. \n    - When y is not equal to 1, j must be equal to ((pow(y, i)-1)/(y-1)) since j is the sum of the first i terms of the geometric series with common ratio y. \n- After loop:\n    - When i > x, the loop condition i <= x is false and the loop terminates. Since j is the sum of the first i terms of the geometric series with common ratio y, j is greater than or equal to ((pow(y, i)-1)/(y-1)). If i is not equal to j, then y must be not equal to 1 since j is the sum of the first i terms of the geometric series with common ratio y."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y >= 1;\n*/",
            "/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= y;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant i <= x+1;\nloop invariant j == (\\sum integer k; 0 <= k < i; y);\nloop invariant i == x+1 ==> i == j;\nloop invariant i != j ==> y != 1;\n*/",
            "//@ loop invariant 0 <= i;\n//@ loop invariant i <= x+1;\n//@ loop invariant 0 <= j;\n//@ loop invariant (\\forall integer k; 0 <= k < i ==> j >= k+1);\n//@ loop invariant y == 1 ==> i == j;\n//@ loop invariant i != j ==> y != 1;",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 1 ==> j == i;\n    loop invariant i <= x + 1;\n    loop invariant i > x ==> (i != j) ==> (y != 1);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable assignments:\n- j = 0\n- i = 0\n- y = 1\n\nLoop condition:\n- i <= x\n\nPost-condition:\n- if (i != j) then (y != 1)\n\nLoop invariants:\n- Before loop: None\n- In every iteration: \n    - i >= 0\n    - j >= 0\n    - y == 1 ==> j == (i-1)\n    - y != 1 ==> j == ((pow(y, i)-1)/(y-1))\n- After loop: \n    - i > x ==> (i != j) ==> (y != 1)\n\nExplanation:\n- Before loop: None needed\n- In every iteration:\n    - i and j are incremented by 1 in every iteration, so both i and j are non-negative.\n    - When y is equal to 1, j must be equal to (i-1) since j is the sum of the first i terms of the geometric series with common ratio y=1. \n    - When y is not equal to 1, j must be equal to ((pow(y, i)-1)/(y-1)) since j is the sum of the first i terms of the geometric series with common ratio y. \n- After loop:\n    - When i > x, the loop condition i <= x is false and the loop terminates. Since j is the sum of the first i terms of the geometric series with common ratio y, j is greater than or equal to ((pow(y, i)-1)/(y-1)). If i is not equal to j, then y must be not equal to 1 since j is the sum of the first i terms of the geometric series with common ratio y."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y >= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant j >= 0 is inductive.\nloop invariant y >= 1 is inductive.\nAssertion y != 1: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: y >= 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\nloop invariant 0 <= i;\nloop invariant 0 <= j;\nloop invariant 0 <= y;\nloop invariant i >= 0 ==> j >= 0;\nloop invariant i <= x+1;\nloop invariant j == (\\sum integer k; 0 <= k < i; y);\nloop invariant i == x+1 ==> i == j;\nloop invariant i != j ==> y != 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 20: unexpected token 'integer'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: 0 <= y;\nloop invariant i4: i >= 0 ==> j >= 0;\n\n\n\nloop invariant i8: i != j ==> y != 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "//@ loop invariant 0 <= i;\n//@ loop invariant i <= x+1;\n//@ loop invariant 0 <= j;\n//@ loop invariant (\\forall integer k; 0 <= k < i ==> j >= k+1);\n//@ loop invariant y == 1 ==> i == j;\n//@ loop invariant i != j ==> y != 1;",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= i is partially proven to be inductive.\nloop invariant i <= x+1 is preserved but not established.\nloop invariant 0 <= j is established but not preserved.\nloop invariant (\\forall integer k; 0 <= k < i ==> j >= k+1) is established but not preserved.\nloop invariant y == 1 ==> i == j is partially proven to be inductive.\nloop invariant i != j ==> y != 1 is partially proven to be inductive.\nAssertion y != 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: 0 <= i;\n\n\n\nloop invariant i5: y == 1 ==> i == j;\nloop invariant i6: i != j ==> y != 1;\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant y == 1 ==> j == i;\n    loop invariant i <= x + 1;\n    loop invariant i > x ==> (i != j) ==> (y != 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is established but not preserved.\nloop invariant y == 1 ==> j == i is partially proven to be inductive.\nloop invariant i <= x + 1 is preserved but not established.\nloop invariant i > x ==> (i != j) ==> (y != 1) is partially proven to be inductive.\nAssertion y != 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i >= 0;\n\nloop invariant i3: y == 1 ==> j == i;\n\nloop invariant i5: i > x ==> (i != j) ==> (y != 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable assignments:\n- j = 0\n- i = 0\n- y = 1\n\nLoop condition:\n- i <= x\n\nPost-condition:\n- if (i != j) then (y != 1)\n\nLoop invariants:\n- Before loop: None\n- In every iteration: \n    - i >= 0\n    - j >= 0\n    - y == 1 ==> j == (i-1)\n    - y != 1 ==> j == ((pow(y, i)-1)/(y-1))\n- After loop: \n    - i > x ==> (i != j) ==> (y != 1)\n\nExplanation:\n- Before loop: None needed\n- In every iteration:\n    - i and j are incremented by 1 in every iteration, so both i and j are non-negative.\n    - When y is equal to 1, j must be equal to (i-1) since j is the sum of the first i terms of the geometric series with common ratio y=1. \n    - When y is not equal to 1, j must be equal to ((pow(y, i)-1)/(y-1)) since j is the sum of the first i terms of the geometric series with common ratio y. \n- After loop:\n    - When i > x, the loop condition i <= x is false and the loop terminates. Since j is the sum of the first i terms of the geometric series with common ratio y, j is greater than or equal to ((pow(y, i)-1)/(y-1)). If i is not equal to j, then y must be not equal to 1 since j is the sum of the first i terms of the geometric series with common ratio y.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token 'integer'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: y >= 1;\nloop invariant i4: 0 <= i;\nloop invariant i5: 0 <= j;\nloop invariant i6: 0 <= y;\nloop invariant i7: i >= 0 ==> j >= 0;\nloop invariant i8: i <= x+1;\nloop invariant i9: j == (\\sum integer k; 0 <= k < i; y);\nloop invariant i10: i == x+1 ==> i == j;\nloop invariant i11: i != j ==> y != 1;\nloop invariant i12: (\\forall integer k; 0 <= k < i ==> j >= k+1);\nloop invariant i13: y == 1 ==> i == j;\nloop invariant i14: y == 1 ==> j == i;\nloop invariant i15: i <= x + 1;\nloop invariant i16: i > x ==> (i != j) ==> (y != 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 4,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  \n  (j = 0);\n  (i = 0);\n  (y = 1);\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: j >= 0;\nloop invariant i3: y >= 1;\nloop invariant i4: 0 <= i;\nloop invariant i5: 0 <= j;\nloop invariant i6: 0 <= y;\nloop invariant i7: i >= 0 ==> j >= 0;\n\n\n\nloop invariant i11: i != j ==> y != 1;\nloop invariant i12: (\\forall integer k; 0 <= k < i ==> j >= k+1);\nloop invariant i13: y == 1 ==> i == j;\nloop invariant i14: y == 1 ==> j == i;\n\nloop invariant i16: i > x ==> (i != j) ==> (y != 1);\n*/\nwhile ((i <= x)) {\n    {\n    (i  = (i + 1));\n    (j  = (j + y));\n    }\n\n  }\n  \nif ( (i != j) )\n{;\n//@ assert( (y != 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c"
        ],
        "total": 85,
        "success_count": 58,
        "failure_count": 27,
        "success_rate": 0.6823529411764706
    }
}