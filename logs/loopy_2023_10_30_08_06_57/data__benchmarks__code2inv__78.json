{
    "logs": {
        "file": "../data/benchmarks/code2inv/78.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  while (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variable `i` is initialized to 0.\n- The variables `x` and `y` are non-negative. \n- `x` is greater than or equal to `y`.\n\nLoop condition:\n- The loop iterates as long as `unknown()` returns a non-zero value.\n\nPost-condition:\n- If the loop terminates, then `i` is less than `y`.\n\nLoop Invariants:\n- Before loop execution:\n  - `i >= 0`\n  - `x >= 0`\n  - `y >= 0`\n  - `x >= y`\n\n- In every iteration of the loop:\n  - `i >= 0`\n  - `x >= 0`\n  - `y >= 0`\n  - `x >= y`\n  - `i <= y`\n\n- After loop termination:\n  - `i <= y`\n\nSince the loop condition is non-deterministic, we cannot make any guarantees about the exact value of `i` at the end of each iteration. However, we know that `i` can increase by at most 1 in each iteration, and that the loop terminates when `unknown()` returns 0. Therefore, we can infer that `i` is less than or equal to `y` when the loop terminates, which gives us the final loop invariant. \n\nWe can also add the following conjunctions to further bound the values of `i`, `x`, and `y`:\n- `i <= y`\n- `x >= i`\n- `y >= i`\n- `x >= y - 1`\n\nThe first conjunction follows from the post-condition. The second and third conjunctions follow from the fact that `i` can never be greater than `y`, so it must be less than or equal to both `x` and `y`. The fourth conjunction follows from the fact that `i` can increase by at most 1 in each iteration, so after `i` iterations, `y` must be greater than or equal to `i + 1`, which implies that `y - 1` must be greater than or equal to `i`.\n\nTherefore, the final loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant x >= i;\n    loop invariant y >= i;\n    loop invariant x >= y - 1;\n*/\n```",
            "Pre-conditions:\n- `x` is non-negative\n- `y` is non-negative\n- `x` is greater than or equal to `y`\n\nLoop condition: `unknown()` (This is a non-deterministic function which returns either 0 or a non-zero value.)\n\nPossible loop invariants:\n- Before the loop: `i == 0`\n- In every iteration: \n    - `0 <= i <= y`\n    - `i <= x`\n- After the loop:\n    - If the loop terminates, then `i == y`\n    - If the loop does not terminate, then `i <= y`\n\nExplanation:\n- Before the loop, `i` is initialized to 0.\n- In every iteration, `i` is incremented by 1 if it is less than `y`. Thus, `i` remains between 0 and `y`.\n- Since `x` is greater than or equal to `y`, `i` is less than or equal to `x`.\n- If the loop terminates, then `i` is equal to `y`.\n- If the loop does not terminate, then `i` can be any value less than or equal to `y`.\n\nCombining all the loop invariants, we get:\n```\n/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= y;\n    loop invariant i <= x;\n    loop invariant (i == y) || (i <= y);\n*/\n```",
            "Pre-conditions: \n- i is initialized to 0\n- x and y are non-negative integers such that x >= y\n\nLoop condition: \n- unknown() returns a non-zero value\n\nPost-condition:\n- If the loop terminates, then i is less than y and non-negative.\n\nLoop invariants:\n```\n/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i >= 0);\n    loop invariant (i < y) ==> (i <= y);\n    loop invariant (i < y) ==> (x >= 0);\n    loop invariant (i < y) ==> (y >= 0);\n    loop invariant (i < y) ==> (x >= y);\n    loop invariant (!unknown()) || ((i < y) ==> (i >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (i <= y));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (y >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= y));\n*/\n```\n\nExplanation:\n- The first two loop invariants ensure that i is always within the bounds of 0 and y.\n- The next two invariants ensure that x and y are always non-negative.\n- The fifth invariant ensures that x is always greater than or equal to y.\n- The next five invariants use implication to make sure that i is non-negative when (i < y) is true. This takes care of the non-deterministic behavior of unknown() function. \n- The last five loop invariants use implication to make sure that the loop invariants hold even if the loop terminates due to unknown() returning 0. This ensures that the loop invariants imply the post-condition.",
            "Pre-conditions:\n- `x >= 0`\n- `y >= 0`\n- `x >= y`\n\nVariable assignments:\n- `i = 0`\n\nLoop condition:\n- `unknown()`\n\nPost-condition:\n- `if (i < y)`, then `(0 <= i)`\n\nLoop Invariants:\n- `0 <= i`\n- `i <= y`\n- `x >= y`\n- `x >= 0`\n- `y >= 0`\n- `(i < y) ==> (0 <= i)` \n\nExplanation:\n- The first two loop invariants ensure that `i` is always between `0` and `y`.\n- The third and fourth loop invariants are the pre-conditions.\n- The fifth loop invariant ensures that `y` is positive.\n- The sixth loop invariant is the post-condition, which is an implication. It states that if `i` is less than `y`, then `i` must be greater than or equal to `0`. This is necessary because the assertion is guarded by the condition `if (i < y)`. \n\nWe can combine all these loop invariants as follows:\n```\n/*@ \n  loop invariant 0 <= i <= y;\n  loop invariant x >= y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant (i < y) ==> (0 <= i);\n*/\n```",
            "Pre-conditions and variable assignments:\n- `i` is initialized to 0.\n- `x` and `y` are non-negative integers such that `x >= y`.\n\nLoop condition:\n- The loop executes as long as the boolean expression `unknown()` evaluates to true. Since `unknown()` is an external function whose behavior is not known, we cannot say anything about the loop termination.\n\nLoop invariants:\n- Before the loop execution: `0 <= i`, `x >= 0`, `y >= 0`, `x >= y`.\n- In every iteration of the loop: \n    - If `i >= y`, then the loop terminates and the post-condition is trivially true. So we can add the implication `(i >= y) ==> (0 <= i)` as a loop invariant.\n    - If `i < y`, then `i` is incremented by 1. Therefore, we can add the loop invariant `0 <= i < y + 1`.\n- After the loop termination: Since we cannot reason about the loop termination, we cannot add any loop invariant that implies the post-condition.\n\nPutting it all together:\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i >= y) ==> (0 <= i);\n    loop invariant 0 <= i < y + 1;\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant x >= i;\n    loop invariant y >= i;\n    loop invariant x >= y - 1;\n*/",
            "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= y;\n    loop invariant i <= x;\n    loop invariant (i == y) || (i <= y);\n*/",
            "/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i >= 0);\n    loop invariant (i < y) ==> (i <= y);\n    loop invariant (i < y) ==> (x >= 0);\n    loop invariant (i < y) ==> (y >= 0);\n    loop invariant (i < y) ==> (x >= y);\n    loop invariant (!unknown()) || ((i < y) ==> (i >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (i <= y));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (y >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= y));\n*/",
            "/*@ \n  loop invariant 0 <= i <= y;\n  loop invariant x >= y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant (i < y) ==> (0 <= i);\n*/",
            "/*@ \n    loop invariant 0 <= i;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i >= y) ==> (0 <= i);\n    loop invariant 0 <= i < y + 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant i <= y;\n    loop invariant x >= i;\n    loop invariant y >= i;\n    loop invariant x >= y - 1;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x >= y is inductive.\nloop invariant i <= y is inductive.\nloop invariant x >= i is inductive.\nloop invariant y >= i is inductive.\nloop invariant x >= y - 1 is inductive.\nAssertion 0 <= i: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i == 0;\n    loop invariant 0 <= i <= y;\n    loop invariant i <= x;\n    loop invariant (i == y) || (i <= y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == 0 is established but not preserved.\nloop invariant 0 <= i <= y is partially proven to be inductive.\nloop invariant i <= x is partially proven to be inductive.\nloop invariant (i == y) || (i <= y) is partially proven to be inductive.\nAssertion 0 <= i: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\n\nloop invariant i2: 0 <= i <= y;\n\nloop invariant i4: (i == y) || (i <= y);\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 6,
                "annotations": "/*@ \n    loop invariant i <= y;\n    loop invariant i >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i < y) ==> (i >= 0);\n    loop invariant (i < y) ==> (i <= y);\n    loop invariant (i < y) ==> (x >= 0);\n    loop invariant (i < y) ==> (y >= 0);\n    loop invariant (i < y) ==> (x >= y);\n    loop invariant (!unknown()) || ((i < y) ==> (i >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (i <= y));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (y >= 0));\n    loop invariant (!unknown()) || ((i < y) ==> (x >= y));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 26: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i <= y;\nloop invariant i2: i >= 0;\nloop invariant i3: x >= 0;\nloop invariant i4: y >= 0;\nloop invariant i5: x >= y;\nloop invariant i6: (i < y) ==> (i >= 0);\nloop invariant i7: (i < y) ==> (i <= y);\nloop invariant i8: (i < y) ==> (x >= 0);\nloop invariant i9: (i < y) ==> (y >= 0);\nloop invariant i10: (i < y) ==> (x >= y);\n\n\n\n\n\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n  loop invariant 0 <= i <= y;\n  loop invariant x >= y;\n  loop invariant x >= 0;\n  loop invariant y >= 0;\n  loop invariant (i < y) ==> (0 <= i);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i <= y is inductive.\nloop invariant x >= y is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant (i < y) ==> (0 <= i) is inductive.\nAssertion 0 <= i: Valid"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= i;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x >= y;\n    loop invariant (i >= y) ==> (0 <= i);\n    loop invariant 0 <= i < y + 1;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= i is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant x >= y is inductive.\nloop invariant (i >= y) ==> (0 <= i) is inductive.\nloop invariant 0 <= i < y + 1 is inductive.\nAssertion 0 <= i: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 33: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: i <= y;\nloop invariant i6: x >= i;\nloop invariant i7: y >= i;\nloop invariant i8: x >= y - 1;\nloop invariant i9: i == 0;\nloop invariant i10: 0 <= i <= y;\nloop invariant i11: i <= x;\nloop invariant i12: (i == y) || (i <= y);\nloop invariant i13: (i < y) ==> (i >= 0);\nloop invariant i14: (i < y) ==> (i <= y);\nloop invariant i15: (i < y) ==> (x >= 0);\nloop invariant i16: (i < y) ==> (y >= 0);\nloop invariant i17: (i < y) ==> (x >= y);\nloop invariant i18: (!unknown()) || ((i < y) ==> (i >= 0));\nloop invariant i19: (!unknown()) || ((i < y) ==> (i <= y));\nloop invariant i20: (!unknown()) || ((i < y) ==> (x >= 0));\nloop invariant i21: (!unknown()) || ((i < y) ==> (y >= 0));\nloop invariant i22: (!unknown()) || ((i < y) ==> (x >= y));\nloop invariant i23: (i < y) ==> (0 <= i);\nloop invariant i24: 0 <= i;\nloop invariant i25: (i >= y) ==> (0 <= i);\nloop invariant i26: 0 <= i < y + 1;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int i;\n  int x;\n  int y;\n  \n  (i = 0);\n  assume((x >= 0));\n  assume((y >= 0));\n  assume((x >= y));\n  \n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: y >= 0;\nloop invariant i4: x >= y;\nloop invariant i5: i <= y;\nloop invariant i6: x >= i;\nloop invariant i7: y >= i;\nloop invariant i8: x >= y - 1;\n\nloop invariant i10: 0 <= i <= y;\nloop invariant i11: i <= x;\nloop invariant i12: (i == y) || (i <= y);\nloop invariant i13: (i < y) ==> (i >= 0);\nloop invariant i14: (i < y) ==> (i <= y);\nloop invariant i15: (i < y) ==> (x >= 0);\nloop invariant i16: (i < y) ==> (y >= 0);\nloop invariant i17: (i < y) ==> (x >= y);\n\n\n\n\n\nloop invariant i23: (i < y) ==> (0 <= i);\nloop invariant i24: 0 <= i;\nloop invariant i25: (i >= y) ==> (0 <= i);\nloop invariant i26: 0 <= i < y + 1;\n*/\nwhile (unknown()) {\n    if ( (i < y) )\n    {\n    (i  = (i + 1));\n    }\n\n  }\n  \nif ( (i < y) )\n{;\n//@ assert( (0 <= i) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c"
        ],
        "total": 69,
        "success_count": 43,
        "failure_count": 26,
        "success_rate": 0.6231884057971014
    }
}