{
    "logs": {
        "file": "../data/benchmarks/code2inv/114.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions or variable assignments:\n- The program defines a macro `assume(e)` which returns 0 if the expression `e` is false.\n- The program declares an external function `unknown()` which returns an unknown integer value.\n- The program declares two integer variables `sn` and `x`.\n- The program initializes both `sn` and `x` to 0.\n\nLoop condition:\n- The loop condition is `unknown()`, which means the loop iterates an unknown number of times until `unknown()` returns 0.\n\nLoop invariants:\n- Before the loop execution: `sn == 0 && x == 0`\n- In every iteration of the loop: `(x >= 0) && (sn >= 0) && (sn >= x)`\n    - `x` is incremented by 1 in each iteration, so it is always greater than or equal to 0.\n    - `sn` is incremented by 1 in each iteration, so it is always greater than or equal to 0.\n    - `sn` is always greater than or equal to `x` because `x` is incremented by 1 in each iteration, so `sn` can only be equal to or greater than `x`.\n- After the loop termination:\n    - If `unknown()` returns 0, then the loop terminates and `sn == x`.\n    - If `unknown()` never returns 0, then the loop continues to iterate indefinitely, and `sn >= x`.\n- Implication for non-deterministic variables:\n    - Since `unknown()` is non-deterministic and can return any value, we cannot make any assumptions about the initial or final values of `sn` and `x`. Therefore, we can use the following implication to make the loop invariants trivially true at the beginning and end of the loop:\n        ```\n        (unknown() ==> (sn >= 0 && x >= 0 && sn >= x))\n        ```\n- Implication for assertion:\n    - The assertion `sn == -1` is guarded by the condition `(sn != x)`. Therefore, we can use the following implication to make the assertion true only when `(sn != x)` is true:\n        ```\n        ((sn != x) ==> (sn == -1))\n        ```\n\nPutting it all together, the loop invariants for the program are:\n```\n/*@ \n    loop invariant sn == 0 && x == 0;\n    loop invariant (x >= 0) && (sn >= 0) && (sn >= x);\n    loop invariant (unknown() ==> (sn >= 0 && x >= 0 && sn >= x));\n    loop invariant ((sn != x) ==> (sn == -1));\n*/\n```",
            "We can start by analyzing the program and identifying the pre-conditions and variable assignments:\n\nPre-conditions: None\n\nVariable assignments:\n- sn is assigned the value 0\n- x is assigned the value 0\n\nLoop condition: The loop executes as long as the return value of the function unknown is non-zero.\n\nLoop body: \n- x is incremented by 1\n- sn is incremented by 1\n\nPost-condition: If sn is not equal to x, then assert that sn is equal to -1.\n\nNow, let's try to come up with loop invariants that satisfy the three conditions mentioned in the prompt:\n\nBefore the loop execution:\n- sn == 0\n- x == 0\n\nIn every iteration of the loop:\n- sn >= 0\n- x >= 0\n- sn >= x\n\nAfter the loop termination:\n- (sn == x) ==> (sn == \\old(sn) + n) /\\ (x == \\old(x) + n) /\\ (sn == -1), where n is the number of times the loop iterated.\n\nWe can explain these loop invariants as follows:\n- Before the loop starts, sn and x are initialized to 0.\n- During each iteration of the loop, both sn and x are incremented by 1, so they must always be greater than or equal to 0.\n- Since sn is incremented by 1 for each iteration, it must always be greater than or equal to x.\n- After the loop terminates, if sn and x are equal, then the post-condition is satisfied and we don't need to do anything. Otherwise, sn must be equal to -1 and it must have been incremented n times, where n is the number of iterations of the loop. Therefore, sn must be equal to its initial value (\\old(sn)) plus n. Similarly, x must also be equal to its initial value plus n. If sn and x are not equal, then the post-condition must hold.\n\nPutting it all together, the loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant x == 0;\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn >= x;\n    loop invariant (sn == x) ==> (sn == \\old(sn) + n) /\\ (x == \\old(x) + n) /\\ (sn == -1);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- sn is initialized to 0\n- x is initialized to 0\n\nLoop condition:\n- unknown()\n\nLoop invariants:\n- Before the loop: sn == 0 && x == 0\n- In every iteration: x >= 0 && sn >= 0 && sn >= x\n- After the loop: if (sn == x) then sn >= 0 && x >= 0 else sn == -1\n\nExplanation:\n- Before the loop: The initial value of sn and x are both 0.\n- In every iteration: Since x is incremented by 1 in each iteration, x is always greater than or equal to 0. Similarly, since sn is incremented by 1 in each iteration, sn is always greater than or equal to 0. Also, since sn and x are incremented by the same value in each iteration, sn is always greater than or equal to x.\n- After the loop: If sn is equal to x, then both sn and x are greater than or equal to 0. Otherwise, if sn is not equal to x, then sn is assigned -1, and hence, it is less than 0. \n\nLoop invariants:\n```\n/*@ \n    loop invariant sn == 0 && x == 0; // Before the loop\n    loop invariant x >= 0 && sn >= 0 && sn >= x; // In every iteration\n    loop invariant (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1); // After the loop\n*/\n```",
            "Pre-conditions:\n- The program has two integer variables `sn` and `x`.\n\nVariable bounds:\n- `sn` and `x` are non-negative integers.\n\nLoop Invariants:\n- Before the loop execution, `sn` and `x` are non-negative integers.\n- In every iteration of the loop, `x` is incremented by 1 and `sn` is incremented by 1.\n- After the loop termination, if `sn` is not equal to `x`, then `sn` must be -1.\n\nWe can write these loop invariants in ACSL annotations as follows:\n\n```\n/*@ \n    loop invariant sn >= 0 && x >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\at(sn, Here) ==> x == k;\n    loop invariant sn == \\at(sn, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant x == \\at(x, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant (sn != x) ==> (sn == -1);\n*/\n```\n\nExplanation:\n- The first loop invariant ensures that `sn` and `x` are non-negative integers before the loop execution.\n- The second loop invariant ensures that at any point during the loop, `x` is equal to the number of iterations completed so far. This is because `x` is incremented by 1 in each iteration of the loop.\n- The third and fourth loop invariants ensure that `sn` and `x` are incremented by 1 in each iteration of the loop.\n- The fifth loop invariant ensures that if `sn` is not equal to `x` after the loop termination, then `sn` must be -1. This is because `sn` is incremented by 1 in each iteration of the loop and starts from 0, whereas `x` is also incremented by 1 in each iteration but starts from an unknown value. So, if `sn` is not equal to `x` after the loop termination, it means that `x` has been incremented more times than `sn` and hence `sn` must be -1.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program calls an external function `unknown` which returns a non-deterministic value of type `int`.\n- The program defines two variables `sn` and `x` of type `int`.\n- The program initializes `sn` and `x` to 0.\n\nLoop condition:\n- The program contains a while loop that executes as long as the value returned by `unknown` is non-zero.\n\nPost-condition:\n- If `sn` is not equal to `x`, then the assertion `(sn == -1)` holds true.\n\nLoop invariants:\n- Since `unknown` is non-deterministic, we cannot make any assumptions about the number of iterations the loop executes. Therefore, we cannot use a loop invariant to prove the post-condition directly.\n- However, we can use an implication to simplify the post-condition. If we assume that `sn` and `x` are equal at the beginning of the loop, then if the loop terminates with `sn` not equal to `x`, it must mean that `sn` has become less than `x` by exactly 1. Therefore, the post-condition can be simplified as follows:\n```\n(sn != x) ==> (sn == x - 1)\n```\n- For the loop invariant, we can use the fact that `sn` and `x` are incremented by 1 in every iteration of the loop. Therefore, we can add the following loop invariants:\n```\n/*@ \n  loop invariant sn <= x + 1;\n  loop invariant x <= sn;\n*/\n```\n- The first invariant ensures that `sn` is always at most 1 greater than `x`, while the second invariant ensures that `x` is always at most `sn`. Together, these invariants ensure that `sn` and `x` are always equal or `sn` is 1 greater than `x`.\n- If we assume that `sn` and `x` are equal at the beginning of the loop, then the loop invariants hold true at the beginning of the loop as well. \n- If `sn` and `x` are non-deterministic at the end of the loop, we can use an implication to make the loop invariant trivially true at that location:\n```\n(sn == x) ==> (sn <= x + 1)\n(x == sn) ==> (x <= sn)\n``` \nPutting all the loop invariants together, we get:\n```\n/*@ \n  loop invariant sn <= x + 1;\n  loop invariant x <= sn;\n  loop invariant (sn == x) ==> (sn <= x + 1);\n  loop invariant (x == sn) ==> (x <= sn);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant sn == 0 && x == 0;\n    loop invariant (x >= 0) && (sn >= 0) && (sn >= x);\n    loop invariant (unknown() ==> (sn >= 0 && x >= 0 && sn >= x));\n    loop invariant ((sn != x) ==> (sn == -1));\n*/",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant x == 0;\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn >= x;\n    loop invariant (sn == x) ==> (sn == \\old(sn) + n) /\\ (x == \\old(x) + n) /\\ (sn == -1);\n*/",
            "/*@ \n    loop invariant sn == 0 && x == 0; // Before the loop\n    loop invariant x >= 0 && sn >= 0 && sn >= x; // In every iteration\n    loop invariant (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1); // After the loop\n*/",
            "/*@ \n    loop invariant sn >= 0 && x >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\at(sn, Here) ==> x == k;\n    loop invariant sn == \\at(sn, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant x == \\at(x, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant (sn != x) ==> (sn == -1);\n*/",
            "/*@ \n  loop invariant sn <= x + 1;\n  loop invariant x <= sn;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant sn == 0 && x == 0;\n    loop invariant (x >= 0) && (sn >= 0) && (sn >= x);\n    loop invariant (unknown() ==> (sn >= 0 && x >= 0 && sn >= x));\n    loop invariant ((sn != x) ==> (sn == -1));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\n\nloop invariant i2: (x >= 0) && (sn >= 0) && (sn >= x);\n\nloop invariant i4: ((sn != x) ==> (sn == -1));\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant x == 0;\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant sn >= x;\n    loop invariant (sn == x) ==> (sn == \\old(sn) + n) /\\ (x == \\old(x) + n) /\\ (sn == -1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 18: lexical error, illegal character \\",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\n\n\nloop invariant i3: sn >= 0;\nloop invariant i4: x >= 0;\nloop invariant i5: sn >= x;\n\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant sn == 0 && x == 0; // Before the loop\n    loop invariant x >= 0 && sn >= 0 && sn >= x; // In every iteration\n    loop invariant (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1); // After the loop\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn == 0 && x == 0 is established but not preserved.\nloop invariant x >= 0 && sn >= 0 && sn >= x is partially proven to be inductive.\nloop invariant (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1) is partially proven to be inductive.\nAssertion sn == -1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\n\nloop invariant i2: x >= 0 && sn >= 0 && sn >= x;\nloop invariant i3: (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant sn >= 0 && x >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\at(sn, Here) ==> x == k;\n    loop invariant sn == \\at(sn, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant x == \\at(x, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\n    loop invariant (sn != x) ==> (sn == -1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unbound logic variable Here. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn >= 0 && x >= 0;\n\n\n\nloop invariant i5: (sn != x) ==> (sn == -1);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant sn <= x + 1;\n  loop invariant x <= sn;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn <= x + 1 is inductive.\nloop invariant x <= sn is inductive.\nAssertion sn == -1: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn <= x + 1;\nloop invariant i2: x <= sn;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn == 0 && x == 0;\nloop invariant i2: (x >= 0) && (sn >= 0) && (sn >= x);\nloop invariant i3: (unknown() ==> (sn >= 0 && x >= 0 && sn >= x));\nloop invariant i4: ((sn != x) ==> (sn == -1));\nloop invariant i5: sn == 0;\nloop invariant i6: x == 0;\nloop invariant i7: sn >= 0;\nloop invariant i8: x >= 0;\nloop invariant i9: sn >= x;\nloop invariant i10: (sn == x) ==> (sn == \\old(sn) + n) /\\ (x == \\old(x) + n) /\\ (sn == -1);\nloop invariant i11: x >= 0 && sn >= 0 && sn >= x;\nloop invariant i12: (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1);\nloop invariant i13: sn >= 0 && x >= 0;\nloop invariant i14: \\forall integer k; 0 <= k < \\at(sn, Here) ==> x == k;\nloop invariant i15: sn == \\at(sn, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\nloop invariant i16: x == \\at(x, LoopEntry) + \\at(\\sum(0, Here), LoopCurrent);\nloop invariant i17: (sn != x) ==> (sn == -1);\nloop invariant i18: sn <= x + 1;\nloop invariant i19: x <= sn;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\n\nloop invariant i2: (x >= 0) && (sn >= 0) && (sn >= x);\n\nloop invariant i4: ((sn != x) ==> (sn == -1));\n\n\nloop invariant i7: sn >= 0;\nloop invariant i8: x >= 0;\nloop invariant i9: sn >= x;\n\nloop invariant i11: x >= 0 && sn >= 0 && sn >= x;\nloop invariant i12: (sn == x ==> sn >= 0 && x >= 0) && (sn != x ==> sn == -1);\nloop invariant i13: sn >= 0 && x >= 0;\n\n\n\nloop invariant i17: (sn != x) ==> (sn == -1);\nloop invariant i18: sn <= x + 1;\nloop invariant i19: x <= sn;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 97,
        "success_count": 64,
        "failure_count": 33,
        "success_rate": 0.6597938144329897
    }
}