{
    "logs": {
        "file": "../data/benchmarks/code2inv/128.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value 1.\n\nLoop condition:\n- The loop continues as long as x is less than y.\n\nLoop invariants:\n- Before the loop execution, x is greater than or equal to 1. (x >= 1)\n- In every iteration of the loop, x is always a power of 2. (x == 2^n, where n is a non-negative integer)\n- After the loop termination, x is greater than or equal to y. (x >= y)\n\nExplanation:\n- Before the loop execution, x is assigned the value 1, so x is greater than or equal to 1.\n- In every iteration of the loop, x is doubled, so it is always a power of 2. This can be written as x == 2^n, where n is a non-negative integer.\n- After the loop termination, x is either greater than or equal to y or the loop has not executed at all. Since x is initially assigned the value 1, it can only become greater than or equal to y if the loop executes. Therefore, x >= y holds after the loop termination.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer n; x == 2^n;\n    loop invariant (x >= y) ==> \\at((x >= 1), Pre);\n    loop invariant (x < y) ==> \\at((x == 2^n), Pre);\n    loop invariant (x >= y) ==> \\at((x == 2^n), Here);\n*/\n```",
            "Pre-conditions:\n- The variables x and y are integers.\n\nLoop condition:\n- (x < y)\n\nPost-condition:\n- (x >= 1)\n\nLoop Invariants:\n1. (x >= 1)\n    - This is the post-condition, so it holds true before the loop execution.\n\n2. (y >= 1)\n    - Since x starts with 1, y has to be at least 1 for the loop condition to be true.\n\n3. (x <= y)\n    - This bounds the maximum value of x to be y and ensures that the loop terminates.\n\n4. ((x * 2) >= 1)\n    - This ensures that x is always greater than or equal to 1 in every iteration of the loop.\n\n5. (((x * 2) < y) ==> ((x * 4) <= y))\n    - This ensures that x doubles in every iteration of the loop and bounds the maximum value of x to be y.\n\nPutting it all together, the loop invariants are:\n```\n/*@\n  loop invariant (x >= 1);\n  loop invariant (y >= 1);\n  loop invariant (x <= y);\n  loop invariant ((x * 2) >= 1);\n  loop invariant (((x * 2) < y) ==> ((x * 4) <= y));\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value 1\n\nLoop condition:\n- (x < y)\n\nLoop invariants:\n- Since x is assigned the value 1 before the loop, we can add the invariant (x >= 1) before the loop execution.\n- During the loop execution, x is multiplied by 2 in each iteration. Therefore, we can add the invariant (x >= 1) && (x <= 2^n), where n is the number of loop iterations.\n- Since we don't know the initial value of y, we cannot add any invariant involving y.\n- After the loop termination, we know that x is not less than y. Therefore, we can add the invariant (x >= y) ==> (x >= 1).\n\nPutting it all together:\n```\n/*@ \n    loop invariant (x >= 1);\n    loop invariant (x >= 1) && (x <= 2^n);\n    loop invariant (x >= y) ==> (x >= 1);\n*/\n``` \nNote: the loop invariant (x >= 1) && (x <= 2^n) is a conjunction, where the first part (x >= 1) is the minimum bound and the second part (x <= 2^n) is the maximum bound.",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value 1\n\nLoop condition:\n- The while loop runs as long as x is less than y\n\nLoop invariants:\n- Before the loop execution, x is greater than or equal to 1.\n- In every iteration of the loop, x is always a power of 2.\n- After the loop termination, x is greater than or equal to y.\n- y is always greater than or equal to 1.\n\nExplanation:\n- Before the loop execution, x is assigned the value 1, so x is greater than or equal to 1.\n- In every iteration of the loop, x is multiplied by 2. So, x is always a power of 2.\n- After the loop termination, the condition x < y is false. So, x is greater than or equal to y.\n- y is not assigned any value explicitly, so it may contain garbage. However, since y is used in the loop condition, it must be greater than or equal to 1.\n\nPutting it all together:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall int i; (0 <= i < \\log2(x)) ==> (\\at(x, Loop_Entry) == 1 << i);\n    loop invariant x >= y;\n    loop invariant y >= 1;\n*/\n```",
            "Pre-conditions and variable assignments:\n- Two integer variables x and y are declared but not initialized. \n\nLoop condition:\n- The loop continues as long as x is less than y.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to 1.\n    - x is less than or equal to y.\n- After the loop termination: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to x.\n    - x is greater than or equal to 1.\n\nExplanation:\n- Before the loop, no invariants are needed as there is no loop execution yet.\n- In each iteration of the loop, x is doubled and y remains unchanged. Thus, x will always be a power of 2. \n- Since x is initialized to 1, it is less than any positive value of y. Hence, y must be greater than or equal to 1.\n- Since x is doubled at each iteration, it will eventually exceed y. Thus, x must be less than or equal to y.\n- After the loop, x will be a power of 2 that is less than or equal to y. Thus, y must be greater than or equal to x.\n- Since x is initialized to 1 and is doubled at each iteration, it will always be a power of 2 that is greater than or equal to 1."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer n; x == 2^n;\n    loop invariant (x >= y) ==> \\at((x >= 1), Pre);\n    loop invariant (x < y) ==> \\at((x == 2^n), Pre);\n    loop invariant (x >= y) ==> \\at((x == 2^n), Here);\n*/",
            "/*@\n  loop invariant (x >= 1);\n  loop invariant (y >= 1);\n  loop invariant (x <= y);\n  loop invariant ((x * 2) >= 1);\n  loop invariant (((x * 2) < y) ==> ((x * 4) <= y));\n*/",
            "/*@ \n    loop invariant (x >= 1);\n    loop invariant (x >= 1) && (x <= 2^n);\n    loop invariant (x >= y) ==> (x >= 1);\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall int i; (0 <= i < \\log2(x)) ==> (\\at(x, Loop_Entry) == 1 << i);\n    loop invariant x >= y;\n    loop invariant y >= 1;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions and variable assignments:\n- Two integer variables x and y are declared but not initialized. \n\nLoop condition:\n- The loop continues as long as x is less than y.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to 1.\n    - x is less than or equal to y.\n- After the loop termination: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to x.\n    - x is greater than or equal to 1.\n\nExplanation:\n- Before the loop, no invariants are needed as there is no loop execution yet.\n- In each iteration of the loop, x is doubled and y remains unchanged. Thus, x will always be a power of 2. \n- Since x is initialized to 1, it is less than any positive value of y. Hence, y must be greater than or equal to 1.\n- Since x is doubled at each iteration, it will eventually exceed y. Thus, x must be less than or equal to y.\n- After the loop, x will be a power of 2 that is less than or equal to y. Thus, y must be greater than or equal to x.\n- Since x is initialized to 1 and is doubled at each iteration, it will always be a power of 2 that is greater than or equal to 1."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer n; x == 2^n;\n    loop invariant (x >= y) ==> \\at((x >= 1), Pre);\n    loop invariant (x < y) ==> \\at((x == 2^n), Pre);\n    loop invariant (x >= y) ==> \\at((x == 2^n), Here);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n  loop invariant (x >= 1);\n  loop invariant (y >= 1);\n  loop invariant (x <= y);\n  loop invariant ((x * 2) >= 1);\n  loop invariant (((x * 2) < y) ==> ((x * 4) <= y));\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (x >= 1) is partially proven to be inductive.\nloop invariant (y >= 1) is preserved but not established.\nloop invariant (x <= y) is established but not preserved.\nloop invariant ((x * 2) >= 1) is partially proven to be inductive.\nloop invariant (((x * 2) < y) ==> ((x * 4) <= y)) is neither established nor preserved.\nAssertion x >= 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: (x >= 1);\n\n\nloop invariant i4: ((x * 2) >= 1);\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant (x >= 1);\n    loop invariant (x >= 1) && (x <= 2^n);\n    loop invariant (x >= y) ==> (x >= 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic variable n. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: (x >= 1);\n\nloop invariant i3: (x >= y) ==> (x >= 1);\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall int i; (0 <= i < \\log2(x)) ==> (\\at(x, Loop_Entry) == 1 << i);\n    loop invariant x >= y;\n    loop invariant y >= 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: logic label `Loop_Entry' not found. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions and variable assignments:\n- Two integer variables x and y are declared but not initialized. \n\nLoop condition:\n- The loop continues as long as x is less than y.\n\nLoop invariants:\n- Before the loop execution: None needed.\n- In every iteration of the loop: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to 1.\n    - x is less than or equal to y.\n- After the loop termination: \n    - x is a power of 2, i.e., x = 2^k for some non-negative integer k.\n    - y is greater than or equal to x.\n    - x is greater than or equal to 1.\n\nExplanation:\n- Before the loop, no invariants are needed as there is no loop execution yet.\n- In each iteration of the loop, x is doubled and y remains unchanged. Thus, x will always be a power of 2. \n- Since x is initialized to 1, it is less than any positive value of y. Hence, y must be greater than or equal to 1.\n- Since x is doubled at each iteration, it will eventually exceed y. Thus, x must be less than or equal to y.\n- After the loop, x will be a power of 2 that is less than or equal to y. Thus, y must be greater than or equal to x.\n- Since x is initialized to 1 and is doubled at each iteration, it will always be a power of 2 that is greater than or equal to 1.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: \\forall integer n; x == 2^n;\nloop invariant i3: (x >= y) ==> \\at((x >= 1), Pre);\nloop invariant i4: (x < y) ==> \\at((x == 2^n), Pre);\nloop invariant i5: (x >= y) ==> \\at((x == 2^n), Here);\nloop invariant i6: (x >= 1);\nloop invariant i7: (y >= 1);\nloop invariant i8: (x <= y);\nloop invariant i9: ((x * 2) >= 1);\nloop invariant i10: (((x * 2) < y) ==> ((x * 4) <= y));\nloop invariant i11: (x >= 1) && (x <= 2^n);\nloop invariant i12: (x >= y) ==> (x >= 1);\nloop invariant i13: \\forall int i; (0 <= i < \\log2(x)) ==> (\\at(x, Loop_Entry) == 1 << i);\nloop invariant i14: x >= y;\nloop invariant i15: y >= 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 10,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n\n\n\nloop invariant i6: (x >= 1);\n\n\nloop invariant i9: ((x * 2) >= 1);\n\n\nloop invariant i12: (x >= y) ==> (x >= 1);\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c",
            "../data/benchmarks/code2inv/128.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c",
            "../data/benchmarks/code2inv/127.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 111,
        "success_count": 71,
        "failure_count": 40,
        "success_rate": 0.6396396396396397
    }
}