{
    "logs": {
        "file": "../data/benchmarks/code2inv/129.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  while ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is initialized to 1\n- y, z1, z2 and z3 are uninitialized and have garbage values\n\nLoop condition:\n- x < y\n\nLoop Invariants:\n- Before the loop execution:\n    - x >= 1\n- In every iteration of the loop:\n    - x >= 1\n    - x is a power of 2 (i.e., x = 2^n for some non-negative integer n)\n    - y > x\n- After the loop termination:\n    - x >= 1\n    - y <= x\n\nExplanation:\n- Before the loop execution:\n    - x is initialized to 1, so x >= 1\n- In every iteration of the loop:\n    - Since the loop body doubles the value of x, x is always a power of 2\n    - x >= 1 because it is true before the loop execution\n    - y > x because of the loop condition x < y\n- After the loop termination:\n    - The loop terminates when x >= y\n    - Since x is a power of 2 and y is greater than x, the smallest value of y that satisfies y > x is y = 2x.\n    - Therefore, x >= 1 and y <= 2x <= 2^n * 2 = 2^(n+1) where n is the largest integer such that 2^n <= x.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is assigned the value 1\n\nLoop condition:\n- (x < y)\n\nLoop Invariants:\n- Before loop execution: None\n- In every iteration of the loop:\n    - x >= 1\n    - If y is non-deterministic at the beginning of the loop, then (x < y) ==> (y >= 1)\n    - If z1, z2, and z3 are non-deterministic at the beginning of the loop, then we can add the following:\n        - z1 >= 1\n        - z2 >= 1\n        - z3 >= 1\n    - If we know that z1 <= z2 <= z3 at the beginning of the loop, then we can add the following:\n        - z1 >= 1\n        - z3 >= 1\n    - If we know that z1 >= z2 >= z3 at the beginning of the loop, then we can add the following:\n        - z1 >= 1\n        - z2 >= 1\n    - Inside the loop, we know that x is multiplied by 2 in each iteration, so we can add:\n        - x >= 1\n        - x <= 2^n, where n is the number of loop iterations\n    - If y is non-deterministic inside the loop, then (x < y) ==> (y >= 2^n)\n- After loop termination:\n    - (x >= 1)\n    - (x >= y), since the loop condition (x < y) is false\n\nPutting all the loop invariants together:\n```\n/*\n    loop invariant x >= 1;\n    loop invariant (x < y) ==> (y >= 1);\n    loop invariant (z1 >= 1) && (z2 >= 1) && (z3 >= 1);\n    loop invariant (z1 >= 1) && (z3 >= 1) ==> (z1 <= z2 <= z3);\n    loop invariant (z1 >= 1) && (z2 >= 1) ==> (z1 >= z2 >= z3);\n    loop invariant x >= 1 && x <= 2^n;\n    loop invariant (x < y) ==> (y >= 2^n);\n    loop invariant (x >= 1);\n    loop invariant (x >= y);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- x is assigned the value 1\n\nLoop condition:\n- The loop continues as long as x is less than y\n\nLoop invariants:\n- Before the loop: None\n- In every iteration: \n    - x is always a power of 2\n    - y is always greater than or equal to 1\n- After the loop:\n    - If x is less than y, then x is the smallest power of 2 that is greater than or equal to y\n    - If x is greater than or equal to y, then y is a power of 2 and x is less than or equal to y\n\nCombining all the loop invariants:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant (\\forall integer i; 0 <= i < \\log2(x) ==> (x & (1<<i)));\n    loop invariant y > x ==> (\\exists integer j; y == (1<<j) && x <= y);\n    loop invariant y <= x ==> (y & (y-1)) == 0 && x <= y;\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- x is assigned the value 1.\n- y, z1, z2, and z3 are uninitialized and may contain garbage values.\n\nLoop Condition:\n- The loop executes as long as the value of x is less than y.\n\nLoop Invariants:\n- Since y is uninitialized, we cannot bound its values. Therefore, we cannot use any relation between x and y as a loop invariant.\n- Since the loop body only updates the value of x, we can use x as a loop invariant. Specifically:\n    - Before the loop execution, x is at least 1. Therefore, x >= 1 is a loop invariant.\n    - In every iteration of the loop, x is doubled. Therefore, x >= 1 * 2^i, where i is the number of iterations. This can be written as x >= 2^i.\n    - After the loop termination, x is at least y. Therefore, x >= y is a loop invariant.\n- Since z1, z2, and z3 are uninitialized, we cannot use them as loop invariants.\n\nPost-condition:\n- The assertion states that x is at least 1 after the loop execution. Therefore, we can use the loop invariant x >= 1 to prove the assertion. Specifically, we can use the implication x >= 1 ==> x >= 1, which is always true, to prove the assertion. Therefore, we do not need any additional loop invariants to prove the post-condition.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer i; 0 <= i < \\at(__loop_bound, LoopCurrent) ==> x >= 2^i;\n    loop invariant x >= y;\n*/\n```",
            "Pre-conditions:\n- All variables (x, y, z1, z2, z3) contain garbage values. \n\nLoop condition:\n- (x < y)\n\nLoop invariants:\n- Before the loop execution:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y > 1;\n*/\n```\nExplanation: \n- x is assigned the value 1 before the loop, so x is always greater than or equal to 1.\n- y contains a garbage value, but since the loop condition is (x < y), y must be greater than 1 for the loop to execute at least once. \n\n- In every iteration of the loop:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y > 1;\n    loop invariant \\forall integer k; 1 <= k < x ==> k <= x;\n    loop invariant x < y ==> (x + x) < y;\n*/\n```\nExplanation:\n- The first two loop invariants are the same as before.\n- The third loop invariant states that for all integers k between 1 and (x-1) inclusive, k is less than or equal to x. This is true because x is being doubled in each iteration of the loop, so all previous values of x must be less than or equal to the current value of x.\n- The fourth loop invariant states that if x is less than y, then (x + x) is also less than y. This is true because x is being doubled in each iteration of the loop, so (x + x) is the next value of x. \n\n- After the loop termination:\n```\n/*@ \n    loop invariant x >= 1;\n    loop invariant y > 1;\n    loop invariant \\forall integer k; 1 <= k < x ==> k <= x;\n    loop invariant x >= y ==> x >= 1;\n*/\n```\nExplanation:\n- The first three loop invariants are the same as before.\n- The fourth loop invariant states that if x is greater than or equal to y at the end of the loop, then x must be greater than or equal to 1. This is true because x is always greater than or equal to 1 before and during the loop, so if x is still greater than or equal to y at the end of the loop, then x must still be greater than or equal to 1. \n\n- Assertion (x >= 1):\n```\n//@ assert (x >= 1) ==> (x >= 1);\n```\nExplanation:\n- The assertion is not guarded by a condition, so we can simply use an implication to make the invariant trivially true."
        ],
        "annotation_blocks": [
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is initialized to 1\n- y, z1, z2 and z3 are uninitialized and have garbage values\n\nLoop condition:\n- x < y\n\nLoop Invariants:\n- Before the loop execution:\n    - x >= 1\n- In every iteration of the loop:\n    - x >= 1\n    - x is a power of 2 (i.e., x = 2^n for some non-negative integer n)\n    - y > x\n- After the loop termination:\n    - x >= 1\n    - y <= x\n\nExplanation:\n- Before the loop execution:\n    - x is initialized to 1, so x >= 1\n- In every iteration of the loop:\n    - Since the loop body doubles the value of x, x is always a power of 2\n    - x >= 1 because it is true before the loop execution\n    - y > x because of the loop condition x < y\n- After the loop termination:\n    - The loop terminates when x >= y\n    - Since x is a power of 2 and y is greater than x, the smallest value of y that satisfies y > x is y = 2x.\n    - Therefore, x >= 1 and y <= 2x <= 2^n * 2 = 2^(n+1) where n is the largest integer such that 2^n <= x."
            ],
            "/*\n    loop invariant x >= 1;\n    loop invariant (x < y) ==> (y >= 1);\n    loop invariant (z1 >= 1) && (z2 >= 1) && (z3 >= 1);\n    loop invariant (z1 >= 1) && (z3 >= 1) ==> (z1 <= z2 <= z3);\n    loop invariant (z1 >= 1) && (z2 >= 1) ==> (z1 >= z2 >= z3);\n    loop invariant x >= 1 && x <= 2^n;\n    loop invariant (x < y) ==> (y >= 2^n);\n    loop invariant (x >= 1);\n    loop invariant (x >= y);\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant (\\forall integer i; 0 <= i < \\log2(x) ==> (x & (1<<i)));\n    loop invariant y > x ==> (\\exists integer j; y == (1<<j) && x <= y);\n    loop invariant y <= x ==> (y & (y-1)) == 0 && x <= y;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer i; 0 <= i < \\at(__loop_bound, LoopCurrent) ==> x >= 2^i;\n    loop invariant x >= y;\n*/",
            "/*@ \n    loop invariant x >= 1;\n    loop invariant y > 1;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- x is initialized to 1\n- y, z1, z2 and z3 are uninitialized and have garbage values\n\nLoop condition:\n- x < y\n\nLoop Invariants:\n- Before the loop execution:\n    - x >= 1\n- In every iteration of the loop:\n    - x >= 1\n    - x is a power of 2 (i.e., x = 2^n for some non-negative integer n)\n    - y > x\n- After the loop termination:\n    - x >= 1\n    - y <= x\n\nExplanation:\n- Before the loop execution:\n    - x is initialized to 1, so x >= 1\n- In every iteration of the loop:\n    - Since the loop body doubles the value of x, x is always a power of 2\n    - x >= 1 because it is true before the loop execution\n    - y > x because of the loop condition x < y\n- After the loop termination:\n    - The loop terminates when x >= y\n    - Since x is a power of 2 and y is greater than x, the smallest value of y that satisfies y > x is y = 2x.\n    - Therefore, x >= 1 and y <= 2x <= 2^n * 2 = 2^(n+1) where n is the largest integer such that 2^n <= x.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*\n    loop invariant x >= 1;\n    loop invariant (x < y) ==> (y >= 1);\n    loop invariant (z1 >= 1) && (z2 >= 1) && (z3 >= 1);\n    loop invariant (z1 >= 1) && (z3 >= 1) ==> (z1 <= z2 <= z3);\n    loop invariant (z1 >= 1) && (z2 >= 1) ==> (z1 >= z2 >= z3);\n    loop invariant x >= 1 && x <= 2^n;\n    loop invariant (x < y) ==> (y >= 2^n);\n    loop invariant (x >= 1);\n    loop invariant (x >= y);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unbound logic variable n. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: (x < y) ==> (y >= 1);\n\n\n\n\n\nloop invariant i8: (x >= 1);\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y >= 1;\n    loop invariant (\\forall integer i; 0 <= i < \\log2(x) ==> (x & (1<<i)));\n    loop invariant y > x ==> (\\exists integer j; y == (1<<j) && x <= y);\n    loop invariant y <= x ==> (y & (y-1)) == 0 && x <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 16: unbound logic function \\log2. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant \\forall integer i; 0 <= i < \\at(__loop_bound, LoopCurrent) ==> x >= 2^i;\n    loop invariant x >= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: invalid operands to binary ^; unexpected 𝔹 and ℤ. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 1;\n    loop invariant y > 1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 1 is partially proven to be inductive.\nloop invariant y > 1 is preserved but not established.\nAssertion x >= 1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 19: unbound logic variable n. Ignoring loop annotation",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: (x < y) ==> (y >= 1);\nloop invariant i3: (z1 >= 1) && (z2 >= 1) && (z3 >= 1);\nloop invariant i4: (z1 >= 1) && (z3 >= 1) ==> (z1 <= z2 <= z3);\nloop invariant i5: (z1 >= 1) && (z2 >= 1) ==> (z1 >= z2 >= z3);\nloop invariant i6: x >= 1 && x <= 2^n;\nloop invariant i7: (x < y) ==> (y >= 2^n);\nloop invariant i8: (x >= 1);\nloop invariant i9: (x >= y);\nloop invariant i10: y >= 1;\nloop invariant i11: (\\forall integer i; 0 <= i < \\log2(x) ==> (x & (1<<i)));\nloop invariant i12: y > x ==> (\\exists integer j; y == (1<<j) && x <= y);\nloop invariant i13: y <= x ==> (y & (y-1)) == 0 && x <= y;\nloop invariant i14: \\forall integer i; 0 <= i < \\at(__loop_bound, LoopCurrent) ==> x >= 2^i;\nloop invariant i15: x >= y;\nloop invariant i16: y > 1;\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (x = 1);\n  \n  /*@\nloop invariant i1: x >= 1;\nloop invariant i2: (x < y) ==> (y >= 1);\n\n\n\n\n\nloop invariant i8: (x >= 1);\n\n\n\n\n\n\n\n\n*/\nwhile ((x < y)) {\n    {\n    (x  = (x + x));\n    }\n\n  }\n  \n{;\n//@ assert( (x >= 1) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c",
            "../data/benchmarks/code2inv/128.c",
            "../data/benchmarks/code2inv/129.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c",
            "../data/benchmarks/code2inv/127.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 112,
        "success_count": 72,
        "failure_count": 40,
        "success_rate": 0.6428571428571429
    }
}