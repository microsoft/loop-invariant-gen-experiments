{
    "logs": {
        "file": "../data/benchmarks/code2inv/132.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    while( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    while( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The function `unknown` returns a non-negative integer value.\n\nVariable assignments:\n- `i` is initialized to 0.\n\nLoop condition:\n- The loop executes as long as the function `unknown` returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution: `i >= 0`\n- In every iteration of the loop: \n    - `c <= 48 ==> i >= 0` (If `c` is less than or equal to 48, then `i` is non-negative.)\n    - `!(c > 48 && c < 57) ==> i >= 0` (If `c` is not between 48 and 57, then `i` is non-negative.)\n    - `c > 48 && c < 57 ==> (i + i) >= 0` (If `c` is between 48 and 57, then `i + i` is non-negative.)\n    - `c > 48 && c < 57 ==> (c - 48) >= 0` (If `c` is between 48 and 57, then `c - 48` is non-negative.)\n    - `(c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0` (If `c` is between 48 and 57, then `i` is non-negative after the update.)\n- After the loop termination: `i >= 0 ==> i >= 0` (Trivially true.)\n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> i >= 0;\n    loop invariant !(c > 48 && c < 57) ==> i >= 0;\n    loop invariant c > 48 && c < 57 ==> (i + i) >= 0;\n    loop invariant c > 48 && c < 57 ==> (c - 48) >= 0;\n    loop invariant (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0;\n    loop invariant i >= 0 ==> i >= 0;\n*/\n```\n\nNote: We added the implication `i >= 0 ==> i >= 0` as a trivial invariant after the loop termination.",
            "Pre-conditions:\n- The program has no pre-conditions.\n- The variable `i` is initialized to 0.\n\nLoop condition:\n- The loop continues as long as the function `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `i >= 0` (This is the post-condition and must be verified after the loop termination.)\n- `c <= 48 ==> (i >= 0)`\n- `c >= 57 ==> (i >= 0)`\n- `c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48)`\n- `j >= 0 && j <= i`\n- `t >= 0 && t <= 9`\n- `c >= 0 && c <= 127`\n\nExplanation:\n- The first invariant simply states the post-condition of the program, that is `i` should be greater than or equal to 0 after the loop terminates.\n- The second and third invariants bound the value of `i` based on the value of `c` inside the loop. If `c` is less than or equal to 48 or greater than or equal to 57, then `i` should be greater than or equal to 0.\n- The fourth invariant is a conjunction of three parts. The first part `c <= 48 || c >= 57` is true if `c` is less than or equal to 48 or greater than or equal to 57. The second part `c > 48 && c < 57` is true if `c` is strictly between 48 and 57. The third part `(c > 48 && c < 57 && i == 2*j + c - 48)` is true if `c` is strictly between 48 and 57, and `i` is equal to `2*j + c - 48`. This invariant captures the behavior of the if statement inside the loop.\n- The fifth and sixth invariants bound the values of `j`, `t`, and `c` inside the loop. `j` should be greater than or equal to 0 and less than or equal to `i`. `t` should be greater than or equal to 0 and less than or equal to 9. `c` should be greater than or equal to 0 and less than or equal to 127.\n- Note that we do not need to add any invariants for the variables `i` and `c` outside the loop since they are not modified in the loop and their values are not used in the post-condition. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> (i >= 0);\n    loop invariant c >= 57 ==> (i >= 0);\n    loop invariant c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48);\n    loop invariant j >= 0 && j <= i;\n    loop invariant t >= 0 && t <= 9;\n    loop invariant c >= 0 && c <= 127;\n*/\n```",
            "Pre-conditions:\n- The variable `c` is initialized to some value.\n- The variable `i` is initialized to 0.\n\nLoop condition:\n- The loop executes while the function `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `i >= 0`\n- `c <= 57 ==> c >= 48 ==> i >= 2*(i - j) + c - 96`\n- `!(c <= 57) || c >= 48`\n- `!(c >= 48) || c <= 57`\n\nExplanation:\n- The first invariant is the post-condition of the program, which needs to be verified.\n- The second invariant is derived from the inner if condition. If the condition is true, then `c` is between 48 and 57. In that case, `t` takes a value between 0 and 9, and `j` takes a value between 0 and `i`. Therefore, `2*(i-j)` is always less than or equal to `i`. Adding `t` to `2*(i-j)` and assigning it to `i` gives us the invariant.\n- The third and fourth invariants are derived from the implication that `c` is either greater than 57 or less than 48 if it is not between them. These invariants ensure that `c` is always between 48 and 57.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned 0 at the beginning of the program.\n\nLoop Condition:\n- The loop executes while the return value of `unknown()` is non-zero. Since we don't know the behavior of this function, we cannot determine the loop condition. \n\nLoop Invariants:\n- Since we don't know the loop condition, we cannot determine loop invariants that hold in every iteration of the loop. \n\nPost-condition:\n- The assertion `i >= 0` holds after the loop terminates. \n\nOverall, we cannot determine any useful loop invariants for this program without knowing the behavior of the `unknown()` function.",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume(e)` which takes a boolean expression `e` and returns 0 if `e` is false.\n- The program declares an external function `unknown` which returns an integer. The value of `unknown()` is non-deterministic.\n- The program declares variables `i`, `j`, `c`, and `t` and initializes `i` to 0.\n\nLoop condition:\n- The loop executes while the value of `unknown()` is true.\n\nLoop invariants:\n- Before the loop execution, `i` is non-negative.\n```\n/*@ \n    loop invariant i >= 0;\n*/\n```\n- In every iteration of the loop, `i` is non-negative.\n```\n/*@ \n    loop invariant i >= 0;\n*/\n```\n- In every iteration of the loop, `c` is less than or equal to 57 and greater than or equal to 0.\n```\n/*@ \n    loop invariant 0 <= c <= 57;\n*/\n```\n- In every iteration of the loop, if `c` is greater than 48, then `j` is equal to twice the value of `i`, and `i` is equal to `j` plus the difference between `c` and 48.\n```\n/*@ \n    loop invariant (c <= 48) ==> (j == i && i >= 0) ||\n                   (c > 48 && c <= 57) ==> (i == 2 * j + (c - 48) && i >= 0);\n*/\n```\n- After the loop termination, `i` is non-negative.\n```\n/*@ \n    loop invariant i >= 0;\n    loop variant 0;\n*/\n{;\n//@ assert(i >= 0);\n}\n\nNote that the loop variant is specified as 0 to ensure that the loop terminates."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> i >= 0;\n    loop invariant !(c > 48 && c < 57) ==> i >= 0;\n    loop invariant c > 48 && c < 57 ==> (i + i) >= 0;\n    loop invariant c > 48 && c < 57 ==> (c - 48) >= 0;\n    loop invariant (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0;\n    loop invariant i >= 0 ==> i >= 0;\n*/",
            "/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> (i >= 0);\n    loop invariant c >= 57 ==> (i >= 0);\n    loop invariant c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48);\n    loop invariant j >= 0 && j <= i;\n    loop invariant t >= 0 && t <= 9;\n    loop invariant c >= 0 && c <= 127;\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- The variable `c` is initialized to some value.\n- The variable `i` is initialized to 0.\n\nLoop condition:\n- The loop executes while the function `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `i >= 0`\n- `c <= 57 ==> c >= 48 ==> i >= 2*(i - j) + c - 96`\n- `!(c <= 57) || c >= 48`\n- `!(c >= 48) || c <= 57`\n\nExplanation:\n- The first invariant is the post-condition of the program, which needs to be verified.\n- The second invariant is derived from the inner if condition. If the condition is true, then `c` is between 48 and 57. In that case, `t` takes a value between 0 and 9, and `j` takes a value between 0 and `i`. Therefore, `2*(i-j)` is always less than or equal to `i`. Adding `t` to `2*(i-j)` and assigning it to `i` gives us the invariant.\n- The third and fourth invariants are derived from the implication that `c` is either greater than 57 or less than 48 if it is not between them. These invariants ensure that `c` is always between 48 and 57."
            ],
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned 0 at the beginning of the program.\n\nLoop Condition:\n- The loop executes while the return value of `unknown()` is non-zero. Since we don't know the behavior of this function, we cannot determine the loop condition. \n\nLoop Invariants:\n- Since we don't know the loop condition, we cannot determine loop invariants that hold in every iteration of the loop. \n\nPost-condition:\n- The assertion `i >= 0` holds after the loop terminates. \n\nOverall, we cannot determine any useful loop invariants for this program without knowing the behavior of the `unknown()` function."
            ],
            "/*@ \n    loop invariant i >= 0;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> i >= 0;\n    loop invariant !(c > 48 && c < 57) ==> i >= 0;\n    loop invariant c > 48 && c < 57 ==> (i + i) >= 0;\n    loop invariant c > 48 && c < 57 ==> (c - 48) >= 0;\n    loop invariant (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0;\n    loop invariant i >= 0 ==> i >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nloop invariant c <= 48 ==> i >= 0 is inductive.\nloop invariant !(c > 48 && c < 57) ==> i >= 0 is inductive.\nloop invariant c > 48 && c < 57 ==> (i + i) >= 0 is inductive.\nloop invariant c > 48 && c < 57 ==> (c - 48) >= 0 is inductive.\nloop invariant (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0 is inductive.\nloop invariant i >= 0 ==> i >= 0 is inductive.\nAssertion i >= 0: Valid"
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant i >= 0;\n    loop invariant c <= 48 ==> (i >= 0);\n    loop invariant c >= 57 ==> (i >= 0);\n    loop invariant c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48);\n    loop invariant j >= 0 && j <= i;\n    loop invariant t >= 0 && t <= 9;\n    loop invariant c >= 0 && c <= 127;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant c <= 48 ==> (i >= 0) is partially proven to be inductive.\nloop invariant c >= 57 ==> (i >= 0) is partially proven to be inductive.\nloop invariant c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48) is neither established nor preserved.\nloop invariant j >= 0 && j <= i is preserved but not established.\nloop invariant t >= 0 && t <= 9 is preserved but not established.\nloop invariant c >= 0 && c <= 127 is preserved but not established.\nAssertion i >= 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c <= 48 ==> (i >= 0);\nloop invariant i3: c >= 57 ==> (i >= 0);\n\n\n\n\n*/\nwhile( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- The variable `c` is initialized to some value.\n- The variable `i` is initialized to 0.\n\nLoop condition:\n- The loop executes while the function `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `i >= 0`\n- `c <= 57 ==> c >= 48 ==> i >= 2*(i - j) + c - 96`\n- `!(c <= 57) || c >= 48`\n- `!(c >= 48) || c <= 57`\n\nExplanation:\n- The first invariant is the post-condition of the program, which needs to be verified.\n- The second invariant is derived from the inner if condition. If the condition is true, then `c` is between 48 and 57. In that case, `t` takes a value between 0 and 9, and `j` takes a value between 0 and `i`. Therefore, `2*(i-j)` is always less than or equal to `i`. Adding `t` to `2*(i-j)` and assigning it to `i` gives us the invariant.\n- The third and fourth invariants are derived from the implication that `c` is either greater than 57 or less than 48 if it is not between them. These invariants ensure that `c` is always between 48 and 57.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- `i` is assigned 0 at the beginning of the program.\n\nLoop Condition:\n- The loop executes while the return value of `unknown()` is non-zero. Since we don't know the behavior of this function, we cannot determine the loop condition. \n\nLoop Invariants:\n- Since we don't know the loop condition, we cannot determine loop invariants that hold in every iteration of the loop. \n\nPost-condition:\n- The assertion `i >= 0` holds after the loop terminates. \n\nOverall, we cannot determine any useful loop invariants for this program without knowing the behavior of the `unknown()` function.",
                "error": "Output does not contain at least 1 code block"
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant i >= 0;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant i >= 0 is inductive.\nAssertion i >= 0: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant i >= 0 is partially proven to be inductive.\nloop invariant c <= 48 ==> i >= 0 is partially proven to be inductive.\nloop invariant !(c > 48 && c < 57) ==> i >= 0 is partially proven to be inductive.\nloop invariant c > 48 && c < 57 ==> (i + i) >= 0 is partially proven to be inductive.\nloop invariant c > 48 && c < 57 ==> (c - 48) >= 0 is partially proven to be inductive.\nloop invariant (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant i >= 0 ==> i >= 0 is partially proven to be inductive.\nloop invariant c <= 48 ==> (i >= 0) is partially proven to be inductive.\nloop invariant c >= 57 ==> (i >= 0) is partially proven to be inductive.\nloop invariant c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48) is neither established nor preserved.\nloop invariant j >= 0 && j <= i is preserved but not established.\nloop invariant t >= 0 && t <= 9 is preserved but not established.\nloop invariant c >= 0 && c <= 127 is preserved but not established.\nAssertion i >= 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c <= 48 ==> i >= 0;\nloop invariant i3: !(c > 48 && c < 57) ==> i >= 0;\nloop invariant i4: c > 48 && c < 57 ==> (i + i) >= 0;\nloop invariant i5: c > 48 && c < 57 ==> (c - 48) >= 0;\nloop invariant i6: (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0;\nloop invariant i7: i >= 0 ==> i >= 0;\nloop invariant i8: c <= 48 ==> (i >= 0);\nloop invariant i9: c >= 57 ==> (i >= 0);\nloop invariant i10: c <= 48 || c >= 57 || (c > 48 && c < 57 && i == 2*j + c - 48);\nloop invariant i11: j >= 0 && j <= i;\nloop invariant i12: t >= 0 && t <= 9;\nloop invariant i13: c >= 0 && c <= 127;\n*/\nwhile( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n    int i = 0;\n    int j, c, t;\n\n    /*@\nloop invariant i1: i >= 0;\nloop invariant i2: c <= 48 ==> i >= 0;\nloop invariant i3: !(c > 48 && c < 57) ==> i >= 0;\nloop invariant i4: c > 48 && c < 57 ==> (i + i) >= 0;\nloop invariant i5: c > 48 && c < 57 ==> (c - 48) >= 0;\nloop invariant i6: (c > 48 && c < 57) && (i + i) >= 0 && (c - 48) >= 0 ==> i >= 0;\nloop invariant i7: i >= 0 ==> i >= 0;\nloop invariant i8: c <= 48 ==> (i >= 0);\nloop invariant i9: c >= 57 ==> (i >= 0);\n\n\n\n\n*/\nwhile( unknown() ) {\n        if(c > 48) {\n            if (c < 57) {\n                j = i + i;\n                t = c - 48;\n                i = j + t;\n            }\n        }\n    } \n    {;\n//@ assert(i >= 0);\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c",
            "../data/benchmarks/code2inv/128.c",
            "../data/benchmarks/code2inv/129.c",
            "../data/benchmarks/code2inv/132.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c",
            "../data/benchmarks/code2inv/127.c",
            "../data/benchmarks/code2inv/130.c",
            "../data/benchmarks/code2inv/131.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 115,
        "success_count": 73,
        "failure_count": 42,
        "success_rate": 0.6347826086956522
    }
}