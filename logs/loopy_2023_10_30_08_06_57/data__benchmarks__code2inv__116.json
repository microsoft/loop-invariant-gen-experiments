{
    "logs": {
        "file": "../data/benchmarks/code2inv/116.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  while (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions/Variable assignments:\n- The macro `assume(e)` takes a boolean expression `e` and returns 0 if `e` evaluates to false.\n- The function `unknown()` returns a non-deterministic value.\n- The integer variables `sn`, `v1`, `v2`, `v3`, and `x` are declared.\n- `sn` and `x` are initialized to 0.\n\nLoop Condition:\n- The loop continues as long as `unknown()` returns a non-zero value.\n\nLoop Invariants:\n- Before the loop: None\n- In every iteration:\n    - `sn >= 0`\n    - `x >= 0`\n    - `x >= sn`\n- After the loop:\n    - If `sn == x`, then `(sn == x) ==> (sn == -1)`\n    - If `sn != x`, then `sn == -1`\n\nExplanation:\n- Before the loop, there are no loop invariants to specify.\n- In every iteration of the loop, `sn` and `x` are incremented by 1. Therefore, `sn` and `x` must be non-negative.\n- Also, since `x` is incremented by 1 in every iteration, `x` must be greater than or equal to `sn`.\n- After the loop, the post-condition is that if `sn` is not equal to `x`, then `sn` must be equal to -1.\n- If `sn` is equal to `x`, then we need to show that `sn` is also equal to -1. This is done by the implication `(sn == x) ==> (sn == -1)`.\n- If `sn` is not equal to `x`, then we simply need to show that `sn` is equal to -1. This is done by the assertion `sn == -1`.\n\nPutting everything together, the loop invariants are:\n\n```\n/*@\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x >= sn;\n*/\n\n/*@\n    loop invariant (sn == x) ==> (sn == -1);\n    loop invariant (sn != x) ==> (sn == -1);\n*/\n```",
            "Pre-conditions:\n- The macro `assume(e)` implies that the program assumes that expression `e` is true.\n- The function `unknown()` returns a non-deterministic Boolean value.\n\nVariable Assignments:\n- The variables `sn`, `v1`, `v2`, `v3`, and `x` are declared as integers and have garbage values.\n\nLoop Condition:\n- The loop will execute as long as the function `unknown()` returns true.\n\nLoop Invariants:\n- `x >= 0`: `x` is always greater than or equal to zero.\n- `sn >= 0`: `sn` is always greater than or equal to zero.\n- `sn >= x`: `sn` is always greater than or equal to `x`.\n- `x' == x + 1 ==> sn' == sn + 1`: If `x` increases by one, then `sn` also increases by one.\n- `sn != x ==> sn == -1`: If `sn` is not equal to `x`, then `sn` must be equal to `-1`.\n\nPutting all the loop invariants together, we get:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn >= x;\n    loop invariant x' == x + 1 ==> sn' == sn + 1;\n    loop invariant sn != x ==> sn == -1;\n*/\n``` \nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, and they imply the post-condition.",
            "We start by analyzing the program and identifying the pre-conditions or variable assignments. In this program, the variables `sn`, `v1`, `v2`, `v3`, and `x` are declared and initialized to garbage values. \n\n```\nint sn;\nint v1;\nint v2;\nint v3;\nint x;\n\n(sn = 0);\n(x = 0);\n```\n\nNext, we analyze the loop body and make a note of the loop condition. The loop condition in this program is `unknown()`. Since `unknown()` is an external function with no definition, we cannot make any assumptions about its behavior.\n\nMoving on, we need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution, we can state the following loop invariants:\n```\n/*@ \n  loop invariant \\true; \n*/\n```\nThis invariant is trivially true.\n\nNext, we consider the loop body. The loop body performs two assignments:\n```\n(x = x + 1);\n(sn = sn + 1);\n```\nFrom these assignments, we can see that `x` and `sn` are incremented by 1 in every iteration of the loop. Therefore, we can state the following loop invariants:\n```\n/*@ \n  loop invariant x >= 0; \n  loop invariant sn >= 0;\n  loop invariant sn >= x;\n*/\n```\nThe first two invariants are bounds on the variables `x` and `sn` respectively. The third invariant is a relation between the two variables, stating that `sn` is always greater than or equal to `x`.\n\nFinally, we need to find loop invariants that are true after the loop termination. The program contains an assertion that checks if `sn` is not equal to `x`. If this condition is true, the program verifies that `sn` is equal to `-1`. Therefore, we can state the following loop invariants:\n```\n/*@ \n  loop invariant sn == x ==> sn == \\old(sn);\n  loop invariant sn != x ==> sn == -1;\n*/\n```\nThe first invariant states that if `sn` is equal to `x` at the end of the loop, then its value must be equal to its value at the beginning of the loop (`\\old(sn)`). The second invariant states that if `sn` is not equal to `x`, then its value must be `-1`.\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n  loop invariant \\true;\n  loop invariant x >= 0; \n  loop invariant sn >= 0;\n  loop invariant sn >= x;\n  loop invariant sn == x ==> sn == \\old(sn);\n  loop invariant sn != x ==> sn == -1;\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn` is assigned `0`\n- `x` is assigned `0`\n\nLoop condition:\n- `unknown()` returns a non-deterministic Boolean value\n\nLoop invariants:\n```\n/*@ \nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn >= x ==> x == -1;\nloop invariant (sn < x && sn >= 0) ==> sn == -1;\nloop invariant (sn >= x && x >= 0) ==> sn == x;\n*/\n```\nExplanation:\n- The first two loop invariants ensure that `sn` and `x` are non-negative.\n- The third loop invariant ensures that if `sn` is greater than or equal to `x`, then `x` must be equal to `-1`. This is because `x` is incremented once in each iteration, whereas `sn` is incremented only if the loop condition is true. Therefore, if the loop terminates, it must be the case that `sn` is less than `x`, and so `x` must have been incremented one more time after the last time `sn` was incremented, making it `-1`.\n- The fourth loop invariant ensures that if `sn` is less than `x` and `sn` is non-negative, then `sn` must be equal to `-1`. This is because `sn` is incremented only if the loop condition is true, and so if the loop terminates, it must be the case that `sn` is less than `x`, and so `sn` must have been incremented one less time than `x`, making it `-1`.\n- The fifth loop invariant ensures that if `sn` is greater than or equal to `x` and `x` is non-negative, then `sn` must be equal to `x`. This is because `x` is incremented once in each iteration, whereas `sn` is incremented only if the loop condition is true. Therefore, if the loop terminates, it must be the case that `sn` is greater than or equal to `x`, and so `sn` must have been incremented the same number of times as `x`.",
            "Pre-conditions:\n- The program does not have any pre-conditions.\n\nVariable Assignments:\n- `sn` is assigned the value `0`.\n- `x` is assigned the value `0`.\n\nLoop Body:\n- `x` is incremented by `1`.\n- `sn` is incremented by `1`.\n\nLoop Condition:\n- `unknown()` returns a non-deterministic boolean value.\n\nPost-condition:\n- If `sn` is not equal to `x`, then the assertion `(sn == -1)` holds.\n\nLoop Invariants:\n- Before the loop execution, the value of `sn` is `0`, the value of `x` is `0`, and all other variables have garbage values.\n- In every iteration of the loop, `x` is greater than or equal to `0`, `sn` is greater than or equal to `0`, and all other variables have their values unchanged from the previous iteration.\n- After the loop termination, the value of `sn` is greater than or equal to `0`, the value of `x` is greater than or equal to `0`, and all other variables have their values unchanged from the previous iteration.\n- The conjunction of the loop invariants implies the post-condition.\n- Since `unknown()` is non-deterministic, we cannot make any assumptions about the values of `x` and `sn` before the loop execution. Thus, we can add an implication to make the first invariant trivially true:\n```\n/*@ \n    loop invariant \\true;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn != x ==> (sn == -1);\n*/\n```\nNote that we can use `\\true` to indicate that the first invariant holds trivially.\n\n- Since both `x` and `sn` are incremented by `1` in every iteration, we can add the following relation between them:\n```\n/*@ \n    loop invariant \\true;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn <= x;\n    loop invariant sn != x ==> (sn == -1);\n*/\n```\nThe third invariant `sn <= x` holds since `sn` is incremented by `1` in every iteration, and `x` is incremented by `1` in the same iteration. Thus, `sn` can never be greater than `x`.\n\n- The conjunction of the loop invariants implies the post-condition, since if `sn` is not equal to `x`, then `sn` must be less than `x`, which is covered by the third invariant. If `sn` is equal to `x`, then the post-condition is trivially true.\n\n- Finally, since the loop condition is non-deterministic, we cannot make any assumptions about the values of `x` and `sn` after the loop termination. Thus, we can add an implication to make the last invariant trivially true:\n```\n/*@ \n    loop invariant \\true;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn <= x;\n    loop invariant sn != x ==> (sn == -1);\n    loop invariant \\forall int i; i >= 0 && i < LIMIT ==> (sn != x);\n*/\n```\nHere, we added an implication that for all values of `i` between `0` and some arbitrary limit `LIMIT`, `sn` is not equal to `x`. This makes the last invariant trivially true, since we cannot make any assumptions about the values of `x` and `sn` after the loop termination. We can choose `LIMIT` to be any value greater than the expected number of loop iterations, since `sn` and `x` can never be equal during the loop execution."
        ],
        "annotation_blocks": [
            "/*@\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x >= sn;\n*/\n\n/*@\n    loop invariant (sn == x) ==> (sn == -1);\n    loop invariant (sn != x) ==> (sn == -1);\n*/",
            "/*@ \n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn >= x;\n    loop invariant x' == x + 1 ==> sn' == sn + 1;\n    loop invariant sn != x ==> sn == -1;\n*/",
            "/*@ \n  loop invariant \\true; \n*/",
            "/*@ \nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn >= x ==> x == -1;\nloop invariant (sn < x && sn >= 0) ==> sn == -1;\nloop invariant (sn >= x && x >= 0) ==> sn == x;\n*/",
            "/*@ \n    loop invariant \\true;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn != x ==> (sn == -1);\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 2,
                "annotations": "/*@\n    loop invariant sn >= 0;\n    loop invariant x >= 0;\n    loop invariant x >= sn;\n*/\n\n/*@\n    loop invariant (sn == x) ==> (sn == -1);\n    loop invariant (sn != x) ==> (sn == -1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant sn >= 0 is partially proven to be inductive.\nloop invariant x >= 0 is partially proven to be inductive.\nloop invariant x >= sn is partially proven to be inductive.\nloop invariant (sn == x) ==> (sn == -1) is preserved but not established.\nloop invariant (sn != x) ==> (sn == -1) is partially proven to be inductive.\nAssertion sn == -1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: x >= sn;\n\nloop invariant i5: (sn != x) ==> (sn == -1);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn >= x;\n    loop invariant x' == x + 1 ==> sn' == sn + 1;\n    loop invariant sn != x ==> sn == -1;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "No invariants found.",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: sn >= 0;\nloop invariant i3: sn >= x;\nloop invariant i4: x' == x + 1 ==> sn' == sn + 1;\nloop invariant i5: sn != x ==> sn == -1;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n  loop invariant \\true; \n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant \\true is inductive.\nAssertion sn == -1: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: \\true;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \nloop invariant 0 <= sn;\nloop invariant 0 <= x;\nloop invariant sn >= x ==> x == -1;\nloop invariant (sn < x && sn >= 0) ==> sn == -1;\nloop invariant (sn >= x && x >= 0) ==> sn == x;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 0 <= sn is partially proven to be inductive.\nloop invariant 0 <= x is partially proven to be inductive.\nloop invariant sn >= x ==> x == -1 is preserved but not established.\nloop invariant (sn < x && sn >= 0) ==> sn == -1 is partially proven to be inductive.\nloop invariant (sn >= x && x >= 0) ==> sn == x is partially proven to be inductive.\nAssertion sn == -1: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: 0 <= sn;\nloop invariant i2: 0 <= x;\n\nloop invariant i4: (sn < x && sn >= 0) ==> sn == -1;\nloop invariant i5: (sn >= x && x >= 0) ==> sn == x;\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant \\true;\n    loop invariant x >= 0;\n    loop invariant sn >= 0;\n    loop invariant sn != x ==> (sn == -1);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant \\true is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant sn >= 0 is inductive.\nloop invariant sn != x ==> (sn == -1) is inductive.\nAssertion sn == -1: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "No invariants found.",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: x >= sn;\nloop invariant i4: (sn == x) ==> (sn == -1);\nloop invariant i5: (sn != x) ==> (sn == -1);\nloop invariant i6: sn >= x;\nloop invariant i7: x' == x + 1 ==> sn' == sn + 1;\nloop invariant i8: sn != x ==> sn == -1;\nloop invariant i9: \\true;\nloop invariant i10: 0 <= sn;\nloop invariant i11: 0 <= x;\nloop invariant i12: sn >= x ==> x == -1;\nloop invariant i13: (sn < x && sn >= 0) ==> sn == -1;\nloop invariant i14: (sn >= x && x >= 0) ==> sn == x;\nloop invariant i15: sn != x ==> (sn == -1);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 2,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int sn;\n  int v1;\n  int v2;\n  int v3;\n  int x;\n  \n  (sn = 0);\n  (x = 0);\n  \n  /*@\nloop invariant i1: sn >= 0;\nloop invariant i2: x >= 0;\nloop invariant i3: x >= sn;\nloop invariant i4: (sn == x) ==> (sn == -1);\nloop invariant i5: (sn != x) ==> (sn == -1);\nloop invariant i6: sn >= x;\nloop invariant i7: x' == x + 1 ==> sn' == sn + 1;\nloop invariant i8: sn != x ==> sn == -1;\nloop invariant i9: \\true;\nloop invariant i10: 0 <= sn;\nloop invariant i11: 0 <= x;\nloop invariant i12: sn >= x ==> x == -1;\nloop invariant i13: (sn < x && sn >= 0) ==> sn == -1;\nloop invariant i14: (sn >= x && x >= 0) ==> sn == x;\nloop invariant i15: sn != x ==> (sn == -1);\n*/\nwhile (unknown()) {\n    {\n    (x  = (x + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != x) )\n{;\n//@ assert( (sn == -1) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 99,
        "success_count": 66,
        "failure_count": 33,
        "success_rate": 0.6666666666666666
    }
}