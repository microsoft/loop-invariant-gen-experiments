{
    "logs": {
        "file": "../data/benchmarks/code2inv/51.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The program takes no input.\n- The macro `assume(e)` is defined such that if `e` is false, the program returns 0.\n- The function `unknown()` returns a non-deterministic integer value.\n\nVariable assignments:\n- `c` is an integer variable that is initialized to 0.\n\nLoop condition:\n- The loop condition is `unknown()`, which means that the loop continues to execute as long as `unknown()` returns a non-zero value.\n\nLoop invariants:\n- `0 <= c <= 4` (conjunction of `0 <= c` and `c <= 4`)\n- If `unknown()` returns a non-zero value, then the following must hold true:\n    - If `unknown()` returns a non-zero value again, then `c` must be less than or equal to 3. (i.e., `c <= 3`)\n    - If `unknown()` returns a zero value, then `c` must be equal to 4.\n- If `unknown()` returns a zero value, then the following must hold true:\n    - If `c` is equal to 4, then `c` must be reset to 1. (i.e., `c == 4 ==> c = 1`)\n    - If `c` is less than 4, then `c` must be incremented by 1. (i.e., `c < 4 ==> c = c + 1`)\n\nPost-condition:\n- If `c` is not equal to 4, then the assertion `(c <= 4)` must hold true.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= c <= 4;\n    loop invariant (unknown() && unknown()) ==> (c <= 3);\n    loop invariant (unknown() && !unknown()) ==> (c == 4);\n    loop invariant (!unknown() && c == 4) ==> (c == 1);\n    loop invariant (!unknown() && c < 4) ==> (c == \\old(c) + 1);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- c is assigned the value 0 at the beginning of the program.\n\nLoop condition:\n- The loop runs as long as the function unknown() returns a non-zero value.\n\nLoop invariants:\n- Before the loop execution, c is equal to 0. `(c == 0)`\n- In every iteration of the loop, c is either incremented by 1 or reset to 1, and it is always less than or equal to 4. `((c == old(c) + 1) || (c == 1)) && (c <= 4)`\n- After the loop termination, c is less than or equal to 4. `(c <= 4)`\n\nExplanation of loop invariants:\n- Before the loop execution, c is equal to 0. This is true because of the assignment statement `(c = 0)` before the loop.\n- In every iteration of the loop, c is either incremented by 1 or reset to 1, and it is always less than or equal to 4. The loop has two branches based on the value returned by unknown(). In the first branch, if unknown() returns true, then c is incremented by 1 if it is not already equal to 4. In the second branch, if unknown() returns false, then c is reset to 1 if it is equal to 4. Therefore, c is either incremented by 1 or reset to 1, and it is always less than or equal to 4.\n- After the loop termination, c is less than or equal to 4. This is true because the loop condition depends on the return value of unknown() and there is no other statement that modifies the value of c outside the loop. Therefore, c is either incremented by 1 or reset to 1, but it is always less than or equal to 4.\n\nPutting it all together:\n```\n/*@ \n    loop invariant (c == 0);\n    loop invariant ((c == old(c) + 1) || (c == 1)) && (c <= 4);\n    loop invariant (c <= 4);\n*/\n```",
            "Pre-conditions: None\n\nVariable assignments: \n- `c` is assigned the value 0 initially. \n\nLoop condition: `unknown()` is the loop condition. \n\nLoop Invariants:\n- Before the loop execution: `c >= 0 && c <= 4`\n- In every iteration of the loop: `(c >= 1 && c <= 4) ==> (c != 4)` and `(c >= 1 && c <= 3) ==> (c != 4)`\n- After the loop termination: `(c >= 1 && c <= 4) ==> (c != 4)` and `(c >= 1 && c <= 3) ==> (c != 4)` and `(c == 4) ==> false`\n\nExplanation:\n- The pre-condition for `c` is that it is between 0 and 4 (inclusive) because that is the range of values it can take.\n- In every iteration of the loop, `c` can take values between 1 and 4 (inclusive) because of the assignment statements inside the loop. The first invariant states that if `c` is between 1 and 4 (inclusive), then it cannot be equal to 4. The second invariant states that if `c` is between 1 and 3 (inclusive), then it cannot be equal to 4. This is because if `c` is equal to 4, then the condition `(c != 4)` in the if-statement will evaluate to false and the loop will terminate. \n- After the loop termination, `c` can take values between 1 and 4 (inclusive) as per the invariants. However, `c` cannot be equal to 4 because of the assertion `assert( (c <= 4) )`. Therefore, the third invariant states that if `c` is equal to 4, then the assertion will fail and hence `c` cannot be equal to 4 after the loop terminates. \n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant c >= 0 && c <= 4;\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 3) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c == 4) ==> false;\n*/\n```",
            "Step 1: Pre-conditions or variable assignments in the program:\n- The program defines a macro `assume` which takes a boolean expression and returns 0 if the expression is false.\n- The program declares an external function `unknown` which returns an integer value. The function could return any value.\n- The program declares an integer variable `c` and initializes it to 0.\n- The program contains a while loop with an unknown loop condition. \n\nStep 2: Analyze the loop body and make a note of the loop condition:\n- The loop contains an if-else statement.\n- The if statement checks if the function `unknown` returns true. \n- If `unknown` returns true, then another if statement checks if the value of `c` is not equal to 4. If `c` is not equal to 4, then the value of `c` is incremented by 1.\n- If `unknown` returns false, then another if statement checks if the value of `c` is equal to 4. If `c` is equal to 4, then the value of `c` is set to 1.\n- The loop continues as long as the loop condition (unknown) is true.\n\nStep 3: Output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition. Let's break down the loop invariants based on the different parts of the loop.\n\nBefore the loop execution:\n- `c >= 0`: The variable `c` is initialized to 0, so it has to be greater than or equal to 0.\n\nIn every iteration of the loop:\n- `(c >= 1) && (c <= 4)`: The variable `c` can only take the values of 1, 2, 3, or 4 based on the if-else statements in the loop. Therefore, `c` has to be greater than or equal to 1 and less than or equal to 4 in every iteration of the loop.\n- `c != 0`: The variable `c` cannot be equal to 0 in any iteration of the loop because it is initialized to 0 before the loop and is modified within the loop.\n\nAfter the loop termination:\n- `c >= 1`: If the loop terminates, then the loop condition (unknown) must be false. Therefore, the last if statement in the loop sets the value of `c` to 1. Hence, `c` has to be greater than or equal to 1 after the loop termination.\n- `c <= 4`: If the loop terminates, then the loop condition (unknown) must be false. Therefore, the last if statement in the loop sets the value of `c` to 1. Hence, `c` has to be less than or equal to 4 after the loop termination.\n- `(c <= 4) ==> (c <= 4)`: This is a trivial invariant that is always true. It is added here to take care of the conditional nature of the assertion in the post-condition. \n\nPutting all the loop invariants together, we get:\n\n```\n/*@ \n  loop invariant c >= 0;\n  loop invariant (c >= 1) && (c <= 4);\n  loop invariant c != 0;\n  loop invariant c >= 1;\n  loop invariant c <= 4;\n  loop invariant (c <= 4) ==> (c <= 4);\n*/\n```",
            "Pre-conditions:\n- None.\n\nVariable Assignments:\n- `c` is assigned the value 0 at the beginning of `main()`.\n\nLoop Condition:\n- `unknown()` is the loop condition. \n\nLoop Invariants:\n- `c` is always less than or equal to 4. This is because `c` is incremented by 1 in the loop body only when `unknown()` returns true, and `c` is not equal to 4. Hence, `c` can take the values 0, 1, 2, 3, or 4. \n```\n/*@ \n    loop invariant 0 <= c <= 4;\n*/\n```\n- If `c` equals 4, then it will be reset to 1 in the next iteration of the loop. This is because in the loop body, if `unknown()` returns false and `c` is equal to 4, then `c` is assigned the value 1. Hence, `c` can never be equal to 5. \n```\n/*@ \n    loop invariant (c == 4) ==> (c == 1);\n*/\n```\n- If `unknown()` returns false, then the value of `c` does not change. Hence, if `c` is equal to 4 before the loop iteration in which `unknown()` returns false, it will still be equal to 4 after that iteration. \n```\n/*@ \n    loop invariant (!unknown() && c == 4) ==> (\\at(c, Loop_Entry));\n*/\n```\n- If `unknown()` returns true and `c` is not equal to 4, then `c` is incremented by 1. Hence, if `c` is less than 4 before the loop iteration in which `unknown()` returns true, it will be less than or equal to 4 after that iteration. \n```\n/*@ \n    loop invariant (unknown() && c < 4) ==> (c+1 <= 4);\n*/\n```\n- After the loop terminates, `c` is not equal to 4. This is because the post-condition checks that `c` is less than or equal to 4, and if `c` is not equal to 4, then it must be less than or equal to 4. \n```\n/*@ \n    loop invariant !unknown();\n    loop invariant (c != 4);\n*/\n``` \n\nPutting everything together, we get the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= c <= 4;\n    loop invariant (c == 4) ==> (c == 1);\n    loop invariant (!unknown() && c == 4) ==> (\\at(c, Loop_Entry));\n    loop invariant (unknown() && c < 4) ==> (c+1 <= 4);\n    loop invariant !unknown();\n    loop invariant (c != 4);\n*/\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant 0 <= c <= 4;\n    loop invariant (unknown() && unknown()) ==> (c <= 3);\n    loop invariant (unknown() && !unknown()) ==> (c == 4);\n    loop invariant (!unknown() && c == 4) ==> (c == 1);\n    loop invariant (!unknown() && c < 4) ==> (c == \\old(c) + 1);\n*/",
            "/*@ \n    loop invariant (c == 0);\n    loop invariant ((c == old(c) + 1) || (c == 1)) && (c <= 4);\n    loop invariant (c <= 4);\n*/",
            "/*@ \n    loop invariant c >= 0 && c <= 4;\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 3) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c == 4) ==> false;\n*/",
            "/*@ \n  loop invariant c >= 0;\n  loop invariant (c >= 1) && (c <= 4);\n  loop invariant c != 0;\n  loop invariant c >= 1;\n  loop invariant c <= 4;\n  loop invariant (c <= 4) ==> (c <= 4);\n*/",
            "/*@ \n    loop invariant 0 <= c <= 4;\n*/"
        ],
        "completions": [
            {
                "num_solver_calls": 5,
                "annotations": "/*@ \n    loop invariant 0 <= c <= 4;\n    loop invariant (unknown() && unknown()) ==> (c <= 3);\n    loop invariant (unknown() && !unknown()) ==> (c == 4);\n    loop invariant (!unknown() && c == 4) ==> (c == 1);\n    loop invariant (!unknown() && c < 4) ==> (c == \\old(c) + 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant (c == 0);\n    loop invariant ((c == old(c) + 1) || (c == 1)) && (c <= 4);\n    loop invariant (c <= 4);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 12: unbound logic function old. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\n\n\nloop invariant i3: (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant c >= 0 && c <= 4;\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 3) ==> (c != 4);\n    loop invariant (c >= 1 && c <= 4) ==> (c != 4);\n    loop invariant (c == 4) ==> false;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 14: unbound logic variable false. Ignoring loop annotation",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0 && c <= 4;\n\nloop invariant i3: (c >= 1 && c <= 3) ==> (c != 4);\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n  loop invariant c >= 0;\n  loop invariant (c >= 1) && (c <= 4);\n  loop invariant c != 0;\n  loop invariant c >= 1;\n  loop invariant c <= 4;\n  loop invariant (c <= 4) ==> (c <= 4);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant c >= 0 is partially proven to be inductive.\nloop invariant (c >= 1) && (c <= 4) is preserved but not established.\nloop invariant c != 0 is partially proven to be inductive.\nloop invariant c >= 1 is partially proven to be inductive.\nloop invariant c <= 4 is partially proven to be inductive.\nloop invariant (c <= 4) ==> (c <= 4) is partially proven to be inductive.\nAssertion c <= 4: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: c >= 0;\n\n\n\nloop invariant i5: c <= 4;\nloop invariant i6: (c <= 4) ==> (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant 0 <= c <= 4;\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant 0 <= c <= 4 is inductive.\nAssertion c <= 4: Valid"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 12: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\nloop invariant i2: (unknown() && unknown()) ==> (c <= 3);\nloop invariant i3: (unknown() && !unknown()) ==> (c == 4);\nloop invariant i4: (!unknown() && c == 4) ==> (c == 1);\nloop invariant i5: (!unknown() && c < 4) ==> (c == \\old(c) + 1);\nloop invariant i6: (c == 0);\nloop invariant i7: ((c == old(c) + 1) || (c == 1)) && (c <= 4);\nloop invariant i8: (c <= 4);\nloop invariant i9: c >= 0 && c <= 4;\nloop invariant i10: (c >= 1 && c <= 4) ==> (c != 4);\nloop invariant i11: (c >= 1 && c <= 3) ==> (c != 4);\nloop invariant i12: (c == 4) ==> false;\nloop invariant i13: c >= 0;\nloop invariant i14: (c >= 1) && (c <= 4);\nloop invariant i15: c != 0;\nloop invariant i16: c >= 1;\nloop invariant i17: c <= 4;\nloop invariant i18: (c <= 4) ==> (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 12,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  \n  (c = 0);\n  \n  /*@\nloop invariant i1: 0 <= c <= 4;\n\n\n\n\n\n\nloop invariant i8: (c <= 4);\nloop invariant i9: c >= 0 && c <= 4;\n\nloop invariant i11: (c >= 1 && c <= 3) ==> (c != 4);\n\nloop invariant i13: c >= 0;\n\n\n\nloop invariant i17: c <= 4;\nloop invariant i18: (c <= 4) ==> (c <= 4);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c != 4) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == 4) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (c != 4) )\n{;\n//@ assert( (c <= 4) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c"
        ],
        "total": 44,
        "success_count": 28,
        "failure_count": 16,
        "success_rate": 0.6363636363636364
    }
}