{
    "logs": {
        "file": "../data/benchmarks/code2inv/126.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "success": false,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  while ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None.\n\nVariable assignments:\n- i is assigned the value of x.\n- j is assigned the value of y.\n\nLoop condition:\n- The while loop continues as long as x is not equal to 0.\n\nLoop invariants:\n- Before the loop execution:\n    - None.\n- In every iteration of the loop:\n    - x >= 0\n    - y >= 0\n    - i >= 0\n    - j >= 0\n    - i <= x\n    - j <= y\n- After the loop termination:\n    - i == j ==> y == 0\n\nExplanation:\n- Before the loop execution: There are no loop invariants that can be applied before the loop execution, as the values of x, y, i, and j are not restricted.\n- In every iteration of the loop:\n    - x >= 0 and y >= 0: Since x and y are decremented by 1 in each iteration, they will eventually become 0 or negative. Therefore, x and y are always non-negative.\n    - i >= 0 and j >= 0: Since i and j are assigned the values of x and y, respectively, before the loop, they are always non-negative.\n    - i <= x and j <= y: Since i and j are assigned the values of x and y, respectively, before the loop, they are always smaller than or equal to x and y, respectively.\n- After the loop termination:\n    - i == j ==> y == 0: If i is equal to j, then the loop executed x times, where x is the initial value of x. Therefore, y must be equal to y - x, which is 0 if i is equal to j. \n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant i <= x;\n    loop invariant j <= y;\n*/\n```\nand the post-condition is:\n```\n//@ assert (i == j ==> y == 0);\n```",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i is assigned the value of x.\n- j is assigned the value of y.\n\nLoop Condition:\n- The loop continues as long as x is not equal to 0.\n\nLoop Body:\n- Both x and y are decremented by 1.\n\nPost-condition:\n- If i is equal to j, then y must be equal to 0.\n\nLoop Invariants:\n- Before the loop execution, the value of y must be equal to j.\n```\n/*@ \n    loop invariant y == j;\n*/\n```\n- In every iteration of the loop, the value of x is greater than or equal to 0.\n```\n/*@ \n    loop invariant x >= 0;\n*/\n```\n- In every iteration of the loop, the value of y is greater than or equal to 0.\n```\n/*@ \n    loop invariant y >= 0;\n*/\n```\n- In every iteration of the loop, if x is greater than 0, then y is also greater than 0.\n```\n/*@ \n    loop invariant x > 0 ==> y > 0;\n*/\n```\n- In every iteration of the loop, if i is equal to j, then y is equal to 0.\n```\n/*@ \n    loop invariant i == j ==> y == 0;\n*/\n```\n- After the loop termination, if i is equal to j, then y is equal to 0.\n```\n/*@ \n    loop invariant i == j ==> y == 0;\n*/\n```",
            "Pre-conditions or variable assignments:\n- The variables i, j, x, y, z1, z2, and z3 are declared as integers.\n- The macro `assume` is defined as a conditional return statement.\n\nLoop condition:\n- The loop will continue as long as x is not equal to 0.\n\nLoop invariants:\n- Before the loop execution, `x >= 0` and `y >= 0`.\n- In every iteration of the loop, `x + y == i + j`.\n- After the loop termination, `i == j ==> y == 0`.\n\nExplanation:\n- `x >= 0` and `y >= 0` are true before the loop because they are initialized to some garbage value, which could be non-negative. \n- `x + y == i + j` holds true in every iteration because `i` and `j` are not modified inside the loop, and `x` and `y` are decremented by the same amount in each iteration. Therefore, their sum remains equal to the initial value of `i+j`.\n- After the loop, if `i == j` and the loop terminated, then `x` must be equal to 0, since it was decremented to 0 in the loop. Therefore, `y` must also be 0, since `x + y == i + j`. If `i != j`, then the post-condition is vacuously true. \n\nLoop invariants code block:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (i == j) ==> (y == 0);\n*/\n```",
            "Pre-conditions:\n- None\n\nVariable assignments:\n- i is assigned the value of x\n- j is assigned the value of y\n\nLoop condition:\n- x != 0\n\nLoop Invariants:\n- Before the loop, we have:\n    - i == x\n    - j == y\n- In every iteration of the loop, we have:\n    - x >= 0\n    - y >= 0\n    - x + y == i + j\n- After the loop, we have:\n    - x == 0 ==> y == 0\n- Combining all loop invariants, we get:\n\n```\n/*@ \n    loop invariant i == x;\n    loop invariant j == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (x == 0) ==> (y == 0);\n*/\n``` \n\nNote that we have used implication to handle the conditional nature of the assertion. We have also used the given assignments to set the initial values of i and j. Since there are no bounds on the values of x, y, i, and j, we have not added any bounds in the loop invariants. Lastly, we have used the relation i + j == x + y in the loop invariant, which holds true throughout the loop execution.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- i is assigned the value of x\n- j is assigned the value of y\n\nLoop condition:\n- x != 0\n\nLoop Invariants:\n- i == x\n- j == y\n- x >= 0\n- y >= 0\n- (i == j) ==> (y == (j - x))\n- (x == 0) ==> (y == 0)\n\nExplanation:\n- The first two loop invariants simply state that i and x are equal, and j and y are equal respectively, as these values are assigned before the loop.\n- The next two loop invariants state that x and y are non-negative, as they are decremented by 1 in each iteration.\n- The third loop invariant states that if i and j are equal, then y is equal to the difference between j and x. This is true because in each iteration of the loop, both i and j are decremented by 1, and thus their difference remains the same.\n- The fourth loop invariant states that if x becomes 0, then y must also become 0. This is because in each iteration of the loop, both x and y are decremented by 1, and thus y will become 0 when x becomes 0.\n- Finally, we add the guard condition (i == j) as an implication to the assertion. If (i == j) is true, then y must be 0 according to the third loop invariant."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant i <= x;\n    loop invariant j <= y;\n*/",
            "/*@ \n    loop invariant y == j;\n*/",
            "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (i == j) ==> (y == 0);\n*/",
            "/*@ \n    loop invariant i == x;\n    loop invariant j == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (x == 0) ==> (y == 0);\n*/",
            [
                "ERROR: Output does not contain at least 1 complete code block",
                "Pre-conditions:\n- None\n\nVariable Assignments:\n- i is assigned the value of x\n- j is assigned the value of y\n\nLoop condition:\n- x != 0\n\nLoop Invariants:\n- i == x\n- j == y\n- x >= 0\n- y >= 0\n- (i == j) ==> (y == (j - x))\n- (x == 0) ==> (y == 0)\n\nExplanation:\n- The first two loop invariants simply state that i and x are equal, and j and y are equal respectively, as these values are assigned before the loop.\n- The next two loop invariants state that x and y are non-negative, as they are decremented by 1 in each iteration.\n- The third loop invariant states that if i and j are equal, then y is equal to the difference between j and x. This is true because in each iteration of the loop, both i and j are decremented by 1, and thus their difference remains the same.\n- The fourth loop invariant states that if x becomes 0, then y must also become 0. This is because in each iteration of the loop, both x and y are decremented by 1, and thus y will become 0 when x becomes 0.\n- Finally, we add the guard condition (i == j) as an implication to the assertion. If (i == j) is true, then y must be 0 according to the third loop invariant."
            ]
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n    loop invariant i <= x;\n    loop invariant j <= y;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= x is established but not preserved.\nloop invariant j <= y is established but not preserved.\nAssertion y == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant y == j;\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant y == j is established but not preserved.\nAssertion y == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 2,
                "annotations": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (i == j) ==> (y == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant x >= 0 && y >= 0 is neither established nor preserved.\nloop invariant x + y == i + j is established but not preserved.\nloop invariant (i == j) ==> (y == 0) is preserved but not established.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant i == x;\n    loop invariant j == y;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y == i + j;\n    loop invariant (x == 0) ==> (y == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i == x is established but not preserved.\nloop invariant j == y is partially proven to be inductive.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant x + y == i + j is partially proven to be inductive.\nloop invariant (x == 0) ==> (y == 0) is preserved but not established.\nAssertion y == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 0,
                "success": false,
                "llm_output": "Pre-conditions:\n- None\n\nVariable Assignments:\n- i is assigned the value of x\n- j is assigned the value of y\n\nLoop condition:\n- x != 0\n\nLoop Invariants:\n- i == x\n- j == y\n- x >= 0\n- y >= 0\n- (i == j) ==> (y == (j - x))\n- (x == 0) ==> (y == 0)\n\nExplanation:\n- The first two loop invariants simply state that i and x are equal, and j and y are equal respectively, as these values are assigned before the loop.\n- The next two loop invariants state that x and y are non-negative, as they are decremented by 1 in each iteration.\n- The third loop invariant states that if i and j are equal, then y is equal to the difference between j and x. This is true because in each iteration of the loop, both i and j are decremented by 1, and thus their difference remains the same.\n- The fourth loop invariant states that if x becomes 0, then y must also become 0. This is because in each iteration of the loop, both x and y are decremented by 1, and thus y will become 0 when x becomes 0.\n- Finally, we add the guard condition (i == j) as an implication to the assertion. If (i == j) is true, then y must be 0 according to the third loop invariant.",
                "error": "Output does not contain at least 1 code block"
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant i >= 0 is partially proven to be inductive.\nloop invariant j >= 0 is partially proven to be inductive.\nloop invariant i <= x is established but not preserved.\nloop invariant j <= y is partially proven to be inductive.\nloop invariant y == j is partially proven to be inductive.\nloop invariant x >= 0 && y >= 0 is partially proven to be inductive.\nloop invariant x + y == i + j is partially proven to be inductive.\nloop invariant (i == j) ==> (y == 0) is preserved but not established.\nloop invariant i == x is partially proven to be inductive.\nloop invariant j == y is partially proven to be inductive.\nloop invariant (x == 0) ==> (y == 0) is preserved but not established.\nAssertion y == 0: Partially proven",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: i >= 0;\nloop invariant i4: j >= 0;\nloop invariant i5: i <= x;\nloop invariant i6: j <= y;\nloop invariant i7: y == j;\nloop invariant i8: x >= 0 && y >= 0;\nloop invariant i9: x + y == i + j;\nloop invariant i10: (i == j) ==> (y == 0);\nloop invariant i11: i == x;\nloop invariant i12: j == y;\nloop invariant i13: (x == 0) ==> (y == 0);\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 7,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int j;\n  int x;\n  int y;\n  int z1;\n  int z2;\n  int z3;\n  \n  (i = x);\n  (j = y);\n  \n  /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile ((x != 0)) {\n    {\n    (x  = (x - 1));\n    (y  = (y - 1));\n    }\n\n  }\n  \nif ( (i == j) )\n{;\n//@ assert( (y == 0) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c",
            "../data/benchmarks/code2inv/121.c",
            "../data/benchmarks/code2inv/124.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c",
            "../data/benchmarks/code2inv/119.c",
            "../data/benchmarks/code2inv/120.c",
            "../data/benchmarks/code2inv/122.c",
            "../data/benchmarks/code2inv/123.c",
            "../data/benchmarks/code2inv/125.c",
            "../data/benchmarks/code2inv/126.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 109,
        "success_count": 70,
        "failure_count": 39,
        "success_rate": 0.6422018348623854
    }
}