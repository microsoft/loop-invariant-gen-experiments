{
    "logs": {
        "file": "../data/benchmarks/code2inv/44.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  while (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- The variable `n` should be greater than 0.\n\nLoop Condition:\n- The loop executes until the non-deterministic function `unknown()` returns 0.\n\nLoop Invariants:\n- `n > 0`\n- `1 <= c <= n` (since `c` is initialized to 0 and then can only be incremented by 1 or reset to 1)\n- If `c > n` then `unknown() == 0` (since `c` is reset to 1 only when it becomes equal to `n` and `unknown()` is true, which means if `c > n`, then `unknown()` should be false)\n- If `c == n` then `unknown() == 1` (similarly, since `c` is reset to 1 only when it becomes equal to `n` and `unknown()` is true, if `c` is already equal to `n`, then `unknown()` should be true for it to be reset to 1)\n- If `n <= -1`, then `c != n` (since `n` is assumed to be greater than 0, if it is less than or equal to -1, then `c` cannot be equal to it)\n\nPutting it all together, the loop invariants are:\n```\n/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (unknown() == 0);\n    loop invariant (c == n) ==> (unknown() == 1);\n*/\n```\n\nFinally, to use the assertion, we need to add a guard condition that ensures it is only checked when the loop has terminated:\n```\nif (unknown()) {\n    assume(n <= -1);\n} else {\n    assume(n > 0);\n    //@ assert (c != n);\n}\n```",
            "First, let's analyze the program and make a note of the pre-conditions and variable assignments:\n\n- The program initializes two variables `c` and `n`.\n- The program assumes that `n > 0`.\n- The program enters a `while` loop with an unknown condition.\n- Inside the loop, there is an `if` statement with another unknown condition.\n- Inside the `if` statement, there is another `if` statement with a third unknown condition.\n- Depending on the outcome of the three conditions, the program updates the value of `c`.\n- After the loop, the program checks if `n <= -1` and if so, asserts that `c != n`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `unknown()`, which means that we do not know how many times the loop will execute.\n\nTo find the necessary loop invariants, we need to analyze the program and determine the properties that hold true before the loop execution, in every iteration of the loop and after the loop termination, such that the loop invariants imply the post-condition.\n\nBefore the loop execution:\n- `n > 0`: This is given in the program.\n- `c <= n`: This is not given in the program, but it follows from the initialization `c = 0` and the fact that `c` can only be incremented by one or reset to one in the loop body.\n\nIn every iteration of the loop:\n- `n > 0`: This is already true before the loop execution.\n- `c <= n`: This is already true before the loop execution.\n- `(c == 1) ==> (n > 1)`: This follows from the fact that `c` can only be reset to one when it is equal to `n`, and since `n > 0`, we have `n > 1`.\n- `(c > 1) ==> (c <= n)`: This follows from the fact that `c` can only be incremented by one, and it is already bounded by `n`.\n\nAfter the loop termination:\n- `n > 0`: This is already true before the loop execution.\n- `c <= n`: This is already true before the loop execution.\n- `n <= -1 ==> (c != n)`: This follows from the assertion in the program, but since the loop body does not modify `n`, this implication is true at every point in the program.\n\nPutting all these together, we get the following loop invariants:\n```\n/*@ \n    loop invariant n > 0;\n    loop invariant c <= n;\n    loop invariant (c == 1) ==> (n > 1);\n    loop invariant (c > 1) ==> (c <= n);\n    loop invariant n <= -1 ==> (c != n);\n*/\n```",
            "Pre-conditions:\n- The variable `n` should be greater than 0.\n\nVariable assignments:\n- `c` is initialized to 0.\n\nLoop condition:\n- The loop continues as long as the non-deterministic function `unknown()` returns a non-zero value.\n\nLoop body:\n- There are two nested if-else statements.\n- If the first condition in the outer if-statement is true and the condition in the inner if-statement is true, then `c` is incremented by 1.\n- If the first condition in the outer if-statement is false and the condition in the inner if-statement is true, then `c` is set to 1.\n\nPost-condition:\n- If `n` is less than or equal to -1, then `c` should not be equal to `n`.\n\nBased on the above analysis, we can come up with the following loop invariants:\n```\n//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int k; 1 <= k < c ==> k != n;\n//@ loop invariant \\forall int k; c < k <= n ==> k != 1;\n//@ loop invariant (n <= -1) ==> (c != n);\n```\n\nExplanation of loop invariants:\n- The first loop invariant ensures that `c` is always between 1 and `n`, inclusive.\n- The second loop invariant ensures that `n` is always greater than 0.\n- The third loop invariant ensures that all the numbers between 1 and `c` (exclusive) are different from `n`.\n- The fourth loop invariant ensures that all the numbers between `c` and `n` (inclusive) are different from 1.\n- The last loop invariant ensures that if `n` is less than or equal to -1, then `c` should not be equal to `n`.",
            "Pre-conditions:\n- Variable `n` is greater than 0.\n\nLoop condition:\n- The loop condition is `unknown()` which means that the loop can execute an unknown number of times.\n\nLoop invariants:\n- `n > 0`\n- `1 <= c <= n`\n- `(c > n) ==> (c' = c+1)` where `c'` is the new value of `c` after the execution of the loop body.\n- `(c == n) ==> (c' = 1)` where `c'` is the new value of `c` after the execution of the loop body.\n- `(n <= -1) ==> (c != n)` where `c` is the value of `c` at the end of the loop execution.\n- `!unknown() ==> (c != n)` where `c` is the value of `c` at the end of the loop execution. This invariant is needed because the `assert` statement is guarded by the condition `n <= -1`, which is equivalent to `!(n > 0)`.\n- `unknown() ==> (1 <= c <= n)` which ensures that the loop invariant is maintained in every iteration of the loop.\n- `unknown() ==> (c <= n)` which ensures that `c` never exceeds `n` in every iteration of the loop.\n\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (c' = c+1);\n    loop invariant (c == n) ==> (c' = 1);\n    loop invariant (n <= -1) ==> (c != n);\n    loop invariant !unknown() ==> (c != n);\n    loop invariant unknown() ==> (1 <= c <= n);\n    loop invariant unknown() ==> (c <= n);\n*/\n```",
            "Pre-conditions:\n- The variable `n` is greater than 0.\n\nLoop condition:\n- The loop continues as long as `unknown()` returns a non-zero value.\n\nLoop invariants:\n```\n//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int i; 1 <= i < c ==> (unknown() ==> c <= n) && (!unknown() ==> c < n);\n//@ loop invariant \\forall int i; c < i <= n ==> !unknown();\n//@ loop invariant c <= n + 1;\n//@ loop invariant (n <= -1) ==> (c != n) ==> !unknown();\n```\n\nExplanation:\n- The first loop invariant ensures that `c` remains between 1 and `n` (inclusive) throughout the loop.\n- The second loop invariant is the given pre-condition that `n` is greater than 0.\n- The third loop invariant states that for all `i` between 1 and `c` (exclusive), if `unknown()` returns true, then `c` must be less than or equal to `n`, and if `unknown()` returns false, then `c` must be strictly less than `n`. This invariant is split into two parts, one for each possible value of `unknown()`.\n- The fourth loop invariant states that for all `i` between `c` and `n` (inclusive), `unknown()` must be false. This is because if `unknown()` were true, `c` would have been incremented in a previous iteration, violating the first loop invariant.\n- The fifth loop invariant ensures that `c` is always less than or equal to `n+1`. This is because if `c` were to exceed `n+1`, it would be reset to 1, and the first loop invariant would be violated.\n- The sixth loop invariant states that if `n` is less than or equal to -1, then the assertion `c != n` implies that `unknown()` must be false. This is because if `unknown()` were true, `c` would have been incremented in a previous iteration, violating the first loop invariant."
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (unknown() == 0);\n    loop invariant (c == n) ==> (unknown() == 1);\n*/",
            "/*@ \n    loop invariant n > 0;\n    loop invariant c <= n;\n    loop invariant (c == 1) ==> (n > 1);\n    loop invariant (c > 1) ==> (c <= n);\n    loop invariant n <= -1 ==> (c != n);\n*/",
            "//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int k; 1 <= k < c ==> k != n;\n//@ loop invariant \\forall int k; c < k <= n ==> k != 1;\n//@ loop invariant (n <= -1) ==> (c != n);",
            "/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (c' = c+1);\n    loop invariant (c == n) ==> (c' = 1);\n    loop invariant (n <= -1) ==> (c != n);\n    loop invariant !unknown() ==> (c != n);\n    loop invariant unknown() ==> (1 <= c <= n);\n    loop invariant unknown() ==> (c <= n);\n*/",
            "//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int i; 1 <= i < c ==> (unknown() ==> c <= n) && (!unknown() ==> c < n);\n//@ loop invariant \\forall int i; c < i <= n ==> !unknown();\n//@ loop invariant c <= n + 1;\n//@ loop invariant (n <= -1) ==> (c != n) ==> !unknown();"
        ],
        "completions": [
            {
                "num_solver_calls": 4,
                "annotations": "/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (unknown() == 0);\n    loop invariant (c == n) ==> (unknown() == 1);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: n > 0;\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 1,
                "annotations": "/*@ \n    loop invariant n > 0;\n    loop invariant c <= n;\n    loop invariant (c == 1) ==> (n > 1);\n    loop invariant (c > 1) ==> (c <= n);\n    loop invariant n <= -1 ==> (c != n);\n*/",
                "checker_output_for_annotations": true,
                "checker_message_for_annotations": "loop invariant n > 0 is inductive.\nloop invariant c <= n is inductive.\nloop invariant (c == 1) ==> (n > 1) is inductive.\nloop invariant (c > 1) ==> (c <= n) is inductive.\nloop invariant n <= -1 ==> (c != n) is inductive.\nAssertion c != n: Valid"
            },
            {
                "num_solver_calls": 3,
                "annotations": "//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int k; 1 <= k < c ==> k != n;\n//@ loop invariant \\forall int k; c < k <= n ==> k != 1;\n//@ loop invariant (n <= -1) ==> (c != n);",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= c <= n is preserved but not established.\nloop invariant n > 0 is partially proven to be inductive.\nloop invariant \\forall int k; 1 <= k < c ==> k != n is partially proven to be inductive.\nloop invariant \\forall int k; c < k <= n ==> k != 1 is partially proven to be inductive.\nloop invariant (n <= -1) ==> (c != n) is partially proven to be inductive.\nAssertion c != n: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: n > 0;\nloop invariant i3: \\forall int k; 1 <= k < c ==> k != n;\n\nloop invariant i5: (n <= -1) ==> (c != n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant n > 0;\n    loop invariant 1 <= c <= n;\n    loop invariant (c > n) ==> (c' = c+1);\n    loop invariant (c == n) ==> (c' = 1);\n    loop invariant (n <= -1) ==> (c != n);\n    loop invariant !unknown() ==> (c != n);\n    loop invariant unknown() ==> (1 <= c <= n);\n    loop invariant unknown() ==> (c <= n);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: lexical error, illegal character '",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: 1 <= c <= n;\n\nloop invariant i4: (c == n) ==> (c' = 1);\nloop invariant i5: (n <= -1) ==> (c != n);\nloop invariant i6: !unknown() ==> (c != n);\nloop invariant i7: unknown() ==> (1 <= c <= n);\nloop invariant i8: unknown() ==> (c <= n);\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 6,
                "annotations": "//@ loop invariant 1 <= c <= n;\n//@ loop invariant n > 0;\n//@ loop invariant \\forall int i; 1 <= i < c ==> (unknown() ==> c <= n) && (!unknown() ==> c < n);\n//@ loop invariant \\forall int i; c < i <= n ==> !unknown();\n//@ loop invariant c <= n + 1;\n//@ loop invariant (n <= -1) ==> (c != n) ==> !unknown();",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 15: unexpected token ')'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\n\nloop invariant i2: n > 0;\n\n\n\n\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
                "checker_output_after_prune": true
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 15: unexpected token ')'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: 1 <= c <= n;\nloop invariant i3: (c > n) ==> (unknown() == 0);\nloop invariant i4: (c == n) ==> (unknown() == 1);\nloop invariant i5: c <= n;\nloop invariant i6: (c == 1) ==> (n > 1);\nloop invariant i7: (c > 1) ==> (c <= n);\nloop invariant i8: n <= -1 ==> (c != n);\nloop invariant i9: \\forall int k; 1 <= k < c ==> k != n;\nloop invariant i10: \\forall int k; c < k <= n ==> k != 1;\nloop invariant i11: (n <= -1) ==> (c != n);\nloop invariant i12: (c > n) ==> (c' = c+1);\nloop invariant i13: (c == n) ==> (c' = 1);\nloop invariant i14: !unknown() ==> (c != n);\nloop invariant i15: unknown() ==> (1 <= c <= n);\nloop invariant i16: unknown() ==> (c <= n);\nloop invariant i17: \\forall int i; 1 <= i < c ==> (unknown() ==> c <= n) && (!unknown() ==> c < n);\nloop invariant i18: \\forall int i; c < i <= n ==> !unknown();\nloop invariant i19: c <= n + 1;\nloop invariant i20: (n <= -1) ==> (c != n) ==> !unknown();\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 5,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\n\nint main() {\n  \n  int c;\n  int n;\n  \n  (c = 0);\n  assume((n > 0));\n  \n  /*@\nloop invariant i1: n > 0;\nloop invariant i2: 1 <= c <= n;\n\n\nloop invariant i5: c <= n;\nloop invariant i6: (c == 1) ==> (n > 1);\nloop invariant i7: (c > 1) ==> (c <= n);\nloop invariant i8: n <= -1 ==> (c != n);\nloop invariant i9: \\forall int k; 1 <= k < c ==> k != n;\nloop invariant i10: \\forall int k; c < k <= n ==> k != 1;\nloop invariant i11: (n <= -1) ==> (c != n);\n\nloop invariant i13: (c == n) ==> (c' = 1);\nloop invariant i14: !unknown() ==> (c != n);\nloop invariant i15: unknown() ==> (1 <= c <= n);\nloop invariant i16: unknown() ==> (c <= n);\nloop invariant i17: \\forall int i; 1 <= i < c ==> (unknown() ==> c <= n) && (!unknown() ==> c < n);\nloop invariant i18: \\forall int i; c < i <= n ==> !unknown();\nloop invariant i19: c <= n + 1;\nloop invariant i20: (n <= -1) ==> (c != n) ==> !unknown();\n*/\nwhile (unknown()) {\n    {\n      if ( unknown() ) {\n        if ( (c > n) )\n        {\n        (c  = (c + 1));\n        }\n      } else {\n        if ( (c == n) )\n        {\n        (c  = 1);\n        }\n      }\n\n    }\n\n  }\n  \nif ( (n <= -1) )\n{;\n//@ assert( (c != n) );\n}\n\n}",
        "checker_output_after_prune": false
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c"
        ],
        "total": 38,
        "success_count": 22,
        "failure_count": 16,
        "success_rate": 0.5789473684210527
    }
}