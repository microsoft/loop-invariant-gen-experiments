{
    "logs": {
        "file": "../data/benchmarks/code2inv/118.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "success": true,
        "llm_conversation": [
            {
                "role": "system",
                "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
            },
            {
                "role": "user",
                "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  while ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
            },
            "Pre-conditions:\n- None\n\nVariable assignments:\n- `sn = 0`\n- `i = 1`\n\nLoop condition:\n- `i <= size`\n\nPost-condition:\n- `sn == 0` if `sn != size`\n\nLoop invariants:\n- `i >= 1`\n- `i <= size + 1`\n- `sn >= 0`\n- `sn <= i - 1`\n- `(i <= size) ==> (sn + size - i == 0)`\n\nExplanation:\n- The loop variable `i` is initialized to `1`, so it is greater than or equal to `1`.\n- The loop variable `i` is incremented by `1` in each iteration, so it can reach a maximum value of `size + 1`.\n- The sum `sn` is initialized to `0`, so it is greater than or equal to `0`.\n- The sum `sn` is incremented by `1` in each iteration, so it can reach a maximum value of `i - 1`.\n- At the end of the loop, if `i <= size` then the loop condition is false, so `sn + size - i == size - i` must be equal to `0` to satisfy the post-condition. Therefore, `(i <= size) ==> (sn + size - i == 0)` is a necessary loop invariant.\n\nPutting everything together, the loop invariants are:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn + size - i == 0);\n*/\n```",
            "Pre-conditions and variable assignments:\n- The program defines a macro `assume(e)` that returns 0 if the expression `e` is false.\n- The program initializes `i` and `sn` to 1 and 0 respectively.\n- The program does not initialize `size`.\n\nLoop condition:\n- The while loop executes while `i <= size`.\n\nLoop invariants:\n- Before the loop execution: None, as `size` is not initialized.\n- In every iteration of the loop:\n  - `1 <= i <= size + 1` (since `i` is incremented in the loop body)\n  - `sn = i - 1` (since `sn` is incremented by 1 in each iteration)\n- After the loop termination:\n  - `1 <= i <= size + 1` (since `i` is incremented in the loop body)\n  - `sn = size` (since the loop terminates when `i` is no longer less than or equal to `size`, and `sn` is incremented by 1 in each iteration)\n\nLoop invariants in code block:\n```\n/*@ \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == i - 1;\n*/\nassume(sn != size) ==> (sn == 0);\n```",
            "Pre-conditions/Variable assignments:\n- `size` is an integer variable that represents the size of the array\n- `sn` is an integer variable that represents the sum of the array\n- `i` is an integer variable that represents the index of the array\n\n```\nint i;\nint size;\nint sn;\n\n(sn = 0);\n(i = 1);\n```\n\nLoop condition:\n- The loop continues as long as `i` is less than or equal to `size`\n\n```\nwhile ((i <= size))\n```\n\nLoop Invariants:\n- Before loop execution:\n    - `sn == 0`\n    - `i == 1`\n    - `size >= 0` (since `size` represents the size of an array)\n    - `sn >= 0` (since the sum of an array cannot be negative)\n    - `i <= size + 1` (since `i` is incremented by 1 in every iteration)\n- In every iteration of the loop:\n    - `1 <= i <= size + 1`\n    - `sn == sum of first i-1 elements of the array`\n- After loop termination:\n    - `sn == sum of all elements of the array`\n    - `i == size + 1`\n\nImplication for assertion:\n- Since the assertion is guarded by `(sn != size)`, we can use this condition in an implication:\n    - `(sn != size) ==> (sn == 0)`\n- We do not need to add any implications for non-deterministic variables because there are no such variables in this program.\n\nPutting it all together:\n\n```\n/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant size >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == sum of first i-1 elements of the array;\n    \n    loop invariant sn == sum of all elements of the array;\n    loop invariant i == size + 1;\n    \n    loop assigns i, sn;\n    \n    loop variant size + 1 - i;\n*/\nif ( (sn != size) )\n{;\n    //@ assert ( (sn != size) ==> (sn == 0) );\n}\n```\n\nNote: We added a loop variant `size + 1 - i` to satisfy the termination condition of the loop. This ensures that the loop will terminate because `i` is incremented by 1 in every iteration and `i` starts at 1, so the loop will execute exactly `size` times.",
            "Pre-conditions:\n- None\n\nVariable Assignments:\n- `sn` is assigned the value 0\n- `i` is assigned the value 1\n\nLoop Condition:\n- The loop will continue as long as `i <= size`\n\nLoop Invariants:\n- `i` is always greater than or equal to 1: `i >= 1`\n- `i` is always less than or equal to `size+1`: `i <= size+1`\n- `sn` is always greater than or equal to 0: `sn >= 0`\n- `sn` is always less than or equal to `size`: `sn <= size`\n- `(i <= size)` is always true when entering the loop: `i <= size ==> i <= size`\n- `(sn == (i-1))` is true after every iteration of the loop:\n```\n(i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1))\n```\n- After the loop terminates, if `sn` is not equal to `size`, then `sn` must be equal to 0:\n```\n!(i <= size) ==> (sn != size) ==> (sn == 0)\n```\nPutting all the loop invariants together:\n```\n/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= size;\n    loop invariant (i <= size) ==> (i <= size);\n    loop invariant (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\n    loop invariant !(i <= size) ==> (sn != size) ==> (sn == 0);\n*/\n```",
            "First, let's note the pre-conditions and variable assignments in the program:\n\nPre-conditions:\nNone\n\nVariable Assignments:\n- sn = 0\n- i = 1\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\nLoop Condition:\n(i <= size)\n\nNow, let's find the necessary loop invariants:\n\nLoop Invariant before loop execution:\nNone\n\nLoop Invariant in every iteration of the loop:\n- (1 <= i <= size+1)\n- (sn = i - 1)\n\nExplanation:\n- The first invariant ensures that i is always greater than or equal to 1 and less than or equal to size+1.\n- The second invariant ensures that sn is always equal to i-1. This is true before the loop and also in every iteration of the loop. \n\nLoop Invariant after loop termination:\n(sn = size)\n\nExplanation:\n- Since sn is incremented by 1 in every iteration of the loop, and the loop runs size times, sn will be equal to size after the loop terminates.\n\nUsing these loop invariants, we can verify the post-condition:\n- If (sn != size), then i must be greater than size+1, which violates the first loop invariant.\n- Therefore, if (sn != size) is false, then (sn == size) must be true, which satisfies the loop invariant after loop termination and the post-condition.\n\nPutting it all together, the loop invariants are:\n```\n/*@\n  loop invariant (1 <= i <= size+1);\n  loop invariant (sn == i - 1);\n*/\nwhile ((i <= size)) {\n  {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n  }\n}\n/*@\n  loop invariant (sn == size);\n*/\nif ( (sn != size) )\n{;\n  //@ assert( (sn == 0) );\n}\n```"
        ],
        "annotation_blocks": [
            "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn + size - i == 0);\n*/",
            "/*@ \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == i - 1;\n*/\nassume(sn != size) ==> (sn == 0);",
            "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant size >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == sum of first i-1 elements of the array;\n    \n    loop invariant sn == sum of all elements of the array;\n    loop invariant i == size + 1;\n    \n    loop assigns i, sn;\n    \n    loop variant size + 1 - i;\n*/\nif ( (sn != size) )\n{;\n    //@ assert ( (sn != size) ==> (sn == 0) );\n}",
            "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= size;\n    loop invariant (i <= size) ==> (i <= size);\n    loop invariant (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\n    loop invariant !(i <= size) ==> (sn != size) ==> (sn == 0);\n*/",
            "/*@\n  loop invariant (1 <= i <= size+1);\n  loop invariant (sn == i - 1);\n*/\nwhile ((i <= size)) {\n  {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n  }\n}\n/*@\n  loop invariant (sn == size);\n*/\nif ( (sn != size) )\n{;\n  //@ assert( (sn == 0) );\n}"
        ],
        "completions": [
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size + 1;\n    loop invariant sn >= 0;\n    loop invariant sn <= i - 1;\n    loop invariant (i <= size) ==> (sn + size - i == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size + 1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= i - 1 is partially proven to be inductive.\nloop invariant (i <= size) ==> (sn + size - i == 0) is preserved but not established.\nAssertion sn == 0: Unproven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == i - 1;\n*/\nassume(sn != size) ==> (sn == 0);",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant 1 <= i <= size + 1 is preserved but not established.\nloop invariant sn == i - 1 is partially proven to be inductive.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: sn == i - 1;\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 7,
                "annotations": "/*@ \n    loop invariant sn == 0;\n    loop invariant i == 1;\n    loop invariant size >= 0;\n    loop invariant sn >= 0;\n    loop invariant i <= size + 1;\n    \n    loop invariant 1 <= i <= size + 1;\n    loop invariant sn == sum of first i-1 elements of the array;\n    \n    loop invariant sn == sum of all elements of the array;\n    loop invariant i == size + 1;\n    \n    loop assigns i, sn;\n    \n    loop variant size + 1 - i;\n*/\nif ( (sn != size) )\n{;\n    //@ assert ( (sn != size) ==> (sn == 0) );\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "Annotation error on line 19: unexpected token 'of'",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\n\n\nloop invariant i4: sn >= 0;\n\n\n\n\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@ \n    loop invariant i >= 1;\n    loop invariant i <= size+1;\n    loop invariant sn >= 0;\n    loop invariant sn <= size;\n    loop invariant (i <= size) ==> (i <= size);\n    loop invariant (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\n    loop invariant !(i <= size) ==> (sn != size) ==> (sn == 0);\n*/",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant i >= 1 is partially proven to be inductive.\nloop invariant i <= size+1 is preserved but not established.\nloop invariant sn >= 0 is partially proven to be inductive.\nloop invariant sn <= size is established but not preserved.\nloop invariant (i <= size) ==> (i <= size) is partially proven to be inductive.\nloop invariant (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1)) is partially proven to be inductive.\nloop invariant !(i <= size) ==> (sn != size) ==> (sn == 0) is established but not preserved.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\n\nloop invariant i5: (i <= size) ==> (i <= size);\nloop invariant i6: (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            },
            {
                "num_solver_calls": 3,
                "annotations": "/*@\n  loop invariant (1 <= i <= size+1);\n  loop invariant (sn == i - 1);\n*/\nwhile ((i <= size)) {\n  {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n  }\n}\n/*@\n  loop invariant (sn == size);\n*/\nif ( (sn != size) )\n{;\n  //@ assert( (sn == 0) );\n}",
                "checker_output_for_annotations": false,
                "checker_message_for_annotations": "loop invariant (1 <= i <= size+1) is preserved but not established.\nloop invariant (sn == i - 1) is partially proven to be inductive.\nloop invariant (sn == size) is preserved but not established.\nAssertion sn == 0: Partially proven",
                "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\n\nloop invariant i2: (sn == i - 1);\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
                "checker_output_after_prune": false
            }
        ],
        "checker_output_for_combined_annotations": false,
        "checker_message_for_combined_annotations": "Annotation error on line 23: unexpected token 'of'",
        "code_with_combined_annotations": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\nloop invariant i2: i <= size + 1;\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\nloop invariant i5: (i <= size) ==> (sn + size - i == 0);\nloop invariant i6: 1 <= i <= size + 1;\nloop invariant i7: sn == i - 1;\nloop invariant i8: sn == 0;\nloop invariant i9: i == 1;\nloop invariant i10: size >= 0;\nloop invariant i11: sn == sum of first i-1 elements of the array;\nloop invariant i12: sn == sum of all elements of the array;\nloop invariant i13: i == size + 1;\nloop invariant i14: i <= size+1;\nloop invariant i15: sn <= size;\nloop invariant i16: (i <= size) ==> (i <= size);\nloop invariant i17: (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\nloop invariant i18: !(i <= size) ==> (sn != size) ==> (sn == 0);\nloop invariant i19: (1 <= i <= size+1);\nloop invariant i20: (sn == i - 1);\nloop invariant i21: (sn == size);\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "combined_annotation_num_solver_calls": 9,
        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n  \n  int i;\n  int size;\n  int sn;\n  \n  (sn = 0);\n  (i = 1);\n  \n  /*@\nloop invariant i1: i >= 1;\n\nloop invariant i3: sn >= 0;\nloop invariant i4: sn <= i - 1;\n\n\nloop invariant i7: sn == i - 1;\n\n\n\n\n\n\n\n\nloop invariant i16: (i <= size) ==> (i <= size);\nloop invariant i17: (i <= size && sn == (i-2)) ==> (i <= size && sn == (i-1));\nloop invariant i18: !(i <= size) ==> (sn != size) ==> (sn == 0);\n\nloop invariant i20: (sn == i - 1);\n\n*/\nwhile ((i <= size)) {\n    {\n    (i  = (i + 1));\n    (sn  = (sn + 1));\n    }\n\n  }\n  \nif ( (sn != size) )\n{;\n//@ assert( (sn == 0) );\n}\n\n}",
        "checker_output_after_prune": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/code2inv/1.c",
            "../data/benchmarks/code2inv/2.c",
            "../data/benchmarks/code2inv/3.c",
            "../data/benchmarks/code2inv/4.c",
            "../data/benchmarks/code2inv/5.c",
            "../data/benchmarks/code2inv/8.c",
            "../data/benchmarks/code2inv/10.c",
            "../data/benchmarks/code2inv/12.c",
            "../data/benchmarks/code2inv/15.c",
            "../data/benchmarks/code2inv/17.c",
            "../data/benchmarks/code2inv/20.c",
            "../data/benchmarks/code2inv/22.c",
            "../data/benchmarks/code2inv/25.c",
            "../data/benchmarks/code2inv/30.c",
            "../data/benchmarks/code2inv/34.c",
            "../data/benchmarks/code2inv/35.c",
            "../data/benchmarks/code2inv/36.c",
            "../data/benchmarks/code2inv/38.c",
            "../data/benchmarks/code2inv/40.c",
            "../data/benchmarks/code2inv/42.c",
            "../data/benchmarks/code2inv/43.c",
            "../data/benchmarks/code2inv/44.c",
            "../data/benchmarks/code2inv/45.c",
            "../data/benchmarks/code2inv/46.c",
            "../data/benchmarks/code2inv/47.c",
            "../data/benchmarks/code2inv/48.c",
            "../data/benchmarks/code2inv/50.c",
            "../data/benchmarks/code2inv/51.c",
            "../data/benchmarks/code2inv/52.c",
            "../data/benchmarks/code2inv/54.c",
            "../data/benchmarks/code2inv/55.c",
            "../data/benchmarks/code2inv/56.c",
            "../data/benchmarks/code2inv/57.c",
            "../data/benchmarks/code2inv/58.c",
            "../data/benchmarks/code2inv/63.c",
            "../data/benchmarks/code2inv/64.c",
            "../data/benchmarks/code2inv/66.c",
            "../data/benchmarks/code2inv/69.c",
            "../data/benchmarks/code2inv/71.c",
            "../data/benchmarks/code2inv/74.c",
            "../data/benchmarks/code2inv/76.c",
            "../data/benchmarks/code2inv/77.c",
            "../data/benchmarks/code2inv/78.c",
            "../data/benchmarks/code2inv/79.c",
            "../data/benchmarks/code2inv/80.c",
            "../data/benchmarks/code2inv/81.c",
            "../data/benchmarks/code2inv/82.c",
            "../data/benchmarks/code2inv/83.c",
            "../data/benchmarks/code2inv/85.c",
            "../data/benchmarks/code2inv/86.c",
            "../data/benchmarks/code2inv/87.c",
            "../data/benchmarks/code2inv/88.c",
            "../data/benchmarks/code2inv/89.c",
            "../data/benchmarks/code2inv/91.c",
            "../data/benchmarks/code2inv/92.c",
            "../data/benchmarks/code2inv/94.c",
            "../data/benchmarks/code2inv/95.c",
            "../data/benchmarks/code2inv/96.c",
            "../data/benchmarks/code2inv/97.c",
            "../data/benchmarks/code2inv/102.c",
            "../data/benchmarks/code2inv/103.c",
            "../data/benchmarks/code2inv/105.c",
            "../data/benchmarks/code2inv/108.c",
            "../data/benchmarks/code2inv/114.c",
            "../data/benchmarks/code2inv/115.c",
            "../data/benchmarks/code2inv/116.c",
            "../data/benchmarks/code2inv/117.c",
            "../data/benchmarks/code2inv/118.c"
        ],
        "failure": [
            "../data/benchmarks/code2inv/7.c",
            "../data/benchmarks/code2inv/9.c",
            "../data/benchmarks/code2inv/11.c",
            "../data/benchmarks/code2inv/13.c",
            "../data/benchmarks/code2inv/14.c",
            "../data/benchmarks/code2inv/19.c",
            "../data/benchmarks/code2inv/21.c",
            "../data/benchmarks/code2inv/23.c",
            "../data/benchmarks/code2inv/24.c",
            "../data/benchmarks/code2inv/26.c",
            "../data/benchmarks/code2inv/27.c",
            "../data/benchmarks/code2inv/29.c",
            "../data/benchmarks/code2inv/31.c",
            "../data/benchmarks/code2inv/32.c",
            "../data/benchmarks/code2inv/33.c",
            "../data/benchmarks/code2inv/41.c",
            "../data/benchmarks/code2inv/59.c",
            "../data/benchmarks/code2inv/60.c",
            "../data/benchmarks/code2inv/61.c",
            "../data/benchmarks/code2inv/62.c",
            "../data/benchmarks/code2inv/65.c",
            "../data/benchmarks/code2inv/67.c",
            "../data/benchmarks/code2inv/68.c",
            "../data/benchmarks/code2inv/70.c",
            "../data/benchmarks/code2inv/72.c",
            "../data/benchmarks/code2inv/75.c",
            "../data/benchmarks/code2inv/84.c",
            "../data/benchmarks/code2inv/101.c",
            "../data/benchmarks/code2inv/104.c",
            "../data/benchmarks/code2inv/106.c",
            "../data/benchmarks/code2inv/109.c",
            "../data/benchmarks/code2inv/111.c",
            "../data/benchmarks/code2inv/113.c"
        ],
        "skipped": [
            "../data/benchmarks/code2inv/6.c",
            "../data/benchmarks/code2inv/16.c",
            "../data/benchmarks/code2inv/18.c",
            "../data/benchmarks/code2inv/28.c",
            "../data/benchmarks/code2inv/37.c",
            "../data/benchmarks/code2inv/39.c",
            "../data/benchmarks/code2inv/49.c",
            "../data/benchmarks/code2inv/53.c",
            "../data/benchmarks/code2inv/73.c",
            "../data/benchmarks/code2inv/90.c",
            "../data/benchmarks/code2inv/93.c",
            "../data/benchmarks/code2inv/98.c",
            "../data/benchmarks/code2inv/99.c",
            "../data/benchmarks/code2inv/100.c",
            "../data/benchmarks/code2inv/107.c",
            "../data/benchmarks/code2inv/110.c",
            "../data/benchmarks/code2inv/112.c"
        ],
        "total": 101,
        "success_count": 68,
        "failure_count": 33,
        "success_rate": 0.6732673267326733
    }
}