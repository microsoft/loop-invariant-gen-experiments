{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- y and z are assigned unknown_int() values.\n- x is assigned either 1 or -1 based on unknown_int().\n- x goes through a series of if-else statements and gets incremented or decremented.\n\nLoop condition:\n- The loop continues as long as y < 100 and z < 100.\n\nLoop invariants:\nNow let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\n1. x does not change inside the loop, so it retains its value throughout the loop execution.\n2. The difference between y and z remains constant in each iteration, as y is incremented by x and z is decremented by x.\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y - z == \\at(y, Pre) - \\at(z, Pre);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- int y = unknown_int();\n- int z = unknown_int();\n- int x; (followed by multiple if-else statements to update x)\n\nLoop condition:\n- while (y < 100 && z < 100)\n\nNow, let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant x >= -15 && x <= 15;\n    loop invariant \\forall int i; 0 <= i <= 100 ==> (i <= y && i <= z) || (y < 100 && z < 100);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- y and z are assigned non-deterministic integer values.\n- x is assigned either 1 or -1 depending on the non-deterministic condition.\n- x is incremented or decremented 9 times, based on its current value.\n\nLoop condition:\n- The while loop continues as long as y < 100 and z < 100.\n\nNow, let's find the loop invariants:\n\nLoop invariants:\n- Before the loop execution, in every iteration of the loop, and after the loop termination, the following invariants hold:\n\n```\n/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1 + 9 * 2) || (x == -1 - 9 * 2);\n*/\n```\n\nThese invariants are true before the loop execution, during every iteration, and after the loop termination. They also imply the loop's post-condition, which is the safe termination of the program."
                ],
                "output": [
                    "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y - z == \\at(y, Pre) - \\at(z, Pre);\n*/",
                    "/*@ \n    loop invariant x >= -15 && x <= 15;\n    loop invariant \\forall int i; 0 <= i <= 100 ==> (i <= y && i <= z) || (y < 100 && z < 100);\n*/",
                    "/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1 + 9 * 2) || (x == -1 - 9 * 2);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y - z == \\at(y, Pre) - \\at(z, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 55: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -15 && x <= 15;\n    loop invariant \\forall int i; 0 <= i <= 100 ==> (i <= y && i <= z) || (y < 100 && z < 100);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -15 && x <= 15 is inductive.\nloop invariant \\forall int i; 0 <= i <= 100 ==> (i <= y && i <= z) || (y < 100 && z < 100) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1 + 9 * 2) || (x == -1 - 9 * 2);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y <= 100 is preserved but not established.\nloop invariant z <= 100 is preserved but not established.\nloop invariant (x == 1 + 9 * 2) || (x == -1 - 9 * 2) is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(x, Pre);\n    loop invariant y - z == \\at(y, Pre) - \\at(z, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\n\n\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -15 && x <= 15;\n    loop invariant \\forall int i; 0 <= i <= 100 ==> (i <= y && i <= z) || (y < 100 && z < 100);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\nloop invariant i1: x >= -15 && x <= 15;\n\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= 100;\n    loop invariant z <= 100;\n    loop invariant (x == 1 + 9 * 2) || (x == -1 - 9 * 2);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\n\n\n\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\n\n\nloop invariant i3: x >= -15 && x <= 15;\n\n\n\n\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    while (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "1. Identify the loop: In the given program, the loop is:\n```\nwhile (y<100 && z<100) {\n    y = y+x;\n    z = z-x;\n}\n```\n\n2. Identify the loop variables: The loop variables are `y`, `z`, and `x`.\n\n3. Find the ranking function: We need to find an expression involving the loop variables that decreases with every iteration of the loop. One such expression is `100 - y + 100 - z`.\n\n4. Check if the ranking function is valid: The ranking function must be positive for the loop to continue executing and must decrease with every iteration.\n\n- The loop continues executing if `y < 100` and `z < 100`. In this case, the ranking function `100 - y + 100 - z` is positive.\n\n- In each iteration, `y` increases by `x` and `z` decreases by `x`. Therefore, the sum `y + z` remains constant, and the ranking function `100 - y + 100 - z` decreases in every iteration.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 100 - y + 100 - z;\n*/\n```",
                    "First, let's analyze the loop:\n\n```\nwhile (y < 100 && z < 100) {\n    y = y + x;\n    z = z - x;\n}\n```\n\nWe can see that the loop continues executing as long as both `y` and `z` are less than 100. In each iteration, the value of `y` is increased by `x`, and the value of `z` is decreased by `x`.\n\nSince `x` is either an odd or even number, we can consider two cases:\n\n1. If `x` is odd, then `y` and `z` will always have different parities (one will be even and the other odd). In this case, the difference between 100 and `y` or `z` will always be even. We can use this difference as the ranking function.\n\n2. If `x` is even, then `y` and `z` will always have the same parity (both will be either even or odd). In this case, the difference between 100 and the minimum of `y` and `z` will always be even. We can use this difference as the ranking function.\n\nThus, we can define the ranking function as follows:\n\n```\n/*@\n    loop invariant 0 <= y && y <= 100;\n    loop invariant 0 <= z && z <= 100;\n    loop variant (x % 2 == 1) ? (100 - y) / 2 : (100 - min(y, z)) / 2;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. It is positive as long as the loop continues executing (since `y < 100` and `z < 100`).\n2. It decreases with every successive iteration of the loop, as either `y` or `z` is getting closer to 100.\n3. It takes into account both cases of `x` being odd or even."
                ],
                "output": [
                    "/*@\n    loop variant 100 - y + 100 - z;\n*/",
                    "/*@\n    loop invariant 0 <= y && y <= 100;\n    loop invariant 0 <= z && z <= 100;\n    loop variant (x % 2 == 1) ? (100 - y) / 2 : (100 - min(y, z)) / 2;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\nloop invariant i3: x >= -15 && x <= 15;\nloop variant 100 - y + 100 - z;\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x >= -15 && x <= 15 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint z = unknown_int();\n    int x;\n    if (unknown_int()) {\n        x = 1;\n    } else {\n        x = -1;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    if (x > 0) {\n        x++;\n    } else {\n        x--;\n    }\n    /*@\nloop invariant i3: x >= -15 && x <= 15;\nloop variant (x % 2 == 1) ? (100 - y) / 2 : (100 - min(y, z)) / 2;\n*/\nwhile (y<100 && z<100) {\n        y = y+x;\n        z = z-x;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 56: unbound logic function min. Ignoring loop annotation"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 84,
        "success_count": 32,
        "failure_count": 52,
        "success_rate": 0.38095238095238093
    }
}