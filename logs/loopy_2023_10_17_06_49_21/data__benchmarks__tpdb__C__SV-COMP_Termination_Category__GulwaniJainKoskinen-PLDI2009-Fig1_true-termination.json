{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- int id = unknown_int();\n- int maxId = unknown_int();\n- if(0 <= id && id < maxId)\n- int tmp = id+1;\n\nLoop condition:\n- while(tmp!=id && unknown_int())\n\nNow, let's derive the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id && unknown_int()) ==> (tmp == id + 1 || tmp > id);\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- int id = unknown_int();\n- int maxId = unknown_int();\n- if(0 <= id && id < maxId)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- while(tmp!=id && unknown_int())\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> unknown_int() == 0;\n*/\n```",
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n1. `int id = unknown_int();`\n2. `int maxId = unknown_int();`\n3. `if(0 <= id && id < maxId) { ... }` - We need to consider the code inside this block.\n4. `int tmp = id+1;`\n\nNow let's analyze the loop body and make a note of the loop condition:\n- `while(tmp!=id && unknown_int()) { ... }`\n\nNext, we will output loop invariants that are true before the loop execution, in every iteration of the loop and after the loop termination, such that the loop invariants imply the post condition.\n\n```c\n/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId + 1;\n    loop invariant id == tmp ==> tmp == maxId + 1;\n*/\n```\n\nHere are the loop invariants:\n1. `0 <= id && id < maxId` - Before the loop execution and in every iteration, `id` is between 0 and `maxId`.\n2. `0 <= tmp && tmp <= maxId + 1` - Before the loop execution, in every iteration and after the loop termination, `tmp` is between 0 and `maxId` + 1.\n3. `id < tmp ==> tmp <= maxId + 1` - If `id` is less than `tmp`, then `tmp` is less than or equal to `maxId` + 1.\n4. `id == tmp ==> tmp == maxId + 1` - If `id` is equal to `tmp`, then `tmp` is equal to `maxId` + 1."
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id && unknown_int()) ==> (tmp == id + 1 || tmp > id);\n*/",
                    "/*@\n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> unknown_int() == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId + 1;\n    loop invariant id == tmp ==> tmp == maxId + 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id && unknown_int()) ==> (tmp == id + 1 || tmp > id);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> unknown_int() == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId + 1;\n    loop invariant id == tmp ==> tmp == maxId + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant id < tmp ==> tmp <= maxId + 1 is inductive.\nloop invariant id == tmp ==> tmp == maxId + 1 is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id && unknown_int()) ==> (tmp == id + 1 || tmp > id);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp == id + 1 ==> unknown_int() == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id && id < maxId;\n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant id < tmp ==> tmp <= maxId + 1;\n    loop invariant id == tmp ==> tmp == maxId + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId;\nloop invariant i2: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i3: id < tmp ==> tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\n\n\nloop invariant i11: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i13: id < tmp ==> tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop conditions and variables involved. The loop continues executing as long as `tmp != id` and `unknown_int()` returns a non-zero value. The `tmp` variable gets incremented by 1 if `tmp <= maxId`, otherwise, it is reset to 0.\n\nLet's consider the expression `maxId - tmp` as a potential ranking function. This expression is always positive since `0 <= tmp <= maxId`.\n\nNow, let's check if this expression decreases with every iteration of the loop. If `tmp <= maxId`, then `tmp` is incremented by 1, causing `maxId - tmp` to decrease by 1. If `tmp > maxId`, then `tmp` is reset to 0, and `maxId - tmp` becomes `maxId - 0`, which is equal to `maxId`. Since `maxId` is a constant, the expression remains the same.\n\nHowever, we must also consider the condition `unknown_int()`. If `unknown_int()` returns 0, the loop terminates regardless of the value of `tmp`. Therefore, we can include this condition in a lexicographic ranking function to ensure that the loop terminates.\n\nThe final ranking function is:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant unknown_int();\n*/\n```\n\nThis ranking function is valid because:\n\n1. The expressions are always positive when the loop executes.\n2. The first expression decreases when `tmp <= maxId`.\n3. The second expression ensures termination when `unknown_int()` returns 0.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile(tmp!=id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nNow, we need to find a ranking function for this loop. We can use a lexicographic ranking function with two expressions. Let's use the following expressions:\n\n1. maxId - tmp\n2. maxId - id\n\nNow, let's analyze why this is a valid ranking function:\n\n1. Both expressions are positive for the loop to execute: Since 0 <= id < maxId and tmp = id + 1, we have 0 < tmp <= maxId. Thus, maxId - tmp and maxId - id are both positive.\n\n2. The first expression (maxId - tmp) decreases or remains the same: In each iteration, either tmp increases by 1 (when tmp <= maxId) or resets to 0 (when tmp > maxId). In both cases, maxId - tmp either decreases or remains the same.\n\n3. If the first expression remains the same, the second expression (maxId - id) decreases: If maxId - tmp remains the same, it means tmp reached maxId + 1, and tmp is reset to 0. In this case, the loop will eventually terminate when tmp == id, and since id is fixed, the second expression (maxId - id) decreases.\n\nSo, the lexicographic ranking function for the loop is:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/\n```\n\nThis ranking function is valid because it ensures that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant maxId - tmp;\n    loop variant unknown_int();\n*/",
                    "/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, unknown_int() };\n/*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\nloop invariant i11: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i13: id < tmp ==> tmp <= maxId + 1;\nloop invariant measure.a == maxId - tmp && measure.b == unknown_int();loop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        //@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = unknown_int();}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 31: unexpected token ')'"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, maxId - id };\n/*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\nloop invariant i11: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i13: id < tmp ==> tmp <= maxId + 1;\nloop invariant measure.a == maxId - tmp && measure.b == maxId - id;loop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        //@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = maxId - id;}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 68,
        "success_count": 25,
        "failure_count": 43,
        "success_rate": 0.36764705882352944
    }
}