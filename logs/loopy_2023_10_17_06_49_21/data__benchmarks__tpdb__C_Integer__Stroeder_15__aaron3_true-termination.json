{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\twhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\twhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, we note the loop condition and the variable assignments before the loop:\n```\nx = unknown_int();\ny = unknown_int();\nz = unknown_int();\ntx = unknown_int();\n\nwhile (x >= y && x <= tx + z) {\n    ...\n}\n```\n\nNow, we analyze the loop body and derive the loop invariants. We will use implications to handle the conditional nature of the loop body.\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n    loop invariant (unknown_int() != 0) ==> (tx == \\old(x));\n    loop invariant (unknown_int() != 0) ==> (x == \\old(unknown_int()));\n    loop invariant (unknown_int() == 0) ==> (y == \\old(y) + 1);\n*/\n```",
                    "First, let's list the pre-conditions or variable assignments:\n\n1. x, y, z, and tx are assigned non-deterministic integer values.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: x >= y && x <= tx + z\n\nWe need to find loop invariants that hold:\n\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post condition.\n\nFrom the loop body, we can observe the following:\n\n1. When the if condition is true, z is decremented by 1, tx is assigned the value of x, and x is assigned a non-deterministic integer value.\n2. When the if condition is false, y is incremented by 1.\n\nNow, let's output the loop invariants for the given loop:\n\n```\n/*@ \n    loop invariant y <= x;\n    loop invariant tx <= x + z;\n    loop invariant x >= y ==> y <= x - 1;\n    loop invariant x <= tx + z ==> y <= tx;\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x, y, z, and tx are assigned non-deterministic integer values.\n\nLoop condition:\n- x >= y && x <= tx + z\n\nNow let's find the loop invariants.\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n    loop invariant (unknown_int() != 0) ==> (tx == \\old(x));\n    loop invariant (unknown_int() != 0) ==> (x == \\old(unknown_int()));\n    loop invariant (unknown_int() == 0) ==> (y == \\old(y) + 1);\n*/",
                    "/*@ \n    loop invariant y <= x;\n    loop invariant tx <= x + z;\n    loop invariant x >= y ==> y <= x - 1;\n    loop invariant x <= tx + z ==> y <= tx;\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n    loop invariant (unknown_int() != 0) ==> (tx == \\old(x));\n    loop invariant (unknown_int() != 0) ==> (x == \\old(unknown_int()));\n    loop invariant (unknown_int() == 0) ==> (y == \\old(y) + 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= x;\n    loop invariant tx <= x + z;\n    loop invariant x >= y ==> y <= x - 1;\n    loop invariant x <= tx + z ==> y <= tx;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y <= x is neither established nor preserved.\nloop invariant tx <= x + z is neither established nor preserved.\nloop invariant x >= y ==> y <= x - 1 is neither established nor preserved.\nloop invariant x <= tx + z ==> y <= tx is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y is neither established nor preserved.\nloop invariant x <= tx + z is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 5,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n    loop invariant (unknown_int() != 0) ==> (tx == \\old(x));\n    loop invariant (unknown_int() != 0) ==> (x == \\old(unknown_int()));\n    loop invariant (unknown_int() == 0) ==> (y == \\old(y) + 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= x;\n    loop invariant tx <= x + z;\n    loop invariant x >= y ==> y <= x - 1;\n    loop invariant x <= tx + z ==> y <= tx;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x <= tx + z;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t/*@\n\n\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 6,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\twhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (x >= y && x <= tx + z) {\n    if (unknown_int() != 0) {\n        z = z - 1;\n        tx = x;\n        x = unknown_int();\n    } else {\n        y = y + 1;\n    }\n}\n```\n\nNow, we need to find the ranking function for this loop. We can see that the loop continues executing as long as `x >= y` and `x <= tx + z`. We need to find an expression that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nThe loop has two branches: one where `z` decreases and the other where `y` increases. Since `x <= tx + z`, we know that as `z` decreases, the upper bound for `x` decreases. Similarly, as `y` increases, the lower bound for `x` increases. Therefore, we can use a lexicographic ranking function with two expressions: `z` and `tx - y`.\n\nThe ranking function for this loop is:\n\n```\n/*@\n    loop variant z;\n    loop variant tx - y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive for the loop to continue executing: `z` is non-negative and `tx - y` is non-negative since `x >= y` and `x <= tx + z`.\n2. It decreases with every iteration of the loop: When `z` decreases, the value of the first expression decreases. When `y` increases, the value of the second expression decreases.\n\nThus, this ranking function proves that the loop must terminate.",
                    "First, let's analyze the loop conditions and the loop body. The loop continues as long as `x >= y` and `x <= tx + z`. Inside the loop, either `z` decreases and `tx` becomes `x`, or `y` increases. The value of `x` can change in the first branch, but it is not guaranteed to increase or decrease.\n\nNow, let's find the ranking function. Since there are two variables that change (`y` and `z`), we will use a lexicographic ranking function. We can use the following ranking function:\n\n```\n/*@\n    loop variant tx + z - x;\n    loop variant x - y;\n*/\n```\n\nLet's explain why it is a valid ranking function:\n\n1. The expressions are positive for the loop to continue executing: As long as `x >= y` and `x <= tx + z`, both `tx + z - x` and `x - y` will be positive.\n\n2. Either `tx + z - x` must decrease, or if it remains the same, `x - y` must decrease: \n\n   - If the first branch of the loop is executed, `z` decreases by 1, and `tx` becomes `x`. Therefore, the value of `tx + z - x` will decrease by 1.\n   \n   - If the first branch is not executed and the second branch is executed, the value of `y` increases by 1. In this case, `tx + z - x` remains the same, but the value of `x - y` decreases by 1.\n\nSince the value of the ranking function decreases in each iteration, and the expressions are positive for the loop to continue executing, this is a valid ranking function."
                ],
                "output": [
                    "/*@\n    loop variant z;\n    loop variant tx - y;\n*/",
                    "/*@\n    loop variant tx + z - x;\n    loop variant x - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t//@ ghost variant_expression measure = { z, tx - y };\n/*@\n\nloop invariant measure.a == z && measure.b == tx - y;loop variant measure for lexicographic;\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t//@ ghost measure.a = z;\n//@ ghost measure.b = tx - y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z, tx;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\ttx = unknown_int();\n\t//@ ghost variant_expression measure = { tx + z - x, x - y };\n/*@\n\nloop invariant measure.a == tx + z - x && measure.b == x - y;loop variant measure for lexicographic;\n*/\nwhile (x >= y && x <= tx + z) {\n\t\tif (unknown_int() != 0) {\n\t\t\tz = z - 1;\n\t\t\ttx = x;\n\t\t\tx = unknown_int();\n\t\t} else {\n\t\t\ty = y + 1;\n\t\t}\n\t//@ ghost measure.a = tx + z - x;\n//@ ghost measure.b = x - y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 113,
        "success_count": 43,
        "failure_count": 70,
        "success_rate": 0.3805309734513274
    }
}