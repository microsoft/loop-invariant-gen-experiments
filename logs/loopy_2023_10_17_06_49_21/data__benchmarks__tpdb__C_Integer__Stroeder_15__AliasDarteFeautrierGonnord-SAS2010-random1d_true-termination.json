{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "1. Pre-conditions or variable assignments in the program:\n   - max is initialized with unknown_int().\n   - a is initialized as 0 when max > 0.\n   - x is initialized as 1 when max > 0.\n\n2. Loop condition and body analysis:\n   - The loop condition is x <= max.\n   - Inside the loop, a is incremented or decremented based on the value of unknown_int().\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= -(x - 1);\n    loop invariant a <= x - 1;\n*/\n```",
                    "First, let's note down the pre-conditions or variable assignments in the program:\n\n1. max is a non-deterministic integer (unknown_int()).\n2. a and x are initialized only if max > 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is x <= max.\n2. Inside the loop, a is incremented or decremented based on the non-deterministic integer (unknown_int()).\n\nNow, let's derive the loop invariants:\n\n1. x is always greater than or equal to 1 and less than or equal to max+1.\n2. The difference between a and x is constant throughout the loop (let's denote this constant as diff).\n3. The value of max is constant throughout the loop.\n\nHere are the loop invariants for the while loop in the program:\n\n```\n/*@\n    loop invariant 1 <= x <= max+1;\n    loop invariant a - x == diff;\n    loop invariant max == \\at(max, Pre);\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. max is assigned an unknown integer value.\n2. If max > 0, a and x are initialized as follows: a = 0, x = 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: x <= max\n\nLoop body: If unknown_int() != 0, a is incremented by 1. Else, a is decremented by 1. x is incremented by 1 in each iteration.\n\nNow, we can output the loop invariants:\n\n```\n/*@\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a <= x;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= -(x - 1);\n    loop invariant a <= x - 1;\n*/",
                    "/*@\n    loop invariant 1 <= x <= max+1;\n    loop invariant a - x == diff;\n    loop invariant max == \\at(max, Pre);\n*/",
                    "/*@\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a <= x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= -(x - 1);\n    loop invariant a <= x - 1;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant a >= -(x - 1) is inductive.\nloop invariant a <= x - 1 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 1 <= x <= max+1;\n    loop invariant a - x == diff;\n    loop invariant max == \\at(max, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable diff. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a <= x;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant -x <= a <= x is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= -(x - 1);\n    loop invariant a <= x - 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x <= max + 1;\nloop invariant i3: a >= -(x - 1);\nloop invariant i4: a <= x - 1;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 1 <= x <= max+1;\n    loop invariant a - x == diff;\n    loop invariant max == \\at(max, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x <= max+1;\n\n\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a <= x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x <= max + 1;\nloop invariant i3: -x <= a <= x;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 2,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x <= max + 1;\nloop invariant i3: a >= -(x - 1);\nloop invariant i4: a <= x - 1;\nloop invariant i5: 1 <= x <= max+1;\n\n\nloop invariant i10: -x <= a <= x;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x <= max) {\n    if (unknown_int() != 0) {\n        a = a + 1;\n    } else {\n        a = a - 1;\n    }\n    x = x + 1;\n}\n```\n\nThe loop continues to execute as long as `x <= max`. Now let's find a ranking function for this loop.\n\nThe ranking function for this loop is `max - x`, and it is a valid ranking function because:\n\n1. The value of the expression must decrease with every successive iteration of the loop: The value of `x` increases by 1 in each iteration (`x = x + 1`), so `max - x` will decrease in each iteration.\n\n2. The value must be positive for the loop to continue executing: The loop continues to execute as long as `x <= max`, which means that `max - x` must be positive (greater than or equal to 0) for the loop to continue executing.\n\nNow let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant max - x;\n*/\n```",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x <= max) {\n    if (unknown_int() != 0) {\n        a = a + 1;\n    } else {\n        a = a - 1;\n    }\n    x = x + 1;\n}\n```\n\nNow, we will find the ranking function for this loop. The ranking function should be an expression over the program variables that are live at the loop head and should decrease with each iteration of the loop. The value of the ranking function must be positive for the loop to continue executing.\n\nIn this case, the variables we need to consider are `x` and `max`. Since `x` is incremented by 1 in each iteration of the loop, and the loop continues while `x <= max`, we can use the expression `max - x` as our ranking function:\n\n```\n/*@\n    loop variant max - x;\n*/\n```\n\nLet's now explain why this is a valid ranking function:\n\n1. The value of the ranking function, `max - x`, is positive for the loop to continue executing. Since the loop condition is `x <= max`, it's guaranteed that `max - x` will be positive or zero.\n\n2. The value of the ranking function decreases with each iteration of the loop. In each iteration, `x` is incremented by 1 (`x = x + 1`), so the value of `max - x` will decrease by 1 in each iteration.\n\n3. The loop must terminate because the ranking function will eventually reach 0. When `x` becomes greater than `max`, the loop will exit, and the program will continue to execute the following instructions.\n\nTherefore, the ranking function `max - x` is valid for the given loop in the program."
                ],
                "output": [
                    "/*@\n    loop variant max - x;\n*/",
                    "/*@\n    loop variant max - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x <= max + 1;\nloop invariant i3: a >= -(x - 1);\nloop invariant i4: a <= x - 1;\nloop invariant i5: 1 <= x <= max+1;\nloop invariant i10: -x <= a <= x;\nloop variant max - x;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant a >= -(x - 1) is inductive.\nloop invariant a <= x - 1 is inductive.\nloop invariant 1 <= x <= max+1 is inductive.\nloop invariant -x <= a <= x is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i1: 1 <= x;\nloop invariant i2: x <= max + 1;\nloop invariant i3: a >= -(x - 1);\nloop invariant i4: a <= x - 1;\nloop invariant i5: 1 <= x <= max+1;\nloop invariant i10: -x <= a <= x;\nloop variant max - x;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant a >= -(x - 1) is inductive.\nloop invariant a <= x - 1 is inductive.\nloop invariant 1 <= x <= max+1 is inductive.\nloop invariant -x <= a <= x is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 118,
        "success_count": 45,
        "failure_count": 73,
        "success_rate": 0.3813559322033898
    }
}