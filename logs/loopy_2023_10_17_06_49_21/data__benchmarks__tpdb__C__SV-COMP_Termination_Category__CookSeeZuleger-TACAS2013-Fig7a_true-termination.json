{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the variable assignments in the program:\n- x, y, and d are assigned values from unknown_int(), which means they can have any integer value.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x > 0 && y > 0 && d > 0).\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, x, y, and d can have any integer value, so there is no specific invariant related to their values before the loop starts.\n\n2. During the loop execution, the loop condition (x > 0 && y > 0 && d > 0) is always true. In each iteration, either x is decremented by 1 or y is decremented by 1, and d is always updated to a new value from unknown_int(). However, we can't derive any additional invariants from this information, as the new values of x, y, and d are non-deterministic.\n\n3. After the loop termination, at least one of x, y, or d is less than or equal to 0. But this doesn't help us find any loop invariants that must hold during the loop execution.\n\nConsidering the above points, the only loop invariant we can identify is the loop condition itself:\n\n```\n/*@ \n    loop invariant x > 0 && y > 0 && d > 0;\n*/\n```\n\nAlthough this invariant may not be sufficient for proving any post-condition, it's the only invariant that holds for every iteration of the loop, given the non-deterministic nature of the input values and updates in the loop body.",
                    "First, let's analyze the given code and make notes of the important information:\n\n1. Pre-conditions or variable assignments in the program:\n   `x`, `y`, and `d` are assigned non-deterministic integer values using `unknown_int()` function.\n\n2. Loop condition:\n   The loop continues executing as long as `x > 0`, `y > 0`, and `d > 0`.\n\nNow, let's derive the loop invariants:\n\n1. Before the loop execution, `x`, `y`, and `d` are assigned non-deterministic integer values. Thus, we don't have any specific bounds on their values.\n\n2. In every iteration of the loop, the values of `x`, `y`, and `d` change non-deterministically. However, we know that `x > 0`, `y > 0`, and `d > 0` hold true during the loop.\n\n3. After the loop termination, at least one of the conditions `x <= 0`, `y <= 0`, or `d <= 0` holds true.\n\nConsidering the above analysis, we can come up with the following loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/\n```",
                    "First, let's analyze the given program:\n\nPre-conditions:\n- x, y, and d are assigned unknown integer values before the loop.\n\nLoop condition:\n- The loop continues as long as x > 0, y > 0, and d > 0.\n\nNow, let's find the loop invariants:\n\nLoop invariants:\n1. x, y, and d are non-negative inside the loop.\n2. If x is decreased by 1, d is assigned an unknown integer value.\n3. If y is decreased by 1, x is assigned an unknown integer value and d is decreased by 1.\n\nNow, let's write the loop invariants in ACSL:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> x >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> y >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> d >= 1;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x > 0 && y > 0 && d > 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> x >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> y >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> d >= 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x > 0 && y > 0 && d > 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x > 0 && y > 0 && d > 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> x >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> y >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> d >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\nloop invariant (x > 0 && y > 0 && d > 0) ==> x >= 1 is inductive.\nloop invariant (x > 0 && y > 0 && d > 0) ==> y >= 1 is inductive.\nloop invariant (x > 0 && y > 0 && d > 0) ==> d >= 1 is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x > 0 && y > 0 && d > 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> x >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> y >= 1;\n    loop invariant (x > 0 && y > 0 && d > 0) ==> d >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\nloop invariant i4: (x > 0 && y > 0 && d > 0) ==> x >= 1;\nloop invariant i5: (x > 0 && y > 0 && d > 0) ==> y >= 1;\nloop invariant i6: (x > 0 && y > 0 && d > 0) ==> d >= 1;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop invariant conditions. The loop continues executing as long as `x > 0`, `y > 0`, and `d > 0`. We need to find a ranking function that decreases with every iteration and is positive for the loop to continue executing.\n\nIn this loop, we have two branches. In the first branch, `x` decreases by 1, and `d` gets assigned a new unknown value. In the second branch, `x` gets assigned a new unknown value, `y` decreases by 1, and `d` decreases by 1.\n\nTo find a lexicographic ranking function, we can consider the variables `x`, `y`, and `d`. Let's define the lexicographic ranking function as `(x, y, d)`.\n\nNow, let's analyze the loop and its branches to see if this ranking function is valid:\n\n1. In the first branch, `x` decreases by 1, so the first element of the ranking function decreases. The value of `d` changes, but it doesn't matter since `x` has already decreased.\n\n2. In the second branch, `x` gets assigned a new unknown value, so we can't guarantee that it decreases. However, `y` decreases by 1, so the second element of the ranking function decreases. The value of `d` also decreases, but it doesn't matter since `y` has already decreased.\n\nSince the ranking function `(x, y, d)` satisfies the conditions for a lexicographic ranking function, we can conclude that it is valid for this loop. Therefore, the loop will terminate.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n    loop variant d;\n*/\n```",
                    "First, let's analyze the loop and its conditions:\n\n1. The loop continues as long as x > 0, y > 0, and d > 0.\n2. Inside the loop, there are two cases:\n   a. If unknown_int() returns a non-zero value, x is decreased by 1, and d is assigned a new unknown value.\n   b. If unknown_int() returns zero, x is assigned a new unknown value, y is decreased by 1, and d is decreased by 1.\n\nTo find the ranking function, we need expressions that decrease with every successive iteration of the loop and are positive for the loop to continue executing.\n\nIn this case, we can use a lexicographic ranking function with two expressions:\n\n```\n/*@\n    loop variant y;\n    loop variant d;\n*/\n```\n\nExplanation:\n\n1. The value of y is always positive for the loop to execute since the loop continues as long as y > 0. In case b, y decreases by 1 in each iteration, ensuring that the value of the expression y decreases.\n2. The value of d is also always positive for the loop to execute as the loop continues as long as d > 0. In case a, d can be any unknown positive value, so it might not decrease. However, in case b, d decreases by 1 in each iteration.\n\nTherefore, the lexicographic ranking function (y, d) is valid for this loop because it meets the requirements of being positive for the loop to continue executing, and either y or d decreases with every successive iteration of the loop, ensuring that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n    loop variant y;\n    loop variant d;\n*/",
                    "/*@\n    loop variant y;\n    loop variant d;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\nint c;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b) ||\n (v1.c >= 0 && v1.a == v2.a && v1.b == v2.b && v1.c > v2.c);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    //@ ghost variant_expression measure = { x, y, d };\n/*@\n\nloop invariant measure.a == x && measure.b == y && measure.c == d;loop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    //@ ghost measure.a = x;\n//@ ghost measure.b = y;\n//@ ghost measure.c = d;}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    //@ ghost variant_expression measure = { y, d };\n/*@\n\nloop invariant measure.a == y && measure.b == d;loop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    //@ ghost measure.a = y;\n//@ ghost measure.b = d;}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c"
        ],
        "skipped": [],
        "total": 64,
        "success_count": 24,
        "failure_count": 40,
        "success_rate": 0.375
    }
}