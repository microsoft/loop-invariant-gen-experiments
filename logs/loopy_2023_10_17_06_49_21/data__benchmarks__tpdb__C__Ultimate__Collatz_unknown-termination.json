{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\twhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\twhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the loop condition and variable assignments:\n\n- The loop condition is `y > 1`.\n- `y` is assigned a value from the `unknown_int()` function.\n\nNow, let's analyze the loop body:\n\n- If `y % 2 == 0`, then `y = y / 2`.\n- Else, `y = 3 * y + 1`.\n\nLet's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n  loop invariant y >= 1;\n  loop invariant (y % 2 == 0) ==> (y / 2 < y);\n  loop invariant (y % 2 != 0) ==> (3 * y + 1 > y);\n*/\n```",
                    "First, let's note down the pre-conditions and variable assignments in the program:\n\n- `int y = unknown_int();`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- `while (y > 1)`\n\nHere are the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\n*/\n```\n\nThese invariants indicate that:\n\n1. `y` is always greater than or equal to 1 during the loop execution.\n2. Any integer `k` between 0 and `y` (inclusive) is either 1, even, or odd. This invariant accounts for the behavior of the loop, as it divides `y` by 2 if it is even, and multiplies it by 3 and adds 1 if it is odd.",
                    "First, let's note the important information in the program:\n\n1. Variable assignment: `int y = unknown_int();`\n2. Loop condition: `while (y > 1)`\n3. Loop body: contains conditional statements based on `y % 2 == 0`.\n\nNow, let's derive the loop invariants:\n\n- The value of `y` decreases in each iteration when `y % 2 == 0`.\n- The value of `y` increases when `y % 2 != 0`, but eventually decreases due to the nature of the Collatz conjecture (this is a known conjecture, and we assume it holds true).\n\nConsidering the above points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 != 0 ==> y > 2 * k);\n*/\n```"
                ],
                "output": [
                    "/*@ \n  loop invariant y >= 1;\n  loop invariant (y % 2 == 0) ==> (y / 2 < y);\n  loop invariant (y % 2 != 0) ==> (3 * y + 1 > y);\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 != 0 ==> y > 2 * k);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant y >= 1;\n  loop invariant (y % 2 == 0) ==> (y / 2 < y);\n  loop invariant (y % 2 != 0) ==> (3 * y + 1 > y);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 1 is preserved but not established.\nloop invariant (y % 2 == 0) ==> (y / 2 < y) is inductive.\nloop invariant (y % 2 != 0) ==> (3 * y + 1 > y) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 1 is preserved but not established.\nloop invariant \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 != 0 ==> y > 2 * k);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= 1 is preserved but not established.\nloop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k) is inductive.\nloop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 != 0 ==> y > 2 * k) is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant y >= 1;\n  loop invariant (y % 2 == 0) ==> (y / 2 < y);\n  loop invariant (y % 2 != 0) ==> (3 * y + 1 > y);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\t/*@\n\nloop invariant i2: \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\n*/\nwhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 1;\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n    loop invariant \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 != 0 ==> y > 2 * k);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\t/*@\n\nloop invariant i2: \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n\n*/\nwhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\t/*@\n\n\n\nloop invariant i5: \\forall integer k; (0 <= k <= y) ==> (k == 1 || k % 2 == 0 || k % 2 == 1);\nloop invariant i7: \\forall integer k; (0 <= k <= y / 2) ==> (y % 2 == 0 ==> y >= 2 * k);\n\n*/\nwhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint y = unknown_int();\n\twhile (y > 1) {\n\t\tif (y % 2 == 0) {\n\t\t\ty = y / 2;\n\t\t} else {\n\t\t\ty = 3*y + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "Finding a ranking function for this loop is a challenging task due to the nature of the loop condition and operations inside the loop. The loop in question is a variant of the famous Collatz Conjecture, which states that for any positive integer value of `y`, the sequence of numbers generated by the loop will eventually reach the number 1, at which point the loop terminates. However, despite extensive computational evidence supporting the conjecture, no general proof or ranking function has been found for this problem.\n\nTherefore, it is not possible to provide a ranking function for the given loop in the traditional sense. The Collatz Conjecture remains an open problem in mathematics, and finding a ranking function for this loop would essentially solve the conjecture.",
                    "First, let's analyze the loop in the given program. The loop continues while `y > 1`. Inside the loop, there are two branches: if `y` is even, it's divided by 2, and if `y` is odd, it's multiplied by 3 and added 1.\n\nFor this program, it's not trivial to find a single ranking function that can prove the termination, mainly because of the `3*y + 1` operation. But we can use a lexicographic ranking function, which consists of two expressions.\n\nFor the first expression, let's use the parity of `y`. It will be 0 for even `y` and 1 for odd `y`. We can represent it as `y % 2`.\n\nFor the second expression, let's use the value of `y` itself.\n\nNow let's check if these expressions make a valid lexicographic ranking function:\n\n1. Both expressions are positive for the loop to execute: `y % 2` is either 0 or 1, and `y` is positive because the loop condition is `y > 1`.\n\n2. Either the first expression decreases or remains the same, and if it remains the same, the second expression must decrease:\n   - When `y` is even, `y % 2 = 0`, and `y` decreases since it's divided by 2.\n   - When `y` is odd, `y % 2 = 1`, and in the next iteration, `y` becomes even (`3*y + 1` is always even for odd `y`), so the first expression decreases.\n\nThus, the lexicographic ranking function for this loop is:\n```\n/*@\n    loop variant y % 2;\n    loop variant y;\n*/\n```\nThis lexicographic ranking function proves that the loop must terminate."
                ],
                "output": [
                    [
                        "ERROR: Output does not contain at least 1 complete code block",
                        "Finding a ranking function for this loop is a challenging task due to the nature of the loop condition and operations inside the loop. The loop in question is a variant of the famous Collatz Conjecture, which states that for any positive integer value of `y`, the sequence of numbers generated by the loop will eventually reach the number 1, at which point the loop terminates. However, despite extensive computational evidence supporting the conjecture, no general proof or ranking function has been found for this problem.\n\nTherefore, it is not possible to provide a ranking function for the given loop in the traditional sense. The Collatz Conjecture remains an open problem in mathematics, and finding a ranking function for this loop would essentially solve the conjecture."
                    ],
                    "/*@\n    loop variant y % 2;\n    loop variant y;\n*/"
                ]
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c"
        ],
        "total": 88,
        "success_count": 35,
        "failure_count": 53,
        "success_rate": 0.3977272727272727
    }
}