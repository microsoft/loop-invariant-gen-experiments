{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\twhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\twhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. `int x = unknown_int();`\n2. `int c = unknown_int();`\n3. `if (c < 2) { return 0; }`\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n`while (x + c >= 0) { x = x - c; c = c + 1; }`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant \\forall integer k; (0 <= k < c - 2) ==> (x + k >= 0);\n*/\n```",
                    "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. x is assigned an unknown integer value.\n2. c is assigned an unknown integer value.\n3. If c < 2, the function returns 0, so during the loop, c >= 2.\n\nLoop condition:\n- The loop continues while (x + c >= 0).\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, c >= 2.\n2. In every iteration of the loop:\n   a. x is decremented by c.\n   b. c is incremented by 1.\n3. After the loop termination, x + c < 0.\n\nWith this information, we can write the loop invariants as follows:\n\n```\n/*@\n    loop invariant c >= 2;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 >= 0;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 < c;\n*/\n```\n\nThe first invariant states that c is always greater than or equal to 2.\nThe second invariant states that for any non-negative integer k less than the number of loop iterations, x - k*c + k*(k + 1)/2 is non-negative. This represents the value of x after k iterations.\nThe third invariant states that for any non-negative integer k less than the number of loop iterations, x - k*c + k*(k + 1)/2 is less than c. This helps to ensure that the loop eventually terminates.",
                    "First, let's note the pre-conditions and variable assignments:\n\n1. `x` and `c` are assigned with unknown values from `unknown_int()`.\n2. The program returns if `c < 2`.\n\nNext, let's analyze the loop condition and body:\n\n1. The loop condition is `x + c >= 0`.\n2. Inside the loop, `x` is updated with `x - c`, and `c` is updated with `c + 1`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we know that `c >= 2`.\n2. In every iteration of the loop, `c` increases by 1.\n3. After the loop termination, the loop condition `x + c >= 0` is false, so `x + c < 0`.\n\nWith these observations, we can derive the loop invariants:\n\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant \\old(c) <= c;\n    loop invariant x + c >= 0 ==> \\old(x) + \\old(c) >= 0;\n*/\n```\n\nThese invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, which helps Frama-C verify the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant \\forall integer k; (0 <= k < c - 2) ==> (x + k >= 0);\n*/",
                    "/*@\n    loop invariant c >= 2;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 >= 0;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 < c;\n*/",
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant \\old(c) <= c;\n    loop invariant x + c >= 0 ==> \\old(x) + \\old(c) >= 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 2;\n    loop invariant \\forall integer k; (0 <= k < c - 2) ==> (x + k >= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant c >= 2 is inductive.\nloop invariant \\forall integer k; (0 <= k < c - 2) ==> (x + k >= 0) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant c >= 2;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 >= 0;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 < c;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable \\loop_iteration_nb. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 2;\n    loop invariant \\old(c) <= c;\n    loop invariant x + c >= 0 ==> \\old(x) + \\old(c) >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: \\old undefined in this context. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 2;\n    loop invariant \\forall integer k; (0 <= k < c - 2) ==> (x + k >= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: c >= 2;\n\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@\n    loop invariant c >= 2;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 >= 0;\n    loop invariant \\forall integer k; k >= 0 && k < \\loop_iteration_nb ==> x - k*c + k*(k + 1)/2 < c;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: c >= 2;\n\n\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant c >= 2;\n    loop invariant \\old(c) <= c;\n    loop invariant x + c >= 0 ==> \\old(x) + \\old(c) >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: c >= 2;\n\n\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 5,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: c >= 2;\n\n\n\n\n\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\twhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and its variables:\n\n```c\nwhile (x + c >= 0) {\n    x = x - c;\n    c = c + 1;\n}\n```\n\nThe loop variables are `x` and `c`. Now, let's find the ranking function for this loop.\n\nWe can observe that the value of `x` is decreasing in each iteration, and the value of `c` is increasing. So, a suitable ranking function would be the sum of `x` and `c`. Let's represent this as `v = x + c`.\n\nThe loop condition is `x + c >= 0`, and the loop will continue executing as long as this condition is true. In each iteration, `x` decreases by `c`, and `c` increases by `1`. Therefore, the value of the ranking function `v` will decrease in each iteration, as `x` decreases by a larger amount than `c` increases.\n\nThus, we have found a valid ranking function for the loop:\n\n```c\n/*@\n    loop variant x + c;\n*/\n```\n\nThis ranking function is valid because it ensures that the loop will eventually terminate, as the value of `v` decreases in each iteration and the loop continues executing only when `v >= 0`.",
                    "First, let's understand the loop:\n\n```\nwhile (x + c >= 0) {\n    x = x - c;\n    c = c + 1;\n}\n```\n\nThe loop continues to execute as long as the condition `x + c >= 0` holds. In each iteration, `x` is decreased by `c`, and `c` is incremented by `1`.\n\nNow let's find the ranking function. We need to find an expression that decreases with every iteration and is positive for the loop to continue executing. We can use a lexicographic ranking function with two expressions: `x + c` and `c`.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + c;\n    loop variant c;\n*/\n```\n\nNow let's explain why this is a valid ranking function:\n\n1. The value of the first expression (`x + c`) must be positive for the loop to continue executing, which is precisely the loop condition `x + c >= 0`.\n\n2. The value of the second expression (`c`) is also positive for the loop to continue executing because `c >= 2` initially, and it only increases during the loop.\n\n3. In each iteration, `x` is decreased by `c`, so the value of the first expression (`x + c`) decreases or remains the same. If it remains the same, the loop condition `x + c >= 0` would no longer hold, and the loop would terminate.\n\n4. If the value of the first expression remains the same, then the value of the second expression (`c`) must decrease. However, since `c` only increases during the loop, this scenario is not possible. Therefore, the value of the first expression (`x + c`) must decrease in each iteration.\n\nHence, the lexicographic ranking function `(x + c, c)` is a valid ranking function for the given loop as it satisfies all the required properties."
                ],
                "output": [
                    "/*@\n    loop variant x + c;\n*/",
                    "/*@\n    loop variant x + c;\n    loop variant c;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: c >= 2;\nloop variant x + c;\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant c >= 2 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint c = unknown_int();\n\tif (c < 2) {\n\t\treturn 0;\n\t}\n\t//@ ghost variant_expression measure = { x + c, c };\n/*@\nloop invariant i1: c >= 2;\nloop invariant measure.a == x + c && measure.b == c;loop variant measure for lexicographic;\n*/\nwhile (x + c >= 0) {\n\t\tx = x - c;\n\t\tc = c + 1;\n\t//@ ghost measure.a = x + c;\n//@ ghost measure.b = c;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c"
        ],
        "total": 93,
        "success_count": 37,
        "failure_count": 56,
        "success_rate": 0.3978494623655914
    }
}