{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\twhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\twhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions and variable assignments in the program:\n- x is initialized to 0\n- y is initialized to 0\n\nNow, let's analyze the loop condition and loop body:\n- The loop condition is a while(1) loop, which means it's an infinite loop that only breaks when y < 0.\n- Inside the loop, there are two conditional statements:\n  1. If x <= 50, y is incremented.\n  2. If x > 50, y is decremented.\n- x is incremented in every iteration.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 51;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n*/\n```\n\nExplanation:\n1. x is always non-negative, as it starts at 0 and only increments.\n2. y is always non-negative, as it starts at 0 and only decrements when x > 50. When x > 50, the maximum value y can have is 50, so it never goes below 0 until the loop terminates.\n3. x is always less than or equal to 51, as the loop terminates when y becomes negative, which can only happen when x > 50 and y reaches 0.\n4. When x <= 50, y is incremented in every iteration, so y == x.\n5. When x > 50, y is decremented in every iteration, so y == 100 - x. This is because when x > 50, y starts to decrement from its maximum value, which is 50, and x continues to increment until y reaches 0 and the loop terminates.",
                    "Pre-conditions and variable assignments:\n- x = 0\n- y = 0\n\nLoop condition:\n- while (1) (i.e., an infinite loop with a break statement inside)\n\nPost-condition (loop termination):\n- y < 0\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= x + 1;\n    loop invariant x <= 50 ==> y == x + 1;\n    loop invariant x > 50 ==> y == 100 - x;\n*/\n```\n\nExplanation:\n1. x is always non-negative since it starts at 0 and only increments.\n2. y is always non-negative during the loop iterations. It becomes negative to exit the loop, but this condition is not violated during the iterations.\n3. y is always less than or equal to x + 1. When x <= 50, y increments at the same pace as x. When x > 50, y starts to decrement, but it can never be more than x + 1.\n4. If x <= 50, y increments along with x, so y == x + 1.\n5. If x > 50, y starts to decrement, and the difference between x and y increases. Since y was x + 1 when x reached 50, the difference becomes x - (x - 50) = 100 - x.",
                    "Pre-conditions and variable assignments:\n- x = 0\n- y = 0\n\nLoop condition:\n- The loop is infinite, but it breaks when y < 0\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= y + 1;\n    loop invariant y <= 51;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 51;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= x + 1;\n    loop invariant x <= 50 ==> y == x + 1;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= y + 1;\n    loop invariant y <= 51;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 51;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= 51 is established but not preserved.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x > 50 ==> y == 100 - x is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= x + 1;\n    loop invariant x <= 50 ==> y == x + 1;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant y <= x + 1 is inductive.\nloop invariant x <= 50 ==> y == x + 1 is preserved but not established.\nloop invariant x > 50 ==> y == 100 - x is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= y + 1;\n    loop invariant y <= 51;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= y + 1 is established but not preserved.\nloop invariant y <= 51 is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= 51;\n    loop invariant x <= 50 ==> y == x;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\nloop invariant i4: x <= 50 ==> y == x;\n\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant y <= x + 1;\n    loop invariant x <= 50 ==> y == x + 1;\n    loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i3: y <= x + 1;\n\n\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= y + 1;\n    loop invariant y <= 51;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\n\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\n\nloop invariant i4: x <= 50 ==> y == x;\n\nloop invariant i8: y <= x + 1;\n\n\nloop invariant i14: y <= 51;\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\twhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's find the ranking function for the loop in the given program. We can use a lexicographic ranking function with two expressions:\n\n```\n/*@\n    loop variant 51 - x;\n    loop variant y;\n*/\n```\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of the expressions must be positive for the loop to execute. In each loop iteration, `x` is always less than or equal to 51, so `51 - x` is always non-negative. Similarly, the loop only continues if `y` is non-negative.\n\n2. Either the first expression must decrease, or its value remains the same and the value of the second expression decreases. In this loop, the value of `x` increases by 1 in each iteration, so the value of `51 - x` decreases by 1. When `x` is greater than 50, `y` decreases by 1, but `51 - x` is still decreasing. Thus, the lexicographic ranking function is valid and the loop must terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n}\n```\n\nNow, let's analyze the loop variables and their behavior. The loop variables are `x` and `y`. We need to find an expression or a sequence of expressions that decrease with every successive iteration of the loop and are positive for the loop to continue executing.\n\nIn this case, we can use a lexicographic ranking function with two expressions `e1` and `e2`. Let's define `e1` as `51 - x`, and `e2` as `y`. \n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 51 - x;\n    loop variant y;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. The value of both expressions `e1` and `e2` must be positive for the loop to continue executing. Since `x` starts at 0 and increases by 1 in each iteration, `51 - x` is initially positive. `y` starts at 0 and can only decrease if `x > 50`. When `y < 0`, the loop breaks, which means `y` is positive while the loop is executing.\n\n2. The lexicographic ranking function requires that either `e1` must decrease or its value remains the same. If its value remains the same, then the value of `e2` must decrease. In our loop, `x` increases by 1 in each iteration, which means `51 - x` decreases by 1. When `x <= 50`, the value of `y` increases, but when `x > 50`, the value of `y` decreases. Therefore, the ranking function is valid because `e1` decreases in each iteration, and when `e1` reaches its minimum value (x = 51), `e2` starts decreasing.\n\nThis ranking function ensures that the loop must terminate because both expressions decrease and are positive while the loop is executing. When `y` becomes negative, the loop terminates."
                ],
                "output": [
                    "/*@\n    loop variant 51 - x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant 51 - x;\n    loop variant y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t//@ ghost variant_expression measure = { 51 - x, y };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i4: x <= 50 ==> y == x;\nloop invariant i8: y <= x + 1;\nloop invariant i14: y <= 51;\nloop invariant measure.a == 51 - x && measure.b == y;loop variant measure for lexicographic;\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t//@ ghost measure.a = 51 - x;\n//@ ghost measure.b = y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n\tint x = 0, y = 0;\n\t//@ ghost variant_expression measure = { 51 - x, y };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i2: 0 <= y;\nloop invariant i4: x <= 50 ==> y == x;\nloop invariant i8: y <= x + 1;\nloop invariant i14: y <= 51;\nloop invariant measure.a == 51 - x && measure.b == y;loop variant measure for lexicographic;\n*/\nwhile (1) {\n\t\tif (x <= 50) {\n\t\t\ty++;\n\t\t} else {\n\t\t\ty--;\n\t\t}\n\t\tif (y < 0) {\n\t\t\tbreak;\n\t\t}\n\t\tx++;\n\t//@ ghost measure.a = 51 - x;\n//@ ghost measure.b = y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c"
        ],
        "skipped": [],
        "total": 67,
        "success_count": 25,
        "failure_count": 42,
        "success_rate": 0.373134328358209
    }
}