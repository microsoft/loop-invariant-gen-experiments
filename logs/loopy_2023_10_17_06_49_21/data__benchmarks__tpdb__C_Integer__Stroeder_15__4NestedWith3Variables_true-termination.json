{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions or variable assignments in the program:\n- `q`, `a`, and `b` are assigned with `unknown_int()` which means they could have any integer values.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is `q > 0`.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant q <= INT_MAX;\n    loop invariant a >= INT_MIN;\n    loop invariant a <= INT_MAX;\n    loop invariant b >= INT_MIN;\n    loop invariant b <= INT_MAX;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They ensure that the variables `q`, `a`, and `b` stay within the bounds of their respective data types, which is int in this case. However, since there is no specific post-condition to be verified, these loop invariants are sufficient for this program.",
                    "First, let's analyze the given code and make notes of the pre-conditions, variable assignments, and loop condition.\n\nPre-conditions:\n- q, a, and b are assigned non-deterministic values via unknown_int().\n\nLoop condition:\n- The loop continues while q > 0.\n\nNow, let's find the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, Pre) + 3 * (q - \\at(q, Pre)) + 4 * (b - \\at(b, Pre));\n    loop invariant b == 4 * (\\at(a, Pre) - olda) + 3 * (\\at(b, Pre) - b) + 7 * (q - \\at(q, Pre));\n*/\n```\n\nExplanation of loop invariants:\n1. q >= 0: This invariant states that the value of q is always non-negative throughout the loop. This holds true before the loop execution since q is assigned an unknown_int() value, in every iteration of the loop as the loop condition is q > 0, and after the loop termination when q <= 0.\n2. a == \\at(a, Pre) + 3 * (q - \\at(q, Pre)) + 4 * (b - \\at(b, Pre)): This invariant captures the relation between the current value of a and its initial value, as well as the changes in q and b throughout the loop. This holds true in every iteration of the loop and after the loop termination.\n3. b == 4 * (\\at(a, Pre) - olda) + 3 * (\\at(b, Pre) - b) + 7 * (q - \\at(q, Pre)): This invariant captures the relation between the current value of b and its initial value, as well as the changes in a and q throughout the loop. This holds true in every iteration of the loop and after the loop termination.",
                    "First, let's analyze the given program:\n\n- The variables `a`, `b`, and `q` are initialized with non-deterministic values from `unknown_int()`.\n- The loop condition is `q > 0`.\n- Inside the loop, `q` is updated as `q = q + a - 1`, `olda` stores the value of `a`, and `a` and `b` are updated using the previous values of `a` and `b`.\n\nNow let's find the loop invariants:\n\n1. Before the loop execution: Since the initial values of `a`, `b`, and `q` are non-deterministic, we need to use an implication to make the invariant trivially true at the beginning of the loop. We can use the loop condition `q > 0` as the guard condition.\n\n2. In every iteration of the loop: We can observe that in every iteration, `a` and `b` are updated based on the previous values of `a` and `b`. Since we don't have any information about the unknown functions, we can't make any assumptions about the values of `a`, `b`, and `q`. However, we can express the updates using the following invariants:\n\n   - `q > 0 ==> olda == \\at(a, LoopEntry)`.\n   - `q > 0 ==> a == 3 * olda - 4 * b`.\n   - `q > 0 ==> b == 4 * olda + 3 * b`.\n\n3. After the loop termination: The loop terminates when `q <= 0`. As we don't have any post-condition, we don't need to find any loop invariants for this case.\n\nBased on the above analysis, the loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant q > 0 ==> olda == \\at(a, LoopEntry);\n    loop invariant q > 0 ==> a == 3 * olda - 4 * b;\n    loop invariant q > 0 ==> b == 4 * olda + 3 * b;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant q <= INT_MAX;\n    loop invariant a >= INT_MIN;\n    loop invariant a <= INT_MAX;\n    loop invariant b >= INT_MIN;\n    loop invariant b <= INT_MAX;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, Pre) + 3 * (q - \\at(q, Pre)) + 4 * (b - \\at(b, Pre));\n    loop invariant b == 4 * (\\at(a, Pre) - olda) + 3 * (\\at(b, Pre) - b) + 7 * (q - \\at(q, Pre));\n*/",
                    "/*@ \n    loop invariant q > 0 ==> olda == \\at(a, LoopEntry);\n    loop invariant q > 0 ==> a == 3 * olda - 4 * b;\n    loop invariant q > 0 ==> b == 4 * olda + 3 * b;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q >= 0;\n    loop invariant q <= INT_MAX;\n    loop invariant a >= INT_MIN;\n    loop invariant a <= INT_MAX;\n    loop invariant b >= INT_MIN;\n    loop invariant b <= INT_MAX;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable INT_MAX. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, Pre) + 3 * (q - \\at(q, Pre)) + 4 * (b - \\at(b, Pre));\n    loop invariant b == 4 * (\\at(a, Pre) - olda) + 3 * (\\at(b, Pre) - b) + 7 * (q - \\at(q, Pre));\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable a. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q > 0 ==> olda == \\at(a, LoopEntry);\n    loop invariant q > 0 ==> a == 3 * olda - 4 * b;\n    loop invariant q > 0 ==> b == 4 * olda + 3 * b;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant q > 0 ==> olda == \\at(a, LoopEntry) is neither established nor preserved.\nloop invariant q > 0 ==> a == 3 * olda - 4 * b is preserved but not established.\nloop invariant q > 0 ==> b == 4 * olda + 3 * b is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 7,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q >= 0;\n    loop invariant q <= INT_MAX;\n    loop invariant a >= INT_MIN;\n    loop invariant a <= INT_MAX;\n    loop invariant b >= INT_MIN;\n    loop invariant b <= INT_MAX;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\n\n\n\n\n\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q >= 0;\n    loop invariant a == \\at(a, Pre) + 3 * (q - \\at(q, Pre)) + 4 * (b - \\at(b, Pre));\n    loop invariant b == 4 * (\\at(a, Pre) - olda) + 3 * (\\at(b, Pre) - b) + 7 * (q - \\at(q, Pre));\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant q > 0 ==> olda == \\at(a, LoopEntry);\n    loop invariant q > 0 ==> a == 3 * olda - 4 * b;\n    loop invariant q > 0 ==> b == 4 * olda + 3 * b;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 9,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\twhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's rewrite the loop in a more readable form:\n\n```\nwhile (q > 0) {\n    q = q + a - 1;\n    int tmp_a = a;\n    a = 3 * tmp_a - 4 * b;\n    b = 4 * tmp_a + 3 * b;\n}\n```\n\nNow let's analyze the loop to find the ranking function. We can see that `q` is updated in each iteration and is dependent on the values of `a` and `b`. We need to find an expression that decreases with each iteration.\n\nLet's consider the following expression:\n\n```\nq + a\n```\n\nWe can see that this expression is positive as long as the loop continues to execute since `q > 0` and `a` can be any integer value.\n\nNow let's prove that this expression decreases with every iteration. In each iteration, the new value of `q` is `q + a - 1` and the new value of `a` is `3 * tmp_a - 4 * b`. Let's substitute these values into the expression:\n\n```\n(q + a - 1) + (3 * tmp_a - 4 * b) = q + a + 3 * tmp_a - 4 * b - 1\n```\n\nNow, let's subtract the original expression from the updated expression:\n\n```\n(q + a + 3 * tmp_a - 4 * b - 1) - (q + a) = 3 * tmp_a - 4 * b - 1\n```\n\nSince `tmp_a` is the old value of `a`, the expression becomes:\n\n```\n3 * a - 4 * b - 1\n```\n\nNow, we can see that the value of this expression is always less than 0, because after each iteration, the value of `a` increases by a factor of 3 and the value of `b` increases by a factor of 4.\n\nTherefore, the ranking function for the given loop is:\n\n```\n/*@\n    loop variant q + a;\n*/\n```\n\nThis ranking function is valid because it is positive as long as the loop executes and it decreases with every iteration of the loop, proving that the loop must terminate.",
                    "First, let's analyze the loop:\n\n```\nwhile (q > 0) {\n    q = q + a - 1;\n    olda = a;\n    a = 3*olda - 4*b;\n    b = 4*olda + 3*b;\n}\n```\n\nWe can see that the loop continues to execute as long as `q > 0`. The value of `q` in each iteration is updated as `q = q + a - 1`. The values of `a` and `b` are also updated within the loop.\n\nTo find a ranking function, we need to find an expression over the variables `q`, `a`, and `b` that decreases with every iteration and is positive for the loop to continue executing.\n\nIn this case, the ranking function is `q`. Here's why:\n\n1. The value of `q` decreases with every iteration. This is because `q = q + a - 1`, and since `a` is updated as `a = 3*olda - 4*b`, the value of `a` can be negative, which will cause `q` to decrease.\n\n2. The value of `q` must be positive for the loop to continue executing. This is clear from the loop condition `q > 0`.\n\nSo, the ranking function for this loop is `q`. In ACSL syntax:\n\n```\n/*@\n    loop variant q;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop variant q + a;\n*/",
                    "/*@\n    loop variant q;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\nloop variant q + a;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int a, b, q, olda;\n\tq = unknown_int();\n\ta = unknown_int();\n\tb = unknown_int();\n\t/*@\n\nloop variant q;\n*/\nwhile (q > 0) {\n\t\tq = q + a - 1;\n\t\tolda = a;\n\t\ta = 3*olda - 4*b;\n\t\tb = 4*olda + 3*b;\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 111,
        "success_count": 43,
        "failure_count": 68,
        "success_rate": 0.38738738738738737
    }
}