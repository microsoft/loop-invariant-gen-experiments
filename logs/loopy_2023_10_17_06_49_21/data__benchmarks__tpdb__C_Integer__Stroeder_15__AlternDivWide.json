{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    while (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    while (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. i is assigned an unknown integer value.\n2. w is assigned the value 5.\n\nNow let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: i != 0\n2. Loop body: It has three cases: i < -w, i > w, and -w <= i <= w. Each case updates the value of i accordingly.\n\nNow we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant w == 5;\n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i < -w ==> i == -(\\at(i, LoopEntry) - 1);\n    loop invariant i > w ==> i == -(\\at(i, LoopEntry) + 1);\n*/\n```",
                    "First, let's make a note of the variable assignments and loop condition:\n- i is assigned an unknown integer value.\n- w is assigned the value 5.\n- The loop condition is i != 0.\n\nNow, let's analyze the loop body and find the loop invariants. The loop has three branches:\n1. If i < -w, then i is decremented and its sign is flipped.\n2. If i > w, then i is incremented and its sign is flipped.\n3. If -w <= i <= w, then i is set to 0.\n\nThe loop invariants should hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i == 0 ==> -w <= i <= w;\n*/\n```\n\nThese invariants hold true for all iterations of the loop. They guarantee that the variable i will always be within the range of [-w-1, w+1]. Additionally, when i becomes 0, it is guaranteed that it will be within the range of [-w, w].",
                    "First, let's note the pre-conditions or variable assignments in the program:\n- i is assigned an unknown integer value.\n- w is assigned the value 5.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (i != 0).\n- Inside the loop, there are three cases:\n  1. i < -w: In this case, i is decremented by 1 and then multiplied by -1.\n  2. i > w: In this case, i is incremented by 1 and then multiplied by -1.\n  3. -w <= i <= w: In this case, i is set to 0.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n  loop invariant i >= -w - 1;\n  loop invariant i <= w + 1;\n  loop invariant (i > w) ==> (i == \\old(i) * (-1) + 1);\n  loop invariant (i < -w) ==> (i == \\old(i) * (-1) - 1);\n  loop invariant (-w <= i <= w) ==> (i == 0);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant w == 5;\n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i < -w ==> i == -(\\at(i, LoopEntry) - 1);\n    loop invariant i > w ==> i == -(\\at(i, LoopEntry) + 1);\n*/",
                    "/*@ \n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i == 0 ==> -w <= i <= w;\n*/",
                    "/*@ \n  loop invariant i >= -w - 1;\n  loop invariant i <= w + 1;\n  loop invariant (i > w) ==> (i == \\old(i) * (-1) + 1);\n  loop invariant (i < -w) ==> (i == \\old(i) * (-1) - 1);\n  loop invariant (-w <= i <= w) ==> (i == 0);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant w == 5;\n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i < -w ==> i == -(\\at(i, LoopEntry) - 1);\n    loop invariant i > w ==> i == -(\\at(i, LoopEntry) + 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant w == 5 is inductive.\nloop invariant i >= -w - 1 is preserved but not established.\nloop invariant i <= w + 1 is preserved but not established.\nloop invariant i < -w ==> i == -(\\at(i, LoopEntry) - 1) is preserved but not established.\nloop invariant i > w ==> i == -(\\at(i, LoopEntry) + 1) is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i == 0 ==> -w <= i <= w;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i >= -w - 1 is neither established nor preserved.\nloop invariant i <= w + 1 is neither established nor preserved.\nloop invariant i == 0 ==> -w <= i <= w is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant i >= -w - 1;\n  loop invariant i <= w + 1;\n  loop invariant (i > w) ==> (i == \\old(i) * (-1) + 1);\n  loop invariant (i < -w) ==> (i == \\old(i) * (-1) - 1);\n  loop invariant (-w <= i <= w) ==> (i == 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant w == 5;\n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i < -w ==> i == -(\\at(i, LoopEntry) - 1);\n    loop invariant i > w ==> i == -(\\at(i, LoopEntry) + 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\nloop invariant i1: w == 5;\n\n\n\n\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= -w - 1;\n    loop invariant i <= w + 1;\n    loop invariant i == 0 ==> -w <= i <= w;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\n\n\n\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant i >= -w - 1;\n  loop invariant i <= w + 1;\n  loop invariant (i > w) ==> (i == \\old(i) * (-1) + 1);\n  loop invariant (i < -w) ==> (i == \\old(i) * (-1) - 1);\n  loop invariant (-w <= i <= w) ==> (i == 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\n\n\n\n\n\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\nloop invariant i1: w == 5;\n\n\n\n\nloop invariant i8: i == 0 ==> -w <= i <= w;\n\n\n\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    while (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop conditions and how the variable `i` changes in each iteration:\n\n1. If `i < -w`, then `i` is decreased by 1 and its sign is flipped.\n2. If `i > w`, then `i` is increased by 1 and its sign is flipped.\n3. If `-w <= i <= w`, then `i` is set to 0 and the loop terminates.\n\nNow, let's find the ranking function. We can use the absolute value of `i`, denoted as `|i|`, as our ranking function.\n\n```c\n/*@\n    loop variant abs(i);\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `|i|` must be positive for the loop to continue executing. If `|i|` is zero, then `i` is also zero and the loop terminates.\n\n2. The value of `|i|` decreases with every successive iteration of the loop:\n   - If `i < -w`, then `i` is decreased by 1 and its sign is flipped. Thus, `|i|` decreases by 1.\n   - If `i > w`, then `i` is increased by 1 and its sign is flipped. Thus, `|i|` decreases by 1.\n\nSince the ranking function decreases with every iteration and must be positive for the loop to continue, it helps prove that the loop must terminate.",
                    "We'll first analyze the loop and its conditions. The loop continues executing while `i != 0`. Inside the loop, there are three cases:\n\n1. If `i < -w`, then `i` is decreased by 1 and its sign is flipped.\n2. If `i > w`, then `i` is increased by 1 and its sign is flipped.\n3. If `-w <= i <= w`, then `i` is set to 0, and the loop terminates.\n\nWe can see that the value of `i` is always moving closer to 0, which means that the loop will eventually terminate. Let's define the ranking function for this loop.\n\nWe can use the absolute value of `i` as the ranking function. The absolute value will always be positive when `i != 0`, and it will decrease with each iteration of the loop.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant abs(i);\n*/\n```\n\nThis ranking function is valid because the absolute value of `i` is always positive when the loop is executing (`i != 0`). Additionally, the value of `abs(i)` decreases with each iteration of the loop, as `i` is either decreased by 1 and its sign is flipped or set to 0, which will cause the loop to terminate."
                ],
                "output": [
                    "/*@\n    loop variant abs(i);\n*/",
                    "/*@\n    loop variant abs(i);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\nloop invariant i1: w == 5;\nloop invariant i8: i == 0 ==> -w <= i <= w;\nloop variant abs(i);\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 16: unbound logic function abs. Ignoring loop annotation"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int w;\n    i = unknown_int();\n    w = 5;\n    \n    /*@\nloop invariant i1: w == 5;\nloop invariant i8: i == 0 ==> -w <= i <= w;\nloop variant abs(i);\n*/\nwhile (i != 0) {\n        if (i < -w) {\n            i = i-1;\n            i = i*(-1);\n        } else {\n            if (i > w) {\n                i = i+1;\n                i = i*(-1);\n            } else {\n                i = 0;\n            }\n        }\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 16: unbound logic function abs. Ignoring loop annotation"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 128,
        "success_count": 48,
        "failure_count": 80,
        "success_rate": 0.375
    }
}