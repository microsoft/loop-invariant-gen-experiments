{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Let's make a note of the pre-conditions or variable assignments in the program:\n\n1. i, x, n, b, and t are initialized to unknown_int() values.\n2. t is assigned 1 if b >= 1, otherwise t is assigned -1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is x <= n.\n2. Inside the loop, if b >= 1, x is incremented by t, otherwise, x is decremented by t.\n\nNow, let's output the loop invariants for the while loop in the program:\n\n```\n/*@ \n    loop invariant 1 <= t && t <= 1;\n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n*/\n```",
                    "First, let's note the variable assignments and the loop condition:\n- `i`, `x`, `n`, and `b` are assigned non-deterministic values.\n- `t` is assigned 1 if `b >= 1`, else it is assigned -1.\n- The loop condition is `x <= n`.\n\nNow, let's analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n    loop invariant x <= n;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments:\n1. i, x, n, b, and t are integers.\n2. i, x, n, and b are assigned values from the unknown() function.\n3. t is assigned either 1 or -1 based on the value of b.\n\nNext, analyze the loop body and make a note of the loop condition:\n1. The loop condition is x <= n.\n2. Inside the loop, x is updated based on the value of b and t.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n    loop invariant x <= n + t;\n*/\n```\n\nExplanation:\n1. The first loop invariant states that if b >= 1, then t is always 1. This is true before the loop execution, in every iteration of the loop, and after the loop termination.\n2. The second loop invariant states that if b < 1, then t is always -1. This is also true before the loop execution, in every iteration of the loop, and after the loop termination.\n3. The third loop invariant states that x is always less than or equal to n + t. This is true before the loop execution, in every iteration of the loop, and after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant 1 <= t && t <= 1;\n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n*/",
                    "/*@ \n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n    loop invariant x <= n;\n*/",
                    "/*@ \n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n    loop invariant x <= n + t;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= t && t <= 1;\n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 1 <= t && t <= 1 is preserved but not established.\nloop invariant t == 1 <==> b >= 1 is inductive.\nloop invariant t == -1 <==> b < 1 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n    loop invariant x <= n;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant t == 1 <==> b >= 1 is inductive.\nloop invariant t == -1 <==> b < 1 is inductive.\nloop invariant x <= n is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n    loop invariant x <= n + t;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant b >= 1 ==> t == 1 is inductive.\nloop invariant b < 1 ==> t == -1 is inductive.\nloop invariant x <= n + t is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= t && t <= 1;\n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\n\nloop invariant i2: t == 1 <==> b >= 1;\nloop invariant i3: t == -1 <==> b < 1;\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant t == 1 <==> b >= 1;\n    loop invariant t == -1 <==> b < 1;\n    loop invariant x <= n;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\nloop invariant i1: t == 1 <==> b >= 1;\nloop invariant i2: t == -1 <==> b < 1;\n\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant b >= 1 ==> t == 1;\n    loop invariant b < 1 ==> t == -1;\n    loop invariant x <= n + t;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\nloop invariant i1: b >= 1 ==> t == 1;\nloop invariant i2: b < 1 ==> t == -1;\n\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\n\nloop invariant i2: t == 1 <==> b >= 1;\nloop invariant i3: t == -1 <==> b < 1;\n\nloop invariant i7: b >= 1 ==> t == 1;\nloop invariant i8: b < 1 ==> t == -1;\n\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\twhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n```\nwhile (x <= n) {\n    if (b >= 1) {\n        x = x + t;\n    } else {\n        x = x - t;\n    }\n}\n```\n\nThe loop continues to execute as long as `x <= n`. Inside the loop, the value of `x` is either incremented or decremented by `t`. Notice that the value of `t` is fixed before entering the loop: `t = 1` if `b >= 1`, and `t = -1` otherwise.\n\nNow let's find a ranking function. We can choose `n - x` as the ranking function since it decreases in each iteration of the loop and is positive for the loop to continue executing.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant n - x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `n - x` is positive for the loop to execute (`x <= n`).\n2. In each iteration of the loop, the value of `x` either increases or decreases by `t`. This means that the value of `n - x` decreases in each iteration, as required by the definition of a ranking function.\n3. Since the value of `n - x` decreases with every iteration, the loop is guaranteed to terminate.",
                    "First, let's find the loop invariant for the given loop. The loop invariant is a condition that holds true before and after each iteration of the loop. In this case, the loop invariant is that `t` remains constant throughout the loop.\n\nNow, let's find the ranking function for the loop. The loop continues executing as long as `x <= n`. We can use the difference between `n` and `x` as our ranking function. The value of this expression will always be positive for the loop to continue executing, and it will decrease with every iteration of the loop.\n\nSo, the ranking function for the given loop is `n - x`. Here's the ACSL syntax:\n\n```\n/*@\n    loop invariant t == 1 || t == -1;\n    loop variant n - x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions required for a ranking function:\n\n1. The value of the expression (`n - x`) is positive for the loop to continue executing.\n2. The value of the expression decreases with every iteration of the loop.\n\nAs a result, this ranking function helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant n - x;\n*/",
                    "/*@\n    loop invariant t == 1 || t == -1;\n    loop variant n - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\nloop invariant i2: t == 1 <==> b >= 1;\nloop invariant i3: t == -1 <==> b < 1;\nloop invariant i7: b >= 1 ==> t == 1;\nloop invariant i8: b < 1 ==> t == -1;\nloop variant n - x;\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant t == 1 <==> b >= 1 is inductive.\nloop invariant t == -1 <==> b < 1 is inductive.\nloop invariant b >= 1 ==> t == 1 is inductive.\nloop invariant b < 1 ==> t == -1 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, x, n, b, t;\n\ti = unknown_int();\n\tx = unknown_int();\n\tn = unknown_int();\n\tb = unknown_int();\n\tif (b >= 1) {\n\t\tt = 1;\n\t} else {\n\t\tt = -1;\n    }\n\t/*@\nloop invariant i2: t == 1 <==> b >= 1;\nloop invariant i3: t == -1 <==> b < 1;\nloop invariant i7: b >= 1 ==> t == 1;\nloop invariant i8: b < 1 ==> t == -1;\nloop variant n - x;\n*/\nwhile (x <= n) {\n\t\tif (b >= 1) {\n\t\t\tx = x + t;\n\t\t} else {\n\t\t\tx = x - t;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant t == 1 <==> b >= 1 is inductive.\nloop invariant t == -1 <==> b < 1 is inductive.\nloop invariant b >= 1 ==> t == 1 is inductive.\nloop invariant b < 1 ==> t == -1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 121,
        "success_count": 47,
        "failure_count": 74,
        "success_rate": 0.3884297520661157
    }
}