{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Let's first make a note of the variable assignments and loop condition:\n\n1. Variable assignments: `int x = unknown_int(); int y = unknown_int();`\n2. Loop condition: `x > 0 && y > 0`\n\nNow, let's analyze the loop body and derive the loop invariants:\n\n- The value of `x` is either decremented by 1 or assigned an unknown integer, and the value of `y` is decremented by 1 or unchanged.\n- Since `x` and `y` are initialized with unknown integers, we don't have any bounds on their initial values.\n- The loop continues as long as both `x` and `y` are positive.\n\nConsidering these observations, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= \\at(x, Pre) || x <= \\at(x, Pre) - 1;\n*/\n```\n\nThese loop invariants ensure that:\n\n1. Both `x` and `y` are non-negative throughout the loop iterations.\n2. The value of `x` is either the same as its initial value, decremented by 1, or assigned an unknown integer.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are assigned unknown_int() values, which means they can have any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop continues as long as x > 0 and y > 0.\n\nNow let's find the necessary loop invariants of the while loop:\n\n```\n/*@ \n    loop invariant 0 <= x <= unknown_int();\n    loop invariant 0 <= y <= unknown_int();\n    loop invariant (x <= 0) ==> (y <= 0);\n*/\n```\n\nExplanation:\n- The first loop invariant states that x is between 0 and the initial value of x. This is true before the loop execution, in every iteration, and after the loop termination.\n- The second loop invariant states that y is between 0 and the initial value of y. This is also true before the loop execution, in every iteration, and after the loop termination.\n- The third loop invariant states that if x becomes less than or equal to 0, then y must also be less than or equal to 0. This is true because the loop continues as long as x and y are both greater than 0. Once x becomes less than or equal to 0, the loop must terminate, and since the loop condition requires both x and y to be greater than 0, it implies that y must also be less than or equal to 0.",
                    "Let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. x and y are assigned unknown integer values.\n\nLoop condition:\n1. The while loop continues as long as x > 0 and y > 0.\n\nLoop body:\n1. If unknown_int() is true, x is decremented by 1.\n2. If unknown_int() is false, x is assigned an unknown integer value, and y is decremented by 1.\n\nNow, let's derive the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/\n```\nHere are the loop invariants for the given program:\n\n1. x is always greater than or equal to 0.\n2. y is always greater than or equal to 0.\n\nThese loop invariants hold true before the loop execution, during every iteration, and after the loop termination. They can be used by Frama-C to verify the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= \\at(x, Pre) || x <= \\at(x, Pre) - 1;\n*/",
                    "/*@ \n    loop invariant 0 <= x <= unknown_int();\n    loop invariant 0 <= y <= unknown_int();\n    loop invariant (x <= 0) ==> (y <= 0);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= \\at(x, Pre) || x <= \\at(x, Pre) - 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 11: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= unknown_int();\n    loop invariant 0 <= y <= unknown_int();\n    loop invariant (x <= 0) ==> (y <= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= \\at(x, Pre) || x <= \\at(x, Pre) - 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= unknown_int();\n    loop invariant 0 <= y <= unknown_int();\n    loop invariant (x <= 0) ==> (y <= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 5,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n\n\n\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    }\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop. The loop continues to execute as long as both `x` and `y` are greater than 0. In each iteration, one of two things happens:\n\n1. If `unknown_int()` returns a non-zero value, `x` decreases by 1 and `y` remains the same.\n2. If `unknown_int()` returns zero, `x` is assigned an unknown value, and `y` decreases by 1.\n\nNow let's try to find the ranking function.\n\nA lexicographic ranking function is a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to continue executing, and either e1 must decrease, or its value remains the same and the value of e2 must decrease.\n\nIn this case, we can use the lexicographic ranking function (y, x):\n\n```\n/*@\n    loop variant y;\n    loop variant x;\n*/\n```\n\nThis is a valid lexicographic ranking function because:\n\n1. Both `x` and `y` must be positive for the loop to execute.\n2. In the first branch, `x` decreases by 1 while `y` remains the same.\n3. In the second branch, `x` can take any value, but `y` decreases by 1.\n\nIn either branch of the loop, at least one of the expressions in the ranking function decreases, ensuring that the loop must eventually terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (x>0 && y>0) {\n    if (unknown_int()) {\n        x = x - 1;\n    } else {\n        x = unknown_int();\n        y = y - 1;\n    }\n}\n```\n\nThe loop continues executing as long as both `x` and `y` are positive. We need to find a ranking function that decreases with each iteration and is positive for the loop to continue executing.\n\nWe can use a lexicographic ranking function with two expressions: `(y, x)`.\n\n```\n/*@\n    loop variant y;\n    loop variant x;\n*/\n```\n\nLet's see why this is a valid ranking function:\n\n1. Both expressions are positive for the loop to continue executing: Since the loop condition is `x>0 && y>0`, both `x` and `y` must be positive.\n\n2. The value of the first expression (`y`) must decrease or remain the same. If it remains the same, the value of the second expression (`x`) must decrease:\n   - If `unknown_int()` returns a non-zero value (true), then `x` is decreased by 1, and `y` remains the same.\n   - If `unknown_int()` returns zero (false), then `y` is decreased by 1, and `x` is assigned an unknown value. Since `y` decreased, the lexicographic ranking function still holds.\n\nTherefore, `(y, x)` is a valid lexicographic ranking function for the loop, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant y;\n    loop variant x;\n*/",
                    "/*@\n    loop variant y;\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    //@ ghost variant_expression measure = { y, x };\n/*@\n\nloop invariant measure.a == y && measure.b == x;loop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    //@ ghost measure.a = y;\n//@ ghost measure.b = x;}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    //@ ghost variant_expression measure = { y, x };\n/*@\n\nloop invariant measure.a == y && measure.b == x;loop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0) {\n        if (unknown_int()) {\n            x = x - 1;\n        } else {\n            x = unknown_int();\n            y = y - 1;\n        }\n    //@ ghost measure.a = y;\n//@ ghost measure.b = x;}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 63,
        "success_count": 24,
        "failure_count": 39,
        "success_rate": 0.38095238095238093
    }
}