{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values.\n\nLoop condition:\n- The loop continues executing while both x > 0 and y > 0.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x > 0 ==> y > 0;\n    loop invariant y > 0 ==> x > 0;\n*/\n```",
                    "First, let's make a note of the variable assignments and the loop condition:\n\n- Variable assignments: `int x = unknown_int(); int y = unknown_int();`\n- Loop condition: `x > 0 && y > 0`\n\nNow, let's analyze the loop body and output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant \\forall integer ux, uy; (0 <= ux <= x && 0 <= uy <= y) ==> (ux > 0 && uy > 0);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x and y are assigned unknown_int() values.\n\nLoop condition:\n- x > 0 && y > 0\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x == 0) ==> (y <= 1);\n    loop invariant (y == 0) ==> (x <= 1);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x > 0 ==> y > 0;\n    loop invariant y > 0 ==> x > 0;\n*/",
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant \\forall integer ux, uy; (0 <= ux <= x && 0 <= uy <= y) ==> (ux > 0 && uy > 0);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x == 0) ==> (y <= 1);\n    loop invariant (y == 0) ==> (x <= 1);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x > 0 ==> y > 0;\n    loop invariant y > 0 ==> x > 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 && y >= 0 is neither established nor preserved.\nloop invariant x > 0 ==> y > 0 is neither established nor preserved.\nloop invariant y > 0 ==> x > 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant \\forall integer ux, uy; (0 <= ux <= x && 0 <= uy <= y) ==> (ux > 0 && uy > 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 && y >= 0 is preserved but not established.\nloop invariant \\forall integer ux, uy; (0 <= ux <= x && 0 <= uy <= y) ==> (ux > 0 && uy > 0) is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x == 0) ==> (y <= 1);\n    loop invariant (y == 0) ==> (x <= 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is neither established nor preserved.\nloop invariant (x == 0) ==> (y <= 1) is neither established nor preserved.\nloop invariant (y == 0) ==> (x <= 1) is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x > 0 ==> y > 0;\n    loop invariant y > 0 ==> x > 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant \\forall integer ux, uy; (0 <= ux <= x && 0 <= uy <= y) ==> (ux > 0 && uy > 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x == 0) ==> (y <= 1);\n    loop invariant (y == 0) ==> (x <= 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    while (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (x > 0 && y > 0) {\n    ...\n}\n```\n\nThe loop continues executing as long as both `x` and `y` are positive. Inside the loop, there are two branches depending on the result of `unknown_int()` (which can be either true or false). In both branches, either `x` or `y` is decreased by 1 depending on their relative values.\n\nNow, let's find the ranking function:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive when the loop executes: Since the loop executes when both `x` and `y` are positive, their sum `x + y` will also be positive.\n\n2. It decreases with every iteration: In each iteration, either `x` or `y` is decreased by 1, so their sum `x + y` will always decrease by 1.\n\nThus, the ranking function `x + y` proves that the loop must eventually terminate, as its value must decrease with every iteration and remain positive for the loop to continue executing.",
                    "First, let's identify the loop invariants. The loop continues as long as both `x` and `y` are positive. Next, we need to find a ranking function that decreases in each iteration of the loop and remains positive for the loop to continue executing.\n\nIn this case, the ranking function is a lexicographic ranking function with two expressions:\n\n1. The first expression is the sum of `x` and `y`. In each iteration of the loop, either `x` or `y` is decreased by at least 1. Therefore, the sum of `x` and `y` is guaranteed to decrease.\n\n2. The second expression is the minimum of `x` and `y`. If the value of the first expression remains the same, then the value of the second expression must decrease. In each iteration of the loop, either `x` or `y` is set to the minimum of the two, minus 1, ensuring that the minimum of `x` and `y` decreases.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n    loop variant min(x, y);\n*/\n```\n\nThis lexicographic ranking function is valid because, in each iteration of the loop, either the sum of `x` and `y` decreases or, if it remains the same, the minimum of `x` and `y` decreases. Additionally, both expressions remain positive while the loop continues executing, ensuring the loop's termination."
                ],
                "output": [
                    "/*@\n    loop variant x + y;\n*/",
                    "/*@\n    loop variant x + y;\n    loop variant min(x, y);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    /*@\n\nloop variant x + y;\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    }\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n    //@ ghost variant_expression measure = { x + y, min(x, y) };\n/*@\n\nloop invariant measure.a == x + y && measure.b == min(x, y);loop variant measure for lexicographic;\n*/\nwhile (x > 0 && y > 0) {\n    \tif (unknown_int()) {\n    \t\tif (x<y) {\n    \t\t\ty = x - 1;\n    \t\t} else {\n    \t\t\ty = y - 1;\n    \t\t}\n    \t\tx = unknown_int();\n    \t} else {\n    \t\tif (x<y) {\n    \t\t\tx = x - 1;\n    \t\t} else {\n    \t\t\tx = y - 1;\n    \t\t}\n    \t\ty = unknown_int();\n    \t}\n    //@ ghost measure.a = x + y;\n//@ ghost measure.b = min(x, y);}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 82,
        "success_count": 32,
        "failure_count": 50,
        "success_rate": 0.3902439024390244
    }
}