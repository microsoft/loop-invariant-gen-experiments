{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   while (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   while (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} \n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given code and note down the pre-conditions or variable assignments:\n\n1. x and y are initialized with unknown_int(), which are non-deterministic values.\n2. z is not initialized and could have a garbage value.\n\nNow, let's analyze the loop:\n\n1. The loop condition is (y > 0 && x > 0).\n2. Inside the loop, z is assigned the minimum of x and y.\n3. The loop has a conditional statement, which modifies x and y in both branches.\n\nWe can now write the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k;\n    loop invariant (x == 0 || y == 0) ==> z == \\min(x, y);\n*/\n```\n\nExplanation:\n\n1. `loop invariant x >= 0;`: x is always non-negative inside the loop.\n2. `loop invariant y >= 0;`: y is always non-negative inside the loop.\n3. `loop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k;`: z is always greater than or equal to any integer k, where k is in the range [0, min(x, y)).\n4. `loop invariant (x == 0 || y == 0) ==> z == \\min(x, y);`: When either x or y becomes 0, z will be equal to the minimum of x and y.",
                    "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. x and y are assigned unknown_int() values.\n2. z is not initialized.\n\nLoop condition:\n1. y > 0 && x > 0\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= x+y;\n    loop invariant y <= x+y;\n    loop invariant z <= x+y;\n    loop invariant x >= y ==> z == y;\n    loop invariant y >= x ==> z == x;\n*/\n```\n\nThese invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They capture the relationships between x, y, and z, as well as the boundaries of their possible values.",
                    "First, let's identify the pre-conditions, variable assignments, and loop condition:\n\nPre-conditions and Variable Assignments:\n1. x is assigned a non-deterministic integer value.\n2. y is assigned a non-deterministic integer value.\n\nLoop Condition:\ny > 0 && x > 0\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLoop Invariants:\n1. y > 0 && x > 0\n2. y >= z\n3. x >= z\n4. (unknown_int() ==> x == z - 1 + y) && (!unknown_int() ==> y == z - 1 + x)\n\nLet's put these loop invariants together in a code block:\n\n```\n/*@ \n    loop invariant y > 0 && x > 0;\n    loop invariant y >= z;\n    loop invariant x >= z;\n    loop invariant (unknown_int() ==> x == z - 1 + y) && (!unknown_int() ==> y == z - 1 + x);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k;\n    loop invariant (x == 0 || y == 0) ==> z == \\min(x, y);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= x+y;\n    loop invariant y <= x+y;\n    loop invariant z <= x+y;\n    loop invariant x >= y ==> z == y;\n    loop invariant y >= x ==> z == x;\n*/",
                    "/*@ \n    loop invariant y > 0 && x > 0;\n    loop invariant y >= z;\n    loop invariant x >= z;\n    loop invariant (unknown_int() ==> x == z - 1 + y) && (!unknown_int() ==> y == z - 1 + x);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k;\n    loop invariant (x == 0 || y == 0) ==> z == \\min(x, y);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k is preserved but not established.\nloop invariant (x == 0 || y == 0) ==> z == \\min(x, y) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= x+y;\n    loop invariant y <= x+y;\n    loop invariant z <= x+y;\n    loop invariant x >= y ==> z == y;\n    loop invariant y >= x ==> z == x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is preserved but not established.\nloop invariant y >= 0 is preserved but not established.\nloop invariant z >= 0 is preserved but not established.\nloop invariant x <= x+y is inductive.\nloop invariant y <= x+y is inductive.\nloop invariant z <= x+y is neither established nor preserved.\nloop invariant x >= y ==> z == y is preserved but not established.\nloop invariant y >= x ==> z == x is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y > 0 && x > 0;\n    loop invariant y >= z;\n    loop invariant x >= z;\n    loop invariant (unknown_int() ==> x == z - 1 + y) && (!unknown_int() ==> y == z - 1 + x);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 17: unexpected token ')'"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\forall integer k; 0 <= k < \\min(x, y) ==> z >= k;\n    loop invariant (x == 0 || y == 0) ==> z == \\min(x, y);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   /*@\n\n\n\n\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= x+y;\n    loop invariant y <= x+y;\n    loop invariant z <= x+y;\n    loop invariant x >= y ==> z == y;\n    loop invariant y >= x ==> z == x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   /*@\n\n\n\n\n\n\n\n\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y > 0 && x > 0;\n    loop invariant y >= z;\n    loop invariant x >= z;\n    loop invariant (unknown_int() ==> x == z - 1 + y) && (!unknown_int() ==> y == z - 1 + x);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   /*@\n\n\n\n\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   while (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} \n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop and its conditions:\n\nThe loop continues executing as long as `y > 0` and `x > 0`. In each iteration, either `y` gets updated to `y + x` and `x` gets updated to `z - 1`, or `x` gets updated to `y + x` and `y` gets updated to `z - 1`. In both cases, the sum `x + y` is preserved and `z` is updated to the smaller value of `x` or `y` before the update. So, the sum `x + y` remains constant throughout the loop.\n\nNow, let's find the ranking function:\n\nThe loop variant should be an expression that decreases in each iteration and is positive as long as the loop executes. In this case, we can use the sum `x + y` as the first expression in the lexicographic ranking function. Since the sum remains constant, we need a second expression that decreases in each iteration. We can use the value of `z` as the second expression, as it is assigned the minimum value of `x` and `y` before the update, and then either `x` or `y` is updated to `z - 1`, which guarantees that `z` will decrease in each iteration.\n\nSo, the ranking function for the loop is:\n\n```\n/*@\n    loop variant x + y;\n    loop variant z;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The values of `x + y` and `z` are positive as long as the loop executes.\n2. The value of `x + y` remains constant, and the value of `z` decreases in each iteration.",
                    "First, let's analyze the loop and its conditions. The loop continues executing as long as `y > 0` and `x > 0`. Inside the loop, we have two branches, which are chosen nondeterministically based on the `unknown_int()` function. In both branches, the value of `z` is updated to either `y` or `x`, and then `x` and `y` are updated by adding the other variable and subtracting 1 from `z`. The value of `z` is then updated again by adding the values of `x` and `y`.\n\nNow let's find a ranking function for this loop. We can use the sum of `x` and `y` as the ranking function because it satisfies the requirements of being positive when the loop executes and decreasing in each iteration.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x+y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x+y` is positive when the loop executes since both `x` and `y` are positive.\n2. In each iteration, either `x` or `y` is decreased by at least 1, making the value of `x+y` decrease in every iteration.\n\nTherefore, the ranking function `x+y` proves that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x + y;\n    loop variant z;\n*/",
                    "/*@\n    loop variant x+y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   //@ ghost variant_expression measure = { x + y, z };\n/*@\n\nloop invariant measure.a == x + y && measure.b == z;loop variant measure for lexicographic;\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    //@ ghost measure.a = x + y;\n//@ ghost measure.b = z;}\n} ",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n   int x,y;\n   int z;\n   \n   x = unknown_int();\n   y = unknown_int();\n   \n   /*@\n\nloop variant x+y;\n*/\nwhile (y > 0 && x > 0) {\n      if (x>y) z = y;\n        else  z = x;\n      if (unknown_int())  { y = y+x; x = z-1; z = y+z; }\n       else { x = y+x; y = z-1; z = x+z; }\n    }\n} ",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 79,
        "success_count": 32,
        "failure_count": 47,
        "success_rate": 0.4050632911392405
    }
}