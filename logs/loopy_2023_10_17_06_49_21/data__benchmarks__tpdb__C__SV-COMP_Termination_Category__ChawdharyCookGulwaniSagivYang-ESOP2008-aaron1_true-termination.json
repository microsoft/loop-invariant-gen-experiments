{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and make notes of important information:\n\n1. Pre-conditions or variable assignments: i, j, an, and bn are assigned with unknown_int() values.\n2. Loop condition: (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)\n\nNow, let's find the loop invariants that hold true before the loop execution, during every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant an >= i ==> bn >= j || bn <= j;\n    loop invariant an <= i ==> bn >= j;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n*/\n```\n\nExplanation of the loop invariants:\n1. If an >= i, then either bn >= j or bn <= j.\n2. If an <= i, then bn >= j.\n3. i is always non-negative.\n4. j is always non-negative.",
                    "First, let's analyze the given code:\n\nPre-conditions or variable assignments:\n- i, j, an, and bn are all assigned non-deterministic integer values from unknown_int().\n\nLoop condition:\n- (an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)\n\nNow, let's find the loop invariants:\n\n1. i and j cannot decrease in any iteration of the loop, so i and j are non-decreasing.\n\n2. The loop condition can be simplified as:\n   - an >= i || bn >= j\n\n3. If an >= i && bn >= j, either i or j will be increased. If an >= i && bn <= j, i will be increased. If an <= i && bn >= j, j will be increased.\n\nBased on the above points, the loop invariants can be written as:\n\n```\n/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= \\at(j, Pre);\n    loop invariant an >= i || bn >= j;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- `int i = unknown_int();`\n- `int j = unknown_int();`\n- `int an = unknown_int();`\n- `int bn = unknown_int();`\n\nNow, analyze the loop body and make a note of the loop condition:\n\n- `while ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j))`\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant an >= i ==> bn >= j || bn <= j;\n    loop invariant an <= i ==> bn >= j;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n*/",
                    "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= \\at(j, Pre);\n    loop invariant an >= i || bn >= j;\n*/",
                    "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant an >= i ==> bn >= j || bn <= j;\n    loop invariant an <= i ==> bn >= j;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant an >= i ==> bn >= j || bn <= j is inductive.\nloop invariant an <= i ==> bn >= j is neither established nor preserved.\nloop invariant i >= 0 is preserved but not established.\nloop invariant j >= 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= \\at(j, Pre);\n    loop invariant an >= i || bn >= j;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 11: unbound logic variable i. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant (an >= i && bn >= j) ==> (j <= bn) is inductive.\nloop invariant (an >= i && bn <= j) ==> (i <= an) is inductive.\nloop invariant (an <= i && bn >= j) ==> (j <= bn) is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant an >= i ==> bn >= j || bn <= j;\n    loop invariant an <= i ==> bn >= j;\n    loop invariant i >= 0;\n    loop invariant j >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t/*@\nloop invariant i1: an >= i ==> bn >= j || bn <= j;\n\n\n\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant j >= \\at(j, Pre);\n    loop invariant an >= i || bn >= j;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t/*@\n\n\n\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (an >= i && bn >= j) ==> (j <= bn);\n    loop invariant (an >= i && bn <= j) ==> (i <= an);\n    loop invariant (an <= i && bn >= j) ==> (j <= bn);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t/*@\nloop invariant i1: (an >= i && bn >= j) ==> (j <= bn);\nloop invariant i2: (an >= i && bn <= j) ==> (i <= an);\nloop invariant i3: (an <= i && bn >= j) ==> (j <= bn);\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t/*@\nloop invariant i1: an >= i ==> bn >= j || bn <= j;\n\n\n\n\n\n\nloop invariant i8: (an >= i && bn >= j) ==> (j <= bn);\nloop invariant i9: (an >= i && bn <= j) ==> (i <= an);\nloop invariant i10: (an <= i && bn >= j) ==> (j <= bn);\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\twhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop conditions and how the variables change inside the loop:\n\n1. If an >= i && bn >= j, either j increases or i increases.\n2. If an >= i && bn <= j, i increases.\n3. If an <= i && bn >= j, j increases.\n\nFrom the loop conditions, we can observe that either i or j will always increase in each iteration. The loop will terminate when none of the conditions are satisfied, which means an < i and bn < j.\n\nNow let's find the ranking function for this loop:\n\nSince i or j always increases in each iteration and we want to show that the loop terminates, we can consider the difference between an and i, and the difference between bn and j as our lexicographic ranking functions.\n\nWe will have the following ranking function:\n\n```\n/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The values of the expressions (an - i) and (bn - j) are positive for the loop to continue executing.\n2. In each iteration, either the value of (an - i) decreases, or the value of (an - i) remains the same, and the value of (bn - j) decreases.\n\nThus, the loop will eventually terminate when the conditions are no longer satisfied.",
                    "First, let's analyze the loop condition and the updates inside the loop. The loop condition can be simplified as `(an >= i || bn >= j)` since the other conditions are covered by the first one. Inside the loop, we can observe that either `i` or `j` is being incremented depending on the conditions. This means that the loop is making progress in each iteration.\n\nNow, let's find the ranking function:\n\n```\n/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/\n```\n\nThis ranking function is valid because:\n\n1. Both expressions are non-negative for the loop to continue executing. As long as the loop condition holds, we have `an >= i` and/or `bn >= j`, which means that `an - i` and `bn - j` are non-negative.\n\n2. In each iteration of the loop, either `i` or `j` is incremented, which means either `an - i` or `bn - j` will decrease. This ensures that the loop will eventually terminate as the ranking function decreases with every iteration.\n\nTherefore, the lexicographic ranking function `(an - i, bn - j)` is a valid ranking function for the given loop, proving its termination."
                ],
                "output": [
                    "/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/",
                    "/*@\n    loop variant an - i;\n    loop variant bn - j;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t//@ ghost variant_expression measure = { an - i, bn - j };\n/*@\nloop invariant i1: an >= i ==> bn >= j || bn <= j;\nloop invariant i8: (an >= i && bn >= j) ==> (j <= bn);\nloop invariant i9: (an >= i && bn <= j) ==> (i <= an);\nloop invariant i10: (an <= i && bn >= j) ==> (j <= bn);\nloop invariant measure.a == an - i && measure.b == bn - j;loop variant measure for lexicographic;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t//@ ghost measure.a = an - i;\n//@ ghost measure.b = bn - j;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\tint j = unknown_int();\n\tint an = unknown_int();\n\tint bn = unknown_int();\n\t//@ ghost variant_expression measure = { an - i, bn - j };\n/*@\nloop invariant i1: an >= i ==> bn >= j || bn <= j;\nloop invariant i8: (an >= i && bn >= j) ==> (j <= bn);\nloop invariant i9: (an >= i && bn <= j) ==> (i <= an);\nloop invariant i10: (an <= i && bn >= j) ==> (j <= bn);\nloop invariant measure.a == an - i && measure.b == bn - j;loop variant measure for lexicographic;\n*/\nwhile ((an >= i && bn >= j) || (an >= i && bn <= j) || (an <= i && bn >= j)) {\n\t\tif (an >= i && bn >= j) {\n\t\t\tif (unknown_int()) {\n\t\t\t\tj = j + 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t} else if (an >= i && bn <= j) {\n\t\t\ti = i + 1;\n\t\t} else if (an <= i && bn >= j) {\n\t\t\tj = j + 1;\n\t\t}\n\t//@ ghost measure.a = an - i;\n//@ ghost measure.b = bn - j;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c"
        ],
        "skipped": [],
        "total": 37,
        "success_count": 19,
        "failure_count": 18,
        "success_rate": 0.5135135135135135
    }
}