{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \twhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \twhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- y1 and y2 are assigned non-deterministic integer values.\n- The loop executes only if y1 > 0 and y2 > 0.\n\nLoop condition:\n- The loop continues as long as y1 != y2.\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0;\n*/\n```\n\nExplanation:\n1. `y1 > 0`: Since y1 starts as a positive integer and only gets smaller, y1 remains positive throughout the loop.\n2. `y2 > 0`: Similarly, y2 starts as a positive integer and only gets smaller, y2 remains positive throughout the loop.\n3. `\\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0`: This invariant states that for all integers k, if k is a divisor of both y1 and y2, then y1 and y2 are divisible by k. This holds true before the loop, during every iteration, and after the loop termination.",
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n- y1 and y2 are assigned non-deterministic values from the unknown_int() function.\n- The loop executes only if y1 > 0 and y2 > 0.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is y1 != y2.\n\nNow let's find the necessary loop invariants for the while loop:\n\n1. Before the loop execution, y1 > 0 and y2 > 0 (due to the if condition).\n2. In every iteration of the loop, either y1 or y2 is reduced by the other's value, and they remain positive.\n3. After the loop termination, y1 == y2.\n\nTaking all these points into consideration, we can output the loop invariants as follows:\n\n```\n/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall integer k; (k >= 0 && k < y1) ==> (y1 - k * y2 != 0);\n    loop invariant \\forall integer k; (k >= 0 && k < y2) ==> (y2 - k * y1 != 0);\n*/\n```",
                    "First, let's analyze the given program:\n1. Pre-conditions or variable assignments:\n   - y1 and y2 are assigned unknown_int() values.\n   - The loop only executes if y1 > 0 and y2 > 0.\n2. Loop condition: y1 != y2\n3. Loop body:\n   - If y1 > y2, then y1 = y1 - y2.\n   - Else, y2 = y2 - y1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant y1 >= 0 && y2 >= 0;\n    loop invariant y1 <= \\max(y1, y2);\n    loop invariant y2 <= \\max(y1, y2);\n    loop invariant y1 == \\old(y1) || y1 <= \\old(y1);\n    loop invariant y2 == \\old(y2) || y2 <= \\old(y2);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0;\n*/",
                    "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall integer k; (k >= 0 && k < y1) ==> (y1 - k * y2 != 0);\n    loop invariant \\forall integer k; (k >= 0 && k < y2) ==> (y2 - k * y1 != 0);\n*/",
                    "/*@ \n    loop invariant y1 >= 0 && y2 >= 0;\n    loop invariant y1 <= \\max(y1, y2);\n    loop invariant y2 <= \\max(y1, y2);\n    loop invariant y1 == \\old(y1) || y1 <= \\old(y1);\n    loop invariant y2 == \\old(y2) || y2 <= \\old(y2);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y1 > 0 is inductive.\nloop invariant y2 > 0 is inductive.\nloop invariant \\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall integer k; (k >= 0 && k < y1) ==> (y1 - k * y2 != 0);\n    loop invariant \\forall integer k; (k >= 0 && k < y2) ==> (y2 - k * y1 != 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y1 > 0 is inductive.\nloop invariant y2 > 0 is inductive.\nloop invariant \\forall integer k; (k >= 0 && k < y1) ==> (y1 - k * y2 != 0) is neither established nor preserved.\nloop invariant \\forall integer k; (k >= 0 && k < y2) ==> (y2 - k * y1 != 0) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 >= 0 && y2 >= 0;\n    loop invariant y1 <= \\max(y1, y2);\n    loop invariant y2 <= \\max(y1, y2);\n    loop invariant y1 == \\old(y1) || y1 <= \\old(y1);\n    loop invariant y2 == \\old(y2) || y2 <= \\old(y2);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall int k; 1 <= k <= y1 && 1 <= k <= y2 ==> y1 % k == 0 && y2 % k == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t/*@\nloop invariant i1: y1 > 0;\nloop invariant i2: y2 > 0;\n\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 > 0;\n    loop invariant y2 > 0;\n    loop invariant \\forall integer k; (k >= 0 && k < y1) ==> (y1 - k * y2 != 0);\n    loop invariant \\forall integer k; (k >= 0 && k < y2) ==> (y2 - k * y1 != 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t/*@\nloop invariant i1: y1 > 0;\nloop invariant i2: y2 > 0;\n\n\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y1 >= 0 && y2 >= 0;\n    loop invariant y1 <= \\max(y1, y2);\n    loop invariant y2 <= \\max(y1, y2);\n    loop invariant y1 == \\old(y1) || y1 <= \\old(y1);\n    loop invariant y2 == \\old(y2) || y2 <= \\old(y2);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t/*@\nloop invariant i1: y1 >= 0 && y2 >= 0;\nloop invariant i2: y1 <= \\max(y1, y2);\nloop invariant i3: y2 <= \\max(y1, y2);\n\n\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t/*@\nloop invariant i1: y1 > 0;\nloop invariant i2: y2 > 0;\n\n\n\nloop invariant i8: y1 >= 0 && y2 >= 0;\nloop invariant i9: y1 <= \\max(y1, y2);\nloop invariant i10: y2 <= \\max(y1, y2);\n\n\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \twhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\nThe loop will continue executing as long as `y1 != y2`. Inside the loop, there are two cases:\n\n1. If `y1 > y2`, then `y1` will be updated to `y1 - y2`. In this case, the value of `y1` decreases.\n2. If `y1 <= y2`, then `y2` will be updated to `y2 - y1`. In this case, the value of `y2` decreases.\n\nNow, let's find the ranking function for the loop:\n\nSince both `y1` and `y2` are always positive integers (as per the initial condition `y1 > 0 && y2 > 0`), we can use the sum of the two variables as our ranking function. The ranking function will be `y1 + y2`.\n\nNow, let's prove that this is a valid ranking function:\n\n1. The value of the ranking function is always positive since `y1` and `y2` are both positive integers.\n2. The value of the ranking function decreases with every loop iteration. This is because, in each iteration, either `y1` or `y2` decreases, which in turn decreases the value of `y1 + y2`.\n\nSo, the ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant y1 + y2;\n*/\n```\n\nThis ranking function is valid because it meets the necessary conditions: it is always positive and decreases with each loop iteration, ensuring that the loop will eventually terminate.",
                    "First, let's analyze the loop:\n\n```c\nwhile (y1 != y2) {\n    if (y1 > y2) {\n        y1 = y1 - y2;\n    } else {\n        y2 = y2 - y1;\n    }\n}\n```\n\nThe loop terminates when `y1` becomes equal to `y2`. In each iteration, either `y1` decreases or `y2` decreases, depending on which one is larger. Since both `y1` and `y2` are positive, they will eventually become equal, so the loop will terminate.\n\nThe ranking function for this loop is a lexicographic ranking function with two expressions:\n\n1. `y1 + y2`\n2. `abs(y1 - y2)`\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y1 + y2;\n    loop variant abs(y1 - y2);\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The sum `y1 + y2` always decreases in each iteration of the loop, as either `y1` or `y2` is decreased.\n2. The absolute difference `abs(y1 - y2)` also decreases in each iteration, as the difference between `y1` and `y2` gets smaller.\n3. Both expressions are positive for the loop to continue executing, as both `y1` and `y2` are positive."
                ],
                "output": [
                    "/*@\n    loop variant y1 + y2;\n*/",
                    "/*@\n    loop variant y1 + y2;\n    loop variant abs(y1 - y2);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t/*@\nloop invariant i1: y1 > 0;\nloop invariant i2: y2 > 0;\nloop invariant i8: y1 >= 0 && y2 >= 0;\nloop invariant i9: y1 <= \\max(y1, y2);\nloop invariant i10: y2 <= \\max(y1, y2);\nloop variant y1 + y2;\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y1 > 0 is inductive.\nloop invariant y2 > 0 is inductive.\nloop invariant y1 >= 0 && y2 >= 0 is inductive.\nloop invariant y1 <= \\max(y1, y2) is inductive.\nloop invariant y2 <= \\max(y1, y2) is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int y1, y2;\n\ty1 = unknown_int();\n\ty2 = unknown_int();\n\tif (y1 > 0 && y2 > 0) {\n    \t//@ ghost variant_expression measure = { y1 + y2, abs(y1 - y2) };\n/*@\nloop invariant i1: y1 > 0;\nloop invariant i2: y2 > 0;\nloop invariant i8: y1 >= 0 && y2 >= 0;\nloop invariant i9: y1 <= \\max(y1, y2);\nloop invariant i10: y2 <= \\max(y1, y2);\nloop invariant measure.a == y1 + y2 && measure.b == abs(y1 - y2);loop variant measure for lexicographic;\n*/\nwhile (y1 != y2) {\n\t    \tif (y1 > y2) {\n\t\t    \ty1 = y1 - y2;\n    \t\t} else {\n\t    \t\ty2 = y2 - y1;\n\t\t    }\n\t    //@ ghost measure.a = y1 + y2;\n//@ ghost measure.b = abs(y1 - y2);}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 135,
        "success_count": 51,
        "failure_count": 84,
        "success_rate": 0.37777777777777777
    }
}