{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program.\n\n- x and y are both assigned unknown_int(). We cannot make any assumptions about their values.\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\n- The loop condition is `x >= 0`.\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition. Since the post-condition is just returning 0, we do not need to worry about it.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0 ==> x >= y;\n*/\n```\n\nExplanation:\n- If x >= 0 (the loop condition), then x >= y. This is because x is always reduced by y in the loop body, so x will always be greater or equal to y when x >= 0. This invariant holds before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "Let's analyze the given program:\n\n1. Pre-conditions and variable assignments:\n   - x and y are assigned non-deterministic integer values.\n   - The program returns 0 if y < 1.\n\n2. The loop condition is x >= 0.\n\nNow let's find the loop invariants:\n\n- Before the loop execution, x and y are assigned non-deterministic integer values.\n- In every iteration of the loop, x is decremented by y and y is assigned a new non-deterministic integer value.\n- After the loop termination, x must be less than 0.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0 ==> x >= \\old(x) - y;\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant y >= 1;\n*/\n```",
                    "First, let's analyze the given C program:\n\n1. Pre-conditions or variable assignments in the program:\n   - x and y are initialized with unknown_int() values.\n2. Loop condition: x >= 0\n3. Post-condition: Not explicitly given, but we need to ensure the termination of the loop.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - x and y are initialized with unknown_int() values, so there are no specific bounds or relations between them.\n\n2. In every iteration of the loop:\n   - x is decremented by y, and y is assigned a new unknown_int() value.\n   - Since y is always non-negative (y >= 1) when entering the loop, x will decrease in each iteration.\n\n3. After the loop termination:\n   - The loop terminates when x < 0 or y < 1.\n\nBased on this analysis, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant y < 1 ==> x < 0;\n*/\n```\n\nThese invariants help Frama-C verify the loop termination, as they ensure that either x decreases below 0 or y becomes less than 1."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0 ==> x >= y;\n*/",
                    "/*@ \n    loop invariant x >= 0 ==> x >= \\old(x) - y;\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant y < 1 ==> x < 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> x >= y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 ==> x >= y is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> x >= \\old(x) - y;\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant y >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant y < 1 ==> x < 0;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant x >= 0 ==> y >= 1 is inductive.\nloop invariant y < 1 ==> x < 0 is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> x >= y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\n\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> x >= \\old(x) - y;\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant y >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\n\n\nloop invariant i3: y >= 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant y < 1 ==> x < 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: x >= 0 ==> y >= 1;\nloop invariant i2: y < 1 ==> x < 0;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\n\n\n\nloop invariant i4: y >= 1;\nloop invariant i5: x >= 0 ==> y >= 1;\nloop invariant i6: y < 1 ==> x < 0;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (x >= 0) {\n    x = x - y;\n    y = unknown_int();\n    if (y < 1) {\n        break;\n    }\n}\n```\n\nNext, let's define the ranking function for this loop. Since `x` is decremented by `y` in each iteration and the loop condition is `x >= 0`, we can use `x` as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. The value of `x` is positive for the loop to continue executing. This is ensured by the loop condition `x >= 0`.\n\n2. The value of `x` decreases with every successive iteration of the loop. This is because `x` is decremented by `y` in each iteration (`x = x - y`), and `y` is guaranteed to be at least 1 (due to the `if (y < 1) { break; }` statement).\n\nTherefore, the ranking function `x` is valid for this loop, as it ensures that the loop must terminate.",
                    "We need to find a ranking function that decreases with every iteration of the loop and is positive for the loop to continue executing. In this case, we can choose the value of 'x' as our ranking function. Let's write it in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nNow, let's justify why 'x' is a valid ranking function:\n\n1. 'x' is positive for the loop to continue executing: The loop condition is \"x >= 0\", which means that as long as 'x' is non-negative, the loop will continue to execute.\n\n2. 'x' decreases with every iteration: In each iteration, 'x' is updated by subtracting 'y' from its current value (x = x - y). Since 'y' is always positive (y >= 1), the value of 'x' will decrease with each iteration.\n\nTherefore, the chosen ranking function 'x' is a valid ranking function for the given loop."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i4: y >= 1;\nloop invariant i5: x >= 0 ==> y >= 1;\nloop invariant i6: y < 1 ==> x < 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 1 is inductive.\nloop invariant x >= 0 ==> y >= 1 is inductive.\nloop invariant y < 1 ==> x < 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i4: y >= 1;\nloop invariant i5: x >= 0 ==> y >= 1;\nloop invariant i6: y < 1 ==> x < 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 1 is inductive.\nloop invariant x >= 0 ==> y >= 1 is inductive.\nloop invariant y < 1 ==> x < 0 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 71,
        "success_count": 28,
        "failure_count": 43,
        "success_rate": 0.39436619718309857
    }
}