{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n\nPre-conditions:\n- n and m are non-deterministic integers from unknown_int() function calls.\n\nVariable assignments:\n- v1 = n (inside the if condition)\n- v2 = 0 (inside the if condition)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: v1 > 0\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@\n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 <= n;\n    loop invariant (n >= 0 && m > 0) ==> v1 + v2 == n;\n*/\n```\n\nThese loop invariants ensure that:\n1. v1 and v2 are non-negative.\n2. v2 is bounded by m.\n3. The sum of v1 and v2 is always less than or equal to n.\n4. When the if condition (n >= 0 && m > 0) is true, the sum of v1 and v2 remains equal to n throughout the loop.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n- Pre-condition: `n >= 0 && m > 0`\n- Variable assignments before the loop: `v1 = n;` and `v2 = 0;`\n- Loop condition: `v1 > 0`\n\nNow, let's analyze the loop body and find the loop invariants:\n\n1. `v1` is non-increasing: Initially, `v1` is equal to `n` and is decremented by 1 in each iteration when `v2 < m`. So, it never increases.\n2. `v2` is always between 0 and `m`: Initially, `v2` is 0, and it can only increase up to `m`. When `v2` reaches `m`, it is reset to 0.\n3. `v1` is always less than or equal to `n`: Initially, `v1` is equal to `n` and it is decremented by 1 in each iteration when `v2 < m`. So, it is always less than or equal to `n`.\n4. The relation between `v1`, `v2`, and `n`: At the end of the loop (when `v1 == 0`), the value of `v2` is `n % m`, i.e., `v2 == n % m`.\n\nTaking these observations into account, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant 0 <= v1;\n    loop invariant v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 != m);\n    loop invariant (v1 == 0) ==> (v2 == n % m);\n*/\n```",
                    "Preconditions and variable assignments:\n1. n and m are assigned non-deterministic integer values.\n2. n >= 0 and m > 0 are the conditions for entering the loop.\n3. v1 is initialized to n, and v2 is initialized to 0.\n\nLoop condition:\nThe loop continues as long as v1 > 0.\n\nLoop Invariants:\n```\n/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant n - v1 <= v2;\n    loop invariant v1 + m * (n - v1 - v2) == n;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 <= n;\n    loop invariant (n >= 0 && m > 0) ==> v1 + v2 == n;\n*/",
                    "/*@ \n    loop invariant 0 <= v1;\n    loop invariant v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 != m);\n    loop invariant (v1 == 0) ==> (v2 == n % m);\n*/",
                    "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant n - v1 <= v2;\n    loop invariant v1 + m * (n - v1 - v2) == n;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 <= n;\n    loop invariant (n >= 0 && m > 0) ==> v1 + v2 == n;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= v1 is inductive.\nloop invariant 0 <= v2 is inductive.\nloop invariant v2 <= m is inductive.\nloop invariant v1 + v2 <= n is inductive.\nloop invariant (n >= 0 && m > 0) ==> v1 + v2 == n is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= v1;\n    loop invariant v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 != m);\n    loop invariant (v1 == 0) ==> (v2 == n % m);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= v1 is inductive.\nloop invariant v1 <= n is inductive.\nloop invariant 0 <= v2 <= m is inductive.\nloop invariant (v1 > 0) ==> (v2 != m) is established but not preserved.\nloop invariant (v1 == 0) ==> (v2 == n % m) is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant n - v1 <= v2;\n    loop invariant v1 + m * (n - v1 - v2) == n;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant n >= 0 is inductive.\nloop invariant m > 0 is inductive.\nloop invariant v1 >= 0 is inductive.\nloop invariant v2 >= 0 is inductive.\nloop invariant v2 <= m is inductive.\nloop invariant n - v1 <= v2 is inductive.\nloop invariant v1 + m * (n - v1 - v2) == n is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= v1;\n    loop invariant 0 <= v2;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 <= n;\n    loop invariant (n >= 0 && m > 0) ==> v1 + v2 == n;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: 0 <= v1;\nloop invariant i2: 0 <= v2;\nloop invariant i3: v2 <= m;\nloop invariant i4: v1 + v2 <= n;\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= v1;\n    loop invariant v1 <= n;\n    loop invariant 0 <= v2 <= m;\n    loop invariant (v1 > 0) ==> (v2 != m);\n    loop invariant (v1 == 0) ==> (v2 == n % m);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: 0 <= v1;\nloop invariant i2: v1 <= n;\nloop invariant i3: 0 <= v2 <= m;\n\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant n - v1 <= v2;\n    loop invariant v1 + m * (n - v1 - v2) == n;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: n >= 0;\nloop invariant i2: m > 0;\nloop invariant i3: v1 >= 0;\nloop invariant i4: v2 >= 0;\nloop invariant i5: v2 <= m;\n\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: 0 <= v1;\nloop invariant i2: 0 <= v2;\nloop invariant i3: v2 <= m;\nloop invariant i4: v1 + v2 <= n;\n\nloop invariant i7: v1 <= n;\nloop invariant i8: 0 <= v2 <= m;\n\n\nloop invariant i11: n >= 0;\nloop invariant i12: m > 0;\nloop invariant i13: v1 >= 0;\nloop invariant i14: v2 >= 0;\n\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "The loop in the given program is as follows:\n\n```\nwhile (v1 > 0) {\n    if (v2 < m) {\n        v2++;\n        v1--;\n    } else {\n        v2 = 0;\n    }\n}\n```\n\nTo find the ranking function, we need to find an expression that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nLet's consider the following lexicographic ranking function:\n\n```\nv1, (m - v2)\n```\n\nNow, let's prove that this ranking function is valid:\n\n1. Both v1 and (m - v2) are positive for the loop to continue executing. Since the loop condition is `v1 > 0`, it's clear that v1 is positive. Also, since `v2 < m` in the if condition, it means that `(m - v2)` is positive as well.\n\n2. In each iteration of the loop, either v1 decreases or (m - v2) decreases. If the if condition is true (`v2 < m`), then v1 decreases by 1 (`v1--`) and v2 increases by 1 (`v2++`). In this case, the value of the first expression (v1) decreases. If the if condition is false, then v2 is reset to 0 (`v2 = 0`), which means that (m - v2) increases, but the value of v1 remains the same. This satisfies the lexicographic ranking function condition.\n\nSo, the lexicographic ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```",
                    "First, let's analyze the loop condition and the loop body:\n\nThe loop condition is `v1 > 0`, meaning that the loop will continue executing as long as `v1` is positive.\n\nInside the loop body, there are two cases:\n\n1. If `v2 < m`, then `v2` is incremented by 1 and `v1` is decremented by 1.\n2. If `v2 >= m`, then `v2` is reset to 0.\n\nNow, let's find the ranking function for this loop. We can use a lexicographic ranking function with two expressions, one for `v1` and another for `m - v2`.\n\nHere is the ranking function:\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `v1` and `m - v2` are always positive during the loop execution, as `v1 > 0` is the loop condition, and `v2` is always in the range `[0, m)`.\n\n2. In each iteration of the loop, either `v1` decreases by 1 (in the first case) or remains the same (in the second case). When `v1` remains the same, `v2` is reset to 0, which means `m - v2` increases, and thus the lexicographic order is preserved.\n\nSince the ranking function satisfies these conditions, it helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant v1;\n    loop variant m - v2;\n*/",
                    "/*@\n    loop variant v1;\n    loop variant m - v2;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t//@ ghost variant_expression measure = { v1, m - v2 };\n/*@\nloop invariant i1: 0 <= v1;\nloop invariant i2: 0 <= v2;\nloop invariant i3: v2 <= m;\nloop invariant i4: v1 + v2 <= n;\nloop invariant i7: v1 <= n;\nloop invariant i8: 0 <= v2 <= m;\nloop invariant i11: n >= 0;\nloop invariant i12: m > 0;\nloop invariant i13: v1 >= 0;\nloop invariant i14: v2 >= 0;\nloop invariant measure.a == v1 && measure.b == m - v2;loop variant measure for lexicographic;\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t//@ ghost measure.a = v1;\n//@ ghost measure.b = m - v2;}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint v1, v2;\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t//@ ghost variant_expression measure = { v1, m - v2 };\n/*@\nloop invariant i1: 0 <= v1;\nloop invariant i2: 0 <= v2;\nloop invariant i3: v2 <= m;\nloop invariant i4: v1 + v2 <= n;\nloop invariant i7: v1 <= n;\nloop invariant i8: 0 <= v2 <= m;\nloop invariant i11: n >= 0;\nloop invariant i12: m > 0;\nloop invariant i13: v1 >= 0;\nloop invariant i14: v2 >= 0;\nloop invariant measure.a == v1 && measure.b == m - v2;loop variant measure for lexicographic;\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2++;\n\t\t\t\tv1--;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t//@ ghost measure.a = v1;\n//@ ghost measure.b = m - v2;}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c"
        ],
        "skipped": [],
        "total": 30,
        "success_count": 18,
        "failure_count": 12,
        "success_rate": 0.6
    }
}