{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Let's analyze the given code:\n\nPre-conditions and variable assignments:\n1. y is assigned an unknown integer value.\n2. x is assigned y + 42.\n\nLoop condition:\nx >= 0\n\nLoop body:\n1. y is assigned 2*y - x.\n2. x is assigned (y + x) / 2.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant y >= -42;\n    loop invariant x >= y;\n    loop invariant x >= 0 ==> (y + 42) == x;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- y is assigned an unknown integer value\n- x is assigned the value of y + 42\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is \"x >= 0\"\n\nNow, let's find the loop invariants:\n\n```\n/*@\n  loop invariant x >= y - 42;\n  loop invariant y <= x + 42;\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution, since x = y + 42 and y = y\n(ii) in every iteration of the loop, as both x and y are updated in a way that preserves these invariants\n(iii) after the loop termination, as the loop only terminates when x < 0, which doesn't violate the invariants\n\nThese loop invariants help Frama-C verify the post-condition of the program.",
                    "First, let's note the variable assignments and the loop condition:\n- y is assigned an unknown value.\n- x is assigned the value y + 42.\n- The loop condition is x >= 0.\n\nNow let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant x >= y - 42;\n    loop invariant y >= -42;\n*/\n```\n\nExplanation:\n1. Before the loop execution:\n   - x = y + 42, so x >= y - 42.\n   - y is assigned an unknown value, so y >= -42 is trivially true since there is no constraint on y.\n\n2. In every iteration of the loop:\n   - y is updated as 2*y - x, and x is updated as (y + x) / 2.\n   - If x >= y - 42, then 2*y - x <= y, and (y + x) / 2 >= y - 42. Thus, x >= y - 42 is maintained.\n   - If y >= -42, then 2*y - x >= -42, and x >= y - 42. Thus, y >= -42 is maintained.\n\n3. After the loop termination:\n   - The loop terminates when x < 0.\n   - If x >= y - 42 and x < 0, then x < 0 and x >= y - 42, which together imply the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant y >= -42;\n    loop invariant x >= y;\n    loop invariant x >= 0 ==> (y + 42) == x;\n*/",
                    "/*@\n  loop invariant x >= y - 42;\n  loop invariant y <= x + 42;\n*/",
                    "/*@ \n    loop invariant x >= y - 42;\n    loop invariant y >= -42;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= -42;\n    loop invariant x >= y;\n    loop invariant x >= 0 ==> (y + 42) == x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant y >= -42 is neither established nor preserved.\nloop invariant x >= y is inductive.\nloop invariant x >= 0 ==> (y + 42) == x is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@\n  loop invariant x >= y - 42;\n  loop invariant y <= x + 42;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant x >= y - 42 is inductive.\nloop invariant y <= x + 42 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y - 42;\n    loop invariant y >= -42;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y - 42 is inductive.\nloop invariant y >= -42 is neither established nor preserved.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= -42;\n    loop invariant x >= y;\n    loop invariant x >= 0 ==> (y + 42) == x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\n\nloop invariant i2: x >= y;\nloop invariant i3: x >= 0 ==> (y + 42) == x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@\n  loop invariant x >= y - 42;\n  loop invariant y <= x + 42;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: x >= y - 42;\nloop invariant i2: y <= x + 42;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y - 42;\n    loop invariant y >= -42;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i1: x >= y - 42;\n\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\n\nloop invariant i2: x >= y;\nloop invariant i3: x >= 0 ==> (y + 42) == x;\nloop invariant i4: x >= y - 42;\nloop invariant i5: y <= x + 42;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\twhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, we need to identify the loop in the given program. The loop is the while loop:\n\n```\nwhile (x >= 0) {\n\ty = 2*y - x;\n\tx = (y + x) / 2;\n}\n```\n\nNow let's find the ranking function. We can use the value of `x` as the ranking function since it is decreasing with each iteration of the loop.\n\n```\n/*@ \n    loop variant x;\n */\n```\n\nExplanation:\n\n1. The value of `x` is always non-negative at the beginning of the loop: This is because we initialize `x` as `y + 42` where `y` is an integer, and the loop continues only when `x >= 0`.\n\n2. The value of `x` decreases with each iteration: In each iteration, we update the value of `x` as `(y + x) / 2`. We know that `y = 2*y - x` in the previous step, so the new value of `x` can be expressed as `(3*y - x) / 2`. Since `x >= 0`, we have `3*y - x >= 0`, and therefore `(3*y - x) / 2 <= y`. So, the new value of `x` is less than or equal to the old value of `y`. Moreover, the new value of `y` is `2*y - x`, which is greater than the old value of `y`. Hence, the new value of `x` is less than the new value of `y`. This shows that the value of `x` decreases with each iteration.\n\n3. The loop terminates when `x` becomes negative: Since the value of `x` is decreasing and non-negative at the beginning, eventually it will become negative, causing the loop to terminate.\n\nTherefore, the ranking function `x` is a valid ranking function for the given loop.",
                    "First, let's analyze the loop and its variables:\n\n```\nwhile (x >= 0) {\n\ty = 2*y - x;\n\tx = (y + x) / 2;\n}\n```\n\nThe loop continues to execute as long as `x >= 0`. The variables involved in the loop are `x` and `y`. Let's find a ranking function for this loop.\n\nSince `x` is the condition variable in the loop, we can consider it as the first expression in our lexicographic ranking function. So, our first expression is:\n\n```\ne1 = x;\n```\n\nNow, we need to find another expression that decreases when `x` remains the same. Let's analyze the update of `y` and `x` in the loop:\n\n```\ny = 2*y - x;\nx = (y + x) / 2;\n```\n\nNotice that the value of `y` is updated as `y = 2*y - x`. We can use this equation to find an expression that decreases when `x` remains the same. Let's consider the following expression:\n\n```\ne2 = y - x;\n```\n\nNow let's analyze the update of `e2`:\n\n```\ne2_new = (2*y - x) - ((y + x) / 2) = y - (3*x / 2);\n```\n\nIf `x` remains the same and `y` is updated, then `e2` decreases:\n\n```\ne2_new < e2 <=> y - (3*x / 2) < y - x <=> x / 2 > 0;\n```\n\nSince we know that `x` remains the same and is non-negative, this inequality holds true. Thus, we have a lexicographic ranking function `(e1, e2)`:\n\n```\n/*@\n    loop variant x;\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because `e1` decreases with every successive iteration of the loop, and `e2` decreases when `e1` remains the same. The value of both expressions must be positive for the loop to continue executing, which helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@ \n    loop variant x;\n */",
                    "/*@\n    loop variant x;\n    loop variant y - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t/*@\nloop invariant i2: x >= y;\nloop invariant i3: x >= 0 ==> (y + 42) == x;\nloop invariant i4: x >= y - 42;\nloop invariant i5: y <= x + 42;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant x >= y is inductive.\nloop invariant x >= 0 ==> (y + 42) == x is inductive.\nloop invariant x >= y - 42 is inductive.\nloop invariant y <= x + 42 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint y = unknown_int();\n\tint x = y + 42;\n\t//@ ghost variant_expression measure = { x, y - x };\n/*@\nloop invariant i2: x >= y;\nloop invariant i3: x >= 0 ==> (y + 42) == x;\nloop invariant i4: x >= y - 42;\nloop invariant i5: y <= x + 42;\nloop invariant measure.a == x && measure.b == y - x;loop variant measure for lexicographic;\n*/\nwhile (x >= 0) {\n\t\ty = 2*y - x;\n\t\tx = (y + x) / 2;\n\t//@ ghost measure.a = x;\n//@ ghost measure.b = y - x;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 69,
        "success_count": 26,
        "failure_count": 43,
        "success_rate": 0.37681159420289856
    }
}