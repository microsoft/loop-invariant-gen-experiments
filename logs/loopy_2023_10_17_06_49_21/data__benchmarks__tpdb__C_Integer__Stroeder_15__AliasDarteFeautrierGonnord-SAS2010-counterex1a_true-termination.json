{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n\n1. `n`, `b`, `x`, and `y` are assigned non-deterministic integer values.\n2. There are no explicit preconditions in the program.\n\nLoop condition:\n\n1. The loop condition is `x >= 0 && 0 <= y && y <= n`.\n\nPost-condition:\n\n1. There is no explicit post-condition in the program, but we can observe that the loop terminates when `x < 0 || y < 0 || y > n`.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x;\n    loop invariant b == 0 || b == 1;\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: Because of the loop condition.\n2. In every iteration of the loop: Because of the updates to `y`, `x`, and `b` within the loop body.\n3. After the loop termination: Because the loop condition is no longer true, but the invariants still hold true.",
                    "Pre-conditions and variable assignments:\n\n1. n, b, x, and y are initialized with non-deterministic values from unknown_int().\n2. Variables x and y are used in the loop condition.\n\nLoop condition:\n\n1. x >= 0\n2. 0 <= y\n3. y <= n\n\nLoop invariants:\n\n```\n/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant x >= 0;\n    loop invariant (b == 0) ==> (y <= y@pre + 1);\n    loop invariant (b == 1) ==> (y >= y@pre - 1);\n    loop invariant (b == 1) ==> (x >= x@pre - 1);\n*/\n```",
                    "Pre-conditions and variable assignments in the program:\n- n, b, x, and y are assigned non-deterministic integer values.\n\nLoop condition:\n- x >= 0 && 0 <= y && y <= n\n\nPost-condition:\n- Not explicitly given. We need to provide loop invariants for the given loop that hold true in all iterations.\n\nLoop invariants for the given program:\n\n```\n/*@ \n    loop invariant 0 <= y && y <= n;\n    loop invariant x >= 0;\n    loop invariant b == 0 || b == 1;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x;\n    loop invariant b == 0 || b == 1;\n*/",
                    "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant x >= 0;\n    loop invariant (b == 0) ==> (y <= y@pre + 1);\n    loop invariant (b == 1) ==> (y >= y@pre - 1);\n    loop invariant (b == 1) ==> (x >= x@pre - 1);\n*/",
                    "/*@ \n    loop invariant 0 <= y && y <= n;\n    loop invariant x >= 0;\n    loop invariant b == 0 || b == 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x;\n    loop invariant b == 0 || b == 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= y <= n is neither established nor preserved.\nloop invariant 0 <= x is neither established nor preserved.\nloop invariant b == 0 || b == 1 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant x >= 0;\n    loop invariant (b == 0) ==> (y <= y@pre + 1);\n    loop invariant (b == 1) ==> (y >= y@pre - 1);\n    loop invariant (b == 1) ==> (x >= x@pre - 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unexpected token 'pre'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y && y <= n;\n    loop invariant x >= 0;\n    loop invariant b == 0 || b == 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= y && y <= n is neither established nor preserved.\nloop invariant x >= 0 is neither established nor preserved.\nloop invariant b == 0 || b == 1 is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant 0 <= x;\n    loop invariant b == 0 || b == 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 5,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y <= n;\n    loop invariant x >= 0;\n    loop invariant (b == 0) ==> (y <= y@pre + 1);\n    loop invariant (b == 1) ==> (y >= y@pre - 1);\n    loop invariant (b == 1) ==> (x >= x@pre - 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y && y <= n;\n    loop invariant x >= 0;\n    loop invariant b == 0 || b == 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 6,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "The given loop has two branches, controlled by the value of `b`. In the first branch (when `b == 0`), `y` increases, and in the second branch (when `b != 0`), `y` decreases and `x` decreases as well. We can use a lexicographic ranking function to capture the progress made in the loop.\n\nHere is the ranking function for the loop:\n\n```\n/*@\n    loop variant x;\n    loop variant n - y;\n*/\n```\n\nThis ranking function is valid for the following reasons:\n\n1. The values of `x` and `n - y` are always non-negative in the loop, as `x >= 0`, `0 <= y`, and `y <= n`. This ensures that the values of the ranking function are positive for the loop to continue executing.\n\n2. In the first branch (when `b == 0`), `y` increases, so `n - y` decreases. In this case, the value of `x` remains the same, so the lexicographic order is maintained.\n\n3. In the second branch (when `b != 0`), `y` decreases and `x` also decreases. This means that the value of `x` decreases, and the lexicographic order is maintained.\n\nSince the ranking function is positive during the loop execution and either `x` decreases or `n - y` decreases, the loop must terminate, and the ranking function is valid.",
                    "First, let's analyze the loop. The loop continues executing as long as `x >= 0` and `0 <= y <= n`. Inside the loop, there are two cases depending on the value of `b`.\n\nIf `b == 0`, `y` is incremented, and `b` may change to `1` with some probability. If `b == 1`, `y` is decremented, and `x` may be decremented, and `b` may change to `0` with some probability.\n\nNow let's find the ranking function. The ranking function should decrease in each iteration and be positive for the loop to continue executing. We can use a lexicographic ranking function in this case. Let's use the following lexicographic ranking function:\n\n```\n/*@\n    loop variant x;\n    loop variant n - y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. `x` is always non-negative inside the loop, as the loop condition is `x >= 0`.\n\n2. `n - y` is always non-negative inside the loop, as the loop condition is `0 <= y <= n`.\n\n3. In each iteration of the loop, either `x` decreases or `n - y` decreases:\n\n   - If `b == 0`, `y` increases, making `n - y` decrease.\n   - If `b == 1`, either `x` decreases (when `unknown_int() != 0`) or the value of `n - y` remains the same. In the latter case, the value of `b` will be `0` in the next iteration, and `n - y` will decrease as explained earlier.\n\nHence, the lexicographic ranking function `(x, n - y)` is a valid ranking function for the given loop, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n    loop variant n - y;\n*/",
                    "/*@\n    loop variant x;\n    loop variant n - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, n - y };\n/*@\n\nloop invariant measure.a == x && measure.b == n - y;loop variant measure for lexicographic;\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t//@ ghost measure.a = x;\n//@ ghost measure.b = n - y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, n, b;\n\tn = unknown_int();\n\tb = unknown_int();\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, n - y };\n/*@\n\nloop invariant measure.a == x && measure.b == n - y;loop variant measure for lexicographic;\n*/\nwhile (x >= 0 && 0 <= y && y <= n) {\n\t\tif (b == 0) {\n\t\t\ty = y + 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tb = 1;\n            }\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\tx = x - 1;\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t}\n\t//@ ghost measure.a = x;\n//@ ghost measure.b = n - y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 114,
        "success_count": 43,
        "failure_count": 71,
        "success_rate": 0.37719298245614036
    }
}