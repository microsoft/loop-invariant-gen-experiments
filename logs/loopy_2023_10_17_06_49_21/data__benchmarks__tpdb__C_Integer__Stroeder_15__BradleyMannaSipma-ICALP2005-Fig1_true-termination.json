{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \twhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \twhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, we note the pre-conditions and variable assignments in the program:\n\n- x, y, and N are non-deterministic integers.\n- The program has a conditional statement that checks if N, x, and y are within certain bounds.\n\nNext, we analyze the loop condition and body:\n\n- The loop condition is `x <= N`.\n- The loop body has a conditional statement that can update x and y in two different ways.\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant N < 536870912;\n    loop invariant x < 536870912;\n    loop invariant y < 536870912;\n    loop invariant x >= -1073741824;\n    loop invariant x + y >= 0;\n    loop invariant x <= N;\n*/\n```",
                    "First, let's note the initial conditions and the loop condition:\n\nInitial conditions:\n1. N < 536870912\n2. x < 536870912\n3. y < 536870912\n4. x >= -1073741824\n5. x + y >= 0\n\nLoop condition: x <= N\n\nNow, let's analyze the loop body and find loop invariants:\n\n1. x doesn't decrease during the loop, so x <= N will be true throughout the loop execution.\n2. x and y both increase in the loop, so their values will always remain less than or equal to their original values.\n\nConsidering the above points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x <= N;\n    loop invariant x >= \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. `x`, `y`, and `N` are assigned non-deterministic integer values.\n2. The conditional statement restricts the values of `x`, `y`, and `N` to be within the range (-1073741824, 536870912). \n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is `x <= N`.\n\nNext, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n1. `x` is always non-negative, as it starts with a non-negative value and only increases in the loop.\n2. `y` is always non-negative, as it starts with a non-negative value and only increases in the loop.\n3. `x` is always less than or equal to `N` during the loop execution because of the loop condition.\n4. When the loop terminates, `x` must be greater than `N`.\n\nFinally, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= N;\n    loop invariant x <= N ==> x + y >= 0;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant N < 536870912;\n    loop invariant x < 536870912;\n    loop invariant y < 536870912;\n    loop invariant x >= -1073741824;\n    loop invariant x + y >= 0;\n    loop invariant x <= N;\n*/",
                    "/*@ \n    loop invariant x <= N;\n    loop invariant x >= \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= N;\n    loop invariant x <= N ==> x + y >= 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant N < 536870912;\n    loop invariant x < 536870912;\n    loop invariant y < 536870912;\n    loop invariant x >= -1073741824;\n    loop invariant x + y >= 0;\n    loop invariant x <= N;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant N < 536870912 is inductive.\nloop invariant x < 536870912 is established but not preserved.\nloop invariant y < 536870912 is established but not preserved.\nloop invariant x >= -1073741824 is inductive.\nloop invariant x + y >= 0 is inductive.\nloop invariant x <= N is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= N;\n    loop invariant x >= \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 17: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= N;\n    loop invariant x <= N ==> x + y >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is preserved but not established.\nloop invariant 0 <= y is preserved but not established.\nloop invariant x <= N is neither established nor preserved.\nloop invariant x <= N ==> x + y >= 0 is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant N < 536870912;\n    loop invariant x < 536870912;\n    loop invariant y < 536870912;\n    loop invariant x >= -1073741824;\n    loop invariant x + y >= 0;\n    loop invariant x <= N;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t/*@\nloop invariant i1: N < 536870912;\n\n\nloop invariant i4: x >= -1073741824;\nloop invariant i5: x + y >= 0;\n\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= N;\n    loop invariant x >= \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t/*@\n\n\n\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x <= N;\n    loop invariant x <= N ==> x + y >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t/*@\n\n\n\n\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t/*@\nloop invariant i1: N < 536870912;\n\n\nloop invariant i4: x >= -1073741824;\nloop invariant i5: x + y >= 0;\n\n\n\n\n\n\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \twhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x <= N) {\n    if (unknown_int() != 0) {\n        x = 2*x + y;\n        y = y + 1;\n    } else {\n        x = x + 1;\n    }\n}\n```\n\nNow, we need to find a ranking function for this loop. Let's consider the following lexicographic ranking function:\n\n```\n/*@\n    loop variant N - x, y;\n*/\n```\n\nThis ranking function is valid for the following reasons:\n\n1. The value of `N - x` is positive for the loop to continue executing since the loop condition is `x <= N`.\n\n2. The value of `N - x` decreases in every iteration of the loop because `x` increases in both branches of the `if` statement (`x = 2*x + y` or `x = x + 1`).\n\n3. The value of `y` decreases lexicographically as it increases by 1 in the first branch of the `if` statement (`y = y + 1`).\n\nIn conclusion, the lexicographic ranking function `(N - x, y)` guarantees that the loop will terminate, as the value of `N - x` decreases in every iteration and the value of `y` decreases lexicographically.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (x <= N) {\n    if (unknown_int() != 0) {\n        x = 2*x + y;\n        y = y + 1;\n    } else {\n        x = x + 1;\n    }\n}\n```\n\nNow, let's find the ranking function for this loop. We need to find an expression that decreases with every successive iteration and is positive for the loop to continue executing. We can consider a lexicographic ranking function with two expressions (e1, e2) where e1 = N - x, and e2 = -y.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant N - x;\n    loop variant -y;\n*/\n```\n\nExplanation for the validity of the ranking function:\n\n1. e1 = N - x:\n   - The value of N remains constant throughout the loop.\n   - In each iteration of the loop, the value of x either increases by 1 or by 2x+y.\n   - Hence, the value of N - x either remains the same or decreases in each iteration.\n   - Since x <= N for the loop to continue executing, N - x will always be positive.\n\n2. e2 = -y:\n   - In each iteration, the value of y either remains the same or increases by 1.\n   - Hence, the value of -y either remains the same or decreases in each iteration.\n   - Since y is an integer, -y will always be non-positive.\n\nTogether, the lexicographic ranking function (e1, e2) ensures that the loop must terminate because either e1 decreases or remains the same. If e1 remains the same, e2 must decrease. And, both e1 and e2 must be positive for the loop to continue executing."
                ],
                "output": [
                    "/*@\n    loop variant N - x, y;\n*/",
                    "/*@\n    loop variant N - x;\n    loop variant -y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t/*@\nloop invariant i1: N < 536870912;\nloop invariant i4: x >= -1073741824;\nloop invariant i5: x + y >= 0;\nloop variant N - x, y;\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    }\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 19: unexpected token ','"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, N;\n\tx = unknown_int();\n\ty = unknown_int();\n\tN = unknown_int();\n\t\n\tif (N < 536870912 && x < 536870912 && y < 536870912 && x >= -1073741824) {\n    \tif (x + y >= 0) {\n\t    \t//@ ghost variant_expression measure = { N - x, -y };\n/*@\nloop invariant i1: N < 536870912;\nloop invariant i4: x >= -1073741824;\nloop invariant i5: x + y >= 0;\nloop invariant measure.a == N - x && measure.b == -y;loop variant measure for lexicographic;\n*/\nwhile (x <= N) {\n\t\t    \tif (unknown_int() != 0) {\n\t\t\t    \tx = 2*x + y;\n\t\t\t\t    y = y + 1;\n    \t\t\t} else {\n\t    \t\t\tx = x + 1;\n\t\t    \t}\n\t\t    //@ ghost measure.a = N - x;\n//@ ghost measure.b = -y;}\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 136,
        "success_count": 51,
        "failure_count": 85,
        "success_rate": 0.375
    }
}