{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\twhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\twhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments and loop condition:\n\n- x is assigned an unknown integer value at the beginning of the program.\n- debug is assigned the value 0.\n- The loop condition is x < 255.\n\nNow, let's analyze the loop body and find the loop invariants:\n\n- If x is odd, x is decremented by 1.\n- If x is even, x is incremented by 2.\n- Since debug is always 0, the second condition (x = 0) is never executed.\n\nTaking into account the loop condition and the variable assignments, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant x <= 256;\n    loop invariant x % 2 == 0 ==> x <= 254;\n*/\n```\n\nThese loop invariants are true:\n\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nAlso, these invariants help Frama-C to verify the post-condition.",
                    "First, let's note the initial conditions and loop conditions:\n\n- The variable x is initialized with an unknown value.\n- The loop condition is x < 255.\n\nNow, let's analyze the loop body:\n\n1. If x is odd (x % 2 != 0), then x is decremented by 1.\n2. If x is even (x % 2 == 0), then x is incremented by 2.\n3. If debug is not equal to 0, x is set to 0, but since debug is initialized to 0 and never changes, this condition will never be met.\n\nWith this information, we can derive the loop invariants:\n\n- x is always even before, during, and after the loop.\n- x is always non-negative before, during, and after the loop.\n- x is always less than or equal to 255 before and during the loop.\n\nNow, let's write the loop invariants as ACSL annotations:\n\n```\n/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant x <= 255;\n*/\n```",
                    "First, let's analyze the given program:\n\n1. Pre-conditions and variable assignments:\n   - int x = unknown_int();\n   - int debug = 0;\n\n2. Loop condition: x < 255\n\n3. Loop body: \n   - If x is odd (x % 2 != 0), then x is decremented by 1.\n   - If x is even (x % 2 == 0), then x is incremented by 2.\n   - If debug is not equal to 0, then x is set to 0. However, debug is always 0 in this program, so this condition will never be true.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= 256;\n    loop invariant x % 2 == 0;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. The value of x is always between 0 and 256.\n   - Before the loop: We don't know the initial value of x, but the loop condition ensures x is less than 255.\n   - In each iteration: If x is odd, it is decremented by 1, ensuring x ≥ 0. If x is even, it is incremented by 2, ensuring x ≤ 256.\n   - After the loop: The loop stops when x ≥ 255, so x must be less than or equal to 256.\n\n2. The value of x is always even.\n   - Before the loop: We don't know the initial value of x, but the loop body ensures that x becomes even in the first iteration if it's odd.\n   - In each iteration: If x is odd, it is decremented by 1, making it even. If x is even, it is incremented by 2, keeping it even.\n   - After the loop: Since x is always even during the loop, it will also be even after the loop."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant x <= 256;\n    loop invariant x % 2 == 0 ==> x <= 254;\n*/",
                    "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant x <= 255;\n*/",
                    "/*@ \n    loop invariant 0 <= x <= 256;\n    loop invariant x % 2 == 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant x <= 256;\n    loop invariant x % 2 == 0 ==> x <= 254;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -1 is neither established nor preserved.\nloop invariant x <= 256 is preserved but not established.\nloop invariant x % 2 == 0 ==> x <= 254 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant x <= 255;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x % 2 == 0 is preserved but not established.\nloop invariant x >= 0 is preserved but not established.\nloop invariant x <= 255 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= 256;\n    loop invariant x % 2 == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x <= 256 is preserved but not established.\nloop invariant x % 2 == 0 is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant x <= 256;\n    loop invariant x % 2 == 0 ==> x <= 254;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\n\n\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x % 2 == 0;\n    loop invariant x >= 0;\n    loop invariant x <= 255;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\n\n\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x <= 256;\n    loop invariant x % 2 == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\n\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\n\n\n\n\n\n\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\twhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop behavior. The loop iterates as long as `x < 255`. Inside the loop, if `x` is odd, it is decremented by 1, and if `x` is even, it is incremented by 2. The `debug` variable does not affect the loop behavior, so we can ignore it for now.\n\nNow let's find the ranking function. We need an expression that decreases with every successive iteration of the loop and must be positive for the loop to continue executing.\n\nFor this loop, the ranking function is `255 - x`. Let's see why this is a valid ranking function:\n\n1. The value of the expression is positive for the loop to continue executing: Since the loop condition is `x < 255`, it is guaranteed that `255 - x` will be positive as long as the loop executes.\n\n2. The value of the expression must decrease with every successive iteration of the loop: In each iteration, `x` either increases by 2 (if even) or decreases by 1 (if odd). In both cases, the value of `255 - x` will decrease. If `x` is even, the value will decrease by 2, and if `x` is odd, the value will decrease by 1.\n\nSo, the ranking function for this loop is `255 - x`. Here's the ACSL syntax:\n\n```\n/*@\n    loop variant 255 - x;\n*/\n```",
                    "First, let's simplify the code by removing the debug-related statements:\n\n```\nint main() {\n\tint x = unknown_int();\n\n\twhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nNow, let's analyze the loop:\n\n1. If `x` is odd, it is decremented by 1.\n2. If `x` is even, it is incremented by 2.\n\nThe loop continues as long as `x` is less than 255. We can identify a ranking function as follows:\n\n```\n/*@\n    loop variant 255 - x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive as long as the loop continues executing (`x < 255`).\n2. The value of the ranking function decreases with every iteration since:\n   - If `x` is odd, `x` is decremented, and `255 - x` decreases.\n   - If `x` is even, `x` is incremented by 2, but since it is even, it will never reach 255, and `255 - x` still decreases.\n\nTherefore, the ranking function `255 - x` proves that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant 255 - x;\n*/",
                    "/*@\n    loop variant 255 - x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\nloop variant 255 - x;\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint debug = 0;\n\n\t/*@\n\nloop variant 255 - x;\n*/\nwhile (x < 255) {\n\t\tif (x % 2 != 0) {\n\t\t\tx--;\n\t\t} else {\n\t\t\tx += 2;\n\t\t}\n\t\tif (debug != 0) {\n\t\t\tx = 0;\n\t\t}\n\t}\n\treturn 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 75,
        "success_count": 31,
        "failure_count": 44,
        "success_rate": 0.41333333333333333
    }
}