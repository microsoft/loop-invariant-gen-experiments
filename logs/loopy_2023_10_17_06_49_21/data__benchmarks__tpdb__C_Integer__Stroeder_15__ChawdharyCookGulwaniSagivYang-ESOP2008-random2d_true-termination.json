{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, note the pre-conditions and variable assignments in the program:\n- N is initialized to 10.\n- x, y, and i are initialized to 0.\n- r is assigned a value from `unknown_int()` function inside the loop, and can have a garbage value before the loop starts.\n\nNow, analyze the loop body and make a note of the loop condition:\n- The loop condition is `i < N`.\n\nNow, output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/\n```",
                    "First, note the pre-conditions and variable assignments in the program:\n- N is assigned the value 10.\n- x, y, and i are all initialized to 0.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is i < N.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (i == 0) ==> (x == 0 && y == 0);\n    loop invariant (r < 0 || r > 3) ==> (x == \\old(x) && y == \\old(y));\n    loop invariant (r == 0) ==> (x == \\old(x) + 1 && y == \\old(y));\n    loop invariant (r == 1) ==> (x == \\old(x) - 1 && y == \\old(y));\n    loop invariant (r == 2) ==> (x == \\old(x) && y == \\old(y) + 1);\n    loop invariant (r == 3) ==> (x == \\old(x) && y == \\old(y) - 1);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.",
                    "First, let's make a note of the pre-conditions and variable assignments in the program. The relevant pre-conditions and variable assignments are:\n1. N is assigned the value 10.\n2. x, y, and i are initialized to 0.\n\nNext, let's analyze the loop body and make a note of the loop condition. The loop condition is i < N.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x - y <= i;\n    loop invariant -i <= x - y <= i;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They can help Frama-C verify the post-condition."
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (i == 0) ==> (x == 0 && y == 0);\n    loop invariant (r < 0 || r > 3) ==> (x == \\old(x) && y == \\old(y));\n    loop invariant (r == 0) ==> (x == \\old(x) + 1 && y == \\old(y));\n    loop invariant (r == 1) ==> (x == \\old(x) - 1 && y == \\old(y));\n    loop invariant (r == 2) ==> (x == \\old(x) && y == \\old(y) + 1);\n    loop invariant (r == 3) ==> (x == \\old(x) && y == \\old(y) - 1);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x - y <= i;\n    loop invariant -i <= x - y <= i;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= N is inductive.\nloop invariant -i <= x <= i is inductive.\nloop invariant -i <= y <= i is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (i == 0) ==> (x == 0 && y == 0);\n    loop invariant (r < 0 || r > 3) ==> (x == \\old(x) && y == \\old(y));\n    loop invariant (r == 0) ==> (x == \\old(x) + 1 && y == \\old(y));\n    loop invariant (r == 1) ==> (x == \\old(x) - 1 && y == \\old(y));\n    loop invariant (r == 2) ==> (x == \\old(x) && y == \\old(y) + 1);\n    loop invariant (r == 3) ==> (x == \\old(x) && y == \\old(y) - 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x - y <= i;\n    loop invariant -i <= x - y <= i;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 0 <= i <= N is inductive.\nloop invariant x - y <= i is inductive.\nloop invariant -i <= x - y <= i is inductive.\nloop invariant -i <= x <= i is inductive.\nloop invariant -i <= y <= i is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: -i <= x <= i;\nloop invariant i3: -i <= y <= i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 5,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant (i == 0) ==> (x == 0 && y == 0);\n    loop invariant (r < 0 || r > 3) ==> (x == \\old(x) && y == \\old(y));\n    loop invariant (r == 0) ==> (x == \\old(x) + 1 && y == \\old(y));\n    loop invariant (r == 1) ==> (x == \\old(x) - 1 && y == \\old(y));\n    loop invariant (r == 2) ==> (x == \\old(x) && y == \\old(y) + 1);\n    loop invariant (r == 3) ==> (x == \\old(x) && y == \\old(y) - 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: (i == 0) ==> (x == 0 && y == 0);\n\n\n\n\n\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant x - y <= i;\n    loop invariant -i <= x - y <= i;\n    loop invariant -i <= x <= i;\n    loop invariant -i <= y <= i;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: x - y <= i;\nloop invariant i3: -i <= x - y <= i;\nloop invariant i4: -i <= x <= i;\nloop invariant i5: -i <= y <= i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 5,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: -i <= x <= i;\nloop invariant i3: -i <= y <= i;\nloop invariant i5: (i == 0) ==> (x == 0 && y == 0);\n\n\n\n\n\nloop invariant i12: x - y <= i;\nloop invariant i13: -i <= x - y <= i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "The loop in the given program iterates as long as `i < N`. The value of `i` increases by 1 in each iteration, while `N` remains constant. Therefore, the ranking function for this loop is `N - i`. \n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant N - i;\n*/\n```\n\nExplanation:\n- The value of the ranking function, `N - i`, is positive as long as `i < N`. This is the loop's condition, ensuring that the loop executes while the ranking function is positive.\n- The value of `i` increases by 1 in each iteration, making the value of `N - i` decrease with every successive iteration.\n- Since the ranking function's value decreases in each iteration and is positive during loop execution, it ensures that the loop will eventually terminate.",
                    "We need to find a ranking function that decreases with every successive iteration of the loop and is positive for the loop to continue executing. In this case, we can use the difference between N and i as the ranking function. \n\nThe value of i increases by 1 in each iteration, and the loop continues until i < N. This means that N - i will always be positive for the loop to execute and will decrease with every iteration.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant N - i;\n*/\n```\n\nThis ranking function is valid because it satisfies the two conditions: (1) It is positive for the loop to continue executing, and (2) it decreases with every successive iteration of the loop. This helps to prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant N - i;\n*/",
                    "/*@\n    loop variant N - i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: -i <= x <= i;\nloop invariant i3: -i <= y <= i;\nloop invariant i5: (i == 0) ==> (x == 0 && y == 0);\nloop invariant i12: x - y <= i;\nloop invariant i13: -i <= x - y <= i;\nloop variant N - i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= N is inductive.\nloop invariant -i <= x <= i is inductive.\nloop invariant -i <= y <= i is inductive.\nloop invariant (i == 0) ==> (x == 0 && y == 0) is inductive.\nloop invariant x - y <= i is inductive.\nloop invariant -i <= x - y <= i is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i2: -i <= x <= i;\nloop invariant i3: -i <= y <= i;\nloop invariant i5: (i == 0) ==> (x == 0 && y == 0);\nloop invariant i12: x - y <= i;\nloop invariant i13: -i <= x - y <= i;\nloop variant N - i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= N is inductive.\nloop invariant -i <= x <= i is inductive.\nloop invariant -i <= y <= i is inductive.\nloop invariant (i == 0) ==> (x == 0 && y == 0) is inductive.\nloop invariant x - y <= i is inductive.\nloop invariant -i <= x - y <= i is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 144,
        "success_count": 55,
        "failure_count": 89,
        "success_rate": 0.3819444444444444
    }
}