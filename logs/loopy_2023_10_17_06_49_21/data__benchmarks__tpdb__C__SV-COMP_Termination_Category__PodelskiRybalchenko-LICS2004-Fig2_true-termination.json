{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n\nLoop condition:\n- `while (x > 0 && y > 0)`\n\nNow, let's find the loop invariants:\n\nBefore the loop execution, in every iteration of the loop and after the loop termination, we know that:\n- If `unknown_int()` returns a non-zero value (true), `x` decreases by 1, and `y` takes the old value of `x`.\n- If `unknown_int()` returns zero (false), `x` decreases by 2, and `y` increases by 1.\n\nWe can express these loop invariants using implications and conjunctions:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\old(x) > x ==> x == \\old(x) - 1 && y == \\old(x);\n    loop invariant \\old(x) > x ==> x == \\old(y) - 2 && y == \\old(x) + 1;\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination. They help Frama-C verify the post-condition of the given program.",
                    "First, let's analyze the given program.\n\nPre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values.\n\nLoop condition:\n- The loop continues as long as x > 0 and y > 0.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, the loop invariants are true:\n- x and y are non-negative (since the loop starts only if x > 0 and y > 0).\n\n2. In every iteration of the loop:\n- If the condition (unknown_int()) is true, x is decremented by 1, and y is set to the old value of x.\n- If the condition (unknown_int()) is false, x is set to the old value of y - 2, and y is incremented by 1.\n\n3. After the loop termination:\n- Either x <= 0 or y <= 0.\n\nTaking these points into account, we can define the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (unknown_int() ==> x == \\at(x, LoopEntry) - 1 && y == \\at(x, LoopEntry)) || (!unknown_int() ==> x == \\at(y, LoopEntry) - 2 && y == \\at(x, LoopEntry) + 1);\n*/\n```\n\nThese loop invariants hold before the loop execution, during each iteration, and after the loop termination, and they help Frama-C verify the post-condition.",
                    "Let's analyze the given program:\n\n- Pre-conditions or variable assignments: x and y are assigned with unknown_int() values.\n- Loop condition: x > 0 && y > 0\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: x and y have arbitrary integer values.\n2. In every iteration of the loop:\n   - If the unknown_int() function returns a non-zero value (true), x is decremented by 1 and y is assigned the old value of x.\n   - If the unknown_int() function returns zero (false), x is assigned the old value of y minus 2, and y is assigned the old value of x plus 1.\n3. After the loop termination: x <= 0 or y <= 0\n\nConsidering the loop invariants, we can write the following ACSL annotations:\n\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (old_x > x) ==> x == old_x - 1;\n    loop invariant (old_x > x) ==> y == old_x;\n    loop invariant (old_y > x) ==> x == old_y - 2;\n    loop invariant (old_y > x) ==> y == old_x + 1;\n*/\n```\n\nHere, we have included the loop invariants that are true before the loop execution, in every iteration, and after the loop termination. We have also used implications (==>) to handle the conditional nature of the code and to make the invariants trivially true when the corresponding conditions are not satisfied."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\old(x) > x ==> x == \\old(x) - 1 && y == \\old(x);\n    loop invariant \\old(x) > x ==> x == \\old(y) - 2 && y == \\old(x) + 1;\n*/",
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (unknown_int() ==> x == \\at(x, LoopEntry) - 1 && y == \\at(x, LoopEntry)) || (!unknown_int() ==> x == \\at(y, LoopEntry) - 2 && y == \\at(x, LoopEntry) + 1);\n*/",
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (old_x > x) ==> x == old_x - 1;\n    loop invariant (old_x > x) ==> y == old_x;\n    loop invariant (old_y > x) ==> x == old_y - 2;\n    loop invariant (old_y > x) ==> y == old_x + 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\old(x) > x ==> x == \\old(x) - 1 && y == \\old(x);\n    loop invariant \\old(x) > x ==> x == \\old(y) - 2 && y == \\old(x) + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 11: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (unknown_int() ==> x == \\at(x, LoopEntry) - 1 && y == \\at(x, LoopEntry)) || (!unknown_int() ==> x == \\at(y, LoopEntry) - 2 && y == \\at(x, LoopEntry) + 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 10: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (old_x > x) ==> x == old_x - 1;\n    loop invariant (old_x > x) ==> y == old_x;\n    loop invariant (old_y > x) ==> x == old_y - 2;\n    loop invariant (old_y > x) ==> y == old_x + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 10: unbound logic variable old_x. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\old(x) > x ==> x == \\old(x) - 1 && y == \\old(x);\n    loop invariant \\old(x) > x ==> x == \\old(y) - 2 && y == \\old(x) + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (unknown_int() ==> x == \\at(x, LoopEntry) - 1 && y == \\at(x, LoopEntry)) || (!unknown_int() ==> x == \\at(y, LoopEntry) - 2 && y == \\at(x, LoopEntry) + 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 6,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant (old_x > x) ==> x == old_x - 1;\n    loop invariant (old_x > x) ==> y == old_x;\n    loop invariant (old_y > x) ==> x == old_y - 2;\n    loop invariant (old_y > x) ==> y == old_x + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 9,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop. The loop will continue executing as long as both `x` and `y` are positive. Inside the loop, there are two branches. In the first branch, `x` is decreased by 1, and `y` is assigned the old value of `x`. In the second branch, `x` is decreased by 2, and `y` is increased by 1.\n\nNow, let's try to find the ranking function. Since the loop is dealing with two variables `x` and `y`, we can consider a lexicographic ranking function.\n\nWe can use the following lexicographic ranking function for this loop:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nNow, let's explain why this is a valid ranking function:\n\n1. The values of `x` and `y` must be positive for the loop to continue executing. This is true because the loop condition is `x > 0 && y > 0`.\n\n2. In each iteration, either `x` must decrease, or if `x` remains the same, then `y` must decrease. Let's check each branch:\n\n   - In the first branch, `x` is decreased by 1, so the first condition is satisfied. `y` is assigned the old value of `x`, so it can either decrease or remain the same.\n\n   - In the second branch, `x` is decreased by 2, so the first condition is satisfied. `y` is increased by 1, which doesn't directly satisfy the second condition. However, since `x` is always decreased in this branch, we don't need to check the second condition.\n\nThus, the lexicographic ranking function `(x, y)` is valid for this loop, and it helps prove that the loop must terminate.",
                    "First, let's identify the loop invariant conditions. In this case, the loop continues executing while `x > 0` and `y > 0`.\n\nNow let's analyze the loop body. There are two branches, each updating the values of `x` and `y`:\n\n1. If the `unknown_int()` is non-zero, `x` is decremented by 1, and `y` is set to the previous value of `x`.\n2. If the `unknown_int()` is zero, `x` is set to the previous value of `y` - 2, and `y` is incremented by 1.\n\nWe need to find a ranking function that decreases in every iteration and is positive for the loop to continue executing.\n\nFor this program, the ranking function can be a lexicographic tuple (e1, e2) where:\n\n- e1 = x + y\n- e2 = x\n\nNow let's express the ranking function in ACSL syntax and explain why it is a valid ranking function:\n\n```c\n/*@\n    loop invariant x > 0 && y > 0;\n    loop variant x + y, x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. e1 (x + y) is positive for the loop to continue executing, as both x and y are positive.\n2. In both branches of the loop, the value of e1 decreases:\n\n   - In the first branch, x is decremented and y is set to the previous value of x. The sum x + y will decrease by 1.\n   - In the second branch, x is set to the previous value of y - 2, and y is incremented by 1. The sum x + y will decrease by 1.\n\n3. If the value of e1 (x + y) remains the same, the value of e2 (x) must decrease:\n\n   - In the first branch, x is decremented by 1, so e2 decreases.\n   - In the second branch, x is set to the previous value of y - 2, which is always less than the previous value of x (since x > 0 and y > 0), so e2 decreases.\n\nSince the ranking function decreases in every iteration and is positive for the loop to continue executing, it is a valid ranking function, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n    loop variant y;\n*/",
                    "/*@\n    loop invariant x > 0 && y > 0;\n    loop variant x + y, x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t//@ ghost variant_expression measure = { x, y };\n/*@\n\nloop invariant measure.a == x && measure.b == y;loop variant measure for lexicographic;\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t//@ ghost measure.a = x;\n//@ ghost measure.b = y;}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\nloop variant x + y, x;\n*/\nwhile (x > 0 && y > 0) {\n\t\tint old_x = x;\n\t\tint old_y = y;\n\t\tif (unknown_int()) {\n\t\t\tx = old_x - 1;\n\t\t\ty = old_x;\n\t\t} else {\n\t\t\tx = old_y - 2;\n\t\t\ty = old_x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 10: unexpected token ','"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 80,
        "success_count": 32,
        "failure_count": 48,
        "success_rate": 0.4
    }
}