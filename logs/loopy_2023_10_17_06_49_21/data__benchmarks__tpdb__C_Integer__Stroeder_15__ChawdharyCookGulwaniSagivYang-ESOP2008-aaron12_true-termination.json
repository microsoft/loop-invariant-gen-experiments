{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\twhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\twhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Let's analyze the given program step by step:\n\n1. Pre-conditions or variable assignments:\n   - x, y, and z are assigned non-deterministic integer values using `unknown_int()`.\n\n2. Loop condition:\n   - The loop continues as long as `x >= y`.\n\nNow, let's find the loop invariants:\n\nLoop Invariants:\n\n```\n/*@ \n    loop invariant x >= y ==> x >= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant x < y ==> x <= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant z >= \\at(z, Pre) - 1;\n*/\n```\n\nThese loop invariants are true:\n- Before the loop execution: the loop condition is checked, and the invariants hold trivially true based on the initial values of x, y, and z.\n- In every iteration of the loop: the invariants are maintained by the loop body, regardless of which branch of the if statement is executed.\n- After the loop termination: the loop terminates when `x < y`, and the invariants still hold.",
                    "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n\n1. x, y, and z are initialized with unknown_int() which returns an unknown integer value. We cannot make any assumptions about these values.\n\nLoop condition:\n\n1. The loop continues while x >= y.\n\nNow, let's find the necessary loop invariants:\n\n1. At the beginning of the loop, x, y, and z are initialized with unknown integer values.\n\n2. In every iteration of the loop, either x is increased, and y is increased by x, or x is decreased by z, and y is increased by z * z. Also, z is decreased by 1 in the latter case.\n\n3. After the loop termination, x must be less than y.\n\nConsidering these points, the loop invariants are:\n\n```\n/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant z >= \\min(z, 0);\n*/\n```\n\nHere, we have two loop invariants:\n\n1. x is always greater than or equal to the minimum of x and y. This is because x can only increase or decrease, and the loop condition ensures x is greater than or equal to y in every iteration.\n\n2. z is always greater than or equal to the minimum of z and 0. This is because z can only decrease by 1 in each iteration, and there's no lower bound on its initial value.",
                    "First, let's note the variable assignments and loop condition:\n- x, y, and z are assigned unknown_int() values, which are non-deterministic.\n- The loop condition is x >= y.\n\nNow let's analyze the loop body:\n- If unknown_int() != 0, x is incremented by 1 and y is incremented by x.\n- Else, x is decremented by z, y is incremented by z^2, and z is decremented by 1.\n\nGiven this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant x <= \\max(x, y);\n    loop invariant y >= \\min(x, y);\n    loop invariant y <= \\max(x, y);\n    loop invariant z >= \\min(z, 0);\n    loop invariant z <= \\max(z, 0);\n    loop invariant \\forall int k; 0 <= k <= unknown_int() ==> x >= y + k;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThe loop invariants imply the post condition."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= y ==> x >= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant x < y ==> x <= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant z >= \\at(z, Pre) - 1;\n*/",
                    "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant z >= \\min(z, 0);\n*/",
                    "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant x <= \\max(x, y);\n    loop invariant y >= \\min(x, y);\n    loop invariant y <= \\max(x, y);\n    loop invariant z >= \\min(z, 0);\n    loop invariant z <= \\max(z, 0);\n    loop invariant \\forall int k; 0 <= k <= unknown_int() ==> x >= y + k;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x >= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant x < y ==> x <= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant z >= \\at(z, Pre) - 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant z >= \\min(z, 0);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant x >= \\min(x, y) is inductive.\nloop invariant z >= \\min(z, 0) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant x <= \\max(x, y);\n    loop invariant y >= \\min(x, y);\n    loop invariant y <= \\max(x, y);\n    loop invariant z >= \\min(z, 0);\n    loop invariant z <= \\max(z, 0);\n    loop invariant \\forall int k; 0 <= k <= unknown_int() ==> x >= y + k;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 19: unexpected token ')'"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x >= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant x < y ==> x <= \\at(x, Pre) && y >= \\at(y, Pre);\n    loop invariant z >= \\at(z, Pre) - 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant z >= \\min(z, 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\nloop invariant i1: x >= \\min(x, y);\nloop invariant i2: z >= \\min(z, 0);\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= \\min(x, y);\n    loop invariant x <= \\max(x, y);\n    loop invariant y >= \\min(x, y);\n    loop invariant y <= \\max(x, y);\n    loop invariant z >= \\min(z, 0);\n    loop invariant z <= \\max(z, 0);\n    loop invariant \\forall int k; 0 <= k <= unknown_int() ==> x >= y + k;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\nloop invariant i1: x >= \\min(x, y);\nloop invariant i2: x <= \\max(x, y);\nloop invariant i3: y >= \\min(x, y);\nloop invariant i4: y <= \\max(x, y);\nloop invariant i5: z >= \\min(z, 0);\nloop invariant i6: z <= \\max(z, 0);\n\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\n\n\n\nloop invariant i4: x >= \\min(x, y);\nloop invariant i5: z >= \\min(z, 0);\nloop invariant i7: x <= \\max(x, y);\nloop invariant i8: y >= \\min(x, y);\nloop invariant i9: y <= \\max(x, y);\nloop invariant i11: z <= \\max(z, 0);\n\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\twhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop conditions and the loop body. The loop continues to execute as long as `x >= y`. Inside the loop, there are two branches:\n\n1. If `unknown_int() != 0`, then `x` is incremented by 1, and `y` is incremented by `x`. In this case, `x` increases, but `y` increases by a larger amount since it's incremented by the new value of `x`. Therefore, the gap between `x` and `y` decreases.\n\n2. If `unknown_int() == 0`, then `x` is decremented by `z`, and `y` is incremented by `z * z`. Additionally, `z` is decremented by 1. In this case, the gap between `x` and `y` also decreases since `x` decreases and `y` increases.\n\nAs we can see, in both branches, the gap between `x` and `y` decreases. Therefore, we can use the expression `y - x` as a ranking function, as its value must be positive for the loop to continue executing, and it decreases with every successive iteration of the loop.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions for a ranking function: its value is positive for the loop to continue executing, and it decreases with every successive iteration of the loop, ensuring that the loop must terminate.",
                    "First, we need to identify the loop in the given program:\n\n```\nwhile (x >= y) {\n    if (unknown_int() != 0) {\n        x = x + 1;\n        y = y + x;\n    } else {\n        x = x - z;\n        y = y + (z * z);\n        z = z - 1;\n    }\n}\n```\n\nNow, we need to find a lexicographic ranking function that decreases with every iteration of the loop. Let's consider the expressions `x - y` and `z` as our lexicographic ranking function:\n\n```\n/*@\n    loop variant x - y, z;\n*/\n```\n\nNow, let's explain why this is a valid ranking function:\n\n- For the loop to execute, the condition `x >= y` must hold. This means that `x - y` must be non-negative, and since `z` is decreasing, it must also be positive.\n- In the first branch of the if statement, `x` is incremented by 1 and `y` is incremented by `x`. Therefore, the value of `x - y` decreases, while the value of `z` remains the same.\n- In the second branch of the if statement, `x` is decremented by `z`, and `y` is incremented by `z^2`. Since `z > 0`, this means that `x - y` decreases. Also, `z` is decremented by 1, so its value decreases as well.\n\nIn both branches of the loop, the lexicographic ranking function decreases, ensuring that the loop must terminate. Therefore, the chosen ranking function is valid."
                ],
                "output": [
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant x - y, z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\nloop invariant i4: x >= \\min(x, y);\nloop invariant i5: z >= \\min(z, 0);\nloop invariant i7: x <= \\max(x, y);\nloop invariant i8: y >= \\min(x, y);\nloop invariant i9: y <= \\max(x, y);\nloop invariant i11: z <= \\max(z, 0);\nloop variant y - x;\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x >= \\min(x, y) is inductive.\nloop invariant z >= \\min(z, 0) is inductive.\nloop invariant x <= \\max(x, y) is inductive.\nloop invariant y >= \\min(x, y) is inductive.\nloop invariant y <= \\max(x, y) is inductive.\nloop invariant z <= \\max(z, 0) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, z;\n\tx = unknown_int();\n\ty = unknown_int();\n\tz = unknown_int();\n\t/*@\nloop invariant i4: x >= \\min(x, y);\nloop invariant i5: z >= \\min(z, 0);\nloop invariant i7: x <= \\max(x, y);\nloop invariant i8: y >= \\min(x, y);\nloop invariant i9: y <= \\max(x, y);\nloop invariant i11: z <= \\max(z, 0);\nloop variant x - y, z;\n*/\nwhile (x >= y) {\n\t\tif (unknown_int() != 0) {\n\t\t\tx = x + 1;\n\t\t\ty = y + x;\n\t\t} else {\n\t\t\tx = x - z;\n\t\t\ty = y + (z * z);\n\t\t\tz = z - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 19: unexpected token ','"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 139,
        "success_count": 53,
        "failure_count": 86,
        "success_rate": 0.381294964028777
    }
}