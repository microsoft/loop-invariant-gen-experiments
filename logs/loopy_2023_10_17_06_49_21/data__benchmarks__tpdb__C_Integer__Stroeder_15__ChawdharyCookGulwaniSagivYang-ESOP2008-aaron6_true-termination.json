{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n1. x, tx, y, ty, and n are assigned non-deterministic integer values.\n2. There is a conditional statement (x + y >= 0) that guards the while loop.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is: x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n\nConsidering the above information, we can come up with the following loop invariants:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant (x + y >= 0) ==> (x + y >= tx + ty);\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: The loop invariants are trivially true since the variables have non-deterministic values, and the loop condition is not yet checked.\n2. In every iteration of the loop: The loop body updates tx, ty, x, and y, but the loop condition ensures that the invariants are maintained.\n3. After the loop termination: The loop invariants still hold, even though the loop condition is not satisfied anymore.",
                    "First, let's analyze the pre-conditions or variable assignments in the program:\n\n1. All variables x, tx, y, ty, and n are assigned non-deterministic values through unknown_int() function calls.\n2. The loop condition is: x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1\n3. The loop body has two branches based on the non-deterministic unknown_int() function call:\n   a. If the function returns a non-zero value, x and y are updated with new non-deterministic values, and tx and ty take the previous values of x and y.\n   b. If the function returns zero, x is updated with a new non-deterministic value, and tx takes the previous value of x.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. x, tx, y, ty, and n are all assigned non-deterministic integer values.\n2. The loop condition is: (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1)\n\nNow, let's analyze the loop body:\n\n1. If the unknown_int() function returns a non-zero value, then tx = x, ty = y, x = unknown_int(), and y = unknown_int().\n2. If the unknown_int() function returns zero, then tx = x, and x = unknown_int().\n\nNow, let's write down the loop invariants:\n\n```\n/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant (x + y >= 0) ==> (x + y >= tx + ty);\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                    "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant (x + y >= 0) ==> (x + y >= tx + ty);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= n is neither established nor preserved.\nloop invariant x >= 2 * tx + y is neither established nor preserved.\nloop invariant y >= ty + 1 is neither established nor preserved.\nloop invariant x >= tx + 1 is neither established nor preserved.\nloop invariant (x + y >= 0) ==> (x + y >= tx + ty) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= n is neither established nor preserved.\nloop invariant x >= 2 * tx + y is neither established nor preserved.\nloop invariant y >= ty + 1 is neither established nor preserved.\nloop invariant x >= tx + 1 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= n is neither established nor preserved.\nloop invariant x >= 2 * tx + y is neither established nor preserved.\nloop invariant y >= ty + 1 is neither established nor preserved.\nloop invariant x >= tx + 1 is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n    loop invariant (x + y >= 0) ==> (x + y >= tx + ty);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t/*@\n\n\n\n\n\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t/*@\n\n\n\n\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= n;\n    loop invariant x >= 2 * tx + y;\n    loop invariant y >= ty + 1;\n    loop invariant x >= tx + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t/*@\n\n\n\n\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t/*@\n\n\n\n\n\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\twhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t}\n\t}\t\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's rewrite the loop condition in a more readable form:\n\n```\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1)\n```\n\nNow, let's find the ranking function for this loop. In this case, we can use a lexicographic ranking function with two expressions (e1, e2):\n\n```\n/*@\n    loop variant n - x;\n    loop variant x - 2 * tx - y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. Both expressions must be positive for the loop to continue executing. This is true because the loop condition enforces that `x <= n`, `x >= 2 * tx + y`, `y >= ty + 1`, and `x >= tx + 1`.\n\n2. The lexicographic order states that either `e1` must decrease or its value remains the same, and if its value remains the same, then `e2` must decrease.\n\nIn this loop, the variables `x`, `y`, `tx`, and `ty` can be updated in each iteration. However, `n` remains constant throughout the loop. Therefore, either `x` decreases (which makes `n - x` increase), or `x` remains the same, and `tx` and/or `y` must increase, causing the value of `x - 2 * tx - y` to decrease.\n\nThus, this ranking function proves that the loop must terminate.",
                    "First, let's simplify the given program by removing irrelevant parts and renaming variables for better clarity:\n\n```c\nint main() {\n    int x, x_old, y, y_old, n;\n    x = unknown_int();\n    x_old = unknown_int();\n    y = unknown_int();\n    y_old = unknown_int();\n    n = unknown_int();\n\n    if (x + y >= 0) {\n        while (x <= n && x >= 2 * x_old + y && y >= y_old + 1 && x >= x_old + 1) {\n            if (unknown_int() != 0) {\n                x_old = x;\n                y_old = y;\n                x = unknown_int();\n                y = unknown_int();\n            } else {\n                x_old = x;\n                x = unknown_int();\n            }\n        }\n    }\n    return 0;\n}\n```\n\nNow, let's analyze the loop conditions and update statements to find the ranking function.\n\nLoop conditions:\n\n1. x <= n\n2. x >= 2 * x_old + y\n3. y >= y_old + 1\n4. x >= x_old + 1\n\nUpdate statements:\n\n1. x_old = x; y_old = y; x = unknown_int(); y = unknown_int();\n2. x_old = x; x = unknown_int();\n\nWe can observe that `x` and `y` are always non-negative, as the loop starts with the condition `x + y >= 0`. Moreover, `x` is bounded by `n`, as per condition 1. The value of `x_old` is always less than `x`, and the value of `y_old` is always less than `y`.\n\nBased on these observations, we can construct the following lexicographic ranking function:\n\n```\n/*@\n    loop variant n - x;\n    loop variant y - y_old;\n*/\n```\n\nThis ranking function is valid because:\n\n1. Both `n - x` and `y - y_old` are non-negative for the loop to continue executing.\n2. The value of `n - x` is non-increasing, i.e., either it decreases or it remains the same.\n3. If `n - x` remains the same, the value of `y - y_old` must decrease.\n\nHence, the loop must eventually terminate, and the given ranking function is valid."
                ],
                "output": [
                    "/*@\n    loop variant n - x;\n    loop variant x - 2 * tx - y;\n*/",
                    "/*@\n    loop variant n - x;\n    loop variant y - y_old;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t//@ ghost variant_expression measure = { n - x, x - 2 * tx - y };\n/*@\n\nloop invariant measure.a == n - x && measure.b == x - 2 * tx - y;loop variant measure for lexicographic;\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t//@ ghost measure.a = n - x;\n//@ ghost measure.b = x - 2 * tx - y;}\n\t}\t\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, tx, y, ty, n;\n\tx = unknown_int();\n\ttx = unknown_int();\n\ty = unknown_int();\n\tty = unknown_int();\n\tn = unknown_int();\n\tif (x + y >= 0) {\n\t\t//@ ghost variant_expression measure = { n - x, y - y_old };\n/*@\n\nloop invariant measure.a == n - x && measure.b == y - y_old;loop variant measure for lexicographic;\n*/\nwhile (x <= n && x >= 2 * tx + y && y >= ty + 1 && x >= tx + 1) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ttx = x;\n\t\t\t\tty = y;\n\t\t\t\tx = unknown_int();\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t\ttx = x;\n\t\t\t\tx = unknown_int();\n\t\t\t}\n\t\t//@ ghost measure.a = n - x;\n//@ ghost measure.b = y - y_old;}\n\t}\t\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDiv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWide.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternDivWidening.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AlternKonv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1-modified_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 142,
        "success_count": 53,
        "failure_count": 89,
        "success_rate": 0.3732394366197183
    }
}