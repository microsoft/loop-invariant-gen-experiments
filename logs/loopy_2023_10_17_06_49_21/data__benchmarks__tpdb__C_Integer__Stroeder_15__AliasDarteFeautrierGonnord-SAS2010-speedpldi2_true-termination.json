{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n1. n and m are assigned non-deterministic integer values.\n2. The loop only executes if n >= 0 and m > 0.\n3. Before the loop, v1 is assigned the value of n, and v2 is assigned the value 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is v1 > 0.\n2. In the loop body, v2 increases by 1 and v1 decreases by 1 if v2 < m. Otherwise, v2 is reset to 0.\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v1 <= n;\n    loop invariant n - v1 + v2 >= 0;\n    loop invariant (v2 == m) ==> (n - v1 + v2 >= m);\n*/\n```\n\nThese loop invariants hold true:\n(i) before the loop execution, \n(ii) in every iteration of the loop, and \n(iii) after the loop termination.",
                    "First, let's note the pre-conditions or variable assignments in the program:\n\n1. n = unknown_int();\n2. m = unknown_int();\n3. if (n >= 0 && m > 0) {...}\n4. v1 = n;\n5. v2 = 0;\n\nNow let's analyze the loop body and make a note of the loop condition:\n\nLoop condition: v1 > 0\n\nLoop body:\n```\nif (v2 < m) {\n    v2 = v2 + 1;\n    v1 = v1 - 1;\n} else {\n    v2 = 0;\n}\n```\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n  loop invariant v1 >= 0;\n  loop invariant v2 >= 0;\n  loop invariant v1 <= n;\n  loop invariant v2 <= m;\n  loop invariant n - v1 <= m * v2;\n  loop invariant (v2 < m) ==> (v1 == n - v2);\n  loop invariant (v2 == m) ==> (v1 <= n - m);\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program.\n\nPre-conditions:\n- n >= 0\n- m > 0\n\nVariable assignments:\n- v1 = n\n- v2 = 0\n\nNow, let's analyze the loop body and make a note of the loop condition.\nLoop condition: v1 > 0\n\nNow, let's determine the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nLoop invariants:\n```\n/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 == n;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v1 <= n;\n    loop invariant n - v1 + v2 >= 0;\n    loop invariant (v2 == m) ==> (n - v1 + v2 >= m);\n*/",
                    "/*@ \n  loop invariant v1 >= 0;\n  loop invariant v2 >= 0;\n  loop invariant v1 <= n;\n  loop invariant v2 <= m;\n  loop invariant n - v1 <= m * v2;\n  loop invariant (v2 < m) ==> (v1 == n - v2);\n  loop invariant (v2 == m) ==> (v1 <= n - m);\n*/",
                    "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 == n;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v1 <= n;\n    loop invariant n - v1 + v2 >= 0;\n    loop invariant (v2 == m) ==> (n - v1 + v2 >= m);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant v1 >= 0 is inductive.\nloop invariant v2 >= 0 is inductive.\nloop invariant v1 <= n is inductive.\nloop invariant n - v1 + v2 >= 0 is inductive.\nloop invariant (v2 == m) ==> (n - v1 + v2 >= m) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant v1 >= 0;\n  loop invariant v2 >= 0;\n  loop invariant v1 <= n;\n  loop invariant v2 <= m;\n  loop invariant n - v1 <= m * v2;\n  loop invariant (v2 < m) ==> (v1 == n - v2);\n  loop invariant (v2 == m) ==> (v1 <= n - m);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant v1 >= 0 is inductive.\nloop invariant v2 >= 0 is inductive.\nloop invariant v1 <= n is inductive.\nloop invariant v2 <= m is inductive.\nloop invariant n - v1 <= m * v2 is established but not preserved.\nloop invariant (v2 < m) ==> (v1 == n - v2) is inductive.\nloop invariant (v2 == m) ==> (v1 <= n - m) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 == n;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant n >= 0 is inductive.\nloop invariant m > 0 is inductive.\nloop invariant v1 >= 0 is inductive.\nloop invariant v2 >= 0 is inductive.\nloop invariant v2 <= m is inductive.\nloop invariant v1 + v2 == n is established but not preserved.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v1 <= n;\n    loop invariant n - v1 + v2 >= 0;\n    loop invariant (v2 == m) ==> (n - v1 + v2 >= m);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: v1 >= 0;\nloop invariant i2: v2 >= 0;\nloop invariant i3: v1 <= n;\nloop invariant i4: n - v1 + v2 >= 0;\nloop invariant i5: (v2 == m) ==> (n - v1 + v2 >= m);\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant v1 >= 0;\n  loop invariant v2 >= 0;\n  loop invariant v1 <= n;\n  loop invariant v2 <= m;\n  loop invariant n - v1 <= m * v2;\n  loop invariant (v2 < m) ==> (v1 == n - v2);\n  loop invariant (v2 == m) ==> (v1 <= n - m);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: v1 >= 0;\nloop invariant i2: v2 >= 0;\nloop invariant i3: v1 <= n;\nloop invariant i4: v2 <= m;\n\n\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant n >= 0;\n    loop invariant m > 0;\n    loop invariant v1 >= 0;\n    loop invariant v2 >= 0;\n    loop invariant v2 <= m;\n    loop invariant v1 + v2 == n;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: n >= 0;\nloop invariant i2: m > 0;\nloop invariant i3: v1 >= 0;\nloop invariant i4: v2 >= 0;\nloop invariant i5: v2 <= m;\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t/*@\nloop invariant i1: v1 >= 0;\nloop invariant i2: v2 >= 0;\nloop invariant i3: v1 <= n;\nloop invariant i4: n - v1 + v2 >= 0;\nloop invariant i5: (v2 == m) ==> (n - v1 + v2 >= m);\nloop invariant i9: v2 <= m;\n\n\n\nloop invariant i13: n >= 0;\nloop invariant i14: m > 0;\n\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\twhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the given program:\n\n```\nwhile (v1 > 0) {\n    if (v2 < m) {\n        v2 = v2 + 1;\n        v1 = v1 - 1;\n    } else {\n        v2 = 0;\n    }\n}\n```\n\nNow, let's find the ranking function for this loop. We can use a lexicographic ranking function (v1, v2) since v1 decreases when v2 increases, and v2 resets to 0 when it reaches m.\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The values of v1 and (m - v2) are non-negative integers as v1 starts from a non-negative value (n) and v2 starts from 0, and can only be incremented up to m.\n\n2. In each iteration, either v1 decreases or the value of v2 increases (and therefore, the value of m - v2 decreases). This ensures that the loop will eventually terminate as v1 will reach 0.\n\n3. The loop continues to execute as long as v1 > 0, which means that the ranking function is positive for the loop to execute.\n\nThus, the ranking function (v1, m - v2) is a valid ranking function for the given loop.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (v1 > 0) {\n    if (v2 < m) {\n        v2 = v2 + 1;\n        v1 = v1 - 1;\n    } else {\n        v2 = 0;\n    }\n}\n```\n\nNow let's find a lexicographic ranking function for this loop. We will use two expressions, `(e1, e2)`, where:\n\n- `e1`: This will be the value of `v1`. It will decrease whenever `v2 < m` and stay the same when `v2 >= m`.\n- `e2`: This will be the value of `v2`. It will increase whenever `v2 < m` and be reset to 0 when `v2 >= m`.\n\nNow, let's express the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant v1;\n    loop variant m - v2;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `v1` and `m - v2` are positive when the loop executes. `v1` is positive because it is the loop condition, and `m - v2` is positive because `v2` is less than `m` when the loop executes.\n2. The value of `v1` decreases when `v2 < m`, and the value of `m - v2` decreases when `v2 >= m`. This ensures that the lexicographic tuple `(v1, m - v2)` is decreasing during loop execution, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant v1;\n    loop variant m - v2;\n*/",
                    "/*@\n    loop variant v1;\n    loop variant m - v2;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t//@ ghost variant_expression measure = { v1, m - v2 };\n/*@\nloop invariant i1: v1 >= 0;\nloop invariant i2: v2 >= 0;\nloop invariant i3: v1 <= n;\nloop invariant i4: n - v1 + v2 >= 0;\nloop invariant i5: (v2 == m) ==> (n - v1 + v2 >= m);\nloop invariant i9: v2 <= m;\nloop invariant i13: n >= 0;\nloop invariant i14: m > 0;\nloop invariant measure.a == v1 && measure.b == m - v2;loop variant measure for lexicographic;\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t//@ ghost measure.a = v1;\n//@ ghost measure.b = m - v2;}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int m, n, v1, v2;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (n >= 0 && m > 0) {\n\t\tv1 = n;\n\t\tv2 = 0;\n\t\t//@ ghost variant_expression measure = { v1, m - v2 };\n/*@\nloop invariant i1: v1 >= 0;\nloop invariant i2: v2 >= 0;\nloop invariant i3: v1 <= n;\nloop invariant i4: n - v1 + v2 >= 0;\nloop invariant i5: (v2 == m) ==> (n - v1 + v2 >= m);\nloop invariant i9: v2 <= m;\nloop invariant i13: n >= 0;\nloop invariant i14: m > 0;\nloop invariant measure.a == v1 && measure.b == m - v2;loop variant measure for lexicographic;\n*/\nwhile (v1 > 0) {\n\t\t\tif (v2 < m) {\n\t\t\t\tv2 = v2 + 1;\n\t\t\t\tv1 = v1 - 1;\n\t\t\t} else {\n\t\t\t\tv2 = 0;\n\t\t\t}\n\t\t//@ ghost measure.a = v1;\n//@ ghost measure.b = m - v2;}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Division_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTermination2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple2_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple4_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple6_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple7_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple9_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Rotation180_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Madrid_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple3_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple5_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/NonTerminationSimple8_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileTrue_false-termination.c"
        ],
        "total": 122,
        "success_count": 47,
        "failure_count": 75,
        "success_rate": 0.38524590163934425
    }
}