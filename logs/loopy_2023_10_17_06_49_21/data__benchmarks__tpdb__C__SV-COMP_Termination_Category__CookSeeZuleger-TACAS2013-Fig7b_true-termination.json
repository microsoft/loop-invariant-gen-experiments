{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\twhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\twhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\nPre-conditions or variable assignments:\n1. x, y, and z are assigned some unknown integer values.\n\nLoop condition:\n1. x > 0 && y > 0 && z > 0\n\nNow, let's find the loop invariants:\n\nInvariants before the loop execution, in every iteration of the loop, and after the loop termination:\n1. x, y, and z are non-negative (since they can only decrease).\n\n2. If x or y or z become 0, the loop terminates.\n\nConsidering these points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n- `x`, `y`, and `z` are assigned non-deterministic integer values.\n\nNext, we analyze the loop body and make a note of the loop condition:\n- The loop condition is `x > 0 && y > 0 && z > 0`.\n\nNow, we can output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution, since `x`, `y`, and `z` are non-negative integers,\n(ii) in every iteration of the loop, as the loop condition ensures that `x`, `y`, and `z` remain non-negative, and\n(iii) after the loop termination, as the loop exits when at least one of `x`, `y`, or `z` is no longer positive (i.e., it becomes 0).",
                    "First, let's analyze the given program:\n\n- The variables `x`, `y`, and `z` are initialized with unknown integers.\n- The loop condition is `x>0 && y>0 && z>0`.\n- Inside the loop, there are three possible branches:\n  1. `x` is decremented by 1.\n  2. `y` is decremented by 1 and `z` is assigned an unknown integer.\n  3. `z` is decremented by 1 and `x` is assigned an unknown integer.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution: None of the variables have any specific bounds or relations.\n2. In every iteration of the loop:\n   - `x`, `y`, and `z` are positive.\n   - There are no explicit bounds on the maximum values of the variables.\n   - There are no explicit relationships between the variables.\n3. After the loop termination: At least one of `x`, `y`, or `z` must be non-positive.\n\nWith this information, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x > 0 ==> x >= 1;\n    loop invariant y > 0 ==> y >= 1;\n    loop invariant z > 0 ==> z >= 1;\n*/\n```\n\nThese loop invariants ensure that whenever a variable is positive, it must be at least 1. This holds true before the loop execution, in every iteration of the loop, and after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                    "/*@ \n    loop invariant x > 0 ==> x >= 1;\n    loop invariant y > 0 ==> y >= 1;\n    loop invariant z > 0 ==> z >= 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant z >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant z >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant x > 0 ==> x >= 1;\n    loop invariant y > 0 ==> y >= 1;\n    loop invariant z > 0 ==> z >= 1;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant x > 0 ==> x >= 1 is inductive.\nloop invariant y > 0 ==> y >= 1 is inductive.\nloop invariant z > 0 ==> z >= 1 is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x > 0 ==> x >= 1;\n    loop invariant y > 0 ==> y >= 1;\n    loop invariant z > 0 ==> z >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t/*@\nloop invariant i1: x > 0 ==> x >= 1;\nloop invariant i2: y > 0 ==> y >= 1;\nloop invariant i3: z > 0 ==> z >= 1;\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t/*@\n\n\n\nloop invariant i7: x > 0 ==> x >= 1;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\twhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop invariants:\n\n1. x > 0\n2. y > 0\n3. z > 0\n\nNow, let's find a ranking function for this loop. We need to find a function that decreases in each iteration and is positive as long as the loop executes. Since x, y, and z are all decreasing in some iterations, we can use their sum as the ranking function.\n\n```\n/*@\n    loop variant x + y + z;\n*/\n```\n\nNow, let's prove that this is a valid ranking function:\n\n1. The value of the ranking function (x + y + z) is positive as long as the loop executes, because all of x, y, and z must be positive for the loop condition to hold.\n\n2. The value of the ranking function decreases in each iteration:\n   - When the first branch is taken, x decreases by 1, so the sum (x + y + z) decreases.\n   - When the second branch is taken, y decreases by 1, so the sum (x + y + z) decreases.\n   - When the third branch is taken, z decreases by 1, so the sum (x + y + z) decreases.\n\nSince the ranking function is positive as long as the loop executes and decreases in each iteration, it is a valid ranking function, proving that the loop terminates.",
                    "First, let's analyze the loop conditions and the updates to the variables inside the loop. The loop continues executing as long as x, y, and z are all positive. In each iteration, either x, y, or z is decreased by 1, while the other variables may stay the same or be assigned an unknown positive value.\n\nWe can use lexicographic ranking functions to prove the termination of this loop. The lexicographic ranking function is a sequence of expressions (e1, e2, ...). In each iteration, either e1 must decrease, or if e1 remains the same, e2 must decrease. In this case, we can use the following lexicographic ranking function:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n    loop variant z;\n*/\n```\n\nThis ranking function is valid because:\n1. All expressions (x, y, z) are positive for the loop to continue executing.\n2. In each iteration, either x, y, or z must decrease. If x decreases, it satisfies the lexicographic order. If x remains the same, either y or z must decrease, which also satisfies the lexicographic order.\n\nThus, this lexicographic ranking function helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x + y + z;\n*/",
                    "/*@\n    loop variant x;\n    loop variant y;\n    loop variant z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t/*@\nloop invariant i7: x > 0 ==> x >= 1;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\nloop variant x + y + z;\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t}\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x > 0 ==> x >= 1 is inductive.\nloop invariant y > 0 ==> y >= 1 is inductive.\nloop invariant z > 0 ==> z >= 1 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\nint c;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b) ||\n (v1.c >= 0 && v1.a == v2.a && v1.b == v2.b && v1.c > v2.c);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\t//@ ghost variant_expression measure = { x, y, z };\n/*@\nloop invariant i7: x > 0 ==> x >= 1;\nloop invariant i8: y > 0 ==> y >= 1;\nloop invariant i9: z > 0 ==> z >= 1;\nloop invariant measure.a == x && measure.b == y && measure.c == z;loop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && z>0) {\n\t\tif (unknown_int()) {\n\t\t\tx = x - 1;\n\t\t} else if (unknown_int()) {\n\t\t\ty = y - 1;\n\t\t\tz = unknown_int();\n\t\t} else {\n\t\t\tz = z - 1;\n\t\t\tx = unknown_int();\n\t\t}\n\t//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n//@ ghost measure.c = z;}\n}",
                        "checker_output": false,
                        "checker_message": "No JSON report found"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c"
        ],
        "skipped": [],
        "total": 65,
        "success_count": 24,
        "failure_count": 41,
        "success_rate": 0.36923076923076925
    }
}