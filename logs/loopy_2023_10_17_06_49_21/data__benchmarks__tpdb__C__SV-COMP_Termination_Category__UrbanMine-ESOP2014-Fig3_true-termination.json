{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-condition and variable assignments:\n- x and y are assigned non-deterministic integer values from `unknown_int()`.\n\nLoop condition:\n- The loop continues as long as `x != 0` and `y > 0`.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x >= 0 ==> 0 <= y;\n    loop invariant x <= 0 ==> 0 <= y;\n*/\n```",
                    "Pre-conditions and variable assignments in the program:\n- `int x = unknown_int();`\n- `int y = unknown_int();`\n\nLoop condition:\n- `x != 0 && y > 0`\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant x == \\old(x) || x == \\old(x) - 1 || x == \\old(x) + 1;\n    loop invariant y == \\old(y) || y == \\old(y) - 1 || (x > 0 && x != \\old(x));\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant x < 0 ==> x >= \\old(x);\n    loop invariant y >= 0;\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic values using unknown_int().\n\nLoop condition:\n- The loop continues as long as x != 0 and y > 0.\n\nNow let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= INT_MAX && y <= INT_MAX;\n*/\n```\n\nThese loop invariants hold:\n- Before the loop execution: x and y are assigned non-deterministic values which can be any integer, so they are both within the bounds of int.\n- In every iteration of the loop: x and y are either decremented by 1, incremented by 1, or assigned a new non-deterministic value, staying within the integer bounds.\n- After the loop termination: x and y still stay within the integer bounds."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0 ==> 0 <= y;\n    loop invariant x <= 0 ==> 0 <= y;\n*/",
                    "/*@ \n    loop invariant x == \\old(x) || x == \\old(x) - 1 || x == \\old(x) + 1;\n    loop invariant y == \\old(y) || y == \\old(y) - 1 || (x > 0 && x != \\old(x));\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant x < 0 ==> x >= \\old(x);\n    loop invariant y >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= INT_MAX && y <= INT_MAX;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 3,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> 0 <= y;\n    loop invariant x <= 0 ==> 0 <= y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 ==> 0 <= y is neither established nor preserved.\nloop invariant x <= 0 ==> 0 <= y is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\old(x) || x == \\old(x) - 1 || x == \\old(x) + 1;\n    loop invariant y == \\old(y) || y == \\old(y) - 1 || (x > 0 && x != \\old(x));\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant x < 0 ==> x >= \\old(x);\n    loop invariant y >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= INT_MAX && y <= INT_MAX;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 10: unbound logic variable INT_MAX. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 ==> 0 <= y;\n    loop invariant x <= 0 ==> 0 <= y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 6,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\old(x) || x == \\old(x) - 1 || x == \\old(x) + 1;\n    loop invariant y == \\old(y) || y == \\old(y) - 1 || (x > 0 && x != \\old(x));\n    loop invariant x >= 0 ==> x <= \\old(x);\n    loop invariant x < 0 ==> x >= \\old(x);\n    loop invariant y >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n\n\n\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant x <= INT_MAX && y <= INT_MAX;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 8,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\twhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and its conditions:\n\nThe loop is the while loop with the condition `x != 0 && y > 0`.\n\nNow let's analyze the loop body and find a ranking function:\n\n1. If `x > 0`, there are two cases:\n   a. `x` decreases by 1, and `y` can take any value.\n   b. `y` decreases by 1.\n\n2. If `x <= 0`, there are two cases:\n   a. `x` increases by 1.\n   b. `y` decreases by 1, and `x` can take any value.\n\nFrom the above analysis, we can see that either `x` or `y` or both will decrease in each iteration, and the loop will continue executing only if `x != 0 && y > 0`.\n\nNow, let's define the ranking function:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the ranking function `x + y` is always positive for the loop to continue executing, as `x != 0 && y > 0`.\n2. The value of the ranking function `x + y` decreases in each iteration, as either `x` or `y` or both will decrease in each iteration.\n\nTherefore, this ranking function helps prove that the loop must terminate.",
                    "First, let's analyze the loop and its conditions. The loop continues to execute as long as `x != 0` and `y > 0`. Inside the loop, there are four possible cases depending on the values of `x` and the result of `unknown_int()`:\n\n1. `x > 0` and `unknown_int()`: In this case, `x` decreases by 1 and `y` gets an unknown value.\n2. `x > 0` and `!unknown_int()`: In this case, `y` decreases by 1.\n3. `x <= 0` and `unknown_int()`: In this case, `x` increases by 1.\n4. `x <= 0` and `!unknown_int()`: In this case, `y` decreases by 1 and `x` gets an unknown value.\n\nNow let's find the ranking function for this loop. We can use a lexicographic ranking function with two expressions, `(x, y)`:\n\n```\n/*@\n    loop variant x, y;\n*/\n```\n\nThis ranking function is valid for the following reasons:\n\n1. The values of `x` and `y` are always non-negative integers, as they are either decreased by 1 or assigned an unknown non-negative value.\n2. In each iteration of the loop, either `x` decreases (case 1) or `y` decreases (cases 2 and 4). In case 3, `x` increases, but since the loop condition requires `x != 0`, this case will eventually lead to one of the other cases where `x` or `y` decreases.\n3. The loop terminates when `x == 0` or `y <= 0`. Since the values of `x` and `y` are always non-negative, they will eventually reach 0, causing the loop to terminate."
                ],
                "output": [
                    "/*@\n    loop variant x + y;\n*/",
                    "/*@\n    loop variant x, y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 2,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\nloop variant x + y;\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\t/*@\n\nloop variant x, y;\n*/\nwhile (x != 0 && y > 0) {\n\t    if (x > 0) {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x - 1;\n\t\t\t\ty = unknown_int();\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t}\n\t\t} else {\n\t\t    if (unknown_int()) {\n\t\t\t    x = x + 1;\n\t\t\t} else {\n\t\t\t    y = y - 1;\n\t\t\t\tx = unknown_int();\n\t\t\t}\t\t\n\t\t}\n\t}\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 10: unexpected token ','"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.02_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.05_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.17_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "total": 85,
        "success_count": 32,
        "failure_count": 53,
        "success_rate": 0.3764705882352941
    }
}