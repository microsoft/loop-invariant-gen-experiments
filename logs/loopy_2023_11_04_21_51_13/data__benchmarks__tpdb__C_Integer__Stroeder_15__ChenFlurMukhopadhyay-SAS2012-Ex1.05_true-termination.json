{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, oldx;\n    x = unknown_int();\n    while (x > 0 && 2*x <= oldx) {\n        oldx = x;\n        x = unknown_int();\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "oldx"
            ],
            [
                "x"
            ],
            [
                "oldx - 2*x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, oldx;\n    x = unknown_int();\n    while (x > 0 && 2*x <= oldx) {\n        oldx = x;\n        x = unknown_int();\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop head in the given program is `while (x > 0 && 2*x <= oldx)`. Therefore, `x` and `oldx` are the variables live at the loop head. The loop continues as long as `x > 0` and `2*x <= oldx`. \n\nThe loop body consists of two statements: `oldx = x;` and `x = unknown_int();`. From these statements, we can see that the value of `x` is replaced by an unknown integer in each iteration. However, the value of `oldx` is set to the value of `x` from the previous iteration, and `oldx` is always greater than or equal to `2*x`. \n\nThus, one possible ranking function is `oldx`. \n\nThis ranking function is valid because:\n- It decreases with every successive iteration of the loop. In each iteration, the value of `oldx` is replaced with the value of `x`, which is always less than or equal to `oldx / 2`. \n- It is always positive while the loop is executing. The loop continues only while `x > 0`, and `oldx` is always greater than or equal to `2*x`, so `oldx` is also positive.\n\nHence, the ranking function for the given program is `oldx`. We can express this in ACSL syntax as follows:\n```\n/*@\n    loop variant oldx;\n*/\n```",
            "The loop in the given program starts with `x` as an unknown integer and `oldx` as an uninitialized value. The loop continues to execute as long as `x` is greater than 0 and `2*x` is less than or equal to `oldx`.\n\nIn each iteration of the loop, the value of `x` is updated to a new unknown integer and the value of `oldx` is updated to the current value of `x`.\n\nGiven that `x` is always greater than 0 inside the loop, the ranking function could involve `x` as a decreasing function. However, since `x` is updated to an unknown integer in every iteration, we cannot guarantee that `x` always decreases.\n\nOn the other hand, `oldx` is updated to the current value of `x` in every iteration. Since `2*x` is always less than or equal to `oldx` for the loop to continue, the value of `oldx` always decreases or stays the same with every iteration of the loop.\n\nTherefore, a valid ranking function for this loop could be `oldx`.\n\nIn ACSL syntax, the ranking function can be represented as:\n\n```c\n/*@\n    loop variant oldx;\n*/\n```\n\nThis is a valid ranking function because `oldx` always decreases or stays the same with every loop iteration, ensuring progress towards termination. It is also always positive, given that `x` is always positive inside the loop and `oldx` is always equal to `x` or greater.",
            "- The loop condition is `x > 0 && 2*x <= oldx`. This means that the loop continues to execute as long as `x` is greater than 0 and twice of `x` is less than or equal to `oldx`. \n- The variables that are live at the loop head are `x` and `oldx`. \n- In the loop body, `oldx` is set to the current value of `x`, and `x` is assigned a new unknown value. \n- The ranking function needs to be a function of `x` and `oldx` that decreases with each iteration of the loop.\n- Since `x` is always less than or equal to half of `oldx` in each iteration (from the loop condition), `oldx` is a valid ranking function as it decreases with each iteration of the loop.\n- The ranking function needs to be positive for the loop to continue executing. This is guaranteed because `x` is greater than 0 for the loop to execute and `oldx` is always greater than or equal to `2*x` (from the loop condition).\n\nTherefore, the ranking function for this loop is `oldx`. It is expressed in ACSL syntax as follows:\n\n```c\n/*@\n    loop variant oldx;\n*/\n```",
            "The loop variables here are `x` and `oldx`. The loop continues to execute as long as `x > 0` and `2*x <= oldx`.\n\nAt the beginning of the loop, `oldx` is assigned the value of `x` and `x` is assigned a new value from `unknown_int()`. The loop continues to execute as long as the new value of `x` is greater than 0 and twice the value of `x` is less than or equal to `oldx`.\n\nWe can see that `x` is always decreasing (since `2*x <= oldx` and `oldx = x` in the previous iteration). We can also see that `x` will always be positive as long as the loop continues to execute (since `x > 0` is a loop condition).\n\nTherefore, a valid ranking function for this loop would be `x`, because it decreases with every iteration and is positive as long as the loop continues to execute. \n\nSo, the ranking function will be:\n```\n/*@\n    loop variant x;\n*/\n```",
            "The variable `x` is the one being updated in the loop. At the start of each loop iteration, `x` is always less than or equal to `oldx`/2. This is because of the loop condition `2*x <= oldx`. \n\nThe ranking function for this program would be `oldx - 2*x`. \n\nLet's verify whether it's a valid ranking function:\n\n1. It's positive as long as the loop continues. This is because `oldx` is always greater than `2*x` as per the loop condition. \n\n2. It decreases with each iteration of the loop. This is because `x` is assigned to `oldx` at the start of each loop iteration and `x` is assigned a new value at the end of each iteration. Since `x` is always less than or equal to `oldx/2`, the value of `oldx - 2*x` will decrease with each iteration.\n\nTherefore, `oldx - 2*x` is a valid ranking function for this loop.\n\nThe ranking function can be written in ACSL syntax as:\n```\n/*@\n    loop variant oldx - 2*x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['oldx']": {
                "variant": [
                    "oldx"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x > 0 ==> 2*x <= oldx;\n    loop invariant x > 0 ==> oldx == \\at(x, LoopEntry);\n    loop invariant x <= 0 || 2*x > oldx;\n*/",
                    "/*@ \n    loop invariant x > 0;\n    loop invariant 2 * x <= oldx;\n    loop invariant oldx > \\at(oldx, LoopEntry) ==> x < \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x <= oldx;\n    loop invariant \\at(x, LoopEntry) <= oldx;\n*/",
                    "/*@ \n    loop invariant oldx >= 0;\n    loop invariant x >= 0;\n    loop invariant 2 * x <= oldx;\n    loop invariant oldx >= \\at(oldx, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 2*x <= oldx;\n    loop invariant oldx == \\at(x, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, oldx;\n    x = unknown_int();\n    while (x > 0 && 2*x <= oldx) {\n        oldx = x;\n        x = unknown_int();\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(oldx)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the loop:\n- The loop condition is `x > 0 && 2*x <= oldx`.\n- The ranking function is `(oldx)`.\n- Initially, `x` is assigned an unknown integer value, and `oldx` is uninitialized.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n- `oldx` is uninitialized, so we can't make any assertions about its value.\n\n2. In every iteration of the loop:\n- The loop condition `x > 0 && 2*x <= oldx` holds, so we can use implication to state that if the loop is executing, then `x > 0` and `2*x <= oldx`.\n- At the beginning of each iteration, `oldx` is updated to the current value of `x`, so `oldx == \\at(x, LoopEntry)`.\n\n3. After the loop termination:\n- The loop terminates when the condition `x <= 0 || 2*x > oldx` holds, so we can use implication to state that if the loop has terminated, then `x <= 0 || 2*x > oldx`.\n\nPutting all the loop invariants together:\n\n```\n/*@ \n    loop invariant x > 0 ==> 2*x <= oldx;\n    loop invariant x > 0 ==> oldx == \\at(x, LoopEntry);\n    loop invariant x <= 0 || 2*x > oldx;\n*/\n```",
                    "First, let's analyze the program and identify the loop condition and ranking function.\n\nLoop condition: `x > 0 && 2*x <= oldx`\nRanking function: `oldx`\n\nNow, let's derive the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nBefore the loop execution:\n1. `oldx` has an arbitrary value.\n\nIn every iteration of the loop:\n1. `x > 0`\n2. `2 * x <= oldx`\n3. `oldx > \\at(oldx, LoopEntry) ==> x < \\at(x, LoopEntry)`\n\nAfter the loop termination:\n1. `x <= 0` or `2 * x > oldx`\n\nPutting it all together, we have the following loop invariants:\n\n```\n/*@ \n    loop invariant x > 0;\n    loop invariant 2 * x <= oldx;\n    loop invariant oldx > \\at(oldx, LoopEntry) ==> x < \\at(x, LoopEntry);\n*/\n```",
                    "First, let's analyze the given program and identify the variables that are live at the loop head, loop condition, and the given ranking function.\n\n- Variables live at the loop head: x, oldx\n- Loop condition: x > 0 && 2 * x <= oldx\n- Ranking function: oldx\n\nNow, let's find the loop invariants:\n\n1. At the beginning of the loop, x is assigned an unknown integer value. oldx is not initialized but will be assigned x's value in the loop body. Therefore, there are no constraints on x or oldx before the loop execution.\n\n2. During the loop execution, we can observe that oldx is assigned the value of x in every iteration. We also know that 2 * x <= oldx from the loop condition. This means that x is always less than or equal to oldx during loop execution.\n\n3. Since the loop condition is x > 0 && 2 * x <= oldx, after the loop termination, either x <= 0 or 2 * x > oldx.\n\nBased on the above analysis, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x <= oldx;\n    loop invariant \\at(x, LoopEntry) <= oldx;\n*/\n```",
                    "First, let's analyze the given program and identify the loop condition, loop head variables, and the given ranking function.\n\nLoop condition: `x > 0 && 2 * x <= oldx`\nVariables live at the loop head: `x` and `oldx`\nRanking function: `oldx`\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop. We need to find invariants that hold:\n\n1. Before the loop execution\n2. In every iteration of the loop\n3. After the loop termination\n\nWe can use the loop condition and the given ranking function to derive the loop invariants:\n\n1. `oldx >= 0` (since `2 * x <= oldx`, `oldx` must be non-negative)\n2. `x >= 0` (since `x > 0` is part of the loop condition)\n3. `2 * x <= oldx` (from the loop condition)\n4. `oldx >= \\at(oldx, LoopEntry)` (since `oldx` is the ranking function, it must decrease or remain the same in every iteration)\n\nNow, let's output the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant oldx >= 0;\n    loop invariant x >= 0;\n    loop invariant 2 * x <= oldx;\n    loop invariant oldx >= \\at(oldx, LoopEntry);\n*/\n```",
                    "First, let's analyze the given program:\n\n1. The variables `x` and `oldx` are live at the loop head.\n2. The loop condition is `x > 0 && 2*x <= oldx`.\n3. The loop body updates `oldx` with the value of `x` and then assigns a new value to `x` using `unknown_int()`.\n\nNow, let's find the loop invariants:\n\n1. At the loop entry, we know nothing about `x`, so we cannot set any bounds on it.\n2. At the loop entry, we know nothing about `oldx`, so we cannot set any bounds on it.\n3. During the loop execution, `x > 0` and `2*x <= oldx`.\n4. After the loop termination, either `x <= 0` or `2*x > oldx`.\n\nConsidering the ranking function `(oldx)`, we can write the loop invariants as:\n\n```c\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 2*x <= oldx;\n    loop invariant oldx == \\at(x, LoopEntry);\n*/\n```\n\nThese loop invariants support the validity of the ranking function `(oldx)` and prove the termination of the loop."
                ],
                "inductive_invariants": "",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, oldx;\n    x = unknown_int();\n    /*@\n\nloop variant oldx;\n*/\nwhile (x > 0 && 2*x <= oldx) {\n        oldx = x;\n        x = unknown_int();\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "Loop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c"
        ],
        "skipped": [],
        "total": 44,
        "success_count": 79,
        "failure_count": 44,
        "success_rate": 1.7954545454545454
    }
}