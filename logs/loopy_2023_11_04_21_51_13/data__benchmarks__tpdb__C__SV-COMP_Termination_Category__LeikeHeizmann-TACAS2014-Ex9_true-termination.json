{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint q = unknown_int();\n\tint p = unknown_int();\n\twhile (q > 0 && p > 0) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "q + p"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint q = unknown_int();\n\tint p = unknown_int();\n\twhile (q > 0 && p > 0) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head. In this case, `q` and `p` are both live and are assigned `unknown_int()` values at the beginning.\n\nNow, let's analyze the loop body. The loop continues executing as long as both `q > 0` and `p > 0`. Inside the loop, `q` is decremented by 1 if `q < p`, and `p` is decremented by 1 if `p < q`. If `q == p`, the loop breaks.\n\nConsidering the changes in the loop body, we can find a ranking function involving the variables `q` and `p`. In this case, the sum of `q` and `p` would be a valid ranking function since it decreases with every iteration of the loop and remains positive while the loop is executing.\n\nSo, the ranking function for this loop is:\n\n```\n/*@\n    loop variant q + p;\n*/\n```\n\nThis ranking function is valid because it satisfies the following conditions:\n1. The value of `q + p` decreases with every iteration of the loop, as either `q` or `p` is decremented by 1 in each iteration.\n2. The value of `q + p` is positive while the loop is executing, since both `q > 0` and `p > 0` are required for the loop to continue.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- q and p are both unknown integers.\n\nNow let's analyze the loop body:\n- The loop continues while q > 0 and p > 0.\n- If q < p, then q is decreased by 1.\n- If p < q, then p is decreased by 1.\n- If q == p, the loop breaks.\n\nWe can see that either q or p is decreased in each iteration of the loop, and both q and p must be positive for the loop to continue executing. Therefore, a valid ranking function can be the sum of q and p.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant q + p;\n*/\n```\n\nThis ranking function is valid because it decreases with every iteration of the loop (as either q or p is decreased) and is positive while the loop is executing (since both q and p are positive).",
            "1. Note the starting values or constraints for the variables that are live at the loop head:\n   q and p are initialized with unknown integers, so there are no explicit constraints on their initial values.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   The loop continues executing as long as both q and p are positive. In each iteration, either q is decremented by 1, or p is decremented by 1, or the loop breaks. Thus, the sum q + p is decreasing in each iteration, and it remains non-negative.\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\n```\n/*@\n    loop variant q + p;\n*/\n```\n\nThis ranking function is valid because it decreases with every iteration of the loop and is positive while the loop is executing. Since the sum q + p is non-negative and decreases in each iteration, it guarantees that the loop must terminate.",
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - Both `q` and `p` are assigned unknown integer values, so we do not have any specific constraints on their starting values.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is `q > 0 && p > 0`.\n   - If `q < p`, then `q` is decremented by 1, and `p` remains unchanged.\n   - If `p < q`, then `p` is decremented by 1, and `q` remains unchanged.\n   - If `q == p`, the loop breaks.\n   - The ranking function should involve both `q` and `p` and should decrease with every loop iteration while remaining positive.\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\n```c\n/*@\n    loop variant q + p;\n*/\n```\n\nThis is a valid ranking function because:\n- It involves both `q` and `p`, which are the variables in the loop body.\n- It decreases with every loop iteration, as either `q` or `p` is decremented by 1 in each iteration.\n- It remains positive while the loop is executing, as both `q` and `p` are greater than 0 according to the loop condition.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nIn this case, we have two variables `q` and `p`, both initialized with `unknown_int()`. We don't know their starting values, but we can infer that the loop will only execute if both `q` and `p` are positive integers.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop body consists of two branches: \n- If `q` is less than `p`, then `q` is decremented by 1.\n- If `p` is less than `q`, then `p` is decremented by 1.\n\nNotice that in each iteration of the loop, either `q` or `p` is decremented by 1. Therefore, the sum of `q` and `p` will always decrease with every iteration of the loop. This makes the sum of `q` and `p` a good candidate for a ranking function.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant q + p;\n*/\n```\n\nThis ranking function is valid because it meets the following criteria:\n- It is positive while the loop is executing, as both `q` and `p` are positive integers.\n- It is decreasing with every iteration of the loop, as either `q` or `p` is decremented by 1 in each iteration."
        ],
        "simple_variant_log": {
            "success": true,
            "['q + p']": {
                "variant": [
                    "q + p"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= \\at(q, LoopEntry) && 0 <= \\at(p, LoopEntry);\n    loop invariant 0 <= q && 0 <= p;\n    loop invariant q <= \\at(q, LoopEntry);\n    loop invariant p <= \\at(p, LoopEntry);\n    loop invariant q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry);\n*/",
                    "/*@ \n    loop invariant q >= 0 && p >= 0;\n    loop invariant q < p ==> \\at(q, LoopEntry) - 1 == q;\n    loop invariant p < q ==> \\at(p, LoopEntry) - 1 == p;\n*/",
                    "/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= p;\n    loop invariant \\at(q, LoopEntry) == q || \\at(p, LoopEntry) == p ==> \\at(q, LoopEntry) >= q && \\at(p, LoopEntry) >= p;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant p >= 0;\n    loop invariant q + p == \\at(q, LoopEntry) + \\at(p, LoopEntry) - iter;\n*/",
                    "/*@ \n    loop invariant q >= 0;\n    loop invariant p >= 0;\n    loop invariant \\at(q, LoopEntry) + \\at(p, LoopEntry) >= q + p;\n    loop invariant q <= \\at(q, LoopEntry);\n    loop invariant p <= \\at(p, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint q = unknown_int();\n\tint p = unknown_int();\n\twhile (q > 0 && p > 0) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(q + p)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head. Both `q` and `p` are assigned values from `unknown_int()`, so we don't have any specific constraints on their initial values.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `(q > 0 && p > 0)`, and the given ranking function is `(q + p)`.\n\nNow, we can output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= \\at(q, LoopEntry) && 0 <= \\at(p, LoopEntry);\n    loop invariant 0 <= q && 0 <= p;\n    loop invariant q <= \\at(q, LoopEntry);\n    loop invariant p <= \\at(p, LoopEntry);\n    loop invariant q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry);\n*/\n```\n\nThe loop invariants are as follows:\n\n1. `0 <= \\at(q, LoopEntry) && 0 <= \\at(p, LoopEntry)`: This ensures that both `q` and `p` are non-negative at the beginning of the loop.\n2. `0 <= q && 0 <= p`: This ensures that both `q` and `p` remain non-negative during the loop execution.\n3. `q <= \\at(q, LoopEntry)`: This ensures that the value of `q` does not increase during the loop execution.\n4. `p <= \\at(p, LoopEntry)`: This ensures that the value of `p` does not increase during the loop execution.\n5. `q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry)`: This ensures that the ranking function `(q + p)` decreases with every iteration of the loop, as it is always less than or equal to its initial value.",
                    "First, let's analyze the starting values and constraints for the variables live at the loop head:\n\n- q and p are assigned values from unknown_int(), which means they can be any integer value.\n\nNow let's analyze the loop condition and body:\n\n- Loop condition: q > 0 && p > 0\n- Loop body: If q < p, then q is decremented by 1; If p < q, then p is decremented by 1; If q == p, the loop breaks.\n\nGiven the loop variant (q + p), let's find the loop invariants:\n\n1. Before the loop execution and in every iteration:\n   - q and p are non-negative (q >= 0 && p >= 0)\n\n2. In every iteration:\n   - If q < p, then q decreases by 1 (q < p ==> q' = q - 1)\n   - If p < q, then p decreases by 1 (p < q ==> p' = p - 1)\n\n3. After the loop termination:\n   - q <= 0 || p <= 0\n\nNow let's write the loop invariants as ACSL annotations:\n\n```\n/*@ \n    loop invariant q >= 0 && p >= 0;\n    loop invariant q < p ==> \\at(q, LoopEntry) - 1 == q;\n    loop invariant p < q ==> \\at(p, LoopEntry) - 1 == p;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables live at the loop head.\n\n- q and p are both assigned values from unknown_int(), so their starting values are non-deterministic.\n\nNow let's analyze the loop body, loop condition, and the given ranking function.\n\n- The loop condition is (q > 0 && p > 0).\n- The loop body updates either q or p, decreasing their value by 1 in each iteration.\n- The given ranking function is (q + p).\n\nNow we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant 0 <= q;\n    loop invariant 0 <= p;\n    loop invariant \\at(q, LoopEntry) == q || \\at(p, LoopEntry) == p ==> \\at(q, LoopEntry) >= q && \\at(p, LoopEntry) >= p;\n*/\n```",
                    "First, let's analyze the starting values or constraints for the variables that are live at the loop head.\n\nBoth `p` and `q` are assigned values from the `unknown_int()` function. Since we cannot make any assumptions about the function, we can only say that `p` and `q` are integers.\n\nNow let's analyze the loop condition and the given ranking function. The loop condition is `(q > 0 && p > 0)`. The ranking function is `(q + p)`.\n\nLet's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant p >= 0;\n    loop invariant q + p == \\at(q, LoopEntry) + \\at(p, LoopEntry) - iter;\n*/\n```",
                    "First, we can see that both `q` and `p` are assigned non-deterministic values from the `unknown_int()` function. We don't know their values, but they are both integers. \n\nThe loop condition is `q > 0 && p > 0`. The loop variant is given as `(q + p)`.\n\nNow let's find the loop invariants that support the loop variant `(q + p)`.\n\n1. The loop invariant should hold before the loop execution, so we can add the initial constraints of the variables `q` and `p` being non-negative.\n2. In every iteration of the loop, either `q` or `p` decreases by 1, and the other value remains the same.\n3. After the loop termination, both `q` and `p` are non-negative.\n\nConsidering these points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant q >= 0;\n    loop invariant p >= 0;\n    loop invariant \\at(q, LoopEntry) + \\at(p, LoopEntry) >= q + p;\n    loop invariant q <= \\at(q, LoopEntry);\n    loop invariant p <= \\at(p, LoopEntry);\n*/\n```\n\nThese loop invariants support the given loop variant `(q + p)` and prove the termination of the loop."
                ],
                "inductive_invariants": "loop invariant i3: q <= \\at(q, LoopEntry);\nloop invariant i4: p <= \\at(p, LoopEntry);\nloop invariant i5: q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry);\nloop invariant i11: \\at(q, LoopEntry) == q || \\at(p, LoopEntry) == p ==> \\at(q, LoopEntry) >= q && \\at(p, LoopEntry) >= p;\nloop invariant i15: \\at(q, LoopEntry) + \\at(p, LoopEntry) >= q + p;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint q = unknown_int();\n\tint p = unknown_int();\n\t/*@\nloop invariant i3: q <= \\at(q, LoopEntry);\nloop invariant i4: p <= \\at(p, LoopEntry);\nloop invariant i5: q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry);\nloop invariant i11: \\at(q, LoopEntry) == q || \\at(p, LoopEntry) == p ==> \\at(q, LoopEntry) >= q && \\at(p, LoopEntry) >= p;\nloop invariant i15: \\at(q, LoopEntry) + \\at(p, LoopEntry) >= q + p;\nloop variant q + p;\n*/\nwhile (q > 0 && p > 0) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant q <= \\at(q, LoopEntry) is inductive.\nloop invariant p <= \\at(p, LoopEntry) is inductive.\nloop invariant q + p <= \\at(q, LoopEntry) + \\at(p, LoopEntry) is inductive.\nloop invariant \\at(q, LoopEntry) == q || \\at(p, LoopEntry) == p ==> \\at(q, LoopEntry) >= q && \\at(p, LoopEntry) >= p is inductive.\nloop invariant \\at(q, LoopEntry) + \\at(p, LoopEntry) >= q + p is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 24,
        "success_count": 44,
        "failure_count": 24,
        "success_rate": 1.8333333333333333
    }
}