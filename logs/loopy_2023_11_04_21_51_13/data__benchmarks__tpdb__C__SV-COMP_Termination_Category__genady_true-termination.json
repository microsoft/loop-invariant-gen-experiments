{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n   int j = 1;\n   for (int i = 10000; i-j >= 1; i--) {\n     j++;\n   }  \n}\n",
        "success": true,
        "simple_variants": [
            [
                "i - j"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n   int j = 1;\n   for (int i = 10000; i-j >= 1; i--) {\n     j++;\n   }  \n}\n\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's analyze the initial values and constraints of the variables live at the loop head:\n\n1. `i` is initialized to 10000.\n2. `j` is initialized to 1.\n3. The loop condition is `i-j >= 1`.\n\nNow, let's analyze the loop body:\n\n1. In every iteration of the loop, `i` is decremented by 1.\n2. In every iteration of the loop, `j` is incremented by 1.\n\nGiven the above information, we can find a ranking function `R` as follows:\n\nR = i - j\n\nLet's check if `R` is a valid ranking function:\n\n1. R is an expression over the live variables at the loop head, i.e., `i` and `j`.\n2. R decreases with every iteration of the loop since `i` is decremented and `j` is incremented.\n3. R is positive while the loop is executing because the loop condition ensures that `i-j >= 1`.\n\nThus, R is a valid ranking function for the given loop. So, the ranking function in ACSL syntax is:\n\n```\n/*@\n    loop variant i - j;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- i starts at 10000\n- j starts at 1\n\nNow, let's analyze the loop body to find a ranking function involving the variables in the loop body:\n- In each iteration, i is decremented by 1 (i--)\n- In each iteration, j is incremented by 1 (j++)\n\nSince i starts at 10000 and j starts at 1, we can use (i - j) as our ranking function. This expression will decrease with each iteration of the loop and will be positive while the loop is executing.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant i - j;\n*/\n```",
            "First, let's make note of the starting values and constraints for the variables that are live at the loop head:\n- i starts at 10000\n- j starts at 1\n\nNow let's analyze the loop body:\n- i is decremented by 1 in every iteration\n- j is incremented by 1 in every iteration\n\nThe loop condition is (i - j >= 1), which means that the loop will continue executing as long as the difference between i and j is greater than or equal to 1.\n\nWe can use the difference between i and j as our ranking function. Since i is decreasing and j is increasing, their difference will decrease with every iteration of the loop. Moreover, the value of the difference will be positive while the loop is executing, because the loop condition requires it.\n\nSo, the ranking function is (i - j). In ACSL syntax, the loop variant would be:\n\n```\n/*@\n    loop variant i - j;\n*/\n```",
            "1. At the beginning of the loop, the variables i and j have the following values:\n   - i = 10000\n   - j = 1\n\n2. The loop condition is (i - j >= 1), which means the loop will continue executing as long as (i - j) is greater than or equal to 1.\n\n3. Inside the loop body, we have the following updates:\n   - i is decremented by 1 (i--)\n   - j is incremented by 1 (j++)\n\nNow, let's find the ranking function. Since i is decreasing and j is increasing, the expression (i - j) will decrease with every iteration of the loop. So, the ranking function can be (i - j).\n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant i - j;\n*/\n```",
            "First, let's identify the variables that are live at the loop head. In this case, those variables are `i` and `j`.\n\nNow, let's analyze the loop body. The loop condition is `i-j >= 1`, and in each iteration, we have `i--` and `j++`.\n\nA suitable ranking function for this loop is `i - j`, as it meets the requirements of a ranking function. \n\n1. It is an expression over the live variables `i` and `j`.\n2. Its value decreases with every iteration, since `i` decreases by 1 and `j` increases by 1.\n3. It is positive for the loop to continue executing, as the loop condition is `i - j >= 1`.\n\nSo, the ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant i - j;\n*/\n```\n\nThis ranking function helps prove that the loop must terminate because its value decreases with every iteration, and it must be positive for the loop to continue executing. Eventually, the value of `i - j` will become non-positive, causing the loop to terminate."
        ],
        "simple_variant_log": {
            "success": true,
            "['i - j']": {
                "variant": [
                    "i - j"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n    loop invariant i == \\at(i, LoopEntry) - (\\at(j, LoopEntry) - j);\n    loop invariant j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i);\n*/",
                    "/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant j <= i;\n    loop invariant i - j >= 1;\n    loop invariant \\at(i, LoopEntry) - \\at(j, LoopEntry) >= 1;\n    loop invariant \\at(i, LoopEntry) == 10000;\n    loop invariant \\at(j, LoopEntry) == 1;\n*/",
                    "/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n    loop invariant \\at(i, LoopEntry) - \\at(j, LoopEntry) == \\at(i, Here) - \\at(j, Here) + 1;\n*/",
                    "/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n*/",
                    "/*@ \n    loop invariant i >= j;\n    loop invariant j >= 1;\n    loop invariant \\at(i, LoopEntry) == 10000;\n    loop invariant \\at(j, LoopEntry) == 1;\n    loop invariant i <= 10000;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\nint main() {\n   int j = 1;\n   for (int i = 10000; i-j >= 1; i--) {\n     j++;\n   }  \n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(i - j)**, for the loop in the program above. Let's think step by step."
                    },
                    "The loop invariants that can support the loop variant (i - j) for the loop in the program are:\n\n- In the beginning, i is 10000 and j is 1.\n- The loop condition is i - j >= 1.\n- In every iteration, i decreases by 1 and j increases by 1. So, the loop variant (i - j) decreases by 2 in every iteration.\n- After the loop, j should be equal to 10000 and i should be equal to j - 1.\n\nThe resulting loop invariants are:\n\n```c\n/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n    loop invariant i == \\at(i, LoopEntry) - (\\at(j, LoopEntry) - j);\n    loop invariant j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i);\n*/\n```\nThe first invariant 1 <= j <= 10000 bounds the values of j.\nThe second invariant 1 <= i <= 10000 bounds the values of i.\nThe third invariant i >= j expresses the relation between i and j.\nThe fourth invariant i == \\at(i, LoopEntry) - (\\at(j, LoopEntry) - j) states that i decreases by the same amount as j increases.\nThe fifth invariant j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i) states that j increases by the same amount as i decreases.",
                    "The loop variant is **(i - j)**.\n\nLet's analyze the loop body:\n\nThe loop starts with **i = 10000** and **j = 1**. In each iteration, **i** is decremented by 1 and **j** is incremented by 1. The loop continues as long as **i - j >= 1**.\n\nThis loop condition implies that **i** is always greater than **j**. We can use this observation to derive some loop invariants.\n\nThe loop invariant to support the loop variant **(i - j)** can be written as:\n\n```\n/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant j <= i;\n    loop invariant i - j >= 1;\n    loop invariant \\at(i, LoopEntry) - \\at(j, LoopEntry) >= 1;\n    loop invariant \\at(i, LoopEntry) == 10000;\n    loop invariant \\at(j, LoopEntry) == 1;\n*/\n```",
                    "The loop variant here is (i - j).\n\nBefore the loop execution, the value of i is 10000 and j is 1. The loop condition is (i - j >= 1).\n\nIn every iteration, i decreases by 1 and j increases by 1.\n\nAfter the loop termination, the condition (i - j >= 1) is false.\n\nSo, our loop invariants should be such that they support the loop variant (i - j) and these conditions.\n\nOur loop invariants can be:\n```\n/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n    loop invariant \\at(i, LoopEntry) - \\at(j, LoopEntry) == \\at(i, Here) - \\at(j, Here) + 1;\n*/\n```",
                    "The starting values for the variables live at the loop head are `i = 10000` and `j = 1`.\n\nThe loop condition is `i - j >= 1`.\n\nThe given ranking function is `i - j`.\n\nThe loop invariant that is true before the loop execution, in every iteration of the loop and after the loop termination, that implies that the ranking function decreases with every iteration, is:\n- `i >= j`.\n\nThis is because in every iteration of the loop, `i` decreases by 1 and `j` increases by 1, which ensures that `i - j` decreases.\n\nThe loop invariant that bounds the maximum and minimum values that the variables can take is:\n- `1 <= j <= 10000` and `1 <= i <= 10000`.\n\nThis is because `j` starts from 1 and increases by 1 in every iteration until `i - j` is no longer greater than or equal to 1, and `i` starts from 10000 and decreases by 1 in every iteration until `i - j` is no longer greater than or equal to 1.\n\nThe loop invariant that indicates that `i` is always equal to or larger than `j` is:\n- `i >= j`.\n\nThis is because `j` starts from 1 and increases by 1 in every iteration, and `i` starts from 10000 and decreases by 1 in every iteration.\n\nSo, the loop invariants are:\n```\n/*@ \n    loop invariant 1 <= j <= 10000;\n    loop invariant 1 <= i <= 10000;\n    loop invariant i >= j;\n*/\n```",
                    "The starting values for the variables `i` and `j` are 10000 and 1 respectively.\nThe loop condition is `i-j >= 1`.\nThe ranking function given is `i - j`.\n\nBefore the loop execution, `j` is 1 and `i` is 10000.\nIn every iteration of the loop, `i` is decremented by 1 and `j` is incremented by 1.\nAfter the loop termination, `i - j` is less than 1.\n\nThe loop invariants to support the validity of the ranking function and prove the loop termination are as follows:\n```\n/*@ \n    loop invariant i >= j;\n    loop invariant j >= 1;\n    loop invariant \\at(i, LoopEntry) == 10000;\n    loop invariant \\at(j, LoopEntry) == 1;\n    loop invariant i <= 10000;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: 1 <= j <= 10000;\nloop invariant i2: 1 <= i <= 10000;\nloop invariant i5: j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i);\nloop invariant i8: \\at(i, LoopEntry) - \\at(j, LoopEntry) >= 1;\nloop invariant i9: \\at(i, LoopEntry) == 10000;\nloop invariant i10: \\at(j, LoopEntry) == 1;\nloop invariant i12: j >= 1;\nloop invariant i13: i <= 10000;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\nint main() {\n   int j = 1;\n   /*@\nloop invariant i1: 1 <= j <= 10000;\nloop invariant i2: 1 <= i <= 10000;\nloop invariant i5: j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i);\nloop invariant i8: \\at(i, LoopEntry) - \\at(j, LoopEntry) >= 1;\nloop invariant i9: \\at(i, LoopEntry) == 10000;\nloop invariant i10: \\at(j, LoopEntry) == 1;\nloop invariant i12: j >= 1;\nloop invariant i13: i <= 10000;\nloop variant i - j;\n*/\nfor (int i = 10000; i-j >= 1; i--) {\n     j++;\n   }  \n}\n",
                        "checker_output": true,
                        "checker_message": "loop invariant 1 <= j <= 10000 is inductive.\nloop invariant 1 <= i <= 10000 is inductive.\nloop invariant j == \\at(j, LoopEntry) + (\\at(i, LoopEntry) - i) is inductive.\nloop invariant \\at(i, LoopEntry) - \\at(j, LoopEntry) >= 1 is inductive.\nloop invariant \\at(i, LoopEntry) == 10000 is inductive.\nloop invariant \\at(j, LoopEntry) == 1 is inductive.\nloop invariant j >= 1 is inductive.\nloop invariant i <= 10000 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c"
        ],
        "skipped": [],
        "total": 28,
        "success_count": 51,
        "failure_count": 28,
        "success_rate": 1.8214285714285714
    }
}