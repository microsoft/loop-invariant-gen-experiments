{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    while ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x + y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    while ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "In this program, `x` and `y` are the variables that are live at the loop head. Both are initially set to some unknown integer values. The loop will continue executing as long as either `x` or `y` is greater than 0. In each iteration, either `x` is decreased by 1, or `y` is decreased by 1. So, one of them is always decreasing, and they are never negative.\n\nHence, a valid ranking function for the loop in this program could be `x + y`.\n\nThis is a valid ranking function because:\n- It involves the variables that are live at the loop head.\n- Its value decreases with every iteration, as either `x` or `y` is decreased by 1 in each iteration.\n- Its value is positive as long as the loop continues executing, as the loop condition requires either `x` or `y` to be greater than 0.\n\nThus, the ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "1. The variables that are live at the loop head are `x`, `y` and `c`. \n\n2. The loop continues while either `x` or `y` is greater than 0. Inside the loop, `x` is decreased by 1 if it is positive, and `y` is decreased by 1 if `x` is not positive but `y` is. \n\n3. Therefore, the values of `x` and `y` are always decreasing or remaining the same in every iteration, and they are always non-negative.\n\n4. The variable `c` is always increasing in every iteration but it does not affect the loop termination.\n\n5. So, the expression `x + y` is a valid ranking function for this loop. It decreases in every iteration and is positive as long as the loop continues executing. \n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "In this program, the variables `x` and `y` are decreased in every iteration of the loop and are always non-negative. The loop condition is `(x > 0) || (y > 0)`, meaning that the loop continues as long as either `x` or `y` is greater than 0.\n\nWhen considering the variables `x` and `y` together, we can see that they form a ranking function. In each iteration of the loop, either `x` or `y` is decreased by one, meaning that the sum `x + y` is always decreasing. As `x` and `y` are always non-negative, `x + y` is always non-negative as well, and is positive whenever the loop continues to execute.\n\nSo, the ranking function for this loop is `x + y`.\n\nIn ACSL syntax, this would be:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "At the start of the loop, the variables `x` and `y` can have any value. In every iteration of the loop, either `x` is decreased by `1` or `y` is decreased by `1`. This ensures that the sum `x + y` is always decreasing with every iteration of the loop. Therefore, `x + y` can be used as the ranking function, as it decreases in every iteration and is positive as long as the loop is executing.\n\nIn ACSL syntax, we denote the ranking function as follows:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "The loop in the provided code continues executing as long as either `x` or `y` is greater than zero. During each iteration, either `x` or `y` is reduced by 1.\n\nOne possible ranking function for this loop is `x + y`, as this sum decreases by at least 1 in each iteration of the loop (as either `x` or `y` is reduced by 1). Also, this sum is positive as long as the loop continues executing (since `x` and `y` are both non-negative and the loop executes while either of them is positive).\n\nSo, we can denote the ranking function in ACSL syntax as follows:\n\n```C\n/*@\n    loop variant x + y;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": false,
            "['x + y']": {
                "variant": [
                    "x + y"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) == x + y + c;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant c >= 0;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant c == (\\at(x, LoopEntry) - x) + (\\at(y, LoopEntry) - y);\n*/",
                    "/*@\n    loop invariant 0 <= c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y + 1;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y + 1;\n    loop invariant x + y >= \\at(x + y, LoopEntry) - c;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    while ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the starting values and constraints for the variables live at the loop head:\n\n- x and y are initialized with values from unknown_int(), so we don't have any specific constraints on their initial values.\n- c is initialized to 0.\n\nNow, let's analyze the loop condition and the given ranking function:\n\n- Loop condition: (x > 0) || (y > 0)\n- Given ranking function: (x + y)\n\nNow, we'll output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) == x + y + c;\n*/\n```",
                    "First, let's identify the variables live at the loop head and their starting values or constraints:\n\n- `x` and `y` are both initialized by `unknown_int()` function, which means they can have any integer values.\n- `c` starts from 0.\n\nNext, analyze the loop condition and the loop body:\n\n- The loop continues as long as either `x` or `y` is greater than 0.\n- If `x > 0`, then `x` is decreased by 1.\n- If `x <= 0` and `y > 0`, then `y` is decreased by 1.\n- `c` is always increased by 1 in each iteration.\n\nNow, we can output the loop invariants that support the given ranking function **(x + y)**:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant c >= 0;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant c == (\\at(x, LoopEntry) - x) + (\\at(y, LoopEntry) - y);\n*/\n```\n\nThese loop invariants ensure that `x` and `y` are always non-negative, and they decrease monotonically during the loop execution. The loop invariant for `c` guarantees that it increases monotonically and is at least the sum of the decrease in `x` and `y`. Thus, the ranking function **(x + y)** decreases with every iteration of the loop, which ensures its termination.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are both initialized with unknown_int() function, so they can have any integer value.\n- c is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n- The loop condition is (x > 0) || (y > 0).\n- In the loop body, x is decreased by 1 if x > 0, otherwise y is decreased by 1 if y > 0.\n- The loop counter, c, is incremented by 1 in every iteration.\n\nNow, let's output the loop invariants to support the loop variant (x + y):\n\n```\n/*@\n    loop invariant 0 <= c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```\n\nThese loop invariants hold true before the loop execution, in every iteration of the loop, and after the loop termination, which implies that the ranking function (x + y) decreases with every iteration, supporting the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown values, so no constraints can be made about their initial values.\n- c is initialized to 0.\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: (x > 0) || (y > 0)\n- Ranking function: (x + y)\n\nNow, we can output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y + 1;\n    loop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- x and y are assigned values from unknown_int(), which means they can be any integer value.\n- c is initialized to 0.\n\nNext, let's analyze the loop condition and body:\n- The loop condition is ((x > 0) || (y > 0)).\n- If x > 0, x is decremented by 1.\n- If x <= 0 and y > 0, y is decremented by 1.\n- In every iteration, c is incremented by 1.\n\nNow, we can output the loop invariants that support the loop variant (x + y):\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= c;\n    loop invariant c <= x + y + 1;\n    loop invariant x + y >= \\at(x + y, LoopEntry) - c;\n*/\n```\n\nExplanation of the loop invariants:\n1. x is always non-negative because it starts with a non-negative value and is only decremented if it is positive.\n2. y is always non-negative because it starts with a non-negative value and is only decremented if it is positive.\n3. c is always non-negative because it starts at 0 and is only incremented.\n4. c is always less than or equal to the sum of x and y plus 1, as it increments by 1 for each decrement of x or y.\n5. The sum of x and y in the current iteration is always greater than or equal to the sum of x and y at the beginning of the loop minus the current value of c, as c increments by 1 for each decrement of x or y."
                ],
                "inductive_invariants": "loop invariant i3: 0 <= c;\nloop invariant i5: \\at(x, LoopEntry) + \\at(y, LoopEntry) == x + y + c;\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i7: \\at(y, LoopEntry) >= y;\nloop invariant i8: c >= 0;\nloop invariant i9: \\at(c, LoopEntry) <= c;\nloop invariant i10: c == (\\at(x, LoopEntry) - x) + (\\at(y, LoopEntry) - y);\nloop invariant i12: x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop invariant i14: \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\nloop invariant i15: x + y >= \\at(x + y, LoopEntry) - c;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    /*@\nloop invariant i3: 0 <= c;\nloop invariant i5: \\at(x, LoopEntry) + \\at(y, LoopEntry) == x + y + c;\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i7: \\at(y, LoopEntry) >= y;\nloop invariant i8: c >= 0;\nloop invariant i9: \\at(c, LoopEntry) <= c;\nloop invariant i10: c == (\\at(x, LoopEntry) - x) + (\\at(y, LoopEntry) - y);\nloop invariant i12: x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop invariant i14: \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y;\nloop invariant i15: x + y >= \\at(x + y, LoopEntry) - c;\nloop variant x + y;\n*/\nwhile ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) == x + y + c is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant \\at(y, LoopEntry) >= y is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant \\at(c, LoopEntry) <= c is inductive.\nloop invariant c == (\\at(x, LoopEntry) - x) + (\\at(y, LoopEntry) - y) is inductive.\nloop invariant x + y <= \\at(x, LoopEntry) + \\at(y, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) + \\at(y, LoopEntry) >= x + y is inductive.\nloop invariant x + y >= \\at(x + y, LoopEntry) - c is inductive.\n\n\nLoop variant is Invalid."
                    }
                ],
                "success": false
            }
        },
        "simple_variant_success": false,
        "lexicographic_variants": [
            [
                "x",
                "y",
                "-c"
            ],
            [
                "x",
                "y"
            ]
        ],
        "lexicographic_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head. A ranking function can be used to prove that a loop terminates.\nA lexicographic ranking function is a sequence of expressions with the property that each expression must be positive for the loop to execute.\nFor example, if (e1, e2, e3) is a lexicographic ranking function, then e1 is positive and decreases, or e1 remains the same and e2 is positive and decreases, or e1 and e2 remain the same and e3 is positive and decreases. This can be extended to as many expressions as needed.\nFind the lexicographic ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function such that:\n    - The first expression in the ranking function is positive and decreases.\n    - If the first expression remains the same, the second expression is positive and decreases.\n    - If the first and second expressions remain the same, the third expression is positive and decreases and so on.\n- Output the ranking function in one code block, in ACSL syntax, in their lexicographic order. For example, if the ranking function is (v1, v2), output it as:\n```\n/*@\n    loop variant v1;\n    loop variant v2;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    while ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind a lexicographic ranking function for the loop in the given program, such that the first expression decreases with every iteration of the loop, and evaluates to a positive value while the loop is executing.\nIf the first expression remains constant, then the second expression should decrease with every iteration of the loop, and evaluate to a positive value while the loop is executing, and so on.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step."
            },
            "Firstly, let's look at the variables that are live at the loop head. We have `x`, `y`, and `c`.\n\nLooking at the loop body, we see that `x` and `y` are decreased by 1 in each iteration, and `c` is increased by 1 in each iteration.\n\nThe loop termination condition is `(x > 0) || (y > 0)`, meaning the loop will terminate when both `x` and `y` are less than or equal to 0.\n\nGiven these, we can come up with a lexicographic ranking function. Since `x` and `y` decrease in each iteration, they can be the first two expressions. For the third expression, we can use `c` since it increases in each iteration.\n\nThe ranking function can be `(x, y, -c)`. \n\nThis is a valid lexicographic ranking function because:\n\n- `x` is positive and decreases in each iteration, or remains the same.\n- If `x` remains the same, `y` is positive and decreases, or remains the same.\n- If `x` and `y` remain the same, `-c` is positive and decreases.\n\nThe lexicographic ranking function can be represented as:\n\n```c\n/*@\n    loop variant x;\n    loop variant y;\n    loop variant -c;\n*/\n```\n\nThis will ensure that the loop will eventually terminate as `x` and `y` will eventually become 0, and `-c` will eventually become negative.",
            "The loop in the given program continues to execute as long as either `x` or `y` is greater than zero. \n\nIn each iteration of the loop, either `x` is decreased by 1, or `y` is decreased by 1. Thus, the values of `x` and `y` can be used to form a lexicographic ranking function for the loop. \n\nBoth `x` and `y` are initially unknown, but they are non-negative throughout the program execution due to the loop condition and the fact that they are only decreased within the loop. \n\nTherefore, the lexicographic ranking function for the loop is `(x, y)`. \n\nThis function is valid because `x` is positive and decreases if `x > 0`, or `x` remains the same and `y` is positive and decreases if `x <= 0` and `y > 0`. \n\nIn ACSL syntax, the lexicographic ranking function can be represented as follows:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```",
            "Firstly, note that the variables that are live at the loop head are `x`, `y` and `c`. The loop continues as long as either `x` or `y` is greater than zero. \n\nIn the body of the loop, the variable `x` is decreased by one if it is greater than zero. If `x` is not greater than zero, then `y` is decreased by one if it is greater than zero. The variable `c` is incremented by one in every iteration.\n\nTherefore, the lexicographic ranking function for this program is `(x, y)`. \n\nThe first expression, `x`, is positive and decreases whenever it is greater than zero. If `x` is not greater than zero, the second expression, `y`, is positive and decreases. \n\nThis ranking function is valid because it ensures that the loop terminates. The value of `x` always decreases until it is no longer greater than zero, at which point `y` starts decreasing until it is no longer greater than zero, causing the loop to terminate. \n\nThe ranking function can be represented in ACSL syntax as follows:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```",
            "First, let's identify the variables that are live at the loop head. These are the variables that we can use in our ranking function. In this case, the live variables at the loop head are `x`, `y`, and `c`.\n\nNotice that the loop continues to execute as long as either `x` or `y` is positive. Therefore, we can use `x` and `y` as the first two expressions in our lexicographic ranking function.\n\nDuring each iteration, either `x` decreases by 1 (if `x > 0`), or `y` decreases by 1 (if `y > 0`). This ensures that at least one of the expressions in our ranking function will decrease during each iteration.\n\nTherefore, a valid lexicographic ranking function for this loop is `(x, y)`. This function is valid because:\n- `x` is always positive at the start of each iteration, and it decreases whenever it is positive.\n- If `x` remains the same (i.e., it is 0), then `y` is positive and it decreases.\n\nHere is the lexicographic ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```",
            "From the loop condition, we can see that the loop continues to execute as long as either `x` or `y` is positive. \n\nIn the body of the loop, we see that `x` is decreased by 1 if it's positive, otherwise `y` is decreased by 1 if it's positive. So, for each iteration of the loop, either `x` or `y` is decreasing.\n\nTherefore, we can choose `x` and `y` as our lexicographic ranking function. `x` is the first expression in the ranking function that decreases when `x` is positive and remains the same when `x` is not positive. `y` is the second expression in the ranking function that decreases when `x` is not positive and `y` is positive. Both `x` and `y` are positive at the beginning of each loop iteration, which satisfies the condition of the ranking function.\n\nSo the lexicographic ranking function can be expressed in ACSL syntax as:\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because for every iteration of the loop, either `x` or `y` decreases and they are both non-negative. This means that they can't decrease indefinitely, so the loop must terminate."
        ],
        "lexicographic_variant_log": {
            "success": true,
            "['x', 'y', '-c']": {
                "variant": [
                    "x",
                    "y",
                    "-c"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x >= 0;\n    loop invariant \\at(y, LoopEntry) >= y >= 0;\n    loop invariant c >= 0;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant c >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x >= y ==> c <= \\at(x, LoopEntry);\n    loop invariant y > x ==> c <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant c >= 0;\n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) == x + c;\n    loop invariant \\at(y, LoopEntry) == y + c;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant c >= \\at(c, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant c >= 0;\n    loop invariant \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant x + y + \\at(c, LoopEntry) == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    while ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x, y, -c)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The variables live at the loop head are x, y, and c. \n- The loop condition is (x > 0) || (y > 0). \n- The loop body decreases x and y by 1 if they are positive and increases c by 1.\n- The ranking function is (x, y, -c) which is a lexicographic ranking function.\n\nThe loop invariants that support the validity of the ranking function and prove the termination of the loop are:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x >= 0;\n    loop invariant \\at(y, LoopEntry) >= y >= 0;\n    loop invariant c >= 0;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```",
                    "- Before the loop starts, `c` is initialized to `0` and `x` and `y` are assigned some unknown integer values. \n- In each iteration of the loop, either `x` or `y` is decreased by `1` if their value is greater than `0`. `c` is increased by `1` in every iteration. \n- The loop continues while either `x` or `y` is greater than `0`.\n- After the loop terminates, both `x` and `y` should be `0` or less.\n\nBased on the above points, we can deduce the following loop invariants:\n\n```\n/*@ \n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant c >= 0;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant x >= y ==> c <= \\at(x, LoopEntry);\n    loop invariant y > x ==> c <= \\at(y, LoopEntry);\n*/\n``` \n\n- The first three invariants state the initial conditions of the variables `c`, `x`, and `y`.\n- The next three invariants ensure that `c`, `x`, and `y` are always non-negative throughout the loop execution.\n- The seventh invariant bounds `c` by the initial sum of `x` and `y`. This is due to the fact that `c` increases by `1` in each iteration, and either `x` or `y` decreases by `1`. \n- The eighth invariant states that the sum of `x`, `y`, and `c` is always equal to the initial sum of `x` and `y`. This is due to the same reason as above.\n- The last two invariants are the implications. They state that if `x` is greater or equal to `y`, then `c` will be less or equal to the initial value of `x`. And if `y` is greater than `x`, then `c` will be less or equal to the initial value of `y`. These two invariants cover both possibilities of the order of `x` and `y`. They support the loop variant `(x, y, -c)`, which indicates that the value of the loop variant decreases in every iteration.",
                    "The loop condition is `(x > 0) || (y > 0)`, and the loop variant is `(x, y, -c)`. \n\nThe loop variant is a lexicographic ranking function as it has multiple expressions. \n\nLet's derive the loop invariants. \n\nBefore the loop execution:\n- `c` is zero.\n- `x` is a non-deterministic integer.\n- `y` is a non-deterministic integer.\n\nIn every iteration of the loop:\n- If `x` is positive, it decreases by 1.\n- If `x` is not positive and `y` is positive, `y` decreases by 1.\n- `c` always increases by 1.\n- `x` and `y` are non-negative.\n- `c` is positive.\n\nAfter the loop termination:\n- `x` and `y` are not positive.\n- `c` is a positive integer.\n\nTherefore, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant c >= 0;\n    loop invariant \\at(c, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) == x + c;\n    loop invariant \\at(y, LoopEntry) == y + c;\n*/\n```\n\nThis set of invariants implies that the ranking function decreases with every iteration of the loop, hence proving the termination of the loop.",
                    "- The variables that are live at the loop head are `x`, `y`, and `c`.\n- The loop condition is `x > 0 || y > 0`.\n- The ranking function is `(x, y, -c)`. \n\nFrom the loop body, we can see that `x` and `y` decrease if they are positive, and `c` always increases. \n\nLet's now list the loop invariants.\n\n```c\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant c >= \\at(c, LoopEntry);\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```\n\nHere are the explanations for the invariants:\n\n- `\\at(x, LoopEntry) >= 0` and `\\at(y, LoopEntry) >= 0`: The values of `x` and `y` at the loop entry are non-negative. This is true because if `x` and `y` were negative, the loop would not be entered.\n- `c >= \\at(c, LoopEntry)`: The value of `c` never decreases, it only increases.\n- `x >= 0` and `y >= 0`: The values of `x` and `y` are always non-negative within the loop.\n- `c >= 0`: The value of `c` is always non-negative within the loop.\n- `x <= \\at(x, LoopEntry)` and `y <= \\at(y, LoopEntry)`: The values of `x` and `y` never increase, they only decrease.\n- `x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry)`: The sum of `x`, `y`, and `c` is always equal to the sum of the initial values of `x` and `y`. This is because every time `x` or `y` decreases, `c` increases by the same amount.",
                    "- The variables that are live at the loop head are x, y, and c.\n- The loop condition is (x > 0) || (y > 0).\n- The given ranking function is (x, y, -c).\n\nThe loop invariants that support the loop variant are as follows:\n\n```\n/*@ \n    loop invariant x >= 0 && y >= 0;\n    loop invariant c >= 0;\n    loop invariant \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant x + y + \\at(c, LoopEntry) == \\at(x, LoopEntry) + \\at(y, LoopEntry);\n*/\n```\n\nExplanation:\n\n- The first two invariants state that x, y, and c are always non-negative. This is true because x and y are decreased only when they are positive and c is only incremented.\n- The third invariant states that the current values of x and y are less than or equal to their values at the beginning of the loop. This is true because x and y can only decrease in the loop.\n- The fourth invariant states that the current value of c is greater than or equal to its value at the beginning of the loop. This is true because c can only increase in the loop.\n- The last invariant states that the sum of x, y, and the value of c at the loop entry is equal to the sum of x and y at the loop entry. This is true because every time x or y decreases by 1, c increases by 1."
                ],
                "inductive_invariants": "loop invariant i3: c >= 0;\nloop invariant i5: x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop invariant i6: \\at(c, LoopEntry) == 0;\nloop invariant i17: c >= \\at(c, LoopEntry);\nloop invariant i18: x <= \\at(x, LoopEntry);\nloop invariant i19: y <= \\at(y, LoopEntry);\nloop invariant i21: \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y;\nloop invariant i22: \\at(c, LoopEntry) <= c;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "typedef struct {\nint a;\nint b;\nint c;\n} variant_expression;\n\n/*@\npredicate lexicographic(variant_expression v1, variant_expression v2) =\n(v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b) ||\n (v1.c >= 0 && v1.a == v2.a && v1.b == v2.b && v1.c > v2.c);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x, y, -c };\n/*@\nloop invariant i3: c >= 0;\nloop invariant i5: x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop invariant i6: \\at(c, LoopEntry) == 0;\nloop invariant i17: c >= \\at(c, LoopEntry);\nloop invariant i18: x <= \\at(x, LoopEntry);\nloop invariant i19: y <= \\at(y, LoopEntry);\nloop invariant i21: \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y;\nloop invariant i22: \\at(c, LoopEntry) <= c;\nloop invariant measure.a == x && measure.b == y && measure.c == -c;\nloop variant measure for lexicographic;\n*/\nwhile ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    \n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n//@ ghost measure.c = -c;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry) is inductive.\nloop invariant \\at(c, LoopEntry) == 0 is inductive.\nloop invariant c >= \\at(c, LoopEntry) is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y is inductive.\nloop invariant \\at(c, LoopEntry) <= c is inductive.\n\n\nLoop variant is Valid."
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "typedef struct {\nint a;\nint b;\nint c;\n} variant_expression;\n\n/*@\npredicate multi_phase(variant_expression v1, variant_expression v2) =\n(v1.a > v2.a && v1.a >= 0) ||\n (v1.a > v2.a && v1.a < 0 && v1.b > v2.b && v1.b >= 0) ||\n (v1.a > v2.a && v1.a < 0 && v1.b > v2.b && v1.b < 0 && v1.c > v2.c && v1.c >= 0);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x, y, -c };\n/*@\nloop invariant i3: c >= 0;\nloop invariant i5: x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry);\nloop invariant i6: \\at(c, LoopEntry) == 0;\nloop invariant i17: c >= \\at(c, LoopEntry);\nloop invariant i18: x <= \\at(x, LoopEntry);\nloop invariant i19: y <= \\at(y, LoopEntry);\nloop invariant i21: \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y;\nloop invariant i22: \\at(c, LoopEntry) <= c;\nloop invariant measure.a == x && measure.b == y && measure.c == -c;\nloop variant measure for multi_phase;\n*/\nwhile ((x > 0) || (y > 0)) {\n        if (x > 0) {\n            x = x - 1;\n        } else {\n            if (y > 0) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    \n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n//@ ghost measure.c = -c;\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant x + y + c == \\at(x, LoopEntry) + \\at(y, LoopEntry) is inductive.\nloop invariant \\at(c, LoopEntry) == 0 is inductive.\nloop invariant c >= \\at(c, LoopEntry) is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) >= y is inductive.\nloop invariant \\at(c, LoopEntry) <= c is inductive.\n\n\nLoop variant is Invalid."
                    }
                ],
                "success": true
            }
        },
        "lexicographic_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c"
        ],
        "skipped": [],
        "total": 94,
        "success_count": 147,
        "failure_count": 94,
        "success_rate": 1.5638297872340425
    }
}