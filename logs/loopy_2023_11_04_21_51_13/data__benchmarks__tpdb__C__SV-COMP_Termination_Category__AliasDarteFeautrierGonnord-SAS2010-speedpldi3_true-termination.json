{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "(n - i) * (m + 1) - j"
            ],
            [
                "(n - i) * m - j"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Starting values and constraints for the variables live at the loop head:\n   - n and m are positive integers, with n > m.\n   - i starts at 0 and increases when j reaches m.\n   - j starts at 0 and increases up to m.\n\n2. Analyze the loop body:\n   - The loop continues as long as i < n.\n   - The value of j increases until it reaches m, at which point it resets to 0 and i increments.\n\n3. Find a ranking function:\n   - The ranking function must decrease with every iteration and be positive while the loop is executing.\n   - We can use the following ranking function: (n - i) * (m + 1) - j\n\nNow, let's write the ranking function in ACSL syntax.\n\n```\n/*@\n    loop variant (n - i) * (m + 1) - j;\n*/\n```",
            "1. Starting values or constraints for variables live at the loop head:\n- `n` is an integer with value greater than `m`\n- `m` is an integer with value greater than 0\n- `i` and `j` are both initialized to 0.\n\n2. Analyzing the loop body:\n- If `j < m`, then `j` gets incremented by 1.\n- If `j >= m`, then `j` gets reset to 0 and `i` gets incremented by 1.\n\n3. Finding a ranking function:\n- The loop terminates when `i` reaches `n`, so we want an expression that decreases with every iteration and is positive while the loop is executing.\n- We can use the following ranking function: `(n - i) * m - j`. It decreases with every iteration and is positive while the loop is executing.\n\nOutput the ranking function in ACSL syntax:\n```\n/*@\n    loop variant (n - i) * m - j;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- `n` is an unknown integer, but we know that `n > m` due to the condition `if (m > 0 && n > m)`.\n- `m` is an unknown integer, but we know that `m > 0` due to the condition `if (m > 0 && n > m)`.\n- `i` is initialized to `0`.\n- `j` is initialized to `0`.\n\nNow, let's analyze the loop body:\n```\nwhile (i < n) {\n    if (j < m) {\n        j++;\n    } else {\n        j = 0;\n        i++;\n    }\n}\n```\n\nWe can see that `i` and `j` are the variables involved in the loop body. We can now find a ranking function that involves `i` and `j`.\n\nThe loop condition is `i < n`, which means that the loop continues executing as long as `i` is less than `n`. As `i` increases by `1` each time `j` reaches `m`, and `j` increases by `1` in every iteration until it reaches `m`, we can create a ranking function that combines both `i` and `j`.\n\nA valid ranking function for this loop is `(n - i) * m - j`. This ranking function is positive because `n > i` and `m > j` during the loop execution. It is also decreasing with every iteration of the loop since either `j` increases or `i` increases and `j` resets to `0`.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (n - i) * m - j;\n*/\n```",
            "First, let's identify the variables that are live at the loop head and their constraints:\n\n- `i` starts at 0 and increases in the loop.\n- `j` starts at 0 and increases in the loop up to `m` before resetting to 0.\n- `n` and `m` are positive integers and `n > m`.\n\nNow, let's analyze the loop body:\n\n- `j` increases up to `m` and then resets to 0 when `j == m`.\n- `i` increases only when `j` resets to 0.\n\nSince `i` and `j` are the variables involved in the loop body, we can find a ranking function based on them.\n\nWe can use the expression `(n - i) * m - j` as the ranking function.\n\nNow, let's check if the ranking function is valid:\n\n1. The ranking function is positive while the loop is executing: Since `i < n` and `j < m`, the expression `(n - i) * m - j` will always be positive.\n\n2. The ranking function decreases with every iteration of the loop: In each iteration, either `j` increases or `i` increases (when `j` resets to 0). In both cases, the value of the ranking function decreases.\n\nSo, the ranking function is valid. In ACSL syntax, the ranking function would be:\n\n```\n/*@\n    loop variant (n - i) * m - j;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n- `i` starts at 0\n- `j` starts at 0\n- `n` and `m` are unknown positive integers, with `n > m`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n- The loop continues while `i < n`.\n- `j` increases until it reaches `m`, then resets to 0 and `i` increases by 1.\n- We need a ranking function that decreases with every iteration and is positive while the loop is executing.\n\nA possible ranking function for this loop is `(n - i) * m - j`. Let's see why this is valid:\n\n- At the beginning of the loop, the value of the ranking function is `(n - 0) * m - 0 = n * m`.\n- During the loop, if `j < m`, then `j` increases by 1, and the value of the ranking function decreases.\n- When `j == m`, `j` resets to 0 and `i` increases by 1, which also causes the value of the ranking function to decrease.\n- The loop continues while `i < n`, so the ranking function is always positive.\n\nTherefore, the ranking function `(n - i) * m - j` is valid for this loop. Output the ranking function in one code block, in ACSL syntax:\n\n```\n/*@\n    loop variant (n - i) * m - j;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['(n - i) * (m + 1) - j']": {
                "variant": [
                    "(n - i) * (m + 1) - j"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= n;\n    loop invariant j <= m;\n    loop invariant j <= m + 1;\n    loop invariant \\at(i, LoopEntry) <= i;\n*/",
                    "/*@ \n    loop invariant 0 <= j <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j + (i > \\at(i, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (i == \\at(i, LoopEntry) && j <= \\at(j, LoopEntry)) || i > \\at(i, LoopEntry);\n    loop invariant (n - i) * (m + 1) - j >= 0;\n    loop invariant (n - i) * (m + 1) - j < (n - \\at(i, LoopEntry)) * (m + 1) - \\at(j, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant j < m || j == m;\n    loop invariant j == m ==> \\at(i, LoopEntry) < i;\n    loop invariant ((n - i) * (m + 1) - j) >= 0;\n    loop invariant ((n - i) * (m + 1) - j) <= n * (m + 1);\n*/",
                    "/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant j < m ==> \\at(i, LoopEntry) == i;\n    loop invariant j < m ==> \\at(j, LoopEntry) + 1 == j;\n    loop invariant j == m ==> \\at(i, LoopEntry) + 1 == i;\n    loop invariant j == m ==> 0 == j;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((n - i) * (m + 1) - j)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, make note of the starting values of variables that are live at the loop head:\n- `i` and `j` are initialized to 0.\n- `n` and `m` are non-deterministic but `m > 0` and `n > m`.\n\nNext, analyze the loop body:\n- `j` is incremented if it is less than `m`, otherwise it is reset to 0 and `i` is incremented.\n- The loop continues as long as `i < n`.\n\nGiven this, the loop variant **((n - i) * (m + 1) - j)** decreases with every iteration of the loop. \n\nTo support this, the loop invariants must state:\n- `i` and `j` are non-negative (they start at 0 and only get incremented).\n- `i` is less than or equal to `n` and `j` is less than or equal to `m` (due to the loop condition and the if condition).\n- `j` is less than or equal to `m + 1` (since it only increments to `m` and then resets to 0).\n- `i` at the loop entry is less than or equal to `i` at any point in the loop (since `i` only gets incremented).\n\nSo, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant 0 <= j;\n    loop invariant i <= n;\n    loop invariant j <= m;\n    loop invariant j <= m + 1;\n    loop invariant \\at(i, LoopEntry) <= i;\n*/\n```",
                    "In the given program, the loop condition is **i < n** and the ranking function for the loop is **((n - i) * (m + 1) - j)**. \n\nLet's analyze the loop body:\n- If **j < m**, **j** is incremented by 1 and **i** remains the same.\n- If **j** is not less than **m**, **j** is reset to 0 and **i** is incremented by 1.\n\nFrom the loop body, we can infer some loop invariants:\n- **j** is always less than or equal to **m**. This is because **j** is only incremented if it is less than **m** and reset to 0 otherwise.\n- **i** is always less than or equal to **n**. This is because **i** is only incremented if **j** is not less than **m** and the loop condition is **i < n**.\n- **j** is always greater than or equal to 0. This is because **j** is either incremented from a non-negative value or reset to 0.\n- **i** is always greater than or equal to 0. This is because **i** is incremented from a non-negative value.\n\nThe loop invariants can be written in ACSL as follows:\n```\n/*@ \n    loop invariant 0 <= j <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j + (i > \\at(i, LoopEntry));\n*/\n```\nThese invariants are true before the loop execution, in every iteration of the loop and after the loop termination.",
                    "The loop invariants that support the lexicographic ranking function ((n - i) * (m + 1) - j) are as follows:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant (i == \\at(i, LoopEntry) && j <= \\at(j, LoopEntry)) || i > \\at(i, LoopEntry);\n    loop invariant (n - i) * (m + 1) - j >= 0;\n    loop invariant (n - i) * (m + 1) - j < (n - \\at(i, LoopEntry)) * (m + 1) - \\at(j, LoopEntry);\n*/\n```",
                    "First, make note of the starting values of the variables that are live at the loop head.\n- n and m are initialized with unknown integers, but we do have the condition that m > 0 and n > m.\n- i and j are both initialized to 0.\n\nSecond, analyze the loop body. \n- The loop continues while i < n.\n- If j < m, j is incremented. Otherwise, j is reset to 0 and i is incremented.\n\nThe ranking function given is ((n - i) * (m + 1) - j). This function is non-negative and decreases with every iteration of the loop, therefore it can be used to prove the termination of the loop.\n\nNow, let's find loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\nThe loop invariants are:\n- i is non-negative and less than or equal to n.\n- j is non-negative and less than or equal to m.\n- If j is not less than m, then j is equal to m.\n- If j is equal to m, then the value of i at the beginning of the loop is less than the value of i at the loop head.\n- The ranking function is non-negative.\n- The ranking function is less than or equal to (n * (m + 1)).\n\nOutput the loop invariants:\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant j < m || j == m;\n    loop invariant j == m ==> \\at(i, LoopEntry) < i;\n    loop invariant ((n - i) * (m + 1) - j) >= 0;\n    loop invariant ((n - i) * (m + 1) - j) <= n * (m + 1);\n*/\n```",
                    "First, note that \"i\", \"j\", \"m\" and \"n\" are the variables that are live at the loop head. \"m\" and \"n\" are initialized to some unknown integers. \"i\" and \"j\" are initialized to 0.\n\nThe loop condition is \"i < n\". \n\nThe loop body increments \"j\" if \"j < m\", else it resets \"j\" to 0 and increments \"i\".\n\nThe given ranking function is ((n - i) * (m + 1) - j).\n\nNow let's find the loop invariants.\n\nBefore the loop execution:\n\n- \"i\" and \"j\" are 0. \n- \"m\" and \"n\" are positive integers with \"n > m\".\n\nDuring every iteration of the loop:\n\n- \"i\" is non-negative and less than or equal to \"n\".\n- \"j\" is non-negative and less than or equal to \"m\".\n- \"j\" is less than \"m\" or \"i\" is less than \"n\".\n- If \"j\" is equal to \"m\", then \"i\" increases and \"j\" resets to 0.\n- If \"j\" is less than \"m\", then \"j\" increases and \"i\" remains the same.\n\nAfter the loop termination:\n\n- \"i\" is equal to \"n\".\n\nThese loop invariants imply that the ranking function ((n - i) * (m + 1) - j) is non-negative and decreases with every iteration of the loop. Therefore, the loop terminates. \n\nThe loop invariants can be written as follows:\n\n```\n/*@ \n    loop invariant 0 <= i <= n;\n    loop invariant 0 <= j <= m;\n    loop invariant j < m ==> \\at(i, LoopEntry) == i;\n    loop invariant j < m ==> \\at(j, LoopEntry) + 1 == j;\n    loop invariant j == m ==> \\at(i, LoopEntry) + 1 == i;\n    loop invariant j == m ==> 0 == j;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: i <= n;\nloop invariant i4: j <= m;\nloop invariant i5: j <= m + 1;\nloop invariant i6: \\at(i, LoopEntry) <= i;\nloop invariant i7: 0 <= j <= m;\nloop invariant i8: 0 <= i <= n;\nloop invariant i11: (n - i) * (m + 1) - j >= 0;\nloop invariant i13: j < m || j == m;\nloop invariant i15: ((n - i) * (m + 1) - j) >= 0;\nloop invariant i16: ((n - i) * (m + 1) - j) <= n * (m + 1);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint n = unknown_int();\n\tint m = unknown_int();\n\tint i, j;\n\tif (m > 0 && n > m) {\n\t\ti = 0;\n\t\tj = 0;\n\t\t/*@\nloop invariant i1: 0 <= i;\nloop invariant i2: 0 <= j;\nloop invariant i3: i <= n;\nloop invariant i4: j <= m;\nloop invariant i5: j <= m + 1;\nloop invariant i6: \\at(i, LoopEntry) <= i;\nloop invariant i7: 0 <= j <= m;\nloop invariant i8: 0 <= i <= n;\nloop invariant i11: (n - i) * (m + 1) - j >= 0;\nloop invariant i13: j < m || j == m;\nloop invariant i15: ((n - i) * (m + 1) - j) >= 0;\nloop invariant i16: ((n - i) * (m + 1) - j) <= n * (m + 1);\nloop variant (n - i) * (m + 1) - j;\n*/\nwhile (i < n) {\n\t\t\tif (j < m) {\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= j is inductive.\nloop invariant i <= n is inductive.\nloop invariant j <= m is inductive.\nloop invariant j <= m + 1 is inductive.\nloop invariant \\at(i, LoopEntry) <= i is inductive.\nloop invariant 0 <= j <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant (n - i) * (m + 1) - j >= 0 is inductive.\nloop invariant j < m || j == m is inductive.\nloop invariant ((n - i) * (m + 1) - j) >= 0 is inductive.\nloop invariant ((n - i) * (m + 1) - j) <= n * (m + 1) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c"
        ],
        "skipped": [],
        "total": 6,
        "success_count": 21,
        "failure_count": 6,
        "success_rate": 3.5
    }
}