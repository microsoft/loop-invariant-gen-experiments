{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int j;\n    int k;\n    int t;\n    i = unknown_int();\n    j = unknown_int();\n    k = unknown_int();\n    \n    while (i <= 100 && j <= k) {\n        i = j;\n        j = i + 1;\n        k = k - 1;\n    }\n    \n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "k - j"
            ],
            [
                "k - j + 1"
            ],
            [
                "k"
            ],
            [
                "k - i"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int j;\n    int k;\n    int t;\n    i = unknown_int();\n    j = unknown_int();\n    k = unknown_int();\n    \n    while (i <= 100 && j <= k) {\n        i = j;\n        j = i + 1;\n        k = k - 1;\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The loop condition is `i <= 100 && j <= k`. So, the loop variables are `i`, `j`, and `k`. \n\n2. Analyzing the loop body, we have:\n   - `i = j;`\n   - `j = i + 1;`\n   - `k = k - 1;`\n\n3. We want to find a ranking function that decreases with every iteration of the loop and is positive while the loop is executing. \n\nConsidering the loop body, `k` is decreasing by 1 in every iteration. Since `j <= k` in the loop condition, we can use the difference between `k` and `j` as our ranking function.\n\nThe ranking function is: `k - j`.\n\nNow let's put the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant k - j;\n*/\n``` \n\nThis is a valid ranking function because it decreases with every iteration of the loop (`k` is decreasing by 1 and `j` is increasing by 1), and it is positive while the loop is executing (as `j <= k` in the loop condition).",
            "First, let's make a note of the starting values or constraints for the variables that are live at the loop head. We have three variables `i`, `j`, and `k`. Since their values are assigned using `unknown_int()`, we don't have any specific initial values or constraints for them.\n\nNow, let's analyze the loop body:\n\n1. `i` is assigned the value of `j`.\n2. `j` is assigned the value of `i` (which is the old value of `j`) plus 1.\n3. `k` is assigned the value of `k` minus 1.\n\nThe loop continues to execute as long as `i <= 100` and `j <= k`. We need to find a ranking function that decreases with every iteration of the loop and is positive while the loop is executing.\n\nConsidering the loop updates and the loop condition, a suitable ranking function would be `k - j + 1`. This is because, in each iteration, `k` decreases by 1 and `j` increases by 1, making the expression decrease by 2.\n\nNow let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant k - j + 1;\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration of the loop (`k` decreases by 1 and `j` increases by 1) and is positive while the loop is executing (since `j <= k` is a loop condition).",
            "First, let's identify the loop variables and constraints:\n\n- i starts as an unknown integer and gets updated to j in each iteration.\n- j starts as an unknown integer and gets updated to i + 1 in each iteration.\n- k starts as an unknown integer and gets decremented by 1 in each iteration.\n\nThe loop condition is (i <= 100 && j <= k).\n\nNow, let's find a ranking function that decreases with each iteration and is positive while the loop is executing.\n\nSince k is decreasing by 1 in each iteration, and the loop condition requires j <= k, we can use k as our ranking function, as it will be positive while the loop is executing and will decrease in each iteration.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant k;\n*/\n```",
            "1. Starting values or constraints for the variables that are live at the loop head:\n   i = unknown_int();\n   j = unknown_int();\n   k = unknown_int();\n\n2. Analyze the loop body:\n   while (i <= 100 && j <= k) {\n       i = j;\n       j = i + 1;\n       k = k - 1;\n   }\n\n3. Find a ranking function involving the variables in the loop body:\n\nThe loop condition is `i <= 100 && j <= k`. As `i` is assigned to `j` and `j` is increased by 1, we can say that `i` is strictly increasing. Also, `k` is strictly decreasing, as it is decreased by 1 in every iteration. Thus, `k - i` is a potential ranking function candidate.\n\nLet's check if it's a valid ranking function:\n- The value of the expression decreases with every successive iteration of the loop: In each iteration, `i` is increased by 1 and `k` is decreased by 1, so `k - i` is decreased by 2 in each iteration. Therefore, it is strictly decreasing.\n- The value of the expression must be positive for the loop to continue executing: As long as `j <= k`, we have `i + 1 <= k`. Since `i` is assigned to `j` in the loop body, this ensures that `i` is always less than `k` while the loop is executing. Thus, `k - i` is always positive.\n\nTherefore, the ranking function is valid. Here is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant k - i;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `i` can be any integer value.\n- `j` can be any integer value.\n- `k` can be any integer value.\n\nNow, let's analyze the loop body:\n\n```\nwhile (i <= 100 && j <= k) {\n    i = j;\n    j = i + 1;\n    k = k - 1;\n}\n```\n\nIn each iteration of the loop:\n\n- `i` is assigned the value of `j`.\n- `j` is assigned the value of `i + 1`, which is `j + 1`.\n- `k` is decremented by 1.\n\nNow, let's find a ranking function involving the variables in the loop body. We want a function that is decreasing with every iteration and evaluates to a positive value while the loop is executing.\n\nA possible ranking function is `k - j + 1`. Let's see why it is a valid ranking function:\n\n1. The value of `k - j + 1` is positive while the loop is executing because `j <= k` is part of the loop condition.\n2. The value of `k - j + 1` decreases with every iteration because `k` is decremented by 1 and `j` is incremented by 1.\n\nSo, the ranking function for the loop is `k - j + 1`. In ACSL syntax, we can write it as:\n\n```\n/*@\n    loop variant k - j + 1;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['k - j']": {
                "variant": [
                    "k - j"
                ],
                "invariant_code_blocks": [
                    "/*@\n    loop invariant i <= 100;\n    loop invariant j <= k + 1;\n    loop invariant \\at(i, LoopEntry) <= j;\n    loop invariant j <= \\at(j, LoopEntry) + 1;\n    loop invariant k >= \\at(k, LoopEntry) - 1;\n    loop invariant k >= j;\n*/",
                    "/*@ \n    loop invariant i <= 100;\n    loop invariant i <= j;\n    loop invariant j <= k+1;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j;\n    loop invariant \\at(k, LoopEntry) >= k;\n    loop invariant \\at(k, LoopEntry) - \\at(j, LoopEntry) >= k - j;\n*/",
                    "/*@ \n    loop invariant j <= k+1;\n    loop invariant k >= \\at(k, LoopEntry) - 1;\n    loop invariant j >= \\at(j, LoopEntry) + 1;\n    loop invariant i == \\at(j, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(i, LoopEntry) <= 100 && \\at(j, LoopEntry) <= \\at(k, LoopEntry);\n    loop invariant \\at(j, LoopEntry) <= j;\n    loop invariant \\at(k, LoopEntry) >= k;\n    loop invariant k >= j;\n*/",
                    "/*@ \n    loop invariant i <= 100;\n    loop invariant j <= k+1;\n    loop invariant j > \\at(i, LoopEntry);\n    loop invariant k <= \\at(k, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int j;\n    int k;\n    int t;\n    i = unknown_int();\n    j = unknown_int();\n    k = unknown_int();\n    \n    while (i <= 100 && j <= k) {\n        i = j;\n        j = i + 1;\n        k = k - 1;\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(k - j)**, for the loop in the program above. Let's think step by step."
                    },
                    "In the given program, we have the following loop:\n\n```\nwhile (i <= 100 && j <= k) {\n    i = j;\n    j = i + 1;\n    k = k - 1;\n}\n```\nHere, the values of `i`, `j`, and `k` change with each iteration of the loop. At the beginning of the loop, `i`, `j`, and `k` can be any integer. During each iteration of the loop, `i` is assigned the value of `j`, `j` is incremented by 1, and `k` is decremented by 1. The loop continues as long as `i` is less than or equal to 100 and `j` is less than or equal to `k`.\n\nThe loop variant given is **(k - j)**, which decreases with each iteration of the loop as `j` increases and `k` decreases.\n\nNow let's find the loop invariants. We need to find conditions that are true before the loop starts, remain true during each iteration of the loop, and are true after the loop terminates.\n\nLoop Invariants are:\n\n```\n/*@\n    loop invariant i <= 100;\n    loop invariant j <= k + 1;\n    loop invariant \\at(i, LoopEntry) <= j;\n    loop invariant j <= \\at(j, LoopEntry) + 1;\n    loop invariant k >= \\at(k, LoopEntry) - 1;\n    loop invariant k >= j;\n*/\n```\n\nHere, the first invariant `i <= 100` is the loop condition. The second invariant `j <= k + 1` is derived from the loop body, as `j` is incremented by 1 and `k` is decremented by 1 in each loop iteration. The third invariant `\\at(i, LoopEntry) <= j` implies that the value of `i` at the beginning of the loop is less than or equal to `j` at any point in the loop. The fourth invariant `j <= \\at(j, LoopEntry) + 1` and the fifth invariant `k >= \\at(k, LoopEntry) - 1` are derived from the loop body, as `j` increases and `k` decreases with each loop iteration. The last invariant `k >= j` is true as the loop continues as long as `j` is less than or equal to `k`.",
                    "At the beginning of the loop, the values of `i`, `j` and `k` are unknown. They are the output of a non-deterministic function.\n\nThe loop condition is `i <= 100 && j <= k`.\n\nIn each iteration, `i` is set to the current value of `j`, `j` is incremented by 1, and `k` is decremented by 1.\n\nThe given ranking function is `(k - j)`. This ranking function is non-negative and decreases with every iteration of the loop, because `k` is decremented and `j` is incremented in every iteration of the loop.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant i <= 100;\n    loop invariant i <= j;\n    loop invariant j <= k+1;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(j, LoopEntry) <= j;\n    loop invariant \\at(k, LoopEntry) >= k;\n    loop invariant \\at(k, LoopEntry) - \\at(j, LoopEntry) >= k - j;\n*/\n```\n\nThe first three invariants indicate that `i` is always less than or equal to 100, `i` is always less than or equal to `j`, and `j` is always less than or equal to `k+1`. \n\nThe next three invariants indicate that the current values of `i` and `j` are always greater than or equal to their values at the beginning of the loop, and the current value of `k` is always less than or equal to its value at the beginning of the loop. \n\nThe final invariant is a direct transformation of the ranking function, indicating that the current value of the ranking function is always less than or equal to its value at the beginning of the loop. \n\nThese invariants together imply that the ranking function decreases with every iteration of the loop.",
                    "- The loop condition is `(i <= 100 && j <= k)`.\n- The ranking function is `(k - j)`.\n- The loop modifies the variables `i`, `j`, and `k`.\n- Before the loop execution, `i`, `j`, and `k` are initialized with unknown integers.\n- In every iteration of the loop, `i` is set to the current value of `j`, `j` is incremented by 1, and `k` is decremented by 1.\n\nFrom the above points, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant j <= k+1;\n    loop invariant k >= \\at(k, LoopEntry) - 1;\n    loop invariant j >= \\at(j, LoopEntry) + 1;\n    loop invariant i == \\at(j, LoopEntry);\n*/\n```\n\nExplanation:\n- The first invariant `j <= k+1` captures the fact that the value of `j` is always less than or equal to `k+1`.\n- The second invariant `k >= \\at(k, LoopEntry) - 1` captures the fact that the value of `k` is always greater than or equal to its value at the loop entry minus 1. This is because `k` is decremented by 1 in each iteration.\n- The third invariant `j >= \\at(j, LoopEntry) + 1` captures the fact that the value of `j` is always greater than or equal to its value at the loop entry plus 1. This is because `j` is incremented by 1 in each iteration.\n- The fourth invariant `i == \\at(j, LoopEntry)` captures the fact that the value of `i` is always equal to the value of `j` at the loop entry.",
                    "First, make note of the starting values or constraints for the variables that are live at the loop head.\n- i, j, k are non-deterministic. They can take any values that an integer can take.\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function.\n- The loop condition is `i <= 100 && j <= k`.\n- The ranking function is `k - j`.\n\nNow, output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant \\at(i, LoopEntry) <= 100 && \\at(j, LoopEntry) <= \\at(k, LoopEntry);\n    loop invariant \\at(j, LoopEntry) <= j;\n    loop invariant \\at(k, LoopEntry) >= k;\n    loop invariant k >= j;\n*/\n```\n\nLet's break these down:\n\n- `\\at(i, LoopEntry) <= 100 && \\at(j, LoopEntry) <= \\at(k, LoopEntry)`:\n    - This indicates that the loop condition is satisfied before the loop execution.\n- `\\at(j, LoopEntry) <= j`:\n    - This indicates that j does not decrease during the loop execution.\n- `\\at(k, LoopEntry) >= k`:\n    - This indicates that k does not increase during the loop execution.\n- `k >= j`:\n    - This indicates that the ranking function `(k - j)` is non-negative. This is an important part of proving that the ranking function decreases with every iteration.",
                    "- Before the loop starts, we do not know the values of the variables i, j, and k. They are all assigned a value by the function unknown_int(), which can return any integer.\n\n- The loop continues as long as i is less than or equal to 100 and j is less than or equal to k.\n\n- In each iteration of the loop, i is first assigned the value of j, then j is incremented by 1, and k is decremented by 1.\n\n- The variant (k - j) is non-negative before and during the loop execution, and it decreases with each iteration of the loop.\n\nLoop invariants that support the validity of the variant (k - j) and prove the termination of the loop are:\n- The value of i is always less than or equal to 100.\n- The value of j is always less than or equal to k+1.\n- The value of j is always greater than the value of i at the beginning of the loop.\n- The value of k is always less than or equal to its value at the beginning of the loop.\n\nHere are the loop invariants in one code block:\n```c\n/*@ \n    loop invariant i <= 100;\n    loop invariant j <= k+1;\n    loop invariant j > \\at(i, LoopEntry);\n    loop invariant k <= \\at(k, LoopEntry);\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i10: \\at(j, LoopEntry) <= j;\nloop invariant i11: \\at(k, LoopEntry) >= k;\nloop invariant i12: \\at(k, LoopEntry) - \\at(j, LoopEntry) >= k - j;\nloop invariant i17: k <= \\at(k, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    int j;\n    int k;\n    int t;\n    i = unknown_int();\n    j = unknown_int();\n    k = unknown_int();\n    \n    /*@\nloop invariant i10: \\at(j, LoopEntry) <= j;\nloop invariant i11: \\at(k, LoopEntry) >= k;\nloop invariant i12: \\at(k, LoopEntry) - \\at(j, LoopEntry) >= k - j;\nloop invariant i17: k <= \\at(k, LoopEntry);\nloop variant k - j;\n*/\nwhile (i <= 100 && j <= k) {\n        i = j;\n        j = i + 1;\n        k = k - 1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(j, LoopEntry) <= j is inductive.\nloop invariant \\at(k, LoopEntry) >= k is inductive.\nloop invariant \\at(k, LoopEntry) - \\at(j, LoopEntry) >= k - j is inductive.\nloop invariant k <= \\at(k, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c"
        ],
        "skipped": [],
        "total": 82,
        "success_count": 112,
        "failure_count": 82,
        "success_rate": 1.3658536585365855
    }
}