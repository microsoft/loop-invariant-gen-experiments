{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + 2*y - 1"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head. In this case, it's `x` and `y`. The loop condition is `x >= 0`.\n\nNext, let's analyze the loop body. The only update in the loop body is: `x = x - 2*y + 1`.\n\nNow, let's find a ranking function involving `x` and `y` that decreases with every iteration of the loop and is positive while the loop is executing.\n\nSince `x` is the only variable being updated in the loop body, we can use `x` as our ranking function.\n\nNow, let's verify if it's a valid ranking function:\n\n1. Decreasing with every iteration: In each iteration, `x` is being reduced by `2*y - 1`. Since `2*y >= 1`, `2*y - 1` is always positive, and thus, `x` is decreasing with every iteration.\n\n2. Positive while the loop is executing: The loop condition is `x >= 0`, which means that `x` is positive while the loop is executing.\n\nBased on this analysis, we can conclude that the ranking function is `x`. In ACSL syntax, the ranking function for the loop would be:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, we have the variables `x` and `y`. There are no starting values given for `x` and `y`, but we have a constraint on `y` at the beginning of the loop: `2*y >= 1`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, `x` is updated as `x = x - 2*y + 1`. We need to find an expression involving `x` and `y` that decreases with every iteration of the loop and is positive while the loop is executing.\n\nLet's consider the expression `x + 2*y - 1`. We will show that this is a valid ranking function.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + 2*y - 1;\n*/\n```\n\nExplanation:\n\nLet's analyze why this is a valid ranking function.\n\n- Initial value: At the beginning of the loop, we know that `2*y >= 1`. Since `x >= 0` (loop condition), the initial value of the ranking function `x + 2*y - 1` is non-negative.\n\n- Decreasing: In each iteration, `x` is updated as `x = x - 2*y + 1`. So, the new value of `x` is `x' = x - 2*y + 1`. The new value of the ranking function is `x' + 2*y - 1 = (x - 2*y + 1) + 2*y - 1 = x`. Since `x' < x`, the ranking function decreases with every iteration.\n\n- Positive while executing: The loop condition is `x >= 0`. While the loop is executing, `x` is non-negative, and since `2*y >= 1`, the ranking function `x + 2*y - 1` is positive.\n\nThus, the ranking function `x + 2*y - 1` is valid for the given loop.",
            "First, we note the starting values and constraints for the variables that are live at the loop head:\n- x = unknown_int();\n- y = unknown_int();\n- Constraint: 2 * y >= 1\n\nNow, let's analyze the loop body:\n```\nwhile (x >= 0) {\n    x = x - 2 * y + 1;\n}\n```\n\nWe can see that the loop variable x is updated as follows:\n- x = x - 2 * y + 1\n\nSince 2 * y >= 1, we know that y must be positive. Therefore, in each iteration of the loop, the value of x is decreased by (2 * y - 1) which is also positive.\n\nThe ranking function for this loop is x itself. The value of x is positive while the loop is executing, and it is decreasing with every iteration. In ACSL syntax, the ranking function is:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's identify the loop head and the variables that are live at the loop head. In this case, the loop head is the while loop condition `x >= 0`, and the live variables are `x` and `y`.\n\nNow let's analyze the loop body to find an expression involving `x` and `y` that decreases with each iteration of the loop. The loop body modifies the value of `x` with the statement `x = x - 2*y + 1`.\n\nSince `x` is decreasing by `2*y - 1` in each iteration, and `2*y >= 1`, we can conclude that `x` is decreasing by at least 1 in each iteration.\n\nThus, a valid ranking function for this loop is `x`, as it decreases with every iteration and is positive while the loop is executing. In ACSL syntax, we can write the loop variant as:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the beginning of the loop, we have the constraint `x >= 0`. The value of `y` is unknown, but we know that `2*y >= 1`, which means `y >= 0.5`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop body updates the value of `x` as follows: `x = x - 2*y + 1`. Since `y >= 0.5`, we know that `2*y >= 1`, and therefore, `x` is decreasing by at least 1 in each iteration.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nBased on the above analysis, a ranking function for this loop would be the value of `x` itself, as it is always decreasing and positive while the loop is executing.\n\n```c\n/*@\n    loop variant x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0.5;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x <= \\at(x, LoopEntry) - 1;\n*/",
                    "/*@\n    loop invariant 2*y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry) - (\\at(y, LoopEntry) - 1) * (\\at(x, LoopEntry) / 2);\n*/",
                    "/*@ \n    loop invariant y >= 0.5;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant x >= 0 ==> \\at(x, LoopEntry) - x == 2*y - 1;\n    loop invariant x < 0 ==> \\at(x, LoopEntry) - x <= 2*y - 1;\n*/",
                    "/*@ \n    loop invariant y >= 0;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant (2*y > 1) ==> x < \\at(x, LoopEntry);\n    loop invariant (2*y == 1) ==> x == \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x < 0;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "Firstly, we know that `x` and `y` are live at the loop head. They are initialized with unknown integers. There is a condition that `2*y >= 1`, so `y` must be at least `1/2`. \n\nThe loop condition is `x >= 0`. The loop variant is `x`.\n\nThe loop body decreases `x` by `2*y - 1` in every iteration.\n\nThus, we can identify the following loop invariants:\n\n- `x` is non-negative at the start of every iteration.\n- `y` is at least `1/2`.\n- At the start of the loop, `x` is greater than or equal to `0`.\n- In every iteration, `x` decreases by at least `1`.\n\nExpressing these as loop invariants:\n\n```\n/*@\n    loop invariant x >= 0;\n    loop invariant y >= 0.5;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x <= \\at(x, LoopEntry) - 1;\n*/\n```",
                    "Before the loop starts, we know that `2*y >= 1` and `x` can be any integer.\n\nDuring each iteration of the loop, `x` decreases by `2*y - 1`.\n\nAfter the loop terminates, we know that `x < 0`.\n\nWe can express the above statements as loop invariants.\n\n```\n/*@\n    loop invariant 2*y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry) - (\\at(y, LoopEntry) - 1) * (\\at(x, LoopEntry) / 2);\n*/\n```\n\nThe first loop invariant is true before the loop execution and remains true throughout the loop execution.\n\nThe second loop invariant is true before the loop execution and in every iteration of the loop, because `x` decreases in every iteration.\n\nThe third loop invariant is true before the loop execution and in every iteration of the loop, because `x` decreases by at least `2*y - 1` in every iteration.\n\nAfter the loop termination, all these invariants are still true, and we have an additional condition that `x < 0`. This implies that the loop variant `x` decreases with every iteration and eventually becomes negative, which proves the termination of the loop.",
                    "- The variables live at the loop head are x and y. The loop condition is (x >= 0).\n- The ranking function is (x).\n- The loop body decreases x by (2*y - 1) in every iteration, and does not modify y.\n\nWe can output the following loop invariants:\n\n```\n/*@ \n    loop invariant y >= 0.5;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant x >= 0 ==> \\at(x, LoopEntry) - x == 2*y - 1;\n    loop invariant x < 0 ==> \\at(x, LoopEntry) - x <= 2*y - 1;\n*/\n```\n\nThe first loop invariant is true before the loop execution, since the loop is only entered when y >= 0.5.\n\nThe second loop invariant is true for every iteration of the loop, since x decreases in every iteration.\n\nThe third loop invariant is true in every iteration of the loop, since x is decreased by (2*y - 1) in every iteration. It implies that the ranking function decreases.\n\nThe last loop invariant is true when the loop is terminated, since x is decreased by at least (2*y - 1) in the last iteration. It implies that the ranking function is non-positive after the loop.",
                    "At the loop head, the live variables are **x** and **y**. The loop condition is **x >= 0**. The given ranking function is **x**.\n\nWe notice that **x** is updated within the loop as **x = x - 2*y + 1**. So, **x** decreases with every iteration of the loop if **2*y > 1**. Also, **x** remains the same if **2*y = 1**.\n\nThe following loop invariants support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant (2*y > 1) ==> x < \\at(x, LoopEntry);\n    loop invariant (2*y == 1) ==> x == \\at(x, LoopEntry);\n*/\n```\n\nThe first loop invariant is true because **y** does not change within the loop. \n\nThe second loop invariant is true because **x** decreases or remains the same with every iteration of the loop.\n\nThe third loop invariant is true because **x** decreases with every iteration of the loop if **2*y > 1**.\n\nThe fourth loop invariant is true because **x** remains the same if **2*y = 1**.",
                    "The program starts by defining two integer variables, x and y, and assigning unknown values to them. A loop is entered if 2*y is greater or equal to 1, and in the loop, x is decreased by 2*y - 1 in each iteration. The loop continues as long as x is greater or equal to 0.\n\nThe ranking function for this program is **(x)**.\n\nNow, let's identify the loop invariants. \n\n1. Before the loop execution, the condition 2*y >= 1 must hold. \n\n2. Every iteration of the loop, x is decreased by 2*y - 1, so the value of x at the beginning of each loop is greater than the value at the end of the loop.\n\n3. After the loop termination, x must be less than 0, since the loop condition is x >= 0.\n\nThese observations lead to the following loop invariants:\n\n```\n/*@ \n    loop invariant 2*y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x < 0;\n*/\n```\nNote that the first invariant is necessary for the loop to be entered, the second invariant ensures the ranking function decreases with each iteration, and the third invariant is the condition for the loop to terminate."
                ],
                "inductive_invariants": "loop invariant i2: y >= 0.5;\nloop invariant i5: 2*y >= 1;\nloop invariant i6: x <= \\at(x, LoopEntry);\nloop invariant i8: \\at(x, LoopEntry) >= x;\nloop invariant i11: y >= 0;\nloop invariant i13: (2*y == 1) ==> x == \\at(x, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (2*y >= 1) {\n    \t/*@\nloop invariant i2: y >= 0.5;\nloop invariant i5: 2*y >= 1;\nloop invariant i6: x <= \\at(x, LoopEntry);\nloop invariant i8: \\at(x, LoopEntry) >= x;\nloop invariant i11: y >= 0;\nloop invariant i13: (2*y == 1) ==> x == \\at(x, LoopEntry);\nloop variant x;\n*/\nwhile (x >= 0) {\n\t    \tx = x - 2*y + 1;\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 0.5 is inductive.\nloop invariant 2*y >= 1 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant (2*y == 1) ==> x == \\at(x, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 71,
        "success_count": 98,
        "failure_count": 71,
        "success_rate": 1.380281690140845
    }
}