{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\ta = unknown_int();\n\tx = unknown_int();\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "max - x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\ta = unknown_int();\n\tx = unknown_int();\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "In the provided code, the loop condition is `x <= max`. This suggests that `max - x` may be a good candidate for the loop variant because it is guaranteed to decrease with every iteration (since `x` is incremented in every iteration).\n\nNow, let's check if `max - x` is positive while the loop is executing. Initially, `x` is set to `1` and `max` is some positive integer (since `max > 0` is checked before the loop). Hence, `max - x` is positive at the start of the loop. In every iteration, `x` is incremented by `1`, and `max` is not changed, so `max - x` remains positive until `x` becomes equal to `max`. When `x` exceeds `max`, the loop stops executing. So, `max - x` is indeed a valid ranking function for this loop.\n\nHere is the ranking function in ACSL syntax:\n```\n/*@\n    loop variant max - x;\n*/\n```",
            "In this program, the loop continues while `x <= max`. \n\nWithin the loop, `x` is incremented by 1 with every iteration (`x = x + 1`). This means that the value of `x` increases with each iteration. \n\nTherefore, the value `max - x` is a valid ranking function for this loop. It decreases with each iteration (since `x` increases) and is positive when the loop is executing (since `x <= max`). \n\nSo, in ACSL syntax, the ranking function for the loop can be expressed as:\n```\n/*@\n    loop variant max - x;\n*/\n```\nThis is a valid ranking function because it always decreases as long as the loop continues executing, and it is positive as long as the loop continues. Once `x` surpasses `max`, the loop stops, meaning that our ranking function has reached zero or negative, indicating termination. Therefore, this ranking function proves that the loop must terminate.",
            "- The loop in this program begins with the line `while (x <= max) {`. Here, `x` and `max` are the variables that are live at the loop head.\n- `x` is the loop counter, and `max` is the upper bound for `x`.\n- The loop condition is `x <= max`. This tells us that the loop continues to execute as long as `x` is less than or equal to `max`.\n- Within the loop body, `x` is incremented by 1 in each iteration: `x = x + 1;`.\n- Therefore, the value of `x` increases with each iteration, and the loop will terminate when `x > max`.\n\nFrom this analysis, we can see that the difference between `max` and `x` would serve as a valid ranking function. This expression decreases with each iteration (since `x` is incremented), and is positive while the loop continues to execute (since `x <= max`).\n\nTherefore, the ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant max - x;\n*/\n```\nThis ranking function is valid because it satisfies the criteria of being positive while the loop executes and decreasing with each iteration. This ensures the termination of the loop as the variant will eventually reach 0, at which point `x` will be greater than `max` and the loop will exit.",
            "The loop condition is `x <= max`, so the loop continues to execute as long as `x` is less than or equal to `max`. The loop variable `x` is incremented in every iteration of the loop. Hence, `x` is always increasing.\n\nThe initial value of `x` is 1, and its value is incremented in every loop iteration, while the value of `max` stays constant. This means that the difference `max - x` starts from `max - 1` and decreases in every iteration.\n\nTherefore, a possible ranking function is `max - x`. This function is decreasing, because `x` is incremented in every iteration, and it is positive as long as the loop continues to execute, because `x <= max`. \n\nThe ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant max - x;\n*/\n``` \n\nThis ranking function indicates that the loop must terminate after a certain number of iterations, because the value of the expression `max - x` can't decrease indefinitely while staying positive.",
            "- The variables live at the loop head are `a`, `x`, and `max`.\n- The loop condition is `x <= max` and `x` is incremented by 1 in every iteration.\n- The value of `a` is changed in the loop, but it does not affect the loop condition.\n- `max` is a constant throughout the loop.\n\nSo, the ranking function can be `max - x`.\n\nThis is a valid ranking function because:\n- It is positive as long as the loop continues, as `x` is always less than or equal to `max` during the loop execution.\n- It decreases with every iteration, as `x` is incremented by 1 in every iteration.\n\nTherefore, the ranking function in ACSL syntax is:\n```\n/*@\n    loop variant max - x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['max - x']": {
                "variant": [
                    "max - x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= a + x <= \\at(a, LoopEntry) + \\at(x, LoopEntry);\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant max >= 0;\n*/",
                    "/*@ \n    loop invariant 0 <= a;\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a == \\at(a, LoopEntry) + x - 1 - 2 * (\\at(a, LoopEntry) - a);\n*/",
                    "/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant 0 <= max - x;\n    loop invariant max - x == \\at(max - x, LoopEntry) - x + \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= max + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a;\n    loop invariant a <= \\at(a, LoopEntry) + max;\n    loop invariant max >= 0 ==> x >= 1;\n*/",
                    "/*@\n    loop invariant 0 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= \\at(a, LoopEntry) - (x - \\at(x, LoopEntry));\n    loop invariant a <= \\at(a, LoopEntry) + (x - \\at(x, LoopEntry));\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\ta = unknown_int();\n\tx = unknown_int();\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(max - x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and identify the variables live at the loop head, loop condition, and the provided ranking function.\n\n- Variables live at the loop head: a, x, max\n- Loop condition: x <= max\n- Ranking function: (max - x)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant 0 <= a + x <= \\at(a, LoopEntry) + \\at(x, LoopEntry);\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant max >= 0;\n*/\n```\n\nThese loop invariants satisfy the conditions:\n\n1. They are true before the loop execution.\n2. They are true in every iteration of the loop.\n3. They are true after the loop termination.\n\nThe invariants imply that the ranking function (max - x) decreases with every iteration, supporting the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- a: a is initialized to 0 before the loop.\n- x: x is initialized to 1 before the loop.\n- max: max is input from unknown_int(), and we know it is greater than 0 due to the if condition.\n\nNow let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\nLoop condition: x <= max\nRanking function: (max - x)\n\nNow let's find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= a;\n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a == \\at(a, LoopEntry) + x - 1 - 2 * (\\at(a, LoopEntry) - a);\n*/\n```",
                    "First, let's identify the loop and the variables that are live at the loop head. The loop is the `while` loop with the condition `x <= max`. The live variables at the loop head are `a`, `x`, and `max`.\n\nNow, let's analyze the loop body and the given ranking function `(max - x)`.\n\nThe loop body updates the value of `a` and increments `x` by 1 in each iteration. The ranking function `(max - x)` decreases by 1 in every iteration of the loop, which guarantees termination.\n\nWe can now write the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant 0 <= max - x;\n    loop invariant max - x == \\at(max - x, LoopEntry) - x + \\at(x, LoopEntry);\n*/\n```",
                    "First, let's analyze the program:\n\n- `a`, `x`, and `max` are initialized with unknown_int() values.\n- If `max > 0`, the loop will be executed, and `a` is set to 0, and `x` is set to 1.\n- Inside the loop, `a` is incremented or decremented depending on the result of `unknown_int()`.\n- `x` is incremented by 1 in each iteration.\n- The loop continues as long as `x <= max`.\n\nNow let's write the loop invariants that support the loop variant `(max - x)`:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant x <= max + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a;\n    loop invariant a <= \\at(a, LoopEntry) + max;\n    loop invariant max >= 0 ==> x >= 1;\n*/\n```",
                    "First, let's note the constraints for the variables that are live at the loop head:\n\n- max > 0 (since the loop is entered only when max > 0)\n- a is an integer and can take any value between INT_MIN and INT_MAX\n- x is initialized to 1 at the beginning of the loop\n\nNow, let's analyze the loop body and the given ranking function (max - x):\n\nLoop condition: x <= max\n\nRanking function: (max - x)\n\nNow let's find the loop invariants:\n\n- Before the loop execution: a = 0, x = 1\n- In every iteration of the loop: a can increase or decrease by 1, x increases by 1\n- After the loop termination: x > max\n\nLoop invariants:\n\n```\n/*@\n    loop invariant 0 <= x;\n    loop invariant x <= max + 1;\n    loop invariant a >= \\at(a, LoopEntry) - (x - \\at(x, LoopEntry));\n    loop invariant a <= \\at(a, LoopEntry) + (x - \\at(x, LoopEntry));\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i2: 1 <= x;\nloop invariant i3: x <= max + 1;\nloop invariant i4: max >= 0;\nloop invariant i8: max - x == \\at(max - x, LoopEntry) - x + \\at(x, LoopEntry);\nloop invariant i9: 0 <= x;\nloop invariant i10: \\at(a, LoopEntry) - max <= a;\nloop invariant i11: a <= \\at(a, LoopEntry) + max;\nloop invariant i12: max >= 0 ==> x >= 1;\nloop invariant i13: a >= \\at(a, LoopEntry) - (x - \\at(x, LoopEntry));\nloop invariant i14: a <= \\at(a, LoopEntry) + (x - \\at(x, LoopEntry));",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\ta = unknown_int();\n\tx = unknown_int();\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i2: 1 <= x;\nloop invariant i3: x <= max + 1;\nloop invariant i4: max >= 0;\nloop invariant i8: max - x == \\at(max - x, LoopEntry) - x + \\at(x, LoopEntry);\nloop invariant i9: 0 <= x;\nloop invariant i10: \\at(a, LoopEntry) - max <= a;\nloop invariant i11: a <= \\at(a, LoopEntry) + max;\nloop invariant i12: max >= 0 ==> x >= 1;\nloop invariant i13: a >= \\at(a, LoopEntry) - (x - \\at(x, LoopEntry));\nloop invariant i14: a <= \\at(a, LoopEntry) + (x - \\at(x, LoopEntry));\nloop variant max - x;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant max >= 0 is inductive.\nloop invariant max - x == \\at(max - x, LoopEntry) - x + \\at(x, LoopEntry) is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant \\at(a, LoopEntry) - max <= a is inductive.\nloop invariant a <= \\at(a, LoopEntry) + max is inductive.\nloop invariant max >= 0 ==> x >= 1 is inductive.\nloop invariant a >= \\at(a, LoopEntry) - (x - \\at(x, LoopEntry)) is inductive.\nloop invariant a <= \\at(a, LoopEntry) + (x - \\at(x, LoopEntry)) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c"
        ],
        "skipped": [],
        "total": 42,
        "success_count": 75,
        "failure_count": 42,
        "success_rate": 1.7857142857142858
    }
}