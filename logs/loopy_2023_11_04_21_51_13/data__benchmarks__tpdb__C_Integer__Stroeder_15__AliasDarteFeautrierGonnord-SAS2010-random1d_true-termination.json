{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "max - x + 1"
            ],
            [
                "max - x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop here is a for loop with the variable `x` increasing by 1 in each iteration until `x` exceeds `max`. \n\nThe loop can be expected to terminate when `x` becomes greater than `max`. \n\nIn this case, the ranking function can be `max - x + 1`. \n\nThis function decreases with every iteration (since `x` is incremented in each iteration), and is positive as long as `x` is less than or equal to `max`. \n\nHere is how you can write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant max - x + 1;\n*/\n```",
            "Starting values or constraints for the variables that are live at the loop head: \n\n- 'x' starts from 1 and increments by 1 each loop iteration.\n- 'max' is an arbitrary positive integer.\n- 'a' starts from 0 and changes its value by either +1 or -1 each loop iteration.\n\nAnalyzing the loop body and finding a ranking function:\n\n- The loop executes as long as 'x' is less than or equal to 'max'. So, the variable 'x' decides the termination of the loop.\n- With each iteration of the loop, 'x' increases by 1.\n- Hence, a suitable ranking function could be 'max - x + 1'. This function decreases with every iteration (since 'x' increases) and is positive as long as the loop continues (since 'x' is always less than or equal to 'max' in the loop condition).\n\nHence, the ranking function can be:\n```\n/*@\n    loop variant max - x + 1;\n*/\n```\n\nThis is a valid ranking function because it meets the two necessary criteria: it decreases with each iteration of the loop and it is positive for the loop to continue executing.",
            "- The variable `max` is the upper bound for the loop variable `x`.\n- The loop variable `x` starts at `1` and increments by `1` in each iteration.\n- The loop continues as long as `x` is less than or equal to `max`.\n\nTherefore, the ranking function for the loop in the given program is `max - x + 1`. \n\nThis function decreases with every iteration of the loop because `x` increases with each iteration. The function also evaluates to a positive value while the loop is executing because `x` is always less than or equal to `max`.\n\nSo, the output in ACSL syntax would be:\n```\n/*@\n    loop variant max - x + 1;\n*/\n```",
            "At the beginning of the loop, the variable `x` is 1 and `max` is a positive number greater than 0. The loop condition is `x <= max`, and `x` is incremented by 1 in every iteration of the loop.\n\nTherefore, `max - x` is a valid ranking function for this loop because it decreases by 1 with every iteration of the loop and it is positive while the loop is executing (because `x` is always less than or equal to `max`).\n\nThe ranking function in ACSL syntax is:\n\n```c\n/*@\n    loop variant max - x;\n*/\n```",
            "The variables that are live at the loop head are `a`, `x`, and `max`. However, `a` is not relevant for the termination of the loop, so we will focus on `x` and `max`.\n\nThe loop condition is `x <= max`. As long as this condition is true, the loop will keep executing. \n\nInside the loop, `x` is incremented by 1 in every iteration. This means that `x` is always increasing. Therefore, with each iteration, the difference between `max` and `x` is decreasing. \n\nSo, we can choose `max - x` as the ranking function.\n\nThis is a valid ranking function because:\n\n- `max - x` is always positive while the loop is executing, as required by the loop condition `x <= max`.\n- `max - x` is decreasing with each iteration of the loop, since `x` is incremented by 1 in each iteration.\n\nThus, the ranking function for this loop is `max - x`.\n\nIn ACSL syntax, this would be written as:\n\n```\n/*@\n    loop variant max - x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['max - x + 1']": {
                "variant": [
                    "max - x + 1"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= a <= x;\n    loop invariant 1 <= x <= max + 1;\n    loop invariant max >= 0;\n    loop invariant \\at(a, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) == 1;\n*/",
                    "/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a;\n    loop invariant a <= x;\n*/",
                    "/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant 0 <= max - x + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a <= \\at(a, LoopEntry) + max;\n*/",
                    "/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a <= \\at(a, LoopEntry) + max;\n    loop invariant \\at(x, LoopEntry) <= x;\n    loop invariant (unknown_int() != 0) ==> a >= \\at(a, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant a >= -\\at(x, LoopEntry) && a <= \\at(x, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\twhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(max - x + 1)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n\n- max is a positive integer from the unknown_int() function.\n- a is initialized to 0.\n- x is initialized to 1.\n\nNow let's analyze the loop body:\n\n- The loop condition is (x <= max).\n- The given ranking function is (max - x + 1).\n- Inside the loop, a is either incremented or decremented based on the result of unknown_int().\n- x is incremented by 1 in every iteration.\n\nNow, let's output the loop invariants that support the validity of the ranking function:\n\n```\n/*@ \n    loop invariant 0 <= a <= x;\n    loop invariant 1 <= x <= max + 1;\n    loop invariant max >= 0;\n    loop invariant \\at(a, LoopEntry) == 0;\n    loop invariant \\at(x, LoopEntry) == 1;\n*/\n```\n\nThese loop invariants ensure that:\n\n- a is always between 0 and x (since a can be incremented or decremented by at most 1 in each iteration).\n- x starts at 1 and is incremented by 1 in every iteration, so it will always be between 1 and max + 1.\n- max is a positive integer (since max > 0).\n- The initial values of a and x are 0 and 1, respectively, at the beginning of the loop.",
                    "We are given that the ranking function for the loop is (max - x + 1). We need to find loop invariants that support this ranking function and prove that the loop terminates.\n\nFirst, let's analyze the loop and note the starting values and constraints for the variables live at the loop head:\n- max: set by unknown_int() and max > 0\n- a: initially 0\n- x: initially 1\n\nNow let's look at the loop condition and the loop body:\n- Loop condition: x <= max\n- Loop body: a is either incremented or decremented based on the unknown_int() result, and x is incremented by 1.\n\nLet's find the loop invariants:\n\n1. Since x starts at 1 and is incremented by 1 in each iteration, x is always positive.\n2. Before the loop, x is equal to 1, and after each iteration, x is incremented by 1. Therefore, x is always less than or equal to max + 1.\n3. The value of a is changed based on the result of unknown_int(). However, it is bounded by the minimum and maximum values it can take, which are -x and x, respectively, because a can be incremented or decremented at most x times.\n\nNow we can write the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= x;\n    loop invariant x <= max + 1;\n    loop invariant -x <= a;\n    loop invariant a <= x;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- max > 0\n- a is initially 0\n- x is initially 1\n\nNow, let's analyze the loop body, loop condition, and the given ranking function:\n- Loop condition: x <= max\n- Loop body: a is increased or decreased by 1; x is increased by 1.\n- Ranking function: (max - x + 1)\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant 0 <= max - x + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a <= \\at(a, LoopEntry) + max;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- `max` is positive (max > 0)\n- `a` is initially 0\n- `x` is initially 1\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- The loop condition is `x <= max`\n- The ranking function is `(max - x + 1)`\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant \\at(a, LoopEntry) - max <= a <= \\at(a, LoopEntry) + max;\n    loop invariant \\at(x, LoopEntry) <= x;\n    loop invariant (unknown_int() != 0) ==> a >= \\at(a, LoopEntry);\n*/\n```\n\nThe loop invariants imply that the ranking function `(max - x + 1)` decreases with every iteration, proving the loop's termination.",
                    "First, we analyze the starting values and constraints for the variables that are live at the loop head:\n\n- max is initialized by an unknown_int(), but we know it is positive since the loop is only entered if max > 0.\n- a starts at 0.\n- x starts at 1.\n\nNext, we analyze the loop condition and loop body:\n\n- Loop condition: x <= max.\n- Loop body: a is incremented or decremented based on an unknown_int(), and x is incremented by 1.\n\nNow, we can output the loop invariants that support the loop variant (max - x + 1):\n\n```\n/*@ \n    loop invariant 1 <= x <= max + 1;\n    loop invariant a >= -\\at(x, LoopEntry) && a <= \\at(x, LoopEntry);\n*/\n```\n\nExplanation:\n\n- `1 <= x <= max + 1`: x starts at 1 and is incremented by 1 in each iteration, so it is always between 1 and max + 1 (when the loop terminates).\n- `a >= -\\at(x, LoopEntry) && a <= \\at(x, LoopEntry)`: a is always incremented or decremented by 1, so it can never go beyond the range of -x to x at the beginning of the loop."
                ],
                "inductive_invariants": "loop invariant i2: 1 <= x <= max + 1;\nloop invariant i3: max >= 0;\nloop invariant i4: \\at(a, LoopEntry) == 0;\nloop invariant i5: \\at(x, LoopEntry) == 1;\nloop invariant i6: 1 <= x;\nloop invariant i7: x <= max + 1;\nloop invariant i8: -x <= a;\nloop invariant i9: a <= x;\nloop invariant i10: 0 <= max - x + 1;\nloop invariant i12: \\at(x, LoopEntry) <= x;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int a, x, max;\n\tmax = unknown_int();\n\tif (max > 0) {\n\t\ta = 0;\n\t\tx = 1;\n\t\t/*@\nloop invariant i2: 1 <= x <= max + 1;\nloop invariant i3: max >= 0;\nloop invariant i4: \\at(a, LoopEntry) == 0;\nloop invariant i5: \\at(x, LoopEntry) == 1;\nloop invariant i6: 1 <= x;\nloop invariant i7: x <= max + 1;\nloop invariant i8: -x <= a;\nloop invariant i9: a <= x;\nloop invariant i10: 0 <= max - x + 1;\nloop invariant i12: \\at(x, LoopEntry) <= x;\nloop variant max - x + 1;\n*/\nwhile (x <= max) {\n\t\t\tif (unknown_int() != 0) {\n\t\t\t\ta = a + 1;\n\t\t\t} else {\n\t\t\t\ta = a - 1;\n            }\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 1 <= x <= max + 1 is inductive.\nloop invariant max >= 0 is inductive.\nloop invariant \\at(a, LoopEntry) == 0 is inductive.\nloop invariant \\at(x, LoopEntry) == 1 is inductive.\nloop invariant 1 <= x is inductive.\nloop invariant x <= max + 1 is inductive.\nloop invariant -x <= a is inductive.\nloop invariant a <= x is inductive.\nloop invariant 0 <= max - x + 1 is inductive.\nloop invariant \\at(x, LoopEntry) <= x is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 62,
        "failure_count": 35,
        "success_rate": 1.7714285714285714
    }
}