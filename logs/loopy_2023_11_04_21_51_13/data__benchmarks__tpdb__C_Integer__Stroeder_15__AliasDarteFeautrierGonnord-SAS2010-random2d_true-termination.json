{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int N, x, y, i, r;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "N - i"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int N, x, y, i, r;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop variable in this program is `i`. The loop continues as long as `i` is less than `N`, which is fixed at 10. \n\nThe value of `i` increases by 1 in each iteration of the loop. Therefore, the ranking function here is `N - i`.\n\nThis is a valid ranking function because it's always positive during loop execution (`i` is always less than `N`), and it decreases with each iteration (since `i` increases). \n\nSo in ACSL syntax, the ranking function would be:\n\n```\n/*@\n    loop variant N - i;\n*/\n```",
            "The ranking function for the loop in the given program is `N - i`.\n\nThis is a valid ranking function as it satisfies the two conditions required for a function to be a ranking function:\n\n1. **Decreasing**: The value of `N - i` decreases with every iteration of the loop as `i` is incremented by 1 in each loop iteration (`i = i + 1`).\n\n2. **Positive**: The value of `N - i` is always positive as long as the loop continues to execute. This is because `i < N` is the loop condition, meaning `i` is always less than `N` during loop execution, making `N - i` positive.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant N - i;\n*/\n```",
            "- The loop starts when `i` equals to `0` and continues until `i` is less than `N`, where `N` is `10`.\n- With each iteration of the loop, `i` increases by `1`.\n\nTherefore, a possible ranking function for this loop could be `N - i`.\n\nLet's explain why `N - i` is a valid ranking function:\n- It decreases with every iteration of the loop: `i` is incremented by `1` in each loop iteration, so `N - i` gets smaller by `1` in each loop iteration.\n- It is positive during loop execution: `i` starts at `0` and increases up to but not including `N`, so `N - i` is always greater than `0`.\n\nHere's how the ranking function would look like in ACSL syntax:\n```\n/*@\n    loop variant N - i;\n*/\n```",
            "The loop variable `i` is initialized to `0` and incremented by `1` in each iteration of the loop. The loop condition is `i < N`, where `N` is a constant value of `10`. Thus, `i` is always increasing and the loop terminates when `i` reaches `N`.\n\nTherefore, a suitable ranking function for this loop would be `N - i`.\n\nThis is a valid ranking function because it is positive for every iteration of the loop (`i < N` implies that `N - i > 0`) and it decreases with every iteration of the loop (since `i` is incremented by `1` in each iteration).  \n\nSo we can write it in ACSL syntax as follows:\n\n```\n/*@\n    loop variant N - i;\n*/\n```",
            "The loop variable in this program is `i`. The loop begins executing when `i` is less than `N` and continues until `i` is no longer less than `N`. `i` increases by 1 in each iteration of the loop.\n\nTherefore, the ranking function is `N - i`. This function decreases with every iteration of the loop since `i` increases with each loop iteration. The function also evaluates to a positive value while the loop is executing since `i` is always less than `N` during loop execution.\n\nThe ranking function in ACSL syntax is:\n\n```c\n/*@\n    loop variant N - i;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['N - i']": {
                "variant": [
                    "N - i"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i <= N;\n    loop invariant \\at(i, LoopEntry) <= i <= N;\n    loop invariant x == \\at(x, LoopEntry) + \\sum(0, i - \\at(i, LoopEntry), \\lambda integer j; (r == 0) - (r == 1));\n    loop invariant y == \\at(y, LoopEntry) + \\sum(0, i - \\at(i, LoopEntry), \\lambda integer j; (r == 2) - (r == 3));\n    loop invariant N - i >= 0;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= N;\n    loop invariant i == \\at(i, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i <= N;\n    loop invariant i <= N;\n    loop invariant r >= 0 ==> x >= \\at(x, LoopEntry) - 1;\n    loop invariant r <= 3 ==> x <= \\at(x, LoopEntry) + 1;\n    loop invariant r >= 0 ==> y >= \\at(y, LoopEntry) - 1;\n    loop invariant r <= 3 ==> y <= \\at(y, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i;\n    loop invariant i <= N;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i;\n    loop invariant \\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i;\n    loop invariant N == 10;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int N, x, y, i, r;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(N - i)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The variables that are live at the loop head are: N, x, y, i, r.\n- The loop condition is (i < N).\n- The given ranking function is (N - i).\n\nLet's analyze the loop body:\n\n- i is incremented by 1 in each iteration.\n- r can take any integer value from the function unknown_int().\n- x and y are incremented or decremented by 1 depending on the value of r, or not changed at all.\n\nWe know that:\n\n- The ranking function (N - i) is always non-negative, because i is always less than or equal to N.\n- The ranking function decreases with each iteration of the loop, because i is incremented by 1 in each iteration.\n\nConsidering all this, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i <= N;\n    loop invariant \\at(i, LoopEntry) <= i <= N;\n    loop invariant x == \\at(x, LoopEntry) + \\sum(0, i - \\at(i, LoopEntry), \\lambda integer j; (r == 0) - (r == 1));\n    loop invariant y == \\at(y, LoopEntry) + \\sum(0, i - \\at(i, LoopEntry), \\lambda integer j; (r == 2) - (r == 3));\n    loop invariant N - i >= 0;\n*/\n```\n\nThese loop invariants satisfy all the required conditions:\n\n- They are true before the loop execution, because i is 0 and x, y, and N are initialized to certain values.\n- They are true in every iteration of the loop, because i is always incremented, and x and y change depending on the value of r.\n- They are true after the loop termination, because i is no longer less than N, and x and y have their final values.",
                    "- The starting values for the variables are: N = 10, x = 0, y = 0, i = 0. The variable r is not initialized.\n- The loop condition is **(i < N)** and the given ranking function is **(N - i)**.\n- The loop invariant that is true before the loop execution is **i == 0**.\n- The loop invariant that is true in every iteration of the loop is **(0 <= i && i <= N)**. This implies that **(N - i)** decreases with every iteration.\n- After the loop termination, **i == N**.\n\nIn the loop body, the value of r is non-deterministic. Based on the value of r, x or y is incremented or decremented. However, the changes to x and y do not affect the loop termination, as it is solely dependent on the value of i and N.\n\nTherefore, the loop invariants are:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= N;\n    loop invariant i == \\at(i, LoopEntry) + 1;\n*/\n```",
                    "- The variables that are live at the loop head are: N, x, y, i, r.\n- The loop condition is (i < N).\n- The given ranking function is (N - i).\n\nNow, let's find the loop invariants.\n\n- Before the loop execution, the loop invariant is N == 10 and i == 0.\n- In every iteration of the loop, the loop invariant is 0 <= i and i <= N.\n- After the loop termination, the loop invariant is i == N.\n\nRegarding the ranking function:\n- The value of N remains constant throughout the loop, and the value of i is incremented in each iteration, hence the ranking function (N - i) decreases with every iteration.\n\nRegarding the variables x and y:\n- The value of x and y can increase or decrease by 1 or remain the same in each iteration. Hence, we don't have a certain bound for these variables.\n- The value of r is unknown, but it is between 0 and 3 in each iteration.\n\nPutting it all together, the loop invariants that support the validity of the ranking function and prove the termination of the loop are:\n```\n/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i <= N;\n    loop invariant i <= N;\n    loop invariant r >= 0 ==> x >= \\at(x, LoopEntry) - 1;\n    loop invariant r <= 3 ==> x <= \\at(x, LoopEntry) + 1;\n    loop invariant r >= 0 ==> y >= \\at(y, LoopEntry) - 1;\n    loop invariant r <= 3 ==> y <= \\at(y, LoopEntry) + 1;\n*/\n```",
                    "Firstly, note the starting values of the variables that are live at the loop head:\n\n- N is always equal to 10 at the start of the program.\n- i is equal to 0 at the start of the program.\n- x and y can be any integer value at the start of the program due to the non-deterministic function `unknown_int()`. \n\nThe loop condition is `i < N` and the loop variant is `(N - i)`.\n\nWith these observations, let's construct the loop invariants:\n\n(i) The loop invariant that holds before the loop execution is: `N == 10 && i == 0`\n\n(ii) The loop invariant that holds in every iteration of the loop is: `0 <= i && i <= N`\n\n(iii) The loop invariant that holds after the loop termination is: `i == N`\n\nThis gives the following loop invariants:\n```\n/*@ \n    loop invariant N == 10;\n    loop invariant 0 <= i;\n    loop invariant i <= N;\n*/\n```\nThese loop invariants imply that the loop variant `(N - i)` is non-negative and decreases with every iteration, which proves the termination of the loop.",
                    "- The loop is entered with `i = 0` and `N = 10`.\n- The loop condition is `i < N`, so the loop terminates when `i >= N`.\n- The loop variant is `N - i`. Since `i` is incremented by `1` in every loop iteration, `N - i` decreases with every iteration.\n\nLoop invariants that support the loop variant `(N - i)` and the termination of the loop:\n\n```c\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant \\at(i, LoopEntry) <= i;\n    loop invariant \\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i;\n    loop invariant \\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i;\n    loop invariant N == 10;\n*/\n```\nExplanation:\n- `0 <= i <= N`: `i` is always between `0` and `N`. It starts from `0` and is incremented by `1` in each loop iteration until it reaches `N`.\n- `\\at(i, LoopEntry) <= i`: The value of `i` is non-decreasing.\n- `\\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i`: The changes in `x` are bounded by the number of iterations. This is because in each iteration `x` can either increase by `1`, decrease by `1` or stay the same.\n- `\\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i`: The changes in `y` are also bounded by the number of iterations. This is because in each iteration `y` can either increase by `1`, decrease by `1` or stay the same.\n- `N == 10`: The value of `N` does not change during the loop execution."
                ],
                "inductive_invariants": "loop invariant i1: N == 10;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: \\at(i, LoopEntry) <= i <= N;\nloop invariant i6: N - i >= 0;\nloop invariant i7: 0 <= i;\nloop invariant i8: i <= N;\nloop invariant i14: \\at(i, LoopEntry) <= i;\nloop invariant i15: \\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i;\nloop invariant i16: \\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int N, x, y, i, r;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: N == 10;\nloop invariant i2: 0 <= i <= N;\nloop invariant i3: \\at(i, LoopEntry) <= i <= N;\nloop invariant i6: N - i >= 0;\nloop invariant i7: 0 <= i;\nloop invariant i8: i <= N;\nloop invariant i14: \\at(i, LoopEntry) <= i;\nloop invariant i15: \\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i;\nloop invariant i16: \\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i;\nloop variant N - i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant N == 10 is inductive.\nloop invariant 0 <= i <= N is inductive.\nloop invariant \\at(i, LoopEntry) <= i <= N is inductive.\nloop invariant N - i >= 0 is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= N is inductive.\nloop invariant \\at(i, LoopEntry) <= i is inductive.\nloop invariant \\at(x, LoopEntry) - i <= x <= \\at(x, LoopEntry) + i is inductive.\nloop invariant \\at(y, LoopEntry) - i <= y <= \\at(y, LoopEntry) + i is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 62,
        "failure_count": 35,
        "success_rate": 1.7714285714285714
    }
}