{
    "log": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + 1"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop in the program is:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nFrom the conditions before the loop, we know that `a == b`. Therefore, the operation `x + a - b - 1` simplifies to `x - 1`.\n\nThis means that `x` is decreasing by 1 with every iteration of the loop. The loop continues as long as `x >= 0`.\n\nTherefore, a suitable ranking function would be `x`, as it is decreasing by 1 every loop iteration and is positive for the loop to continue executing.\n\nIn ACSL syntax, this would be:\n\n```\n/*@\n    loop variant x;\n*/\n``` \n\nThis is a valid ranking function because it is positive and decreases by 1 with each iteration of the loop, ensuring eventual termination of the loop.",
            "The variables that are live at the loop head are `x`, `a`, and `b`. The loop condition is `x >= 0`, which means that the loop continues to execute as long as `x` is non-negative. \n\nIn the loop body, `x` is updated with the expression `x + a - b - 1`. Since `a` and `b` are equal (as ensured by the initial `if` condition), this simplifies to `x - 1` in each iteration. \n\nThis means that `x` decreases by 1 in each iteration of the loop, and thus it is a suitable ranking function. \n\nWe can write the ranking function in ACSL syntax as follows:\n```\n/*@\n    loop variant x;\n*/\n```\nThis is a valid ranking function because:\n- It is positive as long as the loop continues to execute.\n- It decreases with each iteration of the loop.\n- It eventually reaches 0, at which point the loop exits. \n\nSo the termination of the loop is guaranteed.",
            "First, let's note down the initial values of the variables:\n\n- `x` is initialized with the value returned by `unknown_int()`. This value is not known.\n- `a` is initialized with the value returned by `unknown_int()`. This value is not known.\n- `b` is initialized with the value returned by `unknown_int()`. This value is not known.\n\nIn the loop, `x` is decreased by `1` in every iteration (`x = x + a - b - 1;`). Since `a` equals `b` (because of the precondition `if(a != b) return 0;`), `a - b` is always `0`. Therefore, `x` decreases by `1` in each iteration.\n\nThe loop continues while `x` is greater than or equal to `0`.\n\nTherefore, a suitable ranking function for this loop would be `x + 1`. This function decreases in every iteration, and it is positive as long as `x` is greater than or equal to `0`.\n\nSo, the ACSL annotation for the loop variant would be:\n```\n/*@\n    loop variant x + 1;\n*/\n```",
            "The loop head is `while (x >= 0)`. The variable that is live at the loop head is `x`.\n\nThe loop body is `{ x = x + a - b - 1; }`. Here, `x` is updated by the expression `x + a - b - 1`.\n\nGiven that `a` and `b` are equal (as per the `if (a != b)` statement), the expression simplifies to `x = x - 1`.\n\nThis suggests that the value of `x` decreases by 1 in each loop iteration. Hence `x` is the ranking function.\n\nThe ranking function is a valid one because it always decreases with every iteration of the loop (by 1) and is positive for the loop to continue executing (as per the loop condition `x >= 0`).\n\nThe ranking function in ACSL syntax is:\n```\n/*@\n    loop variant x;\n*/\n```",
            "- The loop condition is `x >= 0`, so `x` is the variable live at the loop head.\n- `x` is decreased by `1` in every iteration of the loop.\n- As `a` and `b` are equal, their effect on `x` in the loop body cancels out.\n- Therefore, `x` is decreased by `1` in every iteration, and the loop stops executing when `x < 0`.\n\nGiven these points, a suitable ranking function would be `x`. This ranking function decreases with every iteration, and the loop stops executing when the ranking function is no longer positive. Therefore, `x` is a valid ranking function for this loop.\n\nThe ranking function in ACSL syntax is:\n\n```\n/*@\n    loop variant x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant a == b;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant \\at(x, LoopEntry) == x + a - b - 1;\n*/",
                    "/*@\n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant \\at(x, LoopEntry) >= 0;\n*/",
                    "/*@ \n  loop invariant x >= -1;\n  loop invariant \\at(x, LoopEntry) - 1 == x;\n*/",
                    "/*@ \n    loop invariant a == b;\n    loop invariant \\at(x, LoopEntry) - 1 == x;\n    loop invariant x < 0 ==> \\at(x, LoopExit);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The initial values of `x`, `a`, and `b` are unknown but `a` and `b` are equal due to the if condition before the loop.\n- The loop condition is `x >= 0`.\n- The loop body decreases `x` by `1` in each iteration as `x = x + a - b - 1` and `a` is equal to `b`.\n- The ranking function is `x`.\n\nBased on the above, the loop invariants that ensure the ranking function decreases with every iteration are:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant a == b;\n    loop invariant x >= 0;\n*/\n```",
                    "- The initial values of `x`, `a`, and `b` are non-deterministic but we know that `a` equals `b`.\n- The loop condition is `x >= 0`.\n- In each iteration of the loop, `x` is decreased by `1`.\n\nWith these information, we can write the loop invariants:\n\n```c\n/*@ \n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant \\at(x, LoopEntry) == x + a - b - 1;\n*/\n```",
                    "- The variables that are live at the loop head are: x, a, b.\n- The starting value of x is non-deterministic. x is non-negative initially.\n- The starting values of a and b are non-deterministic. a is equal to b initially.\n- The loop condition is x >= 0.\n- The loop body subtracts (a - b + 1) from x in every iteration. Since a is equal to b, this expression is equal to 1.\n- The loop variant is x.\n\nTo prove that the loop terminates, we need to prove that x is non-negative before and during the execution of the loop, and that x decreases with every iteration of the loop. The loop variant x is indeed a ranking function as it is non-negative and decreases in every iteration of the loop.\n\nThe loop invariants are as follows:\n\n```\n/*@\n    loop invariant a == b;\n    loop invariant x >= -1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant \\at(x, LoopEntry) >= 0;\n*/\n```\n- The first loop invariant states that a is always equal to b during the execution of the loop. This invariant is necessary to ensure that the expression (a - b + 1) is always equal to 1.\n- The second loop invariant states that x is always greater than or equal to -1 during the execution of the loop. This invariant is necessary to ensure that x is non-negative before the loop and that x decreases with every iteration of the loop.\n- The third loop invariant states that x is always less than or equal to its value at the beginning of the loop. This invariant is necessary to ensure that x decreases with every iteration of the loop.\n- The fourth loop invariant states that the initial value of x is non-negative. This invariant is necessary to ensure that x is non-negative before the loop.",
                    "The loop condition is `x >= 0`, and the ranking function is `x`.\n\nThe loop body `x = x + a - b - 1;` can be simplified to `x = x - 1;` because `a == b`.\n\nTherefore, in each loop iteration, `x` decreases by `1`.\n\nGiven this information, the loop invariants are:\n\n```\n/*@ \n  loop invariant x >= -1;\n  loop invariant \\at(x, LoopEntry) - 1 == x;\n*/\n```\n\nThe first invariant `x >= -1` states that `x` is always greater than or equal to `-1`. This is true before the loop (`x >= 0`), during the loop (`x` decreases by `1` in each iteration), and after the loop (`x` must be `-1` to terminate the loop).\n\nThe second invariant `\\at(x, LoopEntry) - 1 == x` states that `x` at the beginning of the loop minus `1` is equal to the current value of `x`. This is true during the loop (`x` decreases by `1` in each iteration).",
                    "In the given program, the variables that are live at the loop head are `x`, `a`, and `b`.\n\nThe loop condition is `x >= 0`, and the ranking function is `x`.\n\nBefore the loop execution, it's known that `a == b`.\n\nDuring the loop execution, `x` is decreased by `(a - b + 1)` in each iteration. Since `a` is equal to `b`, `x` is decreased by `1` in each iteration.\n\nThe loop terminates when `x` becomes negative.\n\nNow, let's form the loop invariants that remain true before the loop execution, during every iteration of the loop, and after the loop termination:\n\n- `a == b` is true before the loop execution.\n- `x` decreases by `1` in each iteration.\n- After the loop termination, `x` is negative.\n\nNow, let's write these invariants in one code block:\n```\n/*@ \n    loop invariant a == b;\n    loop invariant \\at(x, LoopEntry) - 1 == x;\n    loop invariant x < 0 ==> \\at(x, LoopExit);\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: \\at(x, LoopEntry) >= x;\nloop invariant i2: a == b;\nloop invariant i6: x <= \\at(x, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: \\at(x, LoopEntry) >= x;\nloop invariant i2: a == b;\nloop invariant i6: x <= \\at(x, LoopEntry);\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant a == b is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c"
        ],
        "skipped": [],
        "total": 31,
        "success_count": 55,
        "failure_count": 31,
        "success_rate": 1.7741935483870968
    }
}