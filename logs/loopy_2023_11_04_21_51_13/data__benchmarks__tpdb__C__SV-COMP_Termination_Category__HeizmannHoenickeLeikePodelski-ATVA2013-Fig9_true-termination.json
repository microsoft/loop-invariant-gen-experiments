{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\tif (2*y < z) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0 && z == 1) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\tif (2*y < z) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0 && z == 1) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the loop head and the live variables at the loop head. The loop head is the `while` statement, and the live variables are `x`, `y`, and `z`.\n\nNow, let's analyze the loop body and find a ranking function involving these variables. We know that `z` is constant since it does not change within the loop. The loop condition requires `x >= 0` and `z == 1`. In each iteration, the value of `x` is decreased by `2*y - 1`.\n\nAs `z` is constant and equal to 1, we can focus on `x`. We know that `x` decreases in each iteration, and the loop continues as long as `x >= 0`. Thus, we can use `x` itself as a ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it satisfies the required properties: it is positive (since `x >= 0` for the loop to continue) and decreases in each iteration (since `x` is decreased by `2*y - 1` in each iteration).",
            "1. The variables live at the loop head are `x`, `y`, and `z`.\n\n2. The loop condition is `x >= 0 && z == 1`. We know that `z` is constant throughout the loop since it is not modified in the loop body. If `z != 1`, the loop will not execute. So, we only need to consider the case where `z == 1`.\n\n3. Inside the loop body, the value of `x` is updated as follows: `x = x - 2*y + 1`.\n\nNow, let's find the ranking function:\n\nSince `x` is decreasing by `2*y - 1` in each iteration and the loop continues as long as `x >= 0`, we can use `x` as the ranking function.\n\nThus, the ranking function is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x` decreases with each iteration of the loop (`x = x - 2*y + 1`).\n2. The value of `x` is positive for the loop to continue executing (`x >= 0` in the loop condition).",
            "First, let's identify the variables that are live at the loop head. In this case, they are `x`, `y`, and `z`.\n\nNext, let's analyze the loop body. The loop condition requires `x >= 0` and `z == 1`. In each iteration of the loop, the value of `x` is updated with the expression `x - 2*y + 1`. Since `y` and `z` are not updated inside the loop, their values remain constant.\n\nNow, we need to find an expression involving these variables that decreases with every iteration of the loop and is positive while the loop is executing.\n\nLet's use the variable `x` itself as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n1. It decreases with every iteration of the loop since `x` is updated with `x - 2*y + 1`, and `2*y > 0` because of the initial condition `2*y < z`.\n2. It is positive while the loop is executing, as the loop condition requires `x >= 0`.\n\nHence, the ranking function for this loop is `x`.",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x = unknown_int();\n- y = unknown_int();\n- z = unknown_int();\n- if (2*y < z) {\n    return 0;\n}\n\nAt the loop head, the variables x, y, and z are live. We know that 2*y >= z.\n\nNow, let's analyze the loop body:\n\nwhile (x >= 0 && z == 1) {\n    x = x - 2*y + 1;\n}\n\nThe loop body updates the value of x in each iteration. The value of x decreases by (2*y - 1) in each iteration.\n\nNow we can find a ranking function involving the variables in the loop body. Since x decreases by (2*y - 1) in each iteration and the loop continues to execute while x >= 0, we can use the following ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration (x is reduced by (2*y - 1) in each iteration) and is positive while the loop is executing (the loop condition requires x >= 0).",
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - x can be any integer value.\n   - y can be any integer value.\n   - z must be 1 for the loop to execute (given by the loop condition z == 1).\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - In each iteration, x is updated as x = x - 2*y + 1.\n   - The loop continues executing as long as x >= 0.\n\n3. Ranking function:\n   Since x is always decreasing by the factor (2*y - 1) in each iteration, we can use x as the ranking function.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0 ==> 2*y <= \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant z == 1;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant 2*y < z ==> \\at(x, LoopEntry) >= 2*\\at(y, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) == y;\n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant y >= 0 ==> x >= -1;\n    loop invariant z == 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\tif (2*y < z) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0 && z == 1) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The variables live at the loop head are: x, y, z.\n- The loop condition is: x >= 0 and z == 1\n- The ranking function is: x\n\nLet's write the loop invariants.\n\n```\n/*@ \n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0 ==> 2*y <= \\at(x, LoopEntry);\n*/\n```",
                    "Firstly, we know that the variables **x**, **y** and **z** are initialized with some values before the loop starts. Their initial values are unknown. \n\nSecondly, the loop condition is **x >= 0 && z == 1**. Therefore, the loop only runs if **x** is non-negative and **z** equals 1. \n\nThirdly, inside the loop, **x** is decreased by **2*y - 1**. Therefore, **x** decreases in every iteration of the loop. The ranking function is **x**. \n\nLet's derive the loop invariants from these observations.\n\nThe loop invariants are:\n```\n/*@ \n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant x >= 0;\n*/\n```\n\nThese invariants hold true:\n(i) Before the loop execution because **z**, **y** and **x** are initialized to some values and **x** is non-negative.\n(ii) In every iteration of the loop because **z** and **y** do not change inside the loop and **x** is decreased in every iteration and remains non-negative.\n(iii) After the loop termination because the loop only stops when **x** becomes negative. However, this contradicts the invariant **x >= 0**, implying that the loop never terminates. Hence, the loop invariants imply that the ranking function **x** does not decrease with every iteration, contradicting the assumption that it is a ranking function. Therefore, **x** is not a valid ranking function for this loop.",
                    "First, note the constraints for the variables at the loop head:\n- x is a non-deterministic value.\n- y is a non-deterministic value.\n- z is a non-deterministic value.\n- It is given that 2*y >= z.\n\nThe loop condition is x >= 0 && z == 1.\n\nIn each iteration, x is updated as x = x - 2*y + 1.\n\nNow, let's find the loop invariants.\n\nBefore the loop execution, \n- x can be any integer.\n- z is equal to 1.\n\nIn every iteration of the loop,\n- x decreases by 2*y - 1 in each iteration.\n- z remains the same throughout the loop execution.\n\nAfter the loop termination, \n- x should be less than 0.\n- z is still equal to 1.\n\nThe loop invariants are as follows:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant z == 1;\n    loop invariant x >= 0;\n*/\n```\nThese loop invariants support the validity of the ranking function and prove the termination of the loop. Since x decreases by at least 1 in each iteration and it is initially non-negative, the loop will eventually terminate when x becomes negative.",
                    "- The program variables that are live at the loop head are `x`, `y` and `z`.\n- The loop condition is `x >= 0 && z == 1`.\n- The ranking function for the loop is `x`.\n- The starting values or constraints for these variables are unknown, except for the check `2*y < z` before the loop starts.\n- In the loop body, `x` is decreased by `2*y - 1` in every iteration.\n\nNow, let's construct the loop invariants. We should express that `x` is non-negative at the start of the loop and decreases in every iteration. Also, `z` remains constant as `1` and `y` remains constant throughout the loop execution. We also have the constraint `2*y < z` which holds at the start of the loop.\n\nThe loop invariants are:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant 2*y < z ==> \\at(x, LoopEntry) >= 2*\\at(y, LoopEntry) - 1;\n*/\n```\n\nThe first two invariants express that `x` is non-negative at the start of the loop and decreases in every iteration. The third and fourth invariants express that `z` and `y` remain constant throughout the loop. The last invariant connects the constraint `2*y < z` with the value of `x` at the start of the loop. If `2*y < z` holds, then `x` at the start of the loop is at least `2*y - 1`. This is important because `x` is decreased by `2*y - 1` in every iteration. So, if `x` starts from a value larger than `2*y - 1`, it will eventually become negative and the loop will terminate.",
                    "- The loop condition is `x >= 0 && z == 1`.\n- The loop variant is `x`.\n- The variables live at the loop head are `x`, `y`, and `z`.\n\nLet's analyze the loop body:\n- `x` is decreased by `2*y - 1` in each iteration.\n- `y` and `z` are not updated inside the loop.\n\nWe can conclude from the loop body that:\n- `x` is always decreasing in each iteration, as long as `y` is not negative.\n- `y` and `z` stay the same in each iteration.\n\nNow we can write the loop invariants:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) == y;\n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant y >= 0 ==> x >= -1;\n    loop invariant z == 1;\n*/\n```\nThe first invariant `x` is non-increasing in each iteration. \n\nThe second and third invariants ensure that `y` and `z` remain the same in each iteration.\n\nThe fourth invariant bounds `x` from below, and it is valid if `y` is non-negative.\n\nThe fifth invariant ensures that `z` is always 1, as indicated by the loop condition."
                ],
                "inductive_invariants": "loop invariant i1: z == \\at(z, LoopEntry);\nloop invariant i2: y == \\at(y, LoopEntry);\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i9: 2*y < z ==> \\at(x, LoopEntry) >= 2*\\at(y, LoopEntry) - 1;\nloop invariant i10: \\at(y, LoopEntry) == y;\nloop invariant i11: \\at(z, LoopEntry) == z;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint z = unknown_int();\n\tif (2*y < z) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: z == \\at(z, LoopEntry);\nloop invariant i2: y == \\at(y, LoopEntry);\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i6: \\at(x, LoopEntry) >= x;\nloop invariant i9: 2*y < z ==> \\at(x, LoopEntry) >= 2*\\at(y, LoopEntry) - 1;\nloop invariant i10: \\at(y, LoopEntry) == y;\nloop invariant i11: \\at(z, LoopEntry) == z;\nloop variant x;\n*/\nwhile (x >= 0 && z == 1) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant z == \\at(z, LoopEntry) is inductive.\nloop invariant y == \\at(y, LoopEntry) is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant 2*y < z ==> \\at(x, LoopEntry) >= 2*\\at(y, LoopEntry) - 1 is inductive.\nloop invariant \\at(y, LoopEntry) == y is inductive.\nloop invariant \\at(z, LoopEntry) == z is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 1.6521739130434783
    }
}