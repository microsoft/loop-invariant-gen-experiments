{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x;\n\tx = unknown_int();\n\twhile (x != 0) {\n\t\tif (x > 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x > 0 ? x : -x"
            ],
            [
                "abs(x)"
            ],
            [
                "(x < 0) ? -x : x"
            ],
            [
                "(x >= 0 ? x : -x)"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x;\n\tx = unknown_int();\n\twhile (x != 0) {\n\t\tif (x > 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the starting values or constraints for the variables that are live at the loop head. In this case, the only variable we are concerned about is `x`, which has an unknown starting value from the `unknown_int()` function.\n\nNow, let's analyze the loop body. The loop will continue executing as long as `x` is not equal to 0. Inside the loop, the value of `x` either decreases by 1 (if `x > 0`) or increases by 1 (if `x < 0`).\n\nWe can define a ranking function that is based on the absolute value of `x`. The absolute value of `x` will always be positive as long as the loop is executing, and it will decrease with every iteration of the loop.\n\nSo, the ranking function is the absolute value of `x`, which can be expressed using the ternary operator in ACSL syntax:\n\n```\n/*@\n    loop variant x > 0 ? x : -x;\n*/\n```\n\nThis ranking function is valid because it is always positive while the loop is executing (since `x != 0`) and decreases with every iteration of the loop (since `x` either increases or decreases by 1 in each iteration).",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n   - x is an integer with an unknown initial value.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop body has two branches: when x > 0, it decreases x by 1, and when x <= 0, it increases x by 1.\n   - This means that the absolute value of x is decreasing with every iteration of the loop.\n   - Since the loop continues executing as long as x is not equal to 0, the absolute value of x is positive during the execution of the loop.\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\n```\n/*@\n    loop variant x > 0 ? x : -x;\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration of the loop, and it is positive while the loop is executing.",
            "1. The loop starts with the condition `while (x != 0)`, which means the loop continues executing as long as `x` is not equal to 0.\n2. Inside the loop, we have two cases:\n   a. If `x > 0`, then `x` is decreased by 1.\n   b. If `x <= 0`, then `x` is increased by 1.\n3. The value of `x` is always changing in the loop body. When `x > 0`, it gets closer to 0, and when `x <= 0`, it also gets closer to 0.\n\nNow, we need to find an expression involving `x` that decreases with every iteration and is positive while the loop is executing.\n\nLet's consider the absolute value of `x` as the ranking function:\n\n```\n/*@\n    loop variant abs(x);\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `abs(x)` is always positive while the loop is executing, as `x` is never equal to 0 inside the loop.\n2. The value of `abs(x)` decreases with every iteration, as `x` approaches 0 regardless of whether it is positive or negative.\n\nThus, the ranking function `abs(x)` helps prove that the loop must terminate.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nIn this case, the variable `x` is live at the loop head, and its initial value is obtained from the `unknown_int()` function. We have no constraints on the initial value of `x`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, `x` is either decremented by 1 (`x = x - 1`) if `x > 0`, or incremented by 1 (`x = x + 1`) if `x < 0`. The loop continues executing until `x` becomes 0.\n\nA valid ranking function for this loop is the absolute value of `x`. As the loop iterates, the value of `x` moves closer to 0, either by decrementing or incrementing. The absolute value of `x` will always be positive while the loop is executing and will decrease with each iteration.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (x < 0) ? -x : x;\n*/\n```",
            "First, let's identify the variables that are live at the loop head. In this case, the variable `x` is live at the loop head.\n\nNow, let's analyze the loop body. In the loop body, the value of `x` is either decreased by 1 if it is positive, or increased by 1 if it is negative.\n\nSince we want the ranking function to decrease with every iteration, we can use the absolute value of `x` as the ranking function. The ranking function will be positive as long as `x` is not equal to 0, which is the loop termination condition.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (x >= 0 ? x : -x);\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x > 0 ? x : -x']": {
                "variant": [
                    "x > 0 ? x : -x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0 ==> \\at(x, LoopEntry) > x;\n    loop invariant x < 0 ==> \\at(x, LoopEntry) < x;\n*/",
                    "/*@ \n    loop invariant 0 <= \\at(x, LoopEntry);\n    loop invariant x >= -1;\n    loop invariant x <= 1;\n*/",
                    "/*@ \n    loop invariant (x > 0) ==> (x < \\at(x, LoopEntry) + 1);\n    loop invariant (x < 0) ==> (x > \\at(x, LoopEntry) - 1);\n    loop invariant (x > 0) ==> (x <= \\at(x, LoopEntry));\n    loop invariant (x < 0) ==> (x >= \\at(x, LoopEntry));\n*/",
                    "/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant (x > 0) ==> (x == \\at(x, LoopEntry) - 1);\n    loop invariant (x < 0) ==> (x == \\at(x, LoopEntry) + 1);\n*/",
                    "/*@ \n    loop invariant x >= 0 ==> x == \\at(x, LoopEntry) - 1;\n    loop invariant x < 0 ==> x == \\at(x, LoopEntry) + 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x;\n\tx = unknown_int();\n\twhile (x != 0) {\n\t\tif (x > 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x > 0 ? x : -x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the initial values and constraints of the variables live at the loop head:\n- `x` is initialized with an unknown integer value.\n\nNow, let's analyze the loop condition and body:\n- The loop condition is `x != 0`.\n- Inside the loop, if `x > 0`, then `x` is decreased by 1, otherwise, `x` is increased by 1.\n\nThe given ranking function is `(x > 0 ? x : -x)`. Let's find the loop invariants that support this ranking function:\n\n```\n/*@ \n    loop invariant x >= 0 ==> \\at(x, LoopEntry) > x;\n    loop invariant x < 0 ==> \\at(x, LoopEntry) < x;\n*/\n```\n\nThese loop invariants support the ranking function as they ensure that the value of `x` decreases when `x > 0` and increases when `x < 0`. This guarantees that the loop will eventually terminate when `x` reaches 0.",
                    "The loop condition is `x != 0`, and the given ranking function is `(x > 0 ? x : -x)`.\n\nWe will first find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination.\n\nThe loop invariants for this loop are:\n\n```\n/*@ \n    loop invariant 0 <= \\at(x, LoopEntry);\n    loop invariant x >= -1;\n    loop invariant x <= 1;\n*/\n```\n\nThese loop invariants satisfy the following conditions:\n\n1. They are true before the loop execution.\n2. They are maintained true in every iteration of the loop.\n3. They imply that the ranking function decreases with every iteration.\n\nThese loop invariants, along with the ranking function `(x > 0 ? x : -x)`, can be used to prove the termination of the loop in the given program.",
                    "First, let's analyze the given program and understand the loop condition, loop body, and the given ranking function.\n\nLoop condition: x != 0\nLoop body:\n    if (x > 0) {\n        x = x - 1;\n    } else {\n        x = x + 1;\n    }\nRanking function: (x > 0 ? x : -x)\n\nNow, let's find the loop invariants for this program:\n\n1. Before the loop execution:\n   - x can have any integer value.\n\n2. In every iteration of the loop:\n   - If x > 0, x decreases by 1.\n   - If x < 0, x increases by 1.\n   - x is always less than or equal to its value at the beginning of the loop.\n   - x is always greater than or equal to its value at the beginning of the loop minus one.\n\n3. After the loop termination:\n   - x is equal to 0.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant (x > 0) ==> (x < \\at(x, LoopEntry) + 1);\n    loop invariant (x < 0) ==> (x > \\at(x, LoopEntry) - 1);\n    loop invariant (x > 0) ==> (x <= \\at(x, LoopEntry));\n    loop invariant (x < 0) ==> (x >= \\at(x, LoopEntry));\n*/\n```",
                    "First, let's analyze the program and identify the loop, loop condition, and loop body.\n\nLoop condition: `x != 0`\n\nLoop body:\n```\nif (x > 0) {\n    x = x - 1;\n} else {\n    x = x + 1;\n}\n```\n\nGiven ranking function: `(x > 0 ? x : -x)`\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n1. `x` is always an integer, so it has a minimum value of `INT_MIN` and a maximum value of `INT_MAX`.\n2. At the beginning of the loop, `x` can be any integer value.\n3. In every iteration of the loop, if `x > 0`, then `x` decreases by 1. If `x < 0`, then `x` increases by 1.\n4. The loop terminates when `x == 0`.\n\nBased on these observations, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant (x > 0) ==> (x == \\at(x, LoopEntry) - 1);\n    loop invariant (x < 0) ==> (x == \\at(x, LoopEntry) + 1);\n*/\n```\n\nThese loop invariants support the given ranking function `(x > 0 ? x : -x)` and prove the termination of the loop.",
                    "First, let's note the constraints for the variables live at the loop head. The variable `x` is live at the loop head and can be any integer value.\n\nNow, let's analyze the loop body and the loop condition. The loop condition is `x != 0`. The given ranking function is `(x > 0 ? x : -x)`.\n\nNow, let's derive the loop invariants:\n\n1. Before the loop execution, `x` can have any integer value.\n2. In every iteration of the loop, if `x > 0`, then `x` decreases by 1, otherwise, `x` increases by 1.\n3. After the loop termination, `x` must be 0.\n\nThe loop invariants are as follows:\n\n```\n/*@ \n    loop invariant x >= 0 ==> x == \\at(x, LoopEntry) - 1;\n    loop invariant x < 0 ==> x == \\at(x, LoopEntry) + 1;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i6: (x > 0) ==> (x < \\at(x, LoopEntry) + 1);\nloop invariant i7: (x < 0) ==> (x > \\at(x, LoopEntry) - 1);\nloop invariant i8: (x > 0) ==> (x <= \\at(x, LoopEntry));\nloop invariant i9: (x < 0) ==> (x >= \\at(x, LoopEntry));",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x;\n\tx = unknown_int();\n\t/*@\nloop invariant i6: (x > 0) ==> (x < \\at(x, LoopEntry) + 1);\nloop invariant i7: (x < 0) ==> (x > \\at(x, LoopEntry) - 1);\nloop invariant i8: (x > 0) ==> (x <= \\at(x, LoopEntry));\nloop invariant i9: (x < 0) ==> (x >= \\at(x, LoopEntry));\nloop variant x > 0 ? x : -x;\n*/\nwhile (x != 0) {\n\t\tif (x > 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\tx = x + 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant (x > 0) ==> (x < \\at(x, LoopEntry) + 1) is inductive.\nloop invariant (x < 0) ==> (x > \\at(x, LoopEntry) - 1) is inductive.\nloop invariant (x > 0) ==> (x <= \\at(x, LoopEntry)) is inductive.\nloop invariant (x < 0) ==> (x >= \\at(x, LoopEntry)) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c"
        ],
        "skipped": [],
        "total": 65,
        "success_count": 90,
        "failure_count": 65,
        "success_rate": 1.3846153846153846
    }
}