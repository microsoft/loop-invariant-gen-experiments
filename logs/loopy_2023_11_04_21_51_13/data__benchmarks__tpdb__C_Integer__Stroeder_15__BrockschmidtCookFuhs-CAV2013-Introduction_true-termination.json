{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = 1;\n    while (x > 0) {\n        x = x - y;\n        y = y + 1;\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + y"
            ],
            [
                "x + y * (y - 1) / 2"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = 1;\n    while (x > 0) {\n        x = x - y;\n        y = y + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "Step 1: Identify the variables that are live at the loop head.\nIn this case, the live variables at the loop head are `x` and `y`.\n\nStep 2: Analyze the loop body and find a ranking function involving the variables in the loop body.\nIn the loop body, `x` decreases by `y` with every iteration, and `y` increases by 1. We can notice that the value of `x` decreases with every iteration, and the loop continues as long as `x > 0`.\n\nStep 3: Output the ranking function in one code block, in ACSL syntax.\nConsidering the constraints and the changes in the loop body, a valid ranking function for this loop would be `x`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "First, let's identify the variables that are live at the loop head and their initial values:\n- x: initially set to `unknown_int()`\n- y: initially set to 1\n\nNow, let's analyze the loop body:\n- x is decreased by y in every iteration: `x = x - y`\n- y is increased by 1 in every iteration: `y = y + 1`\n\nA possible ranking function is `x + y`.\n\nNow, let's check if the ranking function is decreasing and positive while the loop is executing:\n- In every iteration, `x` is decreased by `y`, and `y` is increased by 1, so the ranking function `x + y` decreases.\n- Since `x > 0` is the loop condition and `y` is positive, the ranking function `x + y` is positive while the loop is executing.\n\nThe ranking function for the loop in the given program is:\n\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "1. The loop starts with `while (x > 0)`, so the loop will continue executing as long as x is positive.\n\n2. In the loop body, we have:\n   ```\n   x = x - y;\n   y = y + 1;\n   ```\n\n3. We need to find a ranking function involving x and y that decreases with every iteration of the loop and is positive while the loop is executing.\n\nThe ranking function for this loop can be expressed as `x + y`. Let's explain why it is a valid ranking function:\n\n1. At the start of the loop, x is positive (due to the loop condition `x > 0`) and y is initialized to 1. Thus, the ranking function `x + y` is also positive.\n\n2. In each iteration of the loop, x decreases by y (`x = x - y`) and y increases by 1 (`y = y + 1`). This means that `x + y` will decrease in each iteration, as the decrease in x is larger than the increase in y.\n\nThe ranking function is:\n```\n/*@\n    loop variant x + y;\n*/\n```",
            "1. The starting values for the variables live at the loop head are:\n   - x = unknown_int()\n   - y = 1\n\n2. In the loop body, the variables are updated as follows:\n   - x = x - y\n   - y = y + 1\n\n3. We need to find a ranking function that involves the variables x and y, and is decreasing with every iteration of the loop while being positive.\n\nA suitable ranking function for this loop is:\n\n```\nx + y * (y - 1) / 2\n```\n\nExplanation:\n- In each iteration, x is decreased by y, and y is incremented by 1.\n- The ranking function represents the sum of an arithmetic series with the first term (x) and the common difference (y).\n- The sum of the arithmetic series formula is: n * (2 * a + (n - 1) * d) / 2, where 'n' is the number of terms, 'a' is the first term, and 'd' is the common difference.\n- In our case, 'n' is equal to 'y', 'a' is equal to 'x', and 'd' is equal to 'y - 1'.\n- The ranking function decreases with every iteration of the loop, and it is positive while the loop is executing.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y * (y - 1) / 2;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, we have two variables: `x` and `y`. `x` is initialized with an unknown integer value, and `y` is initialized with the value 1.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, `x` is decremented by `y` and `y` is incremented by 1. The loop continues executing as long as `x > 0`.\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nThe ranking function should involve `x` and `y`. Since `x` is decreasing and `y` is increasing, a suitable ranking function could be the difference between `x` and the sum of `y` and the old value of `x`. Thus, the ranking function is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it decreases with every iteration of the loop (as `x` is decreased and `y` is increased), and its value is positive while the loop is executing (as the loop condition is `x > 0`)."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(y, LoopEntry) > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= 0 ==> \\at(x, LoopExit) <= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant x >= \\at(x, LoopEntry) - y;\n    loop invariant y == \\at(y, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) <= y;\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant y > 0;\n    loop invariant x >= 0;\n    loop invariant x+y > \\at(x, LoopEntry);\n    loop invariant \\at(y, LoopEntry) == 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = 1;\n    while (x > 0) {\n        x = x - y;\n        y = y + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "Firstly, we note that the variables `x` and `y` are live at the loop head. The variable `x` starts from an unknown integer value, and `y` starts from 1.\n\nThe loop condition is `x > 0`.\n\nThe given ranking function for the loop is `(x)`, which is expected to decrease with every iteration.\n\nNow, we have to find loop invariants that support the validity of the ranking function.\n\n(i) Before the loop execution, `y` is positive.\n\n(ii) In every iteration of the loop, `x` is decreasing and `y` is increasing.\n\n(iii) After the loop termination, `x` is less than or equal to 0.\n\nSo, the loop invariants that support the validity of the ranking function and prove the termination of the loop are:\n```\n/*@ \n    loop invariant \\at(y, LoopEntry) > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= 0 ==> \\at(x, LoopExit) <= 0;\n*/\n```",
                    "- The loop condition is \"x > 0\".\n- The ranking function is \"x\", which decreases with each iteration.\n- The variables that are live at the loop head are \"x\" and \"y\".\n\nLet's identify the loop invariants.\n\nBefore the loop execution:\n- The variable \"x\" can be any integer.\n- The variable \"y\" is 1.\n\nIn every iteration of the loop:\n- The value of \"x\" decreases.\n- The value of \"y\" increases.\n- The value of \"x\" is always greater than or equal to 0.\n\nAfter the loop termination:\n- The value of \"x\" is less than or equal to 0.\n- The value of \"y\" is the smallest integer such that \"x + y > 0\".\n\nOutput the loop invariants:\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant x >= \\at(x, LoopEntry) - y;\n    loop invariant y == \\at(y, LoopEntry) + 1;\n*/\n```",
                    "- The variables that are live at the loop head are **x** and **y**.\n- The loop condition is **x > 0**.\n- The loop variant is **x**, which is non-negative and decreases with every iteration of the loop.\n\nLet's analyze the loop body:\n- The variable **x** is decremented by **y** in every iteration of the loop.\n- The variable **y** is incremented by 1 in every iteration of the loop.\n\nNow, let's define the loop invariants:\n\nThe loop invariants are:\n- The value of **x** is non-negative.\n- The value of **y** is always positive.\n- The value of **x** at the loop entry is greater than or equal to the value of **x** in the current iteration.\n- The value of **y** at the loop entry is less than or equal to the value of **y** in the current iteration.\n\nHere are the loop invariants in code form:\n\n```c\n/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n*/\n```\nThese loop invariants imply that the loop variant **x** decreases with every iteration of the loop, thus proving the termination of the loop.",
                    "- The variables live at the loop head are x and y. \n- The loop condition is x > 0. \n- The ranking function is (x).\n- The loop body decreases x and increases y in every iteration.\n\nLet's find the loop invariants.\n\n- Before the loop execution, x is non-deterministic and y is 1. \n- In every iteration of the loop, x is decreased and y is increased.\n- After the loop termination, x is no more than 0.\n\nFrom these, we can form the following loop invariants.\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) <= y;\n    loop invariant y >= 1;\n*/\n```\nThe first loop invariant expresses that the value of x at the loop entry is always greater than or equal to the value of x at any point in the loop, implying that x decreases with every iteration. \nThe second loop invariant expresses that the value of y at the loop entry is always less than or equal to the value of y at any point in the loop, implying that y increases with every iteration.\nThe third loop invariant expresses that y is always greater than or equal to 1, which is always true as y is initialized to 1 and only increased.",
                    "The loop in the program starts with x taking a value from the function unknown_int() and y initialized as 1. During each iteration of the loop, x decreases by the value of y and y increases by 1. The loop continues until x is no longer greater than 0.\n\nWe have the ranking function (x), which is a function that is non-negative and strictly decreases with each iteration of the loop. This is because x decreases by y (which is always at least 1) in every iteration of the loop.\n\nWe can establish the following loop invariants:\n\n- Before the loop execution, x takes any value and y is 1.\n- In every iteration of the loop, x decreases by y and y increases by 1.\n- After the loop termination, x is no longer positive.\n\nHere are the loop invariants in ACSL:\n\n```\n/*@ \n    loop invariant y > 0;\n    loop invariant x >= 0;\n    loop invariant x+y > \\at(x, LoopEntry);\n    loop invariant \\at(y, LoopEntry) == 1;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: \\at(y, LoopEntry) > 0;\nloop invariant i2: x <= \\at(x, LoopEntry);\nloop invariant i3: y >= \\at(y, LoopEntry);\nloop invariant i6: y > 0;\nloop invariant i9: \\at(x, LoopEntry) >= x;\nloop invariant i10: \\at(y, LoopEntry) <= y;\nloop invariant i11: y >= 1;\nloop invariant i13: \\at(y, LoopEntry) == 1;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = 1;\n    /*@\nloop invariant i1: \\at(y, LoopEntry) > 0;\nloop invariant i2: x <= \\at(x, LoopEntry);\nloop invariant i3: y >= \\at(y, LoopEntry);\nloop invariant i6: y > 0;\nloop invariant i9: \\at(x, LoopEntry) >= x;\nloop invariant i10: \\at(y, LoopEntry) <= y;\nloop invariant i11: y >= 1;\nloop invariant i13: \\at(y, LoopEntry) == 1;\nloop variant x;\n*/\nwhile (x > 0) {\n        x = x - y;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(y, LoopEntry) > 0 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y >= \\at(y, LoopEntry) is inductive.\nloop invariant y > 0 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant \\at(y, LoopEntry) <= y is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant \\at(y, LoopEntry) == 1 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 40,
        "success_count": 72,
        "failure_count": 40,
        "success_rate": 1.8
    }
}