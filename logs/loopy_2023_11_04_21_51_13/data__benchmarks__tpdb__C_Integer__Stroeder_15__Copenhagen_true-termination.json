{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y, oldx;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 0) {\n\t\toldx = x;\n\t\tx = y - 1;\n\t\ty = oldx - 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x + y + 2"
            ],
            [
                "x + y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y, oldx;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 0) {\n\t\toldx = x;\n\t\tx = y - 1;\n\t\ty = oldx - 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head. These are `x` and `y`. We also have `oldx` in the loop body, which stores the old value of `x` before updating it in each iteration.\n\nNow, we need to analyze the loop body and find a ranking function involving the variables in the loop body. In each iteration, the value of `x` is updated to `y - 1`, and the value of `y` is updated to `oldx - 1`.\n\nLet's define the ranking function as `v = x + y + 2`. \n\nNow, let's check if this function is decreasing with every iteration of the loop and if it is positive while the loop is executing.\n\nBefore the loop:\n```\nv = x + y + 2\n```\n\nDuring the loop:\n```\nv' = (y - 1) + (oldx - 1) + 2\n```\n\nSince `oldx = x`, we have:\n```\nv' = y + x\n```\n\nWe can see that the ranking function `v` is greater than `v'` by 2 in every iteration, which means it is decreasing with every iteration of the loop. Moreover, as long as `x >= 0` and `y >= 0`, the ranking function `v` will be positive.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y + 2;\n*/\n```",
            "First, let's identify the variables that are live at the loop head:\n\n- `x` and `y` are both live, as they are the loop conditions. Both are initially set to `unknown_int()`.\n\nNow, let's analyze the loop body:\n\n- `oldx` is assigned the value of `x`.\n- `x` is assigned the value of `y - 1`.\n- `y` is assigned the value of `oldx - 1`.\n\nWe can see that in each iteration of the loop, both `x` and `y` are decreased by 1. Therefore, a possible ranking function for this loop is `x + y`. Let's check if this ranking function is valid:\n\n1. The ranking function is positive while the loop is executing because both `x` and `y` are non-negative.\n2. The ranking function decreases with every iteration of the loop since both `x` and `y` are decreased by 1 in each iteration.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThis ranking function is valid because it satisfies both requirements: it is positive while the loop is executing, and it decreases with every iteration of the loop.",
            "First, let's identify the variables that are live at the loop head:\n- `x`\n- `y`\n\nNow, let's analyze the loop body:\n- `oldx = x;`\n- `x = y - 1;`\n- `y = oldx - 1;`\n\nWe can observe that in each iteration, both `x` and `y` are decreased by 1. The loop continues as long as both `x` and `y` are non-negative. \n\nA suitable ranking function for this loop is the sum of `x` and `y`. \n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n*/\n``` \n\nThis ranking function is valid because it decreases with every iteration of the loop (as both `x` and `y` are decreased by 1), and it is positive as long as the loop is executing (since `x` and `y` are both non-negative).",
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - x and y are assigned unknown integers at the start of the program.\n   - x and y must be non-negative for the loop to execute.\n\n2. Analyze the loop body:\n   - oldx takes the value of x.\n   - x is assigned the value of y - 1.\n   - y is assigned the value of oldx - 1.\n\nNow, let's find a ranking function involving the variables in the loop body. Since we want the loop to terminate, we need a function that decreases with every iteration and is positive while the loop is executing.\n\nThe ranking function for the given loop is:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThis is a valid ranking function because:\n\n- The value of x + y is always non-negative while the loop is executing (x and y are non-negative).\n- In each iteration, x takes the value of y - 1, and y takes the value of oldx - 1. Since oldx = x, the new value of x + y is (y - 1) + (x - 1) = x + y - 2, which is less than the previous value of x + y. This means that x + y decreases with each iteration.\n- The loop will eventually terminate when x and/or y become negative.",
            "1. Identify the loop head and the variables that are live at the loop head. In this case, the loop head is the `while (x >= 0 && y >= 0)` condition, and the live variables are `x` and `y`.\n\n2. Analyze the loop body to understand how the variables `x` and `y` change in each iteration. Inside the loop, we have:\n```\noldx = x;\nx = y - 1;\ny = oldx - 1;\n```\n\n3. Find a ranking function that decreases with each iteration and remains positive while the loop is executing. In this case, a suitable ranking function is `x + y`.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThis is a valid ranking function because the sum of `x` and `y` decreases with every iteration (since `x` and `y` both decrease by 1 in each iteration). Additionally, the ranking function remains positive while the loop is executing, as both `x` and `y` must be non-negative for the loop to continue."
        ],
        "simple_variant_log": {
            "success": true,
            "['x + y + 2']": {
                "variant": [
                    "x + y + 2"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n    loop invariant (x == \\at(x, LoopEntry) ==> y < \\at(y, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= x <= \\at(x, LoopEntry);\n    loop invariant 0 <= y <= \\at(y, LoopEntry);\n    loop invariant x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;\n*/",
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant \\at(x, LoopEntry) >= -1;\n    loop invariant \\at(y, LoopEntry) >= -1;\n    loop invariant x <= \\at(x, LoopEntry) + 1;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant oldx == \\at(x, LoopEntry) - 1;\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 1;\n    loop invariant y <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant 0 <= x <= INT_MAX;\n    loop invariant 0 <= y <= INT_MAX;\n    loop invariant \\at(x, LoopEntry) >= 0 && \\at(y, LoopEntry) >= 0;\n    loop invariant x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y, oldx;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 && y >= 0) {\n\t\toldx = x;\n\t\tx = y - 1;\n\t\ty = oldx - 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + y + 2)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the loop head and body:\n\n- Loop head: `x >= 0 && y >= 0`\n- Loop body: \n  ```\n  oldx = x;\n  x = y - 1;\n  y = oldx - 1;\n  ```\n- Ranking function: `x + y + 2`\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution and in every iteration of the loop, both `x` and `y` are non-negative.\n2. In every iteration of the loop, the value of `x` is decreasing, or if it remains the same, the value of `y` is decreasing.\n3. After the loop termination, either `x` or `y` should be negative.\n\nConsidering these points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x + y <= \\at(x + y, LoopEntry);\n    loop invariant (x == \\at(x, LoopEntry) ==> y < \\at(y, LoopEntry));\n*/\n```",
                    "First, let's identify the values and constraints of the variables live at the loop head:\n\n- x and y are initialized with unknown_int(), which can return any integer value.\n- oldx is uninitialized and will be assigned the value of x in the loop body.\n\nNow let's analyze the loop condition and body:\n\n- The loop condition is (x >= 0 && y >= 0), meaning both x and y must be non-negative for the loop to continue.\n- The loop body updates the values of x and y as follows:\n  - oldx = x;\n  - x = y - 1;\n  - y = oldx - 1;\n\nThe given ranking function is (x + y + 2). We need to find loop invariants that support this ranking function and prove the loop's termination. Here are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= x <= \\at(x, LoopEntry);\n    loop invariant 0 <= y <= \\at(y, LoopEntry);\n    loop invariant x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution, since x and y are initialized with unknown_int() and can have any integer values, but the loop condition ensures they are non-negative,\n(ii) in every iteration of the loop, as x and y are updated with non-increasing values (x = y - 1; y = oldx - 1;), and\n(iii) after the loop termination, since the loop terminates when x or y become negative, making the ranking function (x + y + 2) decrease in every iteration.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x and y are assigned unknown_int() values, so there are no constraints on their starting values.\n\nNow, let's analyze the loop condition and loop body:\n- The loop condition is (x >= 0 && y >= 0).\n- In the loop body, oldx is assigned the value of x, then x is assigned (y - 1), and y is assigned (oldx - 1).\n\nGiven this information, we can output the loop invariants that support the loop variant (x + y + 2):\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant \\at(x, LoopEntry) >= -1;\n    loop invariant \\at(y, LoopEntry) >= -1;\n    loop invariant x <= \\at(x, LoopEntry) + 1;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/\n```\n\nThese loop invariants imply that the ranking function (x + y + 2) decreases with every iteration of the loop, ensuring its termination.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are assigned unknown integers, so they can be any integer value initially.\n\nNow, let's analyze the loop body, loop condition, and given ranking function:\n\n- Loop condition: x >= 0 && y >= 0\n- Loop body: \n  - oldx = x;\n  - x = y - 1;\n  - y = oldx - 1;\n- Given ranking function: (x + y + 2)\n\nNow, let's output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant oldx == \\at(x, LoopEntry) - 1;\n    loop invariant x <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 1;\n    loop invariant y <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 1;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination. Together, they imply that the ranking function (x + y + 2) decreases with every iteration and the loop terminates.",
                    "First, let's analyze the starting values and constraints for the variables that are live at the loop head. The variables x and y are live at the loop head and are assigned by unknown_int(), so we cannot determine their exact starting values. However, since x and y are integers, they are bounded by the minimum and maximum values for integers.\n\nNext, let's consider the loop condition and the given ranking function. The loop condition is (x >= 0 && y >= 0), and the given ranking function is (x + y + 2).\n\nNow let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant 0 <= x <= INT_MAX;\n    loop invariant 0 <= y <= INT_MAX;\n    loop invariant \\at(x, LoopEntry) >= 0 && \\at(y, LoopEntry) >= 0;\n    loop invariant x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i3: x + y <= \\at(x + y, LoopEntry);\nloop invariant i7: x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y, oldx;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\nloop invariant i3: x + y <= \\at(x + y, LoopEntry);\nloop invariant i7: x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2;\nloop variant x + y + 2;\n*/\nwhile (x >= 0 && y >= 0) {\n\t\toldx = x;\n\t\tx = y - 1;\n\t\ty = oldx - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant x + y <= \\at(x + y, LoopEntry) is inductive.\nloop invariant x + y + 2 <= \\at(x, LoopEntry) + \\at(y, LoopEntry) + 2 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c"
        ],
        "skipped": [],
        "total": 66,
        "success_count": 92,
        "failure_count": 66,
        "success_rate": 1.393939393939394
    }
}