{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "y"
            ],
            [
                "abs(x - y)"
            ],
            [
                "x - y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x is an integer with an unknown initial value.\n- y is an integer with an unknown initial value.\n- tmp is an integer with an unknown initial value.\n\nNow, let's analyze the loop body:\n- The loop executes while x > y.\n- In the loop body, tmp is assigned the value of x, x is assigned the value of y, and y is assigned the value of tmp.\n\nWe can see that in each iteration of the loop, the values of x and y are being swapped. So, we need to find a ranking function that decreases with each iteration and is positive while the loop is executing.\n\nA possible ranking function is `y`:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nExplanation:\n- Since the loop executes while x > y, the value of y is always positive while the loop is executing.\n- As x and y are being swapped in each iteration, the value of y in the next iteration will be the previous value of x, which is greater than the current value of y (since x > y). So, the value of y is decreasing with each iteration.\n\nThus, y is a valid ranking function for the loop in the given program.",
            "First, let's analyze the loop.\n\nThe loop condition is `x > y`, which means the loop will continue executing as long as `x` is greater than `y`. Inside the loop, the values of `x` and `y` are swapped using the `tmp` variable.\n\nNow, let's find the ranking function.\n\nSince the values of `x` and `y` are being swapped, the difference between `x` and `y` will decrease with each iteration of the loop. Thus, the ranking function should involve the absolute difference between `x` and `y`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant abs(x - y);\n*/\n```\n\nThis ranking function is valid because it is positive (as long as `x > y`) and decreases with every iteration of the loop.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and tmp are all unknown integers. There are no specific constraints on their initial values.\n\nNow, let's analyze the loop body:\n1. tmp = x;\n2. x = y;\n3. y = tmp;\n\nIn each iteration, x and y are swapped. The loop continues executing as long as x > y.\n\nNow, we can find a ranking function involving the variables in the loop body. The ranking function should decrease with every iteration and should be positive while the loop is executing.\n\nA suitable ranking function for this loop is `y`. The reason is that in each iteration, x and y are swapped, and the loop continues as long as x > y. So, y will always be positive while the loop is executing, and it will decrease with every iteration since x > y initially and they get swapped.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head. In this case, `x`, `y`, and `tmp` are live, and their values are initially unknown.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body. The loop condition is `x > y`, and in the loop body, `x` and `y` swap their values using the `tmp` variable.\n\nThe ranking function for this loop is `x - y`, because:\n\n1. It is an expression involving the variables in the loop body.\n2. It is positive while the loop is executing since `x > y`.\n3. It decreases with every iteration of the loop, as `x` and `y` swap their values, and `x` is always smaller than `y` after swapping.\n\nNow, output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```",
            "1. Starting values and constraints for the variables at the loop head:\n   x, y, and tmp are initialized with unknown values. The loop continues executing as long as x > y.\n\n2. Analyzing the loop body:\n   During each iteration, the values of x and y are swapped using the tmp variable. \n   So, after each iteration, the value of x becomes the previous value of y and the value of y becomes the previous value of x.\n\nNow let's find the ranking function."
        ],
        "simple_variant_log": {
            "success": true,
            "['y']": {
                "variant": [
                    "y"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(y, LoopEntry) <= x;\n    loop invariant \\at(x, LoopEntry) >= y;\n    loop invariant \\at(y, LoopEntry) <= tmp;\n    loop invariant \\at(tmp, LoopEntry) >= y;\n*/",
                    "/*@ \n    loop invariant \\at(y, LoopEntry) <= y;\n    loop invariant x == \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) <= \\at(y, LoopEntry);\n    loop invariant y >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) == \\at(tmp, LoopCurrent) ==> \\at(y, LoopEntry) == \\at(x, LoopCurrent);\n    loop invariant \\at(y, LoopEntry) == \\at(x, LoopCurrent) ==> \\at(tmp, LoopEntry) == \\at(y, LoopCurrent);\n    loop invariant x <= y;\n*/",
                    "/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant \\typeof(tmp) == \\typeof(int);\n    loop invariant x <= y;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(y)**, for the loop in the program above. Let's think step by step."
                    },
                    "- Make note of the starting values or constraints for the variables that are live at the loop head.\n\nIn the program given, the variables x, y, and tmp are live at the loop head. All three variables are initialized with the function unknown_int(), which can return any integer value. So, we can't make any assumptions about the starting values of these variables.\n\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n\nThe loop condition is `x > y` and the given ranking function is **y**.\n\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\n(i) Before the loop execution, the values of x, y, and tmp can be any integer as they are assigned values from the function unknown_int().\n\n(ii) In every iteration of the loop, the value of y increases as it is assigned the value of x, and the value of x decreases as it is assigned the value of y.\n\n(iii) After the loop termination, the value of x is less than or equal to y. \n\nSo, the loop invariants can be:\n\n```\n/*@ \n    loop invariant \\at(y, LoopEntry) <= x;\n    loop invariant \\at(x, LoopEntry) >= y;\n    loop invariant \\at(y, LoopEntry) <= tmp;\n    loop invariant \\at(tmp, LoopEntry) >= y;\n*/\n```\n\nThese loop invariants imply that the ranking function decreases with every iteration, as the value of y (ranking function) is always less than or equal to x and tmp at the beginning of the loop, and in every iteration, y is assigned the value of x, and x is assigned the value of y. After the loop termination, the value of x is less than or equal to y. So, the ranking function decreases with every iteration, proving the termination of the loop.",
                    "Let's first analyze the program and the loop:\n- The loop runs as long as x is greater than y.\n- In the loop body, the values of x and y are swapped.\n- The ranking function is y, which increases with every iteration of the loop.\n- The ranking function y is always non-negative.\n\nNow let's derive the loop invariants:\n- Before the loop execution, y can be any integer.\n- In every iteration of the loop, y is equal to x at the beginning of the iteration.\n- After the loop termination, x is no longer greater than y.\n\nThus the loop invariants are:\n```\n/*@ \n    loop invariant \\at(y, LoopEntry) <= y;\n    loop invariant x == \\at(y, LoopEntry);\n*/\n```\nThese loop invariants imply that the ranking function y increases with every iteration. This proves the termination of the loop.",
                    "First, we note that the variables `x`, `y`, and `tmp` are live at the loop head. \n\nThe loop condition is `x > y`.\n\nThe loop variant is `y`.\n\nThe loop body swaps the values of `x` and `y` if `x > y`.\n\nThe loop invariant that supports the validity of the loop variant and proves the termination of the loop are:\n- `x` is always less than or equal to `y` at the beginning and end of the loop, and in every iteration of the loop\n- `y` is non-negative and decreases with every iteration of the loop\n\nThe above invariants can be expressed in ACSL annotations for loops as follows:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) <= \\at(y, LoopEntry);\n    loop invariant y >= 0;\n    loop invariant y <= \\at(y, LoopEntry);\n*/\n```",
                    "Firstly, note the variables that are live at the loop head: **x**, **y**, **tmp**.\n\nThe loop condition is **x > y**. \n\nThe ranking function is **y**. \n\nNow, let's identify the loop invariants.\n\nBefore the loop execution, **x** and **y** can be any integer values, and **tmp** is also an arbitrary integer value. \n\nDuring each iteration of the loop, if **x > y**, **tmp** takes the value of **x**, **x** takes the value of **y**, and **y** takes the value of **tmp** (which was originally **x**). This implies that the values of **x** and **y** are swapped if **x > y**. \n\nAfter the loop, **x <= y**.\n\nTherefore, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) == \\at(tmp, LoopCurrent) ==> \\at(y, LoopEntry) == \\at(x, LoopCurrent);\n    loop invariant \\at(y, LoopEntry) == \\at(x, LoopCurrent) ==> \\at(tmp, LoopEntry) == \\at(y, LoopCurrent);\n    loop invariant x <= y;\n*/\n```",
                    "The loop header has the variables `x`, `y`, and `tmp` live. The loop condition is `x > y`.\n\nThe loop variant is `y`, which is non-negative and increases with each iteration of the loop.\n\nThe loop body swaps the values of `x` and `y` if `x` is greater than `y`.\n\nNow, let's write the loop invariants.\n\nBefore the loop execution, we can only say that `x`, `y`, and `tmp` are integers.\n\nIn every iteration of the loop, if `x > y`, `x` and `y` are swapped. So, we have the invariant that `x` is always less than or equal to `y`.\n\nAfter the loop termination, `x` is not greater than `y`, which means `x <= y`.\n\nThe loop invariants are:\n```\n/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant \\typeof(tmp) == \\typeof(int);\n    loop invariant x <= y;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i5: \\at(y, LoopEntry) <= y;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\nloop invariant i5: \\at(y, LoopEntry) <= y;\nloop variant y;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant \\at(y, LoopEntry) <= y is inductive.\n\n\nLoop variant is Invalid."
                    }
                ],
                "success": false
            },
            "['abs(x - y)']": {
                "variant": [
                    "abs(x - y)"
                ],
                "error": "All variant candidates have annotation errors",
                "success": false
            },
            "['x - y']": {
                "variant": [
                    "x - y"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > y && x < \\at(x, LoopEntry);\n    loop invariant y >= x ==> \\at(x, LoopEntry) <= y;\n*/",
                    "/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant y >= x ==> \\at(y, LoopEntry) > \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= y ==> (x == \\at(x, LoopEntry) && y == \\at(y, LoopEntry));\n    loop invariant x > y ==> (x == \\at(y, LoopEntry) && y == \\at(x, LoopEntry));\n*/",
                    "/*@ \n    loop invariant x >= y ==> x >= \\at(x, LoopEntry);\n    loop invariant x >= y ==> y <= \\at(y, LoopEntry);\n    loop invariant x <= y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant x <= y ==> \\at(x, LoopEntry) <= \\at(y, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    while (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x - y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and tmp are live variables, but their initial values are unknown since they are assigned by unknown_int() function.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > y\n- Ranking function: (x - y)\n\nNow we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > y && x < \\at(x, LoopEntry);\n    loop invariant y >= x ==> \\at(x, LoopEntry) <= y;\n*/\n```\n\nExplanation:\n- If x >= y, then it implies that at the beginning of the loop, x > y (loop condition) and x has decreased (x < \\at(x, LoopEntry)) after the loop iterations.\n- If y >= x, then it implies that at the beginning of the loop, x was less than or equal to y (\\at(x, LoopEntry) <= y). In this case, the loop will not execute, and the termination is guaranteed.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and tmp are initialized with unknown_int(), which can return any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > y\n- Ranking function: (x - y)\n\nNext, we need to output loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant y >= x ==> \\at(y, LoopEntry) > \\at(x, LoopEntry);\n*/\n```\n\nExplanation:\n- If x >= y at any point in the loop, then the value of x at the loop entry must be greater than the value of y at the loop entry. This ensures that the ranking function (x - y) decreases in every iteration.\n- If y >= x at any point in the loop, then the value of y at the loop entry must be greater than the value of x at the loop entry. This also ensures that the ranking function (x - y) decreases in every iteration.",
                    "First, let's analyze the starting values and constraints for the variables live at the loop head.\n\n- x, y, and tmp are initialized with unknown_int(), which means they can be any integer value.\n\nNow, let's analyze the loop body and the given ranking function (x - y).\n\n- The loop condition is (x > y).\n- In the loop body, the values of x and y are swapped using the tmp variable.\n- The ranking function is (x - y), which should decrease with every iteration of the loop.\n\nNow, let's derive the loop invariants:\n\n- Before the loop execution: x and y can have any integer values.\n- In every iteration of the loop: \n    - If x > y, then the values of x and y are swapped, and the ranking function (x - y) decreases.\n    - If x <= y, the loop terminates.\n- After the loop termination: x <= y.\n\nTaking all of these invariants into account, we get the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant x <= y ==> (x == \\at(x, LoopEntry) && y == \\at(y, LoopEntry));\n    loop invariant x > y ==> (x == \\at(y, LoopEntry) && y == \\at(x, LoopEntry));\n*/\n```\n\nThese loop invariants support the validity of the ranking function (x - y) and prove the termination of the loop.",
                    "First, let's note down the starting values or constraints for the variables that are live at the loop head.\n\n- x, y, and tmp are all initialized with unknown_int(), which means they can have any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: x > y\n- Ranking function: (x - y)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n1. Before the loop execution, the variables x and y can have any integer value, and the loop condition is x > y.\n2. In every iteration of the loop, x and y swap their values, so the difference between x and y decreases.\n3. After the loop termination, x <= y.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant x >= y ==> x >= \\at(x, LoopEntry);\n    loop invariant x >= y ==> y <= \\at(y, LoopEntry);\n    loop invariant x <= y ==> x == \\at(y, LoopEntry);\n    loop invariant x <= y ==> y == \\at(x, LoopEntry);\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and tmp are all assigned unknown_int() values, which means they can be any integer value.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x > y\n- Ranking function: (x - y)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant x <= y ==> \\at(x, LoopEntry) <= \\at(y, LoopEntry);\n*/\n```\n\nExplanation:\n1. If x >= y at the beginning of the loop, then x will always be greater than y after every iteration, which implies that the initial value of x is greater than the initial value of y.\n2. If x <= y at the beginning of the loop, then x will always be less than or equal to y after every iteration, which implies that the initial value of x is less than or equal to the initial value of y."
                ],
                "inductive_invariants": "loop invariant i2: y >= x ==> \\at(x, LoopEntry) <= y;\nloop invariant i6: y >= \\at(y, LoopEntry);\nloop invariant i9: x >= y ==> x >= \\at(x, LoopEntry);\nloop invariant i10: x >= y ==> y <= \\at(y, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, tmp;\n    x = unknown_int();\n    y = unknown_int();\n    tmp = unknown_int();\n    /*@\nloop invariant i2: y >= x ==> \\at(x, LoopEntry) <= y;\nloop invariant i6: y >= \\at(y, LoopEntry);\nloop invariant i9: x >= y ==> x >= \\at(x, LoopEntry);\nloop invariant i10: x >= y ==> y <= \\at(y, LoopEntry);\nloop variant x - y;\n*/\nwhile (x > y) {\n        tmp = x;\n        x = y;\n        y = tmp;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= x ==> \\at(x, LoopEntry) <= y is inductive.\nloop invariant y >= \\at(y, LoopEntry) is inductive.\nloop invariant x >= y ==> x >= \\at(x, LoopEntry) is inductive.\nloop invariant x >= y ==> y <= \\at(y, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c"
        ],
        "skipped": [],
        "total": 94,
        "success_count": 147,
        "failure_count": 94,
        "success_rate": 1.5638297872340425
    }
}