{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int K, x;\n    K = unknown_int();\n    x = unknown_int();\n    while (x != K) {\n        if (x > K) {\n            x = x - 1;\n        } else {\n            x = x + 1;\n        }\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "(x>K ? x-K : K-x)"
            ],
            [
                "(x > K ? x - K : K - x)"
            ],
            [
                "(x>K) ? x-K : K-x"
            ],
            [
                "(x > K) ? (x - K) : (K - x)"
            ],
            [
                "abs(x-K)"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int K, x;\n    K = unknown_int();\n    x = unknown_int();\n    while (x != K) {\n        if (x > K) {\n            x = x - 1;\n        } else {\n            x = x + 1;\n        }\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "- The variables that are live at the loop head are `x` and `K`.\n- The loop condition `x != K` indicates that the loop will terminate when `x` equals `K`. \n- Inside the loop, depending on whether `x` is greater than `K` or not, `x` is either decreased or increased by 1.\n\nSo, the ranking function can be the absolute difference between `x` and `K`, because this value is always decreasing (as `x` is getting closer to `K` in each iteration) and is always positive while the loop is executing.\n\nThe ranking function in ACSL syntax is:\n```\n/*@\n    loop variant (x>K ? x-K : K-x);\n*/\n```",
            "The loop in this program continues executing as long as `x` is not equal to `K`. \n\nDuring each iteration of the loop, the value of `x` is either incremented or decremented by 1 depending on whether it is less than or greater than `K`. \n\nTherefore, a suitable ranking function for this loop is the absolute difference between `x` and `K`, which is guaranteed to decrease with each iteration of the loop and to be positive as long as the loop continues executing.\n\nWe can describe the absolute value of an expression using the ternary operator. \n\nSo, in ACSL syntax, the ranking function for this loop can be expressed as follows:\n\n```\n/*@\n    loop variant (x > K ? x - K : K - x);\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration of the loop and is positive for the loop to continue executing. This ranking function helps prove that the loop must terminate.",
            "In this program, the loop continues to execute while `x` is not equal to `K`. On each iteration, `x` gets either incremented or decremented, closing the gap to `K`. \n\nHence, the absolute value of the difference between `x` and `K` (i.e., `|x - K|`) can be considered as the ranking function as it decreases on each iteration (whether `x` is greater than `K` or less than `K`).\n\nIn ACSL syntax, the ranking function would be:\n```\n/*@\n    loop variant (x>K) ? x-K : K-x;\n*/\n```\nHere, the ternary operator is used to describe the absolute value of the difference between `x` and `K`. This ranking function decreases with every iteration (as `x` approaches `K`), and is positive as long as `x` is not equal to `K` (which is the loop condition). Thus, this is a valid ranking function, and it helps prove that the loop must eventually terminate.",
            "At the beginning of the loop, the values of `x` and `K` are arbitrary integers.\n\nIf `x > K`, `x` is decreased by 1, else `x` is increased by 1. This means that `x` is always moving towards `K` in each iteration, making the absolute difference between `x` and `K` decrease. Therefore, a valid ranking function would be the absolute difference between `x` and `K`.\n\nThis ranking function is valid because it is always a non-negative integer, it decreases in every iteration of the loop, and is positive while the loop condition `x != K` is true.\n\nHere is the ACSL representation of the ranking function:\n```\n/*@\n    loop variant (x > K) ? (x - K) : (K - x);\n*/\n```",
            "Firstly, note the variables that are live at the loop head: `x` and `K`. \n\nThen, take a look at the loop body. The loop continues until `x` equals `K`. If `x` is greater than `K`, `x` is decremented; otherwise, `x` is incremented. \n\nTherefore, a suitable ranking function would be the absolute difference between `x` and `K`, denoted as `abs(x-K)`.\n\nIt's valid because it decreases with every loop iteration (since `x` is either incremented or decremented to approach `K` in each iteration) and is positive as long as `x != K`. \n\nThe ACSL syntax for this would be:\n\n```\n/*@\n    loop variant abs(x-K);\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['(x>K ? x-K : K-x)']": {
                "variant": [
                    "(x>K ? x-K : K-x)"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant K == \\at(K, LoopEntry);\n    loop invariant x >= INT_MIN && x <= INT_MAX;\n    loop invariant K >= INT_MIN && K <= INT_MAX;\n    loop invariant x > K ==> (x - K) >= 0;\n    loop invariant x < K ==> (K - x) >= 0;\n    loop invariant x == K ==> (x - K) == 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) > K ==> x <= \\at(x, LoopEntry);\n    loop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) < K ==> x >= \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) == x || \\at(x, LoopEntry) == x + 1 || \\at(x, LoopEntry) == x - 1;\n    loop invariant \\at(K, LoopEntry) == K;\n    loop invariant x>=K ==> x<=\\at(x, LoopEntry);\n    loop invariant x<=K ==> x>=\\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant K == \\at(K, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry) ==> K >= x;\n    loop invariant x <= \\at(x, LoopEntry) ==> K <= x;\n    loop invariant (x > K) ? (x - K) == \\at(x, LoopEntry) - K : (K - x) == K - \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant \\at(K, LoopEntry) == K;\n    loop invariant (x>K ==> (x-K>=1 && x-K<=\\at(x-K, LoopEntry)));\n    loop invariant (x<=K ==> (K-x>=1 && K-x<=\\at(K-x, LoopEntry)));\n    loop invariant (x>=K ==> x-K==0);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int K, x;\n    K = unknown_int();\n    x = unknown_int();\n    while (x != K) {\n        if (x > K) {\n            x = x - 1;\n        } else {\n            x = x + 1;\n        }\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((x>K ? x-K : K-x))**, for the loop in the program above. Let's think step by step."
                    },
                    "First, take note of the loop condition and the ranking function. The loop condition is \"x != K\". The ranking function is \"(x > K ? x - K : K - x)\".\n\nThe ranking function is non-negative (since it represents a distance between two numbers) and it decreases with every iteration of the loop (since we are either subtracting 1 from x if it is greater than K or adding 1 to x if it is less than K).\n\nWe know that the ranking function is positive and decreases until x becomes equal to K. Therefore, the loop invariant should capture this.\n\nThe program initializes K and x with an unknown integer. So, we do not have a starting value for these variables. However, we know that they are integers, so they are bounded by the minimum and maximum values for integers.\n\nThe loop invariant that supports the loop variant and the loop condition can be written as:\n```\n/*@ \n    loop invariant K == \\at(K, LoopEntry);\n    loop invariant x >= INT_MIN && x <= INT_MAX;\n    loop invariant K >= INT_MIN && K <= INT_MAX;\n    loop invariant x > K ==> (x - K) >= 0;\n    loop invariant x < K ==> (K - x) >= 0;\n    loop invariant x == K ==> (x - K) == 0;\n*/\n```\nThe loop invariant \"K == \\at(K, LoopEntry)\" guarantees that the value of K does not change throughout the loop execution.\n\nThe next two loop invariants ensure that x and K are within the bounds of the integer data type.\n\nThe next two loop invariants ensure that the ranking function is positive when x != K.\n\nThe last loop invariant ensures that the ranking function is zero when x == K, which is the loop termination condition.",
                    "First, we note that the variables K and x are live at the loop head. They are initialized with non-deterministic values. This means we don't know their exact initial values, but they are integers.\n\nThe loop condition is (x != K). The loop body either increments or decrements x to make it closer to K. The ranking function given is (x>K ? x-K : K-x). This function measures the absolute difference between x and K, which decreases in every iteration of the loop.\n\nThe loop invariant that we need is something that is true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n\nThe loop invariants for this loop are:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) > K ==> x <= \\at(x, LoopEntry);\n    loop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) < K ==> x >= \\at(x, LoopEntry);\n*/\n```\nThese loop invariants imply that the ranking function (x>K ? x-K : K-x) is non-negative and decreases with every iteration of the loop. Hence, the loop terminates.",
                    "The loop condition is \"x != K\". The ranking function is \"(x>K ? x-K : K-x)\", which is a non-negative integer and decreases with every iteration of the loop.\n\nThe loop invariant should imply that the ranking function decreases with every iteration. The ranking function decreases when x decreases in the case of \"x > K\", and when x increases in the case of \"x < K\". As such, the loop invariant should be able to imply that x decreases when \"x > K\" and increases when \"x < K\".\n\nLet's write the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) == x || \\at(x, LoopEntry) == x + 1 || \\at(x, LoopEntry) == x - 1;\n    loop invariant \\at(K, LoopEntry) == K;\n    loop invariant x>=K ==> x<=\\at(x, LoopEntry);\n    loop invariant x<=K ==> x>=\\at(x, LoopEntry);\n*/\n```\n\nThe first invariant is used to express that x can only change by at most 1 in each iteration.\n\nThe second invariant states that K does not change during the execution of the loop.\n\nThe third invariant states that if x is greater than or equal to K at the beginning of the loop, then x is less than or equal to its value at the beginning of the loop. \n\nThe fourth invariant states that if x is less than or equal to K at the beginning of the loop, then x is greater than or equal to its value at the beginning of the loop.\n\nThese invariants together imply that the ranking function decreases with every iteration of the loop, thus proving the termination of the loop.",
                    "Firstly, we observe that the loop invariant (K - x) is non-negative and strictly decreases at each iteration. Therefore, it is a valid ranking function.\n\nWe also observe that:\n- \"K\" is a constant during the loop execution. It does not change once it has been initialized.\n- \"x\" changes at every iteration, it increases when x < K and decreases when x > K.\n- The loop terminates when x == K.\n\nGiven these observations, we can list the loop invariants as follows:\n\n```\n/*@ \n    loop invariant K == \\at(K, LoopEntry);\n    loop invariant x >= \\at(x, LoopEntry) ==> K >= x;\n    loop invariant x <= \\at(x, LoopEntry) ==> K <= x;\n    loop invariant (x > K) ? (x - K) == \\at(x, LoopEntry) - K : (K - x) == K - \\at(x, LoopEntry);\n*/\n```\n\nThese invariants establish the following:\n- The value of \"K\" remains constant throughout the loop execution.\n- If \"x\" is increasing, then \"x\" is less than or equal to \"K\".\n- If \"x\" is decreasing, then \"x\" is greater than or equal to \"K\".\n- The distance between \"x\" and \"K\" is always equal to the distance between the initial \"x\" and \"K\" if \"x\" > \"K\", and vice versa.\n\nThese invariants imply that the ranking function ((x > K) ? (x - K) : (K - x)) is non-negative and strictly decreasing at each iteration, which proves the termination of the loop.",
                    "At the start of the program, we have two variables `K` and `x` which are given some non-deterministic values. During the execution of the loop, the value of `x` changes based on its comparison with `K`.\n\nLet's analyze the loop invariant for the given ranking function.\n\n- Before the loop execution, the ranking function is non-negative as it is the absolute difference between `x` and `K`.\n- During each iteration of the loop, the value of `x` is either incremented or decremented, thus decreasing the value of the ranking function.\n- After the loop terminates, the ranking function becomes zero as `x` becomes equal to `K`.\n\nTherefore, the loop invariants that support the validity of the ranking function and prove the termination of the loop are:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) == x;\n    loop invariant \\at(K, LoopEntry) == K;\n    loop invariant (x>K ==> (x-K>=1 && x-K<=\\at(x-K, LoopEntry)));\n    loop invariant (x<=K ==> (K-x>=1 && K-x<=\\at(K-x, LoopEntry)));\n    loop invariant (x>=K ==> x-K==0);\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: K == \\at(K, LoopEntry);\nloop invariant i4: x > K ==> (x - K) >= 0;\nloop invariant i5: x < K ==> (K - x) >= 0;\nloop invariant i6: x == K ==> (x - K) == 0;\nloop invariant i7: \\at(x, LoopEntry) == K || \\at(x, LoopEntry) > K ==> x <= \\at(x, LoopEntry);\nloop invariant i8: \\at(x, LoopEntry) == K || \\at(x, LoopEntry) < K ==> x >= \\at(x, LoopEntry);\nloop invariant i10: \\at(K, LoopEntry) == K;\nloop invariant i17: (x>K ==> (x-K>=1 && x-K<=\\at(x-K, LoopEntry)));",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int K, x;\n    K = unknown_int();\n    x = unknown_int();\n    /*@\nloop invariant i1: K == \\at(K, LoopEntry);\nloop invariant i4: x > K ==> (x - K) >= 0;\nloop invariant i5: x < K ==> (K - x) >= 0;\nloop invariant i6: x == K ==> (x - K) == 0;\nloop invariant i7: \\at(x, LoopEntry) == K || \\at(x, LoopEntry) > K ==> x <= \\at(x, LoopEntry);\nloop invariant i8: \\at(x, LoopEntry) == K || \\at(x, LoopEntry) < K ==> x >= \\at(x, LoopEntry);\nloop invariant i10: \\at(K, LoopEntry) == K;\nloop invariant i17: (x>K ==> (x-K>=1 && x-K<=\\at(x-K, LoopEntry)));\nloop variant (x>K ? x-K : K-x);\n*/\nwhile (x != K) {\n        if (x > K) {\n            x = x - 1;\n        } else {\n            x = x + 1;\n        }\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant K == \\at(K, LoopEntry) is inductive.\nloop invariant x > K ==> (x - K) >= 0 is inductive.\nloop invariant x < K ==> (K - x) >= 0 is inductive.\nloop invariant x == K ==> (x - K) == 0 is inductive.\nloop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) > K ==> x <= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) == K || \\at(x, LoopEntry) < K ==> x >= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(K, LoopEntry) == K is inductive.\nloop invariant (x>K ==> (x-K>=1 && x-K<=\\at(x-K, LoopEntry))) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c"
        ],
        "skipped": [],
        "total": 65,
        "success_count": 90,
        "failure_count": 65,
        "success_rate": 1.3846153846153846
    }
}