{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int c, x;\n\tx = unknown_int();\n\tc = unknown_int();\n\tif (c >= 2) {\n\t    while (x + c >= 0) {\n\t\t    x = x - c;\n\t\t    c = c + 1;\n\t    }\n    }\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x + c"
            ],
            [
                "x + c * (c - 1) / 2"
            ],
            [
                "x + (c * (c + 1)) / 2"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int c, x;\n\tx = unknown_int();\n\tc = unknown_int();\n\tif (c >= 2) {\n\t    while (x + c >= 0) {\n\t\t    x = x - c;\n\t\t    c = c + 1;\n\t    }\n    }\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Starting values and constraints:\n   - `x` and `c` are unknown integers.\n   - `c >= 2` before entering the loop.\n\n2. Loop body:\n   - The loop condition is `x + c >= 0`.\n   - Inside the loop, `x` is updated as `x - c`, and `c` is updated as `c + 1`.\n\n3. Ranking function:\n   - We need an expression that decreases with every iteration and is positive while the loop is executing.\n   - We can consider the expression `x + c`.\n\nNow, let's analyze the expression `x + c`:\n\nBefore the loop starts, we have `x + c >= 0`. Inside the loop, `x` is decreased by `c`, and `c` is increased by `1`. Since `c >= 2`, the value of `x + c` is decreased by at least `1` in each iteration. This ensures that the expression is decreasing with every iteration.\n\nAs long as the loop is executing, the loop condition `x + c >= 0` holds. Thus, the expression `x + c` remains positive while the loop is executing.\n\nTherefore, the ranking function for this loop is `x + c`. Here it is in ACSL syntax:\n\n```\n/*@\n    loop variant x + c;\n*/\n```",
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - `c >= 2`\n   - `x` and `c` are unknown integers, but `x + c >= 0` for the loop to execute.\n\n2. Analyze the loop body:\n   - In each iteration, `x` decreases by `c`, and `c` increases by 1.\n   - The loop continues executing until `x + c < 0`.\n\n3. Ranking function:\n   - We need to find a ranking function that decreases with each iteration and remains positive as long as the loop executes.\n   - Let's consider the ranking function `v = x + c`.\n   - Before the loop, `v = x + c >= 0`.\n   - In each iteration, `v` decreases by `c - 1`.\n   - The loop terminates when `x + c < 0`, which implies that the ranking function is decreasing and positive during the loop execution.\n\nTherefore, the ranking function for the given program is `v = x + c`. In ACSL syntax:\n\n```\n/*@\n    loop variant x + c;\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x is an unknown integer\n- c is an unknown integer, and c >= 2\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is: x + c >= 0\nIn the loop body, we have two operations:\n1. x = x - c\n2. c = c + 1\n\nWe need to find an expression that decreases with every iteration of the loop and is positive while the loop is executing.\n\nLet's consider the expression x + c * (c - 1) / 2 as the ranking function. This expression represents the sum of an arithmetic series with the first term x and the common difference c.\n\nNow let's check if this expression is a valid ranking function:\n\n1. **Decreasing**: In each iteration, x is decreased by c and c is increased by 1. So, the value of the expression x + c * (c - 1) / 2 decreases with every iteration.\n\n2. **Positive while the loop is executing**: The loop condition is x + c >= 0. Since c >= 2, x must be non-negative for the loop to continue executing. So, the expression x + c * (c - 1) / 2 will be positive while the loop is executing.\n\nTherefore, the expression x + c * (c - 1) / 2 is a valid ranking function for the given loop.\n\nThe ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + c * (c - 1) / 2;\n*/\n```",
            "1. Identify the variables live at the loop head: `x` and `c`.\n2. Starting values or constraints: `c >= 2`.\n3. Loop condition: `x + c >= 0`.\n\nNow, let's analyze the loop body and find a ranking function involving `x` and `c`. In the loop body, we have:\n\n```\nx = x - c;\nc = c + 1;\n```\n\nSince `c` is positive and increasing, the value of `x` will always decrease. We can use the loop condition to create a ranking function. Since `x + c >= 0` and `c >= 2`, we can use `x + c` as the ranking function.\n\nOutput the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + c;\n*/\n```\n\nThis is a valid ranking function because it decreases with every iteration of the loop (as `x` decreases and `c` increases), and it evaluates to a positive value while the loop is executing (as per the loop condition `x + c >= 0`).",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n1. The initial value of `x` is unknown.\n2. The initial value of `c` is unknown but constrained by the condition `c >= 2`.\n\nNow, let's analyze the loop body.\n\nIn each iteration of the loop:\n1. `x` is decreased by `c`.\n2. `c` is increased by 1.\n\nSince the loop continues as long as `x + c >= 0`, we can find a ranking function involving `x` and `c` that decreases with every iteration.\n\nA valid ranking function for this loop is `x + (c * (c + 1)) / 2`. Let's explain why it is a valid ranking function:\n\n1. The ranking function is positive as long as the loop is executing because `x + c >= 0` is the loop condition.\n2. The ranking function decreases with each iteration, as `x` is decreased by `c`, and `c` is increased by 1, which means that `(c * (c + 1)) / 2` increases by `c` in each iteration, making the overall value of the ranking function decrease.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + (c * (c + 1)) / 2;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x + c']": {
                "variant": [
                    "x + c"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant \\at(x, LoopEntry) - c*(c - \\at(c, LoopEntry)) == x;\n    loop invariant \\at(c, LoopEntry) <= c;\n*/",
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant x + c >= 0;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant \\at(c, LoopEntry) - c <= 0;\n    loop invariant \\at(x, LoopEntry) - x >= c - \\at(c, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(c, LoopEntry) >= 2;\n    loop invariant c > 0;\n    loop invariant x + c >= 0;\n*/",
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant \\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c);\n    loop invariant x + c >= \\at(x, LoopEntry) - (\\at(c, LoopEntry) - c);\n    loop invariant x + c >= 0;\n*/",
                    "/*@ \n    loop invariant c >= 2;\n    loop invariant x + c <= \\at(x + c, LoopEntry);\n    loop invariant \\at(x + c, LoopEntry) >= 0;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int c, x;\n\tx = unknown_int();\n\tc = unknown_int();\n\tif (c >= 2) {\n\t    while (x + c >= 0) {\n\t\t    x = x - c;\n\t\t    c = c + 1;\n\t    }\n    }\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + c)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The loop condition is **(x + c >= 0)**.\n- The given ranking function is **(x + c)**.\n- Before the loop execution, **c >= 2** and **x** and **c** are arbitrary integers.\n- In every iteration of the loop, **x = x - c** and **c = c + 1**.\n- After the loop termination, **x + c < 0**.\n\nBased on these facts, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant \\at(x, LoopEntry) - c*(c - \\at(c, LoopEntry)) == x;\n    loop invariant \\at(c, LoopEntry) <= c;\n*/\n```\n\nHere is what each invariant does:\n- The first invariant **c >= 2** guarantees that **c** is always at least 2, which is a precondition of the loop.\n- The second invariant **\\at(x, LoopEntry) - c*(c - \\at(c, LoopEntry)) == x** captures the relation between **x** and **c** in every iteration of the loop.\n- The third invariant **\\at(c, LoopEntry) <= c** guarantees that **c** is non-decreasing, which is required for the termination of the loop.",
                    "- At the start of the loop, the variables x and c are live. The loop condition is (x + c >= 0). The initial values of x and c are unknown, but we know that c is at least 2. \n- The loop body decreases the value of x by c and increases the value of c by 1 in every iteration. \n- The ranking function for the loop is (x + c), which is always non-negative and decreases in every iteration of the loop, since x decreases by a value greater than or equal to 2 and c increases by 1. \n\nThe loop invariants for the ranking function are as follows:\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant x + c >= 0;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant \\at(c, LoopEntry) - c <= 0;\n    loop invariant \\at(x, LoopEntry) - x >= c - \\at(c, LoopEntry);\n*/\n```\nThe first loop invariant states that the value of c is always at least 2. This is true before the loop execution, as it is a precondition for entering the loop, and it remains true during every iteration as c only increases in the loop body.\n\nThe second loop invariant states that the value of (x + c) is always non-negative. This is true before the loop execution, as it is the loop condition, and it remains true in every iteration of the loop, as the loop condition is checked before every iteration. \n\nThe third loop invariant states that the value of x decreases or remains the same in every iteration of the loop. This is true as the value of x is decreased by c in the loop body.\n\nThe fourth loop invariant states that the value of c increases or remains the same in every iteration of the loop. This is true as the value of c is increased by 1 in the loop body.\n\nThe fifth loop invariant states that the decrease in the value of x is greater than or equal to the increase in the value of c. This is true as the value of x decreases by c, which is always greater than or equal to the increase in the value of c (which is 1). This loop invariant ensures that the ranking function decreases in every iteration of the loop. \n\nThe conjunction of these loop invariants can be used to prove the termination of the loop.",
                    "- The loop condition is **(x + c >= 0)**, the loop variant is **(x + c)**, and the variables live at the loop head are **x** and **c**.\n- The loop variant decreases in every iteration of the loop because **x** decreases by **c** and **c** increases by **1**.\n- Before the loop execution, **c** is non-negative as it is at least **2**.\n- In every iteration of the loop, **c** is positive and **x + c** is non-negative.\n- After the loop termination, **x + c** is negative.\n\nSo, the loop invariants are:\n```\n/*@ \n    loop invariant \\at(c, LoopEntry) >= 2;\n    loop invariant c > 0;\n    loop invariant x + c >= 0;\n*/\n```\n- **\\at(c, LoopEntry) >= 2** holds because **c** is at least **2** at the loop entry.\n- **c > 0** holds because **c** increases by **1** in every iteration of the loop.\n- **x + c >= 0** holds because it is the loop condition.\n\nThese loop invariants imply that the loop variant **(x + c)** decreases with every iteration because **x** decreases by **c** and **c** increases by **1**, and hence, prove the termination of the loop.",
                    "Firstly, the variables that are live at the loop head are **x** and **c**. The initial constraints are **c >= 2**. \n\nThe loop condition is **x + c >= 0** and the loop variant is **x + c**.\n\nBefore the loop, **x** and **c** are any integers, with the additional constraint that **c >= 2**. After every iteration, **x** is decreased by **c** and **c** is increased by **1**.\n\nLet's write down the invariants:\n\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant \\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c);\n    loop invariant x + c >= \\at(x, LoopEntry) - (\\at(c, LoopEntry) - c);\n    loop invariant x + c >= 0;\n*/\n```\n\nExplanation:\n\n- The first invariant **c >= 2** is trivially true since **c >= 2** is a precondition for the loop.\n\n- The second invariant **\\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c)** is true because **x** decreases by **c** and **c** increases by **1** in every iteration. So, the decrease in **x** is at least the increase in **c** multiplied by the initial value of **c**. \n\n- The third invariant **x + c >= \\at(x, LoopEntry) - (\\at(c, LoopEntry) - c)** is true because **x + c** is the loop variant and it is always greater than or equal to the decrease in **x** and the increase in **c**.\n\n- The last invariant **x + c >= 0** is true because it is the loop condition. \n\nTherefore, these loop invariants support the loop variant **x + c** and prove the termination of the loop.",
                    "- The loop in the program is conditioned on the expression (x + c >= 0), and the loop variant is the expression (x + c).\n- The starting value of `x` and `c` are unknown, however `c` is constrained to be greater than or equal to 2 before entering the loop.\n- In each iteration of the loop, `x` decreases by `c` and `c` increases by 1.\n- By observing the operations in the loop, we can say that the value of (x + c) decreases in each iteration of the loop, validating the loop variant.\n\nSo, the loop invariants can be:\n```\n/*@ \n    loop invariant c >= 2;\n    loop invariant x + c <= \\at(x + c, LoopEntry);\n    loop invariant \\at(x + c, LoopEntry) >= 0;\n*/\n```\nThis set of loop invariants help us support the loop variant in the following ways:\n- `c >= 2` ensures that `c` remains non-negative throughout the loop.\n- `x + c <= \\at(x + c, LoopEntry)` ensures that the value of (x + c) is always less than or equal to its value at the beginning of the loop, hence decreases in each iteration.\n- `\\at(x + c, LoopEntry) >= 0` ensures that the value of (x + c) is always non-negative at the beginning of the loop, hence the loop condition is always satisfied at the beginning of the loop. \n\nAll these invariants together imply that the loop variant (x + c) decreases with every iteration of the loop, therefore the loop terminates."
                ],
                "inductive_invariants": "loop invariant i1: c >= 2;\nloop invariant i3: \\at(c, LoopEntry) <= c;\nloop invariant i5: \\at(x, LoopEntry) - x >= 0;\nloop invariant i6: \\at(c, LoopEntry) - c <= 0;\nloop invariant i7: \\at(x, LoopEntry) - x >= c - \\at(c, LoopEntry);\nloop invariant i8: \\at(c, LoopEntry) >= 2;\nloop invariant i9: c > 0;\nloop invariant i10: \\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c);\nloop invariant i12: x + c <= \\at(x + c, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int c, x;\n\tx = unknown_int();\n\tc = unknown_int();\n\tif (c >= 2) {\n\t    /*@\nloop invariant i1: c >= 2;\nloop invariant i3: \\at(c, LoopEntry) <= c;\nloop invariant i5: \\at(x, LoopEntry) - x >= 0;\nloop invariant i6: \\at(c, LoopEntry) - c <= 0;\nloop invariant i7: \\at(x, LoopEntry) - x >= c - \\at(c, LoopEntry);\nloop invariant i8: \\at(c, LoopEntry) >= 2;\nloop invariant i9: c > 0;\nloop invariant i10: \\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c);\nloop invariant i12: x + c <= \\at(x + c, LoopEntry);\nloop variant x + c;\n*/\nwhile (x + c >= 0) {\n\t\t    x = x - c;\n\t\t    c = c + 1;\n\t    }\n    }\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant c >= 2 is inductive.\nloop invariant \\at(c, LoopEntry) <= c is inductive.\nloop invariant \\at(x, LoopEntry) - x >= 0 is inductive.\nloop invariant \\at(c, LoopEntry) - c <= 0 is inductive.\nloop invariant \\at(x, LoopEntry) - x >= c - \\at(c, LoopEntry) is inductive.\nloop invariant \\at(c, LoopEntry) >= 2 is inductive.\nloop invariant c > 0 is inductive.\nloop invariant \\at(x, LoopEntry) - x >= c * (\\at(c, LoopEntry) - c) is inductive.\nloop invariant x + c <= \\at(x + c, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c"
        ],
        "skipped": [],
        "total": 81,
        "success_count": 111,
        "failure_count": 81,
        "success_rate": 1.3703703703703705
    }
}