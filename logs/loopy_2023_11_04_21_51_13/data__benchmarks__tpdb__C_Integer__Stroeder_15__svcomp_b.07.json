{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x + y - 2*c"
            ],
            [
                "x + y - 2*z"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "Starting values or constraints for the variables:\n- x, y, and z can be any integer values. \n- c starts at 0.\n\nThe loop continues to execute as long as both x and y are greater than z. \n\nInside the loop body:\n- x is decremented by 1. \n- y is decremented by 1. \n- c is incremented by 1. \n\nWe can see that the variables x and y are decreasing in each iteration and c is increasing. So, we can form a ranking function based on these variables.\n\nRanking function can be: `x + y - 2*c`\n\nThis is a valid ranking function because:\n- It is positive for the loop to continue executing since both x and y are greater than z and c is always increasing.\n- It decreases with every successive iteration of the loop as x and y are decreasing and c is increasing.\n\nSo, the ranking function in ACSL syntax is:\n```\n/*@\n    loop variant x + y - 2*c;\n*/\n```",
            "Here, the variables `x`, `y`, and `z` are live at the loop head. The loop continues executing as long as both `x` and `y` are greater than `z`. \n\nIn the loop body, `x` and `y` are decreased by 1 each time, and `c` is increased by 1.\n\nA valid ranking function for this program could be `x + y - 2*z`. This function decreases in each iteration since `x` and `y` both decrease by 1, while `z` remains constant. Also, the function is positive when the loop continues to execute because `(x > z)` and `(y > z)`.\n\nThus, the ranking function in ACSL syntax is:\n\n```\n/*@\n    loop variant x + y - 2*z;\n*/\n```",
            "First, note the starting values or constraints for the variables that are live at the loop head: `x`, `y`, `z` and `c`. They are all integers and can be any value.\n\nIn the loop body, both `x` and `y` decrease by 1 and `c` increases by 1 in every iteration. The loop continues as long as both `x` and `y` are greater than `z`.\n\nConsidering the loop condition and the changes to the variables in each iteration, a valid ranking function could be `x + y - 2c`. This ranking function decreases in each iteration because `x` and `y` decrease by 1 and `c` increases by 1. It is also positive for all iterations of the loop as long as `x` and `y` are greater than `z`.\n\nTherefore, the ranking function for the loop is `x + y - 2c`. Here is the function in ACSL syntax:\n\n```\n/*@\n    loop variant x + y - 2*c;\n*/\n```",
            "In this program, the loop condition is `(x > z) && (y > z)`. The loop continues as long as both `x` and `y` are greater than `z`.\n\nWithin the loop, `x` and `y` are decremented by 1 in each iteration and `c` is incremented by 1. This means that `x`, `y`, and `c` are all changing in each iteration of the loop.\n\nThe variables `x`, `y`, and `z` are live at the loop head. \n\nA suitable ranking function for this loop could be `x + y - 2*c`. \nAt the beginning of the loop, the value of `c` is 0. Therefore, the ranking function is positive as long as the loop continues (since `x` and `y` are both greater than `z`). \n\nWith each iteration of the loop, `x` and `y` decrease by 1 and `c` increases by 1, therefore the value of `x + y - 2*c` decreases by 2 with every iteration. \n\nThus, the ranking function `x + y - 2*c` is valid for this loop.\n\nIn ACSL syntax, the ranking function can be expressed as:\n\n```\n/*@\n    loop variant x + y - 2*c;\n*/\n```",
            "The variables that are live at the loop head are `x`, `y`, and `z`.\n\nLooking at the loop body, we see that `x` and `y` are decremented by 1 each iteration, and `c` is incremented by 1 each iteration. The loop continues as long as `x` and `y` are greater than `z`.\n\nA possible ranking function here is `x + y - 2*z`. This is because `x` and `y` are both decremented by 1 each iteration, and the loop continues as long as `x` and `y` are greater than `z`. This means that the value of `x + y - 2*z` should decrease by 2 with each iteration, and will always be positive while the loop is executing.\n\nWe can express this as follows in ACSL syntax:\n\n```\n/*@\n    loop variant x + y - 2*z;\n*/\n```\n\nThis is a valid ranking function because it decreases with each iteration (since `x` and `y` are both decremented by 1 each iteration) and is positive while the loop is executing (since the loop continues as long as `x` and `y` are greater than `z`)."
        ],
        "simple_variant_log": {
            "success": true,
            "['x + y - 2*c']": {
                "variant": [
                    "x + y - 2*c"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant \\typeof(z) == \\typeof(int);\n    loop invariant c >= 0;\n    loop invariant c <= x;\n    loop invariant c <= y;\n    loop invariant (x <= z) ==> (c == \\at(c, LoopEntry));\n    loop invariant (y <= z) ==> (c == \\at(c, LoopEntry));\n    loop invariant (x + y - 2*c) >= 0;\n*/",
                    "/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + y - 2*c >= 0;\n    loop invariant (x > z && y > z) ==> \\at(x, LoopEntry) - 1 == x && \\at(y, LoopEntry) - 1 == y && \\at(c, LoopEntry) + 1 == c;\n    loop invariant (x > z && y > z) ==> x + y - 2*c < \\at(x + y - 2*c, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant c == \\at(c, LoopEntry) + c;\n    loop invariant \\at(x, LoopEntry) >= z;\n    loop invariant \\at(y, LoopEntry) >= z;\n    loop invariant x >= z;\n    loop invariant y >= z;\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant c == \\at(c, LoopEntry) + c;\n    loop invariant x >= z;\n    loop invariant y >= z;\n*/",
                    "/*@\n    loop invariant x + y - 2*c >= 0;\n    loop invariant \\at(x + y - 2*c, LoopEntry) > x + y - 2*c;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c >= 0;\n    loop invariant x >= c;\n    loop invariant y >= c;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + y - 2*c)**, for the loop in the program above. Let's think step by step."
                    },
                    "The starting values for the variables that are live at the loop head are `x`, `y`, `z` and `c`. Since `x`, `y` and `z` are assigned values from `unknown_int()`, they can take any integer value. `c` is initialized to `0`. \n\nIn the loop body, `x` and `y` are decremented by `1` and `c` is incremented by `1` in each iteration.\n\nThe loop condition is `(x > z) && (y > z)`. This means that the loop continues as long as `x` and `y` are both greater than `z`.\n\nThe given ranking function is `(x + y - 2*c)`. This function decreases in each iteration of the loop because `x` and `y` decrease and `c` increases. \n\nNow we can identify the loop invariants:\n- Before the loop execution and in every iteration, `x`, `y` and `z` are integers and `c` is a non-negative integer.\n- Before the loop execution and in every iteration, `c` is less than or equal to `x` and `y`.\n- After the loop termination, `x` and `y` are less than or equal to `z`.\n- In every iteration, the ranking function `(x + y - 2*c)` is non-negative and decreases.\n\nThese invariants can be stated in ACSL as follows:\n\n```\n/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant \\typeof(z) == \\typeof(int);\n    loop invariant c >= 0;\n    loop invariant c <= x;\n    loop invariant c <= y;\n    loop invariant (x <= z) ==> (c == \\at(c, LoopEntry));\n    loop invariant (y <= z) ==> (c == \\at(c, LoopEntry));\n    loop invariant (x + y - 2*c) >= 0;\n*/\n```",
                    "- The variables that are live at the loop head are x, y, z, and c.\n- The loop condition is (x > z) && (y > z).\n- The ranking function is (x + y - 2*c).\n\nLet's analyze the loop body and find loop invariants:\n- Before the loop execution, the variables x, y, and z can take any integer value, and c is 0.\n- In every iteration of the loop, x and y decrease by 1, and c increases by 1, only if x and y are both greater than z.\n- After the loop termination, either x or y is not greater than z.\n\nFrom these, we can output the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + y - 2*c >= 0;\n    loop invariant (x > z && y > z) ==> \\at(x, LoopEntry) - 1 == x && \\at(y, LoopEntry) - 1 == y && \\at(c, LoopEntry) + 1 == c;\n    loop invariant (x > z && y > z) ==> x + y - 2*c < \\at(x + y - 2*c, LoopEntry);\n*/\n```\nThese loop invariants imply that the ranking function decreases with every iteration when x and y are both greater than z, which can be used to prove the termination of the loop.",
                    "At the start of the loop, we have the following values:\n- x, y, and z can be any integer.\n- c is 0.\n\nThe loop condition is (x > z) && (y > z).\n\nIn every iteration of the loop:\n- x and y decrease by 1, \n- c increases by 1.\n\nSo, the loop invariants that are true before the loop execution, in every iteration of the loop and after the loop termination, and support the loop variant (x + y - 2*c) are:\n\n```c\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant c == \\at(c, LoopEntry) + c;\n    loop invariant \\at(x, LoopEntry) >= z;\n    loop invariant \\at(y, LoopEntry) >= z;\n    loop invariant x >= z;\n    loop invariant y >= z;\n*/\n```\n\nIn the invariants above, \n- The first two invariants ensure that x and y are decreasing or remain the same in every iteration. \n- The third invariant ensures that c is increasing in every iteration. \n- The fourth and fifth invariants ensure that the starting values of x and y are always greater than or equal to z. \n- The last two invariants ensure that the current values of x and y are always greater than or equal to z. \n\nThese invariants imply that the loop variant (x + y - 2*c) is non-negative and decreasing with every iteration, ensuring the termination of the loop.",
                    "- The variables that are live at the loop head are x, y, z, and c.\n- The loop condition is (x > z) && (y > z).\n- The ranking function given is (x + y - 2*c).\n\nThe loop invariant that holds true before the loop execution, in every iteration of the loop and after the loop termination, such that the loop invariant implies that the ranking function decreases with every iteration, is:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant c == \\at(c, LoopEntry) + c;\n    loop invariant x >= z;\n    loop invariant y >= z;\n*/\n```\n\nHere, \n- The first and second invariants imply that x and y decrease by 1 in each iteration.\n- The third invariant indicates that c increases by 1 in each iteration.\n- The fourth and fifth invariants are directly derived from the loop condition and they ensure that the loop terminates when either x or y becomes less than or equal to z.\n- All these invariants collectively imply that the ranking function (x + y - 2*c) decreases with every iteration, thus proving the termination of the loop.",
                    "1. Let's start with the initial values of the variables that are live at the loop head. \nThe variables x, y, z, and c are live at the loop head. \nThe variables x, y, and z are assigned non-deterministic integer values and c is assigned 0. \n\n2. Analyze the loop body and make a note of the loop condition and the given ranking function.\nThe loop condition is (x > z) && (y > z).\nThe loop variant is (x + y - 2*c).\nDuring each iteration of the loop, x and y decrease by 1 and c increases by 1.\n\nNow let's write the loop invariants:\n\n- The first loop invariant is that the loop variant is non-negative before the loop execution. This is true because x and y are both greater than z and c is 0 at the beginning of the loop.\n\n- The second loop invariant is that the loop variant decreases with every iteration of the loop. This is true because x and y decrease by 1 and c increases by 1 during each iteration.\n\n- The third loop invariant is that x, y, and c are non-negative after the loop termination. This is true because x and y decrease by 1 and c increases by 1 during each iteration of the loop and the loop only terminates when x and y are not greater than z.\n\n- The fourth loop invariant is that x and y are always greater than or equal to c. This is true because c increases by 1 during each iteration of the loop and x and y decrease by 1.\n\n```\n/*@\n    loop invariant x + y - 2*c >= 0;\n    loop invariant \\at(x + y - 2*c, LoopEntry) > x + y - 2*c;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant c >= 0;\n    loop invariant x >= c;\n    loop invariant y >= c;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i4: c >= 0;\nloop invariant i15: x >= \\at(x, LoopEntry) - c;\nloop invariant i16: y >= \\at(y, LoopEntry) - c;\nloop invariant i17: c == \\at(c, LoopEntry) + c;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i4: c >= 0;\nloop invariant i15: x >= \\at(x, LoopEntry) - c;\nloop invariant i16: y >= \\at(y, LoopEntry) - c;\nloop invariant i17: c == \\at(c, LoopEntry) + c;\nloop variant x + y - 2*c;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant c >= 0 is inductive.\nloop invariant x >= \\at(x, LoopEntry) - c is inductive.\nloop invariant y >= \\at(y, LoopEntry) - c is inductive.\nloop invariant c == \\at(c, LoopEntry) + c is inductive.\n\n\nLoop variant is Invalid."
                    }
                ],
                "success": false
            },
            "['x + y - 2*z']": {
                "variant": [
                    "x + y - 2*z"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant c >= 0;\n    loop invariant c <= \\at(x, LoopEntry) - z;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x >= z;\n    loop invariant \\at(y, LoopEntry) >= y >= z;\n    loop invariant c >= 0;\n    loop invariant x + y - 2*z >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant c == \\at(x, LoopEntry) - x;\n    loop invariant c == \\at(y, LoopEntry) - y;\n    loop invariant x + y >= 2*c;\n*/",
                    "/*@ \n    loop invariant \\forall int i; 0 <= i <= c ==> \\at(x + y - 2 * z, LoopEntry) > \\at(x + y - 2 * z - i, Pre);\n    loop invariant 0 <= c;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant c >= 0;\n    loop invariant x > z ==> y > z;\n    loop invariant y > z ==> x > z;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x + y - 2*z)**, for the loop in the program above. Let's think step by step."
                    },
                    "Let's start by understanding the initial values of the variables and the loop condition:\n\n1. x, y, and z are initialized with unknown values.\n2. c is initialized with 0.\n3. The loop condition is (x > z) && (y > z).\n\nNow, let's analyze the loop body:\n\n1. x is decremented by 1 in each iteration.\n2. y is decremented by 1 in each iteration.\n3. c is incremented by 1 in each iteration.\n\nGiven the ranking function (x + y - 2*z), let's find the loop invariants:\n\n1. At the beginning of the loop, the loop condition holds, so x > z and y > z.\n2. Since x and y are decremented by 1 in each iteration, their values are non-increasing.\n3. Since c is incremented by 1 in each iteration, its value is non-decreasing.\n\nWith this information, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant c >= 0;\n    loop invariant c <= \\at(x, LoopEntry) - z;\n*/\n```\n\nThese loop invariants imply that the ranking function (x + y - 2*z) decreases with every iteration, which supports the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x, y, and z are initialized with unknown_int(), so they can be any integer value.\n- c starts at 0.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: (x > z) && (y > z)\n- Ranking function: (x + y - 2*z)\n\nNow, let's output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x >= z;\n    loop invariant \\at(y, LoopEntry) >= y >= z;\n    loop invariant c >= 0;\n    loop invariant x + y - 2*z >= 0;\n*/\n```",
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are initialized with unknown_int() and can have any integer value.\n- c starts with the value 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: (x > z) && (y > z)\n- Ranking function: (x + y - 2*z)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant c == \\at(x, LoopEntry) - x;\n    loop invariant c == \\at(y, LoopEntry) - y;\n    loop invariant x + y >= 2*c;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- x, y, and z are assigned unknown_int() values, which means they can be any integer value.\n- c is initialized to 0.\n\nThe loop condition is (x > z) && (y > z), and the given ranking function is (x + y - 2*z).\n\nNow, let's find the loop invariants that support the ranking function:\n\n1. Before the loop execution and in every iteration of the loop, x, y, and z can be any integer value.\n2. The value of c is always non-negative and increases by 1 in every iteration of the loop.\n3. The value of x and y both decrease by 1 in every iteration of the loop, while z remains the same.\n4. When the loop terminates, either x <= z or y <= z.\n\nBased on these observations, we can write the loop invariants:\n\n```\n/*@ \n    loop invariant \\forall int i; 0 <= i <= c ==> \\at(x + y - 2 * z, LoopEntry) > \\at(x + y - 2 * z - i, Pre);\n    loop invariant 0 <= c;\n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant z >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n*/\n```",
                    "First, we identify the variables live at the loop head: x, y, and z. \nThe loop condition is (x > z) && (y > z). \nThe given ranking function is (x + y - 2*z). \n\nNow, let's find the loop invariants:\n\nBefore the loop execution:\n- x, y, and z can take any integer value.\n\nIn every iteration of the loop:\n- x and y both decrease by 1.\n- z remains unchanged.\n- x > z and y > z.\n\nAfter the loop termination:\n- Either x <= z or y <= z.\n\nBased on these observations, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - c;\n    loop invariant y >= \\at(y, LoopEntry) - c;\n    loop invariant z == \\at(z, LoopEntry);\n    loop invariant c >= 0;\n    loop invariant x > z ==> y > z;\n    loop invariant y > z ==> x > z;\n*/\n```\n\nThese invariants support the loop variant (x + y - 2*z) and help in proving the termination of the loop."
                ],
                "inductive_invariants": "loop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: y <= \\at(y, LoopEntry);\nloop invariant i5: c >= 0;\nloop invariant i10: \\at(x, LoopEntry) >= x;\nloop invariant i11: \\at(y, LoopEntry) >= y;\nloop invariant i12: c == \\at(x, LoopEntry) - x;\nloop invariant i13: c == \\at(y, LoopEntry) - y;\nloop invariant i16: 0 <= c;\nloop invariant i20: z == \\at(z, LoopEntry);\nloop invariant i21: x >= \\at(x, LoopEntry) - c;\nloop invariant i22: y >= \\at(y, LoopEntry) - c;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: y <= \\at(y, LoopEntry);\nloop invariant i5: c >= 0;\nloop invariant i10: \\at(x, LoopEntry) >= x;\nloop invariant i11: \\at(y, LoopEntry) >= y;\nloop invariant i12: c == \\at(x, LoopEntry) - x;\nloop invariant i13: c == \\at(y, LoopEntry) - y;\nloop invariant i16: 0 <= c;\nloop invariant i20: z == \\at(z, LoopEntry);\nloop invariant i21: x >= \\at(x, LoopEntry) - c;\nloop invariant i22: y >= \\at(y, LoopEntry) - c;\nloop variant x + y - 2*z;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant \\at(y, LoopEntry) >= y is inductive.\nloop invariant c == \\at(x, LoopEntry) - x is inductive.\nloop invariant c == \\at(y, LoopEntry) - y is inductive.\nloop invariant 0 <= c is inductive.\nloop invariant z == \\at(z, LoopEntry) is inductive.\nloop invariant x >= \\at(x, LoopEntry) - c is inductive.\nloop invariant y >= \\at(y, LoopEntry) - c is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c"
        ],
        "skipped": [],
        "total": 94,
        "success_count": 147,
        "failure_count": 94,
        "success_rate": 1.5638297872340425
    }
}