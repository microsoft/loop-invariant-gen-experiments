{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - y;\n\t    }\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + 1"
            ],
            [
                "x + y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - y;\n\t    }\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop in the program is \n```\nwhile (x >= 0) {\n    x = x - y;\n}\n```\nThe loop continues to execute as long as `x` is greater than or equal to 0. In each iteration, `x` is decreased by `y` which is a positive integer.\n\nThe ranking function for this loop is `x`. This function is always non-negative at the start of each loop iteration and decreases with each iteration, as required.\n\nHere is the ranking function in ACSL syntax:\n```\n/*@\n    loop variant x;\n*/\n```\nThis ranking function is valid because `x` is always decreased by `y` (a positive value) in each iteration, which guarantees that `x` will eventually become negative and the loop will terminate.",
            "The variables live at the loop head are `x` and `y`. `x` is the loop variable, since it is updated in every iteration of the loop, and `y` is constant. \n\nThe loop condition is `x >= 0`, which means the loop will continue executing as long as `x` is positive or zero. \n\nIn each iteration of the loop, `x` is decreased by `y`. Since `y >= 1`, `x` is always decreased by at least 1 in every iteration.\n\nTherefore, a valid ranking function for this loop is `x + 1`. This ranking function always evaluates to a positive value while the loop is executing, because `x` is positive or zero at the loop head. Furthermore, it decreases with every iteration, because `x` is decreased in every iteration.\n\nIn ACSL syntax, the ranking function is:\n\n```\n/*@\n    loop variant x + 1;\n*/\n```\n\nThis ranking function is valid because it decreases in each iteration (since `x` decreases in each iteration) and is positive while the loop is executing (because `x` is positive or zero at the loop head). Therefore, it proves that the loop must eventually terminate.",
            "The loop condition is `x >= 0`. `x` is the loop variable, which is decremented by `y` in every iteration. `y` is a positive integer, as we have the condition `if (y >= 1)` before the loop starts. Thus, `x` decreases with each loop iteration.\n\nNow we need to find a function that:\n- is positive when `x >= 0` and\n- decreases with each loop iteration.\n\nThe variable `x` itself is a ranking function that satisfies these conditions. `x` decreases with each loop iteration, and the loop only executes when `x >= 0`.\n\nTherefore, the ranking function is `x`.\n\nIn ACSL syntax, the ranking function is written as:\n```\n/*@\n    loop variant x;\n*/\n```",
            "The value of `x` is not explicitly initialized, but it is constrained by the loop condition `x >= 0`. We can see that `x` is decreased by `y` with each iteration of the loop, where `y` is a positive integer.\n\nA possible ranking function for this loop is `x + y`, which is always positive as long as the loop continues to execute.\n\nThis is a valid ranking function because it decreases with each iteration of the loop (`x` is decreased by `y`), and it is positive as long as the loop continues to execute (`x >= 0`).\n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant x + y;\n*/\n```\n\nThe ranking function is `x + y`. The value of `x + y` decreases with each loop iteration because `x` is decreased by `y` in each iteration. The ranking function is positive for the loop to continue executing because the loop condition requires `x` to be non-negative.",
            "The variables that are live at the loop head are `x` and `y`. The loop condition is `x >= 0`, which means that the loop continues while `x` is non-negative. \n\nIn every iteration of the loop, `x` is decremented by `y`. Since `y` is assumed to be greater than or equal to 1, `x` decreases by at least 1 in every iteration. \n\nTherefore, a suitable ranking function for this loop would be `x`. This is because `x` is positive when the loop is executing (since the loop condition is `x >= 0`) and `x` decreases with every iteration of the loop (since `x` is decremented by `y` in the loop body). \n\nIn ACSL syntax, the ranking function would be written as follows:\n\n```\n/*@\n    loop variant x;\n*/\n``` \n\nThis is a valid ranking function because it satisfies the two necessary properties of a ranking function: it is positive during loop execution and it strictly decreases with every iteration."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant (\\at(x, LoopEntry) - x) % y == 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1 ==> y > 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1 ==> x >= \\at(x, LoopEntry) - y;\n    loop invariant y >= 1 ==> x < \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= y;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant (y >= 1) ==> x < \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - y;\n    loop invariant y >= 1 ==> x < \\at(x, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (y >= 1) {\n    \twhile (x >= 0) {\n\t    \tx = x - y;\n\t    }\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x can be any integer value as it is assigned by the unknown_int() function.\n- y can be any integer value as it is assigned by the unknown_int() function, and it must be greater than or equal to 1 due to the if statement.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n- Loop condition: x >= 0\n- Ranking function: x\n\nWe want to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant (\\at(x, LoopEntry) - x) % y == 0;\n*/\n```\n\nThese loop invariants hold true for the given loop and support the loop variant (x), proving the termination of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. Since `x` and `y` are assigned by the `unknown_int()` function, they can have any integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `x >= 0`, and the ranking function is `(x)`.\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nLoop invariants for the given program are as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1 ==> y > 0;\n*/\n```\n\nThese loop invariants fulfill the requirements:\n1. They are true before the loop execution, as the loop condition `x >= 0` ensures that `x` is non-negative, and the precondition `y >= 1` ensures that `y` is positive when the loop is executed.\n2. They are true in every iteration of the loop, as `x` is always non-negative in the loop (due to the loop condition), and if `y >= 1`, it remains positive throughout the loop.\n3. They are true after the loop termination, as the loop terminates when `x < 0`, and if `y >= 1`, it remains positive.\n\nThese loop invariants imply that the ranking function `(x)` decreases with every iteration of the loop. Since `x` is non-negative and decreases by `y` in each iteration, the loop must eventually terminate.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x and y are assigned unknown_int() values. We do not know their exact values, but we know they are integers.\n- The loop is executed only if y >= 1.\n\nNow, let's analyze the loop condition and the loop body:\n\n- Loop condition: x >= 0\n- Loop body: x = x - y\n- Given ranking function: x\n\nWe need to find loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function (x) decreases with every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1 ==> x >= \\at(x, LoopEntry) - y;\n    loop invariant y >= 1 ==> x < \\at(x, LoopEntry);\n*/\n```",
                    "First, let's analyze the program and make note of the starting values and constraints for the variables that are live at the loop head.\n\n- x and y are assigned values from the unknown_int() function, so we don't have any bounds for their initial values.\n- The loop executes only if y >= 1.\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is x >= 0.\n- In the loop body, x is updated as x = x - y.\n\nNow, let's output the loop invariants that support the validity of the ranking function (x) and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant 0 <= y;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant (y >= 1) ==> x < \\at(x, LoopEntry);\n*/\n```\n\nHere, the loop invariants are:\n1. y is always non-negative (0 <= y).\n2. The value of x is always less than or equal to its value at the loop entry (x <= \\at(x, LoopEntry)).\n3. If y >= 1, then the value of x decreases in each iteration (x < \\at(x, LoopEntry)). This is because x is updated as x = x - y, and y is positive.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\n1. x = unknown_int();\n2. y = unknown_int();\n3. y >= 1;\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function.\n\nLoop condition: x >= 0\nRanking function: x\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - y;\n    loop invariant y >= 1 ==> x < \\at(x, LoopEntry);\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i2: y >= 1;\nloop invariant i3: \\at(x, LoopEntry) - x >= 0;\nloop invariant i5: y >= 1 ==> y > 0;\nloop invariant i8: 0 <= y;\nloop invariant i9: x <= \\at(x, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (y >= 1) {\n    \t/*@\nloop invariant i2: y >= 1;\nloop invariant i3: \\at(x, LoopEntry) - x >= 0;\nloop invariant i5: y >= 1 ==> y > 0;\nloop invariant i8: 0 <= y;\nloop invariant i9: x <= \\at(x, LoopEntry);\nloop variant x;\n*/\nwhile (x >= 0) {\n\t    \tx = x - y;\n\t    }\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 1 is inductive.\nloop invariant \\at(x, LoopEntry) - x >= 0 is inductive.\nloop invariant y >= 1 ==> y > 0 is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c"
        ],
        "skipped": [],
        "total": 38,
        "success_count": 68,
        "failure_count": 38,
        "success_rate": 1.7894736842105263
    }
}