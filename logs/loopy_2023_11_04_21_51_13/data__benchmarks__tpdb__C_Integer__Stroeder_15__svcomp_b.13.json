{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) || (y > z)) {\n        if (x > z) {\n            x = x - 1;\n        } else {\n            if (y > z) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "(x > z ? x - z : 0) + (y > z ? y - z : 0)"
            ],
            [
                "max(x - z, y - z)"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) || (y > z)) {\n        if (x > z) {\n            x = x - 1;\n        } else {\n            if (y > z) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Identify the loop head: The loop head is `while ((x > z) || (y > z))`.\n\n2. Identify the live variables at the loop head: The live variables are `x`, `y`, and `z`.\n\n3. Analyze the loop body: The loop body contains two branches:\n   - If `x > z`, then `x` is decremented by 1.\n   - If `y > z`, then `y` is decremented by 1.\n   Note that in each iteration, either `x` or `y` is decremented.\n\n4. Find a ranking function: Since either `x` or `y` is decremented in each iteration, we can use the sum of the differences between `x` and `z` and between `y` and `z` as the ranking function. To ensure that the ranking function is positive, we can use the absolute values of the differences. The ranking function is:\n\n```\n(x > z ? x - z : 0) + (y > z ? y - z : 0)\n```\n\n5. Output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (x > z ? x - z : 0) + (y > z ? y - z : 0);\n*/\n```\n\nThis is a valid ranking function because it is positive and decreases with every iteration of the loop, as either `x` or `y` is decremented in each iteration, and the loop terminates when both `(x > z)` and `(y > z)` are false.",
            "First, let's identify the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are initialized with unknown_int() which means they can have any integer value.\n- c is initialized to 0.\n\nNow, let's analyze the loop body:\n- The loop condition is (x > z) || (y > z), so the loop continues executing as long as either x > z or y > z.\n- In the loop body, if x > z, then x is decreased by 1; if y > z, then y is decreased by 1.\n- The variable c is incremented by 1 in each iteration.\n\nA suitable ranking function for this loop is the sum of the differences between x, y, and z when they are greater than z. This ranking function will decrease with each iteration of the loop and will be positive while the loop is executing.\n\nThe ranking function can be expressed as:\n\n```\n/*@\n    loop variant (x > z ? x - z : 0) + (y > z ? y - z : 0);\n*/\n```",
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are assigned unknown integer values at the beginning of the program.\n- c is initially set to 0.\n\nNext, let's analyze the loop body:\n- The loop continues as long as either x > z or y > z.\n- If x > z, x is decremented by 1.\n- If y > z, y is decremented by 1.\n- In each iteration, c is incremented by 1.\n\nNow, let's find a ranking function involving the variables in the loop body. Since x and y are being decremented, we can use the sum of the differences between x, y, and z as the ranking function. However, we need to use the ternary operator to describe the absolute value of an expression:\n\n```\n/*@\n    loop variant (x > z ? x - z : 0) + (y > z ? y - z : 0);\n*/\n```\n\nThis ranking function is valid because:\n- It is positive while the loop is executing since either x > z or y > z.\n- It decreases with every iteration of the loop, as either x or y is decremented.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are assigned values by unknown_int(), so we do not have any specific constraints on their initial values.\n- c starts at 0 and will only increase during the loop execution.\n\nNow, let's analyze the loop body:\n- If x > z, then x is decremented by 1.\n- Else, if y > z, then y is decremented by 1.\n\nWe can now find a ranking function involving the variables in the loop body. A suitable ranking function would be `v = (x > z ? x - z : 0) + (y > z ? y - z : 0)`.\n\nThis ranking function is valid because:\n1. It is positive while the loop is executing, as either x > z or y > z (or both) for the loop to continue.\n2. It decreases with every iteration of the loop, as either x or y is decremented by 1 in each iteration.\n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant (x > z ? x - z : 0) + (y > z ? y - z : 0);\n*/\n```",
            "1. First, let's note the starting values or constraints for the variables that are live at the loop head:\n\nx, y, and z are initialized with unknown_int(). There are no initial constraints on their values.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop continues executing as long as either x > z or y > z. In each iteration, either x is decremented by 1 or y is decremented by 1. So, the ranking function should involve x, y, and z.\n\nA possible ranking function is max(x - z, y - z). This function is positive as long as the loop continues executing because either x > z or y > z must hold true. Moreover, with each iteration of the loop, either x or y is decremented by 1, which means that the value of the ranking function will decrease.\n\nSo, the valid ranking function for this loop is max(x - z, y - z).\n\nNow let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant max(x - z, y - z);\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['(x > z ? x - z : 0) + (y > z ? y - z : 0)']": {
                "variant": [
                    "(x > z ? x - z : 0) + (y > z ? y - z : 0)"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z ==> c >= x - \\at(x, LoopEntry);\n    loop invariant y >= z ==> c >= y - \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant (x > z) ==> (x == \\at(x, LoopEntry) - 1);\n    loop invariant (y > z) ==> (y == \\at(y, LoopEntry) - 1);\n    loop invariant ((x > z ? x - z : 0) + (y > z ? y - z : 0)) >= 0;\n*/",
                    "/*@ \n    loop invariant 0 <= x - \\at(x, LoopEntry) <= \\at(x, LoopEntry) - z;\n    loop invariant 0 <= y - \\at(y, LoopEntry) <= \\at(y, LoopEntry) - z;\n    loop invariant 0 <= c <= \\at(x, LoopEntry) - x + \\at(y, LoopEntry) - y;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z <= \\max(\\at(x, LoopEntry), \\at(y, LoopEntry));\n*/",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant (x > z) ==> (x <= \\at(x, LoopEntry));\n    loop invariant (y > z) ==> (y <= \\at(y, LoopEntry));\n*/",
                    "/*@ \n    loop invariant c >= 0;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant x >= z ==> c >= \\at(x, LoopEntry) - x;\n    loop invariant y >= z ==> c >= \\at(y, LoopEntry) - y;\n    loop invariant x <= z && y <= z ==> c >= \\at(x, LoopEntry) + \\at(y, LoopEntry) - x - y;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression starts decreasing and is positive, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) || (y > z)) {\n        if (x > z) {\n            x = x - 1;\n        } else {\n            if (y > z) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((x > z ? x - z : 0) + (y > z ? y - z : 0))**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the starting values or constraints for the variables that are live at the loop head:\n\n- x, y, and z are initialized with unknown_int(), so their initial values are unknown.\n- c starts at 0.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: (x > z) || (y > z)\n- Ranking function: (x > z ? x - z : 0) + (y > z ? y - z : 0)\n\nNow, we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z ==> c >= x - \\at(x, LoopEntry);\n    loop invariant y >= z ==> c >= y - \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z == \\at(z, LoopEntry);\n*/\n```\n\nThese loop invariants ensure that:\n- The value of c is always non-negative.\n- If x is greater than or equal to z, then the value of c is at least the difference between the initial value of x and its current value.\n- If y is greater than or equal to z, then the value of c is at least the difference between the initial value of y and its current value.\n- The value of x does not increase during the loop execution.\n- The value of y does not increase during the loop execution.\n- The value of z remains constant during the loop execution.\n\nWith these loop invariants, we can prove the termination of the loop and the validity of the given ranking function.",
                    "First, let's analyze the loop condition and body. The loop continues to execute as long as either `x > z` or `y > z`. In each iteration of the loop, if `x > z`, `x` is decremented by 1; otherwise, if `y > z`, `y` is decremented by 1. The given ranking function is `((x > z ? x - z : 0) + (y > z ? y - z : 0))`.\n\nNow let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n1. The value of `z` remains constant throughout the loop.\n2. `x` is non-increasing, and `y` is non-increasing.\n3. If `x > z` at the beginning of the loop iteration, then `x` decreases by 1 in that iteration.\n4. If `y > z` at the beginning of the loop iteration, then `y` decreases by 1 in that iteration.\n5. The ranking function is non-negative.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant (x > z) ==> (x == \\at(x, LoopEntry) - 1);\n    loop invariant (y > z) ==> (y == \\at(y, LoopEntry) - 1);\n    loop invariant ((x > z ? x - z : 0) + (y > z ? y - z : 0)) >= 0;\n*/\n```",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x, y, and z are assigned non-deterministic values using `unknown_int()`.\n- c is initially set to 0.\n\nNow, let's analyze the loop condition and body:\n- Loop condition: (x > z) || (y > z)\n- Loop body:\n  - If x > z, then x is decremented by 1.\n  - Else, if y > z, then y is decremented by 1.\n  - c is incremented by 1 in each iteration.\n\nGiven the loop variant ((x > z ? x - z : 0) + (y > z ? y - z : 0)), we can output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x - \\at(x, LoopEntry) <= \\at(x, LoopEntry) - z;\n    loop invariant 0 <= y - \\at(y, LoopEntry) <= \\at(y, LoopEntry) - z;\n    loop invariant 0 <= c <= \\at(x, LoopEntry) - x + \\at(y, LoopEntry) - y;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y <= \\at(y, LoopEntry);\n    loop invariant z <= \\max(\\at(x, LoopEntry), \\at(y, LoopEntry));\n*/\n```",
                    "First, let's note the initial values and constraints for the variables live at the loop head:\n\n- x, y, and z have arbitrary initial values from the calls to `unknown_int()`.\n- c starts at 0.\n\nNext, let's analyze the loop body and the given ranking function:\n\n- The loop condition is `(x > z) || (y > z)`.\n- The ranking function is `((x > z ? x - z : 0) + (y > z ? y - z : 0))`.\n- In the loop body, x or y are decreased by 1 if they are greater than z. Otherwise, they remain the same.\n- c is incremented by 1 in each loop iteration.\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```c\n/*@ \n    loop invariant 0 <= c;\n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant 0 <= z;\n    loop invariant c <= \\at(x, LoopEntry) + \\at(y, LoopEntry);\n    loop invariant (x > z) ==> (x <= \\at(x, LoopEntry));\n    loop invariant (y > z) ==> (y <= \\at(y, LoopEntry));\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: c is initialized to 0, and x, y, and z have non-negative values from the calls to `unknown_int()`.\n2. In every iteration of the loop: c is incremented, x and y decrease by 1 if they are greater than z, and z remains the same.\n3. After the loop termination: the loop condition is false, meaning both x <= z and y <= z.\n\nThe loop invariants imply that the ranking function decreases with every iteration, proving the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n\n- x, y, and z have unknown initial values.\n- c starts with a value of 0.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function:\n\n- Loop condition: (x > z) || (y > z)\n- Ranking function: ((x > z ? x - z : 0) + (y > z ? y - z : 0))\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n```\n/*@ \n    loop invariant c >= 0;\n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant \\at(y, LoopEntry) >= y;\n    loop invariant \\at(z, LoopEntry) == z;\n    loop invariant \\at(c, LoopEntry) <= c;\n    loop invariant x >= z ==> c >= \\at(x, LoopEntry) - x;\n    loop invariant y >= z ==> c >= \\at(y, LoopEntry) - y;\n    loop invariant x <= z && y <= z ==> c >= \\at(x, LoopEntry) + \\at(y, LoopEntry) - x - y;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: 0 <= c;\nloop invariant i2: x >= z ==> c >= x - \\at(x, LoopEntry);\nloop invariant i3: y >= z ==> c >= y - \\at(y, LoopEntry);\nloop invariant i4: x <= \\at(x, LoopEntry);\nloop invariant i5: y <= \\at(y, LoopEntry);\nloop invariant i6: z == \\at(z, LoopEntry);\nloop invariant i7: \\at(z, LoopEntry) == z;\nloop invariant i10: ((x > z ? x - z : 0) + (y > z ? y - z : 0)) >= 0;\nloop invariant i13: 0 <= c <= \\at(x, LoopEntry) - x + \\at(y, LoopEntry) - y;\nloop invariant i19: (x > z) ==> (x <= \\at(x, LoopEntry));\nloop invariant i20: (y > z) ==> (y <= \\at(y, LoopEntry));\nloop invariant i21: c >= 0;\nloop invariant i22: \\at(x, LoopEntry) >= x;\nloop invariant i23: \\at(y, LoopEntry) >= y;\nloop invariant i24: \\at(c, LoopEntry) <= c;\nloop invariant i25: x >= z ==> c >= \\at(x, LoopEntry) - x;\nloop invariant i26: y >= z ==> c >= \\at(y, LoopEntry) - y;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i1: 0 <= c;\nloop invariant i2: x >= z ==> c >= x - \\at(x, LoopEntry);\nloop invariant i3: y >= z ==> c >= y - \\at(y, LoopEntry);\nloop invariant i4: x <= \\at(x, LoopEntry);\nloop invariant i5: y <= \\at(y, LoopEntry);\nloop invariant i6: z == \\at(z, LoopEntry);\nloop invariant i7: \\at(z, LoopEntry) == z;\nloop invariant i10: ((x > z ? x - z : 0) + (y > z ? y - z : 0)) >= 0;\nloop invariant i13: 0 <= c <= \\at(x, LoopEntry) - x + \\at(y, LoopEntry) - y;\nloop invariant i19: (x > z) ==> (x <= \\at(x, LoopEntry));\nloop invariant i20: (y > z) ==> (y <= \\at(y, LoopEntry));\nloop invariant i21: c >= 0;\nloop invariant i22: \\at(x, LoopEntry) >= x;\nloop invariant i23: \\at(y, LoopEntry) >= y;\nloop invariant i24: \\at(c, LoopEntry) <= c;\nloop invariant i25: x >= z ==> c >= \\at(x, LoopEntry) - x;\nloop invariant i26: y >= z ==> c >= \\at(y, LoopEntry) - y;\nloop variant (x > z ? x - z : 0) + (y > z ? y - z : 0);\n*/\nwhile ((x > z) || (y > z)) {\n        if (x > z) {\n            x = x - 1;\n        } else {\n            if (y > z) {\n                y = y - 1;\n            } else {\n                \n            }\n        }\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant x >= z ==> c >= x - \\at(x, LoopEntry) is inductive.\nloop invariant y >= z ==> c >= y - \\at(y, LoopEntry) is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant y <= \\at(y, LoopEntry) is inductive.\nloop invariant z == \\at(z, LoopEntry) is inductive.\nloop invariant \\at(z, LoopEntry) == z is inductive.\nloop invariant ((x > z ? x - z : 0) + (y > z ? y - z : 0)) >= 0 is inductive.\nloop invariant 0 <= c <= \\at(x, LoopEntry) - x + \\at(y, LoopEntry) - y is inductive.\nloop invariant (x > z) ==> (x <= \\at(x, LoopEntry)) is inductive.\nloop invariant (y > z) ==> (y <= \\at(y, LoopEntry)) is inductive.\nloop invariant c >= 0 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant \\at(y, LoopEntry) >= y is inductive.\nloop invariant \\at(c, LoopEntry) <= c is inductive.\nloop invariant x >= z ==> c >= \\at(x, LoopEntry) - x is inductive.\nloop invariant y >= z ==> c >= \\at(y, LoopEntry) - y is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c"
        ],
        "skipped": [],
        "total": 94,
        "success_count": 147,
        "failure_count": 94,
        "success_rate": 1.5638297872340425
    }
}