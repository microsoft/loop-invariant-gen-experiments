{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\twhile (i < 255) {\n\t\tif (unknown_int()) {\n\t\t\ti = i + 1;\n\t\t} else {\n\t\t\ti = i + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "255 - i"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\twhile (i < 255) {\n\t\tif (unknown_int()) {\n\t\t\ti = i + 1;\n\t\t} else {\n\t\t\ti = i + 2;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. Starting values or constraints for the variables that are live at the loop head:\n   - The variable `i` is live at the loop head, and it can have any integer value, as it is assigned by `unknown_int()`.\n   \n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - The loop condition is `i < 255`.\n   - Inside the loop, `i` is either incremented by 1 or incremented by 2.\n   - Since the loop condition requires `i` to be less than 255, we can use the upper bound 255 and the old value of `i` in every iteration as our ranking function.\n\nThe ranking function for the given program is:\n\n```\n/*@\n    loop variant 255 - i;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head. In this case, the variable `i` is live at the loop head, and its value is unknown since it is assigned the result of the `unknown_int()` function.\n\nNext, we analyze the loop body. There are two possible cases for updating the value of `i`. If `unknown_int()` returns a non-zero value, `i` is incremented by 1; otherwise, it is incremented by 2. In both cases, the value of `i` is increased.\n\nNow, let's find a ranking function involving the variables in the loop body. Since the loop continues executing while `i < 255`, we can use the expression `255 - i` as our ranking function. This function is positive as long as `i < 255`, and it decreases with every iteration of the loop since the value of `i` is incremented.\n\nThe ranking function in ACSL syntax for the given loop is:\n\n```\n/*@\n    loop variant 255 - i;\n*/\n```",
            "First, let's identify the variables that are live at the loop head. In this case, the only variable that is live at the loop head is `i`.\n\nNow, let's analyze the loop body to find a ranking function involving the variable `i`. In every iteration of the loop, `i` is either incremented by 1 or 2, which means that `i` is always increasing. The loop condition is `i < 255`, which means that the loop will execute as long as `i` is less than 255.\n\nBased on this information, we can construct the following ranking function:\n\n```\n/*@\n    loop variant 255 - i;\n*/\n```\n\nThis ranking function is valid because:\n1. It involves the variable `i`, which is live at the loop head.\n2. It decreases with every iteration of the loop, as `i` is always incremented by either 1 or 2.\n3. It is positive while the loop is executing, as `i < 255` implies `255 - i > 0`.\n4. It ensures the termination of the loop, as the value of `i` must eventually reach 255 or greater, causing the loop condition to become false and the loop to exit.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head. In this case, the only variable live at the loop head is `i`, and it has an unknown starting value since it is assigned by `unknown_int()`.\n\nNow, let's analyze the loop body. The loop continues to execute as long as `i < 255`. Inside the loop, `i` is incremented by either 1 or 2 depending on the value of `unknown_int()`. Since `i` is always incremented by at least 1 in every iteration, the value of `i` will keep increasing until it is no longer less than 255.\n\nConsidering this, we can find a ranking function involving the variable `i`. A valid ranking function should be decreasing with every iteration and evaluate to a positive value while the loop is executing.\n\nA suitable ranking function is the difference between the upper bound (255) and the current value of `i`. This ranking function is decreasing with every iteration because `i` is always increasing, and it evaluates to a positive value as long as `i < 255`.\n\nTherefore, the ranking function for this loop is:\n\n```\n/*@\n    loop variant 255 - i;\n*/\n```",
            "1. Starting values or constraints for the variables that are live at the loop head:\n\n`i` is an integer assigned an unknown value.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n\nThe loop condition is `i < 255`. Inside the loop, `i` is always increasing by either 1 or 2. The loop will keep executing until `i >= 255`.\n\n3. Output the ranking function in one code block, in ACSL syntax:\n\nThe ranking function should be an expression that decreases with every iteration and is positive while the loop is executing. A suitable ranking function for this loop would be `255 - i`, as it will decrease with every iteration and will be positive as long as `i < 255`. \n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant 255 - i;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['255 - i']": {
                "variant": [
                    "255 - i"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 255;\n    loop invariant 255 - i >= 0;\n    loop invariant \\at(255 - i, LoopEntry) >= 255 - i;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i < 255;\n*/",
                    "/*@ \n    loop invariant 0 <= \\at(i, LoopEntry);\n    loop invariant \\at(i, LoopEntry) <= 255;\n    loop invariant i >= \\at(i, LoopEntry);\n    loop invariant i <= 255;\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 255;\n    loop invariant i >= \\at(i, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 255;\n    loop invariant \\at(i, LoopEntry) <= i;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\twhile (i < 255) {\n\t\tif (unknown_int()) {\n\t\t\ti = i + 1;\n\t\t} else {\n\t\t\ti = i + 2;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(255 - i)**, for the loop in the program above. Let's think step by step."
                    },
                    "In the code above, the variable `i` is live at the loop head. \n\nSince `i` is obtained from `unknown_int()`, it can be any integer. \n\nThe loop condition is `i < 255`.\n\nThe loop body increases `i` by either 1 or 2, depending on the return value of `unknown_int()`.\n\nThe given ranking function is `255 - i`. This function is always non-negative because `i` is always less than 255 due to the loop condition. The function decreases with every iteration because `i` increases with every iteration. \n\nLet's find the loop invariants that support these conclusions:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 255;\n    loop invariant 255 - i >= 0;\n    loop invariant \\at(255 - i, LoopEntry) >= 255 - i;\n*/\n```\n\nThe first two invariants bound the value of `i`.\n\nThe third invariant restates the fact that the ranking function is always non-negative.\n\nThe fourth invariant states that the ranking function decreases with every iteration.",
                    "- The only variable that is live at the loop head is \"i\". \n- The loop condition is \"i < 255\". This means that the loop will terminate when \"i\" is not less than 255.\n- The given ranking function is \"255 - i\". We know that the ranking function should be non-negative and decrease with every iteration of the loop. \"255 - i\" is non-negative as long as \"i\" is less than or equal to 255.\n- In the body of the loop, \"i\" is incremented by 1 or 2. Thus, \"i\" increases with every iteration of the loop, causing \"255 - i\" to decrease.\n\nThe loop invariants that can be deduced from this analysis are:\n- \"i\" is non-negative at the beginning of the loop and after every iteration of the loop. This is true because \"i\" starts with a non-negative value (it is assigned the return value of unknown_int(), which we assume to be non-negative) and is only incremented in the loop.\n- \"i\" is less than 255 at the beginning of the loop and after every iteration of the loop. This is true because the loop condition is \"i < 255\", so if \"i\" becomes equal to or greater than 255, the loop will terminate.\n\nHere are the loop invariants in code form:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i < 255;\n*/\n```",
                    "The loop condition is `(i < 255)`. The loop variant is `(255 - i)`. The variable `i` is live at the loop head. \n\nBefore the loop execution, `i` can be any integer (since it's from `unknown_int()`), there are no constraints on `i`. \n\nDuring each iteration, the value of `i` is increased by 1 or 2.\n\nThe loop invariant that holds true before and after every iteration is that `i` is always less than or equal to `255`.\n\nHere are the loop invariants:\n```\n/*@ \n    loop invariant 0 <= \\at(i, LoopEntry);\n    loop invariant \\at(i, LoopEntry) <= 255;\n    loop invariant i >= \\at(i, LoopEntry);\n    loop invariant i <= 255;\n*/\n```",
                    "The starting value of the variable 'i' is unknown. It can be any integer. \n\nThe loop condition is 'i < 255'. \n\nThe ranking function given is '255 - i'. \n\nLet's analyze the loop body. \nIn every iteration, the value of 'i' is incremented by either 1 or 2. \n\nThe loop invariants that support the validity of the ranking function and prove the termination of the loop are: \n- 'i' is always non-negative.\n- 'i' is always less than 255.\n- The value of 'i' at the end of an iteration is always greater than its value at the beginning of the iteration.\n\nOutput the loop invariants as follows:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant i <= 255;\n    loop invariant i >= \\at(i, LoopEntry);\n*/\n```",
                    "We begin with the following information:\n- The loop condition is **i < 255**.\n- The loop variant is **(255 - i)**.\n- The variable **i** is live at the loop head.\n- The variable **i** is non-negative and it increases with every iteration of the loop.\n\nFrom this information, we can deduce the following loop invariants:\n\n- **i** is always less than or equal to 255. This is because the loop condition ensures that **i** cannot be greater than or equal to 255.\n- **i** is non-negative. This is because **i** is initialized to an unknown integer, and it only increases in the loop. Even if the unknown integer is negative, **i** will eventually become non-negative after enough iterations.\n- The value of **i** at the loop entry is less than or equal to the value of **i** at the end of the loop iteration. This is because **i** only increases in the loop.\n\nTherefore, we have the following loop invariants:\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 255;\n    loop invariant \\at(i, LoopEntry) <= i;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i4: \\at(255 - i, LoopEntry) >= 255 - i;\nloop invariant i8: i >= \\at(i, LoopEntry);\nloop invariant i10: \\at(i, LoopEntry) <= i;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint i = unknown_int();\n\t/*@\nloop invariant i4: \\at(255 - i, LoopEntry) >= 255 - i;\nloop invariant i8: i >= \\at(i, LoopEntry);\nloop invariant i10: \\at(i, LoopEntry) <= i;\nloop variant 255 - i;\n*/\nwhile (i < 255) {\n\t\tif (unknown_int()) {\n\t\t\ti = i + 1;\n\t\t} else {\n\t\t\ti = i + 2;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(255 - i, LoopEntry) >= 255 - i is inductive.\nloop invariant i >= \\at(i, LoopEntry) is inductive.\nloop invariant \\at(i, LoopEntry) <= i is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 1.6521739130434783
    }
}