{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, n;\n\tn = unknown_int();\n    i = n - 1;\n\twhile (i > 1) {\n\t\ti = i - 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "i"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, n;\n\tn = unknown_int();\n    i = n - 1;\n\twhile (i > 1) {\n\t\ti = i - 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "1. The variable `i` starts at `n - 1` and decreases by 1 in every iteration of the loop.\n2. The loop continues as long as `i > 1`.\n3. This means that `i` can take on any value from `n - 1` down to `2`.\n\nHence, the ranking function for the loop is `i`.\n\nTo validate this, we need to check two conditions:\n\n1. `i` is positive when the loop is executing: This is true because the loop continues as long as `i > 1`.\n2. `i` decreases with every iteration of the loop: This is also true because `i` is decremented by 1 in every iteration of the loop.\n\nTherefore, `i` is a valid ranking function for the loop in the given program.\n\nIn ACSL syntax, this can be represented as:\n```\n/*@\n    loop variant i;\n*/\n```",
            "The variable `i` is live at the loop head and it is initialized as `n - 1` before entering the loop. Within the loop, `i` is decremented by 1 in each iteration. \n\nTherefore, the ranking function for this loop can be `i`.\n\nThe value of `i` is positive as the loop continues to execute (`i > 1`). It decreases with each loop iteration since `i` is decremented by 1 at each step (`i = i - 1`). Hence, `i` is a valid ranking function for this loop.\n\nThe program can be annotated as follows to include the ranking function:\n\n```c\n/*@\n    loop invariant i >= 1;\n    loop variant i;\n*/\nwhile (i > 1) {\n    i = i - 1;\n}\n```",
            "The loop in the program decreases the variable `i` by `1` in every iteration until `i` is no longer greater than `1`. \n\nAt the start of the program, `i` is `n - 1`. Therefore, the upper bound of `i` is `n - 1`. \n\nSince `i` decreases by `1` in every iteration, we can say that the value of `i` in the current iteration is less than the value of `i` in the previous iteration. \n\nTherefore, the ranking function for this loop can be `i`, as it decreases with every iteration and is positive while the loop is executing.\n\nThe ACSL syntax for the ranking function would be:\n\n```\n/*@\n    loop variant i;\n*/\n``` \n\nThis ranking function is valid because it decreases with each iteration (as `i` is decremented by 1 in each loop), and is positive as long as the loop condition `i > 1` is true. Hence, it guarantees the termination of the loop.",
            "- First, we make a note of the starting values or constraints for the variables that are live at the loop head. The variable `i` is live at the loop head and its value is `n-1`, where `n` is a non-deterministic integer. The loop condition is `i > 1`.\n\n- Next, we look at the loop body to find the ranking function. The variable `i` is decremented by `1` in every iteration of the loop.\n\n- Therefore, a possible ranking function for this loop is the value of `i` itself. This is because `i` is guaranteed to be positive (since the loop condition is `i > 1`) and it decreases with every iteration (since `i` is decremented by `1` in the loop body).\n\nTherefore, the ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant i;\n*/\n```\nThis is a valid ranking function because it is positive and strictly decreasing with each iteration of the loop, ensuring that the loop must eventually terminate.",
            "The loop starts with `i` as `n - 1` and in each iteration of the loop, `i` is decremented by 1. So `i` is always decreasing. The loop continues to execute as long as `i` is greater than 1. Therefore, `i` is a valid ranking function as it decreases with each iteration and is positive as long as the loop continues to execute.\n\nThe ranking function in ACSL syntax would be:\n\n```c\n/*@\n    loop variant i;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['i']": {
                "variant": [
                    "i"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 1 <= \\at(i, LoopEntry) < n;\n    loop invariant 1 <= i < n;\n    loop invariant i <= \\at(i, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 1 <= i <= n;\n    loop invariant n == \\at(n, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n - 1;\n    loop invariant i == \\at(i, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant 1 <= i <= n - 1;\n    loop invariant i <= \\at(i, LoopEntry);\n*/",
                    "/*@ \n    loop invariant 1 <= i <= n - 1;\n    loop invariant i <= n;\n    loop invariant 0 <= n;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, n;\n\tn = unknown_int();\n    i = n - 1;\n\twhile (i > 1) {\n\t\ti = i - 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(i)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the starting values of the variables and the loop condition. At the beginning of the loop, `i` is equal to `n - 1`, and the loop condition is `i > 1`. The given ranking function is `(i)`.\n\nNow, we can output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 1 <= \\at(i, LoopEntry) < n;\n    loop invariant 1 <= i < n;\n    loop invariant i <= \\at(i, LoopEntry);\n*/\n```",
                    "First, let's analyze the program and identify the loop head, variables, and the loop condition.\n\n- The loop head is the `while (i > 1)` statement.\n- The variables live at the loop head are `i` and `n`.\n- The loop condition is `i > 1`.\n\nNow, let's consider the given ranking function (i). We need to find loop invariants that support the validity of this ranking function and prove the termination of the loop.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= n;\n    loop invariant n == \\at(n, LoopEntry);\n*/\n```\n\nThese loop invariants satisfy the following conditions:\n\n1. They hold before the loop execution:\n   - `1 <= i <= n`: Before the loop, `i = n - 1`, so `i` is between 1 and n (inclusive) since `n` is non-negative.\n   - `n == \\at(n, LoopEntry)`: Before the loop, the value of `n` has not changed.\n   \n2. They hold in every iteration of the loop:\n   - `1 <= i <= n`: In each iteration, `i` is decremented by 1, so it remains between 1 and n (inclusive).\n   - `n == \\at(n, LoopEntry)`: The value of `n` does not change during the loop execution.\n   \n3. They hold after the loop termination:\n   - `1 <= i <= n`: After the loop, `i` is no longer greater than 1, so it must be 1. Thus, `1 <= i <= n`.\n   - `n == \\at(n, LoopEntry)`: The value of `n` remains unchanged after the loop termination.\n\nThese loop invariants imply that the ranking function (i) decreases with every iteration, proving the termination of the loop.",
                    "First, let's analyze the program and gather some information:\n\n1. The loop condition is `i > 1`.\n2. The loop body decreases the value of `i` by 1 in each iteration.\n3. The loop variant (ranking function) is `i`.\n\nNow, let's find loop invariants to support the loop variant:\n\n- The value of `i` is always non-negative: Since `i` is initialized to `n - 1` and the loop condition is `i > 1`, we can infer that `i` is always non-negative.\n- The value of `i` decreases with each iteration: This is clear from the loop body, as `i` is decremented by 1 in each iteration.\n\nTaking into account these observations, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= n - 1;\n    loop invariant i == \\at(i, LoopEntry) - 1;\n*/\n```",
                    "First, let's identify the loop head, loop condition, and loop body:\n\n- Loop head: `while (i > 1)`\n- Loop condition: `i > 1`\n- Loop body: `i = i - 1`\n\nNow let's write the loop invariants for the given ranking function (i):\n\n```\n/*@ \n    loop invariant 1 <= i <= n - 1;\n    loop invariant i <= \\at(i, LoopEntry);\n*/\n```",
                    "First, let's identify the loop and its condition. The loop starts with `while (i > 1)` and the loop condition is `i > 1`. The loop variant given is `(i)`.\n\nNow, let's identify the starting values and constraints for the variables that are live at the loop head:\n- `i` starts with the value `n - 1`.\n- `n` is an unknown integer returned by the `unknown_int()` function.\n\nWe can now analyze the loop body and find the loop invariants:\n\n```\n/*@ \n    loop invariant 1 <= i <= n - 1;\n    loop invariant i <= n;\n    loop invariant 0 <= n;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i3: i <= \\at(i, LoopEntry);\nloop invariant i5: n == \\at(n, LoopEntry);\nloop invariant i7: i <= n - 1;\nloop invariant i10: i <= n;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, n;\n\tn = unknown_int();\n    i = n - 1;\n\t/*@\nloop invariant i3: i <= \\at(i, LoopEntry);\nloop invariant i5: n == \\at(n, LoopEntry);\nloop invariant i7: i <= n - 1;\nloop invariant i10: i <= n;\nloop variant i;\n*/\nwhile (i > 1) {\n\t\ti = i - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= \\at(i, LoopEntry) is inductive.\nloop invariant n == \\at(n, LoopEntry) is inductive.\nloop invariant i <= n - 1 is inductive.\nloop invariant i <= n is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c"
        ],
        "skipped": [],
        "total": 35,
        "success_count": 62,
        "failure_count": 35,
        "success_rate": 1.7714285714285714
    }
}