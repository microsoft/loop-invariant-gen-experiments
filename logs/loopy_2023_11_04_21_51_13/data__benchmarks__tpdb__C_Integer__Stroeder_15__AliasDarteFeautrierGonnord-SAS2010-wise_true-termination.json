{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (x >= 0 && y >= 0) {\n\t\twhile (x - y > 2 || y - x > 2) {\n\t\t\tif (x < y) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {\n\t\t\t\ty = y + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "abs(x - y)"
            ],
            [
                "(x < y) ? y - x : x - y"
            ],
            [
                "x - y > 2 ? x - y : y - x"
            ],
            [
                "x > y ? x - y : y - x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (x >= 0 && y >= 0) {\n\t\twhile (x - y > 2 || y - x > 2) {\n\t\t\tif (x < y) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {\n\t\t\t\ty = y + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's take note of the starting values or constraints for the variables that are live at the loop head. Here, `x` and `y` are the variables live at the loop head. They are both non-negative integers, as stated in the `if (x >= 0 && y >= 0)` condition.\n\nNext, let's analyze the loop body to find a ranking function. The loop condition is `x - y > 2 || y - x > 2`, which means the loop continues as long as the absolute difference between `x` and `y` is greater than 2. In each iteration of the loop, either `x` or `y` is incremented by 1, which decreases the absolute difference between `x` and `y`. Thus, the absolute difference between `x` and `y` can serve as a ranking function.\n\nSo, the ranking function in this case can be `abs(x - y)`.\n\nThis is a valid ranking function because it decreases with every iteration of the loop (since `x` or `y` is incremented in each iteration, the absolute difference between them decreases), and it is positive while the loop continues executing (since the loop condition requires the absolute difference to be greater than 2).\n\nIn ACSL syntax, the ranking function can be written as:\n\n```\n/*@\n    loop variant abs(x - y);\n*/\n```\n\nNote: The `abs` function represents the absolute value, which is a function that is generally available in most programming languages. In the context of the ACSL specification language, it is permissible to use this function even if it is not explicitly defined in the program.",
            "The loop continues to execute as long as the absolute difference between x and y is greater than 2. Inside the loop, the value of x is incremented if it is less than y, and the value of y is incremented otherwise. This means that in each iteration of the loop, the absolute difference between x and y is reduced by 1.\n\nSince x and y are both non-negative and the loop continues as long as |x - y| > 2, a suitable ranking function would be the absolute difference between x and y itself.\n\nIn the ACSL syntax, the ranking function can be represented as follows:\n\n```\n/*@\n    loop variant (x < y) ? y - x : x - y;\n*/\n```\n\nThis ranking function is valid because it always decreases with every iteration of the loop (as the difference between x and y is reduced by 1), and it is positive while the loop is executing (since the loop condition requires |x - y| > 2).",
            "- The variables that are live at the loop head are `x` and `y`.\n\n- The loop condition checks the absolute value of the difference between `x` and `y`.\n\n- Inside the loop, either `x` or `y` is incremented by 1, which decreases the absolute value of the difference between `x` and `y`.\n\n- The absolute value of the difference between `x` and `y` is a suitable ranking function. It is always positive while the loop is executing, and it decreases with every iteration of the loop.\n\nTherefore, the ranking function for the loop is `x - y > 2 ? x - y : y - x`.\n\nUsing ACSL syntax, we can represent the ranking function as follows:\n\n```\n/*@\n    loop variant x - y > 2 ? x - y : y - x;\n*/\n```",
            "The loop in the program continues to execute as long as the absolute difference between x and y is greater than 2. During each iteration of the loop, either x or y is incremented by 1, depending on whether x is less than y or not. \n\nHere's our ranking function:\n```\n/*@\n    loop variant (x < y) ? y - x : x - y;\n*/\n```\nThis is a valid ranking function because it decreases with each iteration of the loop. If x is less than y, then y - x will be a positive integer, and since x is incremented by 1 in the next iteration, y - x will decrease. Similarly, if y is less than x, then x - y is a positive integer, and since y is incremented by 1 in the next iteration, x - y will decrease. \n\nAlso, as long as the loop continues to execute, the ranking function will evaluate to a positive value because the loop condition requires that the absolute difference between x and y is greater than 2.",
            "The variables that are live at the loop head are `x` and `y`. \n\nThe loop condition is `x - y > 2 || y - x > 2`. This means that the loop continues as long as the absolute difference between `x` and `y` is greater than 2.\n\nIn the loop body, `x` is incremented if `x < y` and `y` is incremented otherwise. This means that the absolute difference between `x` and `y` is decreasing in every loop iteration.\n\nTherefore, a possible ranking function could be the absolute difference between `x` and `y`, expressed as `x > y ? x - y : y - x`.\n\nThe ranking function is positive and decreasing with each loop iteration, which is required for the loop to terminate. Therefore, it is a valid ranking function.\n\nIn ACSL syntax, the ranking function can be expressed as:\n```\n/*@\n    loop variant x > y ? x - y : y - x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['abs(x - y)']": {
                "variant": [
                    "abs(x - y)"
                ],
                "error": "All variant candidates have annotation errors",
                "success": false
            },
            "['(x < y) ? y - x : x - y']": {
                "variant": [
                    "(x < y) ? y - x : x - y"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant (x - y > 2 || y - x > 2) ==> ((x < y) ? y - x : x - y) < \\at(((x < y) ? y - x : x - y), LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant (\\at(x, LoopEntry) >= 0 && \\at(y, LoopEntry) >= 0) ==> (x - y > 2 || y - x > 2);\n    loop invariant (x < y) ==> (y - x == \\at(((x < y) ? y - x : x - y), LoopEntry) - 1);\n    loop invariant (x >= y) ==> (x - y == \\at(((x < y) ? y - x : x - y), LoopEntry) - 1);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x - y > 2 ==> x == \\at(x, LoopEntry) - 1;\n    loop invariant y - x > 2 ==> y == \\at(y, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x - y > 2 ==> x >= y + 3;\n    loop invariant y - x > 2 ==> y >= x + 3;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x - \\at(x, LoopEntry) <= 1;\n    loop invariant y - \\at(y, LoopEntry) <= 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (x >= 0 && y >= 0) {\n\t\twhile (x - y > 2 || y - x > 2) {\n\t\t\tif (x < y) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {\n\t\t\t\ty = y + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **((x < y) ? y - x : x - y)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- x and y are both non-negative (x >= 0 && y >= 0).\n\nNext, let's analyze the loop condition and the given ranking function:\n- Loop condition: (x - y > 2 || y - x > 2)\n- Ranking function: ((x < y) ? y - x : x - y)\n\nNow, let's output the loop invariants that support the validity of the ranking function and imply that it decreases with every iteration:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant \\at(y, LoopEntry) >= 0;\n    loop invariant (x - y > 2 || y - x > 2) ==> ((x < y) ? y - x : x - y) < \\at(((x < y) ? y - x : x - y), LoopEntry);\n*/\n```",
                    "First, we note the initial values and constraints for the variables live at the loop head:\n\n- x and y are non-negative (x >= 0 and y >= 0).\n\nNext, we analyze the loop condition and the given ranking function:\n\n- Loop condition: (x - y > 2) || (y - x > 2)\n- Ranking function: ((x < y) ? y - x : x - y)\n\nNow, we output the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant (\\at(x, LoopEntry) >= 0 && \\at(y, LoopEntry) >= 0) ==> (x - y > 2 || y - x > 2);\n    loop invariant (x < y) ==> (y - x == \\at(((x < y) ? y - x : x - y), LoopEntry) - 1);\n    loop invariant (x >= y) ==> (x - y == \\at(((x < y) ? y - x : x - y), LoopEntry) - 1);\n*/\n```\n\nThese loop invariants hold:\n\n1. Before the loop execution: x and y are non-negative.\n2. In every iteration of the loop: x and y remain non-negative, and if the loop condition holds at the beginning of the loop, then the difference between x and y decreases by 1 in each iteration (either x increases or y increases).\n3. After the loop termination: the loop terminates when the difference between x and y becomes less than or equal to 2.",
                    "First, let's analyze the given program. The loop condition is (x - y > 2 || y - x > 2), and the loop body updates either x or y based on their relative values. The loop variant is ((x < y) ? y - x : x - y), which means we need to show that this expression decreases with every iteration.\n\nNow, let's derive the loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x - y > 2 ==> x == \\at(x, LoopEntry) - 1;\n    loop invariant y - x > 2 ==> y == \\at(y, LoopEntry) - 1;\n*/\n```",
                    "We will first make note of the starting values or constraints for the variables that are live at the loop head.\n\n- x and y are both non-negative integers because of the condition `if (x >= 0 && y >= 0)`.\n\nNext, we analyze the loop body and make a note of the loop condition and the given ranking function.\n\n- Loop condition: `x - y > 2 || y - x > 2`\n- Given ranking function: `((x < y) ? y - x : x - y)`\n\nNow, we will output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant 0 <= y;\n    loop invariant x - y > 2 ==> x >= y + 3;\n    loop invariant y - x > 2 ==> y >= x + 3;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n- x and y are non-negative (x >= 0, y >= 0).\n\nNext, let's analyze the loop condition and the given ranking function:\n- Loop condition: (x - y > 2 || y - x > 2)\n- Ranking function: ((x < y) ? y - x : x - y)\n\nNow, let's output the loop invariants that support the given ranking function:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x - \\at(x, LoopEntry) <= 1;\n    loop invariant y - \\at(y, LoopEntry) <= 1;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: \\at(x, LoopEntry) >= 0;\nloop invariant i4: \\at(y, LoopEntry) >= 0;\nloop invariant i6: 0 <= x;\nloop invariant i7: 0 <= y;\nloop invariant i13: x - y > 2 ==> x >= y + 3;\nloop invariant i14: y - x > 2 ==> y >= x + 3;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\tif (x >= 0 && y >= 0) {\n\t\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: y >= 0;\nloop invariant i3: \\at(x, LoopEntry) >= 0;\nloop invariant i4: \\at(y, LoopEntry) >= 0;\nloop invariant i6: 0 <= x;\nloop invariant i7: 0 <= y;\nloop invariant i13: x - y > 2 ==> x >= y + 3;\nloop invariant i14: y - x > 2 ==> y >= x + 3;\nloop variant (x < y) ? y - x : x - y;\n*/\nwhile (x - y > 2 || y - x > 2) {\n\t\t\tif (x < y) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {\n\t\t\t\ty = y + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is inductive.\nloop invariant \\at(x, LoopEntry) >= 0 is inductive.\nloop invariant \\at(y, LoopEntry) >= 0 is inductive.\nloop invariant 0 <= x is inductive.\nloop invariant 0 <= y is inductive.\nloop invariant x - y > 2 ==> x >= y + 3 is inductive.\nloop invariant y - x > 2 ==> y >= x + 3 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c"
        ],
        "skipped": [],
        "total": 38,
        "success_count": 68,
        "failure_count": 38,
        "success_rate": 1.7894736842105263
    }
}