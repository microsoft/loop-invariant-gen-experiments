{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int p, q;\n\tq = unknown_int();\n\tp = unknown_int();\n\twhile (q > 0 && p > 0 && p != q) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "p + q"
            ],
            [
                "(p > q) ? (p - q) : (q - p)"
            ],
            [
                "q + p"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int p, q;\n\tq = unknown_int();\n\tp = unknown_int();\n\twhile (q > 0 && p > 0 && p != q) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the loop variables and the loop condition:\n- Loop variables: `p` and `q`\n- Loop condition: `q > 0 && p > 0 && p != q`\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, either `q` is decremented by 1 or `p` is decremented by 1, depending on which one is greater. This means that in every iteration, either `p` or `q` decreases, but never both.\n\nWe can use the sum of `p` and `q` as the ranking function, as it will always decrease in every iteration. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant p + q;\n*/\n```\n\nThis ranking function is valid because:\n1. The value of the ranking function is positive while the loop is executing, as both `p` and `q` are positive.\n2. The value of the ranking function decreases with every iteration, as either `p` or `q` is decremented by 1 in each iteration.",
            "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\nThe variables `p` and `q` are initialized with unknown integer values, so we don't have a specific constraint for them at the beginning.\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body.\n\nThe loop condition is `q > 0 && p > 0 && p != q`. In the loop body, either `q` is decremented by 1 or `p` is decremented by 1 in each iteration. \n\nSince the loop continues as long as `q > 0 && p > 0 && p != q`, we can create a ranking function based on the absolute difference between `p` and `q`. The ranking function will decrease with each iteration since either `p` or `q` is decremented, and it will always be positive as long as the loop is executing because `p` and `q` are positive and not equal.\n\nThe ranking function is `abs(p - q)`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (p > q) ? (p - q) : (q - p);\n*/\n```",
            "First, we note the starting values or constraints for the variables that are live at the loop head:\n\n1. `p` is initialized with an unknown integer value.\n2. `q` is initialized with an unknown integer value.\n\nNow, let's analyze the loop body:\n\n1. The loop continues executing as long as `q > 0`, `p > 0`, and `p != q`.\n2. If `q < p`, then `q` is decremented by 1.\n3. If `p < q`, then `p` is decremented by 1.\n\nBased on this analysis, we can find a ranking function involving the variables in the loop body:\n\n```\n/*@\n    loop variant q + p;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the ranking function `q + p` is always positive as long as the loop is executing since both `q > 0` and `p > 0` are conditions for the loop to continue.\n2. The value of the ranking function `q + p` decreases with every iteration of the loop since either `q` or `p` is decremented by 1 in each iteration, and they cannot both be incremented at the same time.",
            "First, let's identify the loop head and the variables live at the loop head. The loop head is the while statement, and the live variables are `p` and `q`. The loop condition is `q > 0 && p > 0 && p != q`.\n\nNow, let's analyze the loop body. In each iteration, either `q` is decremented by 1 if `q < p`, or `p` is decremented by 1 if `p < q`. The loop terminates when `q <= 0`, `p <= 0`, or `p == q`.\n\nWe can construct a ranking function using the variables `p` and `q`. Since either `p` or `q` is decremented in each iteration, the sum `p + q` will decrease with every iteration of the loop. Also, both `p` and `q` are positive integers, so the sum `p + q` will be positive while the loop is executing.\n\nTherefore, the ranking function is `p + q`. In ACSL syntax, the loop variant is:\n\n```\n/*@\n    loop variant p + q;\n*/\n```\n\nThis ranking function is valid because it decreases with every iteration of the loop and is positive while the loop is executing, which satisfies the requirements for proving loop termination.",
            "First, make note of the starting values or constraints for the variables that are live at the loop head:\n- q is an unknown integer\n- p is an unknown integer\n\nNow, analyze the loop body and find a ranking function involving the variables in the loop body:\n\nIn the loop body, either q is decremented by 1 or p is decremented by 1. Hence, the sum (p + q) is always decreasing with each iteration of the loop. As long as p and q are both positive and not equal, the loop will continue executing.\n\nTherefore, a valid ranking function for the loop is the sum of p and q:\n\n```\n/*@\n    loop variant p + q;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['p + q']": {
                "variant": [
                    "p + q"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant \\at(p, LoopEntry) + \\at(q, LoopEntry) >= p + q;\n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant q != p;\n*/",
                    "/*@ \n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant \\at(q, LoopEntry) >= q ==> q == \\at(q, LoopEntry) - 1;\n    loop invariant \\at(p, LoopEntry) >= p ==> p == \\at(p, LoopEntry) - 1;\n    loop invariant p == 0 || q == 0 || p == q;\n*/",
                    "/*@ \n  loop invariant p >= 0;\n  loop invariant q >= 0;\n  loop invariant p + q >= 0;\n  loop invariant p != \\at(p, LoopEntry) ==> p == \\at(p, LoopEntry) - 1;\n  loop invariant q != \\at(q, LoopEntry) ==> q == \\at(q, LoopEntry) - 1;\n  loop invariant p == \\at(p, LoopEntry) ==> q == \\at(q, LoopEntry) - 1;\n  loop invariant q == \\at(q, LoopEntry) ==> p == \\at(p, LoopEntry) - 1;\n*/",
                    "/*@ \n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant p + q >= \\at(p + q, LoopEntry);\n*/",
                    "/*@ \n    loop invariant \\at(p, LoopEntry) >= 0;\n    loop invariant \\at(q, LoopEntry) >= 0;\n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant p != q ==> p > 0 && q > 0;\n    loop invariant \\at((p + q), LoopEntry) >= p + q;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int p, q;\n\tq = unknown_int();\n\tp = unknown_int();\n\twhile (q > 0 && p > 0 && p != q) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(p + q)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The loop condition is **q > 0 && p > 0 && p != q**.\n- The loop variant is **p + q** which is non-negative and decreases with each iteration of the loop.\n- The variables in the loop variant are **p** and **q**.\n- **p** and **q** are both initialized with unknown_int() function which can return any integer value.\n- In the loop body, if **q** is less than **p**, **q** is decremented. Otherwise, if **p** is less than **q**, **p** is decremented.\n\nWith this information, we can now list down the loop invariants that support the loop variant **p + q** and the loop termination:\n\n```\n/*@ \n    loop invariant \\at(p, LoopEntry) + \\at(q, LoopEntry) >= p + q;\n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant q != p;\n*/\n```\n\n- The first loop invariant states that the sum of **p** and **q** at the loop entry is always greater than or equal to the sum of **p** and **q** in any iteration of the loop, which means the loop variant decreases with every iteration.\n- The second and third loop invariants state that **p** and **q** are always non-negative, which is a requirement for the loop variant to be non-negative.\n- The fourth loop invariant states that **p** is not equal to **q**, which is a part of the loop condition.",
                    "This loop decreases the values of p and q in every iteration, and they are always non-negative. That means, the variant (p + q) is a non-negative integer that decreases with every loop iteration, proving the termination of the loop.\n\nLet's create the loop invariants for this loop:\n\n- Before the loop execution, p and q are non-negative integers, as they are given by the function `unknown_int()`.\n- In every iteration of the loop, p and q are non-negative integers.\n- If q < p at the loop head, q decreases by 1 in the loop body.\n- If p < q at the loop head, p decreases by 1 in the loop body.\n- After the loop termination, p and q are either 0 or equal to each other.\n\nWe can now write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant \\at(q, LoopEntry) >= q ==> q == \\at(q, LoopEntry) - 1;\n    loop invariant \\at(p, LoopEntry) >= p ==> p == \\at(p, LoopEntry) - 1;\n    loop invariant p == 0 || q == 0 || p == q;\n*/\n```",
                    "We first identify the constraints on the variables at the start of the loop. The variables p and q are initialized with some unknown value and there are no constraints on them. \n\nThe loop condition is (q > 0 && p > 0 && p != q) which means the loop continues as long as both p and q are positive and not equal to each other.\n\nThe loop variant is (p + q). The variant decreases in every loop iteration. If q < p, q is decreased by 1. If p < q, p is decreased by 1. This ensures that the variant (p + q) decreases with every iteration and the loop terminates when p and q are zero or equal to each other.\n\nFollowing are the loop invariants that support the loop variant and prove the loop termination:\n\n```\n/*@ \n  loop invariant p >= 0;\n  loop invariant q >= 0;\n  loop invariant p + q >= 0;\n  loop invariant p != \\at(p, LoopEntry) ==> p == \\at(p, LoopEntry) - 1;\n  loop invariant q != \\at(q, LoopEntry) ==> q == \\at(q, LoopEntry) - 1;\n  loop invariant p == \\at(p, LoopEntry) ==> q == \\at(q, LoopEntry) - 1;\n  loop invariant q == \\at(q, LoopEntry) ==> p == \\at(p, LoopEntry) - 1;\n*/\n```\n\nHere,\n- The first three invariants assert that p and q are non-negative, and their sum is also non-negative.\n- The next two invariants state that if p or q changes in an iteration, it decreases by exactly 1.\n- The last two invariants state that if p does not change, then q decreases by 1, and vice versa. This ensures that the loop variant (p + q) decreases in each iteration.",
                    "The program variables that are live at the loop head are `p` and `q`.\nThe loop condition is `q > 0 && p > 0 && p != q`.\nIn each iteration of the loop, if `q < p`, `q` is decremented by 1, else if `p < q`, `p` is decremented by 1.\nThe given ranking function is `p + q`.\n\nBefore the loop execution, the invariant is that `p` and `q` are non-negative integers.\n\nIn every iteration of the loop, if `q < p`, `q` is decremented by 1, so the value of `p + q` decreases. Similarly, if `p < q`, `p` is decremented by 1, so the value of `p + q` also decreases.\n\nAfter the loop termination, one of `p` or `q` is 0, and the other is a non-negative integer.\n\nThe loop invariants can be written as follows:\n```\n/*@ \n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant p + q >= \\at(p + q, LoopEntry);\n*/\n```",
                    "- **Starting values or constraints:** The variables `p` and `q` are initialized with unknown values.\n- **Loop condition:** The loop condition is `q > 0 && p > 0 && p != q`.\n- **Ranking function:** The ranking function is `(p + q)`.\n\nGiven these, we can write the loop invariants as follows:\n\n```c\n/*@ \n    loop invariant \\at(p, LoopEntry) >= 0;\n    loop invariant \\at(q, LoopEntry) >= 0;\n    loop invariant p >= 0;\n    loop invariant q >= 0;\n    loop invariant p != q ==> p > 0 && q > 0;\n    loop invariant \\at((p + q), LoopEntry) >= p + q;\n*/\n```\n\nThese invariants state that:\n\n- The variables `p` and `q` are always non-negative at the start of the loop.\n- The variables `p` and `q` are always non-negative during the loop execution.\n- If `p` is not equal to `q`, then both `p` and `q` are positive.\n- The sum of `p` and `q` at the start of the loop is always greater than or equal to the sum of `p` and `q` during the loop execution. This implies that the value of the ranking function `(p + q)` decreases with each iteration, hence proving the termination of the loop."
                ],
                "inductive_invariants": "loop invariant i1: \\at(p, LoopEntry) + \\at(q, LoopEntry) >= p + q;\nloop invariant i17: \\at((p + q), LoopEntry) >= p + q;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int p, q;\n\tq = unknown_int();\n\tp = unknown_int();\n\t/*@\nloop invariant i1: \\at(p, LoopEntry) + \\at(q, LoopEntry) >= p + q;\nloop invariant i17: \\at((p + q), LoopEntry) >= p + q;\nloop variant p + q;\n*/\nwhile (q > 0 && p > 0 && p != q) {\n\t\tif (q < p) {\n\t\t\tq = q - 1;\n\t\t} else {\n\t\t\tif (p < q) {\n\t\t\t\tp = p - 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(p, LoopEntry) + \\at(q, LoopEntry) >= p + q is inductive.\nloop invariant \\at((p + q), LoopEntry) >= p + q is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c"
        ],
        "skipped": [],
        "total": 73,
        "success_count": 105,
        "failure_count": 73,
        "success_rate": 1.4383561643835616
    }
}