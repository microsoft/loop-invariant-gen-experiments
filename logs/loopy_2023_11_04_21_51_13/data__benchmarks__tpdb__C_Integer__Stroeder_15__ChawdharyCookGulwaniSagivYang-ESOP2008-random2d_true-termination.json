{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "N - i"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The loop in the given program starts with `i = 0` and in every iteration `i` is increased by `1` until it is no longer less than `N` (which is `10` in this case). \n\nTherefore, the loop is expected to run `N` times, meaning `i` would take the values from `0` to `N-1`. \n\nAs a result, a valid ranking function for this loop would be `N - i` as it decreases with every iteration (since `i` increases) and it is always positive while the loop is executing (since `i` is always less than `N` during the loop execution).\n\nIn ACSL syntax, the ranking function would look like this:\n\n```c\n/*@\n    loop variant N - i;\n*/\n```",
            "The loop in the given program is governed by the variable 'i'. The loop starts when i = 0 and continues until i is less than N. Here, N is a constant and its value is 10. With each iteration of the loop, the value of 'i' is incremented by 1. Therefore, the loop will run for N times.\n\nThe ranking function for this loop can be given by the expression (N - i). This is because the value of (N - i) is positive within the loop, and it strictly decreases with each iteration (since 'i' is incremented by 1 in each iteration). \n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant N - i;\n*/\n``` \n\nThis is a valid ranking function as it satisfies the conditions of being positive and strictly decreasing with each iteration of the loop.",
            "The loop in the given program starts with `i = 0` and in each iteration, `i` is incremented by 1. The loop continues until `i` is less than `N`, where `N` is a constant value of 10. Hence, the loop will always terminate after `N` iterations.\n\nTherefore, the ranking function can be defined as `N - i`.\n\nThis is a valid ranking function because:\n\n- It decreases with every iteration of the loop, as `i` is incremented in each iteration.\n- It is positive for all iterations of the loop, as `i` is always less than `N` during the execution of the loop.\n- It reaches 0 when the loop terminates, as `i` becomes equal to `N`.\n\nHere is the ranking function in ACSL syntax:\n```\n/*@\n    loop variant N - i;\n*/\n```",
            "1. The loop in the program runs as long as `i < N`. \n2. The variable `i` is incremented by 1 with each iteration of the loop. \n3. The variables `x`, `y`, and `r` do not affect the termination of the loop as they are not involved in the loop condition.\n4. We can therefore conclude that the loop will run for exactly `N` iterations, with `i` taking values from 0 to `N - 1`.\n\nThe ranking function for this loop would be `(N - i)` because it decreases with each iteration of the loop (as `i` is incremented) and is always positive while the loop is executing (as `i` is always less than `N`).\n\nThe ACSL syntax for the ranking function would be:\n\n```\n/*@\n    loop variant N - i;\n*/\n``` \n\nThis ranking function is valid because it always decreases (i.e., `i` increases) and is positive as long as the loop continues to execute (i.e., `i < N`).",
            "At the start of the loop, `i` is initialized to 0. In the loop body, `i` is incremented by 1 in each iteration. This means that `i` is increasing throughout the loop. The loop continues as long as `i` is less than `N`.\n\nThe ranking function for this loop is `N - i`.\n\nThe reason why `N - i` is a valid ranking function is that, it is positive and decreasing as long as the loop is executing. At the start of the loop `i` is 0, so `N - i` is `N` (which is 10), a positive number. In each iteration, `i` is incremented by 1, which means `N - i` is decremented by 1. Thus, `N - i` is a decreasing function. The loop stops when `i` is no longer less than `N`, which means `N - i` is no longer positive, ensuring the termination of the loop.\n\nThe ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant N - i;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['N - i']": {
                "variant": [
                    "N - i"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= r <= 3;\n    loop invariant \\at(x, LoopEntry) - N <= x <= \\at(x, LoopEntry) + N;\n    loop invariant \\at(y, LoopEntry) - N <= y <= \\at(y, LoopEntry) + N;\n*/",
                    "/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= r <= 3;\n    loop invariant -N <= x <= N;\n    loop invariant -N <= y <= N;\n    loop invariant \\at(i, LoopEntry) < i ==> \\at(x, LoopEntry) != x || \\at(y, LoopEntry) != y;\n    loop invariant \\at(i, LoopEntry) < i ==> (N - i) < \\at((N - i), LoopEntry);\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= N;\n    loop invariant (r < 0 || r > 3) ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) == y;\n    loop invariant r == 0 ==> \\at(x, LoopEntry) <= x && \\at(y, LoopEntry) == y;\n    loop invariant r == 1 ==> \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) == y;\n    loop invariant r == 2 ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) <= y;\n    loop invariant r == 3 ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) >= y;\n    loop invariant N - i >= 0;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= N;\n    loop invariant i == \\at(i, LoopEntry) + 1;\n    loop invariant N - i >= 0;\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant N == 10;\n    loop invariant i <= N;\n    loop invariant x <= i;\n    loop invariant y <= i;\n    loop invariant x >= -i;\n    loop invariant y >= -i;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\twhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(N - i)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The initial values for the variables are: \n  - N is 10.\n  - x, y, i, r are all 0.\n- The loop condition is `i < N`.\n- The loop variant is `N - i` which decreases with each iteration of the loop since `i` is incremented by 1 in every loop iteration.\n\nLet's find the loop invariants.\n\n- Before the loop execution, `i = 0` and `N = 10`. Thus, `N - i` equals 10, which is non-negative.\n- In every iteration of the loop, `i` is incremented by 1. This ensures that `N - i` decreases by 1 in every iteration.\n- After the loop termination, `i` equals `N`. Thus, `N - i` equals 0.\n\nThe loop invariants that can be written are:\n- `i` is non-negative and less than or equal to `N`. This is always true and implies that `N - i` is non-negative.\n- `r` is greater than or equal to 0 and less than or equal to 3. This is true in every iteration of the loop.\n- The value of `r` controls how `x` and `y` are updated. \n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= r <= 3;\n    loop invariant \\at(x, LoopEntry) - N <= x <= \\at(x, LoopEntry) + N;\n    loop invariant \\at(y, LoopEntry) - N <= y <= \\at(y, LoopEntry) + N;\n*/\n```\n\nThe third and fourth loop invariants specify the range of `x` and `y`. `x` and `y` can either increase or decrease by 1 in each loop iteration. The total number of loop iterations is `N`, so the value of `x` and `y` after the loop will be within `N` of their initial values.",
                    "First, we initialize `x`, `y`, and `i` to `0`, and `N` to `10`. Therefore, at the beginning of the loop, `i` is `0` and `(N - i)` is `10`.\n\nIn each loop iteration, `i` is incremented by `1`, hence `i` will be always less than or equal to `N`.\n\nThe value of `r` is non-deterministic but it's used in a condition that bounds it between `0` and `3`. Therefore, `r` will always be greater than or equal to `0` and less than or equal to `3`.\n\nThe variable `x` is incremented or decremented by `1` based on the value of `r`. Similarly, `y` is incremented or decremented by `1` based on the value of `r`. Therefore, `x` and `y` can vary from `-N` to `N`.\n\nThe loop continues until `i < N`. After the loop, `i` will be equal to `N`.\n\nThe ranking function `(N - i)` is non-negative because `i` is always less than or equal to `N`. It decreases with every iteration of the loop because `i` increases with every iteration. \n\nTherefore, the loop invariants are:\n```\n/*@ \n    loop invariant 0 <= i <= N;\n    loop invariant 0 <= r <= 3;\n    loop invariant -N <= x <= N;\n    loop invariant -N <= y <= N;\n    loop invariant \\at(i, LoopEntry) < i ==> \\at(x, LoopEntry) != x || \\at(y, LoopEntry) != y;\n    loop invariant \\at(i, LoopEntry) < i ==> (N - i) < \\at((N - i), LoopEntry);\n*/\n```",
                    "At the start of the loop, \n- `i` is initialized to 0. \n- `x` and `y` are also initialized to 0. \n- `N` is initialized to 10. \n\nThe loop condition is `i < N`, and the loop variant is `N - i`. \n\nThe body of the loop increments `i` by 1 in each iteration. \n\nThe variable `r` can take any value, but only when `r` is between 0 and 3 (inclusive), the values of `x` and `y` are updated. \n\nWhen `r` is 0, `x` is incremented by 1. \n\nWhen `r` is 1, `x` is decremented by 1. \n\nWhen `r` is 2, `y` is incremented by 1. \n\nWhen `r` is 3, `y` is decremented by 1. \n\nThe loop variant `N - i` is always non-negative and decreases in each iteration of the loop. \n\nThe loop invariants that can be derived from the above are:\n\n```\n/*@ \n    loop invariant 0 <= i && i <= N;\n    loop invariant (r < 0 || r > 3) ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) == y;\n    loop invariant r == 0 ==> \\at(x, LoopEntry) <= x && \\at(y, LoopEntry) == y;\n    loop invariant r == 1 ==> \\at(x, LoopEntry) >= x && \\at(y, LoopEntry) == y;\n    loop invariant r == 2 ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) <= y;\n    loop invariant r == 3 ==> \\at(x, LoopEntry) == x && \\at(y, LoopEntry) >= y;\n    loop invariant N - i >= 0;\n*/\n```\n\nThese loop invariants imply that the loop variant `N - i` decreases with every iteration, and hence prove the termination of the loop.",
                    "First, note that the ranking function is (N - i). This function is non-negative as i is always less than or equal to N. The value of the ranking function decreases with each iteration as i is incremented by 1 in each iteration.\n\nAlso, note that the variable r can take any integer value, but if it is not between 0 and 3, it has no effect on the variables x and y.\n\nThe loop condition is (i < N). Before the loop execution, i is equal to 0. In every iteration, i is incremented by 1. After the loop termination, i is equal to N.\n\nThe loop invariant regarding the variable i and the ranking function is:\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= N;\n    loop invariant i == \\at(i, LoopEntry) + 1;\n    loop invariant N - i >= 0;\n*/\n```\nThe values of x and y can increase or decrease by 1 in each iteration depending on the value of r. Hence, we do not have a known upper bound or lower bound for x and y.\n\nThe loop invariant regarding the variables x and y is:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) - 1 <= x <= \\at(x, LoopEntry) + 1;\n    loop invariant \\at(y, LoopEntry) - 1 <= y <= \\at(y, LoopEntry) + 1;\n*/\n```\nThe loop invariant regarding the variable r is:\n```\n/*@ \n    loop invariant r == 0 ==> \\at(x, LoopEntry) == x - 1;\n    loop invariant r == 1 ==> \\at(x, LoopEntry) == x + 1;\n    loop invariant r == 2 ==> \\at(y, LoopEntry) == y - 1;\n    loop invariant r == 3 ==> \\at(y, LoopEntry) == y + 1;\n*/\n```\nThese invariants imply that the ranking function decreases with every iteration. Hence, they prove the termination of the loop.",
                    "First, make note of the starting values or constraints for the variables that are live at the loop head. \n\nWe have:\n- `x = 0`\n- `y = 0`\n- `i = 0`\n- `N = 10`\n\nNext, analyze the loop body and make a note of the loop condition and the given ranking function.\n\nThe loop condition is `i < N`. This means that the loop will terminate when `i >= N`.\n\nThe ranking function given is `N - i`, which is initially 10 and decreases with each iteration of the loop.\n\nNow, let's come up with the loop invariants.\n\nBefore the loop execution, we have:\n- `i = 0`\n- `x = 0`\n- `y = 0`\n- `N = 10`\n\nIn every iteration of the loop:\n- `i` is incremented by 1\n- `x` and `y` are either incremented, decremented or remain the same, depending on the value of `r`\n- `N` remains the same\n- `i` is always less than `N`\n\nAfter the loop termination:\n- `i = N`\n\nThe loop invariants that support the validity of the ranking function and prove the termination of the loop are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant N == 10;\n    loop invariant i <= N;\n    loop invariant x <= i;\n    loop invariant y <= i;\n    loop invariant x >= -i;\n    loop invariant y >= -i;\n*/\n``` \n\nThese loop invariants imply that the ranking function `N - i` decreases with every iteration, as `i` is always incremented by 1 in each iteration. Thus, the loop will eventually terminate when `i = N`.\n\nNote that the bounds on `x` and `y` are due to the fact that in each iteration, `x` and `y` can either be incremented, decremented, or remain the same, while `i` is always incremented. Therefore, `x` and `y` can at most be equal to `i` and at least be equal to `-i`."
                ],
                "inductive_invariants": "loop invariant i1: 0 <= i <= N;\nloop invariant i3: \\at(x, LoopEntry) - N <= x <= \\at(x, LoopEntry) + N;\nloop invariant i4: \\at(y, LoopEntry) - N <= y <= \\at(y, LoopEntry) + N;\nloop invariant i5: -N <= x <= N;\nloop invariant i6: -N <= y <= N;\nloop invariant i8: \\at(i, LoopEntry) < i ==> (N - i) < \\at((N - i), LoopEntry);\nloop invariant i9: 0 <= i && i <= N;\nloop invariant i15: N - i >= 0;\nloop invariant i16: 0 <= i;\nloop invariant i17: i <= N;\nloop invariant i19: i >= 0;\nloop invariant i20: N == 10;\nloop invariant i21: x <= i;\nloop invariant i22: y <= i;\nloop invariant i23: x >= -i;\nloop invariant i24: y >= -i;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, i, r, N;\n\tN = 10;\n    x = 0;\n    y = 0;\n    i = 0;\n\t/*@\nloop invariant i1: 0 <= i <= N;\nloop invariant i3: \\at(x, LoopEntry) - N <= x <= \\at(x, LoopEntry) + N;\nloop invariant i4: \\at(y, LoopEntry) - N <= y <= \\at(y, LoopEntry) + N;\nloop invariant i5: -N <= x <= N;\nloop invariant i6: -N <= y <= N;\nloop invariant i8: \\at(i, LoopEntry) < i ==> (N - i) < \\at((N - i), LoopEntry);\nloop invariant i9: 0 <= i && i <= N;\nloop invariant i15: N - i >= 0;\nloop invariant i16: 0 <= i;\nloop invariant i17: i <= N;\nloop invariant i19: i >= 0;\nloop invariant i20: N == 10;\nloop invariant i21: x <= i;\nloop invariant i22: y <= i;\nloop invariant i23: x >= -i;\nloop invariant i24: y >= -i;\nloop variant N - i;\n*/\nwhile (i < N) {\n\t\ti = i + 1;\n\t\tr = unknown_int();\n\t\tif (r >= 0 && r <= 3) {\n\t\t\tif (r == 0) {\n\t\t\t\tx = x + 1;\n\t\t\t} else {if (r == 1) {\n\t\t\t\tx = x - 1;\n\t\t\t} else {if (r == 2) {\n\t\t\t\ty = y + 1;\n\t\t\t} else {if (r == 3) {\n\t\t\t\ty = y - 1;\n            }}}}\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i <= N is inductive.\nloop invariant \\at(x, LoopEntry) - N <= x <= \\at(x, LoopEntry) + N is inductive.\nloop invariant \\at(y, LoopEntry) - N <= y <= \\at(y, LoopEntry) + N is inductive.\nloop invariant -N <= x <= N is inductive.\nloop invariant -N <= y <= N is inductive.\nloop invariant \\at(i, LoopEntry) < i ==> (N - i) < \\at((N - i), LoopEntry) is inductive.\nloop invariant 0 <= i && i <= N is inductive.\nloop invariant N - i >= 0 is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= N is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant N == 10 is inductive.\nloop invariant x <= i is inductive.\nloop invariant y <= i is inductive.\nloop invariant x >= -i is inductive.\nloop invariant y >= -i is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c"
        ],
        "skipped": [],
        "total": 42,
        "success_count": 75,
        "failure_count": 42,
        "success_rate": 1.7857142857142858
    }
}