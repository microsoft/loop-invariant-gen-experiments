{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + 1"
            ],
            [
                "x + 2*y - 1"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head. In this case, we have `x` and `y`. The loop condition is `x >= 0`. \n\nIn the loop body, the value of `x` is updated with `x = x - 2*y + 1`. Since `2*y` is greater than or equal to 1, the value of `x` is guaranteed to decrease with each iteration of the loop. \n\nNow, we need to find a ranking function involving the variables `x` and `y`. We know that the value of `x` decreases with each iteration, so we can use `x` as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because the value of `x` is always positive while the loop is executing due to the loop condition `x >= 0`. Furthermore, the value of `x` decreases with each iteration, as it is updated with `x = x - 2*y + 1` and `2*y` is greater than or equal to 1.",
            "First, let's identify the variables that are live at the loop head. In this case, the variables x and y are live at the loop head.\n\nNow, let's analyze the loop body. The loop executes while `x >= 0`. In each iteration, `x` is updated with `x = x - 2*y + 1`.\n\nSince the value of `y` is constrained to be `2*y >= 1`, we know that `y >= 1/2`. Therefore, in each iteration of the loop, `x` is decreasing by at least `1`.\n\nA suitable ranking function for this loop is `x + 1`. Let's verify if it meets the criteria for a valid ranking function:\n\n1. The value of the ranking function is positive while the loop is executing: Since `x >= 0`, `x + 1 > 0`.\n2. The value of the ranking function decreases with every successive iteration of the loop: In each iteration, `x` decreases by at least `1`, so `x + 1` also decreases by at least `1`.\n\nThus, the ranking function `x + 1` is valid for this loop. Here is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + 1;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n\n- x is an unknown integer.\n- y is an unknown integer, but due to the condition `if (2*y < 1) return 0;`, we know that 2*y >= 1, which means y >= 0.5.\n\nNow, let's analyze the loop body:\n\n- The loop condition is `x >= 0`.\n- The loop body updates x as `x = x - 2*y + 1`.\n\nWe can now find a ranking function involving the variables in the loop body. The ranking function should decrease with every iteration, and be positive while the loop is executing.\n\nThe ranking function is `x + 2*y - 1`. Let's prove that it is a valid ranking function:\n\n1. The ranking function is positive while the loop is executing: If x >= 0 (the loop condition), then x + 2*y - 1 >= 0 + 1 - 1 = 0.\n\n2. The ranking function decreases with every iteration: In the loop body, x is updated as `x = x - 2*y + 1`. Therefore, the new value of the ranking function after an iteration is `(x - 2*y + 1) + 2*y - 1 = x`, which is the old value of x. Since x is decreasing by 2*y - 1 in every iteration, the ranking function is also decreasing.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + 2*y - 1;\n*/\n```",
            "First, let's note the starting values or constraints for the variables that are live at the loop head:\n- x = unknown_int()\n- y = unknown_int() with the constraint 2*y >= 1\n\nNow let's analyze the loop body:\n- x = x - 2*y + 1;\n\nWe can see that in each iteration of the loop, x is reduced by 2*y - 1. As 2*y >= 1, then 2*y - 1 >= 0. Therefore, x is decreasing in each iteration.\n\nNow, let's find the ranking function:\nSince x is decreasing in each iteration, we can use x as the ranking function.\n\nSo the ranking function would be:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Starting values or constraints for the variables live at the loop head:\n   - `x` can be any integer (unknown_int()).\n   - `y` must satisfy `2 * y >= 1` (if (2 * y < 1) return 0;).\n\n2. Loop body analysis:\n   - In the loop body, `x` is decremented by `2 * y - 1` in each iteration (`x = x - 2 * y + 1;`).\n\nNow, let's find the ranking function involving the variables in the loop body."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y - 1 > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant 2*y >= 1;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant 2*y >= 1;\n    loop invariant x < \\at(x, LoopEntry) ==> x + 2*y - 1 < \\at(x, LoopEntry);\n*/",
                    "/*@ \n    loop invariant x == \\at(x, LoopEntry) - (2*y - 1)*\\at(LoopCurrentIteration, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant y >= 0.5;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -2*y+1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) - 2 * y + 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "At the beginning of the loop, the value of `x` is a non-deterministic integer and the value of `y` is a non-deterministic integer such that `2*y >= 1`.\n\nIn every iteration of the loop, `x` is decreased by `2*y - 1`. The loop continues as long as `x >= 0`.\n\nThe loop invariant that is true before the loop execution, in every iteration of the loop and after the loop termination is that `x` is non-negative at the loop head.\n\nThe loop invariant that implies that the ranking function `x` decreases with every iteration is that `2*y - 1 > 0`.\n\nThe loop invariant that bounds the value of `x` is that `x` is always less than or equal to `\\at(x, LoopEntry)`.\n\nThe loop invariant that bounds the value of `y` is that `2*y >= 1`.\n\nConsidering all these, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant 2*y - 1 > 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant 2*y >= 1;\n*/\n```\nThese loop invariants support the validity of the ranking function and prove the termination of the loop.",
                    "- The variables live at the loop head are **x** and **y**.\n- From the loop body, we can see that the loop condition is **x >= 0** and the ranking function is **x**.\n- The loop invariant should be such that it implies that the ranking function decreases with every iteration of the loop. This would mean that **x** decreases with every iteration of the loop.\n- Before the loop execution, **x** and **y** are any integers, and **2*y >= 1**.\n- In every iteration, **x** is decreased by **2*y - 1**.\n- After the loop termination, **x < 0**.\n\nFrom the above points, we can derive the following loop invariants:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant 2*y >= 1;\n    loop invariant x < \\at(x, LoopEntry) ==> x + 2*y - 1 < \\at(x, LoopEntry);\n*/\n```",
                    "- The loop condition is `x >= 0`.\n- The ranking function is `x`.\n- The variable `x` is initialized to an unknown integer value. \n- `y` is initialized to an unknown integer value, with a constraint that `2*y` is not less than `1`. This implies that `y` is always greater than or equal to `0.5`.\n- In each iteration of the loop, `x` is decreased by `2*y - 1`.\n- As `y` is always greater than or equal to `0.5`, `2*y - 1` is always greater than or equal to `0`. Therefore, `x` is always decreasing in each iteration of the loop.\n\nGiven this, we can derive the following loop invariants:\n\n(i) Before the loop execution: `x` is an integer and `y` is greater than or equal to `0.5`.\n(ii) In every iteration of the loop: `x` is decreasing and `y` is unchanged.\n(iii) After the loop termination: `x` is less than `0`.\n\n```\n/*@ \n    loop invariant x == \\at(x, LoopEntry) - (2*y - 1)*\\at(LoopCurrentIteration, LoopEntry);\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant y >= 0.5;\n*/\n```",
                    "- The variables live at the loop head are **x** and **y**. \n- The loop condition is **x >= 0**.\n- The ranking function is **x**.\n\nBased on these, the loop invariants can be:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -2*y+1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/\n```",
                    "First, note that the variables that are live at the loop head are x and y.\n\nThe loop condition is x >= 0.\n\nThe ranking function is x, which is supposed to decrease with every iteration of the loop.\n\nGiven that the loop body is x = x - 2*y + 1, the value of x decreases by 2*y - 1 in each iteration.\n\nIn the beginning, 2*y is not less than 1.\n\nNow, let's find the loop invariants:\n\n- Before the loop execution: \n  - The value of x is non-deterministic, but it is guaranteed to be an integer.\n  - The value of y is also non-deterministic, but it is guaranteed to be an integer, and 2*y is not less than 1.\n  \n- In every iteration of the loop:\n  - The value of x decreases by 2*y - 1.\n  - The value of y remains the same.\n\n- After the loop termination:\n  - x is less than 0.\n\nSo, we can output the loop invariants:\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant y == \\at(y, LoopEntry);\n    loop invariant x <= \\at(x, LoopEntry) - 2 * y + 1;\n*/\n```\nThese loop invariants imply that the ranking function x decreases with every iteration of the loop, proving the termination of the loop."
                ],
                "inductive_invariants": "loop invariant i2: 2*y - 1 > 0;\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: 2*y >= 1;\nloop invariant i5: \\at(x, LoopEntry) >= x;\nloop invariant i8: y == \\at(y, LoopEntry);\nloop invariant i9: y >= 0.5;\nloop invariant i10: y >= 1;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i2: 2*y - 1 > 0;\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: 2*y >= 1;\nloop invariant i5: \\at(x, LoopEntry) >= x;\nloop invariant i8: y == \\at(y, LoopEntry);\nloop invariant i9: y >= 0.5;\nloop invariant i10: y >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y - 1 > 0 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant 2*y >= 1 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant y == \\at(y, LoopEntry) is inductive.\nloop invariant y >= 0.5 is inductive.\nloop invariant y >= 1 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 1.6521739130434783
    }
}