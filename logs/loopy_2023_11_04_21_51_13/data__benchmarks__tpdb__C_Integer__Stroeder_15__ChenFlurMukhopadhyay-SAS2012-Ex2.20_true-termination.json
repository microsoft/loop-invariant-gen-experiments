{
    "log": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > y && y >= 1 && y <= 2) {\n        x = x - y;\n        y = unknown_int();\n    }\n    return 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x - y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > y && y >= 1 && y <= 2) {\n        x = x - y;\n        y = unknown_int();\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's make note of the starting values or constraints for the variables that are live at the loop head:\n\n- x = unknown_int(); // x can be any integer value\n- y = unknown_int(); // y can be any integer value\n\nNow, let's analyze the loop body and find a ranking function involving the variables in the loop body:\n\n```\nwhile (x > y && y >= 1 && y <= 2) {\n    x = x - y;\n    y = unknown_int();\n}\n```\n\nSince x is always decreased by y, and y is always between 1 and 2 (inclusive), we can conclude that x is always decreasing.\n\nA possible ranking function is x, since it is positive as long as the loop is executing and decreases with every iteration.\n\nOutput the ranking function in one code block, in ACSL syntax:\n```\n/*@\n    loop variant x;\n*/\n```",
            "1. Starting values or constraints for the variables live at the loop head:\n   - x and y are assigned unknown_int() values, which means they can be any integer.\n   - The loop condition is (x > y && y >= 1 && y <= 2).\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - x is decreased by y in each iteration: x = x - y.\n   - y gets assigned a new unknown_int() value in each iteration.\n\n3. Ranking function:\n   - We know that x > y, y >= 1, and y <= 2 for the loop to continue.\n   - Since x is decreased by y in each iteration, we need a ranking function that ensures x is decreasing and remains positive.\n\nRanking function:\n```\n/*@\n    loop variant x;\n*/\n```\nThis ranking function is valid because x decreases in each iteration (x = x - y), and it is positive as long as the loop continues (x > y).",
            "First, let's identify the variables that are live at the loop head: `x` and `y`.\n\nNow, let's analyze the loop body. The loop continues executing as long as `x > y` and `y >= 1` and `y <= 2`. In each iteration, `x` is updated to be `x - y`, and `y` is assigned a new unknown value.\n\nSince `y` is an unknown value at each iteration, we cannot rely on it for our ranking function. However, we know that `x` is decreasing in every iteration, as it is updated by subtracting `y` from it, and `y` is always positive (between 1 and 2).\n\nThus, we can use `x` as our ranking function. The loop variant is `x`. \n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because the value of `x` is always decreasing with every iteration of the loop, and the loop continues executing as long as the value of `x` is positive.",
            "First, let's identify the variables that are live at the loop head and their starting values or constraints:\n\n1. `x` is an integer with an unknown initial value.\n2. `y` is an integer with an unknown initial value but constrained by the loop condition: `1 <= y <= 2`.\n\nNow, let's analyze the loop body:\n1. `x` is updated as `x = x - y` in every iteration.\n2. `y` is updated as `y = unknown_int()` in every iteration, but its value is still constrained by the loop condition: `1 <= y <= 2`.\n\nSince `x` is decreasing in every iteration and the loop continues as long as `x > y`, a valid ranking function can be `x - y`. Let's output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant x - y;\n*/\n```",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head.\n\nAt the loop head, `x` and `y` are live. Both `x` and `y` are initialized with unknown_int() which can return any integer value. The loop condition is `(x > y) && (y >= 1) && (y <= 2)`.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body.\n\nIn the loop body, we have:\n```\nx = x - y;\ny = unknown_int();\n```\n\nThe value of `x` is decreased by `y` in each iteration, and `y` is assigned a new value from `unknown_int()`. The loop condition guarantees that `y` is in the range [1, 2].\n\n3. Output the ranking function in one code block, in ACSL syntax.\n\nSince `y` is in the range [1, 2], the loop can only continue if `x > y`. Therefore, the ranking function should be `x - y`:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because it decreases with each iteration of the loop (as `x` is reduced by `y`), and it evaluates to a positive value while the loop is executing (as the loop condition requires `x > y`)."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/",
                    "/*@ \n    loop invariant x > y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y >= 1 ==> \\at(x, LoopEntry) > x;\n    loop invariant y <= 2 ==> \\at(x, LoopEntry) > x;\n    loop invariant x > y && y >= 1 && y <= 2;\n*/",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(x, LoopCurrent);\n    loop invariant y >= 1 && y <= 2;\n    loop invariant x <= y;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x > y && y >= 1 && y <= 2) {\n        x = x - y;\n        y = unknown_int();\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "- The loop condition is **(x > y && y >= 1 && y <= 2)**. \n- The variables live at the loop head are **x, y**.\n- According to the loop condition, the initial values of **x, y** must satisfy **(x > y && y >= 1 && y <= 2)**.\n- The loop variant (ranking function) given is **x**.\n- The loop variant decreases with each iteration of the loop as **x** is decreased by **y** in each iteration.\n\nNow, let's write the loop invariants.\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/\n```",
                    "First, let's identify the variables that are live at the loop head. They are **x** and **y**.\n\nNext, we analyze the loop body. The loop condition is **(x > y && y >= 1 && y <= 2)**. The loop variant is **x**, which means that **x** decreases with every iteration of the loop.\n\nNow, we can come up with the loop invariants. The loop invariants are as follows:\n- Before the loop execution, there are no constraints on the values of **x** and **y**. So, we don't have any loop invariant at this point.\n- In every iteration of the loop, **x** is always greater than **y** and **y** is always between 1 and 2. Also, **x** is always non-negative and decreases with each iteration. This gives us the following loop invariants:\n```\n/*@ \n    loop invariant x > y;\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant x >= 0;\n*/\n```\n- After the loop termination, **x** is less than or equal to **y** or **y** is not between 1 and 2, which gives us the following loop invariants:\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant y < 1 || y > 2;\n*/\n```\nThese loop invariants support the loop variant **x** and prove the termination of the loop.",
                    "- At the beginning of the loop, **x** is an arbitrary integer and **y** is also an arbitrary integer. \n- The loop condition is **x > y && y >= 1 && y <= 2**. That means, the loop will continue as long as **x** is greater than **y** and **y** is between 1 and 2 (inclusive). \n- The loop body decrements **x** by **y** and assigns an arbitrary integer to **y**. \n\nA possible set of loop invariants for this loop could be:\n\n```c\n/*@ \n    loop invariant \\at(x, LoopEntry) >= x;\n    loop invariant y >= 1 ==> \\at(x, LoopEntry) > x;\n    loop invariant y <= 2 ==> \\at(x, LoopEntry) > x;\n    loop invariant x > y && y >= 1 && y <= 2;\n*/\n```",
                    "- Before the loop starts, the values of x and y are unknown, as they are derived from the function unknown_int(). However, we can infer that x > y, y >= 1, and y <= 2 from the loop condition.\n- The loop condition also indicates that x and y are integers, as the comparison operators >, >=, and <= are used.\n- Inside the loop, x is decremented by y, and y is reassigned a value from unknown_int().\n- The loop termination condition is when x <= y or y < 1 or y > 2.\n\nGiven these observations, the following loop invariants can be inferred:\n\n```c\n/*@ \n    loop invariant \\at(x, LoopEntry) > \\at(y, LoopEntry);\n    loop invariant y >= 1;\n    loop invariant y <= 2;\n    loop invariant x >= 0;\n*/\n```\nThese invariants indicate that:\n- At the loop head, x is always greater than y.\n- y is always between 1 and 2, inclusive.\n- x is always non-negative.\n\nThese invariants support the loop variant (x), as x is decremented by a positive integer (y) in every loop iteration, and it is always non-negative, thus ensuring that the loop will eventually terminate. \n\nNote: The function unknown_int() is used in this program to generate a non-deterministic integer. In the context of this problem, we assume that it can return any integer value. This is why we cannot make a definitive statement about the values of y after its reassignment within the loop.",
                    "Firstly, let's note the starting values or constraints for the variables that are live at the loop head. Here, the variables are **x** and **y** and they are assigned unknown integer values.\n\nNext, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is **x > y && y >= 1 && y <= 2** and the given ranking function is **x**.\n\nNow, let's find the loop invariants.\n\n1. Before the loop execution, the variables **x** and **y** can be any integer values. As **x** and **y** are assigned unknown integer values, we don't know their exact values. But we can say that **x** and **y** are integers.\n\n2. In every iteration of the loop, the value of **x** is decreased by **y** and **y** is assigned a new unknown integer value. So, the value of **x** is always decreasing and the value of **y** is always between 1 and 2.\n\n3. After the loop termination, the value of **x** is less than or equal to **y** and the value of **y** is between 1 and 2.\n\nTherefore, we can state the loop invariants as follows:\n\n```\n/*@ \n    loop invariant \\typeof(x) == \\typeof(int);\n    loop invariant \\typeof(y) == \\typeof(int);\n    loop invariant x >= y ==> \\at(x, LoopEntry) > \\at(x, LoopCurrent);\n    loop invariant y >= 1 && y <= 2;\n    loop invariant x <= y;\n*/\n```\n\nThese loop invariants imply that the ranking function **x** decreases with every iteration of the loop, thus proving the termination of the loop."
                ],
                "inductive_invariants": "loop invariant i4: \\at(x, LoopEntry) >= x;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i4: \\at(x, LoopEntry) >= x;\nloop variant x;\n*/\nwhile (x > y && y >= 1 && y <= 2) {\n        x = x - y;\n        y = unknown_int();\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant \\at(x, LoopEntry) >= x is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c"
        ],
        "skipped": [],
        "total": 51,
        "success_count": 85,
        "failure_count": 51,
        "success_rate": 1.6666666666666667
    }
}