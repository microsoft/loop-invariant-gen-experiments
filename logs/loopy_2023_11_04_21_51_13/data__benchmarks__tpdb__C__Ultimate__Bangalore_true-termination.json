{
    "log": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + 1"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, notice the variables x and y. Both x and y are live at the head of the loop. The loop continues while x is greater than or equal to 0. In each iteration of the loop, x is decreased by y. \n\nGiven that y is guaranteed to be greater than 0 (from the if-condition before the loop), x is guaranteed to decrease in each iteration of the loop. Thus, we can say that x is a potential ranking function.\n\nLet's verify this: \n\n1. **Initialization**: Before the loop starts, x can be any integer. Therefore, the ranking function is initialized.\n\n2. **Maintenance**: During each loop iteration, x decreases by y (where y > 0). Therefore, the value of the ranking function decreases with each loop iteration.\n\n3. **Termination**: The loop terminates when x is less than 0. Therefore, the loop terminates when the ranking function is less than 0.\n\nGiven these conditions, x is a valid ranking function for this loop.\n\nSo, the ranking function for this loop is x. Here is how you can denote this in ACSL:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "The loop here is `while (x >= 0)`. \n\n- The variable `x` is live at the loop head. It starts with an unknown value and decreases by `y` in each iteration of the loop. \n- The loop executes as long as `x` is non-negative.\n\nTherefore, a suitable ranking function could be `x + 1`. \n\n- This function decreases with every iteration (since `x` decreases). \n- It is also positive during loop execution, because `x` must be non-negative for the loop to execute.\n\nTherefore, `x + 1` is a valid ranking function for this loop.\n\nWe can express this in ACSL syntax as follows:\n\n```\n/*@ \n   loop variant x + 1; \n*/\n```",
            "At the beginning of the loop, the ranking function is x. \n\nIn each iteration of the loop, x decreases by y. Therefore, we can say that the ranking function is decreasing. \n\nThe loop continues as long as x >= 0. So, the ranking function is positive.\n\nTherefore, the ranking function for this loop is x.\n\nIn ACSL syntax, it can be represented as:\n\n```c\n/*@ \n    loop variant x; \n*/\n```",
            "The loop condition is `x >= 0` and the loop body is `x = x - y;`. The value of `x` is decreasing in each iteration because we are subtracting `y` from `x`. If `y` is a positive number, the value of `x` will decrease until `x` becomes less than 0.\n\nThe ranking function for this loop is `x + 1`. Here's why:\n\n- It's positive when the loop continues: If `x >= 0`, then `x + 1 > 0`.\n- It decreases with each iteration of the loop: Each time through the loop, we subtract `y` from `x`, so `x` decreases.\n\nThis makes it a valid ranking function.\n\nWe can write this in ACSL syntax as follows:\n```\n/*@\n    loop variant x + 1;\n*/\n```",
            "Firstly, at the beginning of the loop, `x` is an unknown integer and `y` is a positive integer (since `y < 1` causes the function to exit).\n\nThen, the loop condition is `x >= 0`, which means the loop continues to run as long as `x` remains nonnegative.\n\nInside the loop body, `x` decreases by `y` in each iteration. Since `y` is positive, `x` is guaranteed to decrease in every iteration.\n\nTherefore, a valid ranking function for this loop would be `x` itself, since it is always positive when the loop is running and it decreases with every iteration.\n\nThe ranking function in ACSL syntax would be:\n```\n/*@\n    loop variant x;\n*/\n```\nThis ranking function is valid because it decreases with every iteration of the loop (due to `x = x - y;`) and is positive as long as the loop continues to execute (since the loop condition is `x >= 0`)."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant 0 <= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n    loop invariant x >= -y;\n */",
                    "/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant (\\at(x, LoopEntry) - x) % y == 0;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k >= 0;\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry) - y * \\at(y, LoopEntry);\n    loop invariant y >= 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, we need to make note of the starting values or constraints for the variables that are live at the loop head. In this case, x and y are the variables live at the loop head. We know that y >= 1, but x can have any integer value.\n\nNext, we analyze the loop body. The loop condition is (x >= 0). In each iteration, x is updated as x = x - y. The given ranking function is x.\n\nNow, we will output the loop invariants that support the loop variant (x).\n\n```c\n/*@ \n    loop invariant 0 <= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n    loop invariant x >= -y;\n */\n```\n\nHere's the reasoning behind the loop invariants:\n\n1. `0 <= \\at(x, LoopEntry)`: The value of x at the beginning of the loop is non-negative, as the loop condition is (x >= 0).\n2. `y >= 1`: This loop invariant is true because, before the loop execution, the code checks if y < 1, and if so, the program returns, and the loop is not executed. So, y >= 1 at the start of the loop and remains the same in every iteration as it is not modified inside the loop.\n3. `x >= -y`: This loop invariant is true because x decreases by y in each iteration. When x becomes negative, the loop terminates, so x can never be smaller than -y. This also implies that the ranking function x decreases with every iteration, which supports the termination of the loop.",
                    "First, let's note the starting values and constraints for the variables live at the loop head:\n- x is an integer value, initialized with an unknown value from `unknown_int()`.\n- y is an integer value, initialized with an unknown value from `unknown_int()`, but constrained to be y >= 1 due to the if statement.\n\nNext, let's analyze the loop condition and body:\n- The loop condition is x >= 0.\n- Inside the loop body, x is updated to x - y.\n\nNow, let's find the loop invariants that support the given ranking function (x):\n\n```\n/*@ \n    loop invariant \\at(x, LoopEntry) >= 0;\n    loop invariant x >= 0;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n*/\n```\n\nThese loop invariants ensure that:\n1. x is initially non-negative at the loop entry.\n2. x remains non-negative in every iteration of the loop.\n3. x decreases with every iteration of the loop, as it is always less than or equal to its value at the loop entry.\n4. y is always greater than or equal to 1, ensuring that x decreases by at least 1 in each iteration.\n\nThese loop invariants support the ranking function (x) and prove the termination of the loop in the program.",
                    "First, let's note the starting values or constraints for the variables that are live at the loop head.\n\n- x is an integer with an unknown initial value.\n- y is an integer with an initial value greater than or equal to 1.\n\nNext, let's analyze the loop body and the loop condition. The loop condition is \"x >= 0\". Inside the loop, x is updated by subtracting y from its current value. The given ranking function is \"x\".\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n- At the beginning of the loop, x has an unknown value.\n- In every iteration, x decreases by y, which is a positive value.\n- After the loop terminates, x must be less than 0.\n\nTaking into account the constraints on the variables and the given ranking function, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant x >= -y;\n    loop invariant y >= 1;\n    loop invariant \\at(x, LoopEntry) - x >= 0;\n    loop invariant (\\at(x, LoopEntry) - x) % y == 0;\n*/\n```\n\nThese loop invariants ensure that:\n\n1. x is always greater than or equal to -y, which provides a lower bound for x.\n2. y is always greater than or equal to 1, ensuring that x decreases with every iteration.\n3. The difference between the initial value of x and the current value of x is non-negative and increases with every iteration.\n4. The difference between the initial value of x and the current value of x is always divisible by y, ensuring that x decreases by a multiple of y in each iteration.\n\nTogether, these loop invariants support the validity of the ranking function and prove the termination of the loop.",
                    "Let's analyze the given code and find the loop invariants that support the loop variant x.\n\nStarting values:\n- x and y are assigned unknown_int() values. We cannot make any assumptions about their initial values.\n- The loop executes only if y >= 1.\n\nLoop condition:\n- The loop continues as long as x >= 0.\n\nLoop body:\n- In each iteration, x is decreased by y.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant \\forall integer k; 0 <= k < y ==> x - k >= 0;\n*/\n```",
                    "We need to find loop invariants that support the loop variant (x), which is non-negative and decreases with every iteration of the loop. Let's analyze the loop and the variables.\n\n- At the loop entry, x has an arbitrary value and y is greater than or equal to 1.\n- In the loop body, x is decremented by y in every iteration.\n- The loop terminates when x becomes negative.\n\nNow let's write the loop invariants:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry) - y * \\at(y, LoopEntry);\n    loop invariant y >= 1;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i2: y >= 1;\nloop invariant i6: x <= \\at(x, LoopEntry);\nloop invariant i7: \\at(x, LoopEntry) - x >= 0;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i2: y >= 1;\nloop invariant i6: x <= \\at(x, LoopEntry);\nloop invariant i7: \\at(x, LoopEntry) - x >= 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t}\n\treturn 0;\n}\n",
                        "checker_output": true,
                        "checker_message": "loop invariant y >= 1 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant \\at(x, LoopEntry) - x >= 0 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c"
        ],
        "skipped": [],
        "total": 29,
        "success_count": 52,
        "failure_count": 29,
        "success_rate": 1.793103448275862
    }
}