{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ],
            [
                "x + y"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "First, let's identify the variables that are live at the loop head. These are `x` and `y`.\n\nNow, let's analyze the loop body:\n- `x` is decreased by `y` in every iteration.\n- `y` is incremented by 1 and then divided by 2 in every iteration.\n\nThe loop continues while `x` is greater than or equal to 0.\n\nWe can use the value of `x` as the ranking function. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `x` is positive (greater than or equal to 0) while the loop is executing.\n2. The value of `x` decreases in every iteration of the loop since it is decreased by `y`, and `y` is always positive (starts at 2 and increases by 1 and then divided by 2, which will always be positive).",
            "1. Starting values or constraints for the variables that are live at the loop head: \n   - x is initialized with an unknown integer value.\n   - y is initialized with the value 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body: \n   - In each iteration, x is decreased by y, and y is updated to be half of its previous value plus 1 (rounded down).\n   - Since y is always positive and x is decreased by y, the value of x will be decreasing in each iteration.\n   - The loop continues while x >= 0.\n\nNow, let's write the ranking function.",
            "First, let's identify the variables that are live at the loop head. In this case, we have two variables: `x` and `y`.\n\nNow let's analyze the loop body. In each iteration, `x` is decreased by `y` and `y` is updated as `(y + 1) / 2`.\n\nTo find a ranking function, let's focus on how these variables change in each iteration. The value of `x` is decreasing in every iteration because it is being subtracted by `y`. The value of `y` is non-decreasing, as it is always updated as `(y + 1) / 2`, which is greater than or equal to its previous value.\n\nNow, let's construct a ranking function using these variables. Since `x` is always decreasing and `y` is non-decreasing, we can use the value of `x` itself as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `x` is always positive when the loop is executing, as the loop condition is `x >= 0`.\n2. The value of `x` is strictly decreasing in each iteration, as it is being subtracted by the positive value of `y`.\n\nTherefore, the ranking function for this loop is `x`, and it ensures that the loop must terminate.",
            "1. Make note of the starting values or constraints for the variables that are live at the loop head:\n   - `x` is initialized with an unknown value.\n   - `y` is initialized with the value 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body:\n   - `x` is decreased by `y` in each iteration: `x = x - y`.\n   - `y` is updated as: `y = (y + 1) / 2` in each iteration.\n   - The loop continues while `x >= 0`.\n\nA possible ranking function for this loop is `x + y`. Let's see if it meets the criteria:\n\n- The value of the ranking function must decrease with every successive iteration of the loop:\n  - Since `x` is decreased by `y` in every iteration, and `y` is non-negative, the value of the ranking function `x + y` will decrease with each iteration.\n\n- The value must be positive for the loop to continue executing:\n  - The loop continues while `x >= 0`, and since `y` is always non-negative, the ranking function `x + y` will be positive while the loop is executing.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant x + y;\n*/\n```",
            "1. Note the starting values or constraints for the variables that are live at the loop head.\n   - x is initialized with an unknown integer value.\n   - y is initialized with the value 2.\n\n2. Analyze the loop body and find a ranking function involving the variables in the loop body\n   - The loop continues executing while x is greater than or equal to 0.\n   - In the loop body, x decreases by y, and y increases by 1/2 (integer division) in every iteration.\n\nNow, let's find the ranking function:\n\nSince x decreases by y in each iteration and y increases, the value of x will always be decreasing. However, the value of y increases at a decreasing rate due to integer division by 2. Therefore, we can use the current value of x as the ranking function, as it will be decreasing in every iteration and will be positive while the loop is executing.\n\nSo, the ranking function is x.\n\nHere is the loop variant in ACSL syntax:\n\n```c\n/*@\n    loop variant x;\n*/\n```"
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n*/",
                    "/*@ \n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant 1 <= y <= \\at(y, LoopEntry) + 1;\n    loop invariant x >= 0 ==> y >= 1;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/",
                    "/*@ \n    loop invariant x >= -y + \\at(x, LoopEntry);\n    loop invariant y >= 2;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and make note of the starting values or constraints for the variables that are live at the loop head:\n\n- `x` is initialized to an unknown integer value from the `unknown_int()` function.\n- `y` is initialized to 2.\n\nThe loop condition is `x >= 0` and the given ranking function is `(x)`.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration:\n\n1. The value of `x` is always non-negative at the loop head, which is the loop condition itself.\n2. The value of `y` is always positive inside the loop because it is initialized to 2 and updated as `(y + 1) / 2` in each iteration, which will always result in a positive value.\n\nThe loop invariants are:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y > 0;\n*/\n```\n\nThese loop invariants, together with the ranking function `(x)`, support the termination of the loop in the given program.",
                    "First, let's analyze the loop condition and starting values:\n- The loop condition is (x >= 0).\n- The starting values are x = unknown_int() and y = 2.\n\nNow, let's analyze the loop body:\n- x is decreased by y in each iteration: x = x - y.\n- y is updated as: y = (y + 1) / 2.\n\nWe are given the ranking function: (x)\n\nNow, let's find the loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\n```\n/*@ \n    loop invariant x <= \\at(x, LoopEntry);\n    loop invariant 1 <= y <= \\at(y, LoopEntry) + 1;\n    loop invariant x >= 0 ==> y >= 1;\n*/\n```",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. We have `x` starting with an unknown value, and `y` starting with the value `2`.\n\nNow, let's analyze the loop body and make a note of the loop condition and the given ranking function. The loop condition is `x >= 0`, and the ranking function is `(x)`.\n\nIn the loop body, we have `x = x - y` and `y = (y + 1) / 2`. To find the loop invariants, we need to analyze the loop behavior and find constraints that are true before the loop, in every iteration of the loop, and after the loop termination.\n\nLet's output the loop invariants:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant x >= -1;\n    loop invariant \\at(x, LoopEntry) >= x;\n*/\n```\n\nHere, the loop invariants are:\n1. `y >= 1`: The value of `y` is always greater than or equal to `1`. This is true because `y` starts with the value `2` and is updated as `(y + 1) / 2` in each iteration, which will always be greater than or equal to `1`.\n\n2. `x >= -1`: The value of `x` is always greater than or equal to `-1`. This is true because `x` starts with an unknown value, and in each iteration, it decreases by `y`. Since `y >= 1`, `x` can only decrease by a positive value, so it will always be greater than or equal to `-1`.\n\n3. `\\at(x, LoopEntry) >= x`: The value of `x` at the beginning of the loop is always greater than or equal to the current value of `x`. This is true because `x` decreases in each iteration of the loop.",
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. In this case, the variable `x` is initialized with an unknown integer value, and `y` is initialized to 2. Since `x` is unknown, it does not have any specific constraints.\n\nNext, let's analyze the loop body and make note of the loop condition and the given ranking function. The loop condition is `x >= 0`, and the ranking function is `(x)`.\n\nNow, let's output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply that the ranking function decreases with every iteration.\n\nLoop invariants for the given C program:\n\n```\n/*@ \n    loop invariant x >= -y + \\at(x, LoopEntry);\n    loop invariant y >= 2;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/\n```\n\nThese invariants hold true:\n1. Before the loop execution: `x` can be any integer value, and `y` is 2.\n2. In every iteration of the loop: `x` decreases by `y` and `y` increases by 1 and then is divided by 2, so `x` is always greater than or equal to the initial value of `x` minus `y`.\n3. After the loop termination: When the loop terminates, `x` must be less than 0, and `y` must be greater than or equal to 2.",
                    "First, let's analyze the starting values and constraints for the variables live at the loop head. We have x, which is an unknown integer, and y, which is initialized to 2.\n\nThe loop condition is x >= 0, and the ranking function is x. Inside the loop, x is decreasing by y, and y is updated to (y + 1) / 2.\n\nNow, let's find the loop invariants that support the ranking function (x):\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 1;\n    loop invariant y <= \\at(y, LoopEntry) + 1;\n*/\n```"
                ],
                "inductive_invariants": "loop invariant i2: y > 0;\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: 1 <= y <= \\at(y, LoopEntry) + 1;\nloop invariant i5: x >= 0 ==> y >= 1;\nloop invariant i6: y >= 1;\nloop invariant i8: \\at(x, LoopEntry) >= x;\nloop invariant i11: y <= \\at(y, LoopEntry) + 1;",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = 2;\n\t/*@\nloop invariant i2: y > 0;\nloop invariant i3: x <= \\at(x, LoopEntry);\nloop invariant i4: 1 <= y <= \\at(y, LoopEntry) + 1;\nloop invariant i5: x >= 0 ==> y >= 1;\nloop invariant i6: y >= 1;\nloop invariant i8: \\at(x, LoopEntry) >= x;\nloop invariant i11: y <= \\at(y, LoopEntry) + 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = (y + 1) / 2;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant y > 0 is inductive.\nloop invariant x <= \\at(x, LoopEntry) is inductive.\nloop invariant 1 <= y <= \\at(y, LoopEntry) + 1 is inductive.\nloop invariant x >= 0 ==> y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant \\at(x, LoopEntry) >= x is inductive.\nloop invariant y <= \\at(y, LoopEntry) + 1 is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 1.6521739130434783
    }
}