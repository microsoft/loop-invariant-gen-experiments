{
    "log": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "simple_variants": [
            [
                "x"
            ]
        ],
        "simple_variant_llm_output": [
            {
                "role": "system",
                "content": "A ranking function (also called variant) is an expression over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function that helps prove that the loop must terminate.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and find a ranking function involving the variables in the loop body\n- Output the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\n\nRules:\n- **Do not use constants or functions not defined in the program. Use the ternary operator to describe the absolute value of an expression.**"
            },
            {
                "role": "user",
                "content": "Consider the following C program:  \n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program. \n\nEnsure that the ranking function is **decreasing** with every iteration of the loop, and evaluates to a **positive value** while the loop is executing.\n\n**If there is an upper bound to the loop variable, and the loop condition requires the loop variable to not decrease, output an expression involving the upper bound and the old value of the loop variable in every iteration.**\n\nLet's think step by step. "
            },
            "The starting values for the variables `x` and `y` are unknown, but we can assume that `x` is non-negative and `y` is positive since these are the conditions for the loop to continue executing. Within the loop body, `x` is decremented by `y` and `y` is assigned an unknown value. \n\nThe loop continues as long as `x` is non-negative and `y` is positive. Therefore, the value of `x` can be considered as the ranking function, because it is guaranteed to decrease with each iteration (since it is decremented by a positive value `y`), and it is positive for the loop to continue executing.\n\nThe ranking function in ACSL syntax would be:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "The variables live at the loop head are `x` and `y`. The loop condition is `x >= 0`. \n\nInside the loop body, `x` is decreased by `y` in each iteration. The value of `y` is re-assigned in each iteration to an unknown integer value. However, if `y` is less than 1, the loop is broken.\n\nIt's hard to find a ranking function that decreases in every iteration because `y` is an unknown integer and can be any value. But we can notice that `x` is always decreasing or staying the same (in case `y` is 0). \n\nSo, the ranking function could be `x`. It's a valid ranking function because `x` is always positive or zero when the loop is executing (according to the loop condition), and `x` is decreasing in every iteration of the loop.\n\nHere is how to express it in ACSL:\n\n```\n/*@\n    loop variant x;\n*/\n```",
            "The starting value for `x` is an unknown integer, and the starting value for `y` is an unknown integer greater than or equal to 1. \n\nThe loop continues to execute as long as `x` is greater than or equal to 0. Within the loop, `x` is decreased by `y` with each iteration. Therefore, the value of `x` is decreasing with every iteration of the loop.\n\nHowever, the value of `y` is reset to an unknown integer in each iteration. If `y` is less than 1, the loop breaks. So, we cannot directly use `y` in the ranking function because it does not necessarily decrease with each iteration.\n\nGiven these conditions, a suitable ranking function would be `x`, because it decreases with each iteration and is positive during the execution of the loop.\n\nTherefore, we can write this ranking function in ACSL syntax as:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because it adheres to the conditions that it must decrease with every iteration and must be positive for the loop to continue executing. In this case, `x` is reduced by `y` in every iteration and the loop continues to execute as long as `x` is greater than or equal to 0.",
            "The loop condition in this program is `x >= 0`, which means the loop continues to execute as long as `x` is greater than or equal to 0. \n\nIn every iteration of the loop, `x` is decremented by `y`, where `y` is always greater than or equal to 1. \n\nTherefore, `x` is guaranteed to decrease with every iteration of the loop. \n\nMoreover, as long as the loop is executing, `x` is guaranteed to be a non-negative integer, which means it is always greater than or equal to 0. \n\nTherefore, `x` itself can be considered as the ranking function for this loop.\n\nThe ACSL syntax for this ranking function would be:\n```\n/*@\n    loop variant x;\n*/\n```",
            "The variables that are live at the loop head are `x` and `y`. In the loop body, `x` is always decreased by `y`, and `y` is randomly reassigned. \n\nHowever, if `y` is less than 1, the loop terminates. Therefore, in every iteration of the loop, `y` is at least 1 and `x` is decreased by at least 1.\n\nSo, a valid ranking function for this loop could be `x` itself, because `x` is always decreasing and the loop continues to execute as long as `x` is non-negative.\n\nThis function satisfies all the requirements for a ranking function: it's an expression over live variables, it decreases with every iteration, and it's positive for the loop to continue executing. \n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n``` \n\nThis ranking function is valid because `x` is always non-negative at the beginning of each loop iteration and it decreases by at least 1 in every iteration, so the loop must eventually terminate when `x` becomes negative."
        ],
        "simple_variant_log": {
            "success": true,
            "['x']": {
                "variant": [
                    "x"
                ],
                "invariant_code_blocks": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry) ==> x >= \\at(x, LoopEntry) - y;\n*/",
                    "/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant x >= 0;\n    loop invariant y <= INT_MAX;\n*/",
                    "/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) >= 1;\n*/",
                    "/*@ \n    loop invariant y >= 1;\n    loop invariant \\at(y, LoopEntry) >= 1;\n    loop invariant x >= 0 ==> x <= \\at(x, LoopEntry);\n*/"
                ],
                "invariant_llm_output": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression over program variables that are live at the loop head, whose value is non-negative and decreases with every iteration of the loop.\nA ranking function can be used to prove the termination of a loop. \nA lexicographic ranking function is a sequence of expressions, where the expressions decrease lexicographically in every iteration of the loop. That is, the first expression decreases, or if it remains the same, the second expression decreases, and so on.\nA multi-phase ranking function is a sequence of expressions, where the expressions decrease in phases. That is, the first expression is positive and decreases initially, once it becomes negative, the second expression becomes positive and decreases, and so on.\nGiven a program with a ranking function for the loop in the program, find loop invariants that support the validity of the ranking function and prove the termination of the loop.\n\nInstructions:\n- Make note of the starting values or constraints for the variables that are live at the loop head.\n- Analyze the loop body and make a note of the loop condition and the given ranking function.\n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply that the ranking function decreases with every iteration.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **Assume all uninitialized variables to contain garbage values.**\n- **Assume non-deterministic functions to return any value permitted by its return type.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Use the expression \"\\at(x, LoopEntry)\" to refer to the value of a variable \"x\" at the beginning of the loop.**"
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nOutput the loop invariants to support the loop variant **(x)**, for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make note of the starting values or constraints for the variables that are live at the loop head. In this case, x and y are initialized with unknown_int() and have no specific bounds. However, we know that y must be greater than or equal to 1 for the loop to execute.\n\nNow let's analyze the loop body and note the loop condition and the given ranking function. The loop condition is (x >= 0) and the ranking function is (x).\n\nLoop invariants that support the validity of the ranking function and prove the termination of the loop are:\n- x is non-negative at the beginning of the loop.\n- x decreases with every iteration of the loop, provided y is greater than or equal to 1.\n- After the loop termination, x must be negative.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry) ==> x >= \\at(x, LoopEntry) - y;\n*/\n```",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n- x and y are initialized with unknown_int(), so they can have any integer value.\n- y is checked to be greater than or equal to 1 before entering the loop.\n\nNow let's analyze the loop body and note the loop condition:\n- The loop continues as long as x is greater than or equal to 0.\n- Inside the loop, x is decreased by y, and y is assigned a new value from unknown_int().\n- The loop breaks if the new value of y is less than 1.\n\nGiven this information, we can derive the following loop invariants to support the ranking function (x):\n\n```c\n/*@ \n    loop invariant x >= 0 ==> y >= 1;\n    loop invariant x >= 0;\n    loop invariant y <= INT_MAX;\n*/\n```\n\nExplanation:\n1. If x is greater than or equal to 0, then y must be greater than or equal to 1. This ensures that x is decreasing in every iteration, as long as the loop condition holds.\n2. The loop condition ensures that x is always greater than or equal to 0, so this is an invariant.\n3. The maximum value of y is the maximum value of an integer (INT_MAX), as it is assigned an unknown integer value.",
                    "First, let's analyze the program and its variables.\n\n- x and y are initialized with unknown values.\n- y has a constraint: it must be greater than or equal to 1 to enter the loop.\n- The loop condition is x >= 0.\n- The ranking function is x.\n- In the loop body, x decreases by y, and y gets a new unknown value.\n- The loop terminates if y becomes less than 1.\n\nNow, let's find the loop invariants:\n\n1. Initially, x can be any integer value, and y must be greater than or equal to 1. So, at the beginning of the loop execution, x can be any integer, and y is greater than or equal to 1.\n2. In every iteration of the loop, x will decrease by y, and y will be updated with a new unknown value. Since y is always greater than or equal to 1, x will always decrease.\n3. After the loop terminates, x must be less than 0, and y can be any integer value.\n\nTaking these points into account, the loop invariants can be:\n\n```\n/*@ \n    loop invariant x >= \\at(x, LoopEntry);\n    loop invariant y >= 1;\n*/\n```",
                    "First, let's analyze the starting values or constraints for the variables that are live at the loop head:\n\n- `x` and `y` are initialized with unknown integer values.\n- `y` must be greater than or equal to 1 at the beginning of the loop.\n\nNext, let's analyze the loop body:\n\n- The loop condition is `x >= 0`.\n- The loop body has two statements:\n    1. `x` is updated to `x - y`.\n    2. `y` is updated to an unknown integer value, and it breaks the loop if `y` is less than 1.\n\nNow, let's output the loop invariants that support the validity of the ranking function (x):\n\n```c\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= \\at(y, LoopEntry);\n    loop invariant \\at(y, LoopEntry) >= 1;\n*/\n```\n\nThese loop invariants satisfy the requirements:\n\n1. They are true before the loop execution:\n    - `x` is an unknown integer value, and the loop condition guarantees that `x >= 0`.\n    - `y` is an unknown integer value, but it must be greater than or equal to 1 before entering the loop.\n\n2. They are true in every iteration of the loop:\n    - `x` is always updated to a non-positive value (`x - y`) when `x >= 0`, so `x` remains non-negative.\n    - `y` is always updated to an unknown integer value, but it remains greater than or equal to its value at the beginning of the loop since it only breaks the loop when it becomes less than 1.\n\n3. They are true after the loop termination:\n    - When the loop terminates, `x` must be negative, which means it has decreased.\n    - `y` remains greater than or equal to its value at the beginning of the loop.",
                    "First, let's note the starting values and constraints for the variables that are live at the loop head:\n\n- x is an integer with an unknown initial value.\n- y is an integer with an unknown initial value, but it is constrained to be greater or equal to 1.\n\nNow, let's analyze the loop body and note the loop condition and the given ranking function:\n\n- The loop condition is (x >= 0).\n- The given ranking function is (x).\n\nNow, let's find loop invariants that support the validity of the ranking function and prove the termination of the loop:\n\n```\n/*@ \n    loop invariant y >= 1;\n    loop invariant \\at(y, LoopEntry) >= 1;\n    loop invariant x >= 0 ==> x <= \\at(x, LoopEntry);\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `y >= 1`: This invariant states that y is always greater or equal to 1 during the loop execution. This is true because if y becomes less than 1, the loop will break.\n\n2. `\\at(y, LoopEntry) >= 1`: This invariant states that the value of y at the beginning of the loop is greater or equal to 1. This is true because the loop starts with the condition `if (y < 1) return 0;`.\n\n3. `x >= 0 ==> x <= \\at(x, LoopEntry)`: This invariant states that if x is greater or equal to 0, then x is less or equal to its initial value at the beginning of the loop. This is true because x decreases by y in every iteration, and y is always greater or equal to 1."
                ],
                "inductive_invariants": "loop invariant i3: x >= 0 ==> y >= 1;\nloop invariant i6: y >= 1;\nloop invariant i8: \\at(y, LoopEntry) >= 1;\nloop invariant i9: x >= 0 ==> x <= \\at(x, LoopEntry);",
                "final_variant_candidates": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i3: x >= 0 ==> y >= 1;\nloop invariant i6: y >= 1;\nloop invariant i8: \\at(y, LoopEntry) >= 1;\nloop invariant i9: x >= 0 ==> x <= \\at(x, LoopEntry);\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - y;\n\t\ty = unknown_int();\n\t\tif (y < 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant x >= 0 ==> y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant \\at(y, LoopEntry) >= 1 is inductive.\nloop invariant x >= 0 ==> x <= \\at(x, LoopEntry) is inductive.\n\n\nLoop variant is Valid."
                    }
                ],
                "success": true
            }
        },
        "simple_variant_success": true
    },
    "stats": {
        "success": [
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [],
        "total": 23,
        "success_count": 38,
        "failure_count": 23,
        "success_rate": 1.6521739130434783
    }
}