{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\nx, y, and d are assigned values from unknown_int(), which means their values are non-deterministic at the beginning.\n\nLoop condition:\nThe loop continues as long as x > 0, y > 0, and d > 0.\n\nNow let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x <= 0 || y <= 0 || d <= 0) ==> (x <= 0 && y <= 0 && d <= 0);\n*/\n```",
                    "First, let's note the initial values and the loop condition:\n- `x`, `y`, and `d` have non-deterministic initial values.\n- Loop condition is `x>0 && y>0 && d>0`.\n\nNow, let's find the loop invariants:\n\n1. Since `x` and `y` are always non-negative inside the loop, we can add invariants for `x` and `y`.\n2. The value of `d` is always non-negative inside the loop because it is either assigned to an unknown non-negative value or decremented by 1 when it is already positive.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They can help Frama-C reason about the properties of the variables `x`, `y`, and `d` within the loop.",
                    "First, let's note down the pre-conditions and variable assignments in the program:\n\n- x, y, and d are assigned non-deterministic integer values from unknown_int().\n\nNow, let's analyze the loop condition and body:\n\n- The loop condition is (x > 0 && y > 0 && d > 0).\n- The loop body either decrements x by 1 and assigns a non-deterministic value to d or assigns a non-deterministic value to x, decrements y by 1, and decrements d by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0;\n*/\n```\n\nExplanation:\n\n- x, y, and d are non-negative integers (x >= 0, y >= 0, and d >= 0). These invariants hold before the loop execution, in every iteration of the loop, and after the loop termination.\n- If x > 0, y > 0, and d > 0 (the loop condition), then the sum of x and y is always greater than 0 (x + y > 0). This invariant holds before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's make a note of the variable assignments and pre-conditions:\n- int x = unknown_int();\n- int y = unknown_int();\n- int d = unknown_int();\n\nNext, let's analyze the loop condition and body:\n- Loop condition: x > 0 && y > 0 && d > 0\n- Loop body: If unknown_int() is true, x decreases by 1, and d is assigned an unknown value. Else, x is assigned an unknown value, y decreases by 1, and d decreases by 1.\n\nNow let's identify the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant \\forall int k; 0 <= k <= x ==> d >= 0;\n    loop invariant \\forall int k; 0 <= k <= y ==> d >= 0;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "First, let's note the variable assignments and the loop condition:\n\nVariable assignments:\n- int x = unknown_int();\n- int y = unknown_int();\n- int d = unknown_int();\n\nLoop condition: x > 0 && y > 0 && d > 0\n\nNow, let's find the loop invariants:\n\ni) Before the loop execution:\n- x, y, and d are non-deterministic, so we don't know their values.\n\nii) In every iteration of the loop:\n- The loop condition is true: x > 0, y > 0, and d > 0.\n- Either x decreases by 1 or y decreases by 1 in each iteration.\n- d can be assigned an unknown value or decrease by 1.\n\niii) After the loop termination:\n- At least one of x, y, or d is less than or equal to 0.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x <= 0 || y <= 0 || d <= 0) ==> (x <= 0 && y <= 0 && d <= 0);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant \\forall int k; 0 <= k <= x ==> d >= 0;\n    loop invariant \\forall int k; 0 <= k <= y ==> d >= 0;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x <= 0 || y <= 0 || d <= 0) ==> (x <= 0 && y <= 0 && d <= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\nloop invariant (x <= 0 || y <= 0 || d <= 0) ==> (x <= 0 && y <= 0 && d <= 0) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\nloop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant \\forall int k; 0 <= k <= x ==> d >= 0;\n    loop invariant \\forall int k; 0 <= k <= y ==> d >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\nloop invariant \\forall int k; 0 <= k <= x ==> d >= 0 is inductive.\nloop invariant \\forall int k; 0 <= k <= y ==> d >= 0 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is neither established nor preserved.\nloop invariant y >= 0 is preserved but not established.\nloop invariant d >= 0 is neither established nor preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant (x <= 0 || y <= 0 || d <= 0) ==> (x <= 0 && y <= 0 && d <= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\nloop invariant i4: x > 0 && y > 0 && d > 0 ==> x + y > 0;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n    loop invariant \\forall int k; 0 <= k <= x ==> d >= 0;\n    loop invariant \\forall int k; 0 <= k <= y ==> d >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant d >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\n\n\n\n\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\n\n\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    while (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop invariants. Loop invariants are conditions that are true before and after each iteration of the loop. In this case, we have x > 0, y > 0, and d > 0 as loop invariants.\n\nNow let's find the ranking function. The ranking function should decrease with every iteration of the loop and be positive while the loop is executing. In this case, we can use a lexicographic ranking function with two expressions: x and d.\n\nThe ranking function for this loop would be:\n\n```\n/*@\n    loop invariant x > 0 && y > 0 && d > 0;\n    loop variant (x, d);\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of x decreases in the first branch of the if statement, and the value of d can change, but x is guaranteed to decrease.\n2. In the second branch of the if statement, the value of y decreases and the value of d decreases.\n3. The value of x is always positive while the loop is executing (due to the loop invariant), and the value of d is also always positive while the loop is executing.\n\nThus, the lexicographic ranking function (x, d) decreases with every iteration of the loop, and is positive while the loop is executing, ensuring the loop's termination.",
                    "The program contains a loop that iterates as long as `x > 0`, `y > 0`, and `d > 0`. There are two branches within the loop, and both of them update the values of `x`, `y`, and `d`. We need to find a ranking function that decreases with every iteration, ensuring the loop's termination.\n\nConsider the following ranking function:\n\n```\n/*@\n    loop variant x + y + d;\n*/\n```\n\nLet's check why this is a valid ranking function:\n\n1. The ranking function is positive when the loop executes: Since the loop condition requires `x > 0`, `y > 0`, and `d > 0`, the sum `x + y + d` will always be positive when the loop executes.\n\n2. The ranking function decreases with every iteration: In the first branch, `x` decreases by 1, and `d` can take any value. However, since `x` decreases, the sum `x + y + d` will decrease as well. In the second branch, `y` decreases by 1 and `d` decreases by 1, while `x` can take any value. Since both `y` and `d` decrease, the sum `x + y + d` will decrease in this case as well.\n\nSince the ranking function is always positive during the loop execution and decreases with every iteration, it ensures the termination of the loop. Therefore, the given ranking function is valid for the provided program.",
                    "The loop contains two branches, and in each branch, the variables x, y, and d are updated. We can see that either x decreases or y and d decrease in each iteration. Therefore, we can use a lexicographic ranking function consisting of two expressions: (x, d).\n\n```\n/*@\n    loop variant x;\n    loop variant d;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The values of x and d are always non-negative, as they are initialized with unknown_int() and either stay the same or decrease in each iteration.\n\n2. In each iteration, either x decreases, or x remains the same, and d decreases. This guarantees that the loop will make progress towards termination.\n\n3. Since x and d are non-negative, the loop will eventually reach a state where x, y, or d becomes 0, causing the loop to terminate.",
                    "First, let's analyze the loop in the given program:\n\n```\nwhile (x>0 && y>0 && d>0) {\n    if (unknown_int()) {\n        x = x - 1;\n        d = unknown_int();\n    } else {\n        x = unknown_int();\n        y = y - 1;\n        d = d - 1;\n    }\n}\n```\n\nThere are two possible branches in the loop: \n1. In the first branch, `x` decreases by 1, and `d` gets an unknown value.\n2. In the second branch, `y` decreases by 1, and `d` decreases by 1. `x` gets an unknown value.\n\nWe can use a lexicographic ranking function to prove the termination of the loop. In this case, we can use the tuple (y, d) as the ranking function.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n    loop variant d;\n*/\n```\n\nThis ranking function is valid because:\n1. Both `y` and `d` are positive for the loop to continue executing.\n2. In the first branch, `y` remains the same, and `d` gets an unknown value, but the loop still terminates because `x` decreases by 1, and the loop condition depends on `x > 0`.\n3. In the second branch, `y` decreases by 1, and `d` decreases by 1. Since `y` decreases, the lexicographic ranking function decreases as well.\n\nThus, the lexicographic ranking function (y, d) proves that the loop must terminate.",
                    "We can use a lexicographic ranking function for this loop. The lexicographic ranking function will be a sequence of expressions (x, y, d). The loop variant in ACSL syntax is:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n    loop variant d;\n*/\n```\n\nExplanation:\n- The value of each expression (x, y, and d) must be positive for the loop to execute.\n- In each iteration, either x decreases or remains the same. If x remains the same, then y decreases.\n- If both x and y remain the same, then d decreases.\n\nThis lexicographic ranking function ensures that the loop must terminate because in every iteration, at least one of the expressions decreases while the others remain non-negative. Eventually, one of x, y, or d will become zero or negative, causing the loop to exit."
                ],
                "output": [
                    "/*@\n    loop invariant x > 0 && y > 0 && d > 0;\n    loop variant (x, d);\n*/",
                    "/*@\n    loop variant x + y + d;\n*/",
                    "/*@\n    loop variant x;\n    loop variant d;\n*/",
                    "/*@\n    loop variant y;\n    loop variant d;\n*/",
                    "/*@\n    loop variant x;\n    loop variant y;\n    loop variant d;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\nloop variant (x, d);\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 11: unexpected token ','"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    /*@\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\nloop variant x + y + d;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    }\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    //@ ghost variant_expression measure = { x, d };\n/*@\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\nloop invariant measure.a == x && measure.b == d;\nloop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    \n//@ ghost measure.a = x;\n//@ ghost measure.b = d;\n}\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    //@ ghost variant_expression measure = { y, d };\n/*@\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\nloop invariant measure.a == y && measure.b == d;\nloop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    \n//@ ghost measure.a = y;\n//@ ghost measure.b = d;\n}\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\nint c;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b) ||\n (v1.c >= 0 && v1.a == v2.a && v1.b == v2.b && v1.c > v2.c);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tint d = unknown_int();\n    //@ ghost variant_expression measure = { x, y, d };\n/*@\nloop invariant i11: x > 0 && y > 0 && d > 0 ==> x + y > 0;\nloop invariant measure.a == x && measure.b == y && measure.c == d;\nloop variant measure for lexicographic;\n*/\nwhile (x>0 && y>0 && d>0) {\n        if (unknown_int()) {\n            x = x - 1;\n            d = unknown_int();\n        } else {\n            x = unknown_int();\n            y = y - 1;\n            d = d - 1;\n        }\n    \n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n//@ ghost measure.c = d;\n}\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x > 0 && y > 0 && d > 0 ==> x + y > 0 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c"
        ],
        "skipped": [],
        "total": 163,
        "success_count": 76,
        "failure_count": 87,
        "success_rate": 0.4662576687116564
    }
}