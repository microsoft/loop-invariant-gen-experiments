{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- x, y, and z are assigned non-deterministic values using `unknown_int()` function.\n- c is assigned the value 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `(x > z) && (y > z)`.\n- In each iteration of the loop, x is decremented by 1, y is decremented by 1, and c is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z * (c == 0);\n    loop invariant y >= z * (c == 0);\n    loop invariant x + c == \\at(x, Pre);\n    loop invariant y + c == \\at(y, Pre);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x, y, and z are initialized with unknown_int() function calls.\n- c is initialized to 0.\n\nLoop condition:\n- (x > z) && (y > z)\n\nLet's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n    loop invariant (x <= z) || (y <= z) ==> (c == \\at(x, Pre) - \\at(x, LoopEntry));\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n- x, y, and z are assigned non-deterministic integer values.\n- c is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x > z) && (y > z).\n\nNow, let's output the loop invariants:\n```\n/*@\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n*/\n```\n\nThese loop invariants are true:\n- (i) before the loop execution,\n- (ii) in every iteration of the loop, and\n- (iii) after the loop termination.\n\nThe loop invariants imply the post-condition as they ensure that the value of c is non-negative and that x and y are always greater than or equal to z during the loop execution. Additionally, they ensure that x and y do not exceed their initial values when decremented.",
                    "First, make a note of the pre-conditions or variable assignments in the program:\n- x, y, and z are assigned non-deterministic integer values.\n- c is initialized to 0.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is (x > z) && (y > z).\n\nNow, output loop invariants that are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination,\nsuch that the loop invariants imply the post-condition (in this case, there is no explicit post-condition):\n\n```\n/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x - c >= z;\n    loop invariant y - c >= z;\n*/\n```\n\nThese loop invariants hold before the loop execution, in every iteration of the loop, and after the loop termination.",
                    "Pre-conditions and variable assignments in the program:\n- x, y, and z are assigned non-deterministic integer values.\n- c is initialized to 0.\n\nLoop condition:\n- (x > z) && (y > z)\n\nWe need to find the loop invariants that are true before the loop execution, during every iteration of the loop, and after the loop termination.\n\nLoop invariants:\n```\n/*@ \n    loop invariant z <= x;\n    loop invariant z <= y;\n    loop invariant x == \\at(x, Pre) - c;\n    loop invariant y == \\at(y, Pre) - c;\n    loop invariant 0 <= c <= \\at(x, Pre) - z;\n    loop invariant 0 <= c <= \\at(y, Pre) - z;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z * (c == 0);\n    loop invariant y >= z * (c == 0);\n    loop invariant x + c == \\at(x, Pre);\n    loop invariant y + c == \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n    loop invariant (x <= z) || (y <= z) ==> (c == \\at(x, Pre) - \\at(x, LoopEntry));\n*/",
                    "/*@\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x - c >= z;\n    loop invariant y - c >= z;\n*/",
                    "/*@ \n    loop invariant z <= x;\n    loop invariant z <= y;\n    loop invariant x == \\at(x, Pre) - c;\n    loop invariant y == \\at(y, Pre) - c;\n    loop invariant 0 <= c <= \\at(x, Pre) - z;\n    loop invariant 0 <= c <= \\at(y, Pre) - z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z * (c == 0);\n    loop invariant y >= z * (c == 0);\n    loop invariant x + c == \\at(x, Pre);\n    loop invariant y + c == \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: invalid operands to binary *; unexpected int and ùîπ. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n    loop invariant (x <= z) || (y <= z) ==> (c == \\at(x, Pre) - \\at(x, LoopEntry));\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 18: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x - c >= z;\n    loop invariant y - c >= z;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= z is preserved but not established.\nloop invariant y >= z is preserved but not established.\nloop invariant c >= 0 is inductive.\nloop invariant x - c >= z is established but not preserved.\nloop invariant y - c >= z is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant z <= x;\n    loop invariant z <= y;\n    loop invariant x == \\at(x, Pre) - c;\n    loop invariant y == \\at(y, Pre) - c;\n    loop invariant 0 <= c <= \\at(x, Pre) - z;\n    loop invariant 0 <= c <= \\at(y, Pre) - z;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 17: unbound logic variable x. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= c;\n    loop invariant x >= z * (c == 0);\n    loop invariant y >= z * (c == 0);\n    loop invariant x + c == \\at(x, Pre);\n    loop invariant y + c == \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i1: 0 <= c;\n\n\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= c;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n    loop invariant (x <= z) || (y <= z) ==> (c == \\at(x, Pre) - \\at(x, LoopEntry));\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i1: 0 <= c;\n\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x + c <= \\at(x, Pre);\n    loop invariant y + c <= \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\n\n\nloop invariant i3: c >= 0;\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= z;\n    loop invariant y >= z;\n    loop invariant c >= 0;\n    loop invariant x - c >= z;\n    loop invariant y - c >= z;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\n\n\nloop invariant i3: c >= 0;\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 6,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant z <= x;\n    loop invariant z <= y;\n    loop invariant x == \\at(x, Pre) - c;\n    loop invariant y == \\at(y, Pre) - c;\n    loop invariant 0 <= c <= \\at(x, Pre) - z;\n    loop invariant 0 <= c <= \\at(y, Pre) - z;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\n\n\n\n\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 13,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    /*@\nloop invariant i1: 0 <= c;\n\n\n\n\n\n\n\n\n\nloop invariant i12: c >= 0;\n\n\n\n\n\n\n\n\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    while ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop invariant and the variables that change within the loop. In this case, the loop invariant is `(x > z) && (y > z)`, and the variables that change are `x`, `y`, and `c`. \n\nNow, let's find a ranking function for this loop. The loop will continue executing as long as `(x > z) && (y > z)` is true. We can use the difference between `x` and `z`, as well as the difference between `y` and `z` as our lexicographic ranking functions. Let's define the ranking function as:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```\n\nNow, let's verify that this ranking function is valid. For a ranking function to be valid, it must:\n\n1. Decrease with every successive iteration of the loop.\n2. Have a positive value for the loop to continue executing.\n\nIn our case, both `x - z` and `y - z` have positive values as long as the loop continues executing, because `(x > z) && (y > z)` is the loop invariant.\n\nAdditionally, in every iteration of the loop, both `x` and `y` are decreased by 1. Therefore, the values of both `x - z` and `y - z` decrease in every iteration of the loop, making them valid ranking functions.\n\nSo, the lexicographic ranking function for this loop is:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```\n\nThis ranking function is valid because it ensures that the loop will eventually terminate, as both `x - z` and `y - z` decrease with every iteration of the loop and are positive as long as the loop continues executing.",
                    "First, let's identify the loop in the given program:\n\n```c\nwhile ((x > z) && (y > z)) {\n    x = x - 1;\n    y = y - 1;\n    c = c + 1;\n}\n```\n\nNow, let's find the ranking function for this loop. We can use the variables `x`, `y`, and `z` to form the ranking function. Since both `x` and `y` are being decremented in the loop, we can use their difference with `z` as the ranking function.\n\nThe ranking function for this loop is:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The values of `x - z` and `y - z` are positive at the start of each iteration of the loop. This is because the loop condition `(x > z) && (y > z)` ensures that `x` and `y` are greater than `z`.\n\n2. The values of `x - z` and `y - z` decrease in each iteration of the loop. In each iteration, `x` and `y` are decremented by 1, so their differences with `z` decrease by 1 as well.\n\n3. The loop terminates when either `x - z` or `y - z` becomes non-positive. This happens when either `x <= z` or `y <= z`, at which point the loop condition becomes false and the loop terminates.\n\nThus, the ranking function is valid because it ensures that the loop must terminate.",
                    "First, let's analyze the loop conditions and the loop body. The loop continues executing as long as both `x > z` and `y > z` hold. In each iteration, `x` and `y` are decremented by 1, while `c` is incremented by 1. Now, let's find the ranking function.\n\nThe loop invariant can be stated as follows:\n`x - z > 0`, `y - z > 0`\n\nWe can use lexicographic ranking functions to prove the loop's termination. In this case, we can choose `(x - z)` and `(y - z)` as the expressions in the lexicographic ranking function.\n\nNow, let's validate the ranking function:\n\n1. The value of both expressions must be positive for the loop to execute. This condition holds as the loop continues executing as long as both `x > z` and `y > z`.\n\n2. Either the value of `(x - z)` must decrease or remain the same. If the value remains the same, the value of `(y - z)` must decrease. In each iteration of the loop, `x` is decremented by 1, so `(x - z)` either decreases or remains the same. If `(x - z)` remains the same, then `y` must be decremented by 1, causing `(y - z)` to decrease.\n\nGiven these properties, the lexicographic ranking function is valid. Here is the ACSL syntax representation of the ranking function:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```",
                    "First, let's analyze the loop and its conditions. The loop continues to execute as long as both `x > z` and `y > z` are true. In each iteration, `x` and `y` decrease by 1, and `c` increases by 1.\n\nNow, let's find the ranking function. We can use the difference between `x` and `z` as our first expression, and the difference between `y` and `z` as our second expression. Therefore, the lexicographic ranking function is:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```\n\nTo prove that this is a valid ranking function, we need to show that the values of the expressions are positive as long as the loop continues to execute, and that either the first expression decreases or remains the same, and if it remains the same, the second expression decreases.\n\n1. Positivity: As long as the loop continues to execute, we have `x > z` and `y > z`. Therefore, both `x - z` and `y - z` are positive.\n\n2. Decreasing: In each iteration, `x` and `y` decrease by 1, while `z` remains the same. This means that `x - z` and `y - z` both decrease by 1 in each iteration.\n\nSince both expressions are positive as long as the loop executes and both expressions decrease, this lexicographic ranking function proves that the loop must terminate.",
                    "First, let's write down the loop in the given program:\n\n```\nwhile ((x > z) && (y > z)) {\n    x = x - 1;\n    y = y - 1;\n    c = c + 1;\n}\n```\n\nNow, let's find the ranking function for this loop.\n\nThe loop continues executing as long as both `x > z` and `y > z`. We can choose the ranking function as a lexicographic ranking function with two expressions: `(x - z)` and `(y - z)`.\n\nThe ranking function is:\n\n```\n/*@\n    loop variant x - z;\n    loop variant y - z;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. Both expressions are positive for the loop to continue executing: Since the loop condition is `(x > z) && (y > z)`, it means that both `x - z > 0` and `y - z > 0` while the loop is running.\n\n2. The value of the first expression, `x - z`, decreases with every iteration of the loop or stays the same: In each iteration, the value of `x` is decreased by 1 (`x = x - 1`), while the value of `z` remains the same. So, `x - z` either decreases or stays the same.\n\n3. If the value of the first expression remains the same, the value of the second expression, `y - z`, must decrease: Since `x - z` remains the same and `x > z`, it means that `x` doesn't change in the iteration. However, `y` is decreased by 1 in each iteration (`y = y - 1`). Thus, the value of `y - z` must decrease.\n\nTherefore, the given ranking function is a valid ranking function for the loop in the given program. It shows that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x - z;\n    loop variant y - z;\n*/",
                    "/*@\n    loop variant x - z;\n    loop variant y - z;\n*/",
                    "/*@\n    loop variant x - z;\n    loop variant y - z;\n*/",
                    "/*@\n    loop variant x - z;\n    loop variant y - z;\n*/",
                    "/*@\n    loop variant x - z;\n    loop variant y - z;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x - z, y - z };\n/*@\nloop invariant i1: 0 <= c;\nloop invariant i12: c >= 0;\nloop invariant measure.a == x - z && measure.b == y - z;\nloop variant measure for lexicographic;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    \n//@ ghost measure.a = x - z;\n//@ ghost measure.b = y - z;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x - z, y - z };\n/*@\nloop invariant i1: 0 <= c;\nloop invariant i12: c >= 0;\nloop invariant measure.a == x - z && measure.b == y - z;\nloop variant measure for lexicographic;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    \n//@ ghost measure.a = x - z;\n//@ ghost measure.b = y - z;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x - z, y - z };\n/*@\nloop invariant i1: 0 <= c;\nloop invariant i12: c >= 0;\nloop invariant measure.a == x - z && measure.b == y - z;\nloop variant measure for lexicographic;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    \n//@ ghost measure.a = x - z;\n//@ ghost measure.b = y - z;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x - z, y - z };\n/*@\nloop invariant i1: 0 <= c;\nloop invariant i12: c >= 0;\nloop invariant measure.a == x - z && measure.b == y - z;\nloop variant measure for lexicographic;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    \n//@ ghost measure.a = x - z;\n//@ ghost measure.b = y - z;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int c;\n    int x, y, z;\n    x = unknown_int();\n    y = unknown_int();\n    z = unknown_int();\n    c = 0;\n    //@ ghost variant_expression measure = { x - z, y - z };\n/*@\nloop invariant i1: 0 <= c;\nloop invariant i12: c >= 0;\nloop invariant measure.a == x - z && measure.b == y - z;\nloop variant measure for lexicographic;\n*/\nwhile ((x > z) && (y > z)) {\n        x = x - 1;\n        y = y - 1;\n        c = c + 1;\n    \n//@ ghost measure.a = x - z;\n//@ ghost measure.b = y - z;\n}\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= c is inductive.\nloop invariant c >= 0 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c"
        ],
        "skipped": [],
        "total": 200,
        "success_count": 96,
        "failure_count": 104,
        "success_rate": 0.48
    }
}