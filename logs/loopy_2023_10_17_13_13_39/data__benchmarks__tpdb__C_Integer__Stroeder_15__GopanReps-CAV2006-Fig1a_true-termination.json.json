{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\twhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\twhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the initial variable assignments before the loop:\n\nx = 0;\ny = 0;\n\nNext, the loop condition is:\n\nwhile (y >= 0)\n\nNow, let's find the necessary loop invariants. We can use implications to account for the conditional nature of the code and guard conditions. \n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n  loop invariant 0 <= x;\n  loop invariant 0 <= y;\n  loop invariant x <= 50 ==> y == x;\n  loop invariant x > 50 ==> y == 100 - x;\n*/\n``` \n\nThese invariants hold before the loop execution, during every iteration, and after the loop termination. The invariants imply the post-condition of the program.",
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n- x is initialized to 0\n- y is initialized to 0\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `y >= 0`\n\nNow, let's find the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 101;\n*/\n```\n\nExplanation of the loop invariants:\n1. `x >= 0`: x is initialized to 0 and is incremented by 1 in each iteration, so it will always be greater than or equal to 0.\n2. `y >= 0`: The loop condition ensures that y is always greater than or equal to 0.\n3. `x <= 101`: The maximum value of x is reached when x is incremented 101 times (50 times when x <= 50, and 51 times when x > 50). After that, the loop will terminate as y will be decremented and the loop condition `y >= 0` will not hold.",
                    "First, let's note the variable assignments before the loop:\n- x = 0\n- y = 0\n\nThe loop condition is:\n- y >= 0\n\nNow let's identify the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= x;\n    loop invariant y >= 0 ==> x <= y + 50;\n    loop invariant y < 0 ==> x > 50;\n*/\n```\n\nExplanation:\n1. x is always non-negative since it starts from 0 and only increases in the loop.\n2. If y is non-negative, then x is less than or equal to y + 50. This is because x increases by 1 in each iteration, and when x <= 50, y also increases by 1. After x becomes greater than 50, y starts decreasing, but x will always be less than or equal to y + 50.\n3. If y is negative, then x must be greater than 50. This is because y only becomes negative when x > 50 and the loop keeps executing.",
                    "First, let's note the initial variable assignments and the loop condition:\n\nInitial assignments:\n- x = 0\n- y = 0\n\nLoop condition:\n- y >= 0\n\nNow, let's find the loop invariants:\n\n(i) Before the loop execution:\n- x == 0\n- y == 0\n\n(ii) In every iteration of the loop:\n- x is always increasing by 1, so it is non-negative: x >= 0\n- when x <= 50, y increases by 1: (x <= 50) ==> (y >= 0)\n- when x > 50, y decreases by 1: (x > 50) ==> (y <= x - 50)\n\n(iii) After the loop termination:\n- y < 0\n- x > 50\n\nNow let's put all the loop invariants in one code block:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant (x <= 50) ==> (y >= 0);\n    loop invariant (x > 50) ==> (y <= x - 50);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x = 0\n- y = 0\n\nLoop condition:\n- y >= 0\n\nNow, let's determine the loop invariants:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n*/\n```"
                ],
                "output": [
                    "/*@ \n  loop invariant 0 <= x;\n  loop invariant 0 <= y;\n  loop invariant x <= 50 ==> y == x;\n  loop invariant x > 50 ==> y == 100 - x;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 101;\n*/",
                    "/*@ \n    loop invariant 0 <= x;\n    loop invariant y >= 0 ==> x <= y + 50;\n    loop invariant y < 0 ==> x > 50;\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant (x <= 50) ==> (y >= 0);\n    loop invariant (x > 50) ==> (y <= x - 50);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= x;\n  loop invariant 0 <= y;\n  loop invariant x <= 50 ==> y == x;\n  loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant 0 <= y is established but not preserved.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x > 50 ==> y == 100 - x is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 101;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant x <= 101 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant y >= 0 ==> x <= y + 50;\n    loop invariant y < 0 ==> x > 50;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= x is inductive.\nloop invariant y >= 0 ==> x <= y + 50 is established but not preserved.\nloop invariant y < 0 ==> x > 50 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant (x <= 50) ==> (y >= 0);\n    loop invariant (x > 50) ==> (y <= x - 50);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is inductive.\nloop invariant (x <= 50) ==> (y >= 0) is inductive.\nloop invariant (x > 50) ==> (y <= x - 50) is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is inductive.\nloop invariant y >= 0 is established but not preserved.\nloop invariant (x <= 50) ==> (y == x) is inductive.\nloop invariant (x > 50) ==> (y == 100 - x) is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= x;\n  loop invariant 0 <= y;\n  loop invariant x <= 50 ==> y == x;\n  loop invariant x > 50 ==> y == 100 - x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x <= 50 ==> y == x;\n\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant x <= 101;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: x >= 0;\n\n\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= x;\n    loop invariant y >= 0 ==> x <= y + 50;\n    loop invariant y < 0 ==> x > 50;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: y < 0 ==> x > 50;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant (x <= 50) ==> (y >= 0);\n    loop invariant (x > 50) ==> (y <= x - 50);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: x >= 0;\nloop invariant i2: (x <= 50) ==> (y >= 0);\n\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant y >= 0;\n    loop invariant (x <= 50) ==> (y == x);\n    loop invariant (x > 50) ==> (y == 100 - x);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: x >= 0;\n\nloop invariant i3: (x <= 50) ==> (y == x);\n\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\n\nloop invariant i3: x <= 50 ==> y == x;\n\nloop invariant i5: x >= 0;\n\n\n\nloop invariant i10: y < 0 ==> x > 50;\n\n\nloop invariant i16: (x <= 50) ==> (y == x);\n\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\twhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the variables and conditions in the loop. The loop continues to execute as long as `y >= 0`. In each iteration, if `x <= 50`, `y` is incremented, otherwise, `y` is decremented. `x` is incremented in each iteration regardless of its value.\n\nNow let's find the ranking function. Since the loop termination depends on two variables `x` and `y`, we need a lexicographic ranking function with two expressions. Let's denote these expressions as `e1` and `e2`.\n\nWe can choose `e1 = 51 - x` and `e2 = y`. Let's explain why these are valid ranking functions:\n\n1. The values of `e1` and `e2` must be positive for the loop to execute. Since `x` starts at 0 and increases, `e1` is initially positive. `y` starts at 0 and can be incremented, so `e2` is also initially positive.\n\n2. If `e1` decreases, the loop progresses towards termination. In each iteration, `x` is incremented, so `e1` is decreasing as long as `x <= 50`.\n\n3. If `e1` remains the same, then `e2` must decrease for the loop to progress towards termination. When `x > 50`, `e1` remains the same, but `y` is decremented, causing `e2` to decrease.\n\nWith these explanations, we can conclude that the lexicographic ranking function `(e1, e2) = (51 - x, y)` is valid for the given program.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 51 - x;\n    loop variant y;\n*/\n```",
                    "First, let's analyze the loop in the given program. The loop continues to execute as long as `y >= 0`. Inside the loop, if `x <= 50`, `y` increases by 1; otherwise, `y` decreases by 1. In every iteration, `x` increases by 1.\n\nNow, let's find the ranking function for this loop. We can use a lexicographic ranking function with two expressions: `(51 - x, y)`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 51 - x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function for the following reasons:\n\n1. The value of the first expression, `51 - x`, must be positive for the loop to execute. As `x` starts from 0 and increases by 1 in every iteration, the value of `51 - x` will be positive until `x` reaches 51.\n\n2. The value of the second expression, `y`, must be positive for the loop to execute. Initially, `y` is 0, and it either increases or decreases by 1 in each iteration. When `x <= 50`, `y` increases, and when `x > 50`, `y` decreases.\n\n3. When the value of the first expression remains the same (i.e., when `x > 50`), the value of the second expression must decrease. This is because when `x > 50`, `y` decreases by 1 in each iteration.\n\nTherefore, the lexicographic ranking function `(51 - x, y)` ensures that the loop must terminate, as the value of the expressions decreases with every successive iteration of the loop.",
                    "First, let's analyze the loop. The loop continues to execute as long as `y >= 0`. Inside the loop, if `x <= 50`, `y` is incremented by 1, otherwise, `y` is decremented by 1. `x` is incremented by 1 in every iteration. \n\nNow, we need to find a ranking function that decreases in every iteration and is positive for the loop to continue executing. We can use the lexicographic ranking function with two expressions: `(51 - x, y)`.\n\nLet's explain why it is a valid ranking function:\n\n1. The value of the first expression `51 - x` is positive when the loop starts and decreases with each iteration until `x` reaches 51. When `x > 50`, the first expression remains constant (non-positive), and we need to consider the second expression.\n\n2. The value of the second expression `y` is initially 0 and increases as long as `x <= 50`. However, when `x > 50`, `y` starts to decrease with each iteration. Since the loop continues to execute as long as `y >= 0`, the value of `y` is always positive during the loop execution.\n\n3. In the lexicographic ranking function, either the first expression decreases or remains the same. If the first expression remains the same (when `x > 50`), the second expression `y` decreases.\n\nSo, the lexicographic ranking function `(51 - x, y)` is valid for the given loop. In ACSL syntax, the ranking function can be written as:\n\n```\n/*@\n    loop variant 51 - x;\n    loop variant y;\n*/\n```\n\nThis ranking function proves that the loop must terminate, as the values of the expressions decrease with each iteration and are positive for the loop to continue executing.",
                    "First, let's analyze the loop in the given program:\n\n```\nwhile (y >= 0) {\n    if (x <= 50) {\n        y = y + 1;\n    } else {\n        y = y - 1;\n    }\n    x = x + 1;\n}\n```\n\nHere, `y` increases when `x <= 50`, and decreases when `x > 50`. In both cases, `x` increases by 1 in each iteration. \n\nNow, let's find the ranking function:\n\n```\n/*@\n    loop variant 51 - x;\n*/\n```\n\nExplanation:\n\nThe value of the expression `51 - x` is positive for the loop to continue executing (as long as `x <= 50`). The value of the expression decreases with every successive iteration of the loop since `x` increases by 1 in each iteration. When `x` reaches 51, the value of the expression becomes 0, and the loop terminates. Therefore, the ranking function `51 - x` is a valid ranking function for the given loop.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (y >= 0) {\n    if (x <= 50) {\n        y = y + 1;\n    } else {\n        y = y - 1;\n    }\n    x = x + 1;\n}\n```\n\nNow, we need to find a ranking function for this loop. We can use a lexicographic ranking function with two expressions, e1 and e2, where e1 is the main ranking function and e2 is the secondary ranking function.\n\nIn this case, we can define e1 as the difference between y and x, and e2 as the value of x.\n\nSo, the ranking function for this loop is:\n\n```\n/*@\n    loop variant y - x;\n    loop variant x;\n*/\n```\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of e1 (y - x) must be positive for the loop to continue executing. The loop continues while y >= 0, so y - x will always be positive.\n\n2. The value of e1 (y - x) decreases in every iteration of the loop. When x <= 50, y increases by 1 and x increases by 1, so y - x remains the same. However, when x > 50, y decreases by 1 and x increases by 1, so y - x decreases by 2.\n\n3. The value of e2 (x) must be positive for the loop to continue executing. Since x starts at 0 and increases by 1 in every iteration, it will always be positive.\n\n4. When the value of e1 (y - x) remains the same, the value of e2 (x) must decrease. However, in this case, the value of e1 always decreases when the loop iterates, so we don't need to worry about e2 decreasing.\n\nIn conclusion, the given ranking function is valid for the loop in the given program because it satisfies all the required properties of a lexicographic ranking function."
                ],
                "output": [
                    "/*@\n    loop variant 51 - x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant 51 - x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant 51 - x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant 51 - x;\n*/",
                    "/*@\n    loop variant y - x;\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t//@ ghost variant_expression measure = { 51 - x, y };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i3: x <= 50 ==> y == x;\nloop invariant i5: x >= 0;\nloop invariant i10: y < 0 ==> x > 50;\nloop invariant i16: (x <= 50) ==> (y == x);\nloop invariant measure.a == 51 - x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t\n//@ ghost measure.a = 51 - x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= x is inductive.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y < 0 ==> x > 50 is inductive.\nloop invariant (x <= 50) ==> (y == x) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t//@ ghost variant_expression measure = { 51 - x, y };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i3: x <= 50 ==> y == x;\nloop invariant i5: x >= 0;\nloop invariant i10: y < 0 ==> x > 50;\nloop invariant i16: (x <= 50) ==> (y == x);\nloop invariant measure.a == 51 - x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t\n//@ ghost measure.a = 51 - x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= x is inductive.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y < 0 ==> x > 50 is inductive.\nloop invariant (x <= 50) ==> (y == x) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t//@ ghost variant_expression measure = { 51 - x, y };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i3: x <= 50 ==> y == x;\nloop invariant i5: x >= 0;\nloop invariant i10: y < 0 ==> x > 50;\nloop invariant i16: (x <= 50) ==> (y == x);\nloop invariant measure.a == 51 - x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t\n//@ ghost measure.a = 51 - x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= x is inductive.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y < 0 ==> x > 50 is inductive.\nloop invariant (x <= 50) ==> (y == x) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t/*@\nloop invariant i1: 0 <= x;\nloop invariant i3: x <= 50 ==> y == x;\nloop invariant i5: x >= 0;\nloop invariant i10: y < 0 ==> x > 50;\nloop invariant i16: (x <= 50) ==> (y == x);\nloop variant 51 - x;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= x is inductive.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y < 0 ==> x > 50 is inductive.\nloop invariant (x <= 50) ==> (y == x) is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n\tx = 0;\n    y = 0;\n\t//@ ghost variant_expression measure = { y - x, x };\n/*@\nloop invariant i1: 0 <= x;\nloop invariant i3: x <= 50 ==> y == x;\nloop invariant i5: x >= 0;\nloop invariant i10: y < 0 ==> x > 50;\nloop invariant i16: (x <= 50) ==> (y == x);\nloop invariant measure.a == y - x && measure.b == x;\nloop variant measure for lexicographic;\n*/\nwhile (y >= 0) {\n\t\tif (x <= 50) {\n\t\t\ty = y + 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\tx = x + 1;\n\t\n//@ ghost measure.a = y - x;\n//@ ghost measure.b = x;\n}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= x is inductive.\nloop invariant x <= 50 ==> y == x is inductive.\nloop invariant x >= 0 is inductive.\nloop invariant y < 0 ==> x > 50 is inductive.\nloop invariant (x <= 50) ==> (y == x) is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3a.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Benghazi_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GopanReps-CAV2006-Fig1a_true-termination.c.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 281,
        "success_count": 144,
        "failure_count": 137,
        "success_rate": 0.5124555160142349
    }
}