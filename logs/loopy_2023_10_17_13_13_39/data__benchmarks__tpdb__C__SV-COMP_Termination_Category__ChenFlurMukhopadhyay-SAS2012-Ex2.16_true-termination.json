{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments and loop condition in the given program:\n- Variables x and y are initialized with unknown_int() values.\n- Loop condition: x > 0\n\nNow, we will derive the loop invariants:\n- Loop invariant 1: x is always assigned the value of y in every iteration.\n- Loop invariant 2: y is decremented by 1 in every iteration.\n\nOutput the loop invariants as ACSL annotations:\n\n```\n/*@ \n    loop invariant x == \\at(y, Pre);\n    loop invariant y == \\at(y, Pre) - (i - 1);\n*/\n```\n\nSince the loop does not have any post-condition, the loop invariants are sufficient for Frama-C to analyze the loop.",
                    "First, let's note the initial values of variables and the loop condition:\n- x and y are initially assigned unknown_int() values.\n- The loop condition is \"x > 0\".\n\nNow, let's find the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= 0;\n    loop invariant x <= y + 1;\n*/\n```\n\nExplanation:\n1. x >= 0: Before the loop, x is unknown but non-negative. Inside the loop, x is assigned y, which is also non-negative. When the loop terminates, x <= 0.\n2. x <= y + 1: Before the loop, x and y are unknown but related by this condition. Inside the loop, x is assigned y, and y is decremented by 1, so the condition holds. When the loop terminates, x <= y + 1 is still true.",
                    "First, let's note the variable assignments and loop condition:\n- x and y are assigned non-deterministic values from unknown_int().\n- The loop condition is x > 0.\n\nNow, let's analyze the loop body and find loop invariants:\n- x is assigned the value of y.\n- y is decremented by 1.\n\nConsidering these observations, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant y <= \\at(y, Pre);\n    loop invariant x >= 0;\n    loop invariant x <= \\at(y, Pre) + 1;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n\n- x is assigned a value from unknown_int()\n- y is assigned a value from unknown_int()\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is x > 0\n- Inside the loop, x is assigned the value of y, and y is decremented by 1\n\nHere are the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x <= y;\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/\n```\n\nThese invariants hold because:\n- Initially, x and y can have any values from unknown_int(), so we cannot make any assumptions about their initial values.\n- When x > 0, x is always assigned the value of y, and y is decremented by 1, so x will always be less than or equal to y.\n- Since the loop condition is x > 0, x will always be greater than or equal to 0.\n- y is decremented by 1 in each iteration, so its minimum value is -1 when the loop terminates (if x == 0 and y == -1).",
                    "First, let's note the pre-conditions and variable assignments:\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n\nNext, let's analyze the loop body and loop condition:\n- The loop condition is (x > 0).\n- In the loop body, x is assigned the value of y, and then y is decremented by 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x <= y + 1;\n    loop invariant \\forall integer k; (x <= y + 1) ==> (x - k) <= (y - k + 1);\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution: Since x and y are unknown integers, the invariants hold as long as the condition (x <= y + 1) is true.\n2. In every iteration of the loop: In the loop body, x is assigned the value of y, and y is decremented by 1. Thus, the invariants hold because x will always be less than or equal to y + 1.\n3. After the loop termination: When the loop terminates, it is because x <= 0. The invariants still hold, as x is always less than or equal to y + 1."
                ],
                "output": [
                    "/*@ \n    loop invariant x == \\at(y, Pre);\n    loop invariant y == \\at(y, Pre) - (i - 1);\n*/",
                    "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= y + 1;\n*/",
                    "/*@ \n    loop invariant y <= \\at(y, Pre);\n    loop invariant x >= 0;\n    loop invariant x <= \\at(y, Pre) + 1;\n*/",
                    "/*@ \n    loop invariant x <= y;\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/",
                    "/*@ \n    loop invariant x <= y + 1;\n    loop invariant \\forall integer k; (x <= y + 1) ==> (x - k) <= (y - k + 1);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(y, Pre);\n    loop invariant y == \\at(y, Pre) - (i - 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= y + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= 0 is preserved but not established.\nloop invariant x <= y + 1 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= \\at(y, Pre);\n    loop invariant x >= 0;\n    loop invariant x <= \\at(y, Pre) + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 9: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y;\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= y is neither established nor preserved.\nloop invariant x >= 0 is preserved but not established.\nloop invariant y >= -1 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y + 1;\n    loop invariant \\forall integer k; (x <= y + 1) ==> (x - k) <= (y - k + 1);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= y + 1 is preserved but not established.\nloop invariant \\forall integer k; (x <= y + 1) ==> (x - k) <= (y - k + 1) is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x == \\at(y, Pre);\n    loop invariant y == \\at(y, Pre) - (i - 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= 0;\n    loop invariant x <= y + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y <= \\at(y, Pre);\n    loop invariant x >= 0;\n    loop invariant x <= \\at(y, Pre) + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y;\n    loop invariant x >= 0;\n    loop invariant y >= -1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y + 1;\n    loop invariant \\forall integer k; (x <= y + 1) ==> (x - k) <= (y - k + 1);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 7,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    while (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop invariant. In this case, it is `x > 0`. Now we need to find an expression that decreases with every iteration of the loop and is positive as long as the loop continues executing.\n\nIn the loop body, we have two assignments:\n1. `x = y;`\n2. `y--;`\n\nWe can see that the value of `x` is being assigned the value of `y`, and `y` is decremented in each iteration. To ensure the loop terminates, the value of `y` must decrease with every iteration and must be positive for the loop to continue.\n\nSo, we can choose the ranking function as `y`. Let's write it in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nNow let's justify why it is a valid ranking function.\n\n1. The value of `y` decreases with every iteration because `y` is decremented in the loop body with `y--;`.\n\n2. The value of `y` must be positive for the loop to continue executing. This is because the loop invariant `x > 0` must hold, and since `x` is assigned the value of `y` in each iteration, `y` must be positive for the loop to continue.\n\nTherefore, the ranking function `y` is valid as it satisfies both conditions and ensures the termination of the loop.",
                    "First, we analyze the loop in the given program:\n\n```\nwhile (x > 0) {\n    x = y;\n    y--;\n}\n```\n\nThe loop continues executing as long as `x > 0`. In each iteration, `x` is assigned the value of `y`, and then `y` is decremented by 1. We need to find a ranking function that decreases with every iteration and is positive for the loop to continue executing.\n\nIn this case, we can use the following ranking function:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of `y` is positive when the loop continues executing. Since `x > 0` and `x = y`, it means that `y > 0` as well.\n\n2. The value of `y` decreases with every iteration of the loop. In each iteration, `y` is decremented by 1 (`y--`).\n\nUsing this ranking function, we can prove that the loop must terminate. Eventually, `y` will become non-positive, and the loop will stop executing.",
                    "First, let's analyze the loop:\n\n```c\nwhile (x > 0) {\n    x = y;\n    y--;\n}\n```\n\nThe loop continues executing as long as `x > 0`. In each iteration, the value of `x` is updated to the value of `y`, and `y` is decremented by 1. To find a ranking function, we need an expression that decreases with every successive iteration of the loop and is positive for the loop to continue executing.\n\nThe ranking function for this loop is `x`.\n\n```c\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `x` is positive for the loop to continue executing, as the loop condition is `x > 0`.\n2. The value of `x` decreases with every successive iteration of the loop. This is because `x` is updated to the value of `y`, and `y` is decremented by 1 in each iteration. Thus, the value of `x` will always be at most `y - 1` in the next iteration, which is strictly smaller than its current value as long as the loop continues executing.\n\nHence, the ranking function `x` ensures that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (x > 0) {\n    x = y;\n    y--;\n}\n```\n\nThe loop continues executing as long as `x > 0`. Now, let's find the ranking function.\n\nThe ranking function can be the value of `x` itself since it should decrease with every iteration of the loop. In each iteration, we update the value of `x` to be equal to `y`, and we decrement `y`. Therefore, `x` will always decrease, eventually becoming less than or equal to 0, which is the condition for the loop to terminate.\n\nSo, the ranking function for this loop is `x`:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is an expression over the program variable `x`, which is live at the loop head.\n2. The value of the ranking function decreases with every successive iteration of the loop, as `x` is updated to `y`, and `y` is decremented.\n3. The value of the ranking function must be positive for the loop to continue executing, which holds true as the loop continues only when `x > 0`.",
                    "First, let's identify the loop variables that are live at the loop head. In this case, they are `x` and `y`.\n\nNow, let's find a ranking function that decreases with every successive iteration of the loop and is positive for the loop to continue executing. In this case, we can use `x` as the ranking function because its value decreases with each iteration of the loop (since `x` is assigned the value of `y`, and `y` is decremented in each iteration), and the loop continues executing as long as `x > 0`.\n\nSo, the ranking function for this loop is:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because it satisfies the conditions mentioned above: the value of `x` decreases with every iteration, and the loop continues executing as long as `x` is positive. This ranking function helps prove that the loop must terminate since there is a finite number of times that `x` can decrease before it becomes non-positive."
                ],
                "output": [
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\nloop variant y;\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\nloop variant y;\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\nloop variant x;\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\nloop variant x;\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int x = unknown_int();\n    int y = unknown_int();\n    /*@\n\nloop variant x;\n*/\nwhile (x > 0) {\n        x = y;\n        y--;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c"
        ],
        "skipped": [],
        "total": 38,
        "success_count": 18,
        "failure_count": 20,
        "success_rate": 0.47368421052631576
    }
}