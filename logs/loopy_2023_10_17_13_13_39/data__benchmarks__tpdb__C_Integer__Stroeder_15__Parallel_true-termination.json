{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program and identify the pre-conditions, loop conditions, and post-conditions.\n\nPre-conditions / variable assignments:\n- x and y are non-deterministically assigned using unknown_int()\n\nLoop condition:\n- x >= 0 || y >= 0\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n- x and y are non-deterministically assigned, so we cannot make any assumptions about their initial values.\n\n2. In every iteration of the loop:\n- If x >= 0, then x is decremented by 1.\n- If x < 0, then y is decremented by 1.\n\n3. After the loop termination:\n- The loop terminates when both x and y are negative, i.e., x < 0 && y < 0.\n\nTaking these observations into account, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x < 0 ==> y < 0;\n    loop invariant y < 0 ==> x < 0;\n*/\n```\n\nThese loop invariants ensure that:\n- x and y are always greater than or equal to -1 during the loop execution\n- When x is negative, y must also be negative (loop termination condition)\n- When y is negative, x must also be negative (loop termination condition)",
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic values.\n\nLoop condition:\n- x >= 0 || y >= 0\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x >= 0 ==> x < \\at(x, Pre);\n    loop invariant y >= 0 ==> y < \\at(y, Pre);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x and y are assigned values from unknown_int().\n\nLoop condition:\n- The loop continues to run while x >= 0 or y >= 0.\n\nLoop invariants:\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y < 0);\n    loop invariant (y < 0) ==> (x < 0);\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are assigned non-deterministic integer values.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is (x >= 0 || y >= 0).\n\nNow, output loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x >= 0 || y >= 0) ==> (x >= 0 && y >= -1) || (x >= -1 && y >= 0);\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values.\n\nLoop condition:\n- x >= 0 || y >= 0\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y >= 0);\n    loop invariant (y < 0) ==> (x >= 0);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x < 0 ==> y < 0;\n    loop invariant y < 0 ==> x < 0;\n*/",
                    "/*@\n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x >= 0 ==> x < \\at(x, Pre);\n    loop invariant y >= 0 ==> y < \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y < 0);\n    loop invariant (y < 0) ==> (x < 0);\n*/",
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x >= 0 || y >= 0) ==> (x >= 0 && y >= -1) || (x >= -1 && y >= 0);\n*/",
                    "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y >= 0);\n    loop invariant (y < 0) ==> (x >= 0);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x < 0 ==> y < 0;\n    loop invariant y < 0 ==> x < 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -1 is preserved but not established.\nloop invariant y >= -1 is preserved but not established.\nloop invariant x < 0 ==> y < 0 is neither established nor preserved.\nloop invariant y < 0 ==> x < 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x >= 0 ==> x < \\at(x, Pre);\n    loop invariant y >= 0 ==> y < \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y < 0);\n    loop invariant (y < 0) ==> (x < 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -1 is preserved but not established.\nloop invariant y >= -1 is preserved but not established.\nloop invariant (x < 0) ==> (y < 0) is neither established nor preserved.\nloop invariant (y < 0) ==> (x < 0) is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x >= 0 || y >= 0) ==> (x >= 0 && y >= -1) || (x >= -1 && y >= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -1 is preserved but not established.\nloop invariant y >= -1 is preserved but not established.\nloop invariant (x >= 0 || y >= 0) ==> (x >= 0 && y >= -1) || (x >= -1 && y >= 0) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y >= 0);\n    loop invariant (y < 0) ==> (x >= 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= -1 is preserved but not established.\nloop invariant y >= -1 is preserved but not established.\nloop invariant (x < 0) ==> (y >= 0) is neither established nor preserved.\nloop invariant (y < 0) ==> (x >= 0) is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x < 0 ==> y < 0;\n    loop invariant y < 0 ==> x < 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant x >= 0 ==> x < \\at(x, Pre);\n    loop invariant y >= 0 ==> y < \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y < 0);\n    loop invariant (y < 0) ==> (x < 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x >= 0 || y >= 0) ==> (x >= 0 && y >= -1) || (x >= -1 && y >= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= -1;\n    loop invariant y >= -1;\n    loop invariant (x < 0) ==> (y >= 0);\n    loop invariant (y < 0) ==> (x >= 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 5,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t/*@\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\twhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (x >= 0 || y >= 0) {\n    if (x >= 0) {\n        x = x - 1;\n    } else {\n        y = y - 1;\n    }\n}\n```\n\nNow, let's find the ranking function for this loop. We need a lexicographic ranking function because there are two variables involved in the loop condition, x and y. The ranking function should decrease in every iteration of the loop and must be positive for the loop to continue executing.\n\nIn this case, the ranking function is a sequence of expressions: (x, y). Here's why:\n\n1. The value of x decreases by 1 in every iteration where x >= 0, which means that the value of x is non-increasing.\n2. If the value of x is not decreased (x < 0), the value of y is decreased by 1 in every iteration where y >= 0.\n3. The loop condition ensures that at least one of x or y is positive, so the lexicographic ranking function is positive.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis ranking function is valid because it satisfies the requirements of a lexicographic ranking function, ensuring that the loop must terminate.",
                    "First, let's rewrite the loop in the C program to make it easier to find the ranking function:\n\n```\nint main()\n{\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n        loop invariant x >= -1 && y >= -1;\n    */\n    while (x >= 0 || y >= 0) {\n        if (x >= 0) {\n            x = x - 1;\n        } else {\n            y = y - 1;\n        }\n    }\n    return 0;\n}\n```\n\nNow let's find the ranking function for this loop:\n\n```\n/*@\n    loop variant x + 1;\n    loop variant y + 1;\n*/\n```\n\nExplanation:\n\nThe lexicographic ranking function for this loop is the sequence of expressions `(x + 1, y + 1)`. Let's see why this is a valid ranking function:\n\n1. The values of `x + 1` and `y + 1` are positive for the loop to continue executing. As long as either `x >= 0` or `y >= 0`, the loop will continue. In this case, `x + 1` and `y + 1` are always positive.\n\n2. The value of the first expression `x + 1` decreases in every iteration when `x >= 0`. When `x < 0`, the value of `x + 1` remains the same.\n\n3. If the value of `x + 1` remains the same, then the value of the second expression `y + 1` must decrease. This happens when `x < 0` and `y >= 0`.\n\nSince the lexicographic ranking function `(x + 1, y + 1)` satisfies all the required properties, it is a valid ranking function for this loop. It also helps us prove that the loop must terminate, as the values of `x + 1` and `y + 1` will eventually reach 0, and the loop will stop executing.",
                    "First, let's analyze the loop's conditions and updates. The loop continues executing as long as either `x` or `y` is non-negative. In each iteration, either `x` is decremented by 1 (if it is non-negative), or `y` is decremented by 1 (if `x` is negative). \n\nWe can use a lexicographic ranking function with two expressions: the first one is `x`, and the second one is `y`. The lexicographic ranking function is a valid ranking function for this loop because:\n\n1. Both `x` and `y` are non-negative at the beginning of the loop, so the expressions' values are positive.\n\n2. In each iteration, the value of either `x` or `y` decreases, ensuring that the lexicographic ranking function decreases in each iteration.\n\n3. Since both `x` and `y` are integers, they can only be decremented a finite number of times before becoming negative. Once both `x` and `y` are negative, the loop will terminate.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```",
                    "First, let's analyze the loop conditions and the variables being updated inside the loop:\n\n1. The loop condition is `x >= 0 || y >= 0`, which means the loop will continue executing as long as either `x` or `y` is greater than or equal to 0.\n2. Inside the loop, `x` and `y` are being updated as follows:\n   - If `x >= 0`, then `x` is decremented by 1.\n   - If `x < 0`, then `y` is decremented by 1.\n\nNow, we can find a lexicographic ranking function for this loop. Since the loop continues executing as long as either `x` or `y` is positive, we can use the tuple `(x, y)` as our lexicographic ranking function:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `x` and `y` are positive for the loop to continue executing.\n2. In each iteration of the loop, either `x` decreases or its value remains the same. If `x` remains the same, then `y` decreases.\n\nThe lexicographic ranking function `(x, y)` ensures that the loop will eventually terminate, as both `x` and `y` will become negative at some point.",
                    "First, let's understand the loop condition and the loop body. The loop will continue executing as long as either `x` or `y` is greater than or equal to 0. Inside the loop, if `x` is greater than or equal to 0, it will be decremented by 1; otherwise, `y` will be decremented by 1.\n\nNow, let's find the ranking function for this loop. We need an expression that will decrease with every iteration of the loop and must be positive for the loop to continue executing. In this case, we can use a lexicographic ranking function, with two expressions, `x` and `y`.\n\nHere is the ranking function:\n\n```\n/*@\n    loop variant x;\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both `x` and `y` are positive for the loop to continue executing, as the loop condition is `x >= 0 || y >= 0`.\n2. The value of `x` decreases whenever `x >= 0`. Otherwise, the value of `y` decreases. So, in each iteration, either `x` or `y` will decrease, ensuring the loop will eventually terminate.\n\nThus, the lexicographic ranking function `{x, y}` is a valid ranking function for this loop, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant x + 1;\n    loop variant y + 1;\n*/",
                    "/*@\n    loop variant x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant x;\n    loop variant y;\n*/",
                    "/*@\n    loop variant x;\n    loop variant y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, y };\n/*@\n\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x + 1, y + 1 };\n/*@\n\nloop invariant measure.a == x + 1 && measure.b == y + 1;\nloop variant measure for lexicographic;\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\n//@ ghost measure.a = x + 1;\n//@ ghost measure.b = y + 1;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, y };\n/*@\n\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, y };\n/*@\n\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main()\n{\n    int x, y;\n\tx = unknown_int();\n\ty = unknown_int();\n\t//@ ghost variant_expression measure = { x, y };\n/*@\n\nloop invariant measure.a == x && measure.b == y;\nloop variant measure for lexicographic;\n*/\nwhile (x >= 0 || y >= 0) {\n\t\tif (x >= 0) {\n\t\t\tx = x - 1;\n\t\t} else {\n\t\t\ty = y - 1;\n\t\t}\n\t\n//@ ghost measure.a = x;\n//@ ghost measure.b = y;\n}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 249,
        "success_count": 124,
        "failure_count": 125,
        "success_rate": 0.4979919678714859
    }
}