{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Let's analyze the given program step by step:\n\n1. Pre-conditions or variable assignments:\n- `int id = unknown_int();`\n- `int maxId = unknown_int();`\n- `int tmp = id + 1;`\n\n2. Loop body and loop condition:\n- Loop condition: `tmp != id && unknown_int()`\n- Loop body:\n  ```\n  if (tmp <= maxId) {\n      tmp = tmp + 1;\n  } else {\n      tmp = 0;\n  }\n  ```\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id && id < maxId ==> 0 <= tmp;\n    loop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId ==> id < tmp || tmp == 0;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- id = unknown_int()\n- maxId = unknown_int()\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- while(tmp != id && unknown_int())\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id) ==> (0 <= tmp && tmp < maxId) || tmp == maxId + 1;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- id = unknown_int();\n- maxId = unknown_int();\n\nNext, analyze the loop body and make a note of the loop condition:\n- Loop condition: tmp != id && unknown_int()\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant (tmp == id) ==> !unknown_int();\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. int id = unknown_int();\n2. int maxId = unknown_int();\n3. if (0 <= id && id < maxId)\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. while (tmp != id && unknown_int())\n\nNow, let's output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 0 <= tmp && tmp <= maxId+1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant id <= tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/\n```",
                    "Pre-conditions and variable assignments:\n- id and maxId are assigned non-deterministic values.\n- 0 <= id < maxId (due to the if condition)\n\nLoop condition: tmp != id && unknown_int()\n\nLet's find the loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp != id ==> (0 <= tmp && tmp <= maxId);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= id && id < maxId ==> 0 <= tmp;\n    loop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId ==> id < tmp || tmp == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id) ==> (0 <= tmp && tmp < maxId) || tmp == maxId + 1;\n*/",
                    "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant (tmp == id) ==> !unknown_int();\n*/",
                    "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId+1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant id <= tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/",
                    "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp != id ==> (0 <= tmp && tmp <= maxId);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id && id < maxId ==> 0 <= tmp;\n    loop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId ==> id < tmp || tmp == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId ==> id < tmp || tmp == 0 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id) ==> (0 <= tmp && tmp < maxId) || tmp == maxId + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant (tmp != id) ==> (0 <= tmp && tmp < maxId) || tmp == maxId + 1 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant (tmp == id) ==> !unknown_int();\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unexpected token ')'"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId+1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant id <= tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant id <= tmp ==> tmp <= maxId is established but not preserved.\nloop invariant tmp <= id ==> tmp == 0 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp != id ==> (0 <= tmp && tmp <= maxId);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant tmp != id ==> (0 <= tmp && tmp <= maxId) is established but not preserved.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id && id < maxId ==> 0 <= tmp;\n    loop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId ==> id < tmp || tmp == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant (tmp != id) ==> (0 <= tmp && tmp < maxId) || tmp == maxId + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId + 1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant (tmp == id) ==> !unknown_int();\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i2: 0 <= id && id < maxId;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= tmp && tmp <= maxId+1;\n    loop invariant 0 <= id && id < maxId;\n    loop invariant id <= tmp ==> tmp <= maxId;\n    loop invariant tmp <= id ==> tmp == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= tmp && tmp <= maxId+1;\nloop invariant i2: 0 <= id && id < maxId;\n\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= id;\n    loop invariant id < maxId;\n    loop invariant 0 <= tmp;\n    loop invariant tmp <= maxId + 1;\n    loop invariant tmp != id ==> (0 <= tmp && tmp <= maxId);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id;\nloop invariant i2: id < maxId;\nloop invariant i3: 0 <= tmp;\nloop invariant i4: tmp <= maxId + 1;\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\n\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\n\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\n\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\n\n\n\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        while(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and its conditions:\n\n```\nwhile(tmp != id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nNow, let's try to find a lexicographic ranking function for this loop. We can use the variables `tmp`, `id`, and `maxId`.\n\nA possible lexicographic ranking function is `(maxId - tmp, maxId - id)`.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/\n```\n\nNow, let's explain why this is a valid ranking function:\n\n1. The values of the expressions are non-negative: Since `0 <= id < maxId` and `tmp` is always in the range `[0, maxId]`, both `maxId - tmp` and `maxId - id` are non-negative.\n\n2. At least one of the expressions decreases in every iteration: If `tmp <= maxId`, then `tmp` increases by 1, which means `maxId - tmp` decreases by 1. If `tmp > maxId`, then `tmp` is set to 0, which also decreases the value of `maxId - tmp`.\n\n3. The loop terminates when the values of the expressions become negative or zero: The loop condition requires `tmp != id`. When `tmp == id`, the loop terminates. This corresponds to the case when `maxId - tmp == maxId - id`, which means the values of the expressions are equal and the loop terminates.\n\nIn conclusion, `(maxId - tmp, maxId - id)` is a valid lexicographic ranking function for the loop in the given program.",
                    "First, let's analyze the loop:\n\n```\nwhile(tmp!=id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nThe loop continues as long as `tmp != id` and the result of `unknown_int()` is non-zero (true). The value of `tmp` is either incremented by 1 if `tmp <= maxId`, or reset to 0 if `tmp > maxId`. Since `0 <= id < maxId`, we can find a lexicographic ranking function for this loop.\n\nThe ranking function for this loop is:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant tmp;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `maxId - tmp` is always non-negative, as `tmp` is at most `maxId` during the loop execution.\n2. The value of `maxId - tmp` strictly decreases in each iteration when `tmp <= maxId`, as `tmp` is incremented by 1.\n3. When `tmp > maxId`, the value of `maxId - tmp` resets to `maxId - 0 = maxId`, which guarantees progress in the lexicographic order, as the second expression `tmp` decreases from `maxId + 1` to `0`.\n\nThis ranking function ensures that the loop terminates, as there is a finite number of iterations for the lexicographic order to reach the point where `tmp == id` or `unknown_int()` returns zero (false).",
                    "First, let's identify the loop in the given program:\n\n```\nwhile(tmp!=id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nNow, let's find the ranking function for this loop. We want a lexicographic ranking function (e1, e2, ...) such that the value of each expression must be positive for the loop to execute, and either e1 must decrease or its value remains the same. If its value remains the same, then the value of e2 must decrease.\n\nIn this case, we can use the following lexicographic ranking function:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant tmp;\n*/\n```\n\nLet's explain why this is a valid ranking function:\n\n1. The value of `maxId - tmp` is always positive for the loop to execute. This is because `tmp` is always within the range of [0, maxId], so `maxId - tmp` will always be positive.\n\n2. The value of `tmp` is always positive for the loop to execute, as it is initialized with `id+1` and is either incremented or reset to 0 in the loop.\n\n3. In each iteration of the loop, either `maxId - tmp` decreases or remains the same. If `tmp <= maxId`, then `tmp` is incremented, which means that `maxId - tmp` decreases. If `tmp > maxId`, then `tmp` is reset to 0, which means that `maxId - tmp` remains the same.\n\n4. If the value of `maxId - tmp` remains the same, then the value of `tmp` must decrease. This happens when `tmp` is reset to 0 from a value greater than `maxId`. In this case, the value of `tmp` decreases.\n\nTherefore, the given lexicographic ranking function is valid for the loop in the program.",
                    "First, let's analyze the loop:\n\n```\nwhile(tmp!=id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nThe loop continues as long as `tmp` is not equal to `id` and `unknown_int()` returns a non-zero value. In each iteration, either `tmp` is incremented by 1 if it is less than or equal to `maxId`, or `tmp` is reset to 0 if it is greater than `maxId`.\n\nNow, let's find the ranking function. We can use a lexicographic ranking function (e1, e2), where:\n\n- e1: maxId - tmp\n- e2: maxId - id\n\nThe ranking function can be written in ACSL syntax as:\n\n```\n/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/\n```\n\nThis ranking function is valid because:\n\n1. Both expressions are positive for the loop to execute. Since `tmp` and `id` are both between 0 and `maxId`, their difference with `maxId` will be positive.\n\n2. In each iteration, either `e1` decreases (when `tmp` is incremented by 1), or it remains the same (when `tmp` is reset to 0). If `e1` remains the same, it means that `tmp` has reached `maxId` and will be reset to 0 in the next iteration. This guarantees that the loop will eventually terminate when `tmp` becomes equal to `id`.",
                    "First, let's identify the loop condition and the variables involved in the loop:\n\n```c\nwhile(tmp != id && unknown_int()) {\n    if (tmp <= maxId) {\n        tmp = tmp + 1;\n    } else {\n        tmp = 0;\n    }\n}\n```\n\nThe loop condition is `tmp != id && unknown_int()`. The variables involved are `tmp`, `id`, and `maxId`. We need to find a ranking function that decreases with every iteration of the loop and is positive when the loop executes.\n\nOne possible ranking function is `maxId - tmp + 1`. Let's explain why this is a valid ranking function:\n\n1. The value of the ranking function is positive when the loop executes: Since `tmp <= maxId`, then `maxId - tmp + 1` is positive.\n\n2. The value of the ranking function decreases with every iteration of the loop:\n\n   - If `tmp <= maxId`, then `tmp` is incremented by 1, and the ranking function `maxId - tmp + 1` decreases by 1.\n   - If `tmp > maxId`, then `tmp` is set to 0, which also results in a decrease of the ranking function `maxId - tmp + 1`.\n\nSo, the ranking function for the given loop is `maxId - tmp + 1`. In ACSL syntax:\n\n```c\n/*@\n    loop variant maxId - tmp + 1;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/",
                    "/*@\n    loop variant maxId - tmp;\n    loop variant tmp;\n*/",
                    "/*@\n    loop variant maxId - tmp;\n    loop variant tmp;\n*/",
                    "/*@\n    loop variant maxId - tmp;\n    loop variant maxId - id;\n*/",
                    "/*@\n    loop variant maxId - tmp + 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, maxId - id };\n/*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\nloop invariant measure.a == maxId - tmp && measure.b == maxId - id;\nloop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        \n//@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = maxId - id;\n}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, tmp };\n/*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\nloop invariant measure.a == maxId - tmp && measure.b == tmp;\nloop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        \n//@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = tmp;\n}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, tmp };\n/*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\nloop invariant measure.a == maxId - tmp && measure.b == tmp;\nloop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        \n//@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = tmp;\n}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        //@ ghost variant_expression measure = { maxId - tmp, maxId - id };\n/*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\nloop invariant measure.a == maxId - tmp && measure.b == maxId - id;\nloop variant measure for lexicographic;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        \n//@ ghost measure.a = maxId - tmp;\n//@ ghost measure.b = maxId - id;\n}\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n    int id = unknown_int();\n    int maxId = unknown_int();\n\n    if(0 <= id && id < maxId) {\n        int tmp = id+1;\n        /*@\nloop invariant i1: 0 <= id && id < maxId ==> 0 <= tmp;\nloop invariant i2: 0 <= id && id < maxId ==> tmp <= maxId + 1;\nloop invariant i4: 0 <= id;\nloop invariant i5: id < maxId;\nloop invariant i6: 0 <= tmp;\nloop invariant i7: tmp <= maxId + 1;\nloop invariant i9: 0 <= tmp && tmp <= maxId + 1;\nloop invariant i10: 0 <= id && id < maxId;\nloop invariant i12: 0 <= tmp && tmp <= maxId+1;\nloop variant maxId - tmp + 1;\n*/\nwhile(tmp!=id && unknown_int()) {\n            if (tmp <= maxId) {\n                tmp = tmp + 1;\n            } else {\n                tmp = 0;\n            }\n        }\n    }\n\n    return 0;\n}\n",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= id && id < maxId ==> 0 <= tmp is inductive.\nloop invariant 0 <= id && id < maxId ==> tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id is inductive.\nloop invariant id < maxId is inductive.\nloop invariant 0 <= tmp is inductive.\nloop invariant tmp <= maxId + 1 is inductive.\nloop invariant 0 <= tmp && tmp <= maxId + 1 is inductive.\nloop invariant 0 <= id && id < maxId is inductive.\nloop invariant 0 <= tmp && tmp <= maxId+1 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Continue1.c",
            "../data/benchmarks/non_termination/loop/Missing_Corner-case_Handling_2_T.c",
            "../data/benchmarks/non_termination/loop/Using_Erroneous_Condition_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Parallel_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Waldkirch_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DivMinus.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB3.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_1_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Cairo_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Initialization_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3a.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09_assume.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.21_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Singapore_true-termination.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_2_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/McCarthyIterative.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MirrorInterv.c",
            "../data/benchmarks/tpdb/C/Ultimate/Collatz_unknown-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 276,
        "success_count": 140,
        "failure_count": 136,
        "success_rate": 0.5072463768115942
    }
}