{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    while (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    while (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments in the program:\n- a = 1\n- b = 2\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (a + b < 5)\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant a <= b;\n    loop invariant 1 <= a;\n    loop invariant 2 <= b;\n*/\n```\n\nHere's the reasoning for each loop invariant:\n1. a <= b: Initially, a = 1 and b = 2, so a <= b holds. During the loop, a and b get updated using each other's values, but a never surpasses b. After the loop terminates, a <= b remains true.\n2. 1 <= a: Initially, a = 1. During the loop, a gets updated using b's value, and since b is initially 2 and always greater than a, a never goes below 1. After the loop terminates, 1 <= a remains true.\n3. 2 <= b: Initially, b = 2. During the loop, b gets updated using a's value, which is always greater than or equal to 1, so b never goes below 2. After the loop terminates, 2 <= b remains true.",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `a = 1;`\n- `b = 2;`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- Loop condition: `a + b < 5`\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition. \n\nLoop invariants:\n```\n/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n*/\n```\n\nThese loop invariants hold:\n1. Before the loop execution: \n    - `a = 1` (from the assignment)\n    - `b = 2` (from the assignment)\n    - `a + b = 1 + 2 = 3`\n2. In every iteration of the loop:\n    - If `a + b < 5`, the loop executes, and the values of `a` and `b` are updated. The loop invariants ensure that `a` is always greater than or equal to 1, and `b` is always greater than or equal to 2, and their sum is always greater than or equal to 3.\n3. After the loop termination:\n    - The loop terminates when `a + b >= 5`. Since the loop invariants ensure that `a >= 1` and `b >= 2`, the termination condition implies that the loop invariants still hold true.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- a is assigned the value 1\n- b is assigned the value 2\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is (a + b < 5)\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n    loop invariant (a + b < 5) ==> (b > a);\n    loop invariant (a + b < 5) ==> (b > 0);\n*/\n```",
                    "1. Pre-conditions or variable assignments in the program: a = 1, b = 2\n2. Loop condition: a + b < 5\n\nNow, let's reason about the loop invariants based on the given information:\n\nBefore the loop execution, we have the following loop invariants:\n\n- a = 1\n- b = 2\n\nIn every iteration of the loop, the invariants are:\n\n- a = b - a (since a and b are swapped in the last assignment)\n- a - b = -a_before (where a_before is the value of a before the loop iteration starts)\n\nAfter the loop termination, the invariants are:\n\n- a + b >= 5 (since the loop terminates when a + b >= 5)\n\nNow, let's put these invariants into the loop annotation format:\n\n```\n/*@ \n    loop invariant a == b - a_before;\n    loop invariant a - b == -a_before;\n    loop invariant a + b >= 5 ==> a + b >= 5;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n- a is assigned the value 1.\n- b is assigned the value 2.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is (a + b < 5).\n\nNow, let's find the loop invariants for the given while loop:\n\n- Before the loop execution, a = 1 and b = 2.\n- In every iteration of the loop:\n  - a is updated to a - b.\n  - b is updated to a + b (the old value of a).\n  - a is updated to b - a (the old value of b).\n- After the loop termination, a + b >= 5.\n\nUsing this information, we can output the loop invariants:\n\n```\n/*@ \n    loop invariant a == 1 ==> b == 2;\n    loop invariant a <= b;\n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b < 5;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant a <= b;\n    loop invariant 1 <= a;\n    loop invariant 2 <= b;\n*/",
                    "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n*/",
                    "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n    loop invariant (a + b < 5) ==> (b > a);\n    loop invariant (a + b < 5) ==> (b > 0);\n*/",
                    "/*@ \n    loop invariant a == b - a_before;\n    loop invariant a - b == -a_before;\n    loop invariant a + b >= 5 ==> a + b >= 5;\n*/",
                    "/*@ \n    loop invariant a == 1 ==> b == 2;\n    loop invariant a <= b;\n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b < 5;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a <= b;\n    loop invariant 1 <= a;\n    loop invariant 2 <= b;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a <= b is established but not preserved.\nloop invariant 1 <= a is inductive.\nloop invariant 2 <= b is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a >= 1 is inductive.\nloop invariant b >= 2 is established but not preserved.\nloop invariant a + b >= 3 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n    loop invariant (a + b < 5) ==> (b > a);\n    loop invariant (a + b < 5) ==> (b > 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a >= 1 is inductive.\nloop invariant b >= 2 is established but not preserved.\nloop invariant a + b >= 3 is inductive.\nloop invariant (a + b < 5) ==> (b > a) is inductive.\nloop invariant (a + b < 5) ==> (b > 0) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b - a_before;\n    loop invariant a - b == -a_before;\n    loop invariant a + b >= 5 ==> a + b >= 5;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: unbound logic variable a_before. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == 1 ==> b == 2;\n    loop invariant a <= b;\n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b < 5;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == 1 ==> b == 2 is inductive.\nloop invariant a <= b is established but not preserved.\nloop invariant a >= 1 is inductive.\nloop invariant b >= 2 is inductive.\nloop invariant a + b < 5 is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a <= b;\n    loop invariant 1 <= a;\n    loop invariant 2 <= b;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\n\n\n\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\n\n\nloop invariant i3: a + b >= 3;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b >= 3;\n    loop invariant (a + b < 5) ==> (b > a);\n    loop invariant (a + b < 5) ==> (b > 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\nloop invariant i1: a >= 1;\n\nloop invariant i3: a + b >= 3;\n\nloop invariant i5: (a + b < 5) ==> (b > 0);\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b - a_before;\n    loop invariant a - b == -a_before;\n    loop invariant a + b >= 5 ==> a + b >= 5;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\n\n\nloop invariant i3: a + b >= 5 ==> a + b >= 5;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == 1 ==> b == 2;\n    loop invariant a <= b;\n    loop invariant a >= 1;\n    loop invariant b >= 2;\n    loop invariant a + b < 5;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\n\n\n\n\nloop invariant i5: a + b < 5;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 7,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\n\nloop invariant i2: 1 <= a;\n\nloop invariant i4: a >= 1;\n\nloop invariant i6: a + b >= 3;\n\nloop invariant i11: (a + b < 5) ==> (b > 0);\n\n\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\n\nloop invariant i19: a + b < 5;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    while (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n```\nwhile (a + b < 5) {\n    a = a - b;\n    b = a + b;\n    a = b - a;\n}\n```\n\nNotice that the loop will continue executing as long as `a + b < 5`. Now, let's try to find a ranking function for this loop.\n\nWe need to find an expression that decreases with every successive iteration of the loop and is positive for the loop to continue executing. Let's analyze the loop body and the updates to variables `a` and `b`:\n\n1. `a = a - b;`\n2. `b = a + b;` (Note that `a` has already been updated)\n3. `a = b - a;` (Note that both `a` and `b` have been updated)\n\nAfter these updates, we have:\n\n1. `a_new = a_old - b_old;`\n2. `b_new = (a_old - b_old) + b_old = a_old;`\n3. `a_new = a_old - (a_old - b_old) = b_old;`\n\nSo, after one iteration, the values of `a` and `b` are swapped.\n\nLet's consider the ranking function `v = 5 - (a + b)`. We know that `a + b` must be less than `5` for the loop to continue executing, so `v` will always be positive inside the loop.\n\nSince the values of `a` and `b` are swapped in each iteration, the value of `a + b` remains the same. However, the value of `v` decreases, as it is the difference between `5` and `a + b`. Therefore, this ranking function guarantees the loop's termination.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 5 - (a + b);\n*/\n```\n\nThis ranking function is valid because it is positive inside the loop and decreases with every iteration, ensuring loop termination.",
                    "First, let's analyze the loop behavior:\n\nInitial values: a = 1, b = 2\n1st iteration: a = -1, b = 1\n2nd iteration: a = 0, b = 1\n3rd iteration: a = 1, b = 1\n4th iteration: a = 0, b = 2\n5th iteration: a = 2, b = 2 (loop terminates)\n\nThe loop is driven by the condition (a + b < 5). We can see that the value of a oscillates between 0 and 2, and the value of b oscillates between 1 and 2. The loop terminates once a = 2 and b = 2, as a + b is no longer less than 5.\n\nNow let's find a ranking function that ensures loop termination.\n\nA valid ranking function for this loop is 5 - (a + b). Let's prove that it is a valid ranking function:\n\n1. The value of the expression must be positive for the loop to continue executing.\n\nWe know that the loop continues as long as a + b < 5. Therefore, the value of the ranking function 5 - (a + b) is always positive inside the loop.\n\n2. The value of the expression must decrease with every successive iteration of the loop.\n\nWe can observe that the sum of a and b either remains the same or increases in each iteration. Since the sum is increasing, the value of the ranking function 5 - (a + b) is decreasing.\n\nHence, the ranking function is valid. The ACSL syntax for the ranking function is as follows:\n\n```c\n/*@ \n    loop variant 5 - (a + b);\n*/\n```\n\nThis ranking function proves that the loop must terminate, as its value decreases with every successive iteration and remains positive while the loop executes.",
                    "First, let's analyze the loop:\n\nInitial values: a = 1, b = 2\n\n1st iteration:\n- a = a - b = 1 - 2 = -1\n- b = a + b = -1 + 2 = 1\n- a = b - a = 1 - (-1) = 2\n\n2nd iteration:\n- a = a - b = 2 - 1 = 1\n- b = a + b = 1 + 1 = 2\n- a = b - a = 2 - 1 = 1\n\nAt this point, the loop stops because a + b = 1 + 2 = 3 is not less than 5.\n\nNow, let's find the ranking function. We can use the value of \"a + b\" as our ranking function because it decreases in each iteration of the loop:\n\n1st iteration: a + b = -1 + 1 = 0\n2nd iteration: a + b = 1 + 2 = 3\n\nSince \"a + b\" decreases in each iteration and it must be positive for the loop to continue executing, it serves as a valid ranking function.\n\nThe ranking function in ACSL syntax is:\n\n```C\n/*@\n    loop variant a + b;\n*/\n```\n\nThis ranking function guarantees the termination of the loop because it decreases with every iteration, and the loop continues only if the value is positive.",
                    "First, let's analyze the loop and its conditions. The loop will continue executing as long as `a + b < 5`. In each iteration, the values of `a` and `b` are updated as follows:\n\n1. `a = a - b;`\n2. `b = a + b;`\n3. `a = b - a;`\n\nLet's rewrite the updates in terms of the original values of `a` and `b` before the iteration:\n\n1. `a' = a - b;`\n2. `b' = (a' + b);`\n3. `a'' = (b' - a');`\n\nNow, let's substitute `a'` and `b'` from steps 1 and 2 into step 3:\n\n```\na'' = ((a' + b) - a');\na'' = ((a - b) + b);\na'' = a;\n```\n\nFrom this, we can see that after the three updates in the loop, the value of `a` remains the same. Now, let's analyze the value of `b`:\n\n```\nb' = (a' + b);\nb' = ((a - b) + b);\nb' = a;\n```\n\nSo, after the updates, `a` remains the same, and `b` takes the original value of `a`. In other words, the values of `a` and `b` are swapped in each iteration.\n\nNow, we need to find a ranking function that decreases with each iteration and is positive for the loop to continue executing. Since the sum `a + b` remains constant in each iteration (because their values are swapped), we can choose the difference `5 - (a + b)` as the ranking function:\n\n```\n/*@\n    loop variant 5 - (a + b);\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive for the loop to continue executing, as the loop condition is `a + b < 5`.\n2. It decreases with each iteration because the values of `a` and `b` are swapped, making the difference smaller in each iteration.\n\nTherefore, the ranking function `5 - (a + b)` proves that the loop must terminate.",
                    "First, let's analyze the loop and understand how the variables `a` and `b` change during each iteration.\n\nInitially, `a = 1` and `b = 2`. In each iteration of the loop, the following operations are performed:\n\n1. `a = a - b` (new value of a is -1)\n2. `b = a + b` (new value of b is 1)\n3. `a = b - a` (new value of a is 2)\n\nAfter the first iteration, `a` and `b` swap their values: `a = 2` and `b = 1`. In the next iteration, the values of `a` and `b` will swap again, but the loop condition `a + b < 5` will be false, and the loop will exit.\n\nNow let's find the ranking function for this loop. Since the values of `a` and `b` are swapping in each iteration, we can use a lexicographic ranking function with two expressions. The first expression is the absolute difference between `a` and `b`, and the second expression is the minimum of `a` and `b`. Here's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant abs(a - b);\n    loop variant min(a, b);\n*/\n```\n\nThis ranking function is valid because:\n\n1. Both expressions are positive for the loop to continue executing. The loop condition `a + b < 5` ensures that both `a` and `b` are positive, and their absolute difference and minimum will be positive as well.\n\n2. The value of the first expression, `abs(a - b)`, remains the same in each iteration, but the value of the second expression, `min(a, b)`, decreases in each iteration (from 1 to 0), ensuring the loop will terminate."
                ],
                "output": [
                    "/*@\n    loop variant 5 - (a + b);\n*/",
                    "/*@ \n    loop variant 5 - (a + b);\n*/",
                    "/*@\n    loop variant a + b;\n*/",
                    "/*@\n    loop variant 5 - (a + b);\n*/",
                    "/*@\n    loop variant abs(a - b);\n    loop variant min(a, b);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\nloop invariant i2: 1 <= a;\nloop invariant i4: a >= 1;\nloop invariant i6: a + b >= 3;\nloop invariant i11: (a + b < 5) ==> (b > 0);\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\nloop invariant i19: a + b < 5;\nloop variant 5 - (a + b);\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 1 <= a is inductive.\nloop invariant a >= 1 is inductive.\nloop invariant a + b >= 3 is inductive.\nloop invariant (a + b < 5) ==> (b > 0) is inductive.\nloop invariant a + b >= 5 ==> a + b >= 5 is inductive.\nloop invariant a + b < 5 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\nloop invariant i2: 1 <= a;\nloop invariant i4: a >= 1;\nloop invariant i6: a + b >= 3;\nloop invariant i11: (a + b < 5) ==> (b > 0);\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\nloop invariant i19: a + b < 5;\nloop variant 5 - (a + b);\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 1 <= a is inductive.\nloop invariant a >= 1 is inductive.\nloop invariant a + b >= 3 is inductive.\nloop invariant (a + b < 5) ==> (b > 0) is inductive.\nloop invariant a + b >= 5 ==> a + b >= 5 is inductive.\nloop invariant a + b < 5 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\nloop invariant i2: 1 <= a;\nloop invariant i4: a >= 1;\nloop invariant i6: a + b >= 3;\nloop invariant i11: (a + b < 5) ==> (b > 0);\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\nloop invariant i19: a + b < 5;\nloop variant a + b;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 1 <= a is inductive.\nloop invariant a >= 1 is inductive.\nloop invariant a + b >= 3 is inductive.\nloop invariant (a + b < 5) ==> (b > 0) is inductive.\nloop invariant a + b >= 5 ==> a + b >= 5 is inductive.\nloop invariant a + b < 5 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    /*@\nloop invariant i2: 1 <= a;\nloop invariant i4: a >= 1;\nloop invariant i6: a + b >= 3;\nloop invariant i11: (a + b < 5) ==> (b > 0);\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\nloop invariant i19: a + b < 5;\nloop variant 5 - (a + b);\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 1 <= a is inductive.\nloop invariant a >= 1 is inductive.\nloop invariant a + b >= 3 is inductive.\nloop invariant (a + b < 5) ==> (b > 0) is inductive.\nloop invariant a + b >= 5 ==> a + b >= 5 is inductive.\nloop invariant a + b < 5 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int a;\n    int b;\n    a = 1;\n    b = 2;\n    \n    //@ ghost variant_expression measure = { abs(a - b), min(a, b) };\n/*@\nloop invariant i2: 1 <= a;\nloop invariant i4: a >= 1;\nloop invariant i6: a + b >= 3;\nloop invariant i11: (a + b < 5) ==> (b > 0);\nloop invariant i14: a + b >= 5 ==> a + b >= 5;\nloop invariant i19: a + b < 5;\nloop invariant measure.a == abs(a - b) && measure.b == min(a, b);\nloop variant measure for lexicographic;\n*/\nwhile (a + b < 5) {\n        a = a - b;\n        b = a + b;\n        a = b - a;\n    \n//@ ghost measure.a = abs(a - b);\n//@ ghost measure.b = min(a, b);\n}\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 30: unbound logic function min. Ignoring loop annotation"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c"
        ],
        "skipped": [],
        "total": 158,
        "success_count": 74,
        "failure_count": 84,
        "success_rate": 0.46835443037974683
    }
}