{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions and variable assignments in the program:\n\n- `i` is assigned a non-deterministic value using `unknown_int()`\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i*i > 9`.\n- Inside the loop, if `i` is less than 0, `i` is decremented by 1. Otherwise, `i` is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant -5 <= i <= 5;\n    loop invariant (i < 0 ==> i >= -4) && (i >= 0 ==> i <= 4);\n*/\n```\n\nExplanation:\n\n- The first loop invariant states that `i` is always between -5 and 5. This is true because the loop condition `i*i > 9` ensures that once `i*i <= 9`, the loop terminates. The values of `i` that satisfy this condition are -5, -4, -3, 3, 4, and 5.\n- The second loop invariant states that if `i` is less than 0, `i` is greater than or equal to -4, and if `i` is greater than or equal to 0, `i` is less than or equal to 4. This is true because of the loop condition and the way `i` is incremented or decremented inside the loop.",
                    "Let's first note the pre-conditions or variable assignments in the program:\n- `i` is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i*i > 9`.\n\nNow, let's find the necessary loop invariants:\n- Loop invariant (i1): The value of `i` is either incremented by 1 or decremented by 1 in each iteration.\n- Loop invariant (i2): When the loop terminates, `i*i <= 9`.\n\nUsing the above invariants, let's write the loop invariants for Frama-C:\n\n```\n/*@ \n    loop invariant (i*i > 9) ==> (i < 0 ? i > \\old(i) : i < \\old(i));\n    loop invariant (i*i <= 9);\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n\n1. i = unknown_int(); // i can have any initial integer value\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. Loop condition: i*i > 9\n\nNext, we need to find the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant i*i >= 0; // i*i is always non-negative\n    loop invariant (i < 0) ==> (i < 0 && i <= \\old(i)); // If i is negative, it is decreasing\n    loop invariant (i >= 0) ==> (i >= 0 && i >= \\old(i)); // If i is non-negative, it is increasing\n*/\n```\n\nThese invariants hold before the loop execution, during each iteration, and after the loop termination, and they cover the possible values and behaviors of the variable i in the loop.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- i is assigned an unknown integer value.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is (i * i > 9).\n\nNow, let's find the loop invariants that hold true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant i*i >= 0;\n    loop invariant (i < 0) ==> (i >= -2147483647);\n    loop invariant (i >= 0) ==> (i <= 2147483646);\n*/\n```\n\nThese loop invariants are true:\n1. Before the loop execution: i*i is always non-negative, and i is within the integer range.\n2. In every iteration of the loop: i*i remains non-negative, and i remains within the integer range.\n3. After the loop termination: i*i is non-negative, and i is within the integer range.\n\nThese loop invariants imply that the program will not cause any integer overflow or underflow.",
                    "First, let's note the variable assignment and the loop condition:\n- Variable i is assigned an unknown integer value.\n- The loop condition is i*i > 9.\n\nNow, let's find the loop invariants that are true before the loop execution, during every iteration, and after the loop termination, such that they imply the post-condition.\n\n```\n/*@\n    loop invariant i*i > 9;\n    loop invariant i >= -2147483647;\n    loop invariant i <= 2147483647;\n*/\n```\n\nThese loop invariants represent the following properties:\n1. The square of i is always greater than 9 during the loop execution.\n2. i is always greater than or equal to -2147483647, which is the minimum value of an integer in C.\n3. i is always less than or equal to 2147483647, which is the maximum value of an integer in C."
                ],
                "output": [
                    "/*@ \n    loop invariant -5 <= i <= 5;\n    loop invariant (i < 0 ==> i >= -4) && (i >= 0 ==> i <= 4);\n*/",
                    "/*@ \n    loop invariant (i*i > 9) ==> (i < 0 ? i > \\old(i) : i < \\old(i));\n    loop invariant (i*i <= 9);\n*/",
                    "/*@ \n    loop invariant i*i >= 0; // i*i is always non-negative\n    loop invariant (i < 0) ==> (i < 0 && i <= \\old(i)); // If i is negative, it is decreasing\n    loop invariant (i >= 0) ==> (i >= 0 && i >= \\old(i)); // If i is non-negative, it is increasing\n*/",
                    "/*@ \n    loop invariant i*i >= 0;\n    loop invariant (i < 0) ==> (i >= -2147483647);\n    loop invariant (i >= 0) ==> (i <= 2147483646);\n*/",
                    "/*@\n    loop invariant i*i > 9;\n    loop invariant i >= -2147483647;\n    loop invariant i <= 2147483647;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant -5 <= i <= 5;\n    loop invariant (i < 0 ==> i >= -4) && (i >= 0 ==> i <= 4);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant -5 <= i <= 5 is preserved but not established.\nloop invariant (i < 0 ==> i >= -4) && (i >= 0 ==> i <= 4) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (i*i > 9) ==> (i < 0 ? i > \\old(i) : i < \\old(i));\n    loop invariant (i*i <= 9);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i*i >= 0; // i*i is always non-negative\n    loop invariant (i < 0) ==> (i < 0 && i <= \\old(i)); // If i is negative, it is decreasing\n    loop invariant (i >= 0) ==> (i >= 0 && i >= \\old(i)); // If i is non-negative, it is increasing\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i*i >= 0;\n    loop invariant (i < 0) ==> (i >= -2147483647);\n    loop invariant (i >= 0) ==> (i <= 2147483646);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i*i >= 0 is inductive.\nloop invariant (i < 0) ==> (i >= -2147483647) is neither established nor preserved.\nloop invariant (i >= 0) ==> (i <= 2147483646) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant i*i > 9;\n    loop invariant i >= -2147483647;\n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i*i > 9 is preserved but not established.\nloop invariant i >= -2147483647 is neither established nor preserved.\nloop invariant i <= 2147483647 is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant -5 <= i <= 5;\n    loop invariant (i < 0 ==> i >= -4) && (i >= 0 ==> i <= 4);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant (i*i > 9) ==> (i < 0 ? i > \\old(i) : i < \\old(i));\n    loop invariant (i*i <= 9);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i*i >= 0; // i*i is always non-negative\n    loop invariant (i < 0) ==> (i < 0 && i <= \\old(i)); // If i is negative, it is decreasing\n    loop invariant (i >= 0) ==> (i >= 0 && i >= \\old(i)); // If i is non-negative, it is increasing\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i1: i*i >= 0;\n\n\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i*i >= 0;\n    loop invariant (i < 0) ==> (i >= -2147483647);\n    loop invariant (i >= 0) ==> (i <= 2147483646);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i1: i*i >= 0;\n\n\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant i*i > 9;\n    loop invariant i >= -2147483647;\n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\n\nloop invariant i3: i <= 2147483647;\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 6,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\n\n\n\nloop invariant i5: i*i >= 0;\n\n\n\n\n\n\nloop invariant i13: i <= 2147483647;\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, we need to identify the loop in the program:\n\n```c\nwhile (i*i > 9) {\n    if (i < 0) {\n        i = i-1;\n    } else {\n        i = i+1;\n    }\n}\n```\n\nThe loop continues to execute as long as `i*i > 9`. We have two cases inside the loop: if `i` is negative, it decreases by 1; otherwise, it increases by 1.\n\nNow, we need to find a ranking function that decreases in every iteration and is positive as long as the loop executes.\n\nThe ranking function for this loop can be `(i+3)*(i-3)`. Let's see why this is a valid ranking function:\n\n1. The loop condition is `i*i > 9`. If we rewrite this inequality, we get `i*i - 9 > 0`, which can be factored as `(i+3)*(i-3) > 0`. This means that the value of the ranking function is positive as long as the loop continues to execute.\n\n2. In every iteration, the value of `i` either decreases (if `i` is negative) or increases (if `i` is non-negative). In both cases, the value of the ranking function `(i+3)*(i-3)` decreases because the product of two factors moves closer to zero.\n\nThus, the ranking function `(i+3)*(i-3)` is a valid ranking function for this loop.\n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant (i+3)*(i-3);\n*/\n```",
                    "First, let's analyze the loop. The loop continues as long as i*i > 9. Inside the loop, if i is negative, it decreases; if i is positive or zero, it increases. The loop must eventually terminate when i*i <= 9.\n\nSince the loop is about the absolute value of i, we can consider the ranking function to be the absolute difference between the square of i and 9:\n\n```c\n/*@\n    loop variant abs(i * i - 9);\n*/\n```\n\nThis is a valid ranking function because:\n\n1. It is an expression over the live variable i at the loop head.\n2. The value of the expression is always positive as long as the loop continues (i*i > 9).\n3. With every iteration of the loop, the value of i either increases or decreases, getting closer to the point where i*i <= 9. Therefore, the value of the ranking function (abs(i * i - 9)) decreases with every iteration.\n\nHence, this ranking function helps prove that the loop must terminate.",
                    "First, let's analyze the loop in the program. The loop continues executing as long as the condition `i * i > 9` holds true. Inside the loop, there are two branches: if `i` is less than 0, it is decremented by 1, otherwise, it is incremented by 1.\n\nNow, let's find the ranking function for the loop. We need a function that decreases with every successive iteration of the loop and is positive for the loop to continue executing. We can use the absolute value of `i` minus 3, which can be represented as `abs(i - 3)`.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant abs(i - 3);\n*/\n```\n\nLet's explain why it is a valid ranking function:\n\n1. The value of the expression `abs(i - 3)` is positive as long as `i * i > 9` holds true. This is because, for the loop to continue executing, `i` must be either greater than 3 or less than -3. In both cases, `abs(i - 3)` will be positive.\n\n2. The value of `abs(i - 3)` decreases with every successive iteration of the loop. If `i` is less than 0, it is decremented by 1, making it closer to -3, thus decreasing the absolute value. If `i` is greater than or equal to 0, it is incremented by 1, making it closer to 3, again decreasing the absolute value.\n\nSo, `abs(i - 3)` is a valid ranking function for the given loop, as it satisfies both conditions of being positive for the loop to continue executing and decreasing with every successive iteration.",
                    "We first need to identify the loop in the given program:\n\n```\nwhile (i*i > 9) {\n    if (i < 0) {\n        i = i-1;\n    } else {\n        i = i+1;\n    }\n}\n```\n\nNow, we need to find a ranking function for this loop. The value of `i*i` decreases every time the loop executes since `i` is either incremented or decremented. We can use the lexicographic ranking function `(e1, e2)` with `e1 = i*i` and `e2 = -i` when `i < 0` or `e2 = i` when `i >= 0`.\n\nThe ranking function is as follows:\n\n```\n/*@\n    loop variant i*i;\n    loop variant i < 0 ? -i : i;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `i*i` is always positive for the loop to continue executing (`i*i > 9`).\n2. The value of `i*i` decreases in every iteration of the loop, as `i` is either incremented or decremented.\n3. The value of `i < 0 ? -i : i` is always positive, as it is equal to the absolute value of `i`.\n4. If the value of `i*i` remains the same in an iteration, the value of `i < 0 ? -i : i` decreases, as `i` is either incremented or decremented.\n\nThus, the ranking function helps prove that the loop must terminate.",
                    "First, let's look at the loop in the given program:\n\n```\nwhile (i*i > 9) {\n    if (i < 0) {\n        i = i-1;\n    } else {\n        i = i+1;\n    }\n}\n```\n\nThe loop continues executing as long as `i * i > 9`. Let's analyze the behavior of the loop:\n\n1. If `i` is negative, the loop decreases the value of `i` by 1, making it more negative.\n2. If `i` is non-negative, the loop increases the value of `i` by 1, making it more positive.\n\nNow, let's find a lexicographic ranking function for the loop:\n\nWe can use two expressions as a lexicographic ranking function: `(i < 0) ? -i : i` and `i`. Here's why this lexicographic ranking function is valid:\n\n1. When `i` is negative, the value of the first expression `-i` increases, and the value of the second expression `i` decreases.\n2. When `i` is non-negative, the value of the first expression `i` increases, and the value of the second expression `i` increases as well.\n\nThe values of both expressions are positive as long as the loop executes (`i * i > 9`). Thus, we can use the lexicographic ranking function `(i < 0) ? -i : i` and `i` to prove the termination of the loop.\n\nThe ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant (i < 0) ? -i : i;\n    loop variant i;\n*/\n```"
                ],
                "output": [
                    "/*@\n    loop variant (i+3)*(i-3);\n*/",
                    "/*@\n    loop variant abs(i * i - 9);\n*/",
                    "/*@\n    loop variant abs(i - 3);\n*/",
                    "/*@\n    loop variant i*i;\n    loop variant i < 0 ? -i : i;\n*/",
                    "/*@\n    loop variant (i < 0) ? -i : i;\n    loop variant i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i5: i*i >= 0;\nloop invariant i13: i <= 2147483647;\nloop variant (i+3)*(i-3);\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant i*i >= 0 is inductive.\nloop invariant i <= 2147483647 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i5: i*i >= 0;\nloop invariant i13: i <= 2147483647;\nloop variant abs(i * i - 9);\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 14: unbound logic function abs. Ignoring loop annotation"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i5: i*i >= 0;\nloop invariant i13: i <= 2147483647;\nloop variant abs(i - 3);\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    }\n\t\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "Annotation error on line 14: unbound logic function abs. Ignoring loop annotation"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    //@ ghost variant_expression measure = { i*i, i < 0 ? -i : i };\n/*@\nloop invariant i5: i*i >= 0;\nloop invariant i13: i <= 2147483647;\nloop invariant measure.a == i*i && measure.b == i < 0 ? -i : i;\nloop variant measure for lexicographic;\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    \n//@ ghost measure.a = i*i;\n//@ ghost measure.b = i < 0 ? -i : i;\n}\n\t\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant i*i >= 0 is inductive.\nloop invariant i <= 2147483647 is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    //@ ghost variant_expression measure = { (i < 0) ? -i : i, i };\n/*@\nloop invariant i5: i*i >= 0;\nloop invariant i13: i <= 2147483647;\nloop invariant measure.a == (i < 0) ? -i : i && measure.b == i;\nloop variant measure for lexicographic;\n*/\nwhile (i*i > 9) {\n        if (i < 0) {\n            i = i-1;\n        } else {\n            i = i+1;\n        }\n    \n//@ ghost measure.a = (i < 0) ? -i : i;\n//@ ghost measure.b = i;\n}\n\t\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant i*i >= 0 is inductive.\nloop invariant i <= 2147483647 is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c"
        ],
        "skipped": [],
        "total": 187,
        "success_count": 88,
        "failure_count": 99,
        "success_rate": 0.47058823529411764
    }
}