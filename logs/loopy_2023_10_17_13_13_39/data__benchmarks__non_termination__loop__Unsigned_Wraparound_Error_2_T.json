{
    "logs": {
        "file": "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    while( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    while( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the variable assignments and pre-conditions:\n- `ui` is assigned the value 1.\n- `size` is assigned a non-deterministic value from `unknown_uint()`.\n- `BUFFSIZE` is assigned a non-deterministic value from `unknown_uint()`.\n- The pre-condition is that if `size < BUFFSIZE`, then `size = BUFFSIZE`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `(ui < size) && (ui * 2 > ui)`.\n- Inside the loop, `ui` is multiplied by 2.\n\nNow, let's derive the necessary loop invariants:\n\nBefore the loop execution:\n1. `ui == 1`\n2. `size >= BUFFSIZE`\n\nIn every iteration of the loop:\n3. `ui > 0`\n4. `ui <= size`\n5. `ui <= size / 2 + 1`\n\nAfter the loop termination:\n6. `ui >= size`\n\nTaking all these invariants into account, the loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant ui == 1 ==> size >= BUFFSIZE;\n    loop invariant ui > 0;\n    loop invariant ui <= size;\n    loop invariant ui <= size / 2 + 1;\n    loop assigns ui;\n*/\n```",
                    "First, let's analyze the given code:\n\n1. `unsigned int ui = 1;` initializes `ui` to 1.\n2. `unsigned int size = unknown_uint();` assigns a non-deterministic unsigned integer value to `size`.\n3. `unsigned int BUFFSIZE = unknown_uint();` assigns a non-deterministic unsigned integer value to `BUFFSIZE`.\n4. `if (size < BUFFSIZE) size = BUFFSIZE;` ensures that `size` is at least as large as `BUFFSIZE`.\n5. The loop condition is `(ui < size) && (ui * 2 > ui)`. The loop will continue as long as `ui` is less than `size` and `ui` can still be doubled without causing an overflow.\n6. Inside the loop, `ui` is doubled in each iteration: `ui *= 2;`.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, `ui` is initialized to 1.\n2. In every iteration of the loop, `ui` is doubled, and it remains less than or equal to `size`.\n3. After the loop termination, `ui` is greater than or equal to `size` or `ui * 2` would cause an overflow.\n\nBased on this analysis, we can write the following loop invariants:\n\n```\n/*@ \n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n*/\n```",
                    "First, let's analyze the given program:\n\n1. Pre-conditions or variable assignments:\n   - `ui` is assigned the value `1`.\n   - `size` and `BUFFSIZE` are assigned non-deterministic unsigned integer values.\n\n2. Loop condition:\n   - The loop iterates as long as `ui < size` and `ui * 2 > ui`.\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution:\n   - `ui` is always `1`.\n   - `size` and `BUFFSIZE` are non-deterministic, but they are unsigned integers, so they are non-negative.\n   - `size >= BUFFSIZE` because of the condition `if (size < BUFFSIZE) size = BUFFSIZE`.\n\n2. In every iteration of the loop:\n   - `ui` is always doubled.\n   - `ui` remains less than or equal to `size`.\n   - `ui` is always a power of `2`.\n\n3. After the loop termination:\n   - `ui >= size` or `ui * 2 <= ui`.\n\nBased on the analysis, here are the loop invariants:\n\n```\n/*@ \n    loop invariant ui > 0;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/\n```",
                    "First, we note the initial conditions and variable assignments in the program:\n\n1. `ui` is assigned the value 1.\n2. `size` is assigned an unknown unsigned integer value.\n3. `BUFFSIZE` is assigned an unknown unsigned integer value.\n4. If `size` is less than `BUFFSIZE`, `size` is assigned the value of `BUFFSIZE`.\n\nNow, let's analyze the loop body and its condition:\n\n1. The loop condition is `(ui < size) && (ui * 2 > ui)`.\n2. Inside the loop, `ui` is multiplied by 2 in each iteration.\n\nBased on this information, we can find the loop invariants:\n\n1. `ui` is always a power of 2.\n2. `ui` is always greater than or equal to 1.\n3. `ui` is always less than or equal to `size`.\n\nNow, we can write the loop invariants using ACSL annotations:\n\n```\n@{\n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- unsigned int ui = 1;\n- unsigned int size = unknown_uint();\n- unsigned int BUFFSIZE = unknown_uint();\n- if( size < BUFFSIZE ) size = BUFFSIZE;\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- while( (ui < size) && ( ui * 2 > ui ) ) ui *= 2;\n\nNow, we can output the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant 1 <= ui;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= UINT_MAX / 2 ==> ui * 2 > ui;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant ui == 1 ==> size >= BUFFSIZE;\n    loop invariant ui > 0;\n    loop invariant ui <= size;\n    loop invariant ui <= size / 2 + 1;\n    loop assigns ui;\n*/",
                    "/*@ \n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n*/",
                    "/*@ \n    loop invariant ui > 0;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                    "@{\n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                    "/*@ \n    loop invariant 1 <= ui;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= UINT_MAX / 2 ==> ui * 2 > ui;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui == 1 ==> size >= BUFFSIZE;\n    loop invariant ui > 0;\n    loop invariant ui <= size;\n    loop invariant ui <= size / 2 + 1;\n    loop assigns ui;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui <= size is neither established nor preserved.\nloop invariant ui <= size / 2 + 1 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant ui >= 1 is inductive.\nloop invariant ui <= size is neither established nor preserved.\nloop invariant size >= BUFFSIZE is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui > 0;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant ui > 0 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant ui <= size is neither established nor preserved.\nloop invariant (ui & (ui - 1)) == 0 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "@{\n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant ui >= 1 is inductive.\nloop invariant ui <= size is neither established nor preserved.\nloop invariant (ui & (ui - 1)) == 0 is established but not preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= ui;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= UINT_MAX / 2 ==> ui * 2 > ui;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unbound logic variable UINT_MAX. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui == 1 ==> size >= BUFFSIZE;\n    loop invariant ui > 0;\n    loop invariant ui <= size;\n    loop invariant ui <= size / 2 + 1;\n    loop assigns ui;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\n\n\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui >= 1;\n\nloop invariant i3: size >= BUFFSIZE;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant ui > 0;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui > 0;\nloop invariant i2: size >= BUFFSIZE;\n\n\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "@{\n    loop invariant ui >= 1;\n    loop invariant ui <= size;\n    loop invariant (ui & (ui - 1)) == 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui >= 1;\n\n\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 1 <= ui;\n    loop invariant ui <= size;\n    loop invariant size >= BUFFSIZE;\n    loop invariant ui <= UINT_MAX / 2 ==> ui * 2 > ui;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: 1 <= ui;\n\nloop invariant i3: size >= BUFFSIZE;\n\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 2,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\n\n\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\n\nloop invariant i15: 1 <= ui;\n\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    while( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and the loop condition in the given program. The loop is:\n\n```\nwhile( (ui < size) && ( ui * 2 > ui ) )\n    ui *= 2;\n```\n\nThe loop condition is `(ui < size) && (ui * 2 > ui)`. We need to find a ranking function that decreases with every iteration of the loop and is positive when the loop executes.\n\nThe ranking function for this loop is `size - ui`. Let's explain why it is a valid ranking function.\n\n1. The value of the ranking function is positive when the loop executes: When the loop executes, we have `ui < size`, which means `size - ui > 0`.\n\n2. The value of the ranking function decreases with every successive iteration: In each iteration of the loop, the value of `ui` is multiplied by 2 (`ui *= 2`). This means that the value of `ui` increases in each iteration, which in turn means that the value of `size - ui` decreases in each iteration.\n\nNow let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant size - ui;\n*/\n```",
                    "First, let's identify the loop in the program:\n\n```\nwhile( (ui < size) && ( ui * 2 > ui ) )\n    ui *= 2;\n```\n\nThe loop continues to execute as long as `ui < size` and `ui * 2 > ui`. In each iteration, `ui` is multiplied by 2. We want to find a ranking function that decreases with each iteration and is positive for the loop to continue executing.\n\nA suitable ranking function for this loop is `size - ui`. Now, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant size - ui;\n*/\n```\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of the ranking function is initially positive: Since `ui = 1` and `size >= BUFFSIZE`, the value of `size - ui` is initially positive.\n\n2. The value of the ranking function decreases with each iteration: In each iteration, `ui` is multiplied by 2, which means that `size - ui` decreases with each iteration.\n\n3. The value of the ranking function is positive for the loop to continue executing: As long as `ui < size`, the value of `size - ui` is positive.\n\nSince the ranking function meets all the conditions, it is a valid ranking function for the given loop.",
                    "First, let's identify the loop head and the loop condition. The loop head is the `while` statement, and the loop condition is `(ui < size) && (ui * 2 > ui)`.\n\nNow, let's find the ranking function. We can see that `ui` is always doubled in the loop body, and the loop continues as long as `ui` is less than `size`. Therefore, we can use the expression `size - ui` as the ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant size - ui;\n*/\n```\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of the ranking function is positive for the loop to execute: Since `ui` is always less than `size` in the loop condition, `size - ui` is always positive.\n\n2. The value of the ranking function decreases with every successive iteration: In each iteration, `ui` is multiplied by 2, which means it is always increasing. Therefore, `size - ui` is always decreasing.\n\nSince the ranking function meets both criteria, it is a valid ranking function, and it helps prove that the loop must terminate.",
                    "First, let's identify the loop and its conditions:\n\n```\nwhile( (ui < size) && (ui * 2 > ui) )\n    ui *= 2;\n```\n\nThe loop continues to execute as long as `ui < size` and `ui * 2 > ui`. The loop body multiplies `ui` by 2 in each iteration. Now, let's find a ranking function for this loop.\n\nA suitable ranking function for this loop would be `size - ui`, because:\n\n1. It is an expression over the live variables at the loop head (`size` and `ui`).\n2. The value of the expression decreases with every iteration, as `ui` is doubled in each iteration, reducing the difference between `size` and `ui`.\n3. The value of the expression is positive for the loop to continue executing, as the loop condition requires `ui < size`.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant size - ui;\n*/\n```\n\nThis ranking function is valid because it meets the requirements mentioned above, ensuring that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile( (ui < size) && ( ui * 2 > ui ) )\n    ui *= 2;\n```\n\nThe loop condition states that it continues executing as long as `ui` is less than `size` and `ui * 2` is greater than `ui`. The loop body simply multiplies `ui` by 2 in each iteration.\n\nNow, let's find the ranking function for this loop. We want to find an expression that decreases with every successive iteration of the loop and is positive for the loop to continue executing.\n\nA suitable ranking function for this loop is `size - ui`.\n\nNow, let's prove why this is a valid ranking function:\n\n1. The value of the expression `size - ui` is positive when the loop is executed because the loop condition states that `ui < size`.\n\n2. The value of the expression `size - ui` decreases with every successive iteration of the loop because in each iteration, `ui` is multiplied by 2, making `ui` closer to `size`.\n\nTherefore, the ranking function for this loop is:\n\n```\n/*@\n    loop variant size - ui;\n*/\n```\n\nThis ranking function is valid because it is positive when the loop is executed and decreases with every successive iteration of the loop, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant size - ui;\n*/",
                    "/*@\n    loop variant size - ui;\n*/",
                    "/*@\n    loop variant size - ui;\n*/",
                    "/*@\n    loop variant size - ui;\n*/",
                    "/*@\n    loop variant size - ui;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\nloop invariant i15: 1 <= ui;\nloop variant size - ui;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui >= 1 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant 1 <= ui is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\nloop invariant i15: 1 <= ui;\nloop variant size - ui;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui >= 1 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant 1 <= ui is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\nloop invariant i15: 1 <= ui;\nloop variant size - ui;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui >= 1 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant 1 <= ui is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\nloop invariant i15: 1 <= ui;\nloop variant size - ui;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui >= 1 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant 1 <= ui is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern unsigned int unknown_uint(void);\n\nint main()\n{\n    unsigned int ui = 1;\n    unsigned int size = unknown_uint();\n    unsigned int BUFFSIZE = unknown_uint();\n    if( size < BUFFSIZE )\n        size = BUFFSIZE;\n    /*@\nloop invariant i1: ui == 1 ==> size >= BUFFSIZE;\nloop invariant i2: ui > 0;\nloop invariant i5: ui >= 1;\nloop invariant i7: size >= BUFFSIZE;\nloop invariant i15: 1 <= ui;\nloop variant size - ui;\n*/\nwhile( (ui < size) && ( ui * 2 > ui ) )\n        ui *= 2;\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant ui == 1 ==> size >= BUFFSIZE is inductive.\nloop invariant ui > 0 is inductive.\nloop invariant ui >= 1 is inductive.\nloop invariant size >= BUFFSIZE is inductive.\nloop invariant 1 <= ui is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/non_termination/loop/Adding_Subtracting_Zero_1_T.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.01.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/easy2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA5.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi3_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.06.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_2_T.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/4NestedWith3Variables_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.07_true-termination.c",
            "../data/benchmarks/tpdb/C/AProVE_numeric/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-terminate_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron12_true-termination.c"
        ],
        "skipped": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/WhileFalse_true-termination.c"
        ],
        "total": 238,
        "success_count": 118,
        "failure_count": 120,
        "success_rate": 0.4957983193277311
    }
}