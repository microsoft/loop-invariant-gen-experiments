{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- n and m are non-deterministic values\n- The loop executes only if m > 0 and n > m\n\nLoop condition:\n- i > 0\n\nNow, let's find the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant m <= n;\n    loop invariant (m > 0 && n > m) ==> (i % m == 0);\n*/\n```",
                    "First, let's analyze the program and make a note of the variable assignments and conditions:\n\n1. `n` and `m` are assigned non-deterministic integer values using `unknown_int()`.\n2. The pre-condition for the loop is `m > 0 && n > m`.\n3. The loop condition is `i > 0`.\n4. Inside the loop body, `i` is decremented either by 1 or `m`.\n\nNow, let's find the loop invariants:\n\n1. `i` is always non-negative: The value of `i` is initialized to `n` and is only decremented within the loop. Since the loop condition is `i > 0`, `i` will always be non-negative.\n2. `i` is always less than or equal to `n`: Since `i` is initialized to `n` and only decremented within the loop, its value will always be less than or equal to `n`.\n3. The value of `m` remains constant throughout the loop: `m` is not modified within the loop.\n\nConsidering these invariants and the pre-condition, we can write the loop invariants as follows:\n\n```\n/*@\n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m >= 1 ==> m <= n;\n    loop invariant m >= 1 ==> m == \\at(m, Pre);\n*/\n```",
                    "First, note the pre-conditions or variable assignments in the program:\n- n and m are assigned non-deterministic integer values.\n- The loop executes only if m > 0 and n > m.\n\nAnalyze the loop body and make a note of the loop condition:\n- The loop condition is i > 0.\n\nNow, we can derive the loop invariants:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> (i >= m || i < m);\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution: `i` is initialized to `n`, and since `n > m`, the invariants hold.\n(ii) in every iteration of the loop: The loop body either subtracts 1 or `m` from `i`, maintaining the invariants.\n(iii) after the loop termination: When the loop terminates, `i` must be 0, ensuring the invariants are still true.",
                    "First, let's note the pre-conditions and variable assignments in the program:\n- `n` and `m` are assigned non-deterministic values.\n- The loop executes only if `m > 0` and `n > m`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `i > 0`.\n- Inside the loop, the value of `i` is decreased either by `1` or by `m`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@\n    loop invariant m > 0 ==> 0 <= i <= n;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> (i % m == 0);\n*/\n```\n\nThese loop invariants imply that after the loop terminates, the value of `i` is a multiple of `m`. Since the loop executes only if `m > 0` and `n > m`, these loop invariants hold true at the beginning, during, and after the loop execution.",
                    "First, let's note the pre-conditions and variable assignments in the program.\n\nPre-conditions:\n- m > 0\n- n > m\n\nVariable assignments:\n- i = n\n\nNow, let's analyze the loop body and make a note of the loop condition.\n\nLoop condition:\n- i > 0\n\nNow, let's find the loop invariants.\n\nLoop invariants:\n- i is always less than or equal to n.\n- i is always non-negative.\n\nWe can now output the loop invariants as an ACSL annotation:\n\n```\n/*@ \n    loop invariant i <= n;\n    loop invariant i >= 0;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant m <= n;\n    loop invariant (m > 0 && n > m) ==> (i % m == 0);\n*/",
                    "/*@\n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m >= 1 ==> m <= n;\n    loop invariant m >= 1 ==> m == \\at(m, Pre);\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> (i >= m || i < m);\n*/",
                    "/*@\n    loop invariant m > 0 ==> 0 <= i <= n;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> (i % m == 0);\n*/",
                    "/*@ \n    loop invariant i <= n;\n    loop invariant i >= 0;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant m <= n;\n    loop invariant (m > 0 && n > m) ==> (i % m == 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant (m > 0 && n > m) ==> (i % m == 0) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m >= 1 ==> m <= n;\n    loop invariant m >= 1 ==> m == \\at(m, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 17: unbound logic variable m. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> (i >= m || i < m);\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant m > 0 ==> 0 <= i <= n;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> (i % m == 0);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant m > 0 ==> 0 <= i <= n is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> (i % m == 0) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i <= n;\n    loop invariant i >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i <= n is established but not preserved.\nloop invariant i >= 0 is inductive.\n\n"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= m;\n    loop invariant 0 <= i <= n;\n    loop invariant m <= n;\n    loop invariant (m > 0 && n > m) ==> (i % m == 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\n\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@\n    loop invariant 0 <= i;\n    loop invariant i <= n;\n    loop invariant m >= 1 ==> m <= n;\n    loop invariant m >= 1 ==> m == \\at(m, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: m >= 1 ==> m <= n;\n\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> n > m;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> (i >= m || i < m);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: i >= 0;\nloop invariant i2: m > 0 ==> i <= n;\nloop invariant i3: m > 0 ==> n > m;\nloop invariant i4: m > 0 ==> i >= 0;\nloop invariant i5: m > 0 ==> (i >= m || i < m);\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant m > 0 ==> 0 <= i <= n;\n    loop invariant m > 0 ==> i >= 0;\n    loop invariant m > 0 ==> i <= n;\n    loop invariant m > 0 ==> (i % m == 0);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: m > 0 ==> 0 <= i <= n;\nloop invariant i2: m > 0 ==> i >= 0;\nloop invariant i3: m > 0 ==> i <= n;\n\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i <= n;\n    loop invariant i >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\n\nloop invariant i2: i >= 0;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\n\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\n\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\n\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\twhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```c\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nNow let's find the ranking function for this loop. We need to find an expression that decreases with each iteration of the loop and is positive when the loop continues executing. Since the loop continues executing while `i > 0`, we can use the variable `i` as the ranking function.\n\nHere's the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant i;\n*/\n```\n\nTo prove that this is a valid ranking function, we need to show that the value of `i` is positive when the loop continues executing and that it decreases with each iteration of the loop.\n\n1. The value of `i` is positive when the loop continues executing: This is true because the loop condition is `i > 0`, which means the loop will only continue executing when `i` is positive.\n\n2. The value of `i` decreases with each iteration of the loop: In each iteration, `i` is either decreased by 1 (`i = i - 1`) or by `m` (`i = i - m`). Since `m > 0`, both of these operations decrease the value of `i`.\n\nTherefore, the chosen ranking function (`i`) is valid for this loop.",
                    "First, let's analyze the loop:\n\n```c\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nThe loop continues as long as `i > 0`. In each iteration of the loop, `i` is decremented either by `1` or by `m`. Since `m > 0` and `n > m`, the loop will eventually terminate.\n\nNow, let's find the ranking function. We can use a lexicographic ranking function with two expressions:\n\n1. `i % m`: This expression will decrease whenever `i` is decremented by `1` in the loop.\n2. `i / m`: This expression will decrease whenever `i` is decremented by `m` in the loop.\n\nHere's the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant i % m;\n    loop variant i / m;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. Both expressions are positive for the loop to continue executing (`i > 0`).\n2. The value of the first expression (`i % m`) decreases when `i` is decremented by `1`.\n3. The value of the second expression (`i / m`) decreases when `i` is decremented by `m`.\n4. If the value of the first expression remains the same, the value of the second expression must decrease.\n\nThus, the ranking function guarantees that the loop will terminate.",
                    "First, let's identify the loop in the program:\n\n```c\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nNow we need to find a ranking function for this loop. The loop continues while `i > 0`. We can see that in each iteration of the loop, the value of `i` decreases either by 1 or by `m`. Since `m` is positive, we know that the value of `i` is always decreasing. Therefore, we can use `i` as the ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant i;\n*/\n```\n\nThis is a valid ranking function because `i` is always positive during the loop execution (as the loop continues while `i > 0`). Moreover, the value of `i` decreases with every successive iteration of the loop, either by 1 or by `m`, which is positive. Thus, the ranking function `i` helps prove that the loop must terminate.",
                    "We will consider the `while (i > 0)` loop in the given program. Our goal is to find a ranking function for this loop.\n\nLet's first analyze the loop:\n\n```\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nThe loop condition is `i > 0`. The loop body has two branches: if `i < m`, then `i` is decremented by 1, otherwise `i` is decremented by `m`. In both cases, the value of `i` decreases in each iteration.\n\nNow let's define the ranking function. We can use the value of `i` itself as the ranking function, as it is always positive inside the loop and decreases in every iteration.\n\nHere's the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant i;\n*/\n```\n\nThe ranking function `i` is valid because:\n\n1. The value of `i` is positive at the beginning of each iteration, as the loop condition is `i > 0`.\n2. The value of `i` decreases in each iteration, as it is either decremented by 1 or by `m`, both of which are positive.\n3. The value of `i` is an integer, ensuring that the loop must eventually terminate.\n\nThus, the ranking function `i` proves the termination of the loop in the given program.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (i > 0) {\n    if (i < m) {\n        i = i - 1;\n    } else {\n        i = i - m;\n    }\n}\n```\n\nNow, let's find the ranking function for the loop. We can see that the value of `i` decreases in every iteration of the loop. In each iteration, either `i` decreases by 1 or by `m`. Since `m > 0`, the value of `i` always decreases.\n\nThe ranking function for this loop is `i`. Let's write it in ACSL syntax:\n\n```\n/*@\n    loop variant i;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `i` is positive for the loop to continue executing (`i > 0`).\n2. The value of `i` decreases in every iteration of the loop.\n\nThus, the ranking function `i` ensures that the loop will eventually terminate."
                ],
                "output": [
                    "/*@\n    loop variant i;\n*/",
                    "/*@\n    loop variant i % m;\n    loop variant i / m;\n*/",
                    "/*@\n    loop variant i;\n*/",
                    "/*@\n    loop variant i;\n*/",
                    "/*@\n    loop variant i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\nloop variant i;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant m >= 1 ==> m <= n is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\nloop invariant m > 0 ==> 0 <= i <= n is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t//@ ghost variant_expression measure = { i % m, i / m };\n/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\nloop invariant measure.a == i % m && measure.b == i / m;\nloop variant measure for lexicographic;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t\n//@ ghost measure.a = i % m;\n//@ ghost measure.b = i / m;\n}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant m >= 1 ==> m <= n is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\nloop invariant m > 0 ==> 0 <= i <= n is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\nloop variant i;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant m >= 1 ==> m <= n is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\nloop invariant m > 0 ==> 0 <= i <= n is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\nloop variant i;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant m >= 1 ==> m <= n is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\nloop invariant m > 0 ==> 0 <= i <= n is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int i, m, n;\n\tn = unknown_int();\n\tm = unknown_int();\n\tif (m > 0 && n > m) {\n\t\ti = n;\n\t\t/*@\nloop invariant i1: 0 <= m;\nloop invariant i2: 0 <= i <= n;\nloop invariant i3: m <= n;\nloop invariant i5: 0 <= i;\nloop invariant i6: i <= n;\nloop invariant i7: m >= 1 ==> m <= n;\nloop invariant i9: i >= 0;\nloop invariant i10: m > 0 ==> i <= n;\nloop invariant i11: m > 0 ==> n > m;\nloop invariant i12: m > 0 ==> i >= 0;\nloop invariant i13: m > 0 ==> (i >= m || i < m);\nloop invariant i14: m > 0 ==> 0 <= i <= n;\nloop variant i;\n*/\nwhile (i > 0) {\n\t\t\tif (i < m) {\n\t\t\t\ti = i - 1;\n\t\t\t} else {\n\t\t\t\ti = i - m;\n            }\n\t\t}\n\t}\n\treturn 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant 0 <= m is inductive.\nloop invariant 0 <= i <= n is inductive.\nloop invariant m <= n is inductive.\nloop invariant 0 <= i is inductive.\nloop invariant i <= n is inductive.\nloop invariant m >= 1 ==> m <= n is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant m > 0 ==> i <= n is inductive.\nloop invariant m > 0 ==> n > m is inductive.\nloop invariant m > 0 ==> i >= 0 is inductive.\nloop invariant m > 0 ==> (i >= m || i < m) is inductive.\nloop invariant m > 0 ==> 0 <= i <= n is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c"
        ],
        "skipped": [],
        "total": 133,
        "success_count": 61,
        "failure_count": 72,
        "success_rate": 0.45864661654135336
    }
}