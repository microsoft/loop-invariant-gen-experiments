{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    while (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    while (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions, variable assignments, and the loop condition:\n\n1. x and y are assigned non-deterministic values from unknown_int().\n2. r is assigned the value 1.\n3. The loop condition is (y > 0).\n\nNow, let's find the loop invariants:\n\n1. r is always non-negative, as it starts with 1 and is only multiplied by x.\n2. y is non-increasing, as it is decremented by 1 in every iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant r >= 1;\n    loop invariant y <= \\at(y, Pre);\n*/\n```",
                    "First, let's note the pre-conditions or variable assignments in the program:\n\n1. x and y are assigned non-deterministic integer values.\n2. r is assigned the value 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is y > 0.\n2. In the loop body, r is multiplied by x, and y is decremented by 1 in each iteration.\n\nNow, let's output the necessary loop invariants:\n\n```\n/*@ \n    loop invariant 0 <= y;\n    loop invariant \\forall integer k; 0 <= k < y ==> r == \\pow(x, k);\n*/\n```",
                    "First, let's make a note of the variable assignments and preconditions in the program:\n\n- `x` and `y` are assigned unknown integer values.\n- `r` is assigned the value 1.\n\nNext, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `y > 0`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination. These loop invariants should imply the post-condition.\n\n```\n/*@ \n    loop invariant y >= 0;\n    loop invariant r >= 1;\n    loop invariant \\forall int k; 0 <= k <= y-1 ==> r * pow(x, k) >= 1;\n*/\n```\n\nHere, we have three loop invariants:\n\n1. `y >= 0`: This is true before the loop execution, in every iteration of the loop, and after the loop termination. It ensures that `y` is always non-negative.\n2. `r >= 1`: This is true before the loop execution, in every iteration of the loop, and after the loop termination. It ensures that `r` is always greater than or equal to 1.\n3. `\\forall int k; 0 <= k <= y-1 ==> r * pow(x, k) >= 1`: This loop invariant states that for all integers `k` between 0 and `y-1` (inclusive), the value of `r * pow(x, k)` is greater than or equal to 1. This invariant is true before the loop execution, in every iteration of the loop, and after the loop termination. It helps to reason about the relationship between `r`, `x`, and `y` at different points in the loop execution.",
                    "First, let's note the variable assignments and the loop condition:\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n- r is initialized to 1.\n- The loop condition is y > 0.\n\nNow let's analyze the loop body and determine the loop invariants:\n\n1. Since r is initialized to 1 and gets multiplied by x in each iteration, after i iterations, r will be equal to x^i. So, we can have an invariant stating that r is equal to the power of x with respect to the initial value of y minus the current value of y.\n\n2. The variable y is always non-negative inside the loop since it starts with a positive value and is decremented by 1 in each iteration.\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant r == pow(x, (y_initial - y));\n    loop invariant y >= 0;\n*/\n```",
                    "First, let's analyze the given program:\n- x and y are assigned non-deterministic values.\n- r is initialized to 1.\n- The loop condition is y > 0.\n- The loop body multiplies r by x and decrements y.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, r is 1.\n2. In every iteration of the loop, r is the product of x raised to the power of the number of iterations completed so far.\n3. After the loop termination, r is the product of x raised to the power of the initial value of y.\n\nTaking these invariants into account, we can write the loop invariants as ACSL annotations:\n\n```\n/*@\n    loop invariant r == 1 ==> y == 0;\n    loop invariant r == pow(x, initial_y - y);\n    loop invariant 0 <= y;\n*/\n```\n\nHere, \"initial_y\" represents the initial value of y before the loop starts. Note that the first invariant uses an implication to handle the case when r is not equal to 1."
                ],
                "output": [
                    "/*@ \n    loop invariant r >= 1;\n    loop invariant y <= \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant 0 <= y;\n    loop invariant \\forall integer k; 0 <= k < y ==> r == \\pow(x, k);\n*/",
                    "/*@ \n    loop invariant y >= 0;\n    loop invariant r >= 1;\n    loop invariant \\forall int k; 0 <= k <= y-1 ==> r * pow(x, k) >= 1;\n*/",
                    "/*@ \n    loop invariant r == pow(x, (y_initial - y));\n    loop invariant y >= 0;\n*/",
                    "/*@\n    loop invariant r == 1 ==> y == 0;\n    loop invariant r == pow(x, initial_y - y);\n    loop invariant 0 <= y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant r >= 1;\n    loop invariant y <= \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y;\n    loop invariant \\forall integer k; 0 <= k < y ==> r == \\pow(x, k);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= y is preserved but not established.\nloop invariant \\forall integer k; 0 <= k < y ==> r == \\pow(x, k) is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant r >= 1;\n    loop invariant \\forall int k; 0 <= k <= y-1 ==> r * pow(x, k) >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: invalid implicit conversion from 'int' to 'double'. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant r == pow(x, (y_initial - y));\n    loop invariant y >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 13: unbound logic variable y_initial. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant r == 1 ==> y == 0;\n    loop invariant r == pow(x, initial_y - y);\n    loop invariant 0 <= y;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable initial_y. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant r >= 1;\n    loop invariant y <= \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= y;\n    loop invariant \\forall integer k; 0 <= k < y ==> r == \\pow(x, k);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant y >= 0;\n    loop invariant r >= 1;\n    loop invariant \\forall int k; 0 <= k <= y-1 ==> r * pow(x, k) >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant r == pow(x, (y_initial - y));\n    loop invariant y >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@\n    loop invariant r == 1 ==> y == 0;\n    loop invariant r == pow(x, initial_y - y);\n    loop invariant 0 <= y;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 7,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\n\n\n\n\n\n\n\n\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    while (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n```\nwhile (y > 0) {\n    r = r*x;\n    y = y - 1;\n}\n```\n\nThe loop continues to execute as long as `y > 0`. In each iteration, `y` is decremented by 1. Therefore, we can use `y` as the ranking function since it decreases with every successive iteration and is positive for the loop to continue executing.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` is positive for the loop to continue executing (`y > 0`).\n2. The value of `y` decreases with every successive iteration (`y = y - 1`).\n3. The loop must terminate since the value of `y` will eventually become non-positive, causing the loop condition to become false.",
                    "First, let's identify the loop in the given program:\n\n```c\nwhile (y > 0) {\n    r = r*x;\n    y = y - 1;\n}\n```\n\nThe loop continues to execute as long as `y > 0`. In each iteration, `y` is decreased by 1. Therefore, the value of `y` can be a valid ranking function for this loop since it decreases with every iteration and is positive for the loop to continue executing.\n\nThe ranking function for this loop is `y`. We can represent it in ACSL syntax as:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` is positive for the loop to continue executing (`y > 0`).\n2. The value of `y` decreases with every iteration of the loop (`y = y - 1`).\n\nThus, the ranking function `y` proves that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (y > 0) {\n    r = r*x;\n    y = y - 1;\n}\n```\n\nNow, let's find the ranking function for this loop. The loop continues to execute as long as `y > 0`. We can see that the value of `y` decreases by 1 in every iteration, and it starts with a non-negative value (since the loop condition checks for `y > 0`). Therefore, we can use `y` as the ranking function.\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` is positive for the loop to continue executing (`y > 0`).\n2. The value of `y` decreases with every successive iteration of the loop (`y = y - 1`).\n\nSince the ranking function satisfies these conditions, it helps prove that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (y > 0) {\n    r = r*x;\n    y = y - 1;\n}\n```\n\nNow, we need to find a ranking function for this loop. The loop continues executing as long as `y > 0`. We can see that in each iteration of the loop, the value of `y` is decreasing by 1. Therefore, the ranking function for this loop can be `y`.\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of the ranking function (`y`) is positive for the loop to continue executing (`y > 0`).\n2. The value of the ranking function (`y`) decreases with every successive iteration of the loop (`y = y - 1`).\n\nSo, the ranking function for the loop is:\n\n```\n/*@\n    loop variant y;\n*/\n```",
                    "First, let's identify the variables that are live as the loop head. In this case, the live variables are `x`, `y`, and `r`. Now, we need to find an expression that decreases with each iteration and is positive for the loop to continue executing.\n\nThe loop continues executing while `y > 0`. Thus, the ranking function must involve `y`. Since `y` is decreasing by 1 in each iteration (`y = y - 1`), we can use `y` as the ranking function.\n\nHere's the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `y` is always positive for the loop to continue executing, as the loop condition is `y > 0`.\n2. The value of `y` decreases with every successive iteration of the loop because of the statement `y = y - 1`.\n\nHence, this ranking function proves that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/",
                    "/*@\n    loop variant y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\nloop variant y;\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\nloop variant y;\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\nloop variant y;\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\nloop variant y;\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y, r;\n    x = unknown_int();\n    y = unknown_int();\n    r = 1;\n    /*@\n\nloop variant y;\n*/\nwhile (y > 0) {\n        r = r*x;\n        y = y - 1;\n    }\n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c"
        ],
        "skipped": [],
        "total": 57,
        "success_count": 27,
        "failure_count": 30,
        "success_rate": 0.47368421052631576
    }
}