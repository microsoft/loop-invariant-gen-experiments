{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions and variable assignments in the program:\n- i is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= 2147483647.\n- Inside the loop, i is incremented by 1.\n\nNow, let's output the loop invariants:\n\n```\n/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- i is assigned an unknown value (unknown_int()).\n\nNext, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= 2147483647.\n- Inside the loop body, i is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant i <= 2147483647;\n*/\n```",
                    "First, make a note of the variable assignments in the program:\n- i is assigned an unknown integer value\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is i <= 2147483647\n- Inside the loop body, i is incremented by 1\n\nNow, let's find the necessary loop invariants:\n\n1. Before the loop execution:\n- i has an unknown integer value\n\n2. In every iteration of the loop:\n- i is incremented by 1, so its value is monotonically increasing\n\n3. After the loop termination:\n- The loop terminates when i > 2147483647\n\nFrom these observations, we can derive the following loop invariants:\n\n```\n/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/\n```",
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n1. i is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is i <= 2147483647.\n2. In the loop body, i is incremented by 1.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 2147483647;\n*/\n```\n\nThese loop invariants hold true before the loop execution (i is assigned an unknown integer value), in every iteration of the loop (i is incremented by 1), and after the loop termination (i > 2147483647).",
                    "Before we start, let's make a note of the variable assignments and loop condition in the program:\n\n- i = unknown_int(); (i is assigned a non-deterministic integer value)\n- Loop condition: i <= 2147483647\n\nNow, let's derive the loop invariants for the while loop:\n\n1. Before the loop execution: i is assigned an unknown integer value, so it can be any integer in the range of valid integers.\n2. In every iteration of the loop: i is incremented by 1, and i stays within the bounds of valid integers.\n3. After loop termination: i is greater than 2147483647.\n\nTaking these points into consideration, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant i >= \\min(int);\n    loop invariant i <= 2147483647;\n*/\n```\n\nThese loop invariants are true before the loop execution, in every iteration of the loop, and after the loop termination. They also imply the post-condition that the loop terminates when i is greater than 2147483647."
                ],
                "output": [
                    "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                    "/*@ \n    loop invariant i <= 2147483647;\n*/",
                    "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 2147483647;\n*/",
                    "/*@ \n    loop invariant i >= \\min(int);\n    loop invariant i <= 2147483647;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant i <= 2147483647 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: unbound logic variable i. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i is preserved but not established.\nloop invariant i <= 2147483647 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\min(int);\n    loop invariant i <= 2147483647;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 12: unexpected token ')'"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\nloop invariant i2: i <= 2147483647;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i1: i <= 2147483647;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\at(i, Pre);\n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\nloop invariant i2: i <= 2147483647;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\nloop invariant i2: i <= 2147483647;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= \\min(int);\n    loop invariant i <= 2147483647;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\nloop invariant i2: i <= 2147483647;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 3,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\n\nloop invariant i2: i <= 2147483647;\n\n\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    while(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, we need to identify the loop in the given program:\n\n```c\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```\n\nNow, we need to find a ranking function that decreases with every iteration of the loop and is positive for the loop to continue executing. In this case, the ranking function can be the difference between the maximum integer value (2147483647) and the variable `i`. So, the ranking function is:\n\n```\n2147483647 - i\n```\n\nNow, let's prove that this is a valid ranking function:\n\n1. The value of the ranking function is positive for the loop to continue executing:\n   As long as `i <= 2147483647`, the value of `2147483647 - i` will be positive.\n\n2. The value of the ranking function decreases with every successive iteration of the loop:\n   In each iteration, the value of `i` is incremented by 1, making `2147483647 - i` decrease by 1.\n\nThus, the ranking function is valid for this loop. Here's the loop with the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop invariant i <= 2147483647;\n    loop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```",
                    "First, let's identify the loop in the given program:\n\n```c\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```\n\nThe loop is iterating as long as `i` is less than or equal to `2147483647`. In each iteration, `i` is incremented by `1`. Now, let's find the ranking function.\n\nThe ranking function for this loop is `2147483647 - i`. Let's put this in ACSL syntax:\n\n```\n/*@\n    loop variant 2147483647 - i;\n*/\n```\n\nNow, let's explain why it is a valid ranking function:\n\n1. The value of the ranking function is positive when the loop is executing: As long as `i <= 2147483647`, the value of the ranking function `2147483647 - i` will be positive.\n\n2. The value of the ranking function decreases with every successive iteration of the loop: In each iteration, `i` is incremented by `1`, which means `2147483647 - i` will decrease by `1` in each iteration.\n\nSince the ranking function meets both conditions, it is a valid ranking function and proves that the loop must terminate.",
                    "First, let's analyze the loop:\n\n```c\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```\n\nThe loop continues executing as long as `i` is less than or equal to 2147483647. In each iteration, `i` is incremented by 1.\n\nNow, let's find the ranking function:\n\nThe value of `i` increases in each iteration, and the loop terminates when `i` becomes greater than 2147483647. So, we can define the ranking function as the difference between 2147483647 and `i`:\n\n```c\n/*@\n    loop variant 2147483647 - i;\n*/\n```\n\nNow let's explain why this is a valid ranking function:\n\n1. The value of the ranking function is positive for the loop to continue executing: As long as `i <= 2147483647`, the value `2147483647 - i` will be positive.\n\n2. The value of the ranking function decreases with every successive iteration of the loop: Since `i` is incremented by 1 in each iteration, the value `2147483647 - i` decreases by 1 in each iteration.\n\nTherefore, this ranking function proves that the loop must terminate.",
                    "First, let's analyze the loop in the program:\n\n```\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```\n\nThe loop iterates as long as `i` is less than or equal to `2147483647`. In each iteration, `i` is incremented by `1`. \n\nTo find the ranking function, we need an expression that decreases with each iteration of the loop and is positive as long as the loop continues executing. In this case, we can use the following ranking function:\n\n```\n2147483647 - i\n```\n\nThis expression decreases by `1` with each iteration, and it's positive as long as `i <= 2147483647`. \n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant 2147483647 - i;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions of being positive as long as the loop executes and decreasing with each iteration. This ensures that the loop will eventually terminate, as the ranking function will reach `0` when `i` becomes greater than `2147483647`.",
                    "First, let's identify the loop and its condition:\n\n```\nwhile(i <= 2147483647) {\n    i = i+1;\n}\n```\n\nThe loop continues to execute as long as `i` is less than or equal to 2147483647. In each iteration, `i` is incremented by 1.\n\nNow, let's find a ranking function for this loop. A suitable ranking function for this loop would be the difference between the maximum integer value and the value of `i`. This is because this difference decreases by 1 in each iteration, and the loop continues to execute as long as this difference is positive.\n\nSo, the ranking function is `2147483647 - i`. Now let's write it in ACSL syntax:\n\n```\n/*@\n    loop variant 2147483647 - i;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive as long as the loop continues to execute (i.e., `i <= 2147483647`).\n2. It decreases in each iteration of the loop, as `i` is incremented by 1."
                ],
                "output": [
                    "/*@\n    loop invariant i <= 2147483647;\n    loop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n    i = i+1;\n}",
                    "/*@\n    loop variant 2147483647 - i;\n*/",
                    "/*@\n    loop variant 2147483647 - i;\n*/",
                    "/*@\n    loop variant 2147483647 - i;\n*/",
                    "/*@\n    loop variant 2147483647 - i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i2: i <= 2147483647;\nloop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= 2147483647 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i2: i <= 2147483647;\nloop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= 2147483647 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i2: i <= 2147483647;\nloop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= 2147483647 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i2: i <= 2147483647;\nloop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= 2147483647 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int i;\n    i = unknown_int();\n    \n    /*@\nloop invariant i2: i <= 2147483647;\nloop variant 2147483647 - i;\n*/\nwhile(i <= 2147483647) {\n        i = i+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant i <= 2147483647 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c"
        ],
        "skipped": [],
        "total": 89,
        "success_count": 43,
        "failure_count": 46,
        "success_rate": 0.48314606741573035
    }
}