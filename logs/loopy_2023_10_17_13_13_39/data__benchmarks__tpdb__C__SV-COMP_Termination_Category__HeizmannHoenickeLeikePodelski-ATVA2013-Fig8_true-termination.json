{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Before the loop execution:\n- x and y are initialized with values from unknown_int(). We don't have any information about their values.\n\nAnalyze the loop body:\n- Loop condition is x >= 0.\n- In every iteration, x is updated as x = x - 2*y + 1.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant 2*y >= 1;\n    loop invariant \\forall integer k; 0 <= k <= x ==> k % (2*y - 1) != 0;\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution, because we have the condition 2*y >= 1 before the loop,\n(ii) in every iteration of the loop, since x is updated as x = x - 2*y + 1, and\n(iii) after the loop termination, when x < 0.",
                    "Let's analyze the given program:\n\n1. Pre-conditions or variable assignments:\n   - x and y are assigned non-deterministic integer values.\n   - A condition (2 * y < 1) is checked. If true, the program returns 0, and the loop is not executed.\n\n2. Loop condition: x >= 0\n\nNow, let's determine the loop invariants:\n\n1. Before loop execution:\n   - Since the loop is executed only if (2 * y >= 1), we can use this as an invariant with an implication.\n\n2. In every iteration of the loop:\n   - x is updated with the expression (x - 2 * y + 1) in each iteration.\n   - We can use the implication (x >= 0) ==> (x < x + 2 * y) since 2 * y >= 1.\n   - Also, we can use the implication (x >= 0) ==> (x - 2 * y + 1 < x) because x is decreasing.\n\n3. After loop termination:\n   - The loop terminates when x < 0.\n\nThe loop invariants for the given program are:\n\n```\n/*@ \n    loop invariant 2 * y < 1 ==> x < 0;\n    loop invariant x >= 0 ==> x < x + 2 * y;\n    loop invariant x >= 0 ==> x - 2 * y + 1 < x;\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. x and y are assigned unknown_int() values.\n2. The program returns 0 if 2 * y < 1.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. The loop continues while x >= 0.\n2. In each iteration, x is updated with the value x - 2 * y + 1.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition:\n\n```\n/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/\n```\n\nThese loop invariants are true before the loop execution (due to the if condition), in every iteration of the loop (since x is reduced by 2 * y - 1 in each iteration), and after the loop termination (since the loop condition is x >= 0).",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are assigned non-deterministic integer values.\n- The program only proceeds if 2 * y >= 1.\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is x >= 0.\n- Inside the loop, x is updated as x = x - 2 * y + 1.\n\nNow, we can output the loop invariants that are true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/\n```\n\nExplanation:\n1. The first invariant, `2 * y >= 1`, is true before the loop execution (due to the if condition), and it remains true inside the loop as y is never modified.\n2. The second invariant, `y >= 1`, is derived from the first invariant, and it also remains true throughout the loop execution.\n3. The third invariant, `x >= -2 * y + 1`, ensures that x doesn't decrease indefinitely. It is true before the loop (since x is non-negative initially) and during the loop execution. After the loop termination (when x < 0), this invariant also holds true.",
                    "First, let's note the preconditions, variable assignments, and loop condition:\n\n1. Preconditions: 2 * y >= 1\n2. Variable Assignments: x and y are assigned non-deterministic values (unknown_int()).\n3. Loop Condition: x >= 0\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution:\n   - The precondition implies that y >= 1.\n\n2. In every iteration of the loop:\n   - x is decreasing by (2 * y - 1) in each iteration.\n   - Since y >= 1, (2 * y - 1) >= 1, so x decreases by at least 1 in each iteration.\n\n3. After the loop termination:\n   - The loop terminates when x < 0.\n\nConsidering the above points, we can write the loop invariants for the program:\n\n```\n/*@\n  loop invariant y >= 1;\n  loop invariant (2 * y - 1) >= 1;\n  loop invariant \\old(x) >= x;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant \\forall integer k; 0 <= k <= x ==> k % (2*y - 1) != 0;\n*/",
                    "/*@ \n    loop invariant 2 * y < 1 ==> x < 0;\n    loop invariant x >= 0 ==> x < x + 2 * y;\n    loop invariant x >= 0 ==> x - 2 * y + 1 < x;\n*/",
                    "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                    "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                    "/*@\n  loop invariant y >= 1;\n  loop invariant (2 * y - 1) >= 1;\n  loop invariant \\old(x) >= x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant \\forall integer k; 0 <= k <= x ==> k % (2*y - 1) != 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 2*y >= 1 is inductive.\nloop invariant \\forall integer k; 0 <= k <= x ==> k % (2*y - 1) != 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": true,
                        "invariants": "/*@ \n    loop invariant 2 * y < 1 ==> x < 0;\n    loop invariant x >= 0 ==> x < x + 2 * y;\n    loop invariant x >= 0 ==> x - 2 * y + 1 < x;\n*/",
                        "checker_output_for_invariants": true,
                        "checker_message_for_invariants": "loop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 2 * y >= 1 is inductive.\nloop invariant x >= -2 * y + 1 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant x >= -2 * y + 1 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n  loop invariant y >= 1;\n  loop invariant (2 * y - 1) >= 1;\n  loop invariant \\old(x) >= x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: \\old undefined in this context. Ignoring loop annotation"
                    }
                ],
                "success": true
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2*y >= 1;\n    loop invariant \\forall integer k; 0 <= k <= x ==> k % (2*y - 1) != 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 0,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2 * y < 1 ==> x < 0;\n    loop invariant x >= 0 ==> x < x + 2 * y;\n    loop invariant x >= 0 ==> x - 2 * y + 1 < x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2 * y < 1 ==> x < 0;\nloop invariant i2: x >= 0 ==> x < x + 2 * y;\nloop invariant i3: x >= 0 ==> x - 2 * y + 1 < x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2 * y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 2 * y >= 1;\n    loop invariant y >= 1;\n    loop invariant x >= -2 * y + 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2 * y >= 1;\nloop invariant i2: y >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n  loop invariant y >= 1;\n  loop invariant (2 * y - 1) >= 1;\n  loop invariant \\old(x) >= x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: y >= 1;\nloop invariant i2: (2 * y - 1) >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 2,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\n\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\n\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\n\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop:\n\n```\nwhile (x >= 0) {\n    x = x - 2*y + 1;\n}\n```\n\nWe can see that the loop continues to execute as long as `x >= 0`. In each iteration, the value of `x` is updated as `x = x - 2*y + 1`. Since `2*y >= 1` (from the condition `2*y < 1`), we know that `2*y - 1 >= 0`. Hence, the value of `x` will decrease in each iteration.\n\nNow, we can propose a ranking function for this loop. Since the value of `x` decreases in each iteration, we can use `x` itself as the ranking function. The ranking function would be:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the ranking function `x` is positive for the loop to continue executing (`x >= 0`).\n2. The value of the ranking function `x` decreases with every successive iteration of the loop (`x = x - 2*y + 1`, with `2*y - 1 >= 0`).\n\nSince the ranking function satisfies these conditions, it proves that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (x >= 0) {\n    x = x - 2*y + 1;\n}\n```\n\nNow let's find a ranking function for this loop. Since the value of `x` decreases in each iteration of the loop, we can use `x` as the ranking function.\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `x` is positive for the loop to continue executing, as the loop condition is `x >= 0`.\n2. The value of `x` decreases with every successive iteration of the loop, as `x` is updated with `x - 2*y + 1` in each iteration. Since `2*y` is greater than or equal to `1` (as per the precondition `if (2*y < 1) return 0;`), the value of `x` will decrease in each iteration.\n\nHence, the ranking function `x` proves that the loop must terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x >= 0) {\n\tx = x - 2*y + 1;\n}\n```\n\nNow, let's find the ranking function for this loop. The loop terminates when x becomes negative. The value of x is decreasing in each iteration by (2*y - 1). Since 2*y >= 1, the value of x is guaranteed to decrease in each iteration. Therefore, we can use x as our ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of x is always non-negative when the loop executes (x >= 0).\n2. The value of x decreases with every iteration (x = x - 2*y + 1).\n3. The loop terminates when the value of x becomes negative (x < 0).\n\nThus, the ranking function x proves the termination of the loop.",
                    "First, let's identify the loop and the variables involved in the loop condition and the loop body. The loop is the `while` loop with the condition `x >= 0`, and the loop body is `x = x - 2*y + 1`. The variables involved are `x` and `y`.\n\nNow, we need to find a ranking function that decreases with each iteration of the loop and is positive when the loop continues to execute. In this case, a suitable ranking function would be `x + 1`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x + 1;\n*/\n```\n\nThis is a valid ranking function because:\n1. The value of `x + 1` is positive when the loop continues to execute, as the loop condition is `x >= 0`.\n2. The value of `x + 1` decreases with each iteration of the loop. In each iteration, `x` is updated to `x - 2*y + 1`. Since `2*y` is greater than or equal to `1` (as given in the `if` statement before the loop), the value of `x` decreases by at least 1 in each iteration, causing `x + 1` to decrease as well.\n\nHence, `x + 1` is a valid ranking function for the given loop, proving that the loop must terminate.",
                    "First, let's identify the loop in the program:\n\n```c\nwhile (x >= 0) {\n\tx = x - 2*y + 1;\n}\n```\n\nNow, let's find the ranking function for this loop. We need an expression that decreases with every iteration and is positive as long as the loop continues executing.\n\nIn this case, the ranking function is simply `x`. Here's why:\n\n1. The value of `x` decreases with every iteration: `x = x - 2*y + 1`, and since `2*y >= 1` (from the initial `if` statement), the value of `x` will decrease in every iteration.\n2. The value of `x` is positive as long as the loop continues executing: The loop condition is `x >= 0`, so the value of `x` must be positive for the loop to continue.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```c\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions of being positive as long as the loop continues executing and decreasing with every iteration, ensuring that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x + 1;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\nloop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant (2 * y - 1) >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\nloop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant (2 * y - 1) >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\nloop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant (2 * y - 1) >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\nloop variant x + 1;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\nloop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant (2 * y - 1) >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main() {\n\tint x = unknown_int();\n\tint y = unknown_int();\n\tif (2*y < 1) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: 2*y >= 1;\nloop invariant i3: 2 * y < 1 ==> x < 0;\nloop invariant i4: x >= 0 ==> x < x + 2 * y;\nloop invariant i5: x >= 0 ==> x - 2 * y + 1 < x;\nloop invariant i6: 2 * y >= 1;\nloop invariant i9: y >= 1;\nloop invariant i12: (2 * y - 1) >= 1;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x - 2*y + 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 2*y >= 1 is inductive.\nloop invariant 2 * y < 1 ==> x < 0 is inductive.\nloop invariant x >= 0 ==> x < x + 2 * y is inductive.\nloop invariant x >= 0 ==> x - 2 * y + 1 < x is inductive.\nloop invariant 2 * y >= 1 is inductive.\nloop invariant y >= 1 is inductive.\nloop invariant (2 * y - 1) >= 1 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB11.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-cousot9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1c_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.04.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.02.c",
            "../data/benchmarks/tpdb/C/Ultimate/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_AG313.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ComplInterv.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA9.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChooseLife.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-exmini_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex8_true-termination.c"
        ],
        "skipped": [],
        "total": 206,
        "success_count": 100,
        "failure_count": 106,
        "success_rate": 0.4854368932038835
    }
}