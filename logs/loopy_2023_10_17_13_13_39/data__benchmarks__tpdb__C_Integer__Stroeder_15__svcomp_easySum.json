{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  while (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  while (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's note the pre-conditions and variable assignments in the program:\n\n- `int i, sum, bound;`\n- `bound = unknown_int();`\n- `i = 0;`\n- `sum = 0;`\n\nNext, let's analyze the loop body and loop condition:\n\n- `while (i < bound) {`\n- `sum = sum + i;`\n- `i = i + 1;`\n- `}`\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum <= i * (i - 1) / 2;\n*/\n```",
                    "First, note the pre-conditions or variable assignments in the program:\n- i = 0\n- sum = 0\n- bound is a non-deterministic integer value\n\nNext, analyze the loop body and make a note of the loop condition:\n- The loop condition is i < bound.\n\nNow, let's find the loop invariants.\n\nLoop invariants:\n1. i is non-negative: i >= 0\n2. sum is non-negative: sum >= 0\n3. i is less than or equal to bound: i <= bound\n4. The sum is the sum of integers from 0 to i-1: sum == (i * (i - 1)) / 2\n\nThe loop invariants are:\n\n```\n/*@ \n    loop invariant i >= 0;\n    loop invariant sum >= 0;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/\n```",
                    "First, let's analyze the given program:\n\n1. Pre-conditions and variable assignments:\n   - bound is assigned an unknown integer value.\n   - i is initialized to 0.\n   - sum is initialized to 0.\n\n2. Loop condition: i < bound\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/\n```\n\nExplanation:\n\n- The first loop invariant `0 <= i` states that the value of `i` is always non-negative before, during, and after the loop execution.\n\n- The second loop invariant `i <= bound` states that the value of `i` is always less than or equal to the value of `bound` before, during, and after the loop execution.\n\n- The third loop invariant `sum == (i * (i - 1)) / 2` states that the value of `sum` is always equal to the sum of all integers from 0 to `i - 1` before, during, and after the loop execution. This is based on the formula for the sum of an arithmetic series: `sum = (n * (n - 1)) / 2`, where `n` represents the number of terms in the series (in this case, `i`).",
                    "First, let's analyze the given program.\n\n1. Pre-conditions or variable assignments:\n   - bound is assigned a non-deterministic value from unknown_int().\n   - i is initialized to 0.\n   - sum is initialized to 0.\n\n2. Loop condition:\n   - The loop continues as long as i < bound.\n\nNow, let's find the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post-condition.\n\n```\n/*@ \n    loop invariant 0 <= i && i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/\n```\n\nExplanation:\n\n1. `0 <= i && i <= bound`: i starts at 0 and increases by 1 in each iteration. It is guaranteed to be non-negative and less than or equal to bound.\n\n2. `0 <= sum`: sum starts at 0 and is incremented by non-negative values (i) in each iteration. Therefore, it is guaranteed to be non-negative.\n\n3. `sum == (i * (i - 1)) / 2`: sum represents the sum of all numbers from 0 to i-1. The formula for the sum of the first n-1 natural numbers is given by (n * (n - 1)) / 2. Since i is the current value of the counter, the sum of all numbers from 0 to i-1 is given by (i * (i - 1)) / 2.",
                    "First, let's make a note of the pre-conditions and variable assignments:\n\n- `bound` is assigned a value by a call to `unknown_int()`. Since we don't have the definition of this function, we can't make any assumptions about the value of `bound`.\n- `i` is initialized to 0.\n- `sum` is initialized to 0.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n- The loop condition is `i < bound`.\n- Inside the loop, `sum` is incremented by `i`, and `i` is incremented by 1.\n\nWe can now find the loop invariants:\n\n1. Before the loop execution, `i` is always 0, and `sum` is always 0.\n2. In every iteration of the loop, `sum` is the sum of all integers from 0 to `i - 1` (inclusive).\n3. After the loop termination, `i` is equal to `bound`, and `sum` is the sum of all integers from 0 to `bound - 1` (inclusive).\n\nNow let's write the loop invariants in ACSL:\n\n```\n/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= bound;\n  loop invariant sum == (i * (i - 1)) / 2;\n*/\n```\n\nThese invariants hold true (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum <= i * (i - 1) / 2;\n*/",
                    "/*@ \n    loop invariant i >= 0;\n    loop invariant sum >= 0;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                    "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                    "/*@ \n    loop invariant 0 <= i && i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                    "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= bound;\n  loop invariant sum == (i * (i - 1)) / 2;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum <= i * (i - 1) / 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i is inductive.\nloop invariant i <= bound is preserved but not established.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant sum >= 0;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant i <= bound is preserved but not established.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i is inductive.\nloop invariant i <= bound is preserved but not established.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i && i <= bound is preserved but not established.\nloop invariant 0 <= sum is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= bound;\n  loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant 0 <= i is inductive.\nloop invariant i <= bound is preserved but not established.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum <= i * (i - 1) / 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant i >= 0;\n    loop invariant sum >= 0;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: i >= 0;\nloop invariant i2: sum >= 0;\n\nloop invariant i4: sum == (i * (i - 1)) / 2;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i;\n    loop invariant i <= bound;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: sum == (i * (i - 1)) / 2;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant 0 <= i && i <= bound;\n    loop invariant 0 <= sum;\n    loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\n\nloop invariant i2: 0 <= sum;\nloop invariant i3: sum == (i * (i - 1)) / 2;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n  loop invariant 0 <= i;\n  loop invariant i <= bound;\n  loop invariant sum == (i * (i - 1)) / 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: sum == (i * (i - 1)) / 2;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 1,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\n\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\n\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  while (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop and its variables.\n\nThe loop is:\n```\nwhile (i < bound) {\n  sum = sum + i;\n  i = i + 1;\n}\n```\n\nThe variables involved in the loop are `i` and `bound`.\n\nNow, let's find the ranking function for this loop. We need an expression that decreases with every iteration of the loop and stays positive as long as the loop continues executing.\n\nThe ranking function is the difference between `bound` and `i`, which is `(bound - i)`.\n\nNow, let's explain why it is a valid ranking function.\n\n1. The value of the expression `(bound - i)` is positive for the loop to continue executing. Since the loop condition is `i < bound`, this means that `(bound - i)` is always positive while the loop is executing.\n\n2. The value of the expression `(bound - i)` decreases with every successive iteration of the loop. In each iteration, `i` is incremented by 1 (`i = i + 1`). This means that the difference `(bound - i)` decreases by 1 in each iteration.\n\nSo, the ranking function for this loop is `(bound - i)`. In ACSL syntax, the ranking function can be written as:\n\n```\n/*@ \n    loop variant bound - i;\n */\n```\n\nThis ranking function proves that the loop must terminate as it decreases with each iteration and remains positive while the loop is executing.",
                    "First, let's identify the loop and the variables involved in the loop.\n\nThe loop is the `while (i<bound)` loop. The variables involved are `i`, `sum`, and `bound`.\n\nNow, let's find the ranking function for the loop.\n\nHere, the loop executes as long as `i < bound`. In each iteration, `i` is incremented by 1. So, with each iteration, the value of `i` gets closer to the value of `bound`. Thus, the difference `(bound - i)` decreases with each iteration and is always positive when the loop continues executing.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant bound - i;\n*/\n```\n\nThis ranking function is valid because:\n\n1. The value of the expression `(bound - i)` is positive for the loop to continue executing, as `i < bound`.\n2. The value of the expression `(bound - i)` decreases with each iteration, as `i` is incremented by 1 in every iteration.\n\nThus, the ranking function `(bound - i)` helps prove that the loop must terminate.",
                    "First, let's identify the loop and the variables involved in it:\n\n```\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n}\n```\n\nThe variables involved in the loop are `i`, `sum`, and `bound`. The loop continues executing as long as `i < bound`.\n\nNow, let's find the ranking function for this loop. A good candidate is `bound - i`, as it is positive when the loop continues and decreases with each iteration, since `i` increases by `1`.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@ \n    loop variant bound - i;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive when the loop continues: `i < bound` implies `bound - i > 0`.\n2. It decreases with every iteration: In each iteration, `i` increases by `1`, so `bound - i` decreases by `1`.\n3. It guarantees the loop's termination: As `bound - i` decreases with each iteration and is always non-negative, it will eventually reach `0`, causing the loop to exit.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (i<bound) {\n  sum = sum + i;\n  i = i + 1;\n}\n```\n\nNow, we need to find a ranking function for this loop. The loop continues to execute as long as `i < bound`. We can use `bound - i` as our ranking function because it decreases in every iteration of the loop and is positive as long as the loop continues to execute.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant bound - i;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the expression `bound - i` is positive as long as the loop continues to execute (`i < bound`).\n2. In each iteration of the loop, the value of `i` increases by 1 (`i = i + 1`), which means the value of `bound - i` decreases by 1.\n3. As the value of the ranking function decreases in every iteration and is positive for the loop to execute, we can say that the loop must terminate.",
                    "First, let's identify the loop and its variables:\n\n```\n  while (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n```\n\nThe loop variables are `i` and `bound`. Since `i` is increasing by 1 in each iteration (`i = i + 1`), and the loop condition is `i < bound`, we can find the ranking function as follows:\n\n```\n/*@\n    loop variant bound - i;\n*/\n```\n\nNow, let's explain why this is a valid ranking function:\n\n1. The value of the ranking function `bound - i` is positive for the loop to continue executing, as the loop condition is `i < bound`.\n\n2. In each iteration of the loop, the value of `i` is increased by 1, making the value of the ranking function `bound - i` decrease with every successive iteration.\n\nTherefore, the ranking function `bound - i` helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@ \n    loop variant bound - i;\n */",
                    "/*@\n    loop variant bound - i;\n*/",
                    "/*@ \n    loop variant bound - i;\n*/",
                    "/*@\n    loop variant bound - i;\n*/",
                    "/*@\n    loop variant bound - i;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\nloop variant bound - i;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\nloop variant bound - i;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\nloop variant bound - i;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\nloop variant bound - i;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n  int i, sum, bound;\n  bound = unknown_int();\n  i = 0;\n  sum = 0;\n  /*@\nloop invariant i1: 0 <= i;\nloop invariant i3: 0 <= sum;\nloop invariant i4: sum <= i * (i - 1) / 2;\nloop invariant i5: i >= 0;\nloop invariant i6: sum >= 0;\nloop invariant i8: sum == (i * (i - 1)) / 2;\nloop variant bound - i;\n*/\nwhile (i<bound) {\n    sum = sum + i;\n    i = i + 1;\n  }\n  return 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant 0 <= i is inductive.\nloop invariant 0 <= sum is inductive.\nloop invariant sum <= i * (i - 1) / 2 is inductive.\nloop invariant i >= 0 is inductive.\nloop invariant sum >= 0 is inductive.\nloop invariant sum == (i * (i - 1)) / 2 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c"
        ],
        "skipped": [],
        "total": 156,
        "success_count": 74,
        "failure_count": 82,
        "success_rate": 0.47435897435897434
    }
}