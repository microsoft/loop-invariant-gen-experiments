{
    "logs": {
        "file": "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's take note of the pre-conditions and variable assignments in the program:\n\n- Pre-condition: a == b (due to the if statement)\n- x, a, and b are assigned non-deterministic values from unknown_int() function calls.\n\nNow, analyze the loop body and make a note of the loop condition:\n\n- Loop condition: x >= 0\n\nNow, let's find the loop invariants:\n\n- Before the loop execution: a == b\n- In every iteration of the loop: \n    1. x is decremented by 1.\n    2. The value of x at the start of the iteration is greater than or equal to 0.\n- After the loop termination: x < 0\n\nHere are the loop invariants:\n\n```\n/*@ \n    loop invariant a == b;\n    loop invariant x >= \\at(x, LoopEntry) - 1;\n    loop invariant x >= 0;\n */\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- `int x = unknown_int();`\n- `int a = unknown_int();`\n- `int b = unknown_int();`\n- The condition `if (a != b)` means that the loop will only execute if `a == b`.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is `x >= 0`.\n- In the loop body, `x = x + a - b - 1`.\n\nNow, let's output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition.\n\n```\n/*@\n    loop invariant a == b ==> x >= -1;\n    loop invariant a != b ==> 1;\n*/\n```\n\nExplanation:\n- If `a == b`, then the loop invariant `x >= -1` holds, as in every iteration, `x` will decrease by 1 and eventually terminate.\n- If `a != b`, then the loop invariant `1` is trivially true, as the loop will not execute in this case.",
                    "Let's analyze the given program:\n\n1. Pre-conditions and variable assignments:\n   - `x`, `a`, and `b` are assigned non-deterministic integer values.\n   - There is a condition `if (a != b)` which returns 0 if true, so we know that when the loop starts, `a == b`.\n\n2. Loop condition:\n   - The loop executes as long as `x >= 0`.\n\n3. Loop body:\n   - `x` is updated as `x = x + a - b - 1`.\n\nNow, let's find the loop invariants:\n\n- Before the loop execution: `a == b`\n- In every iteration of the loop:\n  - `x` is updated as `x = x + a - b - 1`, and since `a == b`, we can simplify this to `x = x - 1`.\n- After the loop termination: `x < 0`\n\nTaking all these points into consideration, the loop invariants are:\n\n```\n/*@ \n    loop invariant a == b;\n    loop invariant a - b == 0;\n    loop invariant x >= \\at(x, Pre) - (a - b) * (\\at(x, Pre) >= 0 ==> \\at(iter, Pre));\n*/\n```",
                    "Before analyzing the loop, let's make a note of the pre-conditions or variable assignments in the program:\n\n1. x, a, and b are assigned non-deterministic integer values.\n2. The program only continues if a == b.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n\n1. The loop condition is x >= 0.\n2. In the loop body, x is updated with x = x + a - b - 1.\n\nBased on this information, let's determine the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination:\n\n```\n/*@ \n    loop invariant a == b;\n    loop invariant x >= -a;\n*/\n```\n\nExplanation of the loop invariants:\n\n1. `a == b`: This invariant is true before the loop execution, and since the values of a and b do not change in the loop body, it remains true in every iteration and after the loop termination.\n2. `x >= -a`: This invariant holds before the loop execution since x is non-negative and -a is non-positive. In each iteration, x decreases by 1, and the difference between x and -a stays the same since a == b. After the loop termination, the invariant still holds as x is no longer non-negative, ensuring that the post-condition holds.",
                    "Let's analyze the given code:\n\n1. Pre-conditions and variable assignments:\n   - `x`, `a`, and `b` are assigned non-deterministic values.\n   - There is an assumption that `a != b`.\n\n2. Loop condition and body:\n   - The loop executes as long as `x >= 0`.\n   - In each iteration, `x` is updated as `x = x + a - b - 1`.\n\nNow, let's find the loop invariants:\n\n```\n/*@ \n    loop invariant a == b ==> x < 0;\n    loop invariant a != b ==> x == \\at(x, Pre) + a - b - 1;\n*/\n```\n\nExplanation:\n- If `a == b`, the loop invariant `x < 0` should be true, because the loop will terminate immediately.\n- If `a != b`, the loop invariant `x == \\at(x, Pre) + a - b - 1` should be true, because `x` is updated in each iteration by adding `a - b - 1`.\n\nThese invariants hold (i) before the loop execution, (ii) in every iteration of the loop, and (iii) after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant a == b;\n    loop invariant x >= \\at(x, LoopEntry) - 1;\n    loop invariant x >= 0;\n */",
                    "/*@\n    loop invariant a == b ==> x >= -1;\n    loop invariant a != b ==> 1;\n*/",
                    "/*@ \n    loop invariant a == b;\n    loop invariant a - b == 0;\n    loop invariant x >= \\at(x, Pre) - (a - b) * (\\at(x, Pre) >= 0 ==> \\at(iter, Pre));\n*/",
                    "/*@ \n    loop invariant a == b;\n    loop invariant x >= -a;\n*/",
                    "/*@ \n    loop invariant a == b ==> x < 0;\n    loop invariant a != b ==> x == \\at(x, Pre) + a - b - 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant x >= \\at(x, LoopEntry) - 1;\n    loop invariant x >= 0;\n */",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b is inductive.\nloop invariant x >= \\at(x, LoopEntry) - 1 is established but not preserved.\nloop invariant x >= 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant a == b ==> x >= -1;\n    loop invariant a != b ==> 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b ==> x >= -1 is preserved but not established.\nloop invariant a != b ==> 1 is inductive.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant a - b == 0;\n    loop invariant x >= \\at(x, Pre) - (a - b) * (\\at(x, Pre) >= 0 ==> \\at(iter, Pre));\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 16: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant x >= -a;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant a == b is inductive.\nloop invariant x >= -a is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x < 0;\n    loop invariant a != b ==> x == \\at(x, Pre) + a - b - 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable x. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant x >= \\at(x, LoopEntry) - 1;\n    loop invariant x >= 0;\n */",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\n\n\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant a == b ==> x >= -1;\n    loop invariant a != b ==> 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\n\nloop invariant i2: a != b ==> 1;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant a - b == 0;\n    loop invariant x >= \\at(x, Pre) - (a - b) * (\\at(x, Pre) >= 0 ==> \\at(iter, Pre));\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i2: a - b == 0;\n\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b;\n    loop invariant x >= -a;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\n\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant a == b ==> x < 0;\n    loop invariant a != b ==> x == \\at(x, Pre) + a - b - 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\n\n\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 4,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\n\n\n\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\n\n\n\n\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\twhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop in the given program:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nSince the loop condition is `x >= 0`, we know that the loop will continue executing as long as the value of `x` is non-negative. Inside the loop, we update the value of `x` with the expression `x + a - b - 1`. Since `a` and `b` are equal (due to the initial condition `if (a != b) return 0;`), the update expression simplifies to `x - 1`.\n\nNow, we can identify the ranking function for this loop:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x` is always non-negative at the start of each loop iteration (due to the loop condition `x >= 0`).\n\n2. The value of `x` strictly decreases with every loop iteration because it is updated with the expression `x - 1`.\n\n3. Since the value of `x` is always decreasing and non-negative, the loop must eventually terminate when `x` becomes negative.",
                    "First, let's analyze the loop:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nSince `a` and `b` are equal (from the initial condition `if (a != b) return 0;`), we can rewrite the loop as:\n\n```\nwhile (x >= 0) {\n    x = x - 1;\n}\n```\n\nNow, let's find the ranking function. The ranking function for this loop is `x`, as it is the variable that determines the termination of the loop. We can see that `x` decreases by `1` in each iteration and is always non-negative (x >= 0) for the loop to continue executing.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is an expression over the program variable `x` that is live at the loop head.\n2. The value of the expression `x` decreases with every successive iteration of the loop (`x = x - 1`).\n3. The value of the expression `x` must be positive (x >= 0) for the loop to continue executing.\n\nThese conditions ensure that the loop must terminate, proving the ranking function `x` is valid.",
                    "First, let's observe the loop in the given program:\n\n```\nwhile (x >= 0) {\n    x = x + a - b - 1;\n}\n```\n\nThe loop continues to execute as long as `x >= 0`. In each iteration of the loop, the value of `x` is updated as follows: `x = x + a - b - 1`. Since `a` and `b` are equal (as per the precondition of entering the loop), their difference is always 0. Therefore, the value of `x` decreases by 1 in every iteration.\n\nNow, let's find the ranking function. Since `x` decreases by 1 in every iteration, we can use `x` as the ranking function:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is an expression over the live program variable `x`.\n2. The value of `x` decreases by 1 in every iteration, ensuring progress towards termination.\n3. The value of `x` must be positive (i.e., `x >= 0`) for the loop to continue executing.\n\nThus, the ranking function `x` proves that the loop must terminate.",
                    "First, let's analyze the loop and its conditions:\n\nThe loop condition is `x >= 0`, which means the loop will continue executing as long as `x` is non-negative.\n\nInside the loop, the value of `x` is updated with the expression `x = x + a - b - 1`. Since `a` and `b` are equal (from the initial condition `a != b`), we can simplify the expression to `x = x - 1`.\n\nNow we can find the ranking function for this loop. The ranking function should be a positive expression that decreases with every iteration of the loop. In this case, the ranking function is simply the value of `x`. \n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x` is initially non-negative (due to the loop condition `x >= 0`).\n2. The value of `x` decreases by 1 in every iteration (`x = x - 1`).\n3. The value of `x` must be positive for the loop to continue executing (`x >= 0`).\n\nSince the ranking function is positive and strictly decreasing, it guarantees that the loop will eventually terminate.",
                    "First, let's analyze the loop. The loop continues executing as long as `x >= 0`. In each iteration, `x` is updated as `x = x + a - b - 1`. Since `a` and `b` are equal (as checked before entering the loop), their difference will be 0, so the loop simplifies to `x = x - 1`.\n\nNow, we can identify the ranking function for the loop. The value of `x` decreases by 1 in each iteration, and the loop continues as long as `x >= 0`. Therefore, the ranking function is `x`.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x` is positive (or zero) for the loop to continue executing (`x >= 0`).\n2. The value of `x` decreases with every successive iteration of the loop (`x = x - 1`).\n3. The loop must terminate when the value of `x` becomes negative, as the loop condition is `x >= 0`.\n\nThus, the ranking function `x` helps prove that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/",
                    "/*@\n    loop variant x;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant a == b is inductive.\nloop invariant a != b ==> 1 is inductive.\nloop invariant a - b == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant a == b is inductive.\nloop invariant a != b ==> 1 is inductive.\nloop invariant a - b == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant a == b is inductive.\nloop invariant a != b ==> 1 is inductive.\nloop invariant a - b == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant a == b is inductive.\nloop invariant a != b ==> 1 is inductive.\nloop invariant a - b == 0 is inductive.\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\nint main()\n{\n\tint x = unknown_int();\n\tint a = unknown_int();\n\tint b = unknown_int();\n\tif (a != b) {\n\t\treturn 0;\n\t}\n\t/*@\nloop invariant i1: a == b;\nloop invariant i5: a != b ==> 1;\nloop invariant i7: a - b == 0;\nloop variant x;\n*/\nwhile (x >= 0) {\n\t\tx = x + a - b - 1;\n\t}\n\treturn 0;\n}",
                        "checker_output": true,
                        "checker_message": "loop invariant a == b is inductive.\nloop invariant a != b ==> 1 is inductive.\nloop invariant a - b == 0 is inductive.\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig5_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC9.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_4_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusBuiltIn.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Ex6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB6.c",
            "../data/benchmarks/non_termination/loop/Type_Conversion_in_Comparison_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Update_for_Loop_Iterator_1_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-CAV2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MinusMin.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-WST2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedFails4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.09-no-inv_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Copenhagen_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_easySum.c",
            "../data/benchmarks/non_termination/loop/Unsigned_Wraparound_Error_3_T.c",
            "../data/benchmarks/non_termination/loop/Undefined_Behavior_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.10_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA6.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Gothenburg_v2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.08.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.03.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig4_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Stockholm_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.03-no-inv_assume.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/GopanReps-CAV2006-Fig1a_true-termination.c.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Thun_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA10.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Stockholm_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/IntPath.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.19_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Ben-Amram-LMCS2010-Ex2.3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Fibonacci.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/DoubleNeg.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BradleyMannaSipma-ICALP2005-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ColonSipma-TACAS2001-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi4_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_flag.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.11_false-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Mysore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-VMCAI2004-Ex2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChawdharyCookGulwaniSagivYang-ESOP2008-aaron6_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/McCarthy91_Iteration_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NO_24.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Copenhagen_disj_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/CookSeeZuleger-TACAS2013-Fig7a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-wise_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex3.05_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Ex7_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Bangalore_v4_true-termination.c"
        ],
        "skipped": [],
        "total": 180,
        "success_count": 86,
        "failure_count": 94,
        "success_rate": 0.4777777777777778
    }
}