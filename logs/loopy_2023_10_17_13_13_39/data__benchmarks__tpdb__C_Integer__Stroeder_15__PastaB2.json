{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's analyze the given program:\n\n1. There are two variables x and y, both are assigned with unknown_int() which means their initial values are non-deterministic.\n2. The loop condition is (x > y).\n3. Inside the loop, x is decremented by 1 and y is incremented by 1 in each iteration.\n\nNow, let's find the loop invariants:\n\n1. Before the loop execution, we don't have any useful information about x and y.\n2. In every iteration of the loop, we can see that the difference between x and y decreases by 2.\n3. After the loop termination, x <= y since the loop condition is (x > y).\n\nTaking all these points into account, we can write the loop invariants as:\n\n```\n/*@ \n    loop invariant x >= y ==> \\at(x, Pre) - x == y - \\at(y, Pre);\n    loop invariant x <= y ==> \\at(x, Pre) - x == y - \\at(y, Pre) - 2;\n*/\n```\n\nThese loop invariants express the difference between x and y, and they hold true before the loop execution, in every iteration of the loop, and after the loop termination. They also use the implication (==>) to handle the non-deterministic nature of the initial values of x and y.",
                    "First, let's note the variable assignments:\n- x and y are assigned non-deterministic integer values.\n\nNext, let's analyze the loop body and its condition:\n- The loop condition is (x > y).\n- In the loop body, x is decremented by 1 and y is incremented by 1 in each iteration.\n\nNow, we can output the loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant x >= \\old(x) - \\old(y);\n    loop invariant y <= \\old(y) + \\old(x);\n*/\n```",
                    "First, let's note the variable assignments in the program:\n- x and y are assigned non-deterministic values using unknown_int().\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is (x > y).\n\nNow, let's find the loop invariants:\n\n1. x and y are modified in each iteration, so we need to track their values.\n2. The difference between x and y is decreased by 2 in each iteration.\n\nHere are the loop invariants for the given program:\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant \\forall int k; (0 <= k <= (x - y) / 2) ==> (\\at(x, Pre) - k == x + 2 * k) && (\\at(y, Pre) + k == y - 2 * k);\n*/\n```",
                    "First, let's note down the variable assignments:\n- x is assigned an unknown integer value.\n- y is assigned an unknown integer value.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop condition is x > y.\n- In each iteration, x is decremented by 1 and y is incremented by 1.\n\nHere are the necessary loop invariants for the while loop:\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant \\old(x) - x == y - \\old(y);\n*/\n```",
                    "First, let's analyze the given program:\n\nPre-conditions and variable assignments:\n1. `x` is assigned an unknown integer value.\n2. `y` is assigned an unknown integer value.\n\nLoop condition:\n- The loop will run as long as `x > y`.\n\nNow, let's derive the loop invariants:\n\n1. `x` and `y` are both integers, so their values are bounded by the minimum and maximum values for integers.\n2. In each iteration, `x` is decremented by 1 and `y` is incremented by 1.\n3. The loop terminates when `x <= y`.\n\nGiven this analysis, the loop invariants are as follows:\n\n```\n/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant INT_MIN <= y <= INT_MAX;\n    loop invariant \\forall integer k; 0 <= k < \\loop_iteration_count ==> x - k > y + k;\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= y ==> \\at(x, Pre) - x == y - \\at(y, Pre);\n    loop invariant x <= y ==> \\at(x, Pre) - x == y - \\at(y, Pre) - 2;\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant x >= \\old(x) - \\old(y);\n    loop invariant y <= \\old(y) + \\old(x);\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall int k; (0 <= k <= (x - y) / 2) ==> (\\at(x, Pre) - k == x + 2 * k) && (\\at(y, Pre) + k == y - 2 * k);\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant \\old(x) - x == y - \\old(y);\n*/",
                    "/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant INT_MIN <= y <= INT_MAX;\n    loop invariant \\forall integer k; 0 <= k < \\loop_iteration_count ==> x - k > y + k;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> \\at(x, Pre) - x == y - \\at(y, Pre);\n    loop invariant x <= y ==> \\at(x, Pre) - x == y - \\at(y, Pre) - 2;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x >= \\old(x) - \\old(y);\n    loop invariant y <= \\old(y) + \\old(x);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall int k; (0 <= k <= (x - y) / 2) ==> (\\at(x, Pre) - k == x + 2 * k) && (\\at(y, Pre) + k == y - 2 * k);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable y. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\old(x) - x == y - \\old(y);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant INT_MIN <= y <= INT_MAX;\n    loop invariant \\forall integer k; 0 <= k < \\loop_iteration_count ==> x - k > y + k;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable INT_MAX. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": false,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> \\at(x, Pre) - x == y - \\at(y, Pre);\n    loop invariant x <= y ==> \\at(x, Pre) - x == y - \\at(y, Pre) - 2;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x >= \\old(x) - \\old(y);\n    loop invariant y <= \\old(y) + \\old(x);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall int k; (0 <= k <= (x - y) / 2) ==> (\\at(x, Pre) - k == x + 2 * k) && (\\at(y, Pre) + k == y - 2 * k);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\old(x) - x == y - \\old(y);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant INT_MIN <= x <= INT_MAX;\n    loop invariant INT_MIN <= y <= INT_MAX;\n    loop invariant \\forall integer k; 0 <= k < \\loop_iteration_count ==> x - k > y + k;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 11,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the loop in the program:\n\n```\nwhile (x > y) {\n    x = x-1;\n    y = y+1;\n}\n```\n\nNow, let's find the ranking function for this loop. We need to find an expression that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nIn this case, the ranking function is:\n\n```\nx - y\n```\n\nNow, let's output the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nExplanation of why it is a valid ranking function:\n\n1. The value of `x - y` is always positive for the loop to continue executing because the loop condition is `x > y`.\n\n2. With every iteration of the loop, `x` decreases by 1 and `y` increases by 1. So, the value of `x - y` decreases by 2 with each iteration.\n\nSince the ranking function is positive for the loop to continue executing and decreases with every iteration of the loop, it is a valid ranking function and proves the loop's termination.",
                    "First, let's identify the loop in the given program:\n\n```c\nwhile (x > y) {\n    x = x-1;\n    y = y+1;\n}\n```\n\nNow, let's find the ranking function for this loop:\n\n```c\n/*@\n    loop variant x - y;\n*/\n```\n\nExplanation:\n\nThe ranking function in this case is the difference between `x` and `y`. At the beginning of each loop iteration, `x > y` is checked. If this condition is true, the loop continues to execute, and if it's false, the loop terminates.\n\nDuring each iteration, `x` is decremented by 1, and `y` is incremented by 1. Therefore, the difference between `x` and `y` (i.e., `x - y`) decreases by 2 in every iteration of the loop.\n\nSince `x > y` must be true for the loop to continue executing, the value of `x - y` will always be positive. Furthermore, since the value of `x - y` decreases with every successive iteration, this ranking function ensures that the loop will eventually terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x > y) {\n    x = x-1;\n    y = y+1;\n}\n```\n\nNow, let's find the ranking function for this loop:\n\nThe loop executes as long as `x > y`. In each iteration, `x` decreases by 1 and `y` increases by 1. We can observe that the difference `x - y` is decreasing by 2 in each iteration. Therefore, we can use the expression `x - y` as our ranking function.\n\nNow let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of the ranking function `x - y` is positive for the loop to continue executing, as `x > y` is the loop condition.\n2. The value of the ranking function decreases with every successive iteration of the loop, as `x` decreases by 1 and `y` increases by 1, making the difference `x - y` decrease by 2 in each iteration.\n\nSince the ranking function is positive and decreases with each iteration, it ensures that the loop must terminate.",
                    "First, let's identify the variables that change during the loop execution. In this case, the variables are `x` and `y`. Then, we need to find an expression that decreases with every iteration of the loop and is positive for the loop to continue executing.\n\nIn this loop, the value of `x` decreases by 1 and the value of `y` increases by 1 in each iteration. The loop continues executing as long as `x > y`. We can use the difference `x - y` as a ranking function since it will always decrease in each iteration and be positive for the loop to continue executing.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. The value of `x - y` decreases with every iteration of the loop. In each iteration, `x` decreases by 1 and `y` increases by 1, so the difference `x - y` decreases by 2.\n\n2. The value of `x - y` is positive for the loop to continue executing. The loop condition is `x > y`, which means that `x - y` must be positive for the loop to continue.\n\nTherefore, the ranking function `x - y` proves that the loop must terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x > y) {\n    x = x-1;\n    y = y+1;\n}\n```\n\nNow, let's find the ranking function for this loop. The loop continues executing as long as `x > y`. In each iteration, `x` decreases by 1 and `y` increases by 1. So, we can use the difference `x - y` as the ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis is a valid ranking function because:\n\n1. `x - y` is positive for the loop to continue executing. When `x > y`, the value of `x - y` is positive.\n2. The value of `x - y` decreases with every successive iteration of the loop. In each iteration, `x` decreases by 1 and `y` increases by 1, so the difference `x - y` decreases by 2.\n\nSince the ranking function is positive and decreases with each iteration, it guarantees that the loop will eventually terminate."
                ],
                "output": [
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x-1;\n        y = y+1;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c"
        ],
        "skipped": [],
        "total": 22,
        "success_count": 11,
        "failure_count": 11,
        "success_rate": 0.5
    }
}