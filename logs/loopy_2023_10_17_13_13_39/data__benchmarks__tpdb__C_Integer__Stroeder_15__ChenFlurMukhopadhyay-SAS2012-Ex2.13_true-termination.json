{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
        "success": false,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values.\n\nLoop condition:\n- x - y > 0\n\nPost-condition:\n- There is no explicit post-condition, but we want to ensure that the loop terminates.\n\nWe can now determine the loop invariants:\n\n```\n/*@ \n    loop invariant x >= y ==> x >= 0;\n    loop invariant x < y ==> y >= 1;\n*/\n```",
                    "Pre-conditions:\n- x and y are assigned non-deterministic integer values at the beginning.\n\nLoop condition:\n- The loop continues executing while (x - y > 0).\n\nNow let's find the loop invariants:\n\n```\n/*@\n    loop invariant x <= y;\n    loop invariant y <= y + x;\n*/\n```",
                    "First, let's analyze the given code and make a note of pre-conditions, variable assignments, and loop conditions.\n\nPre-conditions / variable assignments:\n- x and y are initialized with unknown_int() values.\n\nLoop condition:\n- The loop will run as long as (x - y > 0).\n\nNow, let's find the loop invariants that hold true before the loop execution, during each iteration of the loop, and after the loop termination.\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant x >= 0;\n*/\n```\n\nHere's why these invariants hold:\n1. x >= y: Initially, x and y can have any value, but during each iteration of the loop, x is updated to (y - x) and the loop condition ensures that (x - y > 0), which means that x is always greater than or equal to y.\n2. x >= 0: Since x is always greater than or equal to y, and y is incremented by 1 in each iteration, x will always be greater than or equal to 0.\n\nThese loop invariants can help Frama-C verify the post-condition.",
                    "Let's analyze the given program step by step:\n\n1. Pre-conditions or variable assignments:\n   x and y are assigned non-deterministic integer values using `unknown_int()`.\n\n2. Analyze the loop body and note the loop condition:\n   The loop condition is `x - y > 0`.\n\nNow, we can output the loop invariants that are true before the loop execution, in every iteration of the loop, and after the loop termination, such that the loop invariants imply the post condition:\n\n```\n/*@ \n    loop invariant \\forall int k; 0 <= k <= y - x ==> x - y + k > 0;\n*/\n```",
                    "Pre-conditions and variable assignments:\n- x and y are assigned non-deterministic integer values (unknown_int() function).\n\nLoop condition:\n- The loop iterates while x - y > 0.\n\nNow, let's find the loop invariants:\n\n```\n/*@\n    loop invariant x - y <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> x > y;\n    loop invariant x - \\at(x, LoopEntry) == y - \\at(y, LoopEntry) - 1;\n*/\n```\n\nThese loop invariants are true:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination."
                ],
                "output": [
                    "/*@ \n    loop invariant x >= y ==> x >= 0;\n    loop invariant x < y ==> y >= 1;\n*/",
                    "/*@\n    loop invariant x <= y;\n    loop invariant y <= y + x;\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant x >= 0;\n*/",
                    "/*@ \n    loop invariant \\forall int k; 0 <= k <= y - x ==> x - y + k > 0;\n*/",
                    "/*@\n    loop invariant x - y <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> x > y;\n    loop invariant x - \\at(x, LoopEntry) == y - \\at(y, LoopEntry) - 1;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x >= 0;\n    loop invariant x < y ==> y >= 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y ==> x >= 0 is preserved but not established.\nloop invariant x < y ==> y >= 1 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x <= y;\n    loop invariant y <= y + x;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= y is preserved but not established.\nloop invariant y <= y + x is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x >= 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x >= y is neither established nor preserved.\nloop invariant x >= 0 is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant \\forall int k; 0 <= k <= y - x ==> x - y + k > 0;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant \\forall int k; 0 <= k <= y - x ==> x - y + k > 0 is neither established nor preserved.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x - y <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> x > y;\n    loop invariant x - \\at(x, LoopEntry) == y - \\at(y, LoopEntry) - 1;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x - y <= 0 ==> x <= y is inductive.\nloop invariant x - y > 0 ==> x > y is inductive.\nloop invariant x - \\at(x, LoopEntry) == y - \\at(y, LoopEntry) - 1 is preserved but not established.\n\n"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x >= 0;\n    loop invariant x < y ==> y >= 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\n\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x <= y;\n    loop invariant y <= y + x;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\n\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant x >= 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\n\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 2,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant \\forall int k; 0 <= k <= y - x ==> x - y + k > 0;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@\n    loop invariant x - y <= 0 ==> x <= y;\n    loop invariant x - y > 0 ==> x > y;\n    loop invariant x - \\at(x, LoopEntry) == y - \\at(y, LoopEntry) - 1;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i1: x - y <= 0 ==> x <= y;\nloop invariant i2: x - y > 0 ==> x > y;\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output_after_prune": true
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 2,
                "success": true,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\n\n\n\n\n\n\n\n\nloop invariant i9: x - y > 0 ==> x > y;\n\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                "checker_output": true
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    while (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's analyze the loop condition and the loop body. The loop condition is `x - y > 0`. Inside the loop, we have two assignments: `x = y - x` and `y = y + 1`. \n\nNow, let's find a ranking function that must decrease with every successive iteration of the loop and must be positive for the loop to continue executing.\n\nAfter analyzing the loop, we can see that the value of `y` is increasing with every iteration, and the value of `x` is updated based on the difference between `y` and `x`. To ensure the termination of the loop, we can use the difference `y - x` as a ranking function.\n\nHere is the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because:\n\n1. It is positive for the loop to continue executing, as the loop condition is `x - y > 0`, which means that `y - x > 0`.\n2. The value of the ranking function decreases with every successive iteration of the loop. In each iteration, `x` is updated to `y - x`, and `y` is incremented by 1. This means that the difference `y - x` decreases with every iteration, as `x` is getting closer to `y`. Eventually, the difference `y - x` will become non-positive, causing the loop to terminate.\n\nTherefore, the ranking function `y - x` is valid for the given loop, proving that the loop must terminate.",
                    "First, let's analyze the loop:\n\n```\nwhile (x - y > 0) {\n    x = y - x;\n    y = y + 1;\n}\n```\n\nWe can see that the loop will continue executing as long as `x - y > 0`. In each iteration, `x` is updated to `y - x` and `y` is incremented by 1.\n\nNow, let's find a ranking function. We will use a lexicographic ranking function with two expressions: `x - y` and `-y`.\n\nSo the ranking function is:\n\n```\n/*@\n    loop variant x - y;\n    loop variant -y;\n*/\n```\n\nNow let's explain why it is a valid ranking function:\n\n1. The value of each expression is positive for the loop to continue executing: `x - y > 0` by the loop condition and `-y` is also positive since `x - y > 0` implies `x > y`, so `y` must be negative.\n\n2. Either the first expression decreases or remains the same, and if it remains the same, the second expression decreases: In each iteration, `x` is updated to `y - x`, which means the value of `x - y` may decrease or remain the same. However, if it remains the same, then `y` is incremented by 1, and the value of `-y` decreases as `y` becomes more negative.\n\nTherefore, the provided ranking function is valid for this loop, and it helps prove that the loop must terminate.",
                    "First, let's analyze the loop and its conditions. The loop continues executing while `(x - y) > 0`, which means `x > y`. In each iteration of the loop, the following updates happen:\n\n1. `x` is updated to `y - x`.\n2. `y` is updated to `y + 1`.\n\nNow, let's find a ranking function for this loop. A suitable ranking function for this loop would be `y - x`.\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nLet's prove that this is a valid ranking function:\n\n1. **Decreasing**: In each iteration, `x` is updated to `y - x`, and `y` is updated to `y + 1`. Thus, the value of the expression `y - x` will decrease with each iteration, as the new value of `x` is the old value of `y - x`, and `y` is increased by 1.\n\n2. **Positive**: The loop executes while `(x - y) > 0`, which means `x > y`. So, the value of the expression `y - x` will always be positive when the loop executes.\n\nSince the ranking function `y - x` is both decreasing and positive, it is a valid ranking function for the given loop.",
                    "First, let's analyze the loop:\n\n```\nwhile (x - y > 0) {\n    x = y - x;\n    y = y + 1;\n}\n```\n\nThe loop continues executing as long as `x - y > 0`. In each iteration, `x` is updated to `y - x` and `y` is incremented by 1. Now, let's find the ranking function.\n\nConsider the expression `y - x`. Initially, `x - y > 0`, which means `y - x < 0`. Now, after one iteration of the loop, the new value of `x` is `y - x`, and `y` is incremented by 1. So, the new value of the expression `y - x` is `(y + 1) - (y - x) = x + 1`.\n\nSince the value of the expression `y - x` increases in every iteration and eventually becomes non-negative when `x - y <= 0`, it is a valid ranking function for this loop.\n\nHere's the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n``` \n\nThe ranking function `y - x` is valid because it is initially negative, and its value increases with each loop iteration, ensuring that the loop will terminate when the value is no longer positive.",
                    "First, let's identify the loop in the program:\n\n```\nwhile (x - y > 0) {\n    x = y - x;\n    y = y + 1;\n}\n```\n\nThe loop continues to execute as long as the condition `(x - y > 0)` holds. Now let's find an expression that decreases with each iteration of the loop.\n\nWe can use the expression `x - y` as our ranking function. Let's see why this is a valid ranking function:\n\n1. The loop condition ensures that `x - y` is positive while the loop is executing. If `x - y` is not positive, the loop will not execute.\n2. After each iteration, the value of `x` becomes `y - x`, and the value of `y` becomes `y + 1`. So, the new value of `x - y` will be `(y - x) - (y + 1)` which simplifies to `-x - 1`. This means that the value of `x - y` decreases by at least 1 in each iteration.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions of being positive while the loop executes and decreasing with each iteration of the loop, proving that the loop must terminate."
                ],
                "output": [
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant x - y;\n    loop variant -y;\n*/",
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant x - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i9: x - y > 0 ==> x > y;\nloop variant y - x;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x - y > 0 ==> x > y is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "\n        typedef struct {\n        int a;\nint b;\n} variant_expression;\n\n/*@ \n            predicate lexicographic(variant_expression v1, variant_expression v2) =\n        (v1.a >= 0 && v1.a > v2.a) ||\n (v1.b >= 0 && v1.a == v2.a && v1.b > v2.b);\n*/\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    //@ ghost variant_expression measure = { x - y, -y };\n/*@\nloop invariant i9: x - y > 0 ==> x > y;\nloop invariant measure.a == x - y && measure.b == -y;\nloop variant measure for lexicographic;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    \n//@ ghost measure.a = x - y;\n//@ ghost measure.b = -y;\n}\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x - y > 0 ==> x > y is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i9: x - y > 0 ==> x > y;\nloop variant y - x;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x - y > 0 ==> x > y is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i9: x - y > 0 ==> x > y;\nloop variant y - x;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x - y > 0 ==> x > y is inductive.\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false, true} bool;\n\nint main() {\n    int x, y;\n    x = unknown_int();\n    y = unknown_int();\n    /*@\nloop invariant i9: x - y > 0 ==> x > y;\nloop variant x - y;\n*/\nwhile (x - y > 0) {\n        x = y - x;\n        y = y + 1;\n    }\n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "loop invariant x - y > 0 ==> x > y is inductive.\n\nLoop variant is Invalid.\n"
                    }
                ],
                "success": false
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c"
        ],
        "skipped": [],
        "total": 85,
        "success_count": 40,
        "failure_count": 45,
        "success_rate": 0.47058823529411764
    }
}