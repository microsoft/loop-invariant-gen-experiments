{
    "logs": {
        "file": "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c",
        "benchmark_code": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
        "success": true,
        "log": [
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_invariants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "You are a helpful AI software assistant that reasons about how code behaves. Given a program, you can find loop invariants, which can then be used to verify some property in the program. \nFrama-C is a software verification tool for C programs. The input to Frama-C is a C program file with ACSL (ANSI/ISO C Specification Language) annotations.\nFor the given program, find the necessary loop invariants of the while loop to help Frama-C verify the post-condition.\n\nInstructions:\n- Make a note of the pre-conditions or variable assignments in the program.\n- Analyze the loop body and make a note of the loop condition. \n- Output loop invariants that are true \n(i) before the loop execution, \n(ii) in every iteration of the loop and \n(iii) after the loop termination, \nsuch that the loop invariants imply the post condition.\n- If a loop invariant is a conjunction, split it into its parts.\n- Output all the loop invariants in one code block. For example:\n```\n/*@ \n    loop invariant i1;\n    loop invariant i2;\n*/\n```\nRules:\n- **Do not use variables or functions that are not declared in the program.** \n- **Do not make any assumptions about functions whose definitions are not given.**\n- **All undefined variables contain garbage values. Do not use variables that have garbage values.**\n- **Do not use keywords that are not supported in ACSL annotations for loops.**\n- **Variables that are not explicitly initialized, could have garbage values. Do not make any assumptions about such values.**\n- **Do not use the \\at(x, Pre) notation for any variable x.**\n- **Do not use non-deterministic function calls.**"
                    },
                    {
                        "role": "user",
                        "content": "\nConsider the following C program:\n```\n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}\n```\n\nYou are allowed to use implication to take care of the conditional nature of the code. Use implication (==>) instead of using if-then.\n\nFor all variables, add conjunctions that bound the maximum and minimum values that they can take, if such bounds exist.\n\nIf a variable is always equal to or smaller or larger than another variable, add a conjunction for their relation.\n\nIf the assertion is guarded by a condition, use the guard condition in an implication.\n\nIf certain variables are non-deterministic at the beginning or end of the loop, use an implication to make the invariant trivially true at that location. \n\nOutput the loop invariants for the loop in the program above. Let's think step by step."
                    },
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n1. x and y are assigned non-deterministic integer values.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n1. The loop condition is (x > y).\n\nConsidering the given rules and instructions, the loop invariants for the while loop in the program are:\n\n```\n/*@ \n    loop invariant x >= y ==> x > \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/\n```",
                    "Let's analyze the given program:\n\n1. Two integer variables x and y are declared.\n2. x and y are assigned non-deterministic values through unknown_int() function calls.\n3. The loop condition is (x > y).\n4. Inside the loop body, x is incremented by 1 and y is incremented by 2 in each iteration.\n\nNow, let's determine the loop invariants:\n\n1. Before the loop execution:\n   - x and y have non-deterministic values.\n2. In every iteration of the loop:\n   - The difference between y and x is decreasing in each iteration.\n3. After the loop termination:\n   - The loop terminates when x is no longer greater than y.\n\nTaking these observations into account, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x <= y ==> \\old(x) <= \\old(y);\n    loop invariant x > y ==> \\old(x) > \\old(y);\n    loop invariant x > y ==> y - x <= \\old(y) - \\old(x);\n*/\n```",
                    "First, let's make a note of the pre-conditions or variable assignments in the program:\n- x and y are assigned non-deterministic integer values.\n\nNow, let's analyze the loop body and make a note of the loop condition:\n- The loop executes while x > y.\n- In each iteration, x is incremented by 1 and y is incremented by 2.\n\nNow, let's write the loop invariants:\n\n```\n/*@ \n    loop invariant x <= y || x >= y;\n    loop invariant (x <= y) ==> (x + 1 > y);\n*/\n```\n\nThese loop invariants hold:\n(i) before the loop execution,\n(ii) in every iteration of the loop, and\n(iii) after the loop termination.\n\nThey also imply the post condition, which is trivially true in this case.",
                    "First, let's analyze the given program:\n- Variables x and y are assigned non-deterministic values using `unknown_int()`.\n- The while loop continues executing as long as x > y.\n- In each iteration of the loop, x is incremented by 1 and y is incremented by 2.\n\nNow, we can derive the loop invariants:\n1. Since x and y are incremented by 1 and 2 respectively in each iteration, the difference between x and y will be reduced by 1 in each iteration. So, the difference between x and y is decreasing.\n2. The loop condition is x > y, so before the loop execution and in every iteration of the loop, x > y holds.\n\nConsidering these points, we can write the loop invariants as follows:\n\n```\n/*@ \n    loop invariant x >= y;\n    loop invariant \\forall integer k; 0 <= k <= (x - y) ==> x - y - k == \\at(x, Pre) - \\at(y, Pre) - 2 * k;\n*/\n```",
                    "First, let's make a note of the variable assignments in the program:\n- x = unknown_int();\n- y = unknown_int();\n\nNext, let's analyze the loop condition and body:\n- The loop condition is (x > y)\n- The loop body increments x by 1 and y by 2 in each iteration\n\nNow let's derive the loop invariants:\n\n```\n/*@ \n    loop invariant x <= y ==> x >= \\at(x, Pre);\n    loop invariant x <= y ==> y <= \\at(y, Pre);\n    loop invariant x > y ==> x < \\at(x, Pre) + \\at(y, Pre);\n    loop invariant x > y ==> y > \\at(y, Pre);\n*/\n```"
                ],
                "output": [
                    "/*@ \n    loop invariant x >= y ==> x > \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                    "/*@ \n    loop invariant x <= y ==> \\old(x) <= \\old(y);\n    loop invariant x > y ==> \\old(x) > \\old(y);\n    loop invariant x > y ==> y - x <= \\old(y) - \\old(x);\n*/",
                    "/*@ \n    loop invariant x <= y || x >= y;\n    loop invariant (x <= y) ==> (x + 1 > y);\n*/",
                    "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall integer k; 0 <= k <= (x - y) ==> x - y - k == \\at(x, Pre) - \\at(y, Pre) - 2 * k;\n*/",
                    "/*@ \n    loop invariant x <= y ==> x >= \\at(x, Pre);\n    loop invariant x <= y ==> y <= \\at(y, Pre);\n    loop invariant x > y ==> x < \\at(x, Pre) + \\at(y, Pre);\n    loop invariant x > y ==> y > \\at(y, Pre);\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x > \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) <= \\old(y);\n    loop invariant x > y ==> \\old(x) > \\old(y);\n    loop invariant x > y ==> y - x <= \\old(y) - \\old(x);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: \\old undefined in this context. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y || x >= y;\n    loop invariant (x <= y) ==> (x + 1 > y);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "loop invariant x <= y || x >= y is inductive.\nloop invariant (x <= y) ==> (x + 1 > y) is preserved but not established.\n\n"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall integer k; 0 <= k <= (x - y) ==> x - y - k == \\at(x, Pre) - \\at(y, Pre) - 2 * k;\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 15: unbound logic variable x. Ignoring loop annotation"
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> x >= \\at(x, Pre);\n    loop invariant x <= y ==> y <= \\at(y, Pre);\n    loop invariant x > y ==> x < \\at(x, Pre) + \\at(y, Pre);\n    loop invariant x > y ==> y > \\at(y, Pre);\n*/",
                        "checker_output_for_invariants": false,
                        "checker_message_for_invariants": "Annotation error on line 14: unbound logic variable x. Ignoring loop annotation"
                    }
                ],
                "success": false
            },
            {
                "step": "Houdini for individual completion",
                "success": true,
                "completions": [
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y ==> x > \\at(x, Pre);\n    loop invariant y >= \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 4,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> \\old(x) <= \\old(y);\n    loop invariant x > y ==> \\old(x) > \\old(y);\n    loop invariant x > y ==> y - x <= \\old(y) - \\old(x);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 1,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y || x >= y;\n    loop invariant (x <= y) ==> (x + 1 > y);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\nloop invariant i1: x <= y || x >= y;\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": true
                    },
                    {
                        "num_solver_calls": 3,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x >= y;\n    loop invariant \\forall integer k; 0 <= k <= (x - y) ==> x - y - k == \\at(x, Pre) - \\at(y, Pre) - 2 * k;\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    },
                    {
                        "num_solver_calls": 5,
                        "success": false,
                        "invariants": "/*@ \n    loop invariant x <= y ==> x >= \\at(x, Pre);\n    loop invariant x <= y ==> y <= \\at(y, Pre);\n    loop invariant x > y ==> x < \\at(x, Pre) + \\at(y, Pre);\n    loop invariant x > y ==> y > \\at(y, Pre);\n*/",
                        "code_after_prune": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output_after_prune": false
                    }
                ]
            },
            {
                "step": "Houdini for combined completion",
                "solver_calls": 13,
                "success": false,
                "code_with_combined_invariants": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                "checker_output": false
            },
            {
                "step": "Prompting LLM",
                "generating_annotation": "loop_variants",
                "success": true,
                "llm_chat": [
                    {
                        "role": "system",
                        "content": "A ranking function (also called variant) is an expression  over program variables that are live as the loop head. The value of the expression must decrease with every successive iteration of the loop. And the value must be positive for the loop to continue executing. Finding a ranking function helps prove that the loop must terminate.\nLexicographic ranking functions are a generation. They are a sequence of expressions (e1, e2, ...) with the property that the value of each expression must be positive for the loop to execute. Either e1 must decrease or its value remains the same. If its value remains the same then the value of e2 must decrease.\nFind the ranking function for the loop in the following program and explain why it is a valid ranking function.\n\nInstructions:\nOutput the ranking function in one code block, in ACSL syntax. For example,\n```\n/*@\n    loop variant v;\n*/\n```\nIf the ranking function is a sequence of expressions, output them in different lines in their lexicographic order. "
                    },
                    {
                        "role": "user",
                        "content": "Consider the following C program:  \n```  \n#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    while (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}\n```\nFind the ranking function for the loop in the given program and explain why it is a valid ranking function. Let's think step by step. "
                    },
                    "First, let's identify the variables that change in the loop. In this case, both `x` and `y` change in the loop. `x` is incremented by 1, and `y` is incremented by 2.\n\nThe loop continues to execute as long as `x > y`. So, we need to find an expression that decreases with every iteration of the loop and is positive as long as the loop continues to execute.\n\nOne such expression can be `(y - x)`. Let's analyze this expression:\n\n1. When the loop starts, `x > y`, so `(y - x)` is negative.\n2. In each iteration, `x` is incremented by 1 and `y` is incremented by 2. So, the value of `(y - x)` increases by 1 in each iteration.\n3. The loop stops when `x <= y`, at which point `(y - x)` becomes non-negative.\n\nNow, let's write the ranking function in ACSL syntax:\n\n```\n/*@\n    loop variant y - x;\n*/\n```\n\nThis ranking function is valid because:\n1. Its value is negative when the loop starts, indicating that the loop should continue to execute.\n2. Its value increases with every iteration of the loop, ensuring that the loop will eventually terminate.\n3. When the loop terminates, the value of the ranking function is non-negative, satisfying the termination condition.",
                    "First, let's identify the loop and its conditions. The loop is `while (x > y)`, and inside the loop, `x` is incremented by 1, and `y` is incremented by 2.\n\nNow let's find the ranking function. In this case, we can use the difference between `x` and `y` as the ranking function. Let's denote it as `v`:\n\n```\nv = y - x\n```\n\nNow let's check if this is a valid ranking function:\n\n1. The value of `v` must be positive for the loop to continue executing. This is true because the loop condition is `x > y`, which means `y - x < 0`.\n\n2. The value of `v` must decrease with every successive iteration of the loop. In each iteration, `x` is incremented by 1, and `y` is incremented by 2. Therefore, the difference between `y` and `x` decreases by 1 in each iteration (`(y + 2) - (x + 1) = y - x - 1`).\n\nSince the ranking function `v` meets these conditions, it is a valid ranking function. Here is the ACSL syntax for the ranking function:\n\n```\n/*@\n    loop variant y - x;\n*/\n```",
                    "First, let's identify the loop and its variables:\n\n```\nwhile (x > y) {\n    x = x+1;\n    y = y+2;\n}\n```\n\nIn this loop, `x` and `y` are the variables that change with each iteration. The loop continues as long as `x > y`.\n\nNow, let's find the ranking function. We want an expression involving `x` and `y` such that it decreases with each iteration and is positive when the loop continues.\n\nA valid ranking function for this loop is `x - y`. Here's why:\n\n1. The value of the ranking function `x - y` is positive when the loop continues, since `x > y`.\n2. The value of the ranking function decreases with each iteration. In each iteration, `x` is incremented by 1 and `y` is incremented by 2. So, the difference `(x - y)` decreases by 1 with each iteration.\n\nNow let's write the ranking function using ACSL syntax:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nThis ranking function is valid because it satisfies the conditions for a ranking function: it is positive when the loop continues, and its value decreases with each iteration. This ensures that the loop must eventually terminate.",
                    "First, let's identify the loop in the given program:\n\n```\nwhile (x > y) {\n    x = x+1;\n    y = y+2;\n}\n```\n\nNow, we need to find a ranking function for this loop that decreases with every iteration and is positive when the loop condition is true.\n\nLet's consider the expression `x - y` as a potential ranking function:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nNow let's see if it is a valid ranking function:\n\n1. The value of the expression must be positive for the loop to continue executing:\n\n   When `x > y`, the value of `x - y` is positive. So, this condition is satisfied.\n\n2. The value of the expression must decrease with every successive iteration of the loop:\n\n   In each iteration, `x` is incremented by 1 and `y` is incremented by 2. So, the value of `x - y` decreases by 1 in each iteration. This condition is also satisfied.\n\nThus, the ranking function `x - y` is a valid ranking function for the given loop.",
                    "First, let's identify the loop and its conditions:\n\n```\nwhile (x > y) {\n    x = x + 1;\n    y = y + 2;\n}\n```\n\nThe loop condition is `x > y`, and inside the loop, `x` is incremented by 1 while `y` is incremented by 2.\n\nNow let's find a ranking function for this loop. We want an expression that decreases with each iteration and is positive as long as the loop condition holds. \n\nWe can use the ranking function `x - y`:\n\n```\n/*@\n    loop variant x - y;\n*/\n```\n\nTo prove this is a valid ranking function, we need to show that:\n\n1. The value of the ranking function is positive when the loop condition holds.\n2. The value of the ranking function decreases with each loop iteration.\n\nLet's check these conditions:\n\n1. When `x > y`, the value of `x - y` is positive, since `x` is greater than `y`. So the first condition is satisfied.\n2. Inside the loop, `x` is incremented by 1 and `y` is incremented by 2. Therefore, the value of `x - y` decreases by 1 with each loop iteration. Hence, the second condition is satisfied.\n\nSince both conditions are satisfied, the ranking function `x - y` is valid for the given loop."
                ],
                "output": [
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant y - x;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/",
                    "/*@\n    loop variant x - y;\n*/"
                ]
            },
            {
                "step": "Checking individual completion",
                "solver_calls": 5,
                "completions": [
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant y - x;\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant y - x;\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output": false,
                        "checker_message": "\n\nLoop variant is Invalid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    },
                    {
                        "candidate_with_combined_invariants_and_variant": "#define assume(e) if(!(e)) return 0;\nextern int unknown(void);\nextern int unknown_int(void);\n\ntypedef enum {false,true} bool;\n\nint main() {\n    int x;\n    int y;\n    x = unknown_int();\n    y = unknown_int();\n    \n    /*@\n\nloop variant x - y;\n*/\nwhile (x > y) {\n        x = x+1;\n        y = y+2;\n    }\n    \n    return 0;\n}",
                        "checker_output": true,
                        "checker_message": "\n\nLoop variant is Valid.\n"
                    }
                ],
                "success": true
            }
        ]
    },
    "stats": {
        "success": [
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/BrockschmidtCookFuhs-CAV2013-Introduction_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.12.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/WhileDecr.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.09_assume.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-speedpldi2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Bangalore_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Break.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaB2.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LogMult.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/KroeningSharyginaTsitovichWintersteiger-CAV2010-Ex_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_3_T.c",
            "../data/benchmarks/tpdb/C/Ultimate/Parallel_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex2.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random1d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.11.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/genady_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Nyala-2lex_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex3b.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.05.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.20_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_ex1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.05.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.10_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.04.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA7.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig6_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_java_Continue1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/aaron2_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex1.04_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChawdharyCookGulwaniSagivYang-ESOP2008-random2d_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA4.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_fermat.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Overflow.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_2_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaC3.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_b.13.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulavaniGulwani-CAV2008-Fig1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_a.06.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-ndecr_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-TACAS2011-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/HeizmannHoenickeLeikePodelski-ATVA2013-Fig9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PastaA8.c"
        ],
        "failure": [
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Hanoi_plus_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/UrbanMine-ESOP2014-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Factorial.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Swingers.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.07_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Piecewise_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PodelskiRybalchenko-LICS2004-Fig2-TACAS2011-Fig3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.03_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Lobnya-Boolean-Reordered_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.22_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8a-modified_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.09_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-WST2014-Ex5_false-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.18_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex4.01_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Ton_Chanh_15/Benghazi_nondet_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.02_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/GulwaniJainKoskinen-PLDI2009-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.16_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure2Phase_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/PodelskiRybalchenko-LICS2004-Fig2_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Cairo_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/LeikeHeizmann-TACAS2014-Fig1_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Pure3Phase_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/svcomp_c.07.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.03_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/PlusSwap.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/aaron3_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-MultiBranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-counterex1a_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex1.01_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/LeikeHeizmann-TACAS2014-Ex9_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/min_rf_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Et1.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/2Nested_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/ChenFlurMukhopadhyay-SAS2012-Ex2.08_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Masse-VMCAI2014-Fig1b_true-termination.c",
            "../data/benchmarks/tpdb/C/Ultimate/Gothenburg_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/NoriSharma-FSE2013-Fig8_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/CookSeeZuleger-TACAS2013-Fig8b_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/Toulouse-BranchesToLoop_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/MenloPark_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.13_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/AliasDarteFeautrierGonnord-SAS2010-rsd_true-termination.c",
            "../data/benchmarks/tpdb/C/SV-COMP_Termination_Category/TelAviv-Amir-Minimum_true-termination.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex3.09_true-termination.c",
            "../data/benchmarks/non_termination/loop/Signed_Overflow_Error_1_T.c",
            "../data/benchmarks/non_termination/loop/Incorrect_Bit_Calculation_3_T.c",
            "../data/benchmarks/tpdb/C_Integer/Stroeder_15/ChenFlurMukhopadhyay-SAS2012-Ex2.06_false-termination.c"
        ],
        "skipped": [],
        "total": 104,
        "success_count": 53,
        "failure_count": 51,
        "success_rate": 0.5096153846153846
    }
}